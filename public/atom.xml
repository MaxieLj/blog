<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Maxie&#39;blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-01-14T14:03:13.888Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>MaxieLj</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>算法-最大子序和</title>
    <link href="http://yoursite.com/2019/01/14/%E7%AE%97%E6%B3%95-%E6%9C%80%E5%A4%A7%E5%AD%90%E5%BA%8F%E5%92%8C/"/>
    <id>http://yoursite.com/2019/01/14/算法-最大子序和/</id>
    <published>2019-01-14T13:43:04.000Z</published>
    <updated>2019-01-14T14:03:13.888Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><h3 id="英文"><a href="#英文" class="headerlink" title="英文"></a>英文</h3><p>Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.</p><p>Example:</p><p>Input: [-2,1,-3,4,-1,2,1,-5,4],<br>Output: 6<br>Explanation: [4,-1,2,1] has the largest sum = 6.</p><h3 id="中文"><a href="#中文" class="headerlink" title="中文"></a>中文</h3><p>给定一个整数数组 nums ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ul><li>动态规划。</li><li>把求联系最大子序列转化为求当前节点与上一节点的最大值。</li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxSubArray</span><span class="params">(<span class="keyword">int</span>* nums, <span class="keyword">int</span> numsSize)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(numsSize == <span class="number">0</span>)&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(numsSize &lt;=<span class="number">1</span>)&#123;</div><div class="line">        <span class="keyword">return</span> *nums;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> tmp = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> pre =  *nums ;</div><div class="line">    nums++;</div><div class="line">    </div><div class="line">    <span class="keyword">int</span> ret = pre;</div><div class="line">   <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i&lt; numsSize;i++)</div><div class="line">   &#123;</div><div class="line">      </div><div class="line">       tmp = (pre + *nums) &gt; *nums ? (pre + *nums) : *nums;</div><div class="line">       </div><div class="line">           <span class="comment">// printf("tmp:%d\n", tmp);</span></div><div class="line">           <span class="keyword">if</span>(tmp &gt; ret)</div><div class="line">           &#123;</div><div class="line">               ret = tmp;</div><div class="line">           &#125;</div><div class="line">        </div><div class="line">       </div><div class="line">       pre = tmp;</div><div class="line">       nums++;</div><div class="line">   &#125;</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;h3 id=&quot;英文&quot;&gt;&lt;a href=&quot;#英文&quot; class=&quot;headerlink&quot; title=&quot;英文&quot;&gt;&lt;/a&gt;英文&lt;/h3&gt;&lt;p&gt;Giv
      
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>算法-求最大正方形面积</title>
    <link href="http://yoursite.com/2019/01/14/%E7%AE%97%E6%B3%95-%E6%B1%82%E6%9C%80%E5%A4%A7%E6%AD%A3%E6%96%B9%E5%BD%A2%E9%9D%A2%E7%A7%AF/"/>
    <id>http://yoursite.com/2019/01/14/算法-求最大正方形面积/</id>
    <published>2019-01-14T09:18:04.000Z</published>
    <updated>2019-01-14T11:25:28.948Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><h3 id="英文"><a href="#英文" class="headerlink" title="英文"></a>英文</h3><p>Given a 2D binary matrix filled with 0’s and 1’s, find the largest square containing only 1’s and return its area.</p><p>Example:</p><p>Input: </p><p>1 0 1 0 0<br>1 0 1 1 1<br>1 1 1 1 1<br>1 0 0 1 0</p><p>Output: 4</p><h3 id="中文"><a href="#中文" class="headerlink" title="中文"></a>中文</h3><p>在一个由 0 和 1 组成的二维矩阵内，找到只包含 1 的最大正方形，并返回其面积。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ul><li>动态规划(主要用户将一个复杂的问题分解为多个建单的问题，求最优解时)。</li><li>声明一个空间和原有二位数据大小一样的二位数组(tmp[i][j])。</li><li>计算每一个节点最大正方形的边长，并存储与该节点（利用之前节点计算当前节点最大正方形边长）。</li><li>取tmp[i][j]得最大值的平凡返回。<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2></li></ul><p><code>第一版代码</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">maximalSquare</span><span class="params">($matrix)</span> </span>&#123;</div><div class="line">      $hight =  count($matrix);</div><div class="line">      <span class="keyword">if</span>($hight&lt;<span class="number">1</span>)</div><div class="line">      &#123;</div><div class="line">          <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">      &#125;</div><div class="line">      $wide = <span class="number">0</span>;</div><div class="line">      <span class="keyword">if</span>($hight &gt; <span class="number">0</span>)&#123;</div><div class="line">          $wide= count($matrix[<span class="number">0</span>]);</div><div class="line">      &#125;</div><div class="line">      $ret = <span class="number">0</span>;</div><div class="line">      <span class="keyword">for</span>($i = <span class="number">1</span>; $i&lt;= $hight; $i++)</div><div class="line">      &#123;</div><div class="line">          $tmp = <span class="keyword">$this</span>-&gt;getRet($matrix, $i, $hight, $wide);</div><div class="line">          <span class="keyword">if</span>($ret &lt;$tmp )&#123;</div><div class="line">              $ret = $tmp;</div><div class="line">          &#125;</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">return</span> $ret;</div><div class="line">  &#125;</div><div class="line">    </div><div class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getRet</span><span class="params">($matrix, $i, $hight, $wide)</span></span></div><div class="line">  &#123;</div><div class="line">    <span class="comment">//起始点纵向坐标  </span></div><div class="line">    <span class="keyword">for</span>($h = <span class="number">0</span>; $h&lt;= $hight-$i; $h++ )</div><div class="line">    &#123;   </div><div class="line">        <span class="keyword">for</span>($j = <span class="number">0</span>;$j &lt;= $wide-$i; $j++)</div><div class="line">        &#123;</div><div class="line">            <span class="comment">//h 为起点高，j为起点宽。</span></div><div class="line">            $ret = <span class="number">1</span>;</div><div class="line">            <span class="keyword">for</span>($m = $h; $m &lt;$h + $i; $m++)&#123;</div><div class="line">                <span class="keyword">for</span>($k = $j; $k &lt; $j + $i; $k++)&#123;</div><div class="line">                    <span class="keyword">if</span>($matrix[$m][$k] == <span class="number">0</span>)</div><div class="line">                    &#123;</div><div class="line">                        $ret = <span class="number">0</span>;</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span>($ret == <span class="number">0</span>) &#123;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>($ret == <span class="number">1</span>)&#123;</div><div class="line">                <span class="keyword">return</span> $i*$i;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">  &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure><p>用php跑测试用例，跑了2.5秒。😓</p><p>回头用c重写下试试。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">待定</div></pre></td></tr></table></figure></p><h2 id="最优解"><a href="#最优解" class="headerlink" title="最优解"></a>最优解</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maximalSquare</span><span class="params">(<span class="keyword">char</span>[][] matrix)</span> </span>&#123;</div><div class="line">        <span class="comment">/**</span></div><div class="line">        dp[i][j]表示以第i行第j列为右下角所能构成的最大正方形边长, 则递推式为: </div><div class="line">        dp[i][j] = 1 + min(dp[i-1][j-1], dp[i-1][j], dp[i][j-1]);</div><div class="line">        **/</div><div class="line">        <span class="keyword">int</span> m = matrix.length;</div><div class="line">        <span class="keyword">if</span>(m &lt; <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> n = matrix[<span class="number">0</span>].length;</div><div class="line">        <span class="keyword">int</span> max = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[m+<span class="number">1</span>][n+<span class="number">1</span>];</div><div class="line">        </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123;</div><div class="line">                <span class="keyword">if</span>(matrix[i-<span class="number">1</span>][j-<span class="number">1</span>] == <span class="string">'1'</span>) &#123;</div><div class="line">                    dp[i][j] = <span class="number">1</span> + Math.min(dp[i-<span class="number">1</span>][j-<span class="number">1</span>], Math.min(dp[i-<span class="number">1</span>][j], dp[i][j-<span class="number">1</span>]));</div><div class="line">                    max = Math.max(max, dp[i][j]); </div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> max*max;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;h3 id=&quot;英文&quot;&gt;&lt;a href=&quot;#英文&quot; class=&quot;headerlink&quot; title=&quot;英文&quot;&gt;&lt;/a&gt;英文&lt;/h3&gt;&lt;p&gt;Giv
      
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>二叉树最近公共祖先</title>
    <link href="http://yoursite.com/2019/01/10/%E7%AE%97%E6%B3%95-%E4%BA%8C%E5%8F%89%E6%A0%91%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/"/>
    <id>http://yoursite.com/2019/01/10/算法-二叉树最近公共祖先/</id>
    <published>2019-01-10T14:59:11.000Z</published>
    <updated>2019-01-15T02:27:26.525Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个二叉树, 找到该树中两个指定节点的最近公共祖先。</p><p>百度百科中最近公共祖先的定义为：“对于有根树 T 的两个结点 p、q，最近公共祖先表示为一个结点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（一个节点也可以是它自己的祖先）。”</p><p>例如，给定如下二叉树:  root = [3,5,1,6,2,0,8,null,null,7,4]</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="原有思路"><a href="#原有思路" class="headerlink" title="原有思路"></a>原有思路</h3><ul><li>查询有两个子节点有两个目标节点的节点。</li><li>然后查询当前节点的左右子节点，如果有一个子节点的子节点只包含一个目标节点，则他的父节点则为最近公共祖先。<h2 id="改良后思路"><a href="#改良后思路" class="headerlink" title="改良后思路"></a>改良后思路</h2></li><li>中序遍历所有节点，如果当前接电接点或者其子节点匹配到了目标节点，则返回当前节点。</li><li>如果当前节点的左右节点分别匹配到了一个目标节点（root == null || p || q 直接返回root），则当前节点是最近公共祖先。<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2></li></ul><p><code>原版代码</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">leftFist</span><span class="params">(<span class="keyword">struct</span> TreeNode* root, <span class="keyword">struct</span> TreeNode* p, <span class="keyword">struct</span> TreeNode*  q)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span>(root-&gt;left) &#123;</div><div class="line">        ret =  ret + leftFist(root-&gt;left, p, q);</div><div class="line">    &#125; </div><div class="line">    </div><div class="line">    <span class="keyword">if</span>(root-&gt;right)&#123;</div><div class="line">        ret = ret+ leftFist(root-&gt;right, p, q);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(root == p) &#123;</div><div class="line">        ret +=<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(root == q) &#123;</div><div class="line">        ret +=<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for a binary tree node.</div><div class="line"> * struct TreeNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     struct TreeNode *left;</div><div class="line"> *     struct TreeNode *right;</div><div class="line"> * &#125;;</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">struct</span> TreeNode* <span class="title">lowestCommonAncestor</span><span class="params">(<span class="keyword">struct</span> TreeNode* root, <span class="keyword">struct</span> TreeNode* p, <span class="keyword">struct</span> TreeNode* q)</span> </span>&#123;</div><div class="line">    <span class="keyword">struct</span> TreeNode* retRoot = <span class="literal">NULL</span> ;</div><div class="line">    <span class="keyword">int</span> retSum =  leftFist(root, p, q);</div><div class="line">    </div><div class="line">    <span class="keyword">if</span>(retSum ==  <span class="number">2</span>) &#123;</div><div class="line">        <span class="keyword">int</span> retSumleft = <span class="literal">NULL</span>;</div><div class="line">        <span class="keyword">if</span>(root-&gt;left) &#123;</div><div class="line">            retSumleft = leftFist(root-&gt;left, p, q);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(<span class="number">0</span> &lt; retSumleft &amp;&amp;  retSumleft &lt; <span class="number">2</span>) &#123;</div><div class="line">            <span class="comment">// printf("retSumleft:%d,", root-&gt;left-&gt;val);</span></div><div class="line">            <span class="keyword">return</span> root;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">int</span> retSumright = <span class="literal">NULL</span>;</div><div class="line">        <span class="keyword">if</span>(root-&gt;right) &#123;</div><div class="line">            retSumright = leftFist(root-&gt;right, p, q);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(<span class="number">0</span> &lt; retSumright &amp;&amp; retSumright&lt; <span class="number">2</span>) &#123;</div><div class="line">            <span class="comment">// printf("retSumright:%d", root-&gt;right-&gt;val);</span></div><div class="line">            <span class="keyword">return</span> root;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(root-&gt;left) &#123;</div><div class="line">        retRoot =  lowestCommonAncestor(root-&gt;left, p, q);</div><div class="line">        <span class="keyword">if</span>(retRoot) &#123;</div><div class="line">            <span class="keyword">return</span> retRoot;</div><div class="line">        &#125;</div><div class="line">    &#125; </div><div class="line">    </div><div class="line">    <span class="keyword">if</span>(root-&gt;right)&#123;</div><div class="line">        retRoot =  lowestCommonAncestor(root-&gt;right, p, q);</div><div class="line">        <span class="keyword">if</span>(retRoot) &#123;</div><div class="line">            <span class="keyword">return</span> retRoot;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> retRoot;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>c语言让我跑了1888ms。。</p><h3 id="优化解"><a href="#优化解" class="headerlink" title="优化解"></a>优化解</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for a binary tree node.</div><div class="line"> * struct TreeNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     struct TreeNode *left;</div><div class="line"> *     struct TreeNode *right;</div><div class="line"> * &#125;;</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">struct</span> TreeNode* <span class="title">lowestCommonAncestor</span><span class="params">(<span class="keyword">struct</span> TreeNode* root, <span class="keyword">struct</span> TreeNode* p, <span class="keyword">struct</span> TreeNode* q)</span> </span>&#123;</div><div class="line">   <span class="keyword">if</span>(root == <span class="literal">NULL</span> || root == p || root == q) &#123;</div><div class="line">       <span class="keyword">return</span> root;</div><div class="line">   &#125;</div><div class="line">    <span class="keyword">struct</span> TreeNode* left = lowestCommonAncestor(root-&gt;left, p ,q);</div><div class="line">    <span class="keyword">struct</span> TreeNode* right = lowestCommonAncestor(root-&gt;right, p ,q);</div><div class="line">    </div><div class="line">    <span class="keyword">if</span>(left == <span class="literal">NULL</span> &amp;&amp; right == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">    <span class="keyword">if</span>(left != <span class="literal">NULL</span> &amp;&amp; right != <span class="literal">NULL</span>) <span class="keyword">return</span> root;</div><div class="line">    <span class="keyword">return</span> (left == <span class="literal">NULL</span> ? right : left);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><code>12ms</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;p&gt;给定一个二叉树, 找到该树中两个指定节点的最近公共祖先。&lt;/p&gt;
&lt;p&gt;百度百科中最近公共祖先的定义为：“对于有根树 T 的两个结点 p、q
      
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>合并k个链表</title>
    <link href="http://yoursite.com/2019/01/10/%E7%AE%97%E6%B3%95-%E5%90%88%E5%B9%B6k%E4%B8%AA%E9%93%BE%E8%A1%A8/"/>
    <id>http://yoursite.com/2019/01/10/算法-合并k个链表/</id>
    <published>2019-01-10T08:09:18.000Z</published>
    <updated>2019-01-10T08:11:01.540Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>合并 k 个排序链表，返回合并后的排序链表。请分析和描述算法的复杂度。</p><p>示例:</p><p>输入:<br>[<br>  1-&gt;4-&gt;5,<br>  1-&gt;3-&gt;4,<br>  2-&gt;6<br>]<br>输出: 1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4-&gt;5-&gt;6</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><ul><li>如果理由<code>最后选择</code>进行合并链表，这是时间复杂度是<code>kn</code>如果 <code>k</code> 很大的时候时间复杂度简直爆炸，还不如直接合并。</li><li>如果使用归并排序 时间复杂度是<code>nlogk</code>。</li><li>如果直接两两暴力合并，时间复杂度是<code>n(k^2+k)/2</code></li><li>所以当k很大的时候，最优解应该是并归。<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">struct</span> ListNode* <span class="title">merge</span><span class="params">(<span class="keyword">struct</span> ListNode* l1, <span class="keyword">struct</span> ListNode* l2)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">struct</span> ListNode* l3 = <span class="literal">NULL</span>;</div><div class="line">    <span class="keyword">struct</span> ListNode* p = <span class="literal">NULL</span>;</div><div class="line">    <span class="keyword">struct</span> ListNode* tmp = <span class="literal">NULL</span>;</div><div class="line">    <span class="keyword">if</span>(!l1 &amp;&amp; !l2) &#123;</div><div class="line">        <span class="keyword">return</span> l3;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(l1 &amp;&amp; !l2) &#123;</div><div class="line">        <span class="keyword">return</span> l1;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(!l1 &amp;&amp; l2)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> l2;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//设置头结点</span></div><div class="line">    <span class="keyword">if</span>(l1-&gt;val &lt; l2-&gt;val) &#123;</div><div class="line">        l3 = l1;</div><div class="line">        l1 = l1-&gt;next;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        l3 = l2;</div><div class="line">        l2 = l2-&gt;next;</div><div class="line">    &#125;    </div><div class="line">    p = l3;</div><div class="line">    <span class="keyword">while</span>(l1 &amp;&amp; l2)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(l1-&gt;val &lt; l2-&gt;val)</div><div class="line">        &#123;</div><div class="line">            tmp = l1-&gt;next;</div><div class="line">            p-&gt;next = l1;</div><div class="line">            l1 = tmp;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            tmp = l2-&gt;next;</div><div class="line">            p-&gt;next = l2;</div><div class="line">            l2 = tmp;</div><div class="line">        &#125;</div><div class="line">        p = p-&gt;next;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span>(l1) &#123;</div><div class="line">        p-&gt;next = l1;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(l2)</div><div class="line">    &#123;</div><div class="line">        p-&gt;next = l2;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// struct ListNode* tmp3= l3;</span></div><div class="line">    <span class="comment">// while(tmp3)</span></div><div class="line">    <span class="comment">// &#123;</span></div><div class="line">    <span class="comment">//     printf("%d,", tmp3-&gt;val);</span></div><div class="line">    <span class="comment">//     tmp3 = tmp3-&gt;next;</span></div><div class="line">    <span class="comment">// &#125;</span></div><div class="line">    <span class="comment">// printf("\n");</span></div><div class="line">    <span class="keyword">return</span> l3;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for singly-linked list.</div><div class="line"> * struct ListNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     struct ListNode *next;</div><div class="line"> * &#125;;</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">struct</span> ListNode* <span class="title">mergeKLists</span><span class="params">(<span class="keyword">struct</span> ListNode** lists, <span class="keyword">int</span> listsSize)</span> </span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(listsSize == <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(listsSize == <span class="number">1</span>) &#123;</div><div class="line">        <span class="keyword">return</span> (*lists);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">struct</span> ListNode* ret = (*lists);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i &lt; listsSize; i++)</div><div class="line">    &#123;</div><div class="line">        lists++;</div><div class="line">        ret = merge((*lists), ret);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ret;   </div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>尝试寻找更优解法。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;p&gt;合并 k 个排序链表，返回合并后的排序链表。请分析和描述算法的复杂度。&lt;/p&gt;
&lt;p&gt;示例:&lt;/p&gt;
&lt;p&gt;输入:&lt;br&gt;[&lt;br&gt;  1-
      
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>tcp三次握手与四次挥手</title>
    <link href="http://yoursite.com/2019/01/09/tcp%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E4%B8%8E%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B/"/>
    <id>http://yoursite.com/2019/01/09/tcp三次握手与四次挥手/</id>
    <published>2019-01-09T14:16:19.000Z</published>
    <updated>2019-01-09T14:17:44.197Z</updated>
    
    <content type="html"><![CDATA[<h2 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h2><p><code>三次握手</code> 是指tcp建立连接时候需要服务端和客户端发送三个网络包。<br>三次握手的目的是链接与服务器端口，并建立tcp连接，并同步连接双方的序列号和确认号，并交换tcp窗口大小信息。</p><p><img src="/photo/img/tcp三次握手与四次挥手/tcp握手.png" alt="image"><br>在tcp/ip协议中, tcp提供可靠的链接服务，采用三次握手建立一个链接，如上图所示。</p><ul><li>第一次握手：建立连接时，客户端发送SYN包到服务器，同时进入SYN_SEND状态，等待服务器B确认。</li><li>第二次握手：服务器B收到SYN包，确认客户端的SYN(ACK+1),同时自己发送一个SYN包，此时服务器进入SYN_RECV状态。</li><li>第三次握手： 客户端收到服务器的SYN+ACK包，向服务器发送确认包（ACK+1）,此包发送完毕，客户端和服务端进入RESTABLISHED状态，完成三次握手。<h2 id="四次挥手"><a href="#四次挥手" class="headerlink" title="四次挥手"></a>四次挥手</h2>tcp断开连接需要发送四个包，所以称之为 <code>四次挥手</code>,客户端和服务端都可以发起<code>挥手</code>。</li></ul><p><img src="/photo/img/tcp三次握手与四次挥手/tcp四次挥手.png" alt="image"></p><p>由于TCP是全双工的，所以需要双向关闭。原则是当一方完成数据发送后就只能发送一个FIN来终止这个方向的链接。收到一个FIN只意味着这个一个方向没有数据发送，一个tcp链接收到一个FIN后仍然能发送数据。首先关闭的以防进行主动关闭，另外以防执行被动关闭。</p><ul><li>主动方发送一个FIN,用来告诉被动方我发送完毕，请求关闭链接。</li><li>被动方收到主动方的FIN请求，会回发一个ACK(我知道了)，但是并没有统一关闭链接。</li><li>当被动方也发送完数据了，会发送一个FIN包，高速主动方我也发送完了。</li><li>主动方收到被动方的FIN包，回复ACK(确认收到)，此时tcp断开连接。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;三次握手&quot;&gt;&lt;a href=&quot;#三次握手&quot; class=&quot;headerlink&quot; title=&quot;三次握手&quot;&gt;&lt;/a&gt;三次握手&lt;/h2&gt;&lt;p&gt;&lt;code&gt;三次握手&lt;/code&gt; 是指tcp建立连接时候需要服务端和客户端发送三个网络包。&lt;br&gt;三次握手的目的是链接与服
      
    
    </summary>
    
      <category term="网络" scheme="http://yoursite.com/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="网络" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>算法-链表相交(ntersection of Two Linked Lists)</title>
    <link href="http://yoursite.com/2019/01/08/%E7%AE%97%E6%B3%95-%E9%93%BE%E8%A1%A8%E7%9B%B8%E4%BA%A4/"/>
    <id>http://yoursite.com/2019/01/08/算法-链表相交/</id>
    <published>2019-01-08T09:11:56.000Z</published>
    <updated>2019-01-08T11:34:02.619Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>编写一个程序，找到两个单链表相交的起始节点<br>注意：</p><ul><li>如果两个链表没有交点，返回 null.</li><li>在返回结果后，两个链表仍须保持原有的结构。</li><li>可假定整个链表结构中没有循环。</li><li>程序尽量满足 O(n) 时间复杂度，且仅用 O(1) 内存。</li></ul><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>架设存在两个链表 <code>headA</code> <code>headB</code>。定义两个指针 <code>a</code> <code>b</code>分别对应<code>headA</code> <code>headB</code>, 循环<code>a</code> <code>b</code> 直至到达链表的尾部，然后将<code>a</code>指向<code>headB</code>、将<code>b</code>指向<code>headA</code> ,继续循环直至出现<code>a==b</code>的情况，或者任意一个链表到达终点。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for singly-linked list.</div><div class="line"> * struct ListNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     struct ListNode *next;</div><div class="line"> * &#125;;</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">struct</span> ListNode *<span class="title">getIntersectionNode</span><span class="params">(<span class="keyword">struct</span> ListNode *headA, <span class="keyword">struct</span> ListNode *headB)</span> </span>&#123;</div><div class="line">    <span class="keyword">struct</span> ListNode *a = headA;</div><div class="line">    <span class="keyword">struct</span> ListNode *b = headB;</div><div class="line">    <span class="keyword">int</span> aDone =<span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> bDone =<span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(a == b) &#123;</div><div class="line">            <span class="keyword">return</span> a;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(a &amp;&amp; a-&gt;next) &#123;</div><div class="line">            a =  a-&gt;next;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">if</span>(aDone != <span class="number">1</span>) &#123;</div><div class="line">               a = headB;</div><div class="line">               aDone = <span class="number">1</span>; </div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">        &#125; </div><div class="line">        </div><div class="line">        <span class="keyword">if</span>(b &amp;&amp; b-&gt;next )</div><div class="line">        &#123;</div><div class="line">            b = b-&gt;next;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">if</span>(bDone != <span class="number">1</span>) &#123;</div><div class="line">                b = headA;</div><div class="line">                bDone =<span class="number">1</span>;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">        &#125;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">    </div><div class="line">   </div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;p&gt;编写一个程序，找到两个单链表相交的起始节点&lt;br&gt;注意：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果两个链表没有交点，返回 null.&lt;/li&gt;
&lt;li
      
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>数据库隔离级别</title>
    <link href="http://yoursite.com/2018/12/23/%E6%95%B0%E6%8D%AE%E5%BA%93%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB/"/>
    <id>http://yoursite.com/2018/12/23/数据库隔离级别/</id>
    <published>2018-12-23T12:34:25.000Z</published>
    <updated>2019-01-08T10:59:07.515Z</updated>
    
    <content type="html"><![CDATA[<p>SQL标准规范中定义了四种数据库隔离级别。每种隔离级别带来的系统开销是不一样的。通常较低的隔离级别的系统开销会更低，可以执行更高的并发。</p><h2 id="READ-COMMITTED-未提交读"><a href="#READ-COMMITTED-未提交读" class="headerlink" title="READ COMMITTED(未提交读)"></a>READ COMMITTED(未提交读)</h2><p>顾名思义，未提交读隔离级别中，事物的修改即使没有提交，对其他事务也是可见的。事务可以读取为未提交的数据，也成为<code>脏读</code>。READ COMMITED 性能上不会有跟很大的优势，但是却会导致很多的问题，在实际应用中很少使用。</p><p>eg:<br>业务场景支付扣款。当用户统一时刻发生一笔充值500，和一笔扣款200业务时。 扣款读到是未执行的充值事务金额，账户余额500元，但是充值事务回滚了，这种情况下数据出现问题，所以未提交读是一种不可靠的事务。</p><h2 id="READ-COMMITED-提交读"><a href="#READ-COMMITED-提交读" class="headerlink" title="READ COMMITED(提交读)"></a>READ COMMITED(提交读)</h2><p>多数数据库的隔离级是提交读(比如Sql Server , Oracle)，但是mysql不是。<br>提交读的含义是：一个事务只能看到已经提交的事务所做的修改。也就是说事务和事务之前在提交前是相互不可见的。这个级别又称为不可重复读，因为每次读取的结果可能是不一样的。</p><p>eg:<br>当我们拿着银行卡去消费时候，查询到卡里还有2000元，这时准备消费。与此同时这张卡的钱被老婆转账了（已经转出去2000元），当我们在扣款你的时候会提示余额不足。<br>提交读避免了<code>脏读</code>，但是却产生了<code>不可重复读</code>（同一事务内）。</p><h2 id="Repeatable-read-（重复读）"><a href="#Repeatable-read-（重复读）" class="headerlink" title="Repeatable read （重复读）"></a>Repeatable read （重复读）</h2><p>重复读，保证了在同一个事务内读取同一条数据是不变的，但是却无法保证我们读取（同一事务内）同一表里的数据量是一致的。但是却会产生幻读（幻行）。</p><p>例如消费记录表，我们在打印信用卡的消费记录时查询出来只有一条消费记录80（这是另外一个事务无法改变的），但是在我们打印的时候，老婆又消费了1000元（另外一个事务，但是没有对原来的80元进行修改），我们打印出来的结果是两条记录 80 +1000，这就是幻行。</p><h2 id="Serializable-（序列化）"><a href="#Serializable-（序列化）" class="headerlink" title="Serializable （序列化）"></a>Serializable （序列化）</h2><p>Serializable 通过强制事务串行执行避免了欢读。但是Serializable在执行的时候会对每一样的数据都加上锁，会导致大量的超时和锁竞争。只有在数据一致性非常重要，且并发不是很大情况选，可以选用这种隔离级别。</p><h2 id="几个名词"><a href="#几个名词" class="headerlink" title="几个名词"></a>几个名词</h2><h3 id="脏读"><a href="#脏读" class="headerlink" title="脏读"></a>脏读</h3><p>指的是在A事务内，多次读取同一一个数据。与此同时还有另外一个B事务对同一数据进行了修改，但是未提交。这时就会产生事务A两次读取的数据不一致，一个是事务B未执行前的数据，一个是读取事务B未提交的数据。</p><h3 id="不可重复读。"><a href="#不可重复读。" class="headerlink" title="不可重复读。"></a>不可重复读。</h3><p>指的是同一事务内，无法对同一个数据多次读取，因为两次读取可能是不一致的（因为没有对 数据写 加锁）。</p><h3 id="幻读"><a href="#幻读" class="headerlink" title="幻读"></a>幻读</h3><p>幻读是在<code>可重复读</code>的隔离级别下产生的问题。<code>可重复读</code>虽然对数据加写锁，但是却没对表加锁，造成每次读取表的数据量是不一致的，所以又称<code>幻行</code>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;SQL标准规范中定义了四种数据库隔离级别。每种隔离级别带来的系统开销是不一样的。通常较低的隔离级别的系统开销会更低，可以执行更高的并发。&lt;/p&gt;
&lt;h2 id=&quot;READ-COMMITTED-未提交读&quot;&gt;&lt;a href=&quot;#READ-COMMITTED-未提交读&quot; clas
      
    
    </summary>
    
      <category term="数据库" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="数据库" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>kong</title>
    <link href="http://yoursite.com/2018/12/02/kong/"/>
    <id>http://yoursite.com/2018/12/02/kong/</id>
    <published>2018-12-02T11:02:17.000Z</published>
    <updated>2019-01-08T10:54:35.667Z</updated>
    
    <content type="html"><![CDATA[<p>当前系统，环境centos7<br>起kong服务需要做：</p><ul><li>安装<ul><li>kong</li><li>pgsql</li><li>dashboard(可选，用来通过api来管理空)</li></ul></li><li>配置<ul><li>kong.conf（配置数据库等）、配置路由。</li><li>pgsql配置（新建数据库）</li><li>配置kong路由</li></ul></li><li>注意事项<ul><li>尽量安装高版本，防止和pgsql不兼容。</li></ul></li></ul><h1 id="1-安装kong"><a href="#1-安装kong" class="headerlink" title="1.安装kong"></a>1.安装kong</h1><ul><li>需要安装kong</li><li>安装pgsql</li></ul><p>官方文档提供的快速安装地址<code>https://docs.konghq.com/install/centos/?_ga=2.182378343.1594956911.1543481061-735966922.1539239867</code></p><p>step1:<br><code>baseurl=https://kong.bintray.com/kong-community-edition-rpm/centos/7</code> 各个版本的地址，下载要安装的版本。<br>wget <code>https://kong.bintray.com/kong-community-edition-rpm/centos/7/kong-community-edition-0.14.1.el7.noarch.rpm</code><br>srep2:<br>执行下边命令:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo yum install epel-release</div><div class="line">sudo yum install kong-community-edition-0.14.1.*.noarch.rpm --nogpgcheck</div></pre></td></tr></table></figure></p><p>安装完成，这个时候是起不来额，因为没有安装pgsql。</p><h1 id="2-安装postgresql10"><a href="#2-安装postgresql10" class="headerlink" title="2.安装postgresql10"></a>2.安装postgresql10</h1><p>尽量安装高版本，防止和pgsql不兼容,为了避免采坑，选择<code>kong-community-edition-0.14.1.el7.noarch.rpm</code>版本，当然也在测试机测试没有问题。<br>官方地址<code>https://www.postgresql.org/download/linux/redhat/</code> 可以选择对需安装的对应的版本，会自动生成安装命令，我选择的是10.6</p><p>postgresql10安装与启动<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">yum install https://download.postgresql.org/pub/repos/yum/10/redhat/rhel-7-x86_64/pgdg-centos10-10-2.noarch.rpm    </div><div class="line">yum install postgresql10    </div><div class="line">yum install postgresql10-server</div><div class="line">/usr/pgsql-10/bin/postgresql-10-setup initdb  </div><div class="line">systemctl enable postgresql-10  </div><div class="line">systemctl start postgresql-10</div></pre></td></tr></table></figure></p><p>安装完成后，还需要做：</p><ol><li>配置postgreps用户。</li><li>新增和数据库。</li><li>配置远程连接。</li></ol><p>添加用户以及新增数据：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">sudo -s  //取得root权限</div><div class="line">su - postgres </div><div class="line">psql -U postgres //连接本地数据</div><div class="line"></div><div class="line">postgres=# CREATE USER kong WITH LOGIN PASSWORD &apos;kong&apos;;  //创建用户</div><div class="line">postgres-# CREATE ROLE //返回CREATE ROLE，表示创建用户成功</div><div class="line"></div><div class="line">postgres=# CREATE DATABASE kong; //创建数据库</div><div class="line">CREATE DATABASE //返回CREATE DATABASE，表示创建数据库成功.</div></pre></td></tr></table></figure></p><p>然后初始化数据库:<code>sudo /usr/local/bin/kong migrations up</code></p><p>修改pgsql,配置远程连接：<br>执行<code>vim /var/lib/pgsql/10/data/pg_hba.conf</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//修改 127.0.0.1/32 为trust</div><div class="line">host    all             all             127.0.0.1/32            trust</div><div class="line">//添加下边这条记录，用于ssl连接</div><div class="line">host    all             all             0.0.0.0/0               md5</div></pre></td></tr></table></figure></p><p><img src="/photo/img/kong/pg_hba.conf.png" alt="image"></p><p>执行<code>vim /var/lib/pgsql/10/data/postgresql.conf</code><br>添加一下信息:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">listen_addresses = &apos;*&apos; //允许所有的ip访问postgres</div></pre></td></tr></table></figure></p><h1 id="3-配置kong-conf"><a href="#3-配置kong-conf" class="headerlink" title="3.配置kong.conf"></a>3.配置kong.conf</h1><p>执行 <code>vi /etc/kong/kong.conf</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">pg_host = 127.0.0.1             # The PostgreSQL host to connect to.</div><div class="line">pg_port = 5432                  # The port to connect to.</div><div class="line">pg_user = kong                  # The username to authenticate if required.</div><div class="line">pg_password = kong                  # The password to authenticate if required.</div><div class="line">pg_database = kong              # The database name to connect to.</div></pre></td></tr></table></figure><p>执行<code>sudo /usr/local/bin/kong start -c /etc/kong/kong.conf</code>,提示<code>Kong started</code>则代表启动成功</p><p><code>curl -i http://localhost:8001/</code>,测试kong是否启动。也可以访问<code>http://host:8000/</code>,来确定kong是否起来。因为此时我们尚未配置任何服务、路由，访问会返回404，如下：<br><img src="/photo/img/kong/kong-404.png" alt="image"></p><h1 id="4-配置dashboard"><a href="#4-配置dashboard" class="headerlink" title="4.配置dashboard"></a>4.配置dashboard</h1><p>前置操作：需要安装nodejs<br><code>sudo yum install nodejs</code></p><p>kong提供一套api，用于动态管服务、路由、插件等。当然有开源的dashboard，这样我们操作起来更方便。<br>开源项目地址<code>https://github.com/PGBI/kong-dashboard</code></p><p>安装命令<code>npm install -g kong-dashboard</code></p><p>启动命令：<code>nohup kong-dashboard start --kong-url http://localhost:8001 /dev/null 2&gt;&amp;1 &amp;</code></p><p>为了安全起见，可以吧启动kong的账户密码放在work的环境变量里。<br>修改work的环境变量 vi ~.bash_profile，添加password参数。<br>kong-dashboard start \<br>  –kong-url <a href="http://kong:8001" target="_blank" rel="noopener">http://kong:8001</a> \<br>  –basic-auth work=$password</p><h1 id="5-日志目录以及启动相关"><a href="#5-日志目录以及启动相关" class="headerlink" title="5.日志目录以及启动相关"></a>5.日志目录以及启动相关</h1><p>查看日志文件<code>tail -f /usr/local/kong/logs/error.log</code></p><p>kong配置文件默认地址为 /ect/kong/kong.conf<br>想要删除postgreSql，需要先断开所有连接<code>sudo ps aux | grep scidb | xargs sudo kill -9</code></p><p>启动命令<code>sudo /usr/local/bin/kong start -c /etc/kong/kong.conf</code></p><h1 id="6-遇到问题"><a href="#6-遇到问题" class="headerlink" title="6.遇到问题"></a>6.遇到问题</h1><p>沙盒项目部署的时候，我把项目上传到了 /home/work/kong/目录下，并将其软连到了/usr/local/share/lua/目录下。、</p><p>再启动kong时，报错:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">2018/12/06 15:26:01 [error] 7684#0: init_worker_by_lua error: /usr/local/share/lua/5.1/kong/init.lua:244: module &apos;resty.worker.events&apos; not found:Failed loading module resty.worker.events in LuaRocks rock lua-resty-worker-events 0.3.3-1</div><div class="line">no field package.preload[&apos;resty.worker.events&apos;]</div><div class="line">no file &apos;./resty/worker/events.lua&apos;</div><div class="line">no file &apos;./resty/worker/events/init.lua&apos;</div><div class="line">no file &apos;/usr/local/openresty/site/lualib/resty/worker/events.ljbc&apos;</div><div class="line">no file &apos;/usr/local/openresty/site/lualib/resty/worker/events/init.ljbc&apos;</div><div class="line">no file &apos;/usr/local/openresty/lualib/resty/worker/events.ljbc&apos;</div><div class="line">no file &apos;/usr/local/openresty/lualib/resty/worker/events/init.ljbc&apos;</div><div class="line">no file &apos;/usr/local/openresty/site/lualib/resty/worker/events.lua&apos;</div><div class="line">no file &apos;/usr/local/openresty/site/lualib/resty/worker/events/init.lua&apos;</div><div class="line">no file &apos;/usr/local/openresty/lualib/resty/worker/events.lua&apos;</div><div class="line">no file &apos;/usr/local/openresty/lualib/resty/worker/events/init.lua&apos;</div><div class="line">no file &apos;/usr/local/openresty/luajit/share/luajit-2.1.0-beta3/resty/worker/events.lua&apos;</div><div class="line">no file &apos;/usr/local/share/lua/5.1/resty/worker/events.lua&apos;</div><div class="line">no file &apos;/usr/local/share/lua/5.1/resty/worker/events/init.lua&apos;</div><div class="line">no file &apos;/usr/local/openresty/luajit/share/lua/5.1/resty/worker/events.lua&apos;</div><div class="line">no file &apos;/usr/local/openresty/luajit/share/lua/5.1/resty/worker/events/init.lua&apos;</div><div class="line">no file &apos;/root/.luarocks/share/lua/5.1/resty/worker/events.lua&apos;</div><div class="line">no file &apos;/root/.luarocks/share/lua/5.1/resty/worker/events/init.lua&apos;</div><div class="line">no file &apos;/usr/local/openresty/site/lualib/resty/worker/events.so&apos;</div><div class="line">no file &apos;/usr/local/openresty/lualib/resty/worker/events.so&apos;</div><div class="line">no file &apos;./resty/worker/events.so&apos;</div><div class="line">no file &apos;/usr/local/lib/lua/5.1/resty/worker/events.so&apos;</div><div class="line">no file &apos;/usr/local/openresty/luajit/lib/lua/5.1/resty/worker/events.so&apos;</div><div class="line">no file &apos;/usr/local/lib/lua/5.1/loadall.so&apos;</div><div class="line">no file &apos;/root/.luarocks/lib/lua/5.1/resty/worker/events.so&apos;</div><div class="line">no file &apos;/usr/local/openresty/site/lualib/resty.so&apos;</div><div class="line">no file &apos;/usr/local/openresty/lualib/resty.so&apos;</div><div class="line">no file &apos;./resty.so&apos;</div><div class="line">no file &apos;/usr/local/lib/lua/5.1/resty.so&apos;</div><div class="line">no file &apos;/usr/local/openresty/luajit/lib/lua/5.1/resty.so&apos;</div><div class="line">no file &apos;/usr/local/lib/lua/5.1/loadall.so&apos;</div><div class="line">no file &apos;/root/.luarocks/lib/lua/5.1/resty.so&apos;</div></pre></td></tr></table></figure><p>最终我把项目上传到了/usr/local/share/releas/目录下，并将其软连到了/usr/local/share/lua/下，启动并没有出现改问题.</p><p>线索：<br><code>https://github.com/Kong/kong/issues/2838</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;当前系统，环境centos7&lt;br&gt;起kong服务需要做：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;安装&lt;ul&gt;
&lt;li&gt;kong&lt;/li&gt;
&lt;li&gt;pgsql&lt;/li&gt;
&lt;li&gt;dashboard(可选，用来通过api来管理空)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;配置&lt;ul&gt;
      
    
    </summary>
    
      <category term="kong" scheme="http://yoursite.com/categories/kong/"/>
    
    
      <category term="kong" scheme="http://yoursite.com/tags/kong/"/>
    
  </entry>
  
  <entry>
    <title>如何建立一个composer私有包</title>
    <link href="http://yoursite.com/2018/09/28/%E5%A6%82%E4%BD%95%E5%BB%BA%E7%AB%8B%E4%B8%80%E4%B8%AAcomposer%E7%A7%81%E6%9C%89%E5%8C%85/"/>
    <id>http://yoursite.com/2018/09/28/如何建立一个composer私有包/</id>
    <published>2018-09-28T09:11:00.000Z</published>
    <updated>2019-01-08T10:58:36.541Z</updated>
    
    <content type="html"><![CDATA[<p>最近发现分布式锁在很多项目都有所用到,所以想把之前完成的代码封装成pear包,供大家使用。<br>但是发现自己对composer并不是很熟悉,所以学习一番,在此记录以防自己忘记。</p><h2 id="新建仓库"><a href="#新建仓库" class="headerlink" title="新建仓库"></a>新建仓库</h2><p>$ git clone git@gitlab.renrenche.com:web/jugg.git<br>$ cd jugg</p><h2 id="conmposer-初始化"><a href="#conmposer-初始化" class="headerlink" title="conmposer 初始化"></a>conmposer 初始化</h2><p>composer init </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">//包名</div><div class="line">Package name (&lt;vendor&gt;/&lt;name&gt;) [lijian/test_composer]: jugg/jugg</div><div class="line">//描述</div><div class="line">Description []: 基于redis的分布式锁</div><div class="line">//作者</div><div class="line">Author [, n to skip]: Maxie lj &lt;xiaolijian110@163.com&gt;</div><div class="line">//最小稳定版本</div><div class="line">Minimum Stability []: dev</div><div class="line">//遵循协议</div><div class="line">License []: MIT</div><div class="line"></div><div class="line">//依赖</div><div class="line">Would you like to define your dependencies (require) interactively [yes]? yes</div><div class="line"></div><div class="line">Search for a package: php</div><div class="line"></div><div class="line">Enter the version constraint to require (or leave blank to use the latest version):</div><div class="line">Using version ^7.0 for php</div></pre></td></tr></table></figure><p>生成composer.json文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;name&quot;: &quot;jugg/jugg&quot;,</div><div class="line">    &quot;description&quot;: &quot;基于redis的分布式锁&quot;,</div><div class="line">    &quot;type&quot;: &quot;library&quot;,</div><div class="line">    &quot;require&quot;: &#123;</div><div class="line">        &quot;php&quot;: &quot;^7.0&quot;</div><div class="line">    &#125;,</div><div class="line">    &quot;require-dev&quot;: &#123;</div><div class="line">        &quot;php&quot;: &quot;7&quot;</div><div class="line">    &#125;,</div><div class="line">    &quot;license&quot;: &quot;MIT&quot;,</div><div class="line">    &quot;authors&quot;: [</div><div class="line">        &#123;</div><div class="line">            &quot;name&quot;: &quot;Maxie lj&quot;,</div><div class="line">            &quot;email&quot;: &quot;xiaolijian110@163.com&quot;</div><div class="line">        &#125;</div><div class="line">    ],</div><div class="line">    &quot;minimum-stability&quot;: &quot;dev&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="生成自动加载（psr-4）"><a href="#生成自动加载（psr-4）" class="headerlink" title="生成自动加载（psr-4）"></a>生成自动加载（psr-4）</h2><p>在composer.json 文件里添加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;name&quot;: &quot;jugg/jugg&quot;,</div><div class="line">    &quot;description&quot;: &quot;基于redis的分布式锁&quot;,</div><div class="line">    &quot;type&quot;: &quot;library&quot;,</div><div class="line">    &quot;license&quot;: &quot;MIT&quot;,</div><div class="line">    &quot;authors&quot;: [</div><div class="line">        &#123;</div><div class="line">            &quot;name&quot;: &quot;Maxie lj&quot;,</div><div class="line">            &quot;email&quot;: &quot;xiaolijian110@163.com&quot;</div><div class="line">        &#125;</div><div class="line">    ],</div><div class="line">    &quot;autoload&quot;: &#123;</div><div class="line">    &quot;psr-4&quot;: &#123;</div><div class="line">      &quot;Jugg\\&quot;: &quot;jugg&quot;</div><div class="line">    &#125;</div><div class="line">    &#125;,</div><div class="line">    &quot;minimum-stability&quot;: &quot;dev&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>执行<code>composer install</code></p><p>就会生成一个自动加载文件</p><p><img src="/photo/img/创建一个composer包/自动加载目录.png" alt="image"></p><p>然后我们就可以按照psr-4规范开发我们pear包了。</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>我们可以在测试文件里引入autoload.php文件,这样就实现了自动加载。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">require</span> <span class="string">'./vendor/autoload.php'</span>;</div></pre></td></tr></table></figure><p>这样就可以正常的测试了</p><h2 id="上传代码到gitlab或者github"><a href="#上传代码到gitlab或者github" class="headerlink" title="上传代码到gitlab或者github"></a>上传代码到gitlab或者github</h2><p>当我们开完的时候,需要将我们的代码上传到远程代码库。</p><p>需要注意的事 一定不要讲.git文件上传。</p><h2 id="其他项目引入"><a href="#其他项目引入" class="headerlink" title="其他项目引入"></a>其他项目引入</h2><p>因为没有上传到pagelist,所以我们暂时是公司私有包。</p><p>如果需要再项目里引入私有包,需要在项目的composer.json文件里添加。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&quot;jugg&quot;: &#123;</div><div class="line">        &quot;type&quot;:&quot;package&quot;,</div><div class="line">        &quot;package&quot;: &#123;</div><div class="line">          &quot;name&quot;: &quot;jugg&quot;,</div><div class="line">          &quot;version&quot;: &quot;v1.1&quot;,</div><div class="line">          &quot;source&quot;: &#123;</div><div class="line">            &quot;type&quot;: &quot;git&quot;,</div><div class="line">            &quot;url&quot;: &quot;git@gitlab.renrenche.com:web/jugg.git&quot;,</div><div class="line">            &quot;reference&quot;: &quot;master&quot;</div><div class="line">          &#125;,</div><div class="line">          &quot;autoload&quot;: &#123;</div><div class="line">            &quot;psr-4&quot;: &#123;</div><div class="line">              &quot;Jugg\\&quot;: &quot;jugg&quot;</div><div class="line">            &#125;</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">      &#125;</div></pre></td></tr></table></figure><p>完整文件:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;name&quot;: &quot;laravel/lumen&quot;,</div><div class="line">    &quot;description&quot;: &quot;The Laravel Lumen Framework.&quot;,</div><div class="line">    &quot;keywords&quot;: [</div><div class="line">        &quot;framework&quot;,</div><div class="line">        &quot;laravel&quot;,</div><div class="line">        &quot;lumen&quot;</div><div class="line">    ],</div><div class="line">    &quot;license&quot;: &quot;MIT&quot;,</div><div class="line">    &quot;type&quot;: &quot;project&quot;,</div><div class="line">    &quot;repositories&quot;: &#123;</div><div class="line">      &quot;packagist&quot;: &#123;</div><div class="line">        &quot;type&quot;: &quot;composer&quot;,</div><div class="line">        &quot;url&quot;: &quot;https://packagist.phpcomposer.com&quot;</div><div class="line">      &#125;,</div><div class="line">        &quot;0&quot;: &#123;</div><div class="line">            &quot;type&quot;: &quot;package&quot;,</div><div class="line">            &quot;package&quot;: &#123;</div><div class="line">                &quot;name&quot;: &quot;sdk/clusterproxy&quot;,</div><div class="line">                &quot;version&quot;: &quot;1.0.3&quot;,</div><div class="line">                &quot;source&quot;: &#123;</div><div class="line">                    &quot;type&quot;: &quot;git&quot;,</div><div class="line">                    &quot;url&quot;: &quot;git@gitlab.renrenche.com:sdk/clusterproxy.git&quot;,</div><div class="line">                    &quot;reference&quot;: &quot;master&quot;</div><div class="line">                &#125;,</div><div class="line">                &quot;autoload&quot;: &#123;</div><div class="line">                    &quot;psr-4&quot;: &#123;</div><div class="line">                        &quot;Cluster\\&quot;: &quot;src/Cluster&quot;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;,</div><div class="line">      &quot;1&quot;: &#123;</div><div class="line">        &quot;type&quot;: &quot;package&quot;,</div><div class="line">        &quot;package&quot;: &#123;</div><div class="line">          &quot;name&quot;: &quot;sdk/dingtalk-alarm-php-sdk&quot;,</div><div class="line">          &quot;version&quot;: &quot;1.0&quot;,</div><div class="line">          &quot;source&quot;: &#123;</div><div class="line">            &quot;type&quot;: &quot;git&quot;,</div><div class="line">            &quot;url&quot;: &quot;git@gitlab.renrenche.com:sdk/dingtalk-alarm-php-sdk.git&quot;,</div><div class="line">            &quot;reference&quot;: &quot;master&quot;</div><div class="line">          &#125;,</div><div class="line">          &quot;autoload&quot;: &#123;</div><div class="line">            &quot;psr-4&quot;: &#123;</div><div class="line">              &quot;Rrc\\&quot;: &quot;src/Rrc/&quot;</div><div class="line">            &#125;</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">      &#125;,</div><div class="line">      &quot;2&quot;: &#123;</div><div class="line">        &quot;type&quot;:&quot;package&quot;,</div><div class="line">        &quot;package&quot;: &#123;</div><div class="line">          &quot;name&quot;: &quot;sdk/prometheus-php-sdk&quot;,</div><div class="line">          &quot;version&quot;: &quot;1.0&quot;,</div><div class="line">          &quot;source&quot;: &#123;</div><div class="line">            &quot;type&quot;: &quot;git&quot;,</div><div class="line">            &quot;url&quot;: &quot;git@gitlab.renrenche.com:sdk/prometheus-php-sdk.git&quot;,</div><div class="line">            &quot;reference&quot;: &quot;master&quot;</div><div class="line">          &#125;,</div><div class="line">          &quot;autoload&quot;: &#123;</div><div class="line">            &quot;psr-4&quot;: &#123;</div><div class="line">              &quot;Rrc\\&quot;: &quot;src/Rrc/&quot;</div><div class="line">            &#125;</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">      &#125;,</div><div class="line">      &quot;jugg&quot;: &#123;</div><div class="line">        &quot;type&quot;:&quot;package&quot;,</div><div class="line">        &quot;package&quot;: &#123;</div><div class="line">          &quot;name&quot;: &quot;jugg&quot;,</div><div class="line">          &quot;version&quot;: &quot;v1.1&quot;,</div><div class="line">          &quot;source&quot;: &#123;</div><div class="line">            &quot;type&quot;: &quot;git&quot;,</div><div class="line">            &quot;url&quot;: &quot;git@gitlab.renrenche.com:web/jugg.git&quot;,</div><div class="line">            &quot;reference&quot;: &quot;master&quot;</div><div class="line">          &#125;,</div><div class="line">          &quot;autoload&quot;: &#123;</div><div class="line">            &quot;psr-4&quot;: &#123;</div><div class="line">              &quot;Jugg\\&quot;: &quot;jugg&quot;</div><div class="line">            &#125;</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;,</div><div class="line">    &quot;require&quot;: &#123;</div><div class="line">        &quot;php&quot;: &quot;&gt;=7.0&quot;,</div><div class="line">        &quot;laravel/lumen-framework&quot;: &quot;5.5.*&quot;,</div><div class="line">        &quot;vlucas/phpdotenv&quot;: &quot;~2.2&quot;,</div><div class="line">        &quot;guzzlehttp/guzzle&quot;: &quot;^6.2&quot;,</div><div class="line">        &quot;sdk/clusterproxy&quot;: &quot;^1.0&quot;,</div><div class="line">        &quot;illuminate/redis&quot;: &quot;^5.3&quot;,</div><div class="line">        &quot;peixinchen/mns&quot;: &quot;^1.0&quot;,</div><div class="line">        &quot;mockery/mockery&quot;: &quot;^0.9.5&quot;,</div><div class="line">        &quot;firebase/php-jwt&quot;: &quot;^4.0&quot;,</div><div class="line">        &quot;sdk/dingtalk-alarm-php-sdk&quot;: &quot;^1.0&quot;,</div><div class="line">        &quot;sdk/prometheus-php-sdk&quot;: &quot;^1.0&quot;,</div><div class="line">        &quot;predis/predis&quot;: &quot;^1.1&quot;,</div><div class="line">        &quot;solarium/solarium&quot;: &quot;^3.8&quot;,</div><div class="line">        &quot;mongodb/mongodb&quot;: &quot;^1.3&quot;,</div><div class="line">        &quot;jugg&quot;: &quot;^1.0&quot;</div><div class="line">    &#125;,</div><div class="line">    &quot;require-dev&quot;: &#123;</div><div class="line">        &quot;fzaninotto/faker&quot;: &quot;~1.4&quot;,</div><div class="line">        &quot;phpunit/phpunit&quot;: &quot;~6.0&quot;,</div><div class="line">        &quot;mockery/mockery&quot;: &quot;~0.9&quot;,</div><div class="line">        &quot;phpstan/phpstan&quot;: &quot;^0.9.2&quot;</div><div class="line">    &#125;,</div><div class="line">    &quot;autoload&quot;: &#123;</div><div class="line">        &quot;psr-4&quot;: &#123;</div><div class="line">            &quot;Rrc\\&quot;: &quot;./&quot;</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    &quot;autoload-dev&quot;: &#123;</div><div class="line">        &quot;classmap&quot;: [</div><div class="line">            &quot;tests/&quot;,</div><div class="line">            &quot;database/&quot;</div><div class="line">        ]</div><div class="line">    &#125;,</div><div class="line">    &quot;scripts&quot;: &#123;</div><div class="line">        &quot;post-root-package-install&quot;: [</div><div class="line">            &quot;php -r \&quot;copy(&apos;.env.example&apos;, &apos;.env&apos;);\&quot;&quot;</div><div class="line">        ]</div><div class="line">    &#125;,</div><div class="line">    &quot;minimum-stability&quot;: &quot;dev&quot;,</div><div class="line">    &quot;prefer-stable&quot;: true,</div><div class="line">    &quot;config&quot;: &#123;</div><div class="line">        &quot;optimize-autoloader&quot;: true</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>然后执行<code>composer require jugg&lt;包名&gt;</code> 就可以引入到项目里了。 </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近发现分布式锁在很多项目都有所用到,所以想把之前完成的代码封装成pear包,供大家使用。&lt;br&gt;但是发现自己对composer并不是很熟悉,所以学习一番,在此记录以防自己忘记。&lt;/p&gt;
&lt;h2 id=&quot;新建仓库&quot;&gt;&lt;a href=&quot;#新建仓库&quot; class=&quot;header
      
    
    </summary>
    
      <category term="工具" scheme="http://yoursite.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="composer" scheme="http://yoursite.com/tags/composer/"/>
    
  </entry>
  
  <entry>
    <title>使用guzzle并行请求</title>
    <link href="http://yoursite.com/2018/09/28/%E4%BD%BF%E7%94%A8guzzle%E5%B9%B6%E8%A1%8C%E8%AF%B7%E6%B1%82/"/>
    <id>http://yoursite.com/2018/09/28/使用guzzle并行请求/</id>
    <published>2018-09-28T09:10:05.000Z</published>
    <updated>2019-01-08T10:58:05.950Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>由于拍卖项目特有的点特, 会导致在开拍是有瞬时的高流量。<br>后端系统会每个出价排序, 由于高qps导致排序会有重复的情况,。为了解决遮掩样的问题,<br>就写了一个分布式锁, 用于解决排序冲突。用guzzle写了一个压测脚本。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>首先压测是为了同一时刻发送指定数量的请求到目标接口。<br>所以串行话的请求是无法<br>guzzle 支持用pool实现并行的请求。<br>官方文档 :</p><p><a href="https://guzzle-cn.readthedocs.io/zh_CN/latest/quickstart.html?highlight=Pool" target="_blank" rel="noopener">官方文档支持</a></p><p>文档中并没有提示如何发送POST请求, 顾琢磨一下:</p><p>并行方式请求:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">$client = <span class="keyword">new</span> Client([<span class="string">'base_uri'</span> =&gt; <span class="string">'10.171.22.45:5005'</span>, <span class="string">'timeout'</span> =&gt; <span class="number">10</span>]);</div><div class="line">  </div><div class="line">      $requests = <span class="function"><span class="keyword">function</span> <span class="params">($total)</span> </span>&#123;</div><div class="line">          $uri = <span class="string">'api/v1/bid'</span>;</div><div class="line">          <span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt; $total; $i++) &#123;</div><div class="line">              <span class="keyword">yield</span> <span class="keyword">new</span> Request(<span class="string">'POST'</span>, $uri, [<span class="string">'Content-type'</span> =&gt; <span class="string">'application/json'</span>],json_encode([</div><div class="line">                  <span class="string">'car_dealer_id'</span>=&gt; (string)rand(<span class="number">1</span>,<span class="number">20000</span>),</div><div class="line">                  <span class="string">'bid_price'</span> =&gt; <span class="string">"4"</span>,</div><div class="line">                  <span class="string">'car_id'</span> =&gt; <span class="string">"206431344"</span>,</div><div class="line">                  <span class="string">'fr'</span> =&gt; <span class="string">'bd_other'</span>,</div><div class="line">                  <span class="string">'platform'</span> =&gt; <span class="string">'MO'</span>,</div><div class="line">                  <span class="string">'source'</span> =&gt; <span class="string">'C2B竞价'</span>,</div><div class="line">                  <span class="string">'sale_type'</span> =&gt; <span class="string">'卖车'</span>,</div><div class="line">                  <span class="string">'car_dealer_city'</span> =&gt; <span class="string">'深圳'</span>,</div><div class="line">                  <span class="string">'app_version'</span> =&gt; <span class="string">"3.2"</span></div><div class="line">              ]));</div><div class="line">          &#125;</div><div class="line">      &#125;;</div><div class="line">  </div><div class="line">      $pool = <span class="keyword">new</span> Pool($client, $requests(<span class="number">100</span>), [</div><div class="line">          <span class="string">'concurrency'</span> =&gt; <span class="number">5</span>,</div><div class="line">          <span class="string">'fulfilled'</span> =&gt; <span class="function"><span class="keyword">function</span> <span class="params">($response, $index)</span> </span>&#123;</div><div class="line">              var_dump($response-&gt;getBody()-&gt;getContents());</div><div class="line">          &#125;,</div><div class="line">          <span class="string">'rejected'</span> =&gt; <span class="function"><span class="keyword">function</span> <span class="params">($reason, $index)</span> </span>&#123;</div><div class="line">              var_dump($reason-&gt;getMessage());</div><div class="line">          &#125;,</div><div class="line">      ]);</div><div class="line">  </div><div class="line">      $promise = $pool-&gt;promise();</div><div class="line">      $promise-&gt;wait();</div></pre></td></tr></table></figure><p><img src="/photo/img/guzzle压测/并行.png" alt="image"><br><img src="/photo/img/guzzle压测/逻辑上并行-100次.png" alt="image"><br><img src="/photo/img/guzzle压测/逻辑上并行-100次结束.png" alt="image"></p><p>串行:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> ($i =<span class="number">1</span> ; $i&lt;<span class="number">20</span>;$i++) &#123;</div><div class="line">    <span class="keyword">echo</span> time();</div><div class="line">    $org_res[] = <span class="keyword">$this</span>-&gt;client-&gt;request(<span class="string">'POST'</span>, <span class="string">'api/v1/bid'</span>,[<span class="string">'form_params'</span>=&gt;</div><div class="line">        [</div><div class="line">            <span class="string">'car_dealer_id'</span>=&gt; rand(<span class="number">1</span>,<span class="number">20000</span>),</div><div class="line">            <span class="string">'bid_price'</span> =&gt; <span class="number">4</span>,</div><div class="line">            <span class="string">'car_id'</span> =&gt; <span class="number">206431332</span>,</div><div class="line">            <span class="string">'fr'</span> =&gt; <span class="string">'bd_other'</span>,</div><div class="line">            <span class="string">'platform'</span> =&gt; <span class="string">'MO'</span>,</div><div class="line">            <span class="string">'source'</span> =&gt; <span class="string">'C2B竞价'</span>,</div><div class="line">            <span class="string">'sale_type'</span> =&gt; <span class="string">'卖车'</span>,</div><div class="line">            <span class="string">'car_dealer_city'</span> =&gt; <span class="string">'深圳'</span>,</div><div class="line">            <span class="string">'app_version'</span> =&gt; <span class="number">3.2</span></div><div class="line">        ]]);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">foreach</span> ($org_res <span class="keyword">as</span> $val) &#123;</div><div class="line">    $resdata = $val-&gt;getBody()-&gt;getContents();</div><div class="line">&#125;</div><div class="line">var_dump($resdata);</div><div class="line"><span class="keyword">die</span>;</div></pre></td></tr></table></figure><p>请求结果:</p><p><img src="/photo/img/guzzle压测/串行.png" alt="image"></p><p><img src="/photo/img/guzzle压测/逻辑上的串行-100次.png" alt="image"></p><h2 id="两者区别"><a href="#两者区别" class="headerlink" title="两者区别"></a>两者区别</h2><ul><li>从性能上来看,20次请求, 并行请求耗时2秒, 串行请求3秒。</li><li>当请求加到100次的时候, 并行请求耗时6秒, 串行请求耗时27秒,这个时候就能体现出并行和串行的却别相差21秒。</li></ul><p>为什么会有这么差距,再上一张图和代码,打印出来开始结束时间。</p><p>并行:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">并行请求</div><div class="line"> <span class="keyword">echo</span> <span class="string">'总的开始:'</span>.microtime().<span class="string">'&lt;br&gt;'</span>;</div><div class="line"> $client = <span class="keyword">new</span> Client([<span class="string">'base_uri'</span> =&gt; <span class="string">'10.171.22.45:5005'</span>, <span class="string">'timeout'</span> =&gt; <span class="number">10</span>]);</div><div class="line"> $requests = <span class="function"><span class="keyword">function</span> <span class="params">($total)</span> </span>&#123;</div><div class="line">     $uri = <span class="string">'api/v1/bid'</span>;</div><div class="line">     <span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt; $total; $i++) &#123;</div><div class="line">         $car_dealer_id = (string)rand(<span class="number">1</span>,<span class="number">1000000</span>);</div><div class="line">         <span class="keyword">echo</span> <span class="string">'开始'</span>.microtime().<span class="string">' car_dealer_id:'</span>.$car_dealer_id.<span class="string">"&lt;br&gt;"</span>;</div><div class="line">         <span class="keyword">yield</span> <span class="keyword">new</span> Request(<span class="string">'POST'</span>, $uri, [<span class="string">'Content-type'</span> =&gt; <span class="string">'application/json'</span>],json_encode([</div><div class="line">             <span class="string">'car_dealer_id'</span>=&gt; (string)$car_dealer_id,</div><div class="line">             <span class="string">'bid_price'</span> =&gt; <span class="string">"4"</span>,</div><div class="line">             <span class="string">'car_id'</span> =&gt; <span class="string">"206431344"</span>,</div><div class="line">             <span class="string">'fr'</span> =&gt; <span class="string">'bd_other'</span>,</div><div class="line">             <span class="string">'platform'</span> =&gt; <span class="string">'MO'</span>,</div><div class="line">             <span class="string">'source'</span> =&gt; <span class="string">'C2B竞价'</span>,</div><div class="line">             <span class="string">'sale_type'</span> =&gt; <span class="string">'卖车'</span>,</div><div class="line">             <span class="string">'car_dealer_city'</span> =&gt; <span class="string">'深圳'</span>,</div><div class="line">             <span class="string">'app_version'</span> =&gt; <span class="string">"3.2"</span></div><div class="line">         ]));</div><div class="line">     &#125;</div><div class="line"> &#125;;</div><div class="line"></div><div class="line"> $pool = <span class="keyword">new</span> Pool($client, $requests(<span class="number">100</span>), [</div><div class="line">     <span class="string">'concurrency'</span> =&gt; <span class="number">5</span>,</div><div class="line">     <span class="string">'fulfilled'</span> =&gt; <span class="function"><span class="keyword">function</span> <span class="params">($response, $index)</span> </span>&#123;</div><div class="line">         var_dump($response-&gt;getBody()-&gt;getContents());</div><div class="line">         <span class="keyword">echo</span> microtime().<span class="string">"&lt;br&gt;"</span>;</div><div class="line">     &#125;,</div><div class="line">     <span class="string">'rejected'</span> =&gt; <span class="function"><span class="keyword">function</span> <span class="params">($reason, $index)</span> </span>&#123;</div><div class="line">         var_dump($reason-&gt;getMessage());</div><div class="line">         <span class="keyword">echo</span> microtime();</div><div class="line">     &#125;,</div><div class="line"> ]);</div><div class="line"></div><div class="line"> $promise = $pool-&gt;promise();</div><div class="line"></div><div class="line"> $promise-&gt;wait();</div><div class="line"> <span class="keyword">echo</span> <span class="string">'总的结束:'</span>.microtime().<span class="string">'&lt;br&gt;'</span>;</div></pre></td></tr></table></figure></p><p>100次请求的返回结果</p><p><img src="/photo/img/guzzle压测/带时间的并行请求结果.png" alt="image"></p><p>串行:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">     <span class="keyword">for</span> ($i =<span class="number">1</span> ; $i&lt;<span class="number">100</span>;$i++) &#123;</div><div class="line">            <span class="keyword">echo</span> <span class="string">'开始时间'</span>.microtime().<span class="string">"&lt;br&gt;"</span>;</div><div class="line">            $ret = <span class="keyword">$this</span>-&gt;client-&gt;request(<span class="string">'POST'</span>, <span class="string">'api/v1/bid'</span>,[<span class="string">'form_params'</span>=&gt;</div><div class="line">                [</div><div class="line">                    <span class="string">'car_dealer_id'</span>=&gt; rand(<span class="number">1</span>,<span class="number">2000000</span>),</div><div class="line">                    <span class="string">'bid_price'</span> =&gt; <span class="number">4</span>,</div><div class="line">                    <span class="string">'car_id'</span> =&gt; <span class="number">206431332</span>,</div><div class="line">                    <span class="string">'fr'</span> =&gt; <span class="string">'bd_other'</span>,</div><div class="line">                    <span class="string">'platform'</span> =&gt; <span class="string">'MO'</span>,</div><div class="line">                    <span class="string">'source'</span> =&gt; <span class="string">'C2B竞价'</span>,</div><div class="line">                    <span class="string">'sale_type'</span> =&gt; <span class="string">'卖车'</span>,</div><div class="line">                    <span class="string">'car_dealer_city'</span> =&gt; <span class="string">'深圳'</span>,</div><div class="line">                    <span class="string">'app_version'</span> =&gt; <span class="number">3.2</span></div><div class="line">                ]]);</div><div class="line">            $org_res[] = $ret;</div><div class="line">            <span class="keyword">echo</span> <span class="string">'结束时间'</span>.microtime().<span class="string">"&lt;br&gt;"</span>;</div><div class="line">            var_export($ret-&gt;getBody()-&gt;getContents());</div><div class="line">        &#125;</div><div class="line"></div><div class="line"><span class="comment">//        foreach ($org_res as $val) &#123;</span></div><div class="line"><span class="comment">//            $resdata[] = $val-&gt;getBody()-&gt;getContents();</span></div><div class="line"><span class="comment">//        &#125;</span></div><div class="line"><span class="comment">//        var_dump($resdata);</span></div><div class="line">        <span class="keyword">die</span>;</div></pre></td></tr></table></figure><p>100次请求的返回结果</p><p><img src="/photo/img/guzzle压测/带时间的串行请求结果.png" alt="image"></p><ul><li>所以可以看出,并行请求是先生成所有请求（这个上限和concurrency 参数有关）,再等待结果。如果达到当前并行的上线,就等待请求结束再生成新的请求。</li><li>串行请求为请求,等待结果然后在请求。</li></ul><p>所以如果请求量很大的话,尽量还是用并行请求。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;由于拍卖项目特有的点特, 会导致在开拍是有瞬时的高流量。&lt;br&gt;后端系统会每个出价排序, 由于高qps导致排序会有重复的情况,。为了解决遮掩
      
    
    </summary>
    
      <category term="php" scheme="http://yoursite.com/categories/php/"/>
    
    
      <category term="php" scheme="http://yoursite.com/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>php垃圾回收</title>
    <link href="http://yoursite.com/2018/09/12/php%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/"/>
    <id>http://yoursite.com/2018/09/12/php垃圾回收/</id>
    <published>2018-09-12T13:28:00.000Z</published>
    <updated>2019-01-08T10:53:43.066Z</updated>
    
    <content type="html"><![CDATA[<p>php是如何实现内存管理的?内存管理无非包括内存分配、内存回收、以及内存使用优化。</p><ul><li>内存使用的优化</li><li>垃圾回收机制</li><li>底层内存分配</li></ul><h2 id="内存使用的优化"><a href="#内存使用的优化" class="headerlink" title="内存使用的优化"></a>内存使用的优化</h2><h3 id="引用计数"><a href="#引用计数" class="headerlink" title="引用计数"></a>引用计数</h3><p>php的引用中有个引用结构体</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">```c</div><div class="line">struct _zend_reference &#123;</div><div class="line">    zend_refcondted_h gc;</div><div class="line">    zval              val;  指向原来的value.</div><div class="line">&#125;;</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">其中`zend_refcondted_h` 便是gc便是当前变量被引用的次数,这个参数会在变量回收的时候用到。</div><div class="line"></div><div class="line"></div><div class="line">zend_refcondted_h :</div><div class="line"></div><div class="line">```c</div><div class="line">typedef struct _zend_refcounted_h &#123;</div><div class="line">uint32_t         refcount;/* reference counter 32-bit */</div><div class="line">union &#123;</div><div class="line">struct &#123;</div><div class="line">ZEND_ENDIAN_LOHI_3(</div><div class="line">zend_uchar    type,</div><div class="line">zend_uchar    flags,    /* used for strings &amp; objects */</div><div class="line">uint16_t      gc_info)  /* keeps GC root number (or 0) and color */</div><div class="line">&#125; v;</div><div class="line">uint32_t type_info;</div><div class="line">&#125; u;</div><div class="line">&#125; zend_refcounted_h;</div></pre></td></tr></table></figure><p>在实际中这个结构体到底是什么样的? 具体可以举例来看。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$a = <span class="string">'this is string'</span>; <span class="comment">// zend_array (refcount = 1)  只有$a引用了zend_array</span></div><div class="line">$b = &amp;$a; <span class="comment">//   zend_array (refcount = 2)  $a、$b引用了zend_array</span></div><div class="line">$c = $b; <span class="comment">// zend_array (refcount = 3)  $a、$b、$c引用了zend_array</span></div><div class="line"><span class="keyword">unset</span>($b); <span class="comment">// zend_array (refcount = 2)  $a、$c引用了zend_array</span></div></pre></td></tr></table></figure><blockquote><p>并不是所有的变量类型都会使用引用计数, 例如 <code>整形</code>、<code>浮点型</code>、<code>布尔型</code>、<code>NUll</code>(在php中这是一个变量类型)等采用了深拷贝,<br>即只要这几种变量赋值, 就会申请一款一块内存写入一个新的变量结构（注意这里不是引用结构）,当然这些类型不会公用value。</p></blockquote><h3 id="写时复制"><a href="#写时复制" class="headerlink" title="写时复制"></a>写时复制</h3><p>当然只有引用计数是不够的, 因为变量会发生赋值的情况。所以在更改某一个变量时, 会对原来的变量进行拷贝并赋值。</p><p>举个栗子:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$foo = time();</div><div class="line">$bar = &amp;$b;</div><div class="line">$si = $a;</div><div class="line"></div><div class="line">$c = &apos;123&apos;;</div></pre></td></tr></table></figure><p>具体数据结构的引用计数情况如下图:</p><p><img src="/photo/img/php内存管理/写时复制.png" alt="image"></p><h2 id="内存回收"><a href="#内存回收" class="headerlink" title="内存回收"></a>内存回收</h2><h3 id="自动gc"><a href="#自动gc" class="headerlink" title="自动gc"></a>自动gc</h3><p>在zend数据接口中有一个gc.refount,他是自动gc的关键。</p><p>在自动gc机制中,如果zval不在指向value且当前value的gc.refount为0时,会直接释放value。这种情况多发生于函数返回时（销毁所有局部变量）、变量修改时、以及unset操作的时候。</p><h3 id="辣鸡回收"><a href="#辣鸡回收" class="headerlink" title="辣鸡回收"></a>辣鸡回收</h3><p>除了自动gc,还有一种是自动gc无法处理的垃圾, 这种情况称为<code>循环引用</code>。顾名思义也就是自身内部变量引用了自身, 这种情况常出现与object和array。当我该变量zval被销毁是, 与其对应的value gc.refcount -1,<br>但是因为有自身变量指向自身, 所以就陷入了一个循环:如果不销毁自身变量 value gc.refcount就无法自动gc, 只有自动gc才会销毁value。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">$a = [<span class="number">1</span>];</div><div class="line">$a[] = &amp;$a;</div><div class="line"><span class="keyword">unset</span>($a);</div></pre></td></tr></table></figure><p><img src="/photo/img/php内存管理/自身引用.png" alt="image"></p><p><code>unset($a)</code>执行以后</p><p><img src="/photo/img/php内存管理/释放.png" alt="image"></p><p>由于上述情况导致无法自动gc,所以需要引入另外一钟垃圾回收机制-垃圾回收器。<br>现在会存在两种情况的数据需要回收：</p><ul><li>当value的gc.refcount =0 是需要回收。</li><li>当value的gc.refcount 减少不等于0，但是存在循环引用时。</li></ul><h3 id="回收机制"><a href="#回收机制" class="headerlink" title="回收机制"></a>回收机制</h3><p>当发生value gc.refcount减少时，垃圾回收机制会把可能是垃圾的value存起来， 当可能是辣鸡的value到达一定数量的时候启动垃圾鉴别程序，统一处理垃圾。当然这里的value类型只有object和array。</p><p>垃圾兼备程序：<br>其实垃圾鉴别程序很简单，递归遍历自身value，查看是否存在指向自身的即可。</p><p>code:<br>gc 初始化<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">ZEND_API void gc_init(void)</div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span> (GC_G(buf) == <span class="keyword">NULL</span> &amp;&amp; GC_G(gc_enabled)) &#123;</div><div class="line"><span class="comment">//初始化buf内存区域，大小为sizeof(gc_root_buffer) * //GC_ROOT_BUFFER_MAX_ENTRIES</span></div><div class="line">GC_G(buf) = (gc_root_buffer*) malloc(sizeof(gc_root_buffer) * GC_ROOT_BUFFER_MAX_ENTRIES);</div><div class="line"><span class="comment">//设置_zend_gc_globals.last_unused为bug入口位置</span></div><div class="line">GC_G(last_unused) = &amp;GC_G(buf)[GC_ROOT_BUFFER_MAX_ENTRIES];</div><div class="line"><span class="comment">//初始化_zend_gc_globals的参数</span></div><div class="line">gc_reset();</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>垃圾回收及其依赖 <code>_zend_gc_globals</code></p><p><code>_zend_gc_globals</code><br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> _zend_gc_globals &#123;</div><div class="line">zend_bool         gc_enabled;</div><div class="line">zend_bool         gc_active;</div><div class="line">zend_bool         gc_full;</div><div class="line"></div><div class="line">gc_root_buffer   *buf;<span class="comment">/* preallocated arrays of buffers   */</span></div><div class="line">gc_root_buffer    roots;<span class="comment">/* list of possible roots of cycles */</span></div><div class="line">gc_root_buffer   *unused;<span class="comment">/* list of unused buffers           */</span></div><div class="line">gc_root_buffer   *first_unused;<span class="comment">/* pointer to first unused buffer   */</span></div><div class="line">gc_root_buffer   *last_unused;<span class="comment">/* pointer to last unused buffer    */</span></div><div class="line"></div><div class="line">gc_root_buffer    to_free;<span class="comment">/* list to free                     */</span></div><div class="line">gc_root_buffer   *next_to_free;</div><div class="line"></div><div class="line"><span class="keyword">uint32_t</span> gc_runs;</div><div class="line"><span class="keyword">uint32_t</span> collected;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> GC_BENCH</span></div><div class="line"><span class="keyword">uint32_t</span> root_buf_length;</div><div class="line"><span class="keyword">uint32_t</span> root_buf_peak;</div><div class="line"><span class="keyword">uint32_t</span> zval_possible_root;</div><div class="line"><span class="keyword">uint32_t</span> zval_buffered;</div><div class="line"><span class="keyword">uint32_t</span> zval_remove_from_buffer;</div><div class="line"><span class="keyword">uint32_t</span> zval_marked_grey;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line">gc_additional_buffer *additional_buffer;</div><div class="line"></div><div class="line">&#125; zend_gc_globals;</div></pre></td></tr></table></figure></p><ul><li><code>gc_enabled</code> 是否使使用gc</li><li><code>gc_active</code>  是否在垃圾检查的过程中</li><li><code>gc_full</code> buf缓冲区是否已满</li><li><code>*buf</code> 与分配用于保存可能为垃圾的value</li><li><code>roots</code> 指向buf最新加入的一个可能垃圾</li><li><code>unused</code> 指向第未使用的buffer</li><li><code>*first_unused</code> 指向第一个没用使用buffer</li><li><code>*last_unused</code> 指向buffer的尾部</li><li><code>to_free</code> 等待释放的buffer</li><li><code>gc_runs</code>  统计gc运行的次数</li><li><code>collected</code>  统计已经释放的垃圾数</li></ul><p>php垃圾回收中几个重要的颜色写在zeng_gc的备注中。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">* BLACK  (GC_BLACK)   - In use or <span class="built_in">free</span>.</div><div class="line">* GREY   (GC_GREY)    - Possible member of cycle.</div><div class="line">* WHITE  (GC_WHITE)   - Member of garbage cycle.</div><div class="line">* PURPLE (GC_PURPLE)  - Possible root of cycle.</div></pre></td></tr></table></figure></p><ul><li>GC_WHITE 白色表示垃圾</li><li>GC_PURPLE 紫色表示已放入缓冲区</li><li>GC_GREY 灰色表示已经进行了一次refcount的减一操作</li><li>GC_BLACK 黑色是默认颜色，正常</li></ul><p>gc过程中主要处理功能的函数<code>zend_gc_collect_cycles</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="function">ZEND_API <span class="keyword">void</span> ZEND_FASTCALL <span class="title">gc_possible_root</span><span class="params">(zend_refcounted *ref)</span></span></div><div class="line">&#123;</div><div class="line">gc_root_buffer *newRoot;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (UNEXPECTED(CG(unclean_shutdown)) || UNEXPECTED(GC_G(gc_active))) &#123;</div><div class="line"><span class="keyword">return</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">ZEND_ASSERT(GC_TYPE(ref) == IS_ARRAY || GC_TYPE(ref) == IS_OBJECT);</div><div class="line">ZEND_ASSERT(EXPECTED(GC_REF_GET_COLOR(ref) == GC_BLACK));</div><div class="line">ZEND_ASSERT(!GC_ADDRESS(GC_INFO(ref)));</div><div class="line"></div><div class="line">GC_BENCH_INC(zval_possible_root);</div><div class="line"></div><div class="line">newRoot = GC_G(unused);</div><div class="line"><span class="keyword">if</span> (newRoot) &#123;</div><div class="line">GC_G(unused) = newRoot-&gt;prev;</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (GC_G(first_unused) != GC_G(last_unused)) &#123;</div><div class="line">newRoot = GC_G(first_unused);</div><div class="line">GC_G(first_unused)++;</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="comment">//垃圾处理，当缓冲区满时，程序调用gc_collect_cycles函数，执行垃圾回收操作。 其中最关键的几步就是</span></div><div class="line"><span class="comment">//如果当前处于可以gc的状态</span></div><div class="line"><span class="keyword">if</span> (!GC_G(gc_enabled)) &#123;</div><div class="line"><span class="keyword">return</span>;</div><div class="line">&#125;</div><div class="line">GC_REFCOUNT(ref)++;</div><div class="line"><span class="comment">//垃圾回收</span></div><div class="line">gc_collect_cycles();</div><div class="line">GC_REFCOUNT(ref)--;</div><div class="line"><span class="keyword">if</span> (UNEXPECTED(GC_REFCOUNT(ref)) == <span class="number">0</span>) &#123;</div><div class="line">zval_dtor_func(ref);</div><div class="line"><span class="keyword">return</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (UNEXPECTED(GC_INFO(ref))) &#123;</div><div class="line"><span class="keyword">return</span>;</div><div class="line">&#125;</div><div class="line">newRoot = GC_G(unused);</div><div class="line"><span class="keyword">if</span> (!newRoot) &#123;</div><div class="line"><span class="keyword">return</span>;</div><div class="line">&#125;</div><div class="line">GC_G(unused) = newRoot-&gt;prev;</div><div class="line">&#125;</div><div class="line"></div><div class="line">GC_TRACE_SET_COLOR(ref, GC_PURPLE);</div><div class="line">GC_INFO(ref) = (newRoot - GC_G(buf)) | GC_PURPLE;</div><div class="line">newRoot-&gt;ref = ref;</div><div class="line"></div><div class="line">newRoot-&gt;next = GC_G(roots).next;</div><div class="line">newRoot-&gt;prev = &amp;GC_G(roots);</div><div class="line">GC_G(roots).next-&gt;prev = newRoot;</div><div class="line">GC_G(roots).next = newRoot;</div><div class="line"></div><div class="line">GC_BENCH_INC(zval_buffered);</div><div class="line">GC_BENCH_INC(root_buf_length);</div><div class="line">GC_BENCH_PEAK(root_buf_peak, root_buf_length);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>debug代码已删除</p><ol><li>深度优先对对象或者数据的每一个元素的<code>refcount--</code>并将其标记为灰色</li><li>深度遍历root的每个每个变量，如果此时变量的<code>refcount</code>为0，则代表着改变量为垃圾，将其标记为垃圾，如果不为0，则将其标记为黑色（正常）。</li><li>检查roots清除标记为白色的垃圾。</li></ol><p>//TODO 垃圾回收抽出来出来写。</p><p>具体代码：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div></pre></td><td class="code"><pre><div class="line">ZEND_API int zend_gc_collect_cycles(void)</div><div class="line">&#123;</div><div class="line">int count = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (GC_G(roots).next != &amp;GC_G(roots)) &#123;</div><div class="line">gc_root_buffer *current, *next, *orig_next_to_free;</div><div class="line">zend_refcounted *p;</div><div class="line">gc_root_buffer to_free;</div><div class="line">uint32_t gc_flags = <span class="number">0</span>;</div><div class="line">gc_additional_buffer *additional_buffer_snapshot;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> (GC_G(gc_active)) &#123;</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">GC_TRACE(<span class="string">"Collecting cycles"</span>);</div><div class="line"><span class="comment">//标识gc运行了多少次</span></div><div class="line">GC_G(gc_runs)++;</div><div class="line"><span class="comment">//标识当前正在gc</span></div><div class="line">GC_G(gc_active) = <span class="number">1</span>;</div><div class="line"></div><div class="line">GC_TRACE(<span class="string">"Marking roots"</span>);</div><div class="line"><span class="comment">//重点</span></div><div class="line">gc_mark_roots();</div><div class="line">GC_TRACE(<span class="string">"Scanning roots"</span>);</div><div class="line"><span class="comment">//重点</span></div><div class="line">gc_scan_roots();</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">GC_TRACE(<span class="string">"Collecting roots"</span>);</div><div class="line">additional_buffer_snapshot = GC_G(additional_buffer);</div><div class="line">count = gc_collect_roots(&amp;gc_flags);</div><div class="line"></div><div class="line">GC_G(gc_active) = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (GC_G(to_free).next == &amp;GC_G(to_free)) &#123;</div><div class="line"><span class="comment">/* nothing to free */</span></div><div class="line">GC_TRACE(<span class="string">"Nothing to free"</span>);</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* Copy global to_free list into local list */</span></div><div class="line">to_free.next = GC_G(to_free).next;</div><div class="line">to_free.prev = GC_G(to_free).prev;</div><div class="line">to_free.next-&gt;prev = &amp;to_free;</div><div class="line">to_free.prev-&gt;next = &amp;to_free;</div><div class="line"></div><div class="line"><span class="comment">/* Free global list */</span></div><div class="line">GC_G(to_free).next = &amp;GC_G(to_free);</div><div class="line">GC_G(to_free).prev = &amp;GC_G(to_free);</div><div class="line"></div><div class="line">orig_next_to_free = GC_G(next_to_free);</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> (gc_flags &amp; GC_HAS_DESTRUCTORS) &#123;</div><div class="line">GC_TRACE(<span class="string">"Calling destructors"</span>);</div><div class="line"></div><div class="line"><span class="comment">/* Remember reference counters before calling destructors */</span></div><div class="line">current = to_free.next;</div><div class="line"><span class="keyword">while</span> (current != &amp;to_free) &#123;</div><div class="line">current-&gt;refcount = GC_REFCOUNT(current-&gt;ref);</div><div class="line">current = current-&gt;next;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* Call destructors */</span></div><div class="line">current = to_free.next;</div><div class="line"><span class="keyword">while</span> (current != &amp;to_free) &#123;</div><div class="line">p = current-&gt;ref;</div><div class="line">GC_G(next_to_free) = current-&gt;next;</div><div class="line"><span class="keyword">if</span> (GC_TYPE(p) == IS_OBJECT) &#123;</div><div class="line">zend_object *obj = (zend_object*)p;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (!(GC_FLAGS(obj) &amp; IS_OBJ_DESTRUCTOR_CALLED)) &#123;</div><div class="line">GC_TRACE_REF(obj, <span class="string">"calling destructor"</span>);</div><div class="line">GC_FLAGS(obj) |= IS_OBJ_DESTRUCTOR_CALLED;</div><div class="line"><span class="keyword">if</span> (obj-&gt;handlers-&gt;dtor_obj</div><div class="line"> &amp;&amp; (obj-&gt;handlers-&gt;dtor_obj != zend_objects_destroy_object</div><div class="line">  || obj-&gt;ce-&gt;destructor)) &#123;</div><div class="line">GC_REFCOUNT(obj)++;</div><div class="line">obj-&gt;handlers-&gt;dtor_obj(obj);</div><div class="line">GC_REFCOUNT(obj)--;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">current = GC_G(next_to_free);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* Remove values captured in destructors */</span></div><div class="line">current = to_free.next;</div><div class="line"><span class="keyword">while</span> (current != &amp;to_free) &#123;</div><div class="line">GC_G(next_to_free) = current-&gt;next;</div><div class="line"><span class="keyword">if</span> (GC_REFCOUNT(current-&gt;ref) &gt; current-&gt;refcount) &#123;</div><div class="line">gc_remove_nested_data_from_buffer(current-&gt;ref, current);</div><div class="line">&#125;</div><div class="line">current = GC_G(next_to_free);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* Destroy zvals */</span></div><div class="line">GC_TRACE(<span class="string">"Destroying zvals"</span>);</div><div class="line">GC_G(gc_active) = <span class="number">1</span>;</div><div class="line">current = to_free.next;</div><div class="line"><span class="keyword">while</span> (current != &amp;to_free) &#123;</div><div class="line">p = current-&gt;ref;</div><div class="line">GC_G(next_to_free) = current-&gt;next;</div><div class="line">GC_TRACE_REF(p, <span class="string">"destroying"</span>);</div><div class="line"><span class="keyword">if</span> (GC_TYPE(p) == IS_OBJECT) &#123;</div><div class="line">zend_object *obj = (zend_object*)p;</div><div class="line"></div><div class="line">EG(objects_store).object_buckets[obj-&gt;handle] = SET_OBJ_INVALID(obj);</div><div class="line">GC_TYPE(obj) = IS_NULL;</div><div class="line"><span class="keyword">if</span> (!(GC_FLAGS(obj) &amp; IS_OBJ_FREE_CALLED)) &#123;</div><div class="line">GC_FLAGS(obj) |= IS_OBJ_FREE_CALLED;</div><div class="line"><span class="keyword">if</span> (obj-&gt;handlers-&gt;free_obj) &#123;</div><div class="line">GC_REFCOUNT(obj)++;</div><div class="line">obj-&gt;handlers-&gt;free_obj(obj);</div><div class="line">GC_REFCOUNT(obj)--;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">SET_OBJ_BUCKET_NUMBER(EG(objects_store).object_buckets[obj-&gt;handle], EG(objects_store).free_list_head);</div><div class="line">EG(objects_store).free_list_head = obj-&gt;handle;</div><div class="line">p = current-&gt;ref = (zend_refcounted*)(((char*)obj) - obj-&gt;handlers-&gt;offset);</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (GC_TYPE(p) == IS_ARRAY) &#123;</div><div class="line">zend_array *arr = (zend_array*)p;</div><div class="line"></div><div class="line">GC_TYPE(arr) = IS_NULL;</div><div class="line"></div><div class="line"><span class="comment">/* GC may destroy arrays with rc&gt;1. This is valid and safe. */</span></div><div class="line">HT_ALLOW_COW_VIOLATION(arr);</div><div class="line"></div><div class="line">zend_hash_destroy(arr);</div><div class="line">&#125;</div><div class="line">current = GC_G(next_to_free);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* Free objects */</span></div><div class="line">current = to_free.next;</div><div class="line"><span class="keyword">while</span> (current != &amp;to_free) &#123;</div><div class="line">next = current-&gt;next;</div><div class="line">p = current-&gt;ref;</div><div class="line"><span class="keyword">if</span> (EXPECTED(current &gt;= GC_G(buf) &amp;&amp; current &lt; GC_G(buf) + GC_ROOT_BUFFER_MAX_ENTRIES)) &#123;</div><div class="line">current-&gt;prev = GC_G(unused);</div><div class="line">GC_G(unused) = current;</div><div class="line">&#125;</div><div class="line">efree(p);</div><div class="line">current = next;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">while</span> (GC_G(additional_buffer) != additional_buffer_snapshot) &#123;</div><div class="line">gc_additional_buffer *next = GC_G(additional_buffer)-&gt;next;</div><div class="line">efree(GC_G(additional_buffer));</div><div class="line">GC_G(additional_buffer) = next;</div><div class="line">&#125;</div><div class="line"></div><div class="line">GC_TRACE(<span class="string">"Collection finished"</span>);</div><div class="line">GC_G(collected) += count;</div><div class="line">GC_G(next_to_free) = orig_next_to_free;</div><div class="line">GC_G(gc_active) = <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">return</span> count;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">gc_mark_roots</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">gc_root_buffer *current = GC_G(roots).next;</div><div class="line"></div><div class="line"><span class="keyword">while</span> (current != &amp;GC_G(roots)) &#123;</div><div class="line"><span class="comment">//GC_PURPLE 标识在缓冲区</span></div><div class="line"><span class="keyword">if</span> (GC_REF_GET_COLOR(current-&gt;ref) == GC_PURPLE) &#123;</div><div class="line">gc_mark_grey(current-&gt;ref);</div><div class="line">&#125;</div><div class="line">current = current-&gt;next;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">gc_mark_grey</span><span class="params">(zend_refcounted *ref)</span></span></div><div class="line">&#123;</div><div class="line">    HashTable *ht;</div><div class="line">Bucket *p, *end;</div><div class="line">zval *zv;</div><div class="line"></div><div class="line">tail_call:</div><div class="line"><span class="keyword">if</span> (GC_REF_GET_COLOR(ref) != GC_GREY) &#123;</div><div class="line">ht = <span class="literal">NULL</span>;</div><div class="line">GC_BENCH_INC(zval_marked_grey);</div><div class="line">GC_REF_SET_COLOR(ref, GC_GREY);</div><div class="line"></div><div class="line"><span class="keyword">if</span> (GC_TYPE(ref) == IS_OBJECT) &#123;</div><div class="line"><span class="keyword">zend_object_get_gc_t</span> get_gc;</div><div class="line">zend_object *obj = (zend_object*)ref;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (EXPECTED(!(GC_FLAGS(ref) &amp; IS_OBJ_FREE_CALLED) &amp;&amp;</div><div class="line">                 (get_gc = obj-&gt;handlers-&gt;get_gc) != <span class="literal">NULL</span>)) &#123;</div><div class="line"><span class="keyword">int</span> n;</div><div class="line">zval *zv, *end;</div><div class="line">zval tmp;</div><div class="line"></div><div class="line">ZVAL_OBJ(&amp;tmp, obj);</div><div class="line">ht = get_gc(&amp;tmp, &amp;zv, &amp;n);</div><div class="line">end = zv + n;</div><div class="line"><span class="keyword">if</span> (EXPECTED(!ht)) &#123;</div><div class="line"><span class="keyword">if</span> (!n) <span class="keyword">return</span>;</div><div class="line"><span class="keyword">while</span> (!Z_REFCOUNTED_P(--end)) &#123;</div><div class="line"><span class="comment">//表明当前object size为0</span></div><div class="line"><span class="keyword">if</span> (zv == end) <span class="keyword">return</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">while</span> (zv != end) &#123;</div><div class="line"><span class="comment">//循环对每个元素进行--</span></div><div class="line"><span class="keyword">if</span> (Z_REFCOUNTED_P(zv)) &#123;</div><div class="line">ref = Z_COUNTED_P(zv);</div><div class="line">GC_REFCOUNT(ref)--;</div><div class="line"><span class="comment">//refcount已经减过，标记为灰色</span></div><div class="line">gc_mark_grey(ref);</div><div class="line">&#125;</div><div class="line">zv++;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (EXPECTED(!ht)) &#123;</div><div class="line">ref = Z_COUNTED_P(zv);</div><div class="line">GC_REFCOUNT(ref)--;</div><div class="line"><span class="keyword">goto</span> tail_call;</div><div class="line">&#125;</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="keyword">return</span>;</div><div class="line">&#125;</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (GC_TYPE(ref) == IS_ARRAY) &#123;</div><div class="line"><span class="keyword">if</span> (((zend_array*)ref) == &amp;EG(symbol_table)) &#123;</div><div class="line"><span class="comment">//标识是正常非垃圾</span></div><div class="line">GC_REF_SET_BLACK(ref);</div><div class="line"><span class="keyword">return</span>;</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">ht = (zend_array*)ref;</div><div class="line">&#125;</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (GC_TYPE(ref) == IS_REFERENCE) &#123;</div><div class="line"><span class="keyword">if</span> (Z_REFCOUNTED(((zend_reference*)ref)-&gt;val)) &#123;</div><div class="line">ref = Z_COUNTED(((zend_reference*)ref)-&gt;val);</div><div class="line">GC_REFCOUNT(ref)--;</div><div class="line"><span class="keyword">goto</span> tail_call;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span>;</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="keyword">return</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (!ht-&gt;nNumUsed) <span class="keyword">return</span>;</div><div class="line">p = ht-&gt;arData;</div><div class="line">end = p + ht-&gt;nNumUsed;</div><div class="line"><span class="keyword">while</span> (<span class="number">1</span>) &#123;</div><div class="line">end--;</div><div class="line">zv = &amp;end-&gt;val;</div><div class="line"><span class="keyword">if</span> (Z_TYPE_P(zv) == IS_INDIRECT) &#123;</div><div class="line">zv = Z_INDIRECT_P(zv);</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (Z_REFCOUNTED_P(zv)) &#123;</div><div class="line"><span class="keyword">break</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (p == end) <span class="keyword">return</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">while</span> (p != end) &#123;</div><div class="line">zv = &amp;p-&gt;val;</div><div class="line"><span class="keyword">if</span> (Z_TYPE_P(zv) == IS_INDIRECT) &#123;</div><div class="line">zv = Z_INDIRECT_P(zv);</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (Z_REFCOUNTED_P(zv)) &#123;</div><div class="line">ref = Z_COUNTED_P(zv);</div><div class="line">GC_REFCOUNT(ref)--;</div><div class="line">gc_mark_grey(ref);</div><div class="line">&#125;</div><div class="line">p++;</div><div class="line">&#125;</div><div class="line">zv = &amp;p-&gt;val;</div><div class="line"><span class="keyword">if</span> (Z_TYPE_P(zv) == IS_INDIRECT) &#123;</div><div class="line">zv = Z_INDIRECT_P(zv);</div><div class="line">&#125;</div><div class="line">ref = Z_COUNTED_P(zv);</div><div class="line">GC_REFCOUNT(ref)--;</div><div class="line"><span class="keyword">goto</span> tail_call;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">gc_scan</span><span class="params">(zend_refcounted *ref)</span></span></div><div class="line">&#123;</div><div class="line">    HashTable *ht;</div><div class="line">Bucket *p, *end;</div><div class="line">zval *zv;</div><div class="line"></div><div class="line">tail_call:</div><div class="line"><span class="keyword">if</span> (GC_REF_GET_COLOR(ref) == GC_GREY) &#123;</div><div class="line"><span class="keyword">if</span> (GC_REFCOUNT(ref) &gt; <span class="number">0</span>) &#123;</div><div class="line"><span class="comment">//所有refount--以后如果还&gt;0，说明非垃圾</span></div><div class="line">gc_scan_black(ref);</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="comment">//否则则为垃圾</span></div><div class="line">GC_REF_SET_COLOR(ref, GC_WHITE);</div><div class="line"><span class="keyword">if</span> (GC_TYPE(ref) == IS_OBJECT) &#123;</div><div class="line"><span class="keyword">zend_object_get_gc_t</span> get_gc;</div><div class="line">zend_object *obj = (zend_object*)ref;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (EXPECTED(!(GC_FLAGS(ref) &amp; IS_OBJ_FREE_CALLED) &amp;&amp;</div><div class="line">             (get_gc = obj-&gt;handlers-&gt;get_gc) != <span class="literal">NULL</span>)) &#123;</div><div class="line"><span class="keyword">int</span> n;</div><div class="line">zval *zv, *end;</div><div class="line">zval tmp;</div><div class="line"></div><div class="line">ZVAL_OBJ(&amp;tmp, obj);</div><div class="line">ht = get_gc(&amp;tmp, &amp;zv, &amp;n);</div><div class="line">end = zv + n;</div><div class="line"><span class="keyword">if</span> (EXPECTED(!ht)) &#123;</div><div class="line"><span class="keyword">if</span> (!n) <span class="keyword">return</span>;</div><div class="line"><span class="keyword">while</span> (!Z_REFCOUNTED_P(--end)) &#123;</div><div class="line"><span class="keyword">if</span> (zv == end) <span class="keyword">return</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">while</span> (zv != end) &#123;</div><div class="line"><span class="keyword">if</span> (Z_REFCOUNTED_P(zv)) &#123;</div><div class="line">ref = Z_COUNTED_P(zv);</div><div class="line">gc_scan(ref);</div><div class="line">&#125;</div><div class="line">zv++;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (EXPECTED(!ht)) &#123;</div><div class="line">ref = Z_COUNTED_P(zv);</div><div class="line"><span class="keyword">goto</span> tail_call;</div><div class="line">&#125;</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="keyword">return</span>;</div><div class="line">&#125;</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (GC_TYPE(ref) == IS_ARRAY) &#123;</div><div class="line"><span class="keyword">if</span> ((zend_array*)ref == &amp;EG(symbol_table)) &#123;</div><div class="line">GC_REF_SET_BLACK(ref);</div><div class="line"><span class="keyword">return</span>;</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">ht = (zend_array*)ref;</div><div class="line">&#125;</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (GC_TYPE(ref) == IS_REFERENCE) &#123;</div><div class="line"><span class="keyword">if</span> (Z_REFCOUNTED(((zend_reference*)ref)-&gt;val)) &#123;</div><div class="line">ref = Z_COUNTED(((zend_reference*)ref)-&gt;val);</div><div class="line"><span class="keyword">goto</span> tail_call;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span>;</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="keyword">return</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (!ht-&gt;nNumUsed) <span class="keyword">return</span>;</div><div class="line">p = ht-&gt;arData;</div><div class="line">end = p + ht-&gt;nNumUsed;</div><div class="line"><span class="keyword">while</span> (<span class="number">1</span>) &#123;</div><div class="line">end--;</div><div class="line">zv = &amp;end-&gt;val;</div><div class="line"><span class="keyword">if</span> (Z_TYPE_P(zv) == IS_INDIRECT) &#123;</div><div class="line">zv = Z_INDIRECT_P(zv);</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (Z_REFCOUNTED_P(zv)) &#123;</div><div class="line"><span class="keyword">break</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (p == end) <span class="keyword">return</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">while</span> (p != end) &#123;</div><div class="line">zv = &amp;p-&gt;val;</div><div class="line"><span class="keyword">if</span> (Z_TYPE_P(zv) == IS_INDIRECT) &#123;</div><div class="line">zv = Z_INDIRECT_P(zv);</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (Z_REFCOUNTED_P(zv)) &#123;</div><div class="line">ref = Z_COUNTED_P(zv);</div><div class="line">gc_scan(ref);</div><div class="line">&#125;</div><div class="line">p++;</div><div class="line">&#125;</div><div class="line">zv = &amp;p-&gt;val;</div><div class="line"><span class="keyword">if</span> (Z_TYPE_P(zv) == IS_INDIRECT) &#123;</div><div class="line">zv = Z_INDIRECT_P(zv);</div><div class="line">&#125;</div><div class="line">ref = Z_COUNTED_P(zv);</div><div class="line"><span class="keyword">goto</span> tail_call;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>主要为三个函数：</p><ul><li><code>gc_mark_roots</code>队规遍历，对object、array所有元素的refcount–并将其标记为灰色</li><li><code>gc_scan_roots</code>这个函数对节点信息的链表再次进行深度优先遍历，如果发现zval的refcount大于等于1，则对该zval和其包含的zval的refcount加1操作，这个是对非垃圾的一个信息还原，然后将这些zval颜色属性去掉(设置成black)。如果发现zval的refcount等于0，则就标记成白色，这些是后面将要清理掉的垃圾。</li><li><code>gc_collect_roots</code> 遍历节点信息链表,将前面一个步骤中标记为白色的节点信息放到GC_G(zval_to_free)为入口的链表中，这个链表用来存放将要释放的垃圾。 然后释放掉全部的节点信息，缓冲区被清空。分析结束后将重新收集节点信息。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;php是如何实现内存管理的?内存管理无非包括内存分配、内存回收、以及内存使用优化。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;内存使用的优化&lt;/li&gt;
&lt;li&gt;垃圾回收机制&lt;/li&gt;
&lt;li&gt;底层内存分配&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;内存使用的优化&quot;&gt;&lt;a href=&quot;#内存使用
      
    
    </summary>
    
      <category term="php源码学习" scheme="http://yoursite.com/categories/php%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="php源码" scheme="http://yoursite.com/tags/php%E6%BA%90%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>微服务数据一致性和服务可靠性</title>
    <link href="http://yoursite.com/2018/09/12/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%95%B0%E6%8D%AE%E4%B8%80%E8%87%B4%E6%80%A7%E5%92%8C%E6%9C%8D%E5%8A%A1%E5%8F%AF%E9%9D%A0%E6%80%A7/"/>
    <id>http://yoursite.com/2018/09/12/微服务数据一致性和服务可靠性/</id>
    <published>2018-09-12T13:28:00.000Z</published>
    <updated>2019-01-08T10:58:52.015Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/photo/img/2018-06-19/servicePic1.png" alt="image"></p><h2 id="存在问题"><a href="#存在问题" class="headerlink" title="存在问题"></a>存在问题</h2><p>  我们的保证金服务现有结构是这个样子。<br>在 1、2、3、4、5、6 各个阶段都会存在超时和异常问题，当负载少时，我们还可以手动人工处理，但是当数据量大的时候，问题或多的令人发指，沉浸于洗数据，无法自拔。。<br>超时存在问题：<br>1.当1、2、3 步骤超时时，下游服务可以忽略，当做执行失败，重试。<br>2.当在环节4、5、6超时时，对于下游服务是也是执行失败，但是还可以重试么？</p><h2 id="如何提高服务可靠性"><a href="#如何提高服务可靠性" class="headerlink" title="如何提高服务可靠性"></a>如何提高服务可靠性</h2><p>对于上游服务，如何保证对下游提供可靠的服务。</p><h3 id="补偿机制"><a href="#补偿机制" class="headerlink" title="补偿机制"></a>补偿机制</h3><p> <img src="/photo/img/2018-06-19/servicePic5.png" alt="image"><br> 在服务间的调用失败时，可以记录失败调用，如队列，消费重试。但是前提一定是接口幂等。<br> 但是这样并不能解决根本性问题，如果我们在调用保证金冻结服务时，失败此时我们冻结时报操作入队列，让队列异步消费，如果此时要解冻保证金，就会出现业务异常。</p><p> <strong>所以</strong>补偿机制建议使用在 <code>不可避免的业务异常情况下使用</code>，我们应该尽可能的优化技术方案，来保证数据一致性，最后再采用补偿机制。</p><h3 id="两段提交协议（2pc）"><a href="#两段提交协议（2pc）" class="headerlink" title="两段提交协议（2pc）"></a>两段提交协议（2pc）</h3><p><img src="/photo/img/2018-06-19/servicePic4.png" alt="image"></p><p>preOperation 执行请求，在调用微服务前，执行预操作成功则表示此次操作可行。<br>如果commit失败该如何处理？重新preOperetion嘛？如果接口幂等是否可以重复，commit？如何保证避免重复提交？<br>在preOperation时，返回唯一操作ID，业务逻辑每个操作对应一个操作ID，commit失败就重试，当然前提是我们的上有服务接口幂等。</p><p><img src="/photo/img/2018-06-19/servicePic3.png" alt="image"><br>即使是这样也会存在问题，如果保证金预操作成功，但是执行一直失败呢？我们必须提供回滚机制。<br><img src="/photo/img/2018-06-19/servicePic2.png" alt="image"></p><ol><li>大量同步RPC依赖，如何保证自身服务可靠性？<br>  服务之间在调用的时候，会存在大量异常、超时。我该如何处理，认为这次是失败的？还是成功的？如果依赖的服务返回成功，才算成功的话，我改如何保证服务可靠性，该如何对我的下游服务提供可靠的服务。</li><li>调用依赖服务失败，如何降级处理？<br>  在服务调用失败的时候，我的上游出错了，我该如何降级处理，我该重试？还是直接跳过，跳过后是否会造成微服务之间数据一致性问题。如果重试是否会造成重复提交，接口是否幂等？</li><li>是否还欠缺回滚机制？ </li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/photo/img/2018-06-19/servicePic1.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;存在问题&quot;&gt;&lt;a href=&quot;#存在问题&quot; class=&quot;headerlink&quot; title=&quot;存在问题&quot;&gt;&lt;/a&gt;存在问题&lt;
      
    
    </summary>
    
      <category term="微服务" scheme="http://yoursite.com/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    
      <category term="微服务" scheme="http://yoursite.com/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>php闭包</title>
    <link href="http://yoursite.com/2018/08/25/php%E9%97%AD%E5%8C%85/"/>
    <id>http://yoursite.com/2018/08/25/php闭包/</id>
    <published>2018-08-25T06:50:55.000Z</published>
    <updated>2019-01-08T10:56:58.022Z</updated>
    
    <content type="html"><![CDATA[<p>在看guzzle包的时候看大到了一段有意思的代码, 简化以后类似于下边:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="comment">/**</span></div><div class="line">* </div><div class="line">*/</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span> </span></div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>  $handler;</div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(callable $handler = null)</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">$this</span>-&gt;handler = $handler;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">create</span><span class="params">(callable $handler)</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">self</span>($handler);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span><span class="params">($request,$options)</span></span></div><div class="line">&#123;</div><div class="line">$func = <span class="keyword">$this</span>-&gt;handler;</div><div class="line">    <span class="keyword">return</span> $func($request, $options);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test1</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">return</span> [<span class="keyword">$this</span>, <span class="string">'exec1'</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">exec1</span><span class="params">($a,$b)</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">echo</span> ($a+$b);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$test = <span class="keyword">new</span> test();</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">$obj = test::create($test-&gt;test1());</div><div class="line"></div><div class="line">$obj(<span class="number">1</span>,<span class="number">4</span>);</div></pre></td></tr></table></figure><ul><li>php文档是这样描述闭包的</li></ul><p>`PHP是将函数以string形式传递的。 可以使用任何内置或用户自定义函数，但除了语言结构例如：array()，echo，empty()，eval()，exit()，isset()，list()，print 或 unset()。</p><p> 一个已实例化的 object 的方法被作为 array 传递，下标 0 包含该 object，下标 1 包含方法名。 在同一个类里可以访问 protected 和 private 方法。</p><p> 静态类方法也可不经实例化该类的对象而传递，只要在下标 0 中包含类名而不是对象。自 PHP 5.2.3 起，也可以传递 ‘ClassName::methodName’。</p><p> 除了普通的用户自定义函数外，也可传递 匿名函数 给回调参数。`</p><p> 除了上边的这些可以作为callable参数的类型,还有一个是拥有__invoke()的实例化对象。</p><p>所以实例化的对象可以使用 <code>[$obj,&#39;functionName&#39;]</code> 当做闭包去传递。<br><code>$obj = test::create($test-&gt;test1());</code>将我们的<code>test1</code>方法赋值给新实例化的对象里。</p><ul><li>魔术方法<code>__invoke()</code>表示:</li></ul><p>当尝试以调用函数的方式调用一个对象时，__invoke() 方法会被自动调用。</p><p>所以我们调用<code>$obj()</code>函数时会调用到__invoke()里,最后调用到我们一开始注册的函数。</p><p>ps<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">class test </div><div class="line">&#123;</div><div class="line">public  $handler;</div><div class="line">public function __construct(callable $handler = null)</div><div class="line">&#123;</div><div class="line">$this-&gt;handler = $handler;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public static function create(callable $handler)</div><div class="line">&#123;</div><div class="line">return new self($handler);</div><div class="line">&#125;</div><div class="line"></div><div class="line">public function __invoke($request,$options)</div><div class="line">&#123;</div><div class="line">$func = $this-&gt;handler;</div><div class="line">    return $func($request, $options);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">public function test1()</div><div class="line">&#123;</div><div class="line">return [$this, &apos;exec1&apos;];</div><div class="line">&#125;</div><div class="line"></div><div class="line">public function exec1($a,$b)</div><div class="line">&#123;</div><div class="line">echo ($a+$b);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$test = new test();</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">$blj = test::create($test-&gt;test1());</div><div class="line">$blj(1,4);</div><div class="line">//测试对象是否可以作为callable类型参数</div><div class="line"></div><div class="line"></div><div class="line">$test = test::create(new test());</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在看guzzle包的时候看大到了一段有意思的代码, 简化以后类似于下边:&lt;/p&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div c
      
    
    </summary>
    
      <category term="php" scheme="http://yoursite.com/categories/php/"/>
    
    
      <category term="php" scheme="http://yoursite.com/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>php数组实现</title>
    <link href="http://yoursite.com/2018/08/20/php%E6%95%B0%E7%BB%84%E5%AE%9E%E7%8E%B0/"/>
    <id>http://yoursite.com/2018/08/20/php数组实现/</id>
    <published>2018-08-20T12:00:08.000Z</published>
    <updated>2019-01-08T10:55:28.931Z</updated>
    
    <content type="html"><![CDATA[<p>php的数组依赖于hashtable实现的。</p><p>Times33的算法很简单，就是不断的乘33,下边是times33算法:</p><h2 id="Times33-hash"><a href="#Times33-hash" class="headerlink" title="Times33(hash)"></a>Times33(hash)</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">myHash</span><span class="params">($str)</span> </span>&#123;</div><div class="line">    <span class="comment">// hash(i) = hash(i-1) * 33 + str[i]</span></div><div class="line">    $hash = <span class="number">5381</span>;</div><div class="line">    $s    = md5($str); <span class="comment">//相比其它版本，进行了md5加密</span></div><div class="line">    $seed = <span class="number">5</span>;</div><div class="line">    $len  = <span class="number">32</span>;<span class="comment">//加密后长度32</span></div><div class="line">    <span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt; $len; $i++) &#123;</div><div class="line">        <span class="comment">// (hash &lt;&lt; 5) + hash 相当于 hash * 33</span></div><div class="line">        <span class="comment">//$hash = sprintf("%u", $hash * 33) + ord($s&#123;$i&#125;);</span></div><div class="line">        <span class="comment">//$hash = ($hash * 33 + ord($s&#123;$i&#125;)) &amp; 0x7FFFFFFF;</span></div><div class="line">        $hash = ($hash &lt;&lt; $seed) + $hash + ord($s&#123;$i&#125;);</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="keyword">return</span> $hash &amp; <span class="number">0x7FFFFFFF</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>其中<code>&lt;&lt;</code> 表示左移,每次左移表示x2例如:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">$num = <span class="number">2</span>;</div><div class="line"></div><div class="line"><span class="keyword">echo</span> $num &lt;&lt; <span class="number">2</span>;</div></pre></td></tr></table></figure><p>所以($hash &lt;&lt; $seed)表示 <code>$hash * 32</code> ,同时加上$hash,也就表示 <code>$hash * 33</code>了。ord()函数返回字符串的首个字符的 ASCII 值。<br>最后<code>$hash &amp; 0x7FFFFFFF</code> 表示与整形的最大值与操作(<code>0x7FFFF111FFF</code>二进制为<code>1111111111111111111111111111</code>),<br>这个与操作会截取超过整形二进制部分,所以times33计算出来的值不会超过整形的最大值。</p><h2 id="为什么要用hashtable实现php数组"><a href="#为什么要用hashtable实现php数组" class="headerlink" title="为什么要用hashtable实现php数组?"></a>为什么要用hashtable实现php数组?</h2><p>因为散列表是根据关键建码值直接进项访问的数据结构。在key和value之间有一个映射函数,可以根据key直接索引到对应的value值,它并<br>不会使用一般的对比操作,而是直接使用<code>内存的起始位置和偏移位置</code>进行寻址,所以会比正常的寻址要快。</p><h2 id="散列表结构"><a href="#散列表结构" class="headerlink" title="散列表结构"></a>散列表结构</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> _zend_array &#123;</div><div class="line">zend_refcounted_h gc;</div><div class="line"><span class="keyword">union</span> &#123;</div><div class="line"><span class="keyword">struct</span> &#123;</div><div class="line">ZEND_ENDIAN_LOHI_4(</div><div class="line">zend_uchar    flags,</div><div class="line">zend_uchar    nApplyCount,</div><div class="line">zend_uchar    nIteratorsCount,</div><div class="line">zend_uchar    reserve)</div><div class="line">&#125; v;</div><div class="line"><span class="keyword">uint32_t</span> flags;</div><div class="line">&#125; u;</div><div class="line"><span class="keyword">uint32_t</span>          nTableMask;</div><div class="line">Bucket           *arData;</div><div class="line"><span class="keyword">uint32_t</span>          nNumUsed;</div><div class="line"><span class="keyword">uint32_t</span>          nNumOfElements;</div><div class="line"><span class="keyword">uint32_t</span>          nTableSize;</div><div class="line"><span class="keyword">uint32_t</span>          nInternalPointer;</div><div class="line">zend_long         nNextFreeElement;</div><div class="line"><span class="keyword">dtor_func_t</span>       pDestructor;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><p>主要字段介绍:</p><ul><li>gc 引用次数,垃圾回收时会用到。</li><li>union u 就不介绍了。</li><li>arData 存储元素的数组,内存是连续的,arData指向第一个元素。</li><li>nTableMask nTableSize的负数。</li><li>nTableSize 数组长度,为2的n此房。</li><li>nNumUsed 当前使用的Bucket数。</li><li>nNumOfElements 当前所有的Bucket数。</li><li>nNextFreeElement 下一个被使用的Bucket($a[] = ‘’)</li><li>pDestructor 删除某个元素是会使用</li></ul><h2 id="Bucket结构"><a href="#Bucket结构" class="headerlink" title="Bucket结构"></a>Bucket结构</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> _Bucket &#123;</div><div class="line">zval              val;</div><div class="line">zend_ulong        h;                <span class="comment">/* hash value (or numeric index)   */</span></div><div class="line">zend_string      *key;              <span class="comment">/* string key or NULL for numerics */</span></div><div class="line">&#125; Bucket;</div></pre></td></tr></table></figure><ul><li>h hash出来的值(times33)</li><li>*key 存储元素的key</li><li>val 具体值,是个zval</li></ul><h2 id="如何实现"><a href="#如何实现" class="headerlink" title="如何实现"></a>如何实现</h2><p>php中实现散列表实现主要使用<code>存储元素数组</code>和 <code>映射函数</code>（也可以称作散列函数）和<code>映射表</code></p><h4 id="举个具体的栗子"><a href="#举个具体的栗子" class="headerlink" title="举个具体的栗子:"></a>举个具体的栗子:</h4><p> 如果我们要在php代码中声明一个数组会发生什么?下边分析下php是如何实现数组的。<br> <figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">$arr= [</div><div class="line"><span class="string">'a'</span> =&gt; <span class="string">'111'</span>,</div><div class="line"><span class="string">'b'</span> =&gt; <span class="string">'222'</span>,</div><div class="line"><span class="string">'c'</span> =&gt; <span class="string">'ccc'</span></div><div class="line">];</div></pre></td></tr></table></figure></p><ol><li>首先肯定是初始化。</li><li>接下来将每个元素对应的值依照顺序拷贝到 Bucket里。</li><li>然后利用映射函数对求值,根据算出来的值将其对应的bucket的地址写到该值对应的映射这表里。</li></ol><p>具体操作如下图:<br><img src="/photo/img/php数组实现/php数组具体实现.png" alt="image"></p><p>当然我们这里的映射是理想映射,因为在映射的计算过程中可能存在冲突,后续会介绍映射函数,以及如何解映射函数计算后的冲突。</p><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">ZEND_API <span class="keyword">void</span> ZEND_FASTCALL _zend_hash_init(HashTable *ht, <span class="keyword">uint32_t</span> nSize, <span class="keyword">dtor_func_t</span> pDestructor, zend_bool persistent ZEND_FILE_LINE_DC)</div><div class="line">&#123;</div><div class="line">GC_REFCOUNT(ht) = <span class="number">1</span>; <span class="comment">//设置引用次数</span></div><div class="line">GC_TYPE_INFO(ht) = IS_ARRAY; <span class="comment">//设置数据类型</span></div><div class="line">ht-&gt;u.flags = (persistent ? HASH_FLAG_PERSISTENT : <span class="number">0</span>) | HASH_FLAG_APPLY_PROTECTION | HASH_FLAG_STATIC_KEYS;</div><div class="line">ht-&gt;nTableMask = HT_MIN_MASK;</div><div class="line">HT_SET_DATA_ADDR(ht, &amp;uninitialized_bucket);</div><div class="line">ht-&gt;nNumUsed = <span class="number">0</span>;</div><div class="line">ht-&gt;nNumOfElements = <span class="number">0</span>;</div><div class="line">ht-&gt;nInternalPointer = HT_INVALID_IDX;</div><div class="line">ht-&gt;nNextFreeElement = <span class="number">0</span>;</div><div class="line">ht-&gt;pDestructor = pDestructor;</div><div class="line">ht-&gt;nTableSize = zend_hash_check_size(nSize);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>初始化的时候主要是对hashtable中各个成员的进行初始化设置,而且在这个时候不会给arData分配内存,只有在开始插入数据的时候才会<br>为arData分配内存。</p><h2 id="映射函数"><a href="#映射函数" class="headerlink" title="映射函数"></a>映射函数</h2><p>映射函数其实就是一次<code>hash</code>操作和和一次<code>|</code>操作.<br>hash操作就是上边锁提到得到times33操作,<code>|</code>操作是计算出来的hash值与nTableSize进行计算。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nIndex = ket-&gt;h | nTableMask;</div></pre></td></tr></table></figure></p><p>因为nTableMask是nTableSize的负数,所以计算出来的nIndex值区间应该为[-1,nTableMask]。</p><p>此处待补充 为什么会在[-1, nTableMask] 区间内。</p><h3 id="写入数据"><a href="#写入数据" class="headerlink" title="写入数据"></a>写入数据</h3><p>在初始化的时候并不会对arData分配内存,只有在写入的时候才会真正分配内存</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> zend_always_inline <span class="title">zend_hash_real_init_ex</span><span class="params">(HashTable *ht, <span class="keyword">int</span> packed)</span></span></div><div class="line">&#123;</div><div class="line">HT_ASSERT(GC_REFCOUNT(ht) == <span class="number">1</span>);</div><div class="line">ZEND_ASSERT(!((ht)-&gt;u.flags &amp; HASH_FLAG_INITIALIZED));</div><div class="line"><span class="keyword">if</span> (packed) &#123;</div><div class="line">HT_SET_DATA_ADDR(ht, pemalloc(HT_SIZE(ht), (ht)-&gt;u.flags &amp; HASH_FLAG_PERSISTENT));</div><div class="line">(ht)-&gt;u.flags |= HASH_FLAG_INITIALIZED | HASH_FLAG_PACKED;</div><div class="line">HT_HASH_RESET_PACKED(ht);</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">(ht)-&gt;nTableMask = -(ht)-&gt;nTableSize;</div><div class="line">HT_SET_DATA_ADDR(ht, pemalloc(HT_SIZE(ht), (ht)-&gt;u.flags &amp; HASH_FLAG_PERSISTENT));</div><div class="line">(ht)-&gt;u.flags |= HASH_FLAG_INITIALIZED;</div><div class="line"><span class="keyword">if</span> (EXPECTED(ht-&gt;nTableMask == <span class="number">-8</span>)) &#123;</div><div class="line">Bucket *arData = ht-&gt;arData;</div><div class="line"></div><div class="line">HT_HASH_EX(arData, <span class="number">-8</span>) = <span class="number">-1</span>;</div><div class="line">HT_HASH_EX(arData, <span class="number">-7</span>) = <span class="number">-1</span>;</div><div class="line">HT_HASH_EX(arData, <span class="number">-6</span>) = <span class="number">-1</span>;</div><div class="line">HT_HASH_EX(arData, <span class="number">-5</span>) = <span class="number">-1</span>;</div><div class="line">HT_HASH_EX(arData, <span class="number">-4</span>) = <span class="number">-1</span>;</div><div class="line">HT_HASH_EX(arData, <span class="number">-3</span>) = <span class="number">-1</span>;</div><div class="line">HT_HASH_EX(arData, <span class="number">-2</span>) = <span class="number">-1</span>;</div><div class="line">HT_HASH_EX(arData, <span class="number">-1</span>) = <span class="number">-1</span>;</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">HT_HASH_RESET(ht);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>分配具体的内存</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">define</span> HT_SIZE_EX(nTableSize, nTableMask) \</span></div><div class="line">(HT_DATA_SIZE((nTableSize)) + HT_HASH_SIZE((nTableMask)))</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">#define HT_HASH_SIZE(nTableMask) \</div><div class="line">(((size_t)(uint32_t)-(int32_t)(nTableMask)) * sizeof(uint32_t))</div><div class="line"></div><div class="line">#define HT_DATA_SIZE(nTableSize) \</div><div class="line">((size_t)(nTableSize) * sizeof(Bucket))</div></pre></td></tr></table></figure><p>可以看到在分配具体分配内存的时候会分配 nTableSize<em>(Bucket+uint32_t)大小的内存。<br>讲道理只需要分配nTableSize</em>Bucket大小内存就可以了,为什么会多余出来 nTableSize<em>uint32_t内存呢?<br>因为nTableSize</em>uint32_t就是<code>映射表</code>所占内存大小。所以说Bucket会和映射表一次申请内存。<br>写完成写入操作以后会将<code>*arData</code> 指向第一个Bucket。</p><p>具体在内存里的结果如图所示:<br><img src="/photo/img/php数组实现/hashtable.png" alt="image"></p><p><code>映射表</code>在初始化的时候所有值都是-1,只有在被赋值时候会写入对应<code>Bucket</code>所在链表的偏移量。;<br>ht-&gt;arData 指向第一个<code>Bucket</code>的位置,在赋值的时候会按照列表顺序,将值写入<code>Bucket</code>的value里,然后会根据<br>映射函数算出值当做偏移量找到对应<code>映射表</code>的元素,然后将当前<code>Bucket</code>写入此元素。</p><p>ps nTableSize 为2的次方倍。</p><h2 id="冲突"><a href="#冲突" class="headerlink" title="冲突"></a>冲突</h2><p>如果<code>nIndex = ket-&gt;h | nTableMask</code> 算出来的值冲突了怎么办? 首先<code>映射表</code>的每个元素不是链表,所以导致无法存储多个元素。<br>在php中是这样处理冲突的:<br>首先<code>映射表</code>的所有元素初始化值为 -1 ,当前<br>如果用冲突会将新算出来的值对应的<code>Bucket</code>覆盖原来旧的<code>Bucket</code>,然后将旧的<code>Bucket</code>迁移到新的<code>Bucket</code>,<br>并将旧的<code>Bucket</code>的u2.next(默认为-1) 指向新<code>Bucket</code>。</p><p>如图<br><img src="/photo/img/php数组实现/链表冲突.png" alt="image"></p><h2 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h2><p>php再查找一个数组元素是,首先会根据其key 获取到计算后hash值’ket-&gt;h’,然后根据映射函数算出当前元素在<code>映射表</code>中的偏移量,利用当前位置+偏移量找到<code>映射表</code>的元素,再根据其内的偏量找到对应<code>Bucket</code>链表的首个元素位置,最后遍历该链表核对key值,找到对应的值。</p><p>具体实现函数:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> zend_always_inline Bucket *<span class="title">zend_hash_find_bucket</span><span class="params">(<span class="keyword">const</span> HashTable *ht, zend_string *key)</span></span></div><div class="line">&#123;</div><div class="line">zend_ulong h;</div><div class="line"><span class="keyword">uint32_t</span> nIndex;</div><div class="line"><span class="keyword">uint32_t</span> idx;</div><div class="line">Bucket *p, *arData;</div><div class="line"></div><div class="line">h = zend_string_hash_val(key);</div><div class="line">arData = ht-&gt;arData;</div><div class="line">nIndex = h | ht-&gt;nTableMask;</div><div class="line">idx = HT_HASH_EX(arData, nIndex);</div><div class="line"><span class="keyword">while</span> (EXPECTED(idx != HT_INVALID_IDX)) &#123;</div><div class="line">p = HT_HASH_TO_BUCKET_EX(arData, idx);</div><div class="line"><span class="keyword">if</span> (EXPECTED(p-&gt;key == key)) &#123; <span class="comment">/* check for the same interned string */</span></div><div class="line"><span class="keyword">return</span> p;</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (EXPECTED(p-&gt;h == h) &amp;&amp;</div><div class="line">     EXPECTED(p-&gt;key) &amp;&amp;</div><div class="line">     EXPECTED(ZSTR_LEN(p-&gt;key) == ZSTR_LEN(key)) &amp;&amp;</div><div class="line">     EXPECTED(<span class="built_in">memcmp</span>(ZSTR_VAL(p-&gt;key), ZSTR_VAL(key), ZSTR_LEN(key)) == <span class="number">0</span>)) &#123;</div><div class="line"><span class="keyword">return</span> p;</div><div class="line">&#125;</div><div class="line">idx = Z_NEXT(p-&gt;val);</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="扩容"><a href="#扩容" class="headerlink" title="扩容"></a>扩容</h2><p>数组的容量在初始化的时候已经确定了大小,就是nTableSize。当然映射函数也是根据 nTableMask 来计算的。<br>所以我们扩容时候必须重新计算索引,也就是<code>映射表</code>里的值。<br>具体扩容规则:<br>首先当需要扩容时,会计算当前<code>Bucket</code>链表里删除元素数量占总表元素数量的比例,如果没有超过阈值则申请分配一个原来数组大小两倍的新素组,把元素复制到新数组上,然后重新建立索引。</p><p>阈值判断:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ht-&gt;nNumUsed &gt; ht-&gt;nNumOfElements + (ht-&gt;nNumOfElements &gt;&gt; <span class="number">5</span></div></pre></td></tr></table></figure></p><p>处理过程:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> ZEND_FASTCALL <span class="title">zend_hash_do_resize</span><span class="params">(HashTable *ht)</span></span></div><div class="line">&#123;</div><div class="line"></div><div class="line">IS_CONSISTENT(ht);</div><div class="line">HT_ASSERT(GC_REFCOUNT(ht) == <span class="number">1</span>);</div><div class="line"></div><div class="line"><span class="keyword">if</span> (ht-&gt;nNumUsed &gt; ht-&gt;nNumOfElements + (ht-&gt;nNumOfElements &gt;&gt; <span class="number">5</span>)) &#123; <span class="comment">/* additional term is there to amortize the cost of compaction */</span></div><div class="line">HANDLE_BLOCK_INTERRUPTIONS();</div><div class="line">zend_hash_rehash(ht);</div><div class="line">HANDLE_UNBLOCK_INTERRUPTIONS();</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (ht-&gt;nTableSize &lt; HT_MAX_SIZE) &#123;<span class="comment">/* Let's double the table size */</span></div><div class="line"><span class="keyword">void</span> *new_data, *old_data = HT_GET_DATA_ADDR(ht);</div><div class="line"><span class="keyword">uint32_t</span> nSize = ht-&gt;nTableSize + ht-&gt;nTableSize;</div><div class="line">Bucket *old_buckets = ht-&gt;arData;</div><div class="line"></div><div class="line">HANDLE_BLOCK_INTERRUPTIONS();</div><div class="line">new_data = pemalloc(HT_SIZE_EX(nSize, -nSize), ht-&gt;u.flags &amp; HASH_FLAG_PERSISTENT);</div><div class="line">ht-&gt;nTableSize = nSize;</div><div class="line">ht-&gt;nTableMask = -ht-&gt;nTableSize;</div><div class="line">HT_SET_DATA_ADDR(ht, new_data);</div><div class="line"><span class="built_in">memcpy</span>(ht-&gt;arData, old_buckets, <span class="keyword">sizeof</span>(Bucket) * ht-&gt;nNumUsed);</div><div class="line">pefree(old_data, ht-&gt;u.flags &amp; HASH_FLAG_PERSISTENT);</div><div class="line">zend_hash_rehash(ht);</div><div class="line">HANDLE_UNBLOCK_INTERRUPTIONS();</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">zend_error_noreturn(E_ERROR, <span class="string">"Possible integer overflow in memory allocation (%zu * %zu + %zu)"</span>, ht-&gt;nTableSize * <span class="number">2</span>, <span class="keyword">sizeof</span>(Bucket) + <span class="keyword">sizeof</span>(<span class="keyword">uint32_t</span>), <span class="keyword">sizeof</span>(Bucket));</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>在处理的过程中还会把已经删除的<code>Bucket</code>给删除。</p><p>具体的操作在<code>zend_hash.c</code>文件里。<br>如果超过阈值,则会把已经删除<code>Bucket</code>移除,然后把又有后边的元素往前移动,补上空缺的<code>Bucket</code>,当然索引也会重建。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.cnblogs.com/52fhy/p/5007456.html" target="_blank" rel="noopener">time33 </a></li><li><a href="https://github.com/pangudashu/php7-internal/blob/master/2/zval.md" target="_blank" rel="noopener">2.1 变量的内部实现</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;php的数组依赖于hashtable实现的。&lt;/p&gt;
&lt;p&gt;Times33的算法很简单，就是不断的乘33,下边是times33算法:&lt;/p&gt;
&lt;h2 id=&quot;Times33-hash&quot;&gt;&lt;a href=&quot;#Times33-hash&quot; class=&quot;headerlink&quot; t
      
    
    </summary>
    
      <category term="php源码学习" scheme="http://yoursite.com/categories/php%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="php源码" scheme="http://yoursite.com/tags/php%E6%BA%90%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>php数据结构</title>
    <link href="http://yoursite.com/2018/08/19/php%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <id>http://yoursite.com/2018/08/19/php数据结构/</id>
    <published>2018-08-19T12:30:34.000Z</published>
    <updated>2019-01-08T10:55:19.888Z</updated>
    
    <content type="html"><![CDATA[<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>php是如何统一实现各种变量类型的? 这和php变量类型的实现是密不可分的。<br>一个变量主要有三个要素:<code>变量名``变量类型``变量值</code>,他们在php变量类型实现中主要对应 zval zend_value 和<br>zend的各种数据类型。<br>php中用$去声明一个变量,在声明的时候可以进行初始化,当然也可以不声明直接使用。一般来说,一个变量的定义包含<br>两步:变量定义和变量初始化,在php中只定义不初始化是可以的。</p><h2 id="变量结构体"><a href="#变量结构体" class="headerlink" title="变量结构体"></a>变量结构体</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// php zval结构</span></div><div class="line"><span class="keyword">struct</span> _zval_struct &#123;</div><div class="line">zend_value        value; 指向具体的value<span class="comment">/* value */</span></div><div class="line"><span class="keyword">union</span> &#123;</div><div class="line"><span class="keyword">struct</span> &#123;</div><div class="line">ZEND_ENDIAN_LOHI_4(</div><div class="line">zend_uchar    type,<span class="comment">/* active type */</span></div><div class="line">zend_uchar    type_flags,</div><div class="line">zend_uchar    const_flags,</div><div class="line">zend_uchar    reserved)    <span class="comment">/* call info for EX(This) */</span></div><div class="line">&#125; v;</div><div class="line"><span class="keyword">uint32_t</span> type_info;</div><div class="line">&#125; u1;</div><div class="line"><span class="keyword">union</span> &#123;</div><div class="line"><span class="keyword">uint32_t</span>     var_flags;</div><div class="line"><span class="keyword">uint32_t</span>     next;                 <span class="comment">/* hash collision chain */</span></div><div class="line"><span class="keyword">uint32_t</span>     cache_slot;           <span class="comment">/* literal cache slot */</span></div><div class="line"><span class="keyword">uint32_t</span>     lineno;               <span class="comment">/* line number (for ast nodes) */</span></div><div class="line"><span class="keyword">uint32_t</span>     num_args;             <span class="comment">/* arguments number for EX(This) */</span></div><div class="line"><span class="keyword">uint32_t</span>     fe_pos;               <span class="comment">/* foreach position */</span></div><div class="line"><span class="keyword">uint32_t</span>     fe_iter_idx;          <span class="comment">/* foreach iterator index */</span></div><div class="line">&#125; u2;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><h2 id="变量类型"><a href="#变量类型" class="headerlink" title="变量类型"></a>变量类型</h2><p>其中type 表示当前变量的类型,例如string array int等,以下为php中全部变量类型。<br>其中type 是一个无符号类型的char,他的定义是这样的<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> zend_uchar;</div></pre></td></tr></table></figure></p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">union</span> _zend_value &#123;</div><div class="line">    zend_long         lval;<span class="comment">/* long value */</span></div><div class="line">    <span class="keyword">double</span>            dval;<span class="comment">/* double value */</span></div><div class="line">    zend_refcounted  *counted;</div><div class="line">    zend_string      *str;</div><div class="line">    zend_array       *arr;</div><div class="line">    zend_object      *obj;</div><div class="line">    zend_resource    *res;</div><div class="line">    zend_reference   *ref;</div><div class="line">    zend_ast_ref     *ast;</div><div class="line">    zval             *zv;</div><div class="line">    <span class="keyword">void</span>             *ptr;</div><div class="line">    zend_class_entry *ce;</div><div class="line">    zend_function    *func;</div><div class="line">    <span class="keyword">struct</span> &#123;</div><div class="line">    <span class="keyword">uint32_t</span> w1;</div><div class="line">    <span class="keyword">uint32_t</span> w2;</div><div class="line">    &#125; ww;</div><div class="line">    &#125; zend_value;</div></pre></td></tr></table></figure><ul><li>在这些类型里不存在boolean类型,因为在php7中已经将boolean拆分为true和false.直接保存在type中,也就是说<br>boolean没有_zend_value结构,直接通过type字段就可以确定boolean的值。</li><li>从上边的结构体可以看出来 <code>zend_long</code>、<code>double</code> 类型不是指针类型,也就是说整形和浮点型正能进行深拷贝,<br>并不能和其他说句类型一样进行 <code>引用计数</code>和<code>写时复制</code>。因为有<code>引用计数</code>和<code>写时复制</code>在变量赋值且不做修改时<br>才能大量节省内存。</li></ul><p>以string类型为例,它在php中的结构类型应该是这样的:</p><p><img src="/photo/img/php数据结构/php数据结构.png" alt="image"></p><p>_zend_string:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> _zend_string &#123;</div><div class="line">zend_refcounted_h gc;</div><div class="line">zend_ulong        h;                <span class="comment">/* hash value */</span></div><div class="line"><span class="keyword">size_t</span>            len;</div><div class="line"><span class="keyword">char</span>              val[<span class="number">1</span>];          <span class="comment">/*字符串起始地址*/</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure></p><ul><li>其中<code>gc</code> 字段表示这个结构体被引用的次数,垃圾回收的时候会用到。</li><li>h 字符串通过Times33计算出来的hashcode</li><li>len 字符串长度</li><li>val 字符串内容</li></ul><p>我们在这里都会有疑问,为什么存储字符串内容的时候没有使用char*类型,而用了一个数组类型来存储。zend_string<br>在申请内存的时候会会申请malloc(sizeof(zend_string)+字符串长度),且val[0]存的是字符串最后一个字符安“\0”</p><p>zend_string结构在内存中如下所示:</p><p><img src="/photo/img/php数据结构/zend_stirng内存中结构.png" alt="image"></p><p>当时也在char val[1]的地方疑惑了很久,再往上找了很多文章,其中<br>Nikita Popov(nikic，PHP 官方开发组成员，柏林科技大学的学生) 这样解释</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">如果你对 C 语言了解的不是很深入的话，可能会觉得 val 的定义有些奇怪：这个声明只有一个元素，但是显然我们想存储的字符串长度肯定大于一个字符的长度。这里其实使用的是结构体的一个『黑』方法：在声明数组时只定义一个元素，但是实际创建 zend_string 时再分配足够的内存来存储整个字符串。这样我们还是可以通过 val 访问完整的字符串。</div></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考:"></a>参考:</h2><ul><li><a href="https://nikic.github.io/2015/06/19/Internal-value-representation-in-PHP-7-part-2.html" target="_blank" rel="noopener">Internal value representation in PHP 7 - Part 2 </a></li><li><a href="https://0x1.im/blog/php/Internal-value-representation-in-PHP-7-part-2.html" target="_blank" rel="noopener">[译]变量在 PHP7 内部的实现（二）</a></li><li><a href="https://www.kancloud.cn/nickbai/php7/363268" target="_blank" rel="noopener">php内核分析——2.1 变量的内部实现</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;变量&quot;&gt;&lt;a href=&quot;#变量&quot; class=&quot;headerlink&quot; title=&quot;变量&quot;&gt;&lt;/a&gt;变量&lt;/h2&gt;&lt;p&gt;php是如何统一实现各种变量类型的? 这和php变量类型的实现是密不可分的。&lt;br&gt;一个变量主要有三个要素:&lt;code&gt;变量名``变量类型`
      
    
    </summary>
    
      <category term="php源码学习" scheme="http://yoursite.com/categories/php%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="php源码" scheme="http://yoursite.com/tags/php%E6%BA%90%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>php的引用</title>
    <link href="http://yoursite.com/2018/08/12/php%E7%9A%84&amp;%E7%AC%A6%E5%8F%B7/"/>
    <id>http://yoursite.com/2018/08/12/php的&amp;符号/</id>
    <published>2018-08-12T14:18:07.000Z</published>
    <updated>2019-01-08T10:56:48.506Z</updated>
    
    <content type="html"><![CDATA[<h3 id="amp"><a href="#amp" class="headerlink" title="&amp;"></a>&amp;</h3><p>&amp;是php中的引用,他并不一种独立的数据类型,而是指向其他数据类型的数据结构,和C语言的指针类似。</p><p>具体作用为:当我们修改引用类型变量是,其修改的将作用于实际引用的变量上。</p><p>如果当我们使用&amp;符号生成一个引用变量时,首先会为&amp;操作生成一个zend_reference结构,zend_reference就是引用<br>类型的结构体,他内嵌一个zval,然后此结构的体zval的value指向原来zval的value上。然后将原来zval的变量<br>类型变为IS_REFERENCE,原来zval的value执行新创建zend_reference结构。<br>索引&amp;的作用就是新生成zend_reference,然后将其指向原来的zval的value上,顺便把原来zval的变量类型变化为引用类型。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> _zend_reference &#123;</div><div class="line">    zend_refcondted_h gc;</div><div class="line">    zval              val;  指向原来的value.</div><div class="line">&#125;;</div></pre></td></tr></table></figure><h3 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$a = time(); //步骤1</div><div class="line">$b = &amp;$a;    //步骤2</div></pre></td></tr></table></figure><p><strong>步骤1</strong></p><p>现在<code>$a = time()</code>是他们的数据结构指向为:</p><p><img src="/photo/img/php引用/未引用前.png" alt="image"></p><p>此时数据结构,一直指针指向是这个样子。</p><p><strong>步骤2</strong></p><p><img src="/photo/img/php引用/引用后.png" alt="image"></p><p>也就是说PHP的引用在使用后新生成一个引用类型机构,然后将引用类型结构指向越来的value,最后将原来zval的value<br>指向新生成的结构体,并将其变量类型变为引用类型,IS_REFERENCE。当然随之改变的还有计数。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;amp&quot;&gt;&lt;a href=&quot;#amp&quot; class=&quot;headerlink&quot; title=&quot;&amp;amp;&quot;&gt;&lt;/a&gt;&amp;amp;&lt;/h3&gt;&lt;p&gt;&amp;amp;是php中的引用,他并不一种独立的数据类型,而是指向其他数据类型的数据结构,和C语言的指针类似。&lt;/p&gt;
&lt;p&gt;具
      
    
    </summary>
    
      <category term="php源码学习" scheme="http://yoursite.com/categories/php%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="php源码" scheme="http://yoursite.com/tags/php%E6%BA%90%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>swagger</title>
    <link href="http://yoursite.com/2018/08/06/swagger/"/>
    <id>http://yoursite.com/2018/08/06/swagger/</id>
    <published>2018-08-06T07:30:13.000Z</published>
    <updated>2019-01-08T10:57:25.327Z</updated>
    
    <content type="html"><![CDATA[<p>swagger 是什么鬼?<br>swagger像是个接口生成、管理、mock、测试的框架。主要功能:</p><ul><li>支持API自动生成同步的在线文档</li><li>这些文档可用于项目内部API审核</li><li>方便测试人员了解API</li><li>这些文档可作为客户产品文档的一部分进行发布</li><li>可以mock接口方便调试<br>支持API规范生成代码，生成的客户端和服务器端骨架代码可以加速开发和测试速度<br>##<br>swagger-ui 一个是一个管理接口的服务,它可以根据swagger.json模拟接口返回。<h3 id="搭建swagger-ui"><a href="#搭建swagger-ui" class="headerlink" title="搭建swagger-ui"></a>搭建swagger-ui</h3></li></ul><p>克隆swagger-ui</p><p><code>git clone https://github.com/swagger-api/swagger-ui.git</code></p><p>配置nginx 服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">       listen       8090;</div><div class="line">       server_name  www.swagger-ui.com;</div><div class="line">       autoindex on;</div><div class="line">       #charset koi8-r;</div><div class="line"></div><div class="line">      # access_log  logs/host.access.log  main;</div><div class="line">       root  /Users/lijian/Desktop/code/web_code/swagger/swagger-ui/dist;</div><div class="line">       location / &#123;</div><div class="line"></div><div class="line">           index  index.php index.html index.htm;</div><div class="line">           try_files $uri $uri/ /index.php?$query_string;</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       #error_page  404              /404.html;</div><div class="line"></div><div class="line">       # redirect server error pages to the static page /50x.html</div><div class="line">       #</div><div class="line">       error_page   500 502 503 504  /50x.html;</div><div class="line">       location = /50x.html &#123;</div><div class="line">           root   html;</div><div class="line">       &#125;</div><div class="line">       location ~ \.php$ &#123;</div><div class="line"></div><div class="line">           fastcgi_pass   127.0.0.1:9000;</div><div class="line">           fastcgi_index  index.php;</div><div class="line">           fastcgi_split_path_info    ^(.+\.php)(/.+)$;</div><div class="line">           fastcgi_param PATH_TRANSLATED $document_root$fastcgi_path_info;</div><div class="line">   fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;</div><div class="line">           include        fastcgi_params;</div><div class="line">       &#125;</div><div class="line"></div><div class="line">   &#125;</div></pre></td></tr></table></figure><p>重启NGINX<br><code>nginx -s reload</code></p><p>样子如下:</p><p><img src="/photo/img/swagger-ui/WX20180807-095949.png" alt="image"></p><h2 id="swagger-json"><a href="#swagger-json" class="headerlink" title="swagger.json"></a>swagger.json</h2><p>swagger.json,swagger-ui能够将swagger.json解析为对应的可处理的接口文档。</p><p>效果如上图所示。<br>最终要的一点在于 <code>http://localhost:8091/swagger.json</code>该url为被解析的json地址。</p><p>当然如果我们需要管理不同项目的项目,可以单独配置个服务用来管理swagger.json。</p><h2 id="swagger-php"><a href="#swagger-php" class="headerlink" title="swagger-php"></a>swagger-php</h2><p>github 地址: <code>https://github.com/zircote/swagger-php</code></p><p>首先我们需要在项目里引入swagger-php 扩展包。</p><p><code>composer global require zircote/swagger-php</code></p><p>按照swagger文档写swagger备注:<br>eg:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * @SWG\Post(</div><div class="line"> *     path=&quot;/guestbook/appmsg&quot;,</div><div class="line"> *     summary=&quot;访客留言&quot;,</div><div class="line"> *     tags=&#123;&quot;new&quot;, &quot;guests&quot;&#125;,</div><div class="line"> *     description=&quot;访客留言&quot;,</div><div class="line"> *     operationId=&quot;appmsg&quot;,</div><div class="line"> *     @SWG\Parameter(</div><div class="line"> *         description=&quot;msg&quot;,</div><div class="line"> *         format=&quot;string&quot;,</div><div class="line"> *         in=&quot;formData&quot;,</div><div class="line"> *         name=&quot;msg&quot;,</div><div class="line"> *         required=true,</div><div class="line"> *         type=&quot;string&quot;,</div><div class="line"> *     ),</div><div class="line"> *     @SWG\Parameter(</div><div class="line"> *         description=&quot;email&quot;,</div><div class="line"> *         format=&quot;string&quot;,</div><div class="line"> *         in=&quot;formData&quot;,</div><div class="line"> *         name=&quot;email&quot;,</div><div class="line"> *         required=true,</div><div class="line"> *         type=&quot;string&quot;,</div><div class="line"> *</div><div class="line"> *     ),</div><div class="line"> *     consumes=&#123;&quot;multipart/form-data&quot;, &quot;application/x-www-form-urlencoded&quot;&#125;,</div><div class="line"> *     produces=&#123;&quot;application/json&quot;&#125;,</div><div class="line"> *     @SWG\Response(</div><div class="line"> *         response=&quot;200&quot;,</div><div class="line"> *         description=&quot;返回成功&quot;,</div><div class="line"> *     ),</div><div class="line"> * )</div><div class="line"> *</div><div class="line"> */</div><div class="line"></div><div class="line">/**</div><div class="line"> *   @SWG\Get(</div><div class="line"> *     path=&quot;/get/feedback&quot;,</div><div class="line"> *     summary=&quot;留言表&quot;,</div><div class="line"> *     tags=&#123;&quot;getList&quot;&#125;,</div><div class="line"> *     descriptionId=&quot;appmsglist&quot;,</div><div class="line"> *     @SWG\Parameter(</div><div class="line"> *          description=&quot;Id&quot;,</div><div class="line"> *          format=&quot;integer&quot;,</div><div class="line"> *          in=&quot;formData&quot;,</div><div class="line"> *          name=&quot;user_id&quot;,</div><div class="line"> *          required=&quot;true&quot;,</div><div class="line"> *          type=&quot;integer&quot;</div><div class="line">    *      ),</div><div class="line"> *      @SWG\Parameter(</div><div class="line"> *          description=&quot;phone&quot;,</div><div class="line"> *          format=&quot;integer&quot;,</div><div class="line"> *          in=&quot;formData&quot;,</div><div class="line"> *          name=&quot;user_id&quot;,</div><div class="line"> *          required=&quot;true&quot;,</div><div class="line"> *          type=&quot;integer&quot;</div><div class="line"> *        ),</div><div class="line"> *     consumes=&#123;&quot;multipart/form-data&quot;, &quot;application/x-www-form-urlencode&quot;&#125;,</div><div class="line"> *     produces=&#123;&quot;application/json&quot;&#125;,</div><div class="line"> *     @SWG\Response(</div><div class="line"> *        response=&quot;200&quot;,</div><div class="line"> *        description=&quot;返回成功&quot;,</div><div class="line"> *     )</div><div class="line"> * )</div><div class="line"> *</div><div class="line"> */</div></pre></td></tr></table></figure><p>写完以后运行:</p><p><code>./vendor/zircote/swagger-php/bin/swagger app/Business/Hera/HeraMockApi.php -o ./../../swagger_json/rrc/swagger.json</code><br>第一个为swagger.json的生成器,第二个为目标文件,第三个为生成文件。</p><p>然后我们在swagger-ui 引入生成的json即可。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;swagger 是什么鬼?&lt;br&gt;swagger像是个接口生成、管理、mock、测试的框架。主要功能:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;支持API自动生成同步的在线文档&lt;/li&gt;
&lt;li&gt;这些文档可用于项目内部API审核&lt;/li&gt;
&lt;li&gt;方便测试人员了解API&lt;/li&gt;
&lt;li
      
    
    </summary>
    
    
      <category term="pear" scheme="http://yoursite.com/tags/pear/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-建造者模式(builder template method)</title>
    <link href="http://yoursite.com/2018/08/01/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2018/08/01/设计模式/</id>
    <published>2018-08-01T12:53:15.000Z</published>
    <updated>2019-01-08T10:59:38.245Z</updated>
    
    <content type="html"><![CDATA[<h2 id="builder-模式"><a href="#builder-模式" class="headerlink" title="builder 模式"></a>builder 模式</h2><p>builder 建造者模式,又称生成器模式。</p><p>建造者模式是为了简化 使用多个建单的对象构建成一个复杂对象的 设计模式。 属于创建型模式。</p><p>代码示例</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">publish class SmallWheel()</div><div class="line">&#123;</div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line">publish class BigWheel()</div><div class="line">&#123;</div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line">publish class SmallCar()</div><div class="line">&#123;</div><div class="line">    publish $wheel;</div><div class="line">&#125;</div><div class="line"></div><div class="line">publish class BigCar()</div><div class="line">&#123;</div><div class="line">    publish $wheel;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>以上为零件。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">publish CarBuilder()</div><div class="line">&#123;</div><div class="line">    <span class="comment">//创建小轿车</span></div><div class="line">    publish <span class="function"><span class="keyword">function</span> <span class="title">getSmallCar</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        $smallCar = <span class="keyword">new</span> SmallCar();</div><div class="line">        $smallCar-&gt;whell = <span class="keyword">new</span> SmallWheel();</div><div class="line">        <span class="keyword">return</span> $smallCar;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//创建大轿车</span></div><div class="line">    publish <span class="function"><span class="keyword">function</span> <span class="title">getBigCar</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        $bigCar = <span class="keyword">new</span> BigCar();</div><div class="line">        $bigCar-&gt;whell = <span class="keyword">new</span> BigWheel();</div><div class="line">        <span class="keyword">return</span> $bigCar;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>调度 </p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">$carBuilder = <span class="keyword">new</span> CArBuilder();</div><div class="line"></div><div class="line">$smallCar = $carBuilder-&gt;getSmallCar();</div><div class="line">$bigCar = $carBuilder-&gt;getBigCar();</div></pre></td></tr></table></figure><p>备注:</p><p>建造者模式与工厂模式区别:<br>工厂模式用于批量创建那哪一种类, 建造者模式更注重构建过程。</p><h2 id="template-method"><a href="#template-method" class="headerlink" title="template method"></a>template method</h2><p>模板方法:定义一个抽象类或者/父类,由继承它的子类按照需求重写它的方法实现。</p><p>eg:</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">publish abstract class Car()</div><div class="line">&#123;</div><div class="line">    //强制子类实现</div><div class="line">    abstract public function run();</div><div class="line">    abstract public function turnOnTheLight();</div><div class="line">    //不强制</div><div class="line">    public function palyMusic()</div><div class="line">    &#123;</div><div class="line">        return 'hengheng hahei';</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>继承</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SmaCar</span> <span class="keyword">extends</span> <span class="title">car</span> </span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">'run'</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">public</span> funtion turnOnTheLight()</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">'turnOnTheLight'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>以上</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;builder-模式&quot;&gt;&lt;a href=&quot;#builder-模式&quot; class=&quot;headerlink&quot; title=&quot;builder 模式&quot;&gt;&lt;/a&gt;builder 模式&lt;/h2&gt;&lt;p&gt;builder 建造者模式,又称生成器模式。&lt;/p&gt;
&lt;p&gt;建造者模式是为了
      
    
    </summary>
    
      <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Item2使用sz rz命令从服务下载上传文件</title>
    <link href="http://yoursite.com/2018/07/12/%E4%BD%BF%E7%94%A8sz-rz%E5%91%BD%E4%BB%A4%E4%BB%8E%E6%9C%8D%E5%8A%A1%E4%B8%8B%E8%BD%BD%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6/"/>
    <id>http://yoursite.com/2018/07/12/使用sz-rz命令从服务下载上传文件/</id>
    <published>2018-07-12T13:27:37.000Z</published>
    <updated>2019-01-08T10:58:18.218Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>如何从linux服务下载/上传文件</p><ul><li>使用scp命令</li><li>使用sz命令</li></ul><p>这里主要介绍使用sz命令下载文件</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul><li>安装lrzsz <code>hobrew install llssz</code></li><li>在本地编写shell用于接受sz命令下载下来的文件</li></ul><p>上传shell</p><p><code>iterm2-send-zmodem.sh</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line"></div><div class="line"></div><div class="line">#Author: Matt Mastracci (matthew@mastracci.com)</div><div class="line"></div><div class="line"></div><div class="line"># AppleScript from http://stackoverflow.com/questions/4309087/cancel-button-on-osascript-in-a-bash-script</div><div class="line"></div><div class="line"></div><div class="line"># licensed under cc-wiki with attribution required</div><div class="line"></div><div class="line"></div><div class="line"># Remainder of script public domain</div><div class="line"></div><div class="line"></div><div class="line">osascript -e &apos;tell application &quot;iTerm2&quot; to version&apos; &gt; /dev/null 2&gt;&amp;1 &amp;&amp; NAME=iTerm2 || NAME=iTerm</div><div class="line">if [[ $NAME = &quot;iTerm&quot; ]]; then</div><div class="line">    FILE=`osascript -e &apos;tell application &quot;iTerm&quot; to activate&apos; -e &apos;tell application &quot;iTerm&quot; to set thefile to choose file with prompt &quot;Choose a file to send&quot;&apos; -e &quot;do shell script (\&quot;echo \&quot;&amp;(quoted form of POSIX path of thefile as Unicode text)&amp;\&quot;\&quot;)&quot;`</div><div class="line">else</div><div class="line">    FILE=`osascript -e &apos;tell application &quot;iTerm2&quot; to activate&apos; -e &apos;tell application &quot;iTerm2&quot; to set thefile to choose file with prompt &quot;Choose a file to send&quot;&apos; -e &quot;do shell script (\&quot;echo \&quot;&amp;(quoted form of POSIX path of thefile as Unicode text)&amp;\&quot;\&quot;)&quot;`</div><div class="line">fi</div><div class="line">if [[ $FILE = &quot;&quot; ]]; then</div><div class="line">    echo Cancelled.</div><div class="line">    # Send ZModem cancel</div><div class="line">    echo -e \\x18\\x18\\x18\\x18\\x18</div><div class="line">    sleep 1</div><div class="line">    echo</div><div class="line">    echo \# Cancelled transfer</div><div class="line">else</div><div class="line">    /usr/local/bin/sz &quot;$FILE&quot; -e -b</div><div class="line">    sleep 1</div><div class="line">    echo</div><div class="line">    echo \# Received $FILE</div><div class="line">fi</div></pre></td></tr></table></figure></p><p>下载shell</p><p><code>iterm2-recv-zmodem.sh</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line"># Author: Matt Mastracci (matthew@mastracci.com)</div><div class="line"># AppleScript from http://stackoverflow.com/questions/4309087/cancel-button-on-osascript-in-a-bash-script</div><div class="line"># licensed under cc-wiki with attribution required </div><div class="line"># Remainder of script public domain</div><div class="line"></div><div class="line">osascript -e &apos;tell application &quot;iTerm2&quot; to version&apos; &gt; /dev/null 2&gt;&amp;1 &amp;&amp; NAME=iTerm2 || NAME=iTerm</div><div class="line">if [[ $NAME = &quot;iTerm&quot; ]]; then</div><div class="line">    FILE=`osascript -e &apos;tell application &quot;iTerm&quot; to activate&apos; -e &apos;tell application &quot;iTerm&quot; to set thefile to choose folder with prompt &quot;Choose a folder to place received files in&quot;&apos; -e &quot;do shell script (\&quot;echo \&quot;&amp;(quoted form of POSIX path of thefile as Unicode text)&amp;\&quot;\&quot;)&quot;`</div><div class="line">else</div><div class="line">    FILE=`osascript -e &apos;tell application &quot;iTerm2&quot; to activate&apos; -e &apos;tell application &quot;iTerm2&quot; to set thefile to choose folder with prompt &quot;Choose a folder to place received files in&quot;&apos; -e &quot;do shell script (\&quot;echo \&quot;&amp;(quoted form of POSIX path of thefile as Unicode text)&amp;\&quot;\&quot;)&quot;`</div><div class="line">fi</div><div class="line"></div><div class="line">if [[ $FILE = &quot;&quot; ]]; then</div><div class="line">    echo Cancelled.</div><div class="line">    # Send ZModem cancel</div><div class="line">    echo -e \\x18\\x18\\x18\\x18\\x18</div><div class="line">    sleep 1</div><div class="line">    echo</div><div class="line">    echo \# Cancelled transfer</div><div class="line">else</div><div class="line">    cd &quot;$FILE&quot;</div><div class="line">    /usr/local/bin/rz -E -e -b</div><div class="line">    sleep 1</div><div class="line">    echo</div><div class="line">    echo</div><div class="line">    echo \# Sent \-\&gt; $FILE</div><div class="line">fi</div></pre></td></tr></table></figure><h2 id="配置iterm2"><a href="#配置iterm2" class="headerlink" title="配置iterm2"></a>配置iterm2</h2><ul><li>设置Iterm2的Tirgger特性，profiles-default-editProfiles-Advanced中的Tirgger</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">添加两条trigger，分别设置Regular expression，Action，Parameters，Instant如下：</div><div class="line">    1.第一条</div><div class="line">        Regular expression: rz waiting to receive.\*\*B0100</div><div class="line">        Action: Run Silent Coprocess</div><div class="line">        Parameters: /usr/local/bin/iterm2-send-zmodem.sh</div><div class="line">        Instant: checked</div><div class="line">    2.第二条</div><div class="line">        Regular expression: \*\*B00000000000000</div><div class="line">        Action: Run Silent Coprocess</div><div class="line">        Parameters: /usr/local/bin/iterm2-recv-zmodem.sh</div><div class="line">        Instant: checked</div></pre></td></tr></table></figure><p><strong>备注</strong>:注意两个文件的权限</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;如何从linux服务下载/上传文件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用scp命令&lt;/li&gt;
&lt;li&gt;使用sz命令&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这
      
    
    </summary>
    
      <category term="工具" scheme="http://yoursite.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="工具" scheme="http://yoursite.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>solr-增删改查</title>
    <link href="http://yoursite.com/2018/06/21/solr-%E4%BB%8E%E6%8E%A7%E5%88%B6%E9%A1%B5%E9%9D%A2%E5%88%A0%E9%99%A4%E6%95%B0%E6%8D%AE/"/>
    <id>http://yoursite.com/2018/06/21/solr-从控制页面删除数据/</id>
    <published>2018-06-21T12:21:18.000Z</published>
    <updated>2019-01-08T10:57:17.491Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>solr 版本 5.3.1</p><h3 id="1-删除数据"><a href="#1-删除数据" class="headerlink" title="1.删除数据"></a>1.删除数据</h3><p>solr 提供多重删除数据方式, 从控制页删除数据是一种方式,主要用于人工删除少量数据<br>eg:<br><img src="/photo/img/solr-增删改查/DingTalk20180621202319.png" alt="image"></p><p>执行删除操作之前:</p><p><img src="/photo/img/solr-增删改查/执行删除前数据.png" alt="image"></p><p>删除操作只需在控制页Document Type 选择XML选项,然后输入一下内容提交即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;commit/&gt;</div><div class="line">&lt;delete&gt;&lt;query&gt;id:change.me1&lt;/query&gt;&lt;/delete&gt;</div><div class="line">&lt;commit/&gt;</div></pre></td></tr></table></figure><p>具体执行,以及http请求:</p><p><img src="/photo/img/solr-增删改查/执行删除操作.png" alt="image"></p><p>最后为执行删除后的结果:</p><p><img src="/photo/img/solr-增删改查/执行删除操作结果.png" alt="image"></p><h3 id="新增数据"><a href="#新增数据" class="headerlink" title="新增数据"></a>新增数据</h3><h4 id="json-方式添加数据"><a href="#json-方式添加数据" class="headerlink" title="json 方式添加数据"></a>json 方式添加数据</h4><p>同样在solr的控制页面,选在Document Type为json。</p><p>输入:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;&quot;id&quot;:&quot;ceshi2&quot;,&quot;title&quot;:&quot;这是一个测试&quot;&#125;</div></pre></td></tr></table></figure><p><img src="/photo/img/solr-增删改查/新增数据.png" alt="image"></p><p>可以看出来solr是已http请求的方式请求 solr server,所以我们用程序去查询solr数据是,也可json的方式去查询。<br>当然solr支持xml等多种功能。（solr支持从数据库导入数据）<br>具体查询规则（目前还没找到,找到后补充）:</p><p>执行结果</p><p><img src="/photo/img/solr-增删改查/执行结果.png" alt="image"></p><h3 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h3><p>第一个问题:solr不支持局部更新。<br>所有的更新操作对于solr来说都是一次数据的删除和插入,例如:</p><p><img src="/photo/img/solr-增删改查/更新操作.png" alt="image"></p><p>同事又说支持局部更新,但是我还没有找到相关文档,这个带求证</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;solr 版本 5.3.1&lt;/p&gt;
&lt;h3 id=&quot;1-删除数据&quot;&gt;&lt;a href=&quot;#1-删除数据&quot; class=&quot;headerlink&quot;
      
    
    </summary>
    
    
      <category term="solr" scheme="http://yoursite.com/tags/solr/"/>
    
  </entry>
  
</feed>
