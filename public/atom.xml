<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Maxie&#39;blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-03-13T08:28:01.877Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>MaxieLj</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>浅谈MySql的MVVC</title>
    <link href="http://yoursite.com/2020/03/13/%E6%B5%85%E8%B0%88MySql%E7%9A%84MVVC/"/>
    <id>http://yoursite.com/2020/03/13/浅谈MySql的MVVC/</id>
    <published>2020-03-13T06:01:50.000Z</published>
    <updated>2020-03-13T08:28:01.877Z</updated>
    
    <content type="html"><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>MySQL的大多数事务性存储引擎实现都不是建单的行级锁。基于提升并发性能的考虑，他们一般都是同事实现了多版本并发控制。</p><p>可以认为MVVC是行级锁的一种变种，但是它在很多情况下避免了加锁操作，隐藏开销更低。虽然实现机制不同，但大家都实现了非阻塞的读操作，写操作也只锁定必要的行。</p><p>MVVC的实现，是通过八寸数据在某个时间节点的快照来实现的。</p><p>innoDB的MVVC,是通过在每行记录后保存两个隐藏的列来实现的。这两个列，一个保存了行的创建时间，一个保存了行的过期时间（删除时间）。当然存储的并非是是实际的时间值，而是系统的版本号。每开始一个事务，系统版本号都会自动递增。事物的开始时刻的系统版本号会作为事务的版本号，用来和查询到的每行记录的版本号进行比较，下面看一下在REPEATABLE READ隔离界别下，MVVC具体是如何操作的。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> </div><div class="line">    <span class="keyword">InnoDB</span>会根据一下两个条件检查每行记录：</div><div class="line">    a.InnoDB只查找版本遭遇当前事务版本的数据行（也就是，行的系统版本号小于或等于事务的系统版本号），这样可以确保事务读取的行，要么是在事务开始前已经存在的，要么是事务自身插入或者修改过的。</div><div class="line">    b.行的删除版本要么未定义，要么大于当前事务的版本号。这可以确保事务读到的行，在事务开始前未被删除。</div><div class="line"></div><div class="line"><span class="keyword">INSERT</span></div><div class="line">    <span class="keyword">InnoDB</span>为新插入的每一行保存当前系统版本号作为行版本号。</div><div class="line"></div><div class="line"><span class="keyword">DELETE</span></div><div class="line">    <span class="keyword">InnoDB</span>为删除的每一行保存当前系统版本号作为行删除标识。</div><div class="line"></div><div class="line">UPDATEI</div><div class="line">    <span class="keyword">InnoDB</span>为插入一行新记录，保存当前系统版本号作为行版本号，同事保存当前系统版本号到原来的行作为行删除标识。</div></pre></td></tr></table></figure><p>保存这两个额外系统版本号，使多数读操作都可以不用加锁。这样设计是的读数据操作很简单，性能很好。并且也能保证只会读取到符合标准的行。不足之外是每行记录都需要额外的空间，需要做更多的行检查工作，以及一些额外的维护工作。</p><p>MVVC只在REPEATABLE READ和READ COMMITTED两个隔离界别下工作。其他两个隔离级别都和MVVC不兼容，因为READ UNCOMMITTED总是读取最新的数据行，而不是符合当前事务版本的数据行。二SERIALIZABLE则会对所有读取的行都加锁。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h2&gt;&lt;p&gt;MySQL的大多数事务性存储引擎实现都不是建单的行级锁。基于提升并发性能的考虑，他们一般都是同事实现了多版本并发控制。&lt;/p&gt;
&lt;p&gt;可以认
      
    
    </summary>
    
      <category term="数据库" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
  </entry>
  
  <entry>
    <title>php垃圾回收</title>
    <link href="http://yoursite.com/2018/09/12/php%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/"/>
    <id>http://yoursite.com/2018/09/12/php垃圾回收/</id>
    <published>2018-09-12T13:28:00.000Z</published>
    <updated>2019-02-21T03:49:34.710Z</updated>
    
    <content type="html"><![CDATA[<p>php是如何实现内存管理的?内存管理包括内存分配、内存回收、以及内存使用优化。</p><ul><li>内存使用的优化</li><li>垃圾回收机制</li><li>底层内存分配</li></ul><h2 id="内存使用的优化"><a href="#内存使用的优化" class="headerlink" title="内存使用的优化"></a>内存使用的优化</h2><h3 id="引用计数"><a href="#引用计数" class="headerlink" title="引用计数"></a>引用计数</h3><p>php的引用中有个引用结构体</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> _zend_reference &#123;</div><div class="line">    zend_refcondted_h gc;</div><div class="line">    zval              val;  指向原来的value.</div><div class="line">&#125;;</div></pre></td></tr></table></figure><p>其中<code>zend_refcondted_h</code> 便是gc便是当前变量被引用的次数,这个参数会在变量回收的时候用到。</p><p><code>zend_refcondted_h</code> :</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> _zend_refcounted_h &#123;</div><div class="line"><span class="keyword">uint32_t</span>         refcount;<span class="comment">/* reference counter 32-bit */</span></div><div class="line"><span class="keyword">union</span> &#123;</div><div class="line"><span class="keyword">struct</span> &#123;</div><div class="line">ZEND_ENDIAN_LOHI_3(</div><div class="line">zend_uchar    type,</div><div class="line">zend_uchar    flags,    <span class="comment">/* used for strings &amp; objects */</span></div><div class="line"><span class="keyword">uint16_t</span>      gc_info)  <span class="comment">/* keeps GC root number (or 0) and color */</span></div><div class="line">&#125; v;</div><div class="line"><span class="keyword">uint32_t</span> type_info;</div><div class="line">&#125; u;</div><div class="line">&#125; zend_refcounted_h;</div></pre></td></tr></table></figure><p>在实际中这个结构体到底是什么样的? 具体可以举例来看。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$a = <span class="string">'this is string'</span>; <span class="comment">// zend_array (refcount = 1)  只有$a引用了zend_array</span></div><div class="line">$b = &amp;$a; <span class="comment">//   zend_array (refcount = 2)  $a、$b引用了zend_array</span></div><div class="line">$c = $b; <span class="comment">// zend_array (refcount = 3)  $a、$b、$c引用了zend_array</span></div><div class="line"><span class="keyword">unset</span>($b); <span class="comment">// zend_array (refcount = 2)  $a、$c引用了zend_array</span></div></pre></td></tr></table></figure><blockquote><p>并不是所有的变量类型都会使用引用计数, 例如 <code>整形</code>、<code>浮点型</code>、<code>布尔型</code>、<code>NUll</code>(在php中这是一个变量类型)等采用了深拷贝,<br>即只要这几种变量赋值, 就会申请一款一块内存写入一个新的变量结构（注意这里不是引用结构）,当然这些类型不会公用value。</p></blockquote><h3 id="写时复制"><a href="#写时复制" class="headerlink" title="写时复制"></a>写时复制</h3><p>当然只有引用计数是不够的, 因为变量会发生赋值的情况。所以在更改某一个变量时, 会对原来的变量进行拷贝并赋值。</p><p>举个栗子:</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$foo</span> = time();</span></div><div class="line"><span class="meta"><span class="meta-keyword">$bar</span> = &amp;$b;</span></div><div class="line"><span class="meta"><span class="meta-keyword">$si</span> = $a;</span></div><div class="line"></div><div class="line"><span class="meta"><span class="meta-keyword">$c</span> = '123';</span></div></pre></td></tr></table></figure><p>具体数据结构的引用计数情况如下图:</p><p><img src="/photo/img/php内存管理/写时复制.png" alt="image"></p><h2 id="内存回收"><a href="#内存回收" class="headerlink" title="内存回收"></a>内存回收</h2><h3 id="自动gc"><a href="#自动gc" class="headerlink" title="自动gc"></a>自动gc</h3><p>在zend数据接口中有一个gc.refount,他是自动gc的关键。</p><p>在自动gc机制中,如果zval不在指向value且当前value的gc.refount为0时,会直接释放value。这种情况多发生于函数返回时（销毁所有局部变量）、变量修改时、以及unset操作的时候。</p><h3 id="垃圾回收"><a href="#垃圾回收" class="headerlink" title="垃圾回收"></a>垃圾回收</h3><p>除了自动gc,还有一种是自动gc无法处理的垃圾, 这种情况称为<code>循环引用</code>。顾名思义也就是自身内部变量引用了自身, 这种情况常出现与object和array。当我该变量zval被销毁是, 与其对应的value gc.refcount -1,<br>但是因为有自身变量指向自身, 所以就陷入了一个循环:如果不销毁自身变量 value gc.refcount就无法自动gc, 只有自动gc才会销毁value。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">$a = [<span class="number">1</span>];</div><div class="line">$a[] = &amp;$a;</div><div class="line"><span class="keyword">unset</span>($a);</div></pre></td></tr></table></figure><p><img src="/photo/img/php内存管理/自身引用.png" alt="image"></p><p><code>unset($a)</code>执行以后</p><p><img src="/photo/img/php内存管理/释放.png" alt="image"></p><p>由于上述情况导致无法自动gc,所以需要引入另外一钟垃圾回收机制-垃圾回收器。<br>现在会存在两种情况的数据需要回收：</p><ul><li>当value的gc.refcount =0 是需要回收。</li><li>当value的gc.refcount 减少不等于0，但是存在循环引用时。</li></ul><h3 id="回收机制"><a href="#回收机制" class="headerlink" title="回收机制"></a>回收机制</h3><p>当发生value gc.refcount减少时，垃圾回收机制会把可能是垃圾的value存起来， 当可能是垃圾的value到达一定数量的时候启动垃圾鉴别程序，统一处理垃圾。当然这里的value类型只有object和array。</p><p>垃圾兼备程序：<br>其实垃圾鉴别程序很简单，递归遍历自身value，查看是否存在指向自身的即可。</p><p>code:<br>gc 初始化<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">ZEND_API void gc_init(void)</div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span> (GC_G(buf) == <span class="keyword">NULL</span> &amp;&amp; GC_G(gc_enabled)) &#123;</div><div class="line"><span class="comment">//初始化buf内存区域，大小为sizeof(gc_root_buffer) * //GC_ROOT_BUFFER_MAX_ENTRIES</span></div><div class="line">GC_G(buf) = (gc_root_buffer*) malloc(sizeof(gc_root_buffer) * GC_ROOT_BUFFER_MAX_ENTRIES);</div><div class="line"><span class="comment">//设置_zend_gc_globals.last_unused为bug入口位置</span></div><div class="line">GC_G(last_unused) = &amp;GC_G(buf)[GC_ROOT_BUFFER_MAX_ENTRIES];</div><div class="line"><span class="comment">//初始化_zend_gc_globals的参数</span></div><div class="line">gc_reset();</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>垃圾回收及其依赖 <code>_zend_gc_globals</code></p><p><code>_zend_gc_globals</code><br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> _zend_gc_globals &#123;</div><div class="line">zend_bool         gc_enabled;</div><div class="line">zend_bool         gc_active;</div><div class="line">zend_bool         gc_full;</div><div class="line"></div><div class="line">gc_root_buffer   *buf;<span class="comment">/* preallocated arrays of buffers   */</span></div><div class="line">gc_root_buffer    roots;<span class="comment">/* list of possible roots of cycles */</span></div><div class="line">gc_root_buffer   *unused;<span class="comment">/* list of unused buffers           */</span></div><div class="line">gc_root_buffer   *first_unused;<span class="comment">/* pointer to first unused buffer   */</span></div><div class="line">gc_root_buffer   *last_unused;<span class="comment">/* pointer to last unused buffer    */</span></div><div class="line"></div><div class="line">gc_root_buffer    to_free;<span class="comment">/* list to free                     */</span></div><div class="line">gc_root_buffer   *next_to_free;</div><div class="line"></div><div class="line"><span class="keyword">uint32_t</span> gc_runs;</div><div class="line"><span class="keyword">uint32_t</span> collected;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> GC_BENCH</span></div><div class="line"><span class="keyword">uint32_t</span> root_buf_length;</div><div class="line"><span class="keyword">uint32_t</span> root_buf_peak;</div><div class="line"><span class="keyword">uint32_t</span> zval_possible_root;</div><div class="line"><span class="keyword">uint32_t</span> zval_buffered;</div><div class="line"><span class="keyword">uint32_t</span> zval_remove_from_buffer;</div><div class="line"><span class="keyword">uint32_t</span> zval_marked_grey;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line">gc_additional_buffer *additional_buffer;</div><div class="line"></div><div class="line">&#125; zend_gc_globals;</div></pre></td></tr></table></figure></p><ul><li><code>gc_enabled</code> 是否使使用gc</li><li><code>gc_active</code>  是否在垃圾检查的过程中</li><li><code>gc_full</code> buf缓冲区是否已满</li><li><code>*buf</code> 与分配用于保存可能为垃圾的value</li><li><code>roots</code> 指向buf最新加入的一个可能垃圾</li><li><code>unused</code> 指向第未使用的buffer</li><li><code>*first_unused</code> 指向第一个没用使用buffer</li><li><code>*last_unused</code> 指向buffer的尾部</li><li><code>to_free</code> 等待释放的buffer</li><li><code>gc_runs</code>  统计gc运行的次数</li><li><code>collected</code>  统计已经释放的垃圾数</li></ul><p>php垃圾回收中几个重要的颜色写在zeng_gc的备注中。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">* BLACK  (GC_BLACK)   - In use or <span class="built_in">free</span>.</div><div class="line">* GREY   (GC_GREY)    - Possible member of cycle.</div><div class="line">* WHITE  (GC_WHITE)   - Member of garbage cycle.</div><div class="line">* PURPLE (GC_PURPLE)  - Possible root of cycle.</div></pre></td></tr></table></figure></p><ul><li>GC_WHITE 白色表示垃圾</li><li>GC_PURPLE 紫色表示已放入缓冲区</li><li>GC_GREY 灰色表示已经进行了一次refcount的减一操作</li><li>GC_BLACK 黑色是默认颜色，正常</li></ul><p>gc过程中主要处理功能的函数<code>zend_gc_collect_cycles</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="function">ZEND_API <span class="keyword">void</span> ZEND_FASTCALL <span class="title">gc_possible_root</span><span class="params">(zend_refcounted *ref)</span></span></div><div class="line">&#123;</div><div class="line">gc_root_buffer *newRoot;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (UNEXPECTED(CG(unclean_shutdown)) || UNEXPECTED(GC_G(gc_active))) &#123;</div><div class="line"><span class="keyword">return</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">ZEND_ASSERT(GC_TYPE(ref) == IS_ARRAY || GC_TYPE(ref) == IS_OBJECT);</div><div class="line">ZEND_ASSERT(EXPECTED(GC_REF_GET_COLOR(ref) == GC_BLACK));</div><div class="line">ZEND_ASSERT(!GC_ADDRESS(GC_INFO(ref)));</div><div class="line"></div><div class="line">GC_BENCH_INC(zval_possible_root);</div><div class="line"></div><div class="line">newRoot = GC_G(unused);</div><div class="line"><span class="keyword">if</span> (newRoot) &#123;</div><div class="line">GC_G(unused) = newRoot-&gt;prev;</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (GC_G(first_unused) != GC_G(last_unused)) &#123;</div><div class="line">newRoot = GC_G(first_unused);</div><div class="line">GC_G(first_unused)++;</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="comment">//垃圾处理，当缓冲区满时，程序调用gc_collect_cycles函数，执行垃圾回收操作。 其中最关键的几步就是</span></div><div class="line"><span class="comment">//如果当前处于可以gc的状态</span></div><div class="line"><span class="keyword">if</span> (!GC_G(gc_enabled)) &#123;</div><div class="line"><span class="keyword">return</span>;</div><div class="line">&#125;</div><div class="line">GC_REFCOUNT(ref)++;</div><div class="line"><span class="comment">//垃圾回收</span></div><div class="line">gc_collect_cycles();</div><div class="line">GC_REFCOUNT(ref)--;</div><div class="line"><span class="keyword">if</span> (UNEXPECTED(GC_REFCOUNT(ref)) == <span class="number">0</span>) &#123;</div><div class="line">zval_dtor_func(ref);</div><div class="line"><span class="keyword">return</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (UNEXPECTED(GC_INFO(ref))) &#123;</div><div class="line"><span class="keyword">return</span>;</div><div class="line">&#125;</div><div class="line">newRoot = GC_G(unused);</div><div class="line"><span class="keyword">if</span> (!newRoot) &#123;</div><div class="line"><span class="keyword">return</span>;</div><div class="line">&#125;</div><div class="line">GC_G(unused) = newRoot-&gt;prev;</div><div class="line">&#125;</div><div class="line"></div><div class="line">GC_TRACE_SET_COLOR(ref, GC_PURPLE);</div><div class="line">GC_INFO(ref) = (newRoot - GC_G(buf)) | GC_PURPLE;</div><div class="line">newRoot-&gt;ref = ref;</div><div class="line"></div><div class="line">newRoot-&gt;next = GC_G(roots).next;</div><div class="line">newRoot-&gt;prev = &amp;GC_G(roots);</div><div class="line">GC_G(roots).next-&gt;prev = newRoot;</div><div class="line">GC_G(roots).next = newRoot;</div><div class="line"></div><div class="line">GC_BENCH_INC(zval_buffered);</div><div class="line">GC_BENCH_INC(root_buf_length);</div><div class="line">GC_BENCH_PEAK(root_buf_peak, root_buf_length);</div><div class="line">&#125;</div></pre></td></tr></table></figure><ol><li>深度优先对对象或者数据的每一个元素的<code>refcount--</code>并将其标记为灰色</li><li>深度遍历root的每个每个变量，如果此时变量的<code>refcount</code>为0，则代表着改变量为垃圾，将其标记为垃圾，如果不为0，则将其标记为黑色（正常）。</li><li>检查roots清除标记为白色的垃圾。</li></ol><p>//TODO 垃圾回收抽出来出来写。</p><p>具体代码：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div></pre></td><td class="code"><pre><div class="line">ZEND_API int zend_gc_collect_cycles(void)</div><div class="line">&#123;</div><div class="line">int count = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (GC_G(roots).next != &amp;GC_G(roots)) &#123;</div><div class="line">gc_root_buffer *current, *next, *orig_next_to_free;</div><div class="line">zend_refcounted *p;</div><div class="line">gc_root_buffer to_free;</div><div class="line">uint32_t gc_flags = <span class="number">0</span>;</div><div class="line">gc_additional_buffer *additional_buffer_snapshot;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> (GC_G(gc_active)) &#123;</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">GC_TRACE(<span class="string">"Collecting cycles"</span>);</div><div class="line"><span class="comment">//标识gc运行了多少次</span></div><div class="line">GC_G(gc_runs)++;</div><div class="line"><span class="comment">//标识当前正在gc</span></div><div class="line">GC_G(gc_active) = <span class="number">1</span>;</div><div class="line"></div><div class="line">GC_TRACE(<span class="string">"Marking roots"</span>);</div><div class="line"><span class="comment">//重点</span></div><div class="line">gc_mark_roots();</div><div class="line">GC_TRACE(<span class="string">"Scanning roots"</span>);</div><div class="line"><span class="comment">//重点</span></div><div class="line">gc_scan_roots();</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">GC_TRACE(<span class="string">"Collecting roots"</span>);</div><div class="line">additional_buffer_snapshot = GC_G(additional_buffer);</div><div class="line">count = gc_collect_roots(&amp;gc_flags);</div><div class="line"></div><div class="line">GC_G(gc_active) = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (GC_G(to_free).next == &amp;GC_G(to_free)) &#123;</div><div class="line"><span class="comment">/* nothing to free */</span></div><div class="line">GC_TRACE(<span class="string">"Nothing to free"</span>);</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* Copy global to_free list into local list */</span></div><div class="line">to_free.next = GC_G(to_free).next;</div><div class="line">to_free.prev = GC_G(to_free).prev;</div><div class="line">to_free.next-&gt;prev = &amp;to_free;</div><div class="line">to_free.prev-&gt;next = &amp;to_free;</div><div class="line"></div><div class="line"><span class="comment">/* Free global list */</span></div><div class="line">GC_G(to_free).next = &amp;GC_G(to_free);</div><div class="line">GC_G(to_free).prev = &amp;GC_G(to_free);</div><div class="line"></div><div class="line">orig_next_to_free = GC_G(next_to_free);</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> (gc_flags &amp; GC_HAS_DESTRUCTORS) &#123;</div><div class="line">GC_TRACE(<span class="string">"Calling destructors"</span>);</div><div class="line"></div><div class="line"><span class="comment">/* Remember reference counters before calling destructors */</span></div><div class="line">current = to_free.next;</div><div class="line"><span class="keyword">while</span> (current != &amp;to_free) &#123;</div><div class="line">current-&gt;refcount = GC_REFCOUNT(current-&gt;ref);</div><div class="line">current = current-&gt;next;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* Call destructors */</span></div><div class="line">current = to_free.next;</div><div class="line"><span class="keyword">while</span> (current != &amp;to_free) &#123;</div><div class="line">p = current-&gt;ref;</div><div class="line">GC_G(next_to_free) = current-&gt;next;</div><div class="line"><span class="keyword">if</span> (GC_TYPE(p) == IS_OBJECT) &#123;</div><div class="line">zend_object *obj = (zend_object*)p;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (!(GC_FLAGS(obj) &amp; IS_OBJ_DESTRUCTOR_CALLED)) &#123;</div><div class="line">GC_TRACE_REF(obj, <span class="string">"calling destructor"</span>);</div><div class="line">GC_FLAGS(obj) |= IS_OBJ_DESTRUCTOR_CALLED;</div><div class="line"><span class="keyword">if</span> (obj-&gt;handlers-&gt;dtor_obj</div><div class="line"> &amp;&amp; (obj-&gt;handlers-&gt;dtor_obj != zend_objects_destroy_object</div><div class="line">  || obj-&gt;ce-&gt;destructor)) &#123;</div><div class="line">GC_REFCOUNT(obj)++;</div><div class="line">obj-&gt;handlers-&gt;dtor_obj(obj);</div><div class="line">GC_REFCOUNT(obj)--;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">current = GC_G(next_to_free);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* Remove values captured in destructors */</span></div><div class="line">current = to_free.next;</div><div class="line"><span class="keyword">while</span> (current != &amp;to_free) &#123;</div><div class="line">GC_G(next_to_free) = current-&gt;next;</div><div class="line"><span class="keyword">if</span> (GC_REFCOUNT(current-&gt;ref) &gt; current-&gt;refcount) &#123;</div><div class="line">gc_remove_nested_data_from_buffer(current-&gt;ref, current);</div><div class="line">&#125;</div><div class="line">current = GC_G(next_to_free);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* Destroy zvals */</span></div><div class="line">GC_TRACE(<span class="string">"Destroying zvals"</span>);</div><div class="line">GC_G(gc_active) = <span class="number">1</span>;</div><div class="line">current = to_free.next;</div><div class="line"><span class="keyword">while</span> (current != &amp;to_free) &#123;</div><div class="line">p = current-&gt;ref;</div><div class="line">GC_G(next_to_free) = current-&gt;next;</div><div class="line">GC_TRACE_REF(p, <span class="string">"destroying"</span>);</div><div class="line"><span class="keyword">if</span> (GC_TYPE(p) == IS_OBJECT) &#123;</div><div class="line">zend_object *obj = (zend_object*)p;</div><div class="line"></div><div class="line">EG(objects_store).object_buckets[obj-&gt;handle] = SET_OBJ_INVALID(obj);</div><div class="line">GC_TYPE(obj) = IS_NULL;</div><div class="line"><span class="keyword">if</span> (!(GC_FLAGS(obj) &amp; IS_OBJ_FREE_CALLED)) &#123;</div><div class="line">GC_FLAGS(obj) |= IS_OBJ_FREE_CALLED;</div><div class="line"><span class="keyword">if</span> (obj-&gt;handlers-&gt;free_obj) &#123;</div><div class="line">GC_REFCOUNT(obj)++;</div><div class="line">obj-&gt;handlers-&gt;free_obj(obj);</div><div class="line">GC_REFCOUNT(obj)--;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">SET_OBJ_BUCKET_NUMBER(EG(objects_store).object_buckets[obj-&gt;handle], EG(objects_store).free_list_head);</div><div class="line">EG(objects_store).free_list_head = obj-&gt;handle;</div><div class="line">p = current-&gt;ref = (zend_refcounted*)(((char*)obj) - obj-&gt;handlers-&gt;offset);</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (GC_TYPE(p) == IS_ARRAY) &#123;</div><div class="line">zend_array *arr = (zend_array*)p;</div><div class="line"></div><div class="line">GC_TYPE(arr) = IS_NULL;</div><div class="line"></div><div class="line"><span class="comment">/* GC may destroy arrays with rc&gt;1. This is valid and safe. */</span></div><div class="line">HT_ALLOW_COW_VIOLATION(arr);</div><div class="line"></div><div class="line">zend_hash_destroy(arr);</div><div class="line">&#125;</div><div class="line">current = GC_G(next_to_free);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* Free objects */</span></div><div class="line">current = to_free.next;</div><div class="line"><span class="keyword">while</span> (current != &amp;to_free) &#123;</div><div class="line">next = current-&gt;next;</div><div class="line">p = current-&gt;ref;</div><div class="line"><span class="keyword">if</span> (EXPECTED(current &gt;= GC_G(buf) &amp;&amp; current &lt; GC_G(buf) + GC_ROOT_BUFFER_MAX_ENTRIES)) &#123;</div><div class="line">current-&gt;prev = GC_G(unused);</div><div class="line">GC_G(unused) = current;</div><div class="line">&#125;</div><div class="line">efree(p);</div><div class="line">current = next;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">while</span> (GC_G(additional_buffer) != additional_buffer_snapshot) &#123;</div><div class="line">gc_additional_buffer *next = GC_G(additional_buffer)-&gt;next;</div><div class="line">efree(GC_G(additional_buffer));</div><div class="line">GC_G(additional_buffer) = next;</div><div class="line">&#125;</div><div class="line"></div><div class="line">GC_TRACE(<span class="string">"Collection finished"</span>);</div><div class="line">GC_G(collected) += count;</div><div class="line">GC_G(next_to_free) = orig_next_to_free;</div><div class="line">GC_G(gc_active) = <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">return</span> count;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">gc_mark_roots</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">gc_root_buffer *current = GC_G(roots).next;</div><div class="line"></div><div class="line"><span class="keyword">while</span> (current != &amp;GC_G(roots)) &#123;</div><div class="line"><span class="comment">//GC_PURPLE 标识在缓冲区</span></div><div class="line"><span class="keyword">if</span> (GC_REF_GET_COLOR(current-&gt;ref) == GC_PURPLE) &#123;</div><div class="line">gc_mark_grey(current-&gt;ref);</div><div class="line">&#125;</div><div class="line">current = current-&gt;next;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">gc_mark_grey</span><span class="params">(zend_refcounted *ref)</span></span></div><div class="line">&#123;</div><div class="line">    HashTable *ht;</div><div class="line">Bucket *p, *end;</div><div class="line">zval *zv;</div><div class="line"></div><div class="line">tail_call:</div><div class="line"><span class="keyword">if</span> (GC_REF_GET_COLOR(ref) != GC_GREY) &#123;</div><div class="line">ht = <span class="literal">NULL</span>;</div><div class="line">GC_BENCH_INC(zval_marked_grey);</div><div class="line">GC_REF_SET_COLOR(ref, GC_GREY);</div><div class="line"></div><div class="line"><span class="keyword">if</span> (GC_TYPE(ref) == IS_OBJECT) &#123;</div><div class="line"><span class="keyword">zend_object_get_gc_t</span> get_gc;</div><div class="line">zend_object *obj = (zend_object*)ref;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (EXPECTED(!(GC_FLAGS(ref) &amp; IS_OBJ_FREE_CALLED) &amp;&amp;</div><div class="line">                 (get_gc = obj-&gt;handlers-&gt;get_gc) != <span class="literal">NULL</span>)) &#123;</div><div class="line"><span class="keyword">int</span> n;</div><div class="line">zval *zv, *end;</div><div class="line">zval tmp;</div><div class="line"></div><div class="line">ZVAL_OBJ(&amp;tmp, obj);</div><div class="line">ht = get_gc(&amp;tmp, &amp;zv, &amp;n);</div><div class="line">end = zv + n;</div><div class="line"><span class="keyword">if</span> (EXPECTED(!ht)) &#123;</div><div class="line"><span class="keyword">if</span> (!n) <span class="keyword">return</span>;</div><div class="line"><span class="keyword">while</span> (!Z_REFCOUNTED_P(--end)) &#123;</div><div class="line"><span class="comment">//表明当前object size为0</span></div><div class="line"><span class="keyword">if</span> (zv == end) <span class="keyword">return</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">while</span> (zv != end) &#123;</div><div class="line"><span class="comment">//循环对每个元素进行--</span></div><div class="line"><span class="keyword">if</span> (Z_REFCOUNTED_P(zv)) &#123;</div><div class="line">ref = Z_COUNTED_P(zv);</div><div class="line">GC_REFCOUNT(ref)--;</div><div class="line"><span class="comment">//refcount已经减过，标记为灰色</span></div><div class="line">gc_mark_grey(ref);</div><div class="line">&#125;</div><div class="line">zv++;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (EXPECTED(!ht)) &#123;</div><div class="line">ref = Z_COUNTED_P(zv);</div><div class="line">GC_REFCOUNT(ref)--;</div><div class="line"><span class="keyword">goto</span> tail_call;</div><div class="line">&#125;</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="keyword">return</span>;</div><div class="line">&#125;</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (GC_TYPE(ref) == IS_ARRAY) &#123;</div><div class="line"><span class="keyword">if</span> (((zend_array*)ref) == &amp;EG(symbol_table)) &#123;</div><div class="line"><span class="comment">//标识是正常非垃圾</span></div><div class="line">GC_REF_SET_BLACK(ref);</div><div class="line"><span class="keyword">return</span>;</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">ht = (zend_array*)ref;</div><div class="line">&#125;</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (GC_TYPE(ref) == IS_REFERENCE) &#123;</div><div class="line"><span class="keyword">if</span> (Z_REFCOUNTED(((zend_reference*)ref)-&gt;val)) &#123;</div><div class="line">ref = Z_COUNTED(((zend_reference*)ref)-&gt;val);</div><div class="line">GC_REFCOUNT(ref)--;</div><div class="line"><span class="keyword">goto</span> tail_call;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span>;</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="keyword">return</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (!ht-&gt;nNumUsed) <span class="keyword">return</span>;</div><div class="line">p = ht-&gt;arData;</div><div class="line">end = p + ht-&gt;nNumUsed;</div><div class="line"><span class="keyword">while</span> (<span class="number">1</span>) &#123;</div><div class="line">end--;</div><div class="line">zv = &amp;end-&gt;val;</div><div class="line"><span class="keyword">if</span> (Z_TYPE_P(zv) == IS_INDIRECT) &#123;</div><div class="line">zv = Z_INDIRECT_P(zv);</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (Z_REFCOUNTED_P(zv)) &#123;</div><div class="line"><span class="keyword">break</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (p == end) <span class="keyword">return</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">while</span> (p != end) &#123;</div><div class="line">zv = &amp;p-&gt;val;</div><div class="line"><span class="keyword">if</span> (Z_TYPE_P(zv) == IS_INDIRECT) &#123;</div><div class="line">zv = Z_INDIRECT_P(zv);</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (Z_REFCOUNTED_P(zv)) &#123;</div><div class="line">ref = Z_COUNTED_P(zv);</div><div class="line">GC_REFCOUNT(ref)--;</div><div class="line">gc_mark_grey(ref);</div><div class="line">&#125;</div><div class="line">p++;</div><div class="line">&#125;</div><div class="line">zv = &amp;p-&gt;val;</div><div class="line"><span class="keyword">if</span> (Z_TYPE_P(zv) == IS_INDIRECT) &#123;</div><div class="line">zv = Z_INDIRECT_P(zv);</div><div class="line">&#125;</div><div class="line">ref = Z_COUNTED_P(zv);</div><div class="line">GC_REFCOUNT(ref)--;</div><div class="line"><span class="keyword">goto</span> tail_call;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">gc_scan</span><span class="params">(zend_refcounted *ref)</span></span></div><div class="line">&#123;</div><div class="line">    HashTable *ht;</div><div class="line">Bucket *p, *end;</div><div class="line">zval *zv;</div><div class="line"></div><div class="line">tail_call:</div><div class="line"><span class="keyword">if</span> (GC_REF_GET_COLOR(ref) == GC_GREY) &#123;</div><div class="line"><span class="keyword">if</span> (GC_REFCOUNT(ref) &gt; <span class="number">0</span>) &#123;</div><div class="line"><span class="comment">//所有refount--以后如果还&gt;0，说明非垃圾</span></div><div class="line">gc_scan_black(ref);</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="comment">//否则则为垃圾</span></div><div class="line">GC_REF_SET_COLOR(ref, GC_WHITE);</div><div class="line"><span class="keyword">if</span> (GC_TYPE(ref) == IS_OBJECT) &#123;</div><div class="line"><span class="keyword">zend_object_get_gc_t</span> get_gc;</div><div class="line">zend_object *obj = (zend_object*)ref;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (EXPECTED(!(GC_FLAGS(ref) &amp; IS_OBJ_FREE_CALLED) &amp;&amp;</div><div class="line">             (get_gc = obj-&gt;handlers-&gt;get_gc) != <span class="literal">NULL</span>)) &#123;</div><div class="line"><span class="keyword">int</span> n;</div><div class="line">zval *zv, *end;</div><div class="line">zval tmp;</div><div class="line"></div><div class="line">ZVAL_OBJ(&amp;tmp, obj);</div><div class="line">ht = get_gc(&amp;tmp, &amp;zv, &amp;n);</div><div class="line">end = zv + n;</div><div class="line"><span class="keyword">if</span> (EXPECTED(!ht)) &#123;</div><div class="line"><span class="keyword">if</span> (!n) <span class="keyword">return</span>;</div><div class="line"><span class="keyword">while</span> (!Z_REFCOUNTED_P(--end)) &#123;</div><div class="line"><span class="keyword">if</span> (zv == end) <span class="keyword">return</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">while</span> (zv != end) &#123;</div><div class="line"><span class="keyword">if</span> (Z_REFCOUNTED_P(zv)) &#123;</div><div class="line">ref = Z_COUNTED_P(zv);</div><div class="line">gc_scan(ref);</div><div class="line">&#125;</div><div class="line">zv++;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (EXPECTED(!ht)) &#123;</div><div class="line">ref = Z_COUNTED_P(zv);</div><div class="line"><span class="keyword">goto</span> tail_call;</div><div class="line">&#125;</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="keyword">return</span>;</div><div class="line">&#125;</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (GC_TYPE(ref) == IS_ARRAY) &#123;</div><div class="line"><span class="keyword">if</span> ((zend_array*)ref == &amp;EG(symbol_table)) &#123;</div><div class="line">GC_REF_SET_BLACK(ref);</div><div class="line"><span class="keyword">return</span>;</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">ht = (zend_array*)ref;</div><div class="line">&#125;</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (GC_TYPE(ref) == IS_REFERENCE) &#123;</div><div class="line"><span class="keyword">if</span> (Z_REFCOUNTED(((zend_reference*)ref)-&gt;val)) &#123;</div><div class="line">ref = Z_COUNTED(((zend_reference*)ref)-&gt;val);</div><div class="line"><span class="keyword">goto</span> tail_call;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span>;</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="keyword">return</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (!ht-&gt;nNumUsed) <span class="keyword">return</span>;</div><div class="line">p = ht-&gt;arData;</div><div class="line">end = p + ht-&gt;nNumUsed;</div><div class="line"><span class="keyword">while</span> (<span class="number">1</span>) &#123;</div><div class="line">end--;</div><div class="line">zv = &amp;end-&gt;val;</div><div class="line"><span class="keyword">if</span> (Z_TYPE_P(zv) == IS_INDIRECT) &#123;</div><div class="line">zv = Z_INDIRECT_P(zv);</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (Z_REFCOUNTED_P(zv)) &#123;</div><div class="line"><span class="keyword">break</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (p == end) <span class="keyword">return</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">while</span> (p != end) &#123;</div><div class="line">zv = &amp;p-&gt;val;</div><div class="line"><span class="keyword">if</span> (Z_TYPE_P(zv) == IS_INDIRECT) &#123;</div><div class="line">zv = Z_INDIRECT_P(zv);</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (Z_REFCOUNTED_P(zv)) &#123;</div><div class="line">ref = Z_COUNTED_P(zv);</div><div class="line">gc_scan(ref);</div><div class="line">&#125;</div><div class="line">p++;</div><div class="line">&#125;</div><div class="line">zv = &amp;p-&gt;val;</div><div class="line"><span class="keyword">if</span> (Z_TYPE_P(zv) == IS_INDIRECT) &#123;</div><div class="line">zv = Z_INDIRECT_P(zv);</div><div class="line">&#125;</div><div class="line">ref = Z_COUNTED_P(zv);</div><div class="line"><span class="keyword">goto</span> tail_call;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>主要为三个函数：</p><ul><li><code>gc_mark_roots</code>队规遍历，对object、array所有元素的refcount–并将其标记为灰色</li><li><code>gc_scan_roots</code>这个函数对节点信息的链表再次进行深度优先遍历，如果发现zval的refcount大于等于1，则对该zval和其包含的zval的refcount加1操作，这个是对非垃圾的一个信息还原，然后将这些zval颜色属性去掉(设置成black)。如果发现zval的refcount等于0，则就标记成白色，这些是后面将要清理掉的垃圾。</li><li><code>gc_collect_roots</code> 遍历节点信息链表,将前面一个步骤中标记为白色的节点信息放到GC_G(zval_to_free)为入口的链表中，这个链表用来存放将要释放的垃圾。 然后释放掉全部的节点信息，缓冲区被清空。分析结束后将重新收集节点信息。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;php是如何实现内存管理的?内存管理包括内存分配、内存回收、以及内存使用优化。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;内存使用的优化&lt;/li&gt;
&lt;li&gt;垃圾回收机制&lt;/li&gt;
&lt;li&gt;底层内存分配&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;内存使用的优化&quot;&gt;&lt;a href=&quot;#内存使用的优
      
    
    </summary>
    
      <category term="php源码学习" scheme="http://yoursite.com/categories/php%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="php源码" scheme="http://yoursite.com/tags/php%E6%BA%90%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>php数组实现</title>
    <link href="http://yoursite.com/2018/08/20/php%E6%95%B0%E7%BB%84%E5%AE%9E%E7%8E%B0/"/>
    <id>http://yoursite.com/2018/08/20/php数组实现/</id>
    <published>2018-08-20T12:00:08.000Z</published>
    <updated>2019-02-20T16:48:36.067Z</updated>
    
    <content type="html"><![CDATA[<p>php的数组依赖于hashtable实现的。</p><p>Times33的算法很简单，就是不断的乘33,下边是times33算法:</p><h2 id="Times33-hash"><a href="#Times33-hash" class="headerlink" title="Times33(hash)"></a>Times33(hash)</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">myHash</span><span class="params">($str)</span> </span>&#123;</div><div class="line">    <span class="comment">// hash(i) = hash(i-1) * 33 + str[i]</span></div><div class="line">    $hash = <span class="number">5381</span>;</div><div class="line">    $s    = md5($str); <span class="comment">//相比其它版本，进行了md5加密</span></div><div class="line">    $seed = <span class="number">5</span>;</div><div class="line">    $len  = <span class="number">32</span>;<span class="comment">//加密后长度32</span></div><div class="line">    <span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt; $len; $i++) &#123;</div><div class="line">        <span class="comment">// (hash &lt;&lt; 5) + hash 相当于 hash * 33</span></div><div class="line">        <span class="comment">//$hash = sprintf("%u", $hash * 33) + ord($s&#123;$i&#125;);</span></div><div class="line">        <span class="comment">//$hash = ($hash * 33 + ord($s&#123;$i&#125;)) &amp; 0x7FFFFFFF;</span></div><div class="line">        $hash = ($hash &lt;&lt; $seed) + $hash + ord($s&#123;$i&#125;);</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="keyword">return</span> $hash &amp; <span class="number">0x7FFFFFFF</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>其中<code>&lt;&lt;</code> 表示左移,每次左移表示x2例如:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">$num = <span class="number">2</span>;</div><div class="line"></div><div class="line"><span class="keyword">echo</span> $num &lt;&lt; <span class="number">2</span>;</div></pre></td></tr></table></figure><p>所以($hash &lt;&lt; $seed)表示 <code>$hash * 32</code> ,同时加上$hash,也就表示 <code>$hash * 33</code>了。ord()函数返回字符串的首个字符的 ASCII 值。<br>最后<code>$hash &amp; 0x7FFFFFFF</code> 表示与整形的最大值与操作(<code>0x7FFFF111FFF</code>二进制为<code>1111111111111111111111111111</code>),<br>这个与操作会截取超过整形二进制部分,所以times33计算出来的值不会超过整形的最大值。</p><h2 id="为什么要用hashtable实现php数组"><a href="#为什么要用hashtable实现php数组" class="headerlink" title="为什么要用hashtable实现php数组?"></a>为什么要用hashtable实现php数组?</h2><p>因为散列表是根据关键建码值直接进项访问的数据结构。在key和value之间有一个映射函数,可以根据key直接索引到对应的value值,它并<br>不会使用一般的对比操作,而是直接使用<code>内存的起始位置和偏移位置</code>进行寻址,所以会比正常的寻址要快。</p><h2 id="散列表结构"><a href="#散列表结构" class="headerlink" title="散列表结构"></a>散列表结构</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> _zend_array &#123;</div><div class="line">zend_refcounted_h gc;</div><div class="line"><span class="keyword">union</span> &#123;</div><div class="line"><span class="keyword">struct</span> &#123;</div><div class="line">ZEND_ENDIAN_LOHI_4(</div><div class="line">zend_uchar    flags,</div><div class="line">zend_uchar    nApplyCount,</div><div class="line">zend_uchar    nIteratorsCount,</div><div class="line">zend_uchar    reserve)</div><div class="line">&#125; v;</div><div class="line"><span class="keyword">uint32_t</span> flags;</div><div class="line">&#125; u;</div><div class="line"><span class="keyword">uint32_t</span>          nTableMask;</div><div class="line">Bucket           *arData;</div><div class="line"><span class="keyword">uint32_t</span>          nNumUsed;</div><div class="line"><span class="keyword">uint32_t</span>          nNumOfElements;</div><div class="line"><span class="keyword">uint32_t</span>          nTableSize;</div><div class="line"><span class="keyword">uint32_t</span>          nInternalPointer;</div><div class="line">zend_long         nNextFreeElement;</div><div class="line"><span class="keyword">dtor_func_t</span>       pDestructor;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><p>主要字段介绍:</p><ul><li>gc 引用次数,垃圾回收时会用到。</li><li>union u 就不介绍了。</li><li>arData 存储元素的数组,内存是连续的,arData指向第一个元素。</li><li>nTableMask nTableSize的负数。</li><li>nTableSize 数组长度,为2的n此房。</li><li>nNumUsed 当前使用的Bucket数。</li><li>nNumOfElements 当前所有的Bucket数。</li><li>nNextFreeElement 下一个被使用的Bucket($a[] = ‘’)</li><li>pDestructor 删除某个元素是会使用</li></ul><h2 id="Bucket结构"><a href="#Bucket结构" class="headerlink" title="Bucket结构"></a>Bucket结构</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> _Bucket &#123;</div><div class="line">zval              val;</div><div class="line">zend_ulong        h;                <span class="comment">/* hash value (or numeric index)   */</span></div><div class="line">zend_string      *key;              <span class="comment">/* string key or NULL for numerics */</span></div><div class="line">&#125; Bucket;</div></pre></td></tr></table></figure><ul><li>h hash出来的值(times33)</li><li>*key 存储元素的key</li><li>val 具体值,是个zval</li></ul><h2 id="如何实现"><a href="#如何实现" class="headerlink" title="如何实现"></a>如何实现</h2><p>php中实现散列表实现主要使用<code>存储元素数组</code>和 <code>映射函数</code>（也可以称作散列函数）和<code>映射表</code></p><h4 id="举个具体的栗子"><a href="#举个具体的栗子" class="headerlink" title="举个具体的栗子:"></a>举个具体的栗子:</h4><p> 如果我们要在php代码中声明一个数组会发生什么?下边分析下php是如何实现数组的。<br> <figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">$arr= [</div><div class="line"><span class="string">'a'</span> =&gt; <span class="string">'111'</span>,</div><div class="line"><span class="string">'b'</span> =&gt; <span class="string">'222'</span>,</div><div class="line"><span class="string">'c'</span> =&gt; <span class="string">'ccc'</span></div><div class="line">];</div></pre></td></tr></table></figure></p><ol><li>首先肯定是初始化。</li><li>接下来将每个元素对应的值依照顺序拷贝到 Bucket里。</li><li>然后利用映射函数对求值,根据算出来的值将其对应的bucket的地址写到该值对应的映射这表里。</li></ol><p>具体操作如下图:<br><img src="/photo/img/php数组实现/php数组具体实现.png" alt="image"></p><p>当然我们这里的映射是理想映射,因为在映射的计算过程中可能存在冲突,后续会介绍映射函数,以及如何解映射函数计算后的冲突。</p><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">ZEND_API <span class="keyword">void</span> ZEND_FASTCALL _zend_hash_init(HashTable *ht, <span class="keyword">uint32_t</span> nSize, <span class="keyword">dtor_func_t</span> pDestructor, zend_bool persistent ZEND_FILE_LINE_DC)</div><div class="line">&#123;</div><div class="line">GC_REFCOUNT(ht) = <span class="number">1</span>; <span class="comment">//设置引用次数</span></div><div class="line">GC_TYPE_INFO(ht) = IS_ARRAY; <span class="comment">//设置数据类型</span></div><div class="line">ht-&gt;u.flags = (persistent ? HASH_FLAG_PERSISTENT : <span class="number">0</span>) | HASH_FLAG_APPLY_PROTECTION | HASH_FLAG_STATIC_KEYS;</div><div class="line">ht-&gt;nTableMask = HT_MIN_MASK;</div><div class="line">HT_SET_DATA_ADDR(ht, &amp;uninitialized_bucket);</div><div class="line">ht-&gt;nNumUsed = <span class="number">0</span>;</div><div class="line">ht-&gt;nNumOfElements = <span class="number">0</span>;</div><div class="line">ht-&gt;nInternalPointer = HT_INVALID_IDX;</div><div class="line">ht-&gt;nNextFreeElement = <span class="number">0</span>;</div><div class="line">ht-&gt;pDestructor = pDestructor;</div><div class="line">ht-&gt;nTableSize = zend_hash_check_size(nSize);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>初始化的时候主要是对hashtable中各个成员的进行初始化设置,而且在这个时候不会给arData分配内存,只有在开始插入数据的时候才会<br>为arData分配内存。</p><h2 id="映射函数"><a href="#映射函数" class="headerlink" title="映射函数"></a>映射函数</h2><p>映射函数其实就是一次<code>hash</code>操作和和一次<code>|</code>操作.<br>hash操作就是上边锁提到得到times33操作,<code>|</code>操作是计算出来的hash值与nTableSize进行计算。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nIndex = ket-&gt;h | nTableMask;</div></pre></td></tr></table></figure></p><p>因为nTableMask是nTableSize的负数,所以计算出来的nIndex值区间应该为[-1,nTableMask]。</p><p>此处待补充 为什么会在[-1, nTableMask] 区间内。</p><h3 id="写入数据"><a href="#写入数据" class="headerlink" title="写入数据"></a>写入数据</h3><p>在初始化的时候并不会对arData分配内存,只有在写入的时候才会真正分配内存</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> zend_always_inline <span class="title">zend_hash_real_init_ex</span><span class="params">(HashTable *ht, <span class="keyword">int</span> packed)</span></span></div><div class="line">&#123;</div><div class="line">HT_ASSERT(GC_REFCOUNT(ht) == <span class="number">1</span>);</div><div class="line">ZEND_ASSERT(!((ht)-&gt;u.flags &amp; HASH_FLAG_INITIALIZED));</div><div class="line"><span class="keyword">if</span> (packed) &#123;</div><div class="line">HT_SET_DATA_ADDR(ht, pemalloc(HT_SIZE(ht), (ht)-&gt;u.flags &amp; HASH_FLAG_PERSISTENT));</div><div class="line">(ht)-&gt;u.flags |= HASH_FLAG_INITIALIZED | HASH_FLAG_PACKED;</div><div class="line">HT_HASH_RESET_PACKED(ht);</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">(ht)-&gt;nTableMask = -(ht)-&gt;nTableSize;</div><div class="line">HT_SET_DATA_ADDR(ht, pemalloc(HT_SIZE(ht), (ht)-&gt;u.flags &amp; HASH_FLAG_PERSISTENT));</div><div class="line">(ht)-&gt;u.flags |= HASH_FLAG_INITIALIZED;</div><div class="line"><span class="keyword">if</span> (EXPECTED(ht-&gt;nTableMask == <span class="number">-8</span>)) &#123;</div><div class="line">Bucket *arData = ht-&gt;arData;</div><div class="line"></div><div class="line">HT_HASH_EX(arData, <span class="number">-8</span>) = <span class="number">-1</span>;</div><div class="line">HT_HASH_EX(arData, <span class="number">-7</span>) = <span class="number">-1</span>;</div><div class="line">HT_HASH_EX(arData, <span class="number">-6</span>) = <span class="number">-1</span>;</div><div class="line">HT_HASH_EX(arData, <span class="number">-5</span>) = <span class="number">-1</span>;</div><div class="line">HT_HASH_EX(arData, <span class="number">-4</span>) = <span class="number">-1</span>;</div><div class="line">HT_HASH_EX(arData, <span class="number">-3</span>) = <span class="number">-1</span>;</div><div class="line">HT_HASH_EX(arData, <span class="number">-2</span>) = <span class="number">-1</span>;</div><div class="line">HT_HASH_EX(arData, <span class="number">-1</span>) = <span class="number">-1</span>;</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">HT_HASH_RESET(ht);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>分配具体的内存</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">define</span> HT_SIZE_EX(nTableSize, nTableMask) \</span></div><div class="line">(HT_DATA_SIZE((nTableSize)) + HT_HASH_SIZE((nTableMask)))</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">#define HT_HASH_SIZE(nTableMask) \</div><div class="line">(((size_t)(uint32_t)-(int32_t)(nTableMask)) * sizeof(uint32_t))</div><div class="line"></div><div class="line">#define HT_DATA_SIZE(nTableSize) \</div><div class="line">((size_t)(nTableSize) * sizeof(Bucket))</div></pre></td></tr></table></figure><p>可以看到在分配具体分配内存的时候会分配 nTableSize<em>(Bucket+uint32_t)大小的内存。<br>讲道理只需要分配nTableSize</em>Bucket大小内存就可以了,为什么会多余出来 nTableSize<em>uint32_t内存呢?<br>因为nTableSize</em>uint32_t就是<code>映射表</code>所占内存大小。所以说Bucket会和映射表一次申请内存。<br>写完成写入操作以后会将<code>*arData</code> 指向第一个Bucket。</p><p>具体在内存里的结果如图所示:<br><img src="/photo/img/php数组实现/hashtable.png" alt="image"></p><p><code>映射表</code>在初始化的时候所有值都是-1,只有在被赋值时候会写入对应<code>Bucket</code>所在链表的偏移量。;<br>ht-&gt;arData 指向第一个<code>Bucket</code>的位置,在赋值的时候会按照列表顺序,将值写入<code>Bucket</code>的value里,然后会根据<br>映射函数算出值当做偏移量找到对应<code>映射表</code>的元素,然后将当前<code>Bucket</code>写入此元素。</p><p>ps nTableSize 为2的次方倍。</p><h2 id="冲突"><a href="#冲突" class="headerlink" title="冲突"></a>冲突</h2><p>如果<code>nIndex = ket-&gt;h | nTableMask</code> 算出来的值冲突了怎么办? 首先<code>映射表</code>的每个元素不是链表,所以导致无法存储多个元素。<br>在php中是这样处理冲突的:<br>首先<code>映射表</code>的所有元素初始化值为 -1 ,当前<br>如果用冲突会将新算出来的值对应的<code>Bucket</code>覆盖原来旧的<code>Bucket</code>,然后将旧的<code>Bucket</code>迁移到新的<code>Bucket</code>,<br>并将旧的<code>Bucket</code>的u2.next(默认为-1) 指向新<code>Bucket</code>。</p><p>如图<br><img src="/photo/img/php数组实现/链表冲突.png" alt="image"></p><h2 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h2><p>php再查找一个数组元素是,首先会根据其key 获取到计算后hash值’ket-&gt;h’,然后根据映射函数算出当前元素在<code>映射表</code>中的偏移量,利用当前位置+偏移量找到<code>映射表</code>的元素,再根据其内的偏量找到对应<code>Bucket</code>链表的首个元素位置,最后遍历该链表核对key值,找到对应的值。</p><p>具体实现函数:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> zend_always_inline Bucket *<span class="title">zend_hash_find_bucket</span><span class="params">(<span class="keyword">const</span> HashTable *ht, zend_string *key)</span></span></div><div class="line">&#123;</div><div class="line">zend_ulong h;</div><div class="line"><span class="keyword">uint32_t</span> nIndex;</div><div class="line"><span class="keyword">uint32_t</span> idx;</div><div class="line">Bucket *p, *arData;</div><div class="line"></div><div class="line">h = zend_string_hash_val(key);</div><div class="line">arData = ht-&gt;arData;</div><div class="line">nIndex = h | ht-&gt;nTableMask;</div><div class="line">idx = HT_HASH_EX(arData, nIndex);</div><div class="line"><span class="keyword">while</span> (EXPECTED(idx != HT_INVALID_IDX)) &#123;</div><div class="line">p = HT_HASH_TO_BUCKET_EX(arData, idx);</div><div class="line"><span class="keyword">if</span> (EXPECTED(p-&gt;key == key)) &#123; <span class="comment">/* check for the same interned string */</span></div><div class="line"><span class="keyword">return</span> p;</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (EXPECTED(p-&gt;h == h) &amp;&amp;</div><div class="line">     EXPECTED(p-&gt;key) &amp;&amp;</div><div class="line">     EXPECTED(ZSTR_LEN(p-&gt;key) == ZSTR_LEN(key)) &amp;&amp;</div><div class="line">     EXPECTED(<span class="built_in">memcmp</span>(ZSTR_VAL(p-&gt;key), ZSTR_VAL(key), ZSTR_LEN(key)) == <span class="number">0</span>)) &#123;</div><div class="line"><span class="keyword">return</span> p;</div><div class="line">&#125;</div><div class="line">idx = Z_NEXT(p-&gt;val);</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="扩容"><a href="#扩容" class="headerlink" title="扩容"></a>扩容</h2><p>数组的容量在初始化的时候已经确定了大小,就是nTableSize。当然映射函数也是根据 nTableMask 来计算的。<br>所以我们扩容时候必须重新计算索引,也就是<code>映射表</code>里的值。<br>具体扩容规则:<br>首先当需要扩容时,会计算当前<code>Bucket</code>链表里删除元素数量占总表元素数量的比例,如果没有超过阈值则申请分配一个原来数组大小两倍的新素组,把元素复制到新数组上,然后重新建立索引。</p><p>阈值判断:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ht-&gt;nNumUsed &gt; ht-&gt;nNumOfElements + (ht-&gt;nNumOfElements &gt;&gt; <span class="number">5</span></div></pre></td></tr></table></figure></p><p>处理过程:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> ZEND_FASTCALL <span class="title">zend_hash_do_resize</span><span class="params">(HashTable *ht)</span></span></div><div class="line">&#123;</div><div class="line"></div><div class="line">IS_CONSISTENT(ht);</div><div class="line">HT_ASSERT(GC_REFCOUNT(ht) == <span class="number">1</span>);</div><div class="line"></div><div class="line"><span class="keyword">if</span> (ht-&gt;nNumUsed &gt; ht-&gt;nNumOfElements + (ht-&gt;nNumOfElements &gt;&gt; <span class="number">5</span>)) &#123; <span class="comment">/* additional term is there to amortize the cost of compaction */</span></div><div class="line">HANDLE_BLOCK_INTERRUPTIONS();</div><div class="line">zend_hash_rehash(ht);</div><div class="line">HANDLE_UNBLOCK_INTERRUPTIONS();</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (ht-&gt;nTableSize &lt; HT_MAX_SIZE) &#123;<span class="comment">/* Let's double the table size */</span></div><div class="line"><span class="keyword">void</span> *new_data, *old_data = HT_GET_DATA_ADDR(ht);</div><div class="line"><span class="keyword">uint32_t</span> nSize = ht-&gt;nTableSize + ht-&gt;nTableSize;</div><div class="line">Bucket *old_buckets = ht-&gt;arData;</div><div class="line"></div><div class="line">HANDLE_BLOCK_INTERRUPTIONS();</div><div class="line">new_data = pemalloc(HT_SIZE_EX(nSize, -nSize), ht-&gt;u.flags &amp; HASH_FLAG_PERSISTENT);</div><div class="line">ht-&gt;nTableSize = nSize;</div><div class="line">ht-&gt;nTableMask = -ht-&gt;nTableSize;</div><div class="line">HT_SET_DATA_ADDR(ht, new_data);</div><div class="line"><span class="built_in">memcpy</span>(ht-&gt;arData, old_buckets, <span class="keyword">sizeof</span>(Bucket) * ht-&gt;nNumUsed);</div><div class="line">pefree(old_data, ht-&gt;u.flags &amp; HASH_FLAG_PERSISTENT);</div><div class="line">zend_hash_rehash(ht);</div><div class="line">HANDLE_UNBLOCK_INTERRUPTIONS();</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">zend_error_noreturn(E_ERROR, <span class="string">"Possible integer overflow in memory allocation (%zu * %zu + %zu)"</span>, ht-&gt;nTableSize * <span class="number">2</span>, <span class="keyword">sizeof</span>(Bucket) + <span class="keyword">sizeof</span>(<span class="keyword">uint32_t</span>), <span class="keyword">sizeof</span>(Bucket));</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>在处理的过程中还会把已经删除的<code>Bucket</code>给删除。</p><p>具体的操作在<code>zend_hash.c</code>文件里。<br>如果超过阈值,则会把已经删除<code>Bucket</code>移除,然后把又有后边的元素往前移动,补上空缺的<code>Bucket</code>,当然索引也会重建。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.cnblogs.com/52fhy/p/5007456.html" target="_blank" rel="noopener">time33 </a></li><li><a href="https://github.com/pangudashu/php7-internal/blob/master/2/zval.md" target="_blank" rel="noopener">2.1 变量的内部实现</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;php的数组依赖于hashtable实现的。&lt;/p&gt;
&lt;p&gt;Times33的算法很简单，就是不断的乘33,下边是times33算法:&lt;/p&gt;
&lt;h2 id=&quot;Times33-hash&quot;&gt;&lt;a href=&quot;#Times33-hash&quot; class=&quot;headerlink&quot; t
      
    
    </summary>
    
      <category term="php源码学习" scheme="http://yoursite.com/categories/php%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="php源码" scheme="http://yoursite.com/tags/php%E6%BA%90%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>php数据结构</title>
    <link href="http://yoursite.com/2018/08/19/php%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <id>http://yoursite.com/2018/08/19/php数据结构/</id>
    <published>2018-08-19T12:30:34.000Z</published>
    <updated>2019-01-08T10:55:19.888Z</updated>
    
    <content type="html"><![CDATA[<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>php是如何统一实现各种变量类型的? 这和php变量类型的实现是密不可分的。<br>一个变量主要有三个要素:<code>变量名``变量类型``变量值</code>,他们在php变量类型实现中主要对应 zval zend_value 和<br>zend的各种数据类型。<br>php中用$去声明一个变量,在声明的时候可以进行初始化,当然也可以不声明直接使用。一般来说,一个变量的定义包含<br>两步:变量定义和变量初始化,在php中只定义不初始化是可以的。</p><h2 id="变量结构体"><a href="#变量结构体" class="headerlink" title="变量结构体"></a>变量结构体</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// php zval结构</span></div><div class="line"><span class="keyword">struct</span> _zval_struct &#123;</div><div class="line">zend_value        value; 指向具体的value<span class="comment">/* value */</span></div><div class="line"><span class="keyword">union</span> &#123;</div><div class="line"><span class="keyword">struct</span> &#123;</div><div class="line">ZEND_ENDIAN_LOHI_4(</div><div class="line">zend_uchar    type,<span class="comment">/* active type */</span></div><div class="line">zend_uchar    type_flags,</div><div class="line">zend_uchar    const_flags,</div><div class="line">zend_uchar    reserved)    <span class="comment">/* call info for EX(This) */</span></div><div class="line">&#125; v;</div><div class="line"><span class="keyword">uint32_t</span> type_info;</div><div class="line">&#125; u1;</div><div class="line"><span class="keyword">union</span> &#123;</div><div class="line"><span class="keyword">uint32_t</span>     var_flags;</div><div class="line"><span class="keyword">uint32_t</span>     next;                 <span class="comment">/* hash collision chain */</span></div><div class="line"><span class="keyword">uint32_t</span>     cache_slot;           <span class="comment">/* literal cache slot */</span></div><div class="line"><span class="keyword">uint32_t</span>     lineno;               <span class="comment">/* line number (for ast nodes) */</span></div><div class="line"><span class="keyword">uint32_t</span>     num_args;             <span class="comment">/* arguments number for EX(This) */</span></div><div class="line"><span class="keyword">uint32_t</span>     fe_pos;               <span class="comment">/* foreach position */</span></div><div class="line"><span class="keyword">uint32_t</span>     fe_iter_idx;          <span class="comment">/* foreach iterator index */</span></div><div class="line">&#125; u2;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><h2 id="变量类型"><a href="#变量类型" class="headerlink" title="变量类型"></a>变量类型</h2><p>其中type 表示当前变量的类型,例如string array int等,以下为php中全部变量类型。<br>其中type 是一个无符号类型的char,他的定义是这样的<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> zend_uchar;</div></pre></td></tr></table></figure></p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">union</span> _zend_value &#123;</div><div class="line">    zend_long         lval;<span class="comment">/* long value */</span></div><div class="line">    <span class="keyword">double</span>            dval;<span class="comment">/* double value */</span></div><div class="line">    zend_refcounted  *counted;</div><div class="line">    zend_string      *str;</div><div class="line">    zend_array       *arr;</div><div class="line">    zend_object      *obj;</div><div class="line">    zend_resource    *res;</div><div class="line">    zend_reference   *ref;</div><div class="line">    zend_ast_ref     *ast;</div><div class="line">    zval             *zv;</div><div class="line">    <span class="keyword">void</span>             *ptr;</div><div class="line">    zend_class_entry *ce;</div><div class="line">    zend_function    *func;</div><div class="line">    <span class="keyword">struct</span> &#123;</div><div class="line">    <span class="keyword">uint32_t</span> w1;</div><div class="line">    <span class="keyword">uint32_t</span> w2;</div><div class="line">    &#125; ww;</div><div class="line">    &#125; zend_value;</div></pre></td></tr></table></figure><ul><li>在这些类型里不存在boolean类型,因为在php7中已经将boolean拆分为true和false.直接保存在type中,也就是说<br>boolean没有_zend_value结构,直接通过type字段就可以确定boolean的值。</li><li>从上边的结构体可以看出来 <code>zend_long</code>、<code>double</code> 类型不是指针类型,也就是说整形和浮点型正能进行深拷贝,<br>并不能和其他说句类型一样进行 <code>引用计数</code>和<code>写时复制</code>。因为有<code>引用计数</code>和<code>写时复制</code>在变量赋值且不做修改时<br>才能大量节省内存。</li></ul><p>以string类型为例,它在php中的结构类型应该是这样的:</p><p><img src="/photo/img/php数据结构/php数据结构.png" alt="image"></p><p>_zend_string:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> _zend_string &#123;</div><div class="line">zend_refcounted_h gc;</div><div class="line">zend_ulong        h;                <span class="comment">/* hash value */</span></div><div class="line"><span class="keyword">size_t</span>            len;</div><div class="line"><span class="keyword">char</span>              val[<span class="number">1</span>];          <span class="comment">/*字符串起始地址*/</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure></p><ul><li>其中<code>gc</code> 字段表示这个结构体被引用的次数,垃圾回收的时候会用到。</li><li>h 字符串通过Times33计算出来的hashcode</li><li>len 字符串长度</li><li>val 字符串内容</li></ul><p>我们在这里都会有疑问,为什么存储字符串内容的时候没有使用char*类型,而用了一个数组类型来存储。zend_string<br>在申请内存的时候会会申请malloc(sizeof(zend_string)+字符串长度),且val[0]存的是字符串最后一个字符安“\0”</p><p>zend_string结构在内存中如下所示:</p><p><img src="/photo/img/php数据结构/zend_stirng内存中结构.png" alt="image"></p><p>当时也在char val[1]的地方疑惑了很久,再往上找了很多文章,其中<br>Nikita Popov(nikic，PHP 官方开发组成员，柏林科技大学的学生) 这样解释</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">如果你对 C 语言了解的不是很深入的话，可能会觉得 <span class="keyword">val</span> 的定义有些奇怪：这个声明只有一个元素，但是显然我们想存储的字符串长度肯定大于一个字符的长度。这里其实使用的是结构体的一个『黑』方法：在声明数组时只定义一个元素，但是实际创建 zend_string 时再分配足够的内存来存储整个字符串。这样我们还是可以通过 <span class="keyword">val</span> 访问完整的字符串。</div></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考:"></a>参考:</h2><ul><li><a href="https://nikic.github.io/2015/06/19/Internal-value-representation-in-PHP-7-part-2.html" target="_blank" rel="noopener">Internal value representation in PHP 7 - Part 2 </a></li><li><a href="https://0x1.im/blog/php/Internal-value-representation-in-PHP-7-part-2.html" target="_blank" rel="noopener">[译]变量在 PHP7 内部的实现（二）</a></li><li><a href="https://www.kancloud.cn/nickbai/php7/363268" target="_blank" rel="noopener">php内核分析——2.1 变量的内部实现</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;变量&quot;&gt;&lt;a href=&quot;#变量&quot; class=&quot;headerlink&quot; title=&quot;变量&quot;&gt;&lt;/a&gt;变量&lt;/h2&gt;&lt;p&gt;php是如何统一实现各种变量类型的? 这和php变量类型的实现是密不可分的。&lt;br&gt;一个变量主要有三个要素:&lt;code&gt;变量名``变量类型`
      
    
    </summary>
    
      <category term="php源码学习" scheme="http://yoursite.com/categories/php%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="php源码" scheme="http://yoursite.com/tags/php%E6%BA%90%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>php的引用</title>
    <link href="http://yoursite.com/2018/08/12/php%E7%9A%84&amp;%E7%AC%A6%E5%8F%B7/"/>
    <id>http://yoursite.com/2018/08/12/php的&amp;符号/</id>
    <published>2018-08-12T14:18:07.000Z</published>
    <updated>2019-01-08T10:56:48.506Z</updated>
    
    <content type="html"><![CDATA[<h3 id="amp"><a href="#amp" class="headerlink" title="&amp;"></a>&amp;</h3><p>&amp;是php中的引用,他并不一种独立的数据类型,而是指向其他数据类型的数据结构,和C语言的指针类似。</p><p>具体作用为:当我们修改引用类型变量是,其修改的将作用于实际引用的变量上。</p><p>如果当我们使用&amp;符号生成一个引用变量时,首先会为&amp;操作生成一个zend_reference结构,zend_reference就是引用<br>类型的结构体,他内嵌一个zval,然后此结构的体zval的value指向原来zval的value上。然后将原来zval的变量<br>类型变为IS_REFERENCE,原来zval的value执行新创建zend_reference结构。<br>索引&amp;的作用就是新生成zend_reference,然后将其指向原来的zval的value上,顺便把原来zval的变量类型变化为引用类型。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> _zend_reference &#123;</div><div class="line">    zend_refcondted_h gc;</div><div class="line">    zval              val;  指向原来的value.</div><div class="line">&#125;;</div></pre></td></tr></table></figure><h3 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$a</span> = time(); <span class="regexp">//</span>步骤<span class="number">1</span></div><div class="line"><span class="variable">$b</span> = &amp;<span class="variable">$a</span>;    <span class="regexp">//</span>步骤<span class="number">2</span></div></pre></td></tr></table></figure><p><strong>步骤1</strong></p><p>现在<code>$a = time()</code>是他们的数据结构指向为:</p><p><img src="/photo/img/php引用/未引用前.png" alt="image"></p><p>此时数据结构,一直指针指向是这个样子。</p><p><strong>步骤2</strong></p><p><img src="/photo/img/php引用/引用后.png" alt="image"></p><p>也就是说PHP的引用在使用后新生成一个引用类型机构,然后将引用类型结构指向越来的value,最后将原来zval的value<br>指向新生成的结构体,并将其变量类型变为引用类型,IS_REFERENCE。当然随之改变的还有计数。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;amp&quot;&gt;&lt;a href=&quot;#amp&quot; class=&quot;headerlink&quot; title=&quot;&amp;amp;&quot;&gt;&lt;/a&gt;&amp;amp;&lt;/h3&gt;&lt;p&gt;&amp;amp;是php中的引用,他并不一种独立的数据类型,而是指向其他数据类型的数据结构,和C语言的指针类似。&lt;/p&gt;
&lt;p&gt;具
      
    
    </summary>
    
      <category term="php源码学习" scheme="http://yoursite.com/categories/php%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="php源码" scheme="http://yoursite.com/tags/php%E6%BA%90%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>算法-几种排序算法的实现</title>
    <link href="http://yoursite.com/2018/07/30/%E7%AE%97%E6%B3%95-%E5%87%A0%E7%A7%8D%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
    <id>http://yoursite.com/2018/07/30/算法-几种排序算法的实现/</id>
    <published>2018-07-30T06:47:03.000Z</published>
    <updated>2019-02-28T06:20:34.549Z</updated>
    
    <content type="html"><![CDATA[<h2 id="快速排序（快拍）"><a href="#快速排序（快拍）" class="headerlink" title="快速排序（快拍）"></a>快速排序（快拍）</h2><p>快速排序的思想是分治，平均时间复杂度O(nlogn)，当然快速排序的时间复杂度并不是稳定的，最大时间复杂度是n^2。当然在用C语言实现的快速排序中，快速排序是原地排序，所有排序中空间复杂最低。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p><code>基于数组的快速排序（递归）</code> </p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">qSort</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(low &gt; high) <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">int</span> first = low;</div><div class="line">    <span class="keyword">int</span> last = high;</div><div class="line">    <span class="keyword">int</span> key = a[first];</div><div class="line">    <span class="keyword">while</span>(first &lt; last)&#123;</div><div class="line">        <span class="keyword">while</span>(first &lt; last &amp;&amp; a[last] &gt;= key) --last;</div><div class="line">        <span class="keyword">if</span>(first &lt; last) a[first] = a[last]; <span class="comment">//这个地方是精髓啊</span></div><div class="line">        <span class="keyword">while</span>(first &lt; last &amp;&amp; a[first] &lt;= key) ++first;</div><div class="line">        <span class="keyword">if</span>(first &lt; last) a[last] = a[first];</div><div class="line">        &#125;</div><div class="line">    a[first] = key;</div><div class="line">    Qsort(a, low, first<span class="number">-1</span>);</div><div class="line">    Qsort(a, first+<span class="number">1</span>, high);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><code>这个版本可能便于理解</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> *x, <span class="keyword">int</span> *y)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> t = *x;</div><div class="line">    *x = *y;</div><div class="line">    *y = t;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">quick_sort_recursive</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (start &gt;= end)</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">int</span> mid = arr[end];</div><div class="line">    <span class="keyword">int</span> left = start, right = end - <span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span> (left &lt; right) &#123;</div><div class="line">        <span class="keyword">while</span> (arr[left] &lt; mid &amp;&amp; left &lt; right)</div><div class="line">            left++;</div><div class="line">        <span class="keyword">while</span> (arr[right] &gt;= mid &amp;&amp; left &lt; right)</div><div class="line">            right--;</div><div class="line">        swap(&amp;arr[left], &amp;arr[right]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (arr[left] &gt;= arr[end])</div><div class="line">        swap(&amp;arr[left], &amp;arr[end]);</div><div class="line">    <span class="keyword">else</span></div><div class="line">        left++;</div><div class="line">    <span class="keyword">if</span> (left)</div><div class="line">        quick_sort_recursive(arr, start, left - <span class="number">1</span>);</div><div class="line">    quick_sort_recursive(arr, left + <span class="number">1</span>, end);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">quick_sort</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> len)</span> </span>&#123;</div><div class="line">    quick_sort_recursive(arr, <span class="number">0</span>, len - <span class="number">1</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><code>php的快速排序</code><br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">qSort</span><span class="params">(&amp;$envelopes, $start, $end )</span></span></div><div class="line">&#123;</div><div class="line">        <span class="keyword">if</span>($end &lt;= $start)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        $i = $start;</div><div class="line">        $j = $end;</div><div class="line">        <span class="keyword">while</span>($i &lt; $j)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">while</span>($i &lt; $end &amp;&amp; $envelopes[$i] &lt;= $envelopes[$start])</div><div class="line">            &#123;</div><div class="line">                $i++;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">while</span>($j &gt; $start &amp;&amp; $envelopes[$j] &gt;  $envelopes[$start])</div><div class="line">            &#123;</div><div class="line">                $j--;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>($i &lt; $j)</div><div class="line">            &#123;</div><div class="line">                $tmp = $envelopes[$i];</div><div class="line">                $envelopes[$i] = $envelopes[$j];</div><div class="line">                $envelopes[$j] = $tmp;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//或者当i= 8 j = 10 i--j++（处理当j==i ）指向9事无法交换情况。</span></div><div class="line">        <span class="keyword">if</span>($envelopes[$i] &lt; $envelopes[$start]) &#123;</div><div class="line">            $tmp = $envelopes[$start];</div><div class="line">            $envelopes[$start] = $envelopes[$j];</div><div class="line">            $envelopes[$i] = $tmp;</div><div class="line">        &#125;</div><div class="line">        qSort($envelopes, $start, $i<span class="number">-1</span>);</div><div class="line">        qSort($envelopes, $i+<span class="number">1</span>, $end);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><code>基于链表的快速排序</code><br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> Node   </div><div class="line">&#123;  </div><div class="line">    <span class="keyword">int</span> key;  </div><div class="line">    Node* next;  </div><div class="line">&#125;;  </div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>* a, <span class="keyword">int</span>* b)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> tmp = *a ;</div><div class="line">    *a = *b;</div><div class="line">    *b = tmp;</div><div class="line">&#125;  </div><div class="line"><span class="function">Node* <span class="title">GetPartion</span><span class="params">(Node* pBegin, Node* pEnd)</span>  </span></div><div class="line">&#123;  </div><div class="line">    <span class="keyword">int</span> key = pBegin-&gt;key;  </div><div class="line">    Node* p = pBegin;  </div><div class="line">    Node* q = p-&gt;next;  </div><div class="line">  </div><div class="line">    <span class="keyword">while</span>(q != pEnd)  </div><div class="line">    &#123;  </div><div class="line">        <span class="keyword">if</span>(q-&gt;key &lt; key)  </div><div class="line">        &#123;  </div><div class="line">            p = p-&gt;next;  </div><div class="line">            swap(p-&gt;key,q-&gt;key);  </div><div class="line">        &#125;  </div><div class="line">  </div><div class="line">        q = q-&gt;next;  </div><div class="line">    &#125;  </div><div class="line">    swap(&amp;p-&gt;key,&amp;pBegin-&gt;key);  </div><div class="line">    <span class="keyword">return</span> p;  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">QuickSort</span><span class="params">(Node* pBeign, Node* pEnd)</span>  </span></div><div class="line">&#123;  </div><div class="line">    <span class="keyword">if</span>(pBeign != pEnd)  </div><div class="line">    &#123;  </div><div class="line">        Node* partion = GetPartion(pBeign,pEnd);  </div><div class="line">        QuickSort(pBeign,partion);  </div><div class="line">        QuickSort(partion-&gt;next,pEnd);  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="并归排序"><a href="#并归排序" class="headerlink" title="并归排序"></a>并归排序</h2><p>并归排序的思想是分治的思想，时间复杂度 O(nlogn)。</p><ul><li>如果一个链表（数组）只有一个元素或者为空直接返回。</li><li>如果链表（数组）可以分成尽可能相等两部分，将其分成尽可能相等两部分。</li><li>对于两个被分开的两个部分进行整个归并排序</li><li>把两个拍好序的链表（数组）进行合并。<br>与快拍的区别是：<code>快排是先处理完再递归</code> 而归并排序是<code>先递归在处理</code></li></ul><p>基于链表的并归排序。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"> <span class="function"><span class="keyword">struct</span> ListNode * <span class="title">merge</span><span class="params">(<span class="keyword">struct</span> ListNode *l1,<span class="keyword">struct</span> ListNode *l2)</span></span></div><div class="line"> &#123;</div><div class="line">     <span class="keyword">if</span>(l1 == <span class="literal">NULL</span>) <span class="keyword">return</span> l2;</div><div class="line">     <span class="keyword">if</span>(l2 == <span class="literal">NULL</span>) <span class="keyword">return</span> l1;</div><div class="line">     <span class="keyword">if</span>( (l1==<span class="literal">NULL</span>) &amp;&amp;(l2==<span class="literal">NULL</span>) ) <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">     </div><div class="line">     <span class="keyword">struct</span> ListNode *head=<span class="literal">NULL</span>;</div><div class="line">     <span class="keyword">if</span>(l1-&gt;val &lt; l2-&gt;val)</div><div class="line">    &#123;</div><div class="line">        head=l1;</div><div class="line">        l1=l1-&gt;next;</div><div class="line">    &#125;</div><div class="line">     <span class="keyword">else</span> </div><div class="line">     &#123;</div><div class="line">         head=l2;</div><div class="line">         l2=l2-&gt;next;</div><div class="line">     &#125;</div><div class="line">     </div><div class="line">     <span class="keyword">struct</span> ListNode *p=head;</div><div class="line">     <span class="keyword">while</span>(l1 != <span class="literal">NULL</span> &amp;&amp; l2 != <span class="literal">NULL</span>)</div><div class="line">     &#123;</div><div class="line">         <span class="keyword">if</span>(l1-&gt;val &lt; l2-&gt;val)</div><div class="line">         &#123;</div><div class="line">             p-&gt;next=l1;</div><div class="line">             l1=l1-&gt;next;</div><div class="line">         &#125;</div><div class="line">         <span class="keyword">else</span></div><div class="line">         &#123;</div><div class="line">             p-&gt;next=l2;</div><div class="line">             l2=l2-&gt;next;</div><div class="line">         &#125;</div><div class="line">         p=p-&gt;next;</div><div class="line">     &#125;</div><div class="line">     </div><div class="line">     <span class="keyword">if</span>(l1 != <span class="literal">NULL</span>) p-&gt;next=l1;</div><div class="line">     <span class="keyword">if</span>(l2 != <span class="literal">NULL</span>) p-&gt;next=l2;</div><div class="line">     <span class="keyword">return</span> head;</div><div class="line"> &#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">struct</span> ListNode* <span class="title">sortList</span><span class="params">(<span class="keyword">struct</span> ListNode* head)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(head == <span class="literal">NULL</span> || head-&gt;next == <span class="literal">NULL</span>) <span class="keyword">return</span> head;</div><div class="line">    <span class="keyword">struct</span> ListNode *slow=head;</div><div class="line">    <span class="keyword">struct</span> ListNode *fast=head;</div><div class="line">    <span class="keyword">struct</span> ListNode *pre=<span class="literal">NULL</span>;</div><div class="line">    </div><div class="line">    <span class="comment">// 切成两半</span></div><div class="line">    <span class="keyword">while</span>(fast!= <span class="literal">NULL</span> &amp;&amp; fast-&gt;next != <span class="literal">NULL</span>)</div><div class="line">    &#123;</div><div class="line">        pre=slow;</div><div class="line">        slow=slow-&gt;next;</div><div class="line">        fast=fast-&gt;next-&gt;next;</div><div class="line">    &#125;</div><div class="line">    pre-&gt;next=<span class="literal">NULL</span>;</div><div class="line">    </div><div class="line">    <span class="comment">//两半分别归并</span></div><div class="line">    <span class="keyword">struct</span> ListNode *l1=sortList(head);</div><div class="line">    <span class="keyword">struct</span> ListNode *l2=sortList(slow);</div><div class="line">    </div><div class="line">    <span class="comment">//调用merge</span></div><div class="line">    <span class="keyword">return</span> merge(l1,l2);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><code>基于数组的并归排序(递归)</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge_sort_recursive</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> reg[], <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (start &gt;= end)</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">int</span> len = end - start, mid = (len &gt;&gt; <span class="number">1</span>) + start;</div><div class="line">    <span class="keyword">int</span> start1 = start, end1 = mid;</div><div class="line">    <span class="keyword">int</span> start2 = mid + <span class="number">1</span>, end2 = end;</div><div class="line">    merge_sort_recursive(arr, reg, start1, end1);</div><div class="line">    merge_sort_recursive(arr, reg, start2, end2);</div><div class="line">    <span class="keyword">int</span> k = start;</div><div class="line">    <span class="keyword">while</span> (start1 &lt;= end1 &amp;&amp; start2 &lt;= end2)</div><div class="line">        reg[k++] = arr[start1] &lt; arr[start2] ? arr[start1++] : arr[start2++];</div><div class="line">    <span class="keyword">while</span> (start1 &lt;= end1)</div><div class="line">        reg[k++] = arr[start1++];</div><div class="line">    <span class="keyword">while</span> (start2 &lt;= end2)</div><div class="line">        reg[k++] = arr[start2++];</div><div class="line">    <span class="keyword">for</span> (k = start; k &lt;= end; k++)</div><div class="line">        arr[k] = reg[k];</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge_sort</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">const</span> <span class="keyword">int</span> len)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> reg[len];</div><div class="line">    merge_sort_recursive(arr, reg, <span class="number">0</span>, len - <span class="number">1</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><code>基于数组的并归排序（迭代）</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">min</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> x &lt; y ? x : y;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge_sort</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> len)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span>* a = arr;</div><div class="line">    <span class="keyword">int</span>* b = (<span class="keyword">int</span>*) <span class="built_in">malloc</span>(len * <span class="keyword">sizeof</span>(<span class="keyword">int</span>));</div><div class="line">    <span class="keyword">int</span> seg, start;</div><div class="line">    <span class="keyword">for</span> (seg = <span class="number">1</span>; seg &lt; len; seg += seg) &#123;</div><div class="line">        <span class="keyword">for</span> (start = <span class="number">0</span>; start &lt; len; start += seg + seg) &#123;</div><div class="line">            <span class="keyword">int</span> low = start, mid = min(start + seg, len), high = min(start + seg + seg, len);</div><div class="line">            <span class="keyword">int</span> k = low;</div><div class="line">            <span class="keyword">int</span> start1 = low, end1 = mid;</div><div class="line">            <span class="keyword">int</span> start2 = mid, end2 = high;</div><div class="line">            <span class="keyword">while</span> (start1 &lt; end1 &amp;&amp; start2 &lt; end2)</div><div class="line">                b[k++] = a[start1] &lt; a[start2] ? a[start1++] : a[start2++];</div><div class="line">            <span class="keyword">while</span> (start1 &lt; end1)</div><div class="line">                b[k++] = a[start1++];</div><div class="line">            <span class="keyword">while</span> (start2 &lt; end2)</div><div class="line">                b[k++] = a[start2++];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span>* temp = a;</div><div class="line">        a = b;</div><div class="line">        b = temp;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (a != arr) &#123;</div><div class="line">        <span class="keyword">int</span> i;</div><div class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++)</div><div class="line">            b[i] = a[i];</div><div class="line">        b = a;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">free</span>(b);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><h3 id="时间复杂度与空间复杂度"><a href="#时间复杂度与空间复杂度" class="headerlink" title="时间复杂度与空间复杂度"></a>时间复杂度与空间复杂度</h3><p>时间复杂度O(n^2)</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><p><code>c语言冒泡排序</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="keyword">int</span> *nums, <span class="keyword">int</span> lenNums)</span> </span>&#123;</div><div class="line"><span class="keyword">int</span> i,j;</div><div class="line"><span class="keyword">int</span> flag = <span class="number">1</span>;</div><div class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; lenNums; i++)</div><div class="line">&#123;</div><div class="line">    flag = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(j=<span class="number">0</span>; j&lt; lenNums - i <span class="number">-1</span>; j++)</div><div class="line">    &#123;</div><div class="line">        <span class="comment">//比较并交换</span></div><div class="line">        <span class="keyword">if</span>(nums[j] &gt; nums[j+<span class="number">1</span>])</div><div class="line">        &#123;</div><div class="line">            nums[j] = nums[j+<span class="number">1</span>] + nums[j];</div><div class="line">            nums[j+<span class="number">1</span>] = nums[j] - nums[j+<span class="number">1</span>];</div><div class="line">            nums[j] = nums[j] - nums[j+<span class="number">1</span>];</div><div class="line">            flag = <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(flag == <span class="number">1</span>) </div><div class="line">    &#123;</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><h3 id="时间复杂度与空间复杂度-1"><a href="#时间复杂度与空间复杂度-1" class="headerlink" title="时间复杂度与空间复杂度"></a>时间复杂度与空间复杂度</h3><p>时间复杂度O(n^2),空间复杂度O(1)</p><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">insertSort</span><span class="params">(<span class="keyword">int</span> *nums, <span class="keyword">int</span> numsLen)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> tmp;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i&lt; numsLen; i++)</div><div class="line">    &#123;</div><div class="line">        tmp = nums[i];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = i; j&gt;<span class="number">0</span> &amp;&amp; nums[j] &lt; nums[j<span class="number">-1</span>]; j--)</div><div class="line">        &#123;</div><div class="line">            nums[j] = nums[j<span class="number">-1</span>];</div><div class="line">        &#125;</div><div class="line">        nums[j] = tmp;</div><div class="line">    &#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h2><p>基数排序是将 <code>需要排序的所有数字统一为固定位数的数字</code>（如果位数不足向前补0），然后按照位数切割，分别对每一个位数进行比较。从最低位开始，依次进行一次排序。这样排完以后就会变成一个有序序列。</p><h3 id="时间复杂度与空间复杂度-2"><a href="#时间复杂度与空间复杂度-2" class="headerlink" title="时间复杂度与空间复杂度"></a>时间复杂度与空间复杂度</h3><h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">radixsort</span><span class="params">($nums)</span></span></div><div class="line">&#123;</div><div class="line">    $maxNum = max($nums);</div><div class="line">    $wei = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>($exp =<span class="number">1</span> ; intval(($maxNum/$exp ))&gt; <span class="number">0</span>; $exp*=<span class="number">10</span> )</div><div class="line">    &#123;</div><div class="line">    $nums = countSort($nums,$exp);</div><div class="line">    var_dump($nums);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">countSort</span><span class="params">($nums,$exp)</span></span></div><div class="line">&#123;</div><div class="line"></div><div class="line"><span class="keyword">for</span> ($i=<span class="number">0</span>; $i &lt; <span class="number">10</span>; $i++) &#123; </div><div class="line">$count[$i] = <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line">    <span class="keyword">for</span>($i = <span class="number">0</span>; $i&lt; count($nums); $i++)</div><div class="line">    &#123;</div><div class="line">    $key = intval(($nums[$i]/$exp)%<span class="number">10</span>);</div><div class="line">    $count[intval(($nums[$i]/$exp)%<span class="number">10</span>)]++;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>($i = <span class="number">1</span>; $i &lt; <span class="number">10</span>; $i++)</div><div class="line">    &#123;</div><div class="line">    $count[$i] += $count[$i - <span class="number">1</span>];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>($i = count($nums)<span class="number">-1</span>; $i &gt;= <span class="number">0</span>; $i--)</div><div class="line">    &#123;</div><div class="line">    $output[$count[intval(($nums[$i]/$exp)%<span class="number">10</span>) ] <span class="number">-1</span>] = $nums[$i];</div><div class="line">    $count[intval((($nums[$i]/$exp)%<span class="number">10</span>))]--;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> ($i=<span class="number">0</span>; $i &lt; count($nums) ; $i++) &#123; </div><div class="line">    $nums[$i] = $output[$i];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> $nums;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$a = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">12</span>,<span class="number">412</span>,<span class="number">534</span>,<span class="number">122</span>];</div><div class="line"></div><div class="line">radixsort($a);</div></pre></td></tr></table></figure><h2 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h2><p>以最大堆为例，最大堆就是一个特殊二叉树，父节点大于子节点。<br>当前算法是以层序遍历，将二叉树存入数组中。</p><ul><li>堆排序每次把处于堆顶的最大值取出</li><li>然后对堆进行排序</li><li>一次循环，直至堆变为0</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="comment">// echo number_format(100000.5)."\n";</span></div><div class="line"><span class="comment">// echo number_format("100000.5",2)."\n";</span></div><div class="line"><span class="comment">// echo number_format(100000.5,1,".","");</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">heapSort</span><span class="params">($nums)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">//将数组划转为堆(依赖数组实现的堆)</span></div><div class="line">    $n = count($nums);</div><div class="line">    <span class="keyword">for</span>($i = intval($n/<span class="number">2</span>) <span class="number">-1</span> ; $i &gt;= <span class="number">0</span>; $i--)</div><div class="line">    &#123;</div><div class="line">        heapify($nums, $n, $i);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">for</span>($i = $n<span class="number">-1</span>; $i &gt;= <span class="number">0</span>; $i--)</div><div class="line">    &#123;</div><div class="line">    $tmp = $nums[<span class="number">0</span>];</div><div class="line">    $nums[<span class="number">0</span>] = $nums[$i] ;</div><div class="line">    $nums[$i] = $tmp;</div><div class="line">    heapify($nums, $i, <span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    var_dump($nums);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">heapify</span><span class="params">(&amp;$nums, $n, $i)</span></span></div><div class="line">&#123;</div><div class="line">    $largest = $i;</div><div class="line">    $l = $i * <span class="number">2</span> +<span class="number">1</span>;</div><div class="line">    $r = $i * <span class="number">2</span> +<span class="number">2</span>;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>($l &lt; $n &amp;&amp; $nums[$largest] &lt; $nums[$l])</div><div class="line">    &#123;</div><div class="line">    $largest = $l;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>($r &lt; $n &amp;&amp; $nums[$largest] &lt; $nums[$r])</div><div class="line">    &#123;</div><div class="line">    $largest = $r;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>($largest != $i)</div><div class="line">    &#123;</div><div class="line">    $tmp = $nums[$i];</div><div class="line">    $nums[$i] = $nums[$largest];</div><div class="line">    $nums[$largest] = $tmp;</div><div class="line"></div><div class="line">    heapify($nums, $n, $largest);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$a = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">12</span>,<span class="number">412</span>,<span class="number">534</span>,<span class="number">122</span>,<span class="number">534</span>,<span class="number">0</span>,<span class="number">77</span>,<span class="number">88</span>,<span class="number">99</span>,<span class="number">78</span>,<span class="number">56</span>,<span class="number">35</span>,<span class="number">34</span>,<span class="number">1</span>];</div><div class="line"></div><div class="line">heapSort($a);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="桶排序"><a href="#桶排序" class="headerlink" title="桶排序"></a>桶排序</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"> </div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;快速排序（快拍）&quot;&gt;&lt;a href=&quot;#快速排序（快拍）&quot; class=&quot;headerlink&quot; title=&quot;快速排序（快拍）&quot;&gt;&lt;/a&gt;快速排序（快拍）&lt;/h2&gt;&lt;p&gt;快速排序的思想是分治，平均时间复杂度O(nlogn)，当然快速排序的时间复杂度并不是稳定的，
      
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>websocket订阅火币成交记录</title>
    <link href="http://yoursite.com/2018/06/19/websocket%E8%AE%A2%E9%98%85%E7%81%AB%E5%B8%81%E6%88%90%E4%BA%A4%E8%AE%B0%E5%BD%95/"/>
    <id>http://yoursite.com/2018/06/19/websocket订阅火币成交记录/</id>
    <published>2018-06-19T10:15:57.000Z</published>
    <updated>2019-02-20T16:25:46.459Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python3"><a href="#python3" class="headerlink" title="python3"></a>python3</h1><h2 id="单线程："><a href="#单线程：" class="headerlink" title="单线程："></a>单线程：</h2><h3 id="文件一："><a href="#文件一：" class="headerlink" title="文件一："></a>文件一：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"><span class="comment">#author: maxie_lj</span></div><div class="line"><span class="keyword">import</span> _thread</div><div class="line"><span class="keyword">from</span> websocket <span class="keyword">import</span> create_connection</div><div class="line"><span class="keyword">from</span> mysqlOpertion <span class="keyword">import</span> connect_mysql</div><div class="line"><span class="keyword">import</span> gzip</div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">import</span> json</div><div class="line"></div><div class="line"><span class="comment"># 链接</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">connect</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">while</span>(<span class="number">1</span>):</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            print(<span class="string">''</span>)</div><div class="line">            <span class="comment"># 挂代理</span></div><div class="line">            ws = create_connection(<span class="string">"wss://www.huobi.br.com/-/s/pro/ws"</span>)</div><div class="line">            <span class="comment">#print('链接成功')</span></div><div class="line">            <span class="keyword">return</span> ws</div><div class="line">            <span class="keyword">break</span></div><div class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> err:</div><div class="line">            <span class="comment">#print(err)</span></div><div class="line">            <span class="comment">#print('connect ws error,retry...')</span></div><div class="line">            time.sleep(<span class="number">1</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getsubconfig</span><span class="params">()</span>:</span></div><div class="line">    <span class="comment"># 统计参数</span></div><div class="line">    tradeStr=[</div><div class="line">              <span class="string">"""&#123;"sub": "market.elfusdt.trade.detail","id": "id1"&#125;"""</span>,</div><div class="line">              <span class="string">"""&#123;"sub": "market.btcusdt.trade.detail","id": "id2"&#125;"""</span>,</div><div class="line">              <span class="string">"""&#123;"sub": "market.htusdt.trade.detail","id": "id3"&#125;"""</span>,</div><div class="line">              <span class="string">"""&#123;"sub": "market.swftcbtc.trade.detail","id": "id4"&#125;"""</span>,</div><div class="line">              <span class="string">"""&#123;"sub": "market.topcbtc.trade.detail","id": "id6"&#125;"""</span>,</div><div class="line">              <span class="string">"""&#123;"sub": "market.bchusdt.trade.detail","id": "id7"&#125;"""</span>,</div><div class="line">              <span class="string">"""&#123;"sub": "market.ethusdt.trade.detail","id": "id8"&#125;"""</span>,</div><div class="line">              <span class="string">"""&#123;"sub": "market.etcusdt.trade.detail","id": "id9"&#125;"""</span>,</div><div class="line">              <span class="string">"""&#123;"sub": "market.eosusdt.trade.detail","id": "id9"&#125;"""</span>,</div><div class="line">              <span class="string">"""&#123;"sub": "market.ltcusdt.trade.detail","id": "id9"&#125;"""</span></div><div class="line">              ]</div><div class="line">    <span class="keyword">return</span> tradeStr</div><div class="line"></div><div class="line"><span class="comment"># 订阅</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">sub</span><span class="params">(ws,tradeStr)</span>:</span></div><div class="line">    ws.send(tradeStr)</div><div class="line"></div><div class="line"><span class="comment"># 获取返回</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getResponse</span><span class="params">(ws,tradeStr)</span>:</span></div><div class="line">    db = connect_mysql.connect()</div><div class="line">    <span class="keyword">while</span> <span class="number">1</span> :</div><div class="line">        <span class="keyword">try</span> :</div><div class="line">            compressData=ws.recv()</div><div class="line">        <span class="keyword">except</span> Exception :</div><div class="line">            <span class="comment">#print('链接异常')</span></div><div class="line">            run(tradeStr,<span class="number">1</span>)</div><div class="line">        <span class="keyword">try</span> :</div><div class="line">            result=gzip.decompress(compressData).decode(<span class="string">'utf-8'</span>)</div><div class="line">        <span class="keyword">except</span>:</div><div class="line">            <span class="comment">#print('丢包解析异常')</span></div><div class="line">            <span class="keyword">continue</span></div><div class="line">        <span class="keyword">if</span> result[:<span class="number">7</span>] == <span class="string">'&#123;"ping"'</span>:</div><div class="line">            ts=result[<span class="number">8</span>:<span class="number">21</span>]</div><div class="line">            <span class="comment">#print('心跳包',ts)</span></div><div class="line">            pong=<span class="string">'&#123;"pong":'</span>+ts+<span class="string">'&#125;'</span></div><div class="line">            ws.send(pong)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">if</span> result[:<span class="number">5</span>] == <span class="string">'&#123;"ch"'</span>:</div><div class="line">                result = json.loads(result)</div><div class="line">                <span class="comment">#print(result)</span></div><div class="line">                <span class="comment">#print('------------------------------------------------------')</span></div><div class="line">                n = <span class="number">0</span></div><div class="line">                <span class="keyword">while</span> n &lt; len(result[<span class="string">'tick'</span>][<span class="string">'data'</span>]) :</div><div class="line">                    connect_mysql.commit(<span class="string">'%s'</span> % result[<span class="string">'ch'</span>].split(<span class="string">'.'</span>)[<span class="number">1</span>],result[<span class="string">'tick'</span>][<span class="string">'data'</span>][n][<span class="string">'price'</span>],result[<span class="string">'tick'</span>][<span class="string">'data'</span>][n][<span class="string">'amount'</span>],<span class="string">"'%s'"</span> % result[<span class="string">"tick"</span>][<span class="string">"data"</span>][n][<span class="string">"direction"</span>], <span class="string">"'%s'"</span> % result[<span class="string">'ch'</span>].split(<span class="string">'.'</span>)[<span class="number">1</span>],db);</div><div class="line">                    n += <span class="number">1</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">subCoin</span><span class="params">(tradeStr)</span>:</span></div><div class="line">    ws=connect()</div><div class="line">    sub(ws,tradeStr)</div><div class="line">    getResponse(ws,tradeStr)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(tradeStr,test)</span>:</span></div><div class="line">    subCoin(tradeStr)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">    tradeStr=getsubconfig()</div><div class="line">    <span class="keyword">try</span> :</div><div class="line">        tradeStr = getsubconfig()</div><div class="line">        i = <span class="number">0</span></div><div class="line">        <span class="keyword">while</span> i &lt; len(tradeStr) :</div><div class="line">            _thread.start_new_thread( run, (tradeStr[i],i) )</div><div class="line">            i += <span class="number">1</span></div><div class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> err :</div><div class="line">        print(err)</div><div class="line">    <span class="keyword">while</span> <span class="number">1</span>:</div><div class="line">        <span class="keyword">pass</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    main()</div></pre></td></tr></table></figure><h1 id="多线程版本："><a href="#多线程版本：" class="headerlink" title="多线程版本："></a>多线程版本：</h1><h2 id="文件一：-1"><a href="#文件一：-1" class="headerlink" title="文件一："></a>文件一：</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"><span class="comment">#author: maxie_lj</span></div><div class="line"><span class="keyword">import</span> _thread</div><div class="line"><span class="keyword">from</span> websocket <span class="keyword">import</span> create_connection</div><div class="line"><span class="keyword">from</span> test1 <span class="keyword">import</span> connect_mysql</div><div class="line"><span class="keyword">import</span> gzip</div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">import</span> json</div><div class="line"></div><div class="line"><span class="comment"># 链接数据库</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">connect</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">while</span>(<span class="number">1</span>):</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            ws = create_connection(<span class="string">"wss://www.huobi.br.com/-/s/pro/ws"</span>)</div><div class="line">            <span class="comment"># print('链接成功')</span></div><div class="line">            <span class="keyword">return</span> ws</div><div class="line">            <span class="keyword">break</span></div><div class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> err:</div><div class="line">            print(err)</div><div class="line">            <span class="comment">#print('connect ws error,retry...')</span></div><div class="line">            time.sleep(<span class="number">1</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getsubconfig</span><span class="params">()</span>:</span></div><div class="line">    <span class="comment"># 统计参数</span></div><div class="line">    tradeStr=[</div><div class="line">              <span class="string">"""&#123;"sub": "market.elfusdt.trade.detail"&#125;"""</span>,</div><div class="line">              <span class="string">"""&#123;"sub": "market.btcusdt.trade.detail"&#125;"""</span>,</div><div class="line">              <span class="string">"""&#123;"sub": "market.htusdt.trade.detail"&#125;"""</span>,</div><div class="line">              <span class="string">"""&#123;"sub": "market.swftcbtc.trade.detail"&#125;"""</span>,</div><div class="line">              <span class="string">"""&#123;"sub": "market.topcbtc.trade.detail"&#125;"""</span>,</div><div class="line">              <span class="string">"""&#123;"sub": "market.bchusdt.trade.detail"&#125;"""</span>,</div><div class="line">              <span class="string">"""&#123;"sub": "market.ethusdt.trade.detail"&#125;"""</span>,</div><div class="line">              <span class="string">"""&#123;"sub": "market.etcusdt.trade.detail"&#125;"""</span>,</div><div class="line">              <span class="string">"""&#123;"sub": "market.eosusdt.trade.detail"&#125;"""</span>,</div><div class="line">              <span class="string">"""&#123;"sub": "market.ltcusdt.trade.detail"&#125;"""</span></div><div class="line">              ]</div><div class="line">    <span class="keyword">return</span> tradeStr</div><div class="line"></div><div class="line"><span class="comment"># 订阅</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">sub</span><span class="params">(ws,tradeStr)</span>:</span></div><div class="line">    ws.send(tradeStr)</div><div class="line"></div><div class="line"><span class="comment"># 获取返回</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getResponse</span><span class="params">(ws)</span>:</span></div><div class="line">    db = connect_mysql.connect()</div><div class="line">    <span class="keyword">while</span> <span class="number">1</span> :</div><div class="line">        <span class="keyword">try</span> :</div><div class="line">            compressData=ws.recv()</div><div class="line">        <span class="keyword">except</span> Exception :</div><div class="line">            ws=connect()</div><div class="line">            subCoin(ws)</div><div class="line">            print(<span class="string">'链接异常'</span>)</div><div class="line">        <span class="keyword">try</span> :</div><div class="line">            result=gzip.decompress(compressData).decode(<span class="string">'utf-8'</span>)</div><div class="line">        <span class="keyword">except</span>:</div><div class="line">            print(<span class="string">'丢包解析异常'</span>)</div><div class="line">            <span class="keyword">continue</span></div><div class="line">        <span class="keyword">if</span> result[:<span class="number">7</span>] == <span class="string">'&#123;"ping"'</span>:</div><div class="line">            ts=result[<span class="number">8</span>:<span class="number">21</span>]</div><div class="line">            <span class="comment">#print('心跳包',ts)</span></div><div class="line">            pong=<span class="string">'&#123;"pong":'</span>+ts+<span class="string">'&#125;'</span></div><div class="line">            ws.send(pong)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">if</span> result[:<span class="number">5</span>] == <span class="string">'&#123;"ch"'</span>:</div><div class="line">                result = json.loads(result)</div><div class="line">                print(result)</div><div class="line">                <span class="comment">#print('------------------------------------------------------')</span></div><div class="line">                n = <span class="number">0</span></div><div class="line">                <span class="keyword">while</span> n &lt; len(result[<span class="string">'tick'</span>][<span class="string">'data'</span>]) :</div><div class="line">                    connect_mysql.commit(<span class="string">'%s'</span> % result[<span class="string">'ch'</span>].split(<span class="string">'.'</span>)[<span class="number">1</span>],result[<span class="string">'tick'</span>][<span class="string">'data'</span>][n][<span class="string">'price'</span>],result[<span class="string">'tick'</span>][<span class="string">'data'</span>][n][<span class="string">'amount'</span>],<span class="string">"'%s'"</span> % result[<span class="string">"tick"</span>][<span class="string">"data"</span>][n][<span class="string">"direction"</span>], <span class="string">"'%s'"</span> % result[<span class="string">'ch'</span>].split(<span class="string">'.'</span>)[<span class="number">1</span>],db);</div><div class="line">                    n += <span class="number">1</span></div><div class="line"></div><div class="line"><span class="comment"># 订阅</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">subCoin</span><span class="params">(ws)</span>:</span></div><div class="line">    tradeStr=getsubconfig()</div><div class="line">    i = <span class="number">0</span></div><div class="line">    <span class="keyword">while</span> i &lt; len(tradeStr) :</div><div class="line">            sub(ws,tradeStr[i])</div><div class="line">            i += <span class="number">1</span></div><div class="line"><span class="comment"># 主函数</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">    ws=connect()</div><div class="line">    subCoin(ws)</div><div class="line">    getResponse(ws)</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    main()</div></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">### 文件二:</span></div><div class="line"></div><div class="line">```python</div><div class="line"><span class="keyword">import</span> json</div><div class="line"><span class="keyword">import</span> pymysql</div><div class="line"><span class="keyword">import</span> time</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">connect_mysql</span><span class="params">()</span>:</span></div><div class="line">    db = <span class="string">''</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">connect</span><span class="params">()</span> :</span></div><div class="line">            db = connect_mysql.db = pymysql.connect(<span class="string">"localhost"</span>, <span class="string">"root"</span>, <span class="string">"root"</span>, <span class="string">"huobi"</span>, charset=<span class="string">'utf8'</span> )</div><div class="line">            <span class="keyword">return</span> db</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">commit</span><span class="params">(table, price, amount, action, coin_type, db)</span> :</span></div><div class="line"></div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            cursor = db.cursor()</div><div class="line">            sql = <span class="string">"INSERT INTO %s_success_order(action,order_amount, price, coin_type)VALUES (%s, %.10f, %.10f,%s )"</span> % (table,action, amount, price,coin_type )</div><div class="line">            cursor.execute(sql)</div><div class="line">           <span class="comment"># 提交到数据库执行</span></div><div class="line">            db.commit()</div><div class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</div><div class="line">            db = connect_mysql.db = pymysql.connect(<span class="string">"localhost"</span>, <span class="string">"root"</span>, <span class="string">"root"</span>, <span class="string">"huobi"</span>, charset=<span class="string">'utf8'</span> )</div><div class="line">            commit(table, price, amount, action, coin_type, db)</div><div class="line">        <span class="keyword">return</span></div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">connect_close</span><span class="params">()</span> :</span></div><div class="line">        connect_mysql.db.close()</div></pre></td></tr></table></figure><p>文件二是单线程和多线程版的公用文件</p><h1 id="shell-脚本"><a href="#shell-脚本" class="headerlink" title="shell 脚本"></a>shell 脚本</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line">total=1</div><div class="line">avaliable=`ps -ef | grep -w huobi.py | grep -v grep | wc -l`</div><div class="line">diff=`expr $total - $avaliable`</div><div class="line">#echo $diff &gt;&gt; /home/script/diff.text</div><div class="line">#echo $total &gt;&gt; /home/script/diff.text</div><div class="line">#echo $avaliable &gt;&gt; /home/script/diff.text</div><div class="line">if [ $diff -gt 0 ];then</div><div class="line">        for((i=0;i&lt;$diff;i++));do</div><div class="line">                 /usr/local/bin/python3 /home/script/huobi.py &gt;&gt; /home/script/huobi.out</div><div class="line">        done</div><div class="line">fi</div></pre></td></tr></table></figure><h1 id="crontab-配置"><a href="#crontab-配置" class="headerlink" title="crontab 配置"></a>crontab 配置</h1><figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">MAILTO=<span class="string">""</span></div><div class="line"></div><div class="line">* * * * * sudo /bin/bash /home/script/huobi.sh</div></pre></td></tr></table></figure><p><strong>注意事项</strong>：<br>在写shell脚本时，尽量用绝对路径。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;python3&quot;&gt;&lt;a href=&quot;#python3&quot; class=&quot;headerlink&quot; title=&quot;python3&quot;&gt;&lt;/a&gt;python3&lt;/h1&gt;&lt;h2 id=&quot;单线程：&quot;&gt;&lt;a href=&quot;#单线程：&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
      <category term="折腾" scheme="http://yoursite.com/categories/%E6%8A%98%E8%85%BE/"/>
    
    
      <category term="折腾" scheme="http://yoursite.com/tags/%E6%8A%98%E8%85%BE/"/>
    
  </entry>
  
  <entry>
    <title>数据库-索引的使用优化</title>
    <link href="http://yoursite.com/2018/06/15/%E6%95%B0%E6%8D%AE%E5%BA%93-%E7%B4%A2%E5%BC%95%E4%BD%BF%E7%94%A8%E4%BC%98%E5%8C%96/"/>
    <id>http://yoursite.com/2018/06/15/数据库-索引使用优化/</id>
    <published>2018-06-15T07:10:57.000Z</published>
    <updated>2019-02-21T03:49:34.713Z</updated>
    
    <content type="html"><![CDATA[<p>数据库索引使用的优化</p><h2 id="索引的选择"><a href="#索引的选择" class="headerlink" title="索引的选择"></a>索引的选择</h2><h3 id="B-tree"><a href="#B-tree" class="headerlink" title="B-tree"></a>B-tree</h3><p>特点：</p><ul><li><code>B-tree</code>索引用<code>B+tree</code>实现，</li><li>适合范围查找</li><li>适合精确查找</li></ul><h4 id="使用注意"><a href="#使用注意" class="headerlink" title="使用注意"></a>使用注意</h4><p>创建索引（user_name,user_num,city）。</p><ul><li>全值匹配，查询条件包括user_name、user_num、city全部条件。</li><li><strong>最左匹配</strong>，有限匹配最左索引列，上述所以可以匹配（user_name）、（user_name,user_num）、（user_name,user_num，city）这样的查询条件，但是如果我们使用（user_num,city）则无法使用用索引。如果使用(user_name,city)查询条件，则只会使用user_name索引，这就是最左匹配原则。</li><li>可匹配列前缀，例如：user_name like ‘li%’.</li><li>可用作范围查询，例如(user_name= ‘li’ and user_num &gt; 20)</li><li><strong>联合索引</strong>，建立索引时，经常使用的列优先，辨识度高的索引放前边，长度小的优先。</li><li><strong>如果可以使用联合索引</strong>，可以减少磁盘io</li><li><strong>不要建立过多的索引</strong>，这样会影响mysql的写入和更新，尽量扩展建立联合索引，不要增加索引。</li><li>如何可以使用前缀索引。</li></ul><h4 id="无法使用索引的情况"><a href="#无法使用索引的情况" class="headerlink" title="无法使用索引的情况"></a>无法使用索引的情况</h4><ul><li>无最左匹配列的情况，例如(user_num,city)这样的查询条件。</li><li>使用列列后缀匹配，例如user_name like  ‘%jian’</li><li>如果某一列使用范围查询，则后续列无法继续使用索引。例如 user_name = ‘lijian’ and user_num &gt; 20 and city = ‘郑州’，city 列是无法使用索引的。</li><li>查询时，不要对索引使用函数 例如:<code>SELECT * FROM user_test WHERE user_name = concat(user_name, &#39;fei&#39;)</code></li><li>索引不参与计算，如果索引列参与计算不走索引</li><li>字符串与数字比较不走索引。</li></ul><h2 id="mysql不支持hash索引"><a href="#mysql不支持hash索引" class="headerlink" title="mysql不支持hash索引"></a>mysql不支持hash索引</h2><p>贴上一份官方文档：<br><a href="https://dev.mysql.com/doc/refman/5.7/en/innodb-introduction.html" target="_blank" rel="noopener">mysql官方介绍inndb</a></p><p><img src="/photo/img/数据库索引使用优化/picture1.png" alt="image"></p><p>很明显，mysql是不支持hash索引的。innodb内部会根据表的使用支持自适应hash索引优化，所以无法认为建立。<br>当然建表语句还是有的，如下。<br>查看一下表的建表语句：<br><img src="/photo/img/数据库索引使用优化/picture2.png" alt="image"><br>这个时候可以发现，建立语句里还是有hash的。</p><p>但是执行<code>show index from cm_deposit_order</code>可以返现其实使用hash的索引还是Btree.</p><p><img src="/photo/img/数据库索引使用优化/picture3.png" alt="image"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;数据库索引使用的优化&lt;/p&gt;
&lt;h2 id=&quot;索引的选择&quot;&gt;&lt;a href=&quot;#索引的选择&quot; class=&quot;headerlink&quot; title=&quot;索引的选择&quot;&gt;&lt;/a&gt;索引的选择&lt;/h2&gt;&lt;h3 id=&quot;B-tree&quot;&gt;&lt;a href=&quot;#B-tree&quot; class=&quot;he
      
    
    </summary>
    
      <category term="数据库" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="数据库" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>数据库-explain</title>
    <link href="http://yoursite.com/2018/05/29/%E6%95%B0%E6%8D%AE%E5%BA%93-explain%E6%89%A7%E8%A1%8C%E8%AE%A1%E5%88%92/"/>
    <id>http://yoursite.com/2018/05/29/数据库-explain执行计划/</id>
    <published>2018-05-29T07:18:29.000Z</published>
    <updated>2019-04-14T14:52:18.106Z</updated>
    
    <content type="html"><![CDATA[<h2 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h2><p>使用<code>explain</code>可以分析sql的执行情况，定位慢sql的问题，从而可优化查询语句。<br><code>explain的官方文档</code><br><a href="https://dev.mysql.com/doc/refman/5.5/en/explain-output.html" target="_blank" rel="noopener">explain的官方文档</a></p><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>使用方法，在select前加上<strong>explain</strong>即可。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> cm_car_dealer <span class="keyword">where</span> car_dealer <span class="keyword">id</span> &gt; <span class="number">56</span></div></pre></td></tr></table></figure><p>结果如图，会涉及到多个字段。</p><p><img src="/photo/img/数据库-explain/explain1.png" alt="执行结果"></p><table><thead><tr><th>参数</th><th style="text-align:right">结果</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td>id</td><td style="text-align:right">1</td><td style="text-align:center">第几个执行的语句</td></tr><tr><td>select_type</td><td style="text-align:right">SIMPLE</td><td style="text-align:center">查询类型）</td></tr><tr><td>table</td><td style="text-align:right">cm_car_dealer</td><td style="text-align:center">表示从哪张表获取的数据</td></tr><tr><td>type</td><td style="text-align:right">range</td><td style="text-align:center">区间索引</td></tr><tr><td>possible_keys</td><td style="text-align:right">PRIMARY</td><td style="text-align:center">表示mysql可以使用哪些索引来查到这条记录</td></tr><tr><td>key</td><td style="text-align:right">PRIMARY</td><td style="text-align:center">实际使用到的索引。如果为NULL，则没有使用索引</td></tr><tr><td>key_len</td><td style="text-align:right">4</td><td style="text-align:center">主键是int型，所以为4.一般来说这个越小越好</td></tr><tr><td>ref</td><td style="text-align:right"></td><td style="text-align:center">表示mysql可以使用哪些索引来查到这条记录</td></tr><tr><td>rows</td><td style="text-align:right">159</td><td style="text-align:center">表示需要遍历多少行才能找到当前数据</td></tr><tr><td>Extra</td><td style="text-align:right">Using where</td><td style="text-align:center">执行状态说明</td></tr></tbody></table><h3 id="id查询的序号"><a href="#id查询的序号" class="headerlink" title="id查询的序号"></a>id查询的序号</h3><p>表示当前查询的序号，其值为数字，表示sql执行的次序。</p><h4 id="id相同"><a href="#id相同" class="headerlink" title="id相同"></a>id相同</h4><p>当id相同时，执行顺序是自上而下的。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> cm_users,cm_car_dealer_certification <span class="keyword">where</span> cm_users.id = cm_car_dealer_certification.car_dealer_id</div></pre></td></tr></table></figure><p><img src="/photo/img/数据库-explain/explain2.png" alt="执行结果"></p><h4 id="id不同"><a href="#id不同" class="headerlink" title="id不同"></a>id不同</h4><p>当id不同时，id序号递增，id越大的越先被执行。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> (<span class="keyword">select</span> * <span class="keyword">from</span> cm_users <span class="keyword">where</span> <span class="keyword">id</span> &gt;<span class="number">14585</span>) <span class="keyword">as</span> a  <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">23213</span></div></pre></td></tr></table></figure><p><img src="/photo/img/数据库-explain/explain3.png" alt="执行结果"></p><h4 id="既有id相同，也有id不同的"><a href="#既有id相同，也有id不同的" class="headerlink" title="既有id相同，也有id不同的"></a>既有id相同，也有id不同的</h4><p>如果既有id相同，也有id不同的。首先按照id由大到小次序执行，如果id相同则执行顺序为由上到下。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">explain</span> <span class="keyword">select</span> d1.id,(<span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> cm_users <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">14585</span>) <span class="keyword">as</span> d2  <span class="keyword">from</span> (<span class="keyword">select</span> * <span class="keyword">from</span> cm_users <span class="keyword">where</span> <span class="keyword">id</span> &gt;<span class="number">1</span> <span class="keyword">and</span> <span class="keyword">id</span> &lt; <span class="number">200</span>) <span class="keyword">as</span> d1 ,cm_car_dealer_certification <span class="keyword">as</span> d3 <span class="keyword">where</span> d1.id =  d3.car_dealer_id</div></pre></td></tr></table></figure><p><img src="/photo/img/数据库-explain/explain4.png" alt="执行结果"></p><h3 id="select-type"><a href="#select-type" class="headerlink" title="select_type"></a>select_type</h3><p>select_type表示查询的类型，主要有普通查询、联合查询、子查询和复杂查询。</p><p>1.simple: 为建单的select查询，查询中不包含子查询或者union<br>2.primary: 查询中包含任何复杂的子部分，最外层查询被标记为primary<br>3.subquert: 在select或者where列表中包含了子查询<br>4.derived: 在from列表中包含的子查询被标记为derived(衍生)，mysql或递归执行这些子查询，把结果放在临时表里<br>5.union:若第二个select出现在union之后，责备标记为union;若union包含在from子句的查询中，外城select将被标记为derived<br>6.union result :union的结果</p><p>单独解释下第六项，如下。<br><img src="/photo/img/数据库-explain/explain5.png" alt="执行结果"></p><h3 id="type"><a href="#type" class="headerlink" title="type"></a>type</h3><p>官方全称为<code>type join</code>意思为<strong>链接类型</strong>，从字面意思很容易误解为两个表的链接，其实并不是这样的。这里更应该理解为数据库引擎查找表的一种方式。《高性能mysql》称呼它为访问类型。是sql查询优化中的一个很重要的指标。</p><p>mysql5.7中type的类型达到了14种之多，这里只对常见的类型进行排序，结果有好到坏顺序为：<br>system &gt; count &gt; eq_ref &gt; ref &gt; fulltext &gt;ref_or_null &gt; index_merge &gt; unique_subquery &gt; index_subquery &gt; range &gt; index &gt; ALL</p><p>好sql的标准是：至少达到range,最好达到ref。从最坏的一一开始介绍。</p><h4 id="ALL"><a href="#ALL" class="headerlink" title="ALL"></a>ALL</h4><p>这既是传说的<strong>扫全表</strong>，例如 <code>select * from cm_users where &#39;name&#39; = &quot;张三&quot;</code>，在<code>cm_users</code> 里<code>name</code>未建立索引，因为<code>name</code>不是唯一的，所以即使mysql找到了名为张三的记录，也不会停下来，因为无法确定时候还有叫张三的。这样就会扫全表全量的数据，并且不是走索引的扫全表。<br>这种情况如果是为了展示全量的数据还好，如果是普通查询查出现了<strong>all</strong>,说明有很大优化空间。</p><h4 id="index"><a href="#index" class="headerlink" title="index"></a>index</h4><p>通过索引<strong>扫全表</strong>，和上边比，半斤八俩，但是通过索引读取的数据有序。</p><h4 id="range"><a href="#range" class="headerlink" title="range"></a>range</h4><p>range指的是，通过索引有范围的扫描,mysqls在找到范围的开始结束节点时，会通过索引链表扫描指定范围的数据。</p><h4 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h4><p>指的是非唯一性索引扫描，扫描当前所选择索引的全量数据，找到满足条件的所有数据，这里是所有数据，因为索引是非唯一，所以mysql需要扫描全量的索引。</p><p>例如<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> cm_users <span class="keyword">where</span> created_at = <span class="string">'2019-01-29 00:00:00'</span>;</div></pre></td></tr></table></figure></p><h4 id="eq-ref"><a href="#eq-ref" class="headerlink" title="eq_ref"></a>eq_ref</h4><p>唯一性索引查找，对于每个索引，表中只有一条记录与之匹配。常见于主键或唯一索引。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> cm_users <span class="keyword">where</span> ucid = <span class="number">1083396207893549056</span></div><div class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> cm_users <span class="keyword">where</span> created_at=<span class="string">'2019-01-11 00:12:39'</span></div></pre></td></tr></table></figure><p><img src="/photo/img/数据库-explain/explain6.png" alt="执行结果"><br><img src="/photo/img/数据库-explain/explain7.png" alt="执行结果"></p><h4 id="const"><a href="#const" class="headerlink" title="const"></a>const</h4><p>eg:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> cm_users <span class="keyword">where</span> <span class="keyword">id</span>  = <span class="number">423358</span></div></pre></td></tr></table></figure></p><p><img src="/photo/img/数据库-explain/explain8.png" alt="执行结果"></p><h4 id="system"><a href="#system" class="headerlink" title="system"></a>system</h4><p>当表里只有一条数据，或者子查询和父查询条件重复时会发生，一般不会出现。</p><p>eg:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> (<span class="keyword">select</span> * <span class="keyword">from</span> cm_users <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">14585</span>) <span class="keyword">as</span> a  <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">14585</span></div></pre></td></tr></table></figure></p><p><img src="/photo/img/数据库-explain/explain9.png" alt="执行结果"></p><h3 id="possible-keys"><a href="#possible-keys" class="headerlink" title="possible_keys"></a>possible_keys</h3><p>查询涉及到的到的字段上如果有索引，则该索引将会被列出来，但不一定被查询实际使用。</p><h3 id="key"><a href="#key" class="headerlink" title="key"></a>key</h3><p>实际使用的索引，如果没有使用索引则为NULL。</p><h3 id="key-len"><a href="#key-len" class="headerlink" title="key_len"></a>key_len</h3><p>表示索引中使用的字节数，查询中使用的索引的长度（最大可能长度），并非实际使用长度，理论上长度越短越好。</p><h3 id="ref-1"><a href="#ref-1" class="headerlink" title="ref"></a>ref</h3><p>显示索引的哪一列被使用了，有时候会是一个常量：表示哪些列或常量被用于用于查找索引列上的值</p><p><img src="/photo/img/数据库-explain/explain10.png" alt="执行结果"></p><h3 id="row"><a href="#row" class="headerlink" title="row"></a>row</h3><p>表示此次查询需要读取的行数。</p><h3 id="extra"><a href="#extra" class="headerlink" title="extra"></a>extra</h3><h4 id="Using-filesort"><a href="#Using-filesort" class="headerlink" title="Using filesort"></a>Using filesort</h4><p>如果使用非索引列进行排序，则<code>extra</code>会展示<code>Using filesort</code><br>eg:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> cm_users <span class="keyword">where</span> created_at &lt; <span class="string">'2019-01-11 00:12:39'</span> <span class="keyword">order</span> <span class="keyword">by</span>  <span class="string">`name`</span> <span class="keyword">limit</span> <span class="number">5</span></div></pre></td></tr></table></figure><p><img src="/photo/img/数据库-explain/explain11.png" alt="执行结果"></p><h4 id="Using-temporary"><a href="#Using-temporary" class="headerlink" title="Using temporary"></a>Using temporary</h4><p>如果mysql 使用临时表保存中间结果，</p><p>eg:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> cm_users <span class="keyword">where</span> created_at &lt; <span class="string">'2019-01-11 00:12:39'</span> <span class="keyword">group</span> <span class="keyword">by</span>  <span class="string">`name`</span> <span class="keyword">limit</span> <span class="number">5</span></div></pre></td></tr></table></figure></p><p><img src="/photo/img/数据库-explain/explain12.png" alt="执行结果"></p><h4 id="Using-index"><a href="#Using-index" class="headerlink" title="Using index"></a>Using index</h4><p>表次此次查询使用了覆盖索引，没有直接访问表的数据行，效率高。如果同时出现了 using where,表明索引用来执行索引键值的查找。如果没有出现using where 表明索引只是用来读取数据。</p><blockquote><p>覆盖索引：当前查询的数据在索引内都存在，则不需要访问数据表即可获取数据。如果要使用覆盖索引不可使用 <code>select *</code>,如果给所字段建立索引则会降低数据库写入更新速度。</p></blockquote><h4 id="Using-where"><a href="#Using-where" class="headerlink" title="Using where"></a>Using where</h4><p>使用了where过滤</p><h4 id="Using-join-buffer"><a href="#Using-join-buffer" class="headerlink" title="Using join buffer"></a>Using join buffer</h4><p>使用了链接缓存</p><h4 id="Impossible-WHERE"><a href="#Impossible-WHERE" class="headerlink" title="Impossible WHERE"></a>Impossible WHERE</h4><p>where永远为不可成立的条件时出现</p><h4 id="distinct"><a href="#distinct" class="headerlink" title="distinct"></a>distinct</h4><p>优化distinct操作，在找到第一个匹配的数据时，停止对同样的值寻找。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;官方文档&quot;&gt;&lt;a href=&quot;#官方文档&quot; class=&quot;headerlink&quot; title=&quot;官方文档&quot;&gt;&lt;/a&gt;官方文档&lt;/h2&gt;&lt;p&gt;使用&lt;code&gt;explain&lt;/code&gt;可以分析sql的执行情况，定位慢sql的问题，从而可优化查询语句。&lt;br&gt;&lt;co
      
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数据库" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>数据库-mysql索引简介</title>
    <link href="http://yoursite.com/2018/04/29/%E6%95%B0%E6%8D%AE%E5%BA%93-%E7%B4%A2%E5%BC%95%E7%AE%80%E4%BB%8B/"/>
    <id>http://yoursite.com/2018/04/29/数据库-索引简介/</id>
    <published>2018-04-29T03:10:15.000Z</published>
    <updated>2020-03-12T13:13:38.350Z</updated>
    
    <content type="html"><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>因为各个数据库的索引机制不尽相同，在此涉及到mysql的两种索引<code>b-tree</code>、<code>hash</code>。</p><blockquote><p>这里所指的所有数据库都是指mysql.</p></blockquote><h2 id="索引的本质"><a href="#索引的本质" class="headerlink" title="索引的本质"></a>索引的本质</h2><p>mysql官方文档对索引的描述：<code>索引</code>是帮助mysql高效获取数据的数据结构。so 索引的本质是<code>数据结构</code>。涉及到查找的时候肯定避不开查找算法，例如<code>顺序查找</code>、<code>二分查找</code>。随着人们对查找性能要求的越来越高就延伸出来了基于树的查找，例如<code>二叉树的查找</code>。当然即使是<code>二叉树的查找</code>也无法满足现在程序对于查找性能的要求，进而出现了基于<code>b-tree</code>、<code>hash</code>的查找。可以分析下查找的演变过程，所有的查找都是基于一定的数据结构，例如最开始<code>顺序查找</code>基于链表、<code>二分查找</code>基于有序链表、<code>二叉树查找</code>基于树。这种为了满足这种<strong>高效小的查询效率</strong>所衍伸出来的数据结构就是<strong>索引</strong>。</p><h2 id="索引的选择"><a href="#索引的选择" class="headerlink" title="索引的选择"></a>索引的选择</h2><p>基于树的查找效率由树的深度决定，所以二叉树是无法满足查询速度的要求，mysql的索引主要使用 <code>b+tree</code>。</p><h3 id="b-tree"><a href="#b-tree" class="headerlink" title="b-tree"></a>b-tree</h3><p><code>b-树</code>（由b-tree翻译过来）也就是b树，是一种路自平衡搜索树。如果我们以一个二元组来表示索引的内容的话（[key,val]）,key表示键值，val表示数据（地址或者主键），则<code>b-树</code>有以下特点。</p><blockquote><p>树的度的定义：每个节点包含子树的个数。</p><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ul><li>所有的键值分布在整个树种（包括叶子节点和非叶子节点）</li><li>任何<strong>key</strong>只会出现一次</li><li>所有的叶子节点必须在同一层次，也就是他们具有相同的深度。</li><li>每个节点里的关键字是有序的（一个结点中的key从左至右非递减排列），当前节点的左右两个指针指向的节点，左指针指向的节点的key小于当前节点，右指针指向的节点的key大于当前节点。</li><li>d&gt;=2,每个节点有n-1个<code>key</code> 和n个指针，d&lt;=n&lt;=2d。</li></ul></blockquote><p>假设b-tree的度为d,高为h，其索引个数为N。则<code>h=logd((n+1)/2)</code>，查找一条数据的渐进复杂度为<code>logdn</code>。由于索引数量n和其高度h程对数关系（实际使用中d一般会大于100），所以即使是key很大，查询效率也会很快，分析可以的出b-tree查找一个最多需要<strong>h-1</strong>次磁盘io。<br>举个栗子一个度为1001，高度为2（不包含根节点）的b-tree可以存储超高10亿的数据，且每个节点如果使用二分查找的话，只需要三次查找就可以查询到所需的数据。</p><h4 id="结构图"><a href="#结构图" class="headerlink" title="结构图"></a>结构图</h4><p><img src="/photo/img/数据库索引/b-tree.png" alt="image"></p><h3 id="b-tree-1"><a href="#b-tree-1" class="headerlink" title="b+tree"></a>b+tree</h3><p>b+tree是是b-tree的升级版，所有的data值存在叶子节点。</p><h4 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h4><ul><li>b+tree树只有叶子节点包含data，非叶子节点只存key与指针</li><li>所有的叶子节点为一个链表</li></ul><h4 id="结构图-1"><a href="#结构图-1" class="headerlink" title="结构图"></a>结构图</h4><p><img src="/photo/img/数据库索引/b+tree.png" alt="image"></p><h2 id="索引原理"><a href="#索引原理" class="headerlink" title="索引原理"></a>索引原理</h2><ul><li>聚簇索引 ：索引和文件为同一个文件。</li><li>非聚簇索引： 索引和数据文件分开的索引。</li></ul><p>MyISAM 和 InnoDb都使用<code>b+tree</code>索引结构，但是底层确实不一样的，MyISAM采用的事非聚簇索引，而innoDB采用的是聚簇索引。</p><h3 id="MyISAM"><a href="#MyISAM" class="headerlink" title="MyISAM"></a>MyISAM</h3><p>MyISAM索引原理 : 采用的费聚簇索引 My-ISAM myi索引文件和myd数据文件分离，索引文件值保存数据记录和指针地址。叶子节点data存执指向数据记录的地址。</p><p><img src="/photo/img/数据库索引/MyISAM.png" alt="image"></p><h3 id="InnoDB"><a href="#InnoDB" class="headerlink" title="InnoDB"></a>InnoDB</h3><h4 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h4><p>InnoDB物理存储文件结构说明：<br>InnoDB以表空间Tablespace(idb文件)结构进行组织，每个Tablespace包含多个Segment段（Segment 分为为叶子节点和飞叶子节点Segment），一个Segment段包含多个Extent,一个Extent占用1M空间且包含64page,innoDB b+tree一个逻辑节点就分配一个屋里Page,一个节点一次io操作。一个page里包含d个Row行数据，行数据包<br>每一个索引是一个b+tree，一个节点是=一个page(16k)。数据会按照16kb切片为page并编号，标号可以通过偏移量（16k*n）找到文件存储地址。且叶子节点为双向链表，数据按主键索引聚簇索，二级索引叶子节点存储主键值，除了覆盖索引其他二级索引都通过主键查找数据。</p><p><img src="/photo/img/数据库索引/InnoDB.png" alt="image"></p><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>InnoDB采用聚簇索引，存储于idb文件里，表数据本身就是主索引，相邻的索引临近存储。叶节点data域保存了完整的数据记录（data(除主键外所有数据）+key(主键)）。也是由于这种方式InnoDB必须建指定主键，如通过没有指定主键则mysql自动选择一个可以唯一表示数据记录的列作为主键。如果这样的列不存在，mysql自动为表生成一个隐含字段（6个字节长整型）作为主键。</p><blockquote><p>mysql所有的辅助索引data存储皆为主键值</p></blockquote><p>结构图<br><img src="/photo/img/数据库索引/InnoDB2.png" alt="image"></p><h4 id="查询流程"><a href="#查询流程" class="headerlink" title="查询流程"></a>查询流程</h4><p>1.索引精确查找<br>确定定位条件, 找到根节点Page No, 根节点读到内存, 逐层向下查找, 读取叶子节点Page,通过 二分查找找到记录或未命中。（select * from user_info where id = 23）</p><p><img src="/photo/img/数据库索引/精确查找.png" alt="image"></p><p>2.索引范围查找<br>读取根节点至内存, 确定索引定位条件id=18, 找到满足条件第一个叶节点<br>, 顺序扫描所有结果, 直到终止条件满足id &gt;=22 （select * from user_info where id &gt;= 18 and id &lt; 22）<br><img src="/photo/img/数据库索引/范围查找.png" alt="image"></p><p>3.全表扫描<br>直接读取叶节点头结点， 顺序扫描， 返回符合条件记录， 到最终节点结束<br>（select * from user_info where name = ‘abc’）</p><p><img src="/photo/img/数据库索引/扫全表.png" alt="image"></p><p>4.二级索引查找<br>建立索引<br>Create table table_x(int id primary key, varchar(64) name,key sec_index(name) )</p><p>如果执行<code>select * from table_x where name = &#39;xxxx&#39;</code></p><p><img src="/photo/img/数据库索引/二级索引查找.png" alt="image"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="mysql为什么选择b-tree"><a href="#mysql为什么选择b-tree" class="headerlink" title="mysql为什么选择b+tree"></a>mysql为什么选择b+tree</h3><p>内存读取和存盘读取不在一个数量级，所以一般内存读取相较于与磁盘io可以忽略不计。一般来说，索引的大小是无法全部存在ram里的so衡量一个索引的优劣可以以磁盘io次数来衡量。这里就可以排除h黑大的红黑树。<br><code>b-tree</code>和<code>b+tree</code>一次检索最多需要查询<strong>h-1</strong>个节点,但是<code>b+tree</code>不存data数据，索引可以存的key更多，这样查询的节点数也就也少，磁盘io也就越少。</p><blockquote><p>详解：Mysql设计利用了磁盘预读原理，将一个B+Tree节点大小设为一个页大小，在新建节点时直接申请一个页的空间，这样就能保证一个节点物理上存储在一个页里，加之计算机存储分配都是按页对齐的，这样就实现了每个Node节点只需要一次I/O操作。(一个物理Page16K)</p></blockquote><p>一般一个key的大小为8b指针的大小也为8b,这样一个page可以存储(16k/16b=1000)条记录，n层数据可以存储k的n次方跳数据，一亿条数据也不过3层而已，可谓非常高效。</p><h3 id="为什么要建立索引"><a href="#为什么要建立索引" class="headerlink" title="为什么要建立索引"></a>为什么要建立索引</h3><p>如<code>全表扫描</code>扫描那样，我们不能保证每次查询都能在前几个page里查询到所需的数据，目标数据越往后，查询效率就越慢，如果有1亿跳数据，数据查询将会慢的恐怕。</p><h3 id="是否索引越多越好"><a href="#是否索引越多越好" class="headerlink" title="是否索引越多越好"></a>是否索引越多越好</h3><p>每一个索引都是一个树，每次插入和删除都可能破坏原有的树，当树破坏是mysql需要重新把树平衡，这会消耗资源，所以索引不宜过多。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h2&gt;&lt;p&gt;因为各个数据库的索引机制不尽相同，在此涉及到mysql的两种索引&lt;code&gt;b-tree&lt;/code&gt;、&lt;code&gt;hash&lt;/code&gt;。
      
    
    </summary>
    
      <category term="数据库" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="数据库" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>数据库隔离级别</title>
    <link href="http://yoursite.com/2018/04/23/%E6%95%B0%E6%8D%AE%E5%BA%93%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB/"/>
    <id>http://yoursite.com/2018/04/23/数据库隔离级别/</id>
    <published>2018-04-23T12:34:25.000Z</published>
    <updated>2019-02-21T03:49:34.715Z</updated>
    
    <content type="html"><![CDATA[<p>SQL标准规范中定义了四种数据库隔离级别。每种隔离级别带来的系统开销是不一样的。通常较低的隔离级别的系统开销会更低，可以执行更高的并发。</p><h2 id="READ-COMMITTED-未提交读"><a href="#READ-COMMITTED-未提交读" class="headerlink" title="READ COMMITTED(未提交读)"></a>READ COMMITTED(未提交读)</h2><p>顾名思义，未提交读隔离级别中，事物的修改即使没有提交，对其他事务也是可见的。事务可以读取为未提交的数据，也成为<code>脏读</code>。READ COMMITED 性能上不会有跟很大的优势，但是却会导致很多的问题，在实际应用中很少使用。</p><p>eg:<br>业务场景支付扣款。当用户统一时刻发生一笔充值500，和一笔扣款200业务时。 扣款读到是未执行的充值事务金额，账户余额500元，但是充值事务回滚了，这种情况下数据出现问题，所以未提交读是一种不可靠的事务。</p><h2 id="READ-COMMITED-提交读"><a href="#READ-COMMITED-提交读" class="headerlink" title="READ COMMITED(提交读)"></a>READ COMMITED(提交读)</h2><p>多数数据库的隔离级是提交读(比如Sql Server , Oracle)，但是mysql不是。<br>提交读的含义是：一个事务只能看到已经提交的事务所做的修改。也就是说事务和事务之前在提交前是相互不可见的。这个级别又称为不可重复读，因为每次读取的结果可能是不一样的。</p><p>eg:<br>当我们拿着银行卡去消费时候，查询到卡里还有2000元，这时准备消费。与此同时这张卡的钱被老婆转账了（已经转出去2000元），当我们在扣款你的时候会提示余额不足。<br>提交读避免了<code>脏读</code>，但是却产生了<code>不可重复读</code>（同一事务内）。</p><h2 id="Repeatable-read-（重复读）"><a href="#Repeatable-read-（重复读）" class="headerlink" title="Repeatable read （重复读）"></a>Repeatable read （重复读）</h2><p>重复读，保证了在同一个事务内读取同一条数据是不变的，但是却无法保证我们读取（同一事务内）同一表里的数据量是一致的。但是却会产生幻读（幻行）。</p><p>例如消费记录表，我们在打印信用卡的消费记录时查询出来只有一条消费记录80（这是另外一个事务无法改变的），但是在我们打印的时候，老婆又消费了1000元（另外一个事务，但是没有对原来的80元进行修改），我们打印出来的结果是两条记录 80 +1000，这就是幻行。</p><h2 id="Serializable-（序列化）"><a href="#Serializable-（序列化）" class="headerlink" title="Serializable （序列化）"></a>Serializable （序列化）</h2><p>Serializable 通过强制事务串行执行避免了欢读。但是Serializable在执行的时候会对每一样的数据都加上锁，会导致大量的超时和锁竞争。只有在数据一致性非常重要，且并发不是很大情况选，可以选用这种隔离级别。</p><h2 id="几个名词"><a href="#几个名词" class="headerlink" title="几个名词"></a>几个名词</h2><h3 id="脏读"><a href="#脏读" class="headerlink" title="脏读"></a>脏读</h3><p>指的是在A事务内，多次读取同一一个数据。与此同时还有另外一个B事务对同一数据进行了修改，但是未提交。这时就会产生事务A两次读取的数据不一致，一个是事务B未执行前的数据，一个是读取事务B未提交的数据。</p><h3 id="不可重复读。"><a href="#不可重复读。" class="headerlink" title="不可重复读。"></a>不可重复读。</h3><p>指的是同一事务内，无法对同一个数据多次读取，因为两次读取可能是不一致的（因为没有对 数据写 加锁）。</p><h3 id="幻读"><a href="#幻读" class="headerlink" title="幻读"></a>幻读</h3><p>幻读是在<code>可重复读</code>的隔离级别下产生的问题。<code>可重复读</code>虽然对数据加写锁，但是却没对表加锁，造成每次读取表的数据量是不一致的，所以又称<code>幻行</code>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;SQL标准规范中定义了四种数据库隔离级别。每种隔离级别带来的系统开销是不一样的。通常较低的隔离级别的系统开销会更低，可以执行更高的并发。&lt;/p&gt;
&lt;h2 id=&quot;READ-COMMITTED-未提交读&quot;&gt;&lt;a href=&quot;#READ-COMMITTED-未提交读&quot; clas
      
    
    </summary>
    
      <category term="数据库" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="数据库" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>算法-螺旋矩阵</title>
    <link href="http://yoursite.com/2018/02/11/%E7%AE%97%E6%B3%95-%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5/"/>
    <id>http://yoursite.com/2018/02/11/算法-螺旋矩阵/</id>
    <published>2018-02-11T12:17:20.000Z</published>
    <updated>2019-02-21T03:49:34.727Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><h3 id="英文"><a href="#英文" class="headerlink" title="英文"></a>英文</h3><p>Given a matrix of m x n elements (m rows, n columns), return all elements of the matrix in spiral order.</p><p>Example 1:</p><p>Input:<br>[<br> [ 1, 2, 3 ],<br> [ 4, 5, 6 ],<br> [ 7, 8, 9 ]<br>]<br>Output: [1,2,3,6,9,8,7,4,5]<br>Example 2:</p><p>Input:<br>[<br>  [1, 2, 3, 4],<br>  [5, 6, 7, 8],<br>  [9,10,11,12]<br>]<br>Output: [1,2,3,4,8,12,11,10,9,5,6,7]</p><h3 id="中文"><a href="#中文" class="headerlink" title="中文"></a>中文</h3><p>给定一个包含 m x n 个元素的矩阵（m 行, n 列），请按照顺时针螺旋顺序，返回矩阵中的所有元素。</p><p>示例 1:</p><p>输入:<br>[<br> [ 1, 2, 3 ],<br> [ 4, 5, 6 ],<br> [ 7, 8, 9 ]<br>]<br>输出: [1,2,3,6,9,8,7,4,5]<br>示例 2:</p><p>输入:<br>[<br>  [1, 2, 3, 4],<br>  [5, 6, 7, 8],<br>  [9,10,11,12]<br>]<br>输出: [1,2,3,4,8,12,11,10,9,5,6,7]</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ul><li>所有走过的节点标记为null</li><li>用turn标记当前走向，如果下一个节点为null或notSet,则调转到下一个方向。</li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">spiralOrder</span><span class="params">($matrix)</span> </span>&#123;</div><div class="line">        $row = count($matrix);</div><div class="line">        <span class="keyword">if</span>($row == <span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">return</span> [];</div><div class="line">        &#125;</div><div class="line">        $columu = count($matrix[<span class="number">1</span>]);</div><div class="line">        $currentpoint = $matrix[<span class="number">0</span>][<span class="number">0</span>];</div><div class="line">        $turn = <span class="number">0</span>;</div><div class="line">        $i = <span class="number">0</span>;</div><div class="line">        $j = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span>(<span class="keyword">isset</span>($currentpoint) &amp;&amp; !is_null($currentpoint))</div><div class="line">        &#123;</div><div class="line">            <span class="comment">//向右</span></div><div class="line">            $ret[] = $currentpoint;</div><div class="line">            $matrix[$i][$j] = <span class="keyword">null</span>;</div><div class="line">            <span class="keyword">if</span>($turn == <span class="number">0</span>)</div><div class="line">            &#123;</div><div class="line">                </div><div class="line">                <span class="keyword">if</span>(<span class="keyword">isset</span>($matrix[$i][$j+<span class="number">1</span>])&amp;&amp;!is_null($matrix[$i][$j+<span class="number">1</span>]))</div><div class="line">                &#123;</div><div class="line">                    $currentpoint = $matrix[$i][$j+<span class="number">1</span>];</div><div class="line">                    $j++;</div><div class="line">                &#125; <span class="keyword">elseif</span>(<span class="keyword">isset</span>($matrix[$i+<span class="number">1</span>][$j])&amp;&amp;!is_null($matrix[$i+<span class="number">1</span>][$j])) &#123;</div><div class="line">                    $currentpoint = $matrix[$i+<span class="number">1</span>][$j];</div><div class="line">                    $i++;</div><div class="line">                    $turn = <span class="number">1</span>;</div><div class="line">                    <span class="keyword">continue</span>;</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    $currentpoint = <span class="keyword">null</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">//向下</span></div><div class="line">            <span class="keyword">if</span>($turn == <span class="number">1</span>)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(<span class="keyword">isset</span>($matrix[$i+<span class="number">1</span>][$j])&amp;&amp;!is_null($matrix[$i+<span class="number">1</span>][$j]))</div><div class="line">                &#123;</div><div class="line">                    $currentpoint = $matrix[$i+<span class="number">1</span>][$j];</div><div class="line">                    $i++;</div><div class="line">                &#125; <span class="keyword">elseif</span>(<span class="keyword">isset</span>($matrix[$i][$j<span class="number">-1</span>])&amp;&amp;!is_null($matrix[$i][$j<span class="number">-1</span>])) &#123;</div><div class="line">                    $currentpoint = $matrix[$i][$j<span class="number">-1</span>];</div><div class="line">                    $j--;</div><div class="line">                    $turn = <span class="number">2</span>;</div><div class="line">                    <span class="keyword">continue</span>;</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    $currentpoint = <span class="keyword">null</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">//向左</span></div><div class="line">            <span class="keyword">if</span>($turn == <span class="number">2</span>)</div><div class="line">            &#123;</div><div class="line"> </div><div class="line">                <span class="keyword">if</span>(<span class="keyword">isset</span>($matrix[$i][$j<span class="number">-1</span>])&amp;&amp;!is_null($matrix[$i][$j<span class="number">-1</span>]))</div><div class="line">                &#123;</div><div class="line">                    $currentpoint = $matrix[$i][$j<span class="number">-1</span>];</div><div class="line">                    $j--;</div><div class="line">                &#125; <span class="keyword">elseif</span>(<span class="keyword">isset</span>($matrix[$i<span class="number">-1</span>][$j])&amp;&amp;!is_null($matrix[$i<span class="number">-1</span>][$j])) &#123;;</div><div class="line">                    $currentpoint = $matrix[$i<span class="number">-1</span>][$j];</div><div class="line">                    $i--;</div><div class="line">                    $turn = <span class="number">3</span>;</div><div class="line">                    <span class="keyword">continue</span>;</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    $currentpoint = <span class="keyword">null</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>($turn == <span class="number">3</span>)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(<span class="keyword">isset</span>($matrix[$i<span class="number">-1</span>][$j])&amp;&amp;!is_null($matrix[$i<span class="number">-1</span>][$j]))</div><div class="line">                &#123;</div><div class="line">                    $currentpoint = $matrix[$i<span class="number">-1</span>][$j];</div><div class="line">                    $i--;</div><div class="line">                &#125; <span class="keyword">elseif</span>(<span class="keyword">isset</span>($matrix[$i][$j+<span class="number">1</span>])&amp;&amp;!is_null($matrix[$i][$j+<span class="number">1</span>])) &#123;</div><div class="line">                    $currentpoint = $matrix[$i][$j+<span class="number">1</span>];</div><div class="line">                    $j++;</div><div class="line">                    $turn = <span class="number">0</span>;</div><div class="line">                    <span class="keyword">continue</span>;</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    $currentpoint = <span class="keyword">null</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> $ret;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;h3 id=&quot;英文&quot;&gt;&lt;a href=&quot;#英文&quot; class=&quot;headerlink&quot; title=&quot;英文&quot;&gt;&lt;/a&gt;英文&lt;/h3&gt;&lt;p&gt;Giv
      
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>算法-全排列-46</title>
    <link href="http://yoursite.com/2018/01/29/%E7%AE%97%E6%B3%95-%E5%85%A8%E6%8E%92%E5%88%97-46/"/>
    <id>http://yoursite.com/2018/01/29/算法-全排列-46/</id>
    <published>2018-01-29T07:18:56.000Z</published>
    <updated>2019-02-26T09:18:45.236Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><h3 id="英文"><a href="#英文" class="headerlink" title="英文"></a>英文</h3><p>Given a collection of distinct integers, return all possible permutations.</p><p>Example:</p><p>Input: [1,2,3]<br>Output:<br>[<br>  [1,2,3],<br>  [1,3,2],<br>  [2,1,3],<br>  [2,3,1],<br>  [3,1,2],<br>  [3,2,1]<br>]</p><h3 id="中文"><a href="#中文" class="headerlink" title="中文"></a>中文</h3><p>给定一个没有重复数字的序列，返回其所有可能的全排列。</p><p>示例:</p><p>输入: [1,2,3]<br>输出:<br>[<br>  [1,2,3],<br>  [1,3,2],<br>  [2,1,3],<br>  [2,3,1],<br>  [3,1,2],<br>  [3,2,1]<br>]</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="思路1"><a href="#思路1" class="headerlink" title="思路1"></a>思路1</h3><ul><li>借鉴之前做的第k个排序</li><li>把所有的排序塞进一个二维数组里</li></ul><h3 id="思路2"><a href="#思路2" class="headerlink" title="思路2"></a>思路2</h3><p>思路一打败了百分之56的人，我觉得还有其他建单的思路。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Return an array of arrays of size *returnSize.</div><div class="line"> * Note: The returned array must be malloced, assume caller calls free().</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">jiecheng</span><span class="params">(<span class="keyword">int</span> n)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> ret = <span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span>(n &gt; <span class="number">0</span>)</div><div class="line">    &#123;</div><div class="line">        ret = ret *n;</div><div class="line">        n--;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span>** <span class="title">permute</span><span class="params">(<span class="keyword">int</span>* nums, <span class="keyword">int</span> numsSize, <span class="keyword">int</span>* returnSize)</span> </span>&#123;</div><div class="line">    *returnSize = jiecheng(numsSize);</div><div class="line">    <span class="comment">//返回的二维数组</span></div><div class="line">    <span class="keyword">int</span>** ret = (<span class="keyword">int</span>**)<span class="built_in">malloc</span>((<span class="keyword">sizeof</span>(<span class="keyword">int</span>*)*(*returnSize)));</div><div class="line">    <span class="comment">//记录头指针</span></div><div class="line">    <span class="keyword">int</span>** current = ret;</div><div class="line">    <span class="comment">//标识进位</span></div><div class="line">    <span class="keyword">int</span>* tmp = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>)*numsSize);</div><div class="line">    tmp[numsSize<span class="number">-1</span>] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = numsSize<span class="number">-2</span>; i&gt;=<span class="number">0</span>; i--)</div><div class="line">    &#123;</div><div class="line">        tmp[i] = tmp[i+<span class="number">1</span>]*(numsSize<span class="number">-1</span>-i);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//标识是否使用</span></div><div class="line">    <span class="keyword">int</span> *flag = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>)*numsSize);</div><div class="line">    <span class="comment">//初始化所有都为0；</span></div><div class="line">    <span class="keyword">int</span> idx = <span class="number">0</span>, t = <span class="number">0</span>, k =<span class="number">0</span>, m = <span class="number">0</span>;</div><div class="line">    <span class="built_in">memset</span>(flag, <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="keyword">int</span>)*numsSize);</div><div class="line">    <span class="comment">//输出每一个组合</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= (*returnSize); i++)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span>* tmp1 = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>)*numsSize); </div><div class="line">        <span class="comment">//初始化</span></div><div class="line">        idx = <span class="number">0</span>, t = <span class="number">0</span>; k = i , m=<span class="number">0</span>;</div><div class="line">        <span class="built_in">memset</span>(flag, <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="keyword">int</span>)*numsSize);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; numsSize; j++)</div><div class="line">        &#123;</div><div class="line">            <span class="comment">//取当前应取数字所在位</span></div><div class="line">            t = (k<span class="number">-1</span>)/tmp[j];</div><div class="line">            <span class="comment">//保留数坐在位置</span></div><div class="line">            idx =t;</div><div class="line">            <span class="keyword">for</span>( m  = <span class="number">0</span>; m &lt; numsSize;m++)</div><div class="line">            &#123;</div><div class="line">                <span class="comment">//寻找最左未使用的数</span></div><div class="line">                <span class="keyword">if</span>(!flag[m])</div><div class="line">                &#123;</div><div class="line">                    t--;</div><div class="line">                    <span class="keyword">if</span>(t == <span class="number">-1</span>)</div><div class="line">                    &#123;</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            tmp1[j] = nums[m];</div><div class="line">            <span class="comment">// printf("m:%d,",m);</span></div><div class="line">            <span class="comment">// printf("j:%d,",j);</span></div><div class="line">            <span class="comment">// printf("%d,",tmp1[j]);</span></div><div class="line">            flag[m] = <span class="number">1</span>;</div><div class="line">            k -= (idx*tmp[j]);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        (*current) = tmp1;</div><div class="line"></div><div class="line">        current++;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;h3 id=&quot;英文&quot;&gt;&lt;a href=&quot;#英文&quot; class=&quot;headerlink&quot; title=&quot;英文&quot;&gt;&lt;/a&gt;英文&lt;/h3&gt;&lt;p&gt;Giv
      
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>算法-最接近的三数之和-16</title>
    <link href="http://yoursite.com/2018/01/28/%E7%AE%97%E6%B3%95-%E6%9C%80%E6%8E%A5%E8%BF%91%E7%9A%84%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C/"/>
    <id>http://yoursite.com/2018/01/28/算法-最接近的三数之和/</id>
    <published>2018-01-28T07:18:49.000Z</published>
    <updated>2019-02-21T03:49:34.722Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><h3 id="英文"><a href="#英文" class="headerlink" title="英文"></a>英文</h3><p>Given an array nums of n integers and an integer target, find three integers in nums such that the sum is closest to target. Return the sum of the three integers. You may assume that each input would have exactly one solution.</p><p>Example:</p><p>Given array nums = [-1, 2, 1, -4], and target = 1.</p><p>The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).</p><h3 id="中文"><a href="#中文" class="headerlink" title="中文"></a>中文</h3><p>给定一个包括 n 个整数的数组 nums 和 一个目标值 target。找出 nums 中的三个整数，使得它们的和与 target 最接近。返回这三个数的和。假定每组输入只存在唯一答案。</p><p>例如，给定数组 nums = [-1，2，1，-4], 和 target = 1.</p><p>与 target 最接近的三个数的和为 2. (-1 + 2 + 1 = 2).</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="原来思路"><a href="#原来思路" class="headerlink" title="原来思路"></a>原来思路</h3><p>与求三数之和相似，先排序再查找最优解，然是时间复杂度由n^3变为n^2。</p><ul><li>排序数组</li><li>定义左右指针 <code>i=key+1</code>、<code>j=size-1</code>，左加右减，寻找最优解（val +$nums[$i]+$nums[$j] == $target）。</li><li>循环节点，重复上述操作寻找最优解。</li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">threeSumClosest</span><span class="params">($nums, $target)</span> </span>&#123;</div><div class="line">        sort($nums);<span class="comment">//排序就不写了。。</span></div><div class="line">        <span class="keyword">foreach</span>($nums <span class="keyword">as</span> $key =&gt; $val)</div><div class="line">        &#123;</div><div class="line">            $i = $key +<span class="number">1</span>;</div><div class="line">            $j = count($nums) <span class="number">-1</span>;</div><div class="line">            <span class="keyword">while</span>($j &gt; $i)</div><div class="line">            &#123;</div><div class="line">                <span class="comment">//如果相等，直接返回。</span></div><div class="line">                <span class="keyword">if</span>($val + $nums[$i] + $nums[$j] == $target)</div><div class="line">                &#123;</div><div class="line">                    <span class="keyword">return</span> $val + $nums[$i] + $nums[$j];</div><div class="line">                &#125;</div><div class="line">                <span class="comment">//获取最优解</span></div><div class="line">                <span class="keyword">if</span>(<span class="keyword">isset</span>($tmp))&#123;</div><div class="line">                    $absv = abs($val + $nums[$i] + $nums[$j] -$target);</div><div class="line">                    <span class="keyword">if</span>($absv &lt; abs($tmp-$target)) &#123;</div><div class="line">                        $tmp = ($val + $nums[$i] + $nums[$j]);</div><div class="line">                    &#125;  </div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    $absv = abs($val + $nums[$i] + $nums[$j] -$target);</div><div class="line">                    $tmp = ($val + $nums[$i] + $nums[$j]);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span>($val + $nums[$i] + $nums[$j] &gt; $target)</div><div class="line">                &#123;</div><div class="line">                    $j--;</div><div class="line">                    <span class="keyword">continue</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span>($val + $nums[$i] + $nums[$j] &lt;$target)</div><div class="line">                &#123;</div><div class="line">                    $i++;</div><div class="line">                    <span class="keyword">continue</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> $tmp;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;h3 id=&quot;英文&quot;&gt;&lt;a href=&quot;#英文&quot; class=&quot;headerlink&quot; title=&quot;英文&quot;&gt;&lt;/a&gt;英文&lt;/h3&gt;&lt;p&gt;Giv
      
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>算法-盛水最多的容器</title>
    <link href="http://yoursite.com/2018/01/28/%E7%AE%97%E6%B3%95-%E7%9B%9B%E6%B0%B4%E6%9C%80%E5%A4%9A%E7%9A%84%E5%AE%B9%E5%99%A8/"/>
    <id>http://yoursite.com/2018/01/28/算法-盛水最多的容器/</id>
    <published>2018-01-28T07:11:20.000Z</published>
    <updated>2019-02-21T03:49:34.726Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><h3 id="英文"><a href="#英文" class="headerlink" title="英文"></a>英文</h3><p><code>11. Container With Most Water</code><br>Given n non-negative integers a1, a2, …, an , where each represents a point at coordinate (i, ai). n vertical lines are drawn such that the two endpoints of line i is at (i, ai) and (i, 0). Find two lines, which together with x-axis forms a container, such that the container contains the most water.</p><p>Note: You may not slant the container and n is at least 2.</p><p><img src="/photo/img/算法-盛水最多的容器/question_11.jpg" alt="image"></p><p>The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.</p><p>Example:</p><p>Input: [1,8,6,2,5,4,8,3,7]<br>Output: 49</p><h3 id="中文"><a href="#中文" class="headerlink" title="中文"></a>中文</h3><p><code>11. 盛最多水的容器</code></p><p>给定 n 个非负整数 a1，a2，…，an，每个数代表坐标中的一个点 (i, ai) 。在坐标内画 n 条垂直线，垂直线 i 的两个端点分别为 (i, ai) 和 (i, 0)。找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。</p><p>说明：你不能倾斜容器，且 n 的值至少为 2。</p><p><img src="/photo/img/算法-盛水最多的容器/question_11.jpg" alt="image"></p><p>图中垂直线代表输入数组 [1,8,6,2,5,4,8,3,7]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为 49。</p><p>示例:</p><p>输入: [1,8,6,2,5,4,8,3,7]<br>输出: 49</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="思路1"><a href="#思路1" class="headerlink" title="思路1"></a>思路1</h3><ul><li>遍历循环，寻找最优解。</li></ul><h3 id="思路2（贪心）"><a href="#思路2（贪心）" class="headerlink" title="思路2（贪心）"></a>思路2（贪心）</h3><ul><li>取数组最左最右作为容器的左右边界。</li><li>将高度较小的的边界不断向内移动，直到找到面积更大的。</li><li>重复第二部操作，直到左右边界重合。</li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxArea</span><span class="params">(<span class="keyword">int</span>* height, <span class="keyword">int</span> heightSize)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(heightSize &lt; <span class="number">2</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> width = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> hight = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; heightSize;i++)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = i+<span class="number">1</span>; j &lt; heightSize; j++)</div><div class="line">        &#123;</div><div class="line">            width = j -i;</div><div class="line">            hight = min(height[i], height[j]);</div><div class="line">            ret = max(ret, (width*hight));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//获取两数最小值</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">min</span><span class="params">(a, b)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> a &gt; b ? b : a;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//获取两数内最大值</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(a, b)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> a &gt; b ? a : b;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><code>优化后代码</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxArea</span><span class="params">(<span class="keyword">int</span>* height, <span class="keyword">int</span> heightSize)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(heightSize &lt; <span class="number">2</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> j = heightSize - <span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span> h = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>(i &lt; j)</div><div class="line">    &#123;</div><div class="line">        h = min(height[i], height[j]);</div><div class="line">        ret  = max(ret, (h*(j-i)));</div><div class="line">        <span class="keyword">if</span>(height[i] &lt; height[j]) i++;</div><div class="line">        <span class="keyword">else</span> j--;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//获取两数最小值</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">min</span><span class="params">(a, b)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> a &gt; b ? b : a;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//获取两数内最大值</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(a, b)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> a &gt; b ? a : b;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;h3 id=&quot;英文&quot;&gt;&lt;a href=&quot;#英文&quot; class=&quot;headerlink&quot; title=&quot;英文&quot;&gt;&lt;/a&gt;英文&lt;/h3&gt;&lt;p&gt;&lt;co
      
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>算法-三数之和</title>
    <link href="http://yoursite.com/2018/01/28/%E7%AE%97%E6%B3%95-%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C/"/>
    <id>http://yoursite.com/2018/01/28/算法-三数之和/</id>
    <published>2018-01-28T04:23:30.000Z</published>
    <updated>2019-02-21T03:49:34.716Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><h3 id="英文"><a href="#英文" class="headerlink" title="英文"></a>英文</h3><p>Given an array nums of n integers, are there elements a, b, c in nums such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.</p><p>Note:</p><p>The solution set must not contain duplicate triplets.</p><p>Example:</p><p>Given array nums = [-1, 0, 1, 2, -1, -4],</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">A solution set <span class="keyword">is</span>:</div><div class="line"><span class="comment">[</span></div><div class="line">  <span class="comment">[-1, 0, 1]</span>,</div><div class="line">  <span class="comment">[-1, -1, 2]</span></div><div class="line">]</div></pre></td></tr></table></figure><h3 id="中文"><a href="#中文" class="headerlink" title="中文"></a>中文</h3><p>给定一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，使得 a + b + c = 0 ？找出所有满足条件且不重复的三元组。</p><p>注意：答案中不可以包含重复的三元组。</p><p>例如, 给定数组 nums = [-1, 0, 1, 2, -1, -4]，</p><p>满足要求的三元组集合为：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">  [<span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>],</div><div class="line">  [<span class="number">-1</span>, <span class="number">-1</span>, <span class="number">2</span>]</div><div class="line">]</div></pre></td></tr></table></figure><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ul><li>对数据进行排序（将三数之和转化为两数之和，减少时间复杂度）</li><li>遍历,取<code>当前节点</code>以及<code>当前节点右边非重复两个值</code>（这里利用双指针），比对三个值的和是否等于0。</li><li>因为比对的结果是0，且除当前节点外的两个节点都大于当前节点，所以如果当前节点大于0，则停止遍历<h3 id="原思路"><a href="#原思路" class="headerlink" title="原思路"></a>原思路</h3>暴力循环寻找最优解，但是时间复杂度变成n^3,会超时。<h3 id="优化思路"><a href="#优化思路" class="headerlink" title="优化思路"></a>优化思路</h3></li><li>首先对数组进行排序（最好快排）</li><li>循环数组，当前节点为i</li><li>定义两个指针 <code>j (j=i+1)</code>、 <code>k (k=numssize-1)</code>,依据条件（nums[j] + nums[j] + nums[k] == 0）遍历寻找最优解。</li><li>如果最小节点i &gt; 0，则无需继续循环。<br>优化后代码时间复杂度由原来的n^3变为n^2</li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="keyword">int</span> *nums, <span class="keyword">int</span> lenNums)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> i, j;</div><div class="line">    <span class="keyword">int</span> tmp;</div><div class="line">    <span class="keyword">int</span> flag = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; lenNums; i++) &#123;</div><div class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; lenNums - <span class="number">1</span>; ++j) &#123;</div><div class="line">            <span class="keyword">if</span> (nums[j + <span class="number">1</span>] &lt; nums[j]) &#123;</div><div class="line">                tmp = nums[j + <span class="number">1</span>];</div><div class="line">                nums[j + <span class="number">1</span>] = nums[j];</div><div class="line">                nums[j] = tmp;</div><div class="line">                flag = <span class="number">0</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (flag == <span class="number">1</span>) &#123;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Return an array of arrays of size *returnSize.</div><div class="line"> * Note: The returned array must be malloced, assume caller calls free().</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">int</span> **<span class="title">threeSum</span><span class="params">(<span class="keyword">int</span> *nums, <span class="keyword">int</span> numsSize, <span class="keyword">int</span> *returnSize)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> i, j, k, m;</div><div class="line">    <span class="keyword">int</span> **ret = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span> ) * (numsSize*(numsSize<span class="number">-1</span>)*(numsSize<span class="number">-2</span>))/<span class="number">6</span>);</div><div class="line">    *returnSize = <span class="number">0</span>;</div><div class="line">    bubbleSort(nums, numsSize);</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; numsSize; i++) &#123;</div><div class="line">        <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; nums[i - <span class="number">1</span>] == nums[i]) &#123;</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(nums[i] &gt; <span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        j = i + <span class="number">1</span>;</div><div class="line">        k = numsSize - <span class="number">1</span>;</div><div class="line">        <span class="keyword">while</span> (k &gt; j) &#123;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (nums[j] + nums[k] + nums[i]== <span class="number">0</span>) &#123;</div><div class="line">                ret[*returnSize] = (<span class="keyword">int</span> *) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>) * <span class="number">3</span>);</div><div class="line">                ret[*returnSize][<span class="number">0</span>] = nums[i];</div><div class="line">                ret[*returnSize][<span class="number">1</span>] = nums[j];</div><div class="line">                ret[*returnSize][<span class="number">2</span>] = nums[k];</div><div class="line">                j++;</div><div class="line">                k--;</div><div class="line">                (*returnSize)++;</div><div class="line">                <span class="keyword">while</span> (j &lt; k &amp;&amp; nums[j] == nums[j - <span class="number">1</span>]) &#123;</div><div class="line">                    j++;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">while</span> (j &lt; k &amp;&amp; nums[k] == nums[k + <span class="number">1</span>]) &#123;</div><div class="line">                    k--;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (nums[j] + nums[k] + nums[i] &gt; <span class="number">0</span>) &#123;</div><div class="line">                k--;</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (nums[j] + nums[k] + nums[i] &lt; <span class="number">0</span>) &#123;</div><div class="line">                j++;</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;h3 id=&quot;英文&quot;&gt;&lt;a href=&quot;#英文&quot; class=&quot;headerlink&quot; title=&quot;英文&quot;&gt;&lt;/a&gt;英文&lt;/h3&gt;&lt;p&gt;Giv
      
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>算法-求两个有序链表的中位数</title>
    <link href="http://yoursite.com/2018/01/27/%E7%AE%97%E6%B3%95-%E6%B1%82%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8%E7%9A%84%E4%B8%AD%E4%BD%8D%E6%95%B0/"/>
    <id>http://yoursite.com/2018/01/27/算法-求两个有序链表的中位数/</id>
    <published>2018-01-27T12:34:22.000Z</published>
    <updated>2019-02-21T03:49:34.724Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><h3 id="英文"><a href="#英文" class="headerlink" title="英文"></a>英文</h3><p><code>4. Median of Two Sorted Arrays</code><br>There are two sorted arrays nums1 and nums2 of size m and n respectively.</p><p>Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).</p><p>You may assume nums1 and nums2 cannot be both empty.</p><p>Example 1:</p><p>nums1 = [1, 3]<br>nums2 = [2]</p><p>The median is 2.0<br>Example 2:</p><p>nums1 = [1, 2]<br>nums2 = [3, 4]</p><p>The median is (2 + 3)/2 = 2.5</p><h3 id="中文"><a href="#中文" class="headerlink" title="中文"></a>中文</h3><p><code>4. 寻找两个有序数组的中位数</code><br>给定两个大小为 m 和 n 的有序数组 nums1 和 nums2。</p><p>请你找出这两个有序数组的中位数，并且要求算法的时间复杂度为 O(log(m + n))。</p><p>你可以假设 nums1 和 nums2 不会同时为空。</p><p>示例 1:</p><p>nums1 = [1, 3]<br>nums2 = [2]</p><p>则中位数是 2.0<br>示例 2:</p><p>nums1 = [1, 2]<br>nums2 = [3, 4]</p><p>则中位数是 (2 + 3)/2 = 2.5</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>一下午，还是没解出来尴尬。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>官方解题思路</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">findMedianSortedArrays</span><span class="params">($nums1, $nums2)</span> </span>&#123;</div><div class="line">        $count1 = count($nums1);</div><div class="line">        $count2 = count($nums2);</div><div class="line">        </div><div class="line">        <span class="comment">//交换$nums1为大一点数组</span></div><div class="line">        <span class="keyword">if</span>($count2 &gt; $count1)</div><div class="line">        &#123;</div><div class="line">            $count1 = $count1 + $count2;</div><div class="line">            $count2 = $count1 - $count2;</div><div class="line">            $count1 = $count1 - $count2;</div><div class="line">            $tmp = $nums1;</div><div class="line">            $nums1 = $nums2;</div><div class="line">            $nums2= $tmp;</div><div class="line">        &#125;</div><div class="line">    </div><div class="line">        $iMin = <span class="number">0</span>;</div><div class="line">        $iMax = $count2;</div><div class="line">        $halfLen = intval((($count1 + $count2 +<span class="number">1</span>)/<span class="number">2</span>)) ;</div><div class="line">        <span class="keyword">while</span>($iMin &lt;= $iMax)</div><div class="line">        &#123;</div><div class="line">            $i = intval((($iMax+$iMin) /<span class="number">2</span>));</div><div class="line">            $j = $halfLen -$i;</div><div class="line">            <span class="keyword">if</span>($i &lt; $iMax &amp;&amp; $nums1[$j<span class="number">-1</span>] &gt; $nums2[$i])</div><div class="line">            &#123;</div><div class="line">                $iMin = $i + <span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>($i &gt; $iMin &amp;&amp; $nums2[$i<span class="number">-1</span>] &gt; $nums1[$j])</div><div class="line">            &#123;</div><div class="line">                $iMax = $i<span class="number">-1</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> &#123;</div><div class="line">                $maxLeft = <span class="number">0</span>;</div><div class="line">                <span class="keyword">if</span>($i == <span class="number">0</span>)&#123;$maxLeft = $nums1[$j<span class="number">-1</span>];&#125;</div><div class="line">                <span class="keyword">elseif</span>($j == <span class="number">0</span>)&#123;$maxLeft =  $nums2[$i<span class="number">-1</span>];&#125;</div><div class="line">                <span class="keyword">else</span>&#123;$maxLeft = max($nums2[$i<span class="number">-1</span>],$nums1[$j<span class="number">-1</span>]);&#125;</div><div class="line">                <span class="keyword">if</span>((($count1 + $count2)%<span class="number">2</span>) == <span class="number">1</span>) &#123;<span class="keyword">return</span> $maxLeft;&#125;</div><div class="line">                $minRight = <span class="number">0</span>;</div><div class="line">                <span class="keyword">if</span>($i == $count2)&#123;$minRight = $nums1[$j];&#125;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>($j == $count1)&#123;$minRight = $nums2[$i];&#125;</div><div class="line">                <span class="keyword">else</span>&#123;$minRight = min($nums1[$j], $nums2[$i]);&#125;</div><div class="line">                </div><div class="line">                <span class="keyword">return</span> ($maxLeft + $minRight)/<span class="number">2</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="number">0.0</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure><p>思路清晰<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">findMedianSortedArrays</span><span class="params">(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span>[] nums2)</span> </span>&#123;</div><div class="line">        <span class="comment">/**</span></div><div class="line">        如果两个数组的中位数 mid1 &lt; mid2, 则说明合并后的中位数位于 num1.right + num2之间</div><div class="line">        否则合并后的中位数位于 nums2.right + nums1 之间 (right 是相对于 mid 而言的) </div><div class="line">        getKth 函数负责找到两个数组合并(假设)后有序的数组中的第 k 个元素, k 从 1 开始计算</div><div class="line">        **/   </div><div class="line">        <span class="keyword">if</span>(nums1.length == <span class="number">0</span> &amp;&amp; nums2.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0.0</span>;</div><div class="line">        <span class="keyword">int</span> m = nums1.length, n = nums2.length;</div><div class="line">        <span class="comment">// l: 合并后数组的左半部分的最后一个数 r: 合并后数组的右半部分的第一个数</span></div><div class="line">        <span class="keyword">int</span> l = (m+n+<span class="number">1</span>) / <span class="number">2</span>; </div><div class="line">        <span class="keyword">int</span> r = (m+n+<span class="number">2</span>) / <span class="number">2</span>;</div><div class="line">        <span class="comment">// 如果 m+n 是奇数 getKth 的返回值是相同的, 是偶数则是合并后数组的中间两个数</span></div><div class="line">        <span class="keyword">if</span>(l == r) <span class="keyword">return</span> getKth(nums1, <span class="number">0</span>, nums2, <span class="number">0</span>, l);</div><div class="line">        <span class="keyword">return</span> (getKth(nums1, <span class="number">0</span>, nums2, <span class="number">0</span>, l) + getKth(nums1, <span class="number">0</span>, nums2, <span class="number">0</span>, r)) / <span class="number">2.0</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">double</span> <span class="title">getKth</span><span class="params">(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span> st1, <span class="keyword">int</span>[] nums2, <span class="keyword">int</span> st2, <span class="keyword">int</span> k)</span> </span>&#123;</div><div class="line">        <span class="comment">// 边界情况, 如果 nums1数组已经穷尽了, 则只能返回 nums2 中的第 k 个元素</span></div><div class="line">        <span class="keyword">if</span>(st1 &gt; nums1.length-<span class="number">1</span>) <span class="keyword">return</span> nums2[st2 + k - <span class="number">1</span>];</div><div class="line">        <span class="keyword">if</span>(st2 &gt; nums2.length-<span class="number">1</span>) <span class="keyword">return</span> nums1[st1 + k - <span class="number">1</span>];</div><div class="line">        <span class="comment">// 边界情况, k = 1 则返回两个数组中最小的那个</span></div><div class="line">        <span class="keyword">if</span>(k == <span class="number">1</span>) <span class="keyword">return</span> Math.min(nums1[st1], nums2[st2]);</div><div class="line">        <span class="comment">// 在 nums1 和 nums2 当前范围内找出 mid1 和 mid2 判断舍弃哪半部分</span></div><div class="line">        <span class="keyword">int</span> mid1 = Integer.MAX_VALUE;</div><div class="line">        <span class="keyword">int</span> mid2 = Integer.MAX_VALUE;</div><div class="line">        <span class="keyword">if</span>(st1 + k/<span class="number">2</span> - <span class="number">1</span> &lt; nums1.length) mid1 = nums1[st1 + k/<span class="number">2</span> - <span class="number">1</span>];</div><div class="line">        <span class="keyword">if</span>(st2 + k/<span class="number">2</span> - <span class="number">1</span> &lt; nums2.length) mid2 = nums2[st2 + k/<span class="number">2</span> - <span class="number">1</span>];</div><div class="line">        <span class="comment">// mid1 &lt; mid2 在 nums1.right 和 nums2 之间搜索, 丢掉 k/2 个数.</span></div><div class="line">        <span class="keyword">if</span>(mid1 &lt; mid2)</div><div class="line">            <span class="keyword">return</span> getKth(nums1, st1 + k/<span class="number">2</span>, nums2, st2, k - k/<span class="number">2</span>);</div><div class="line">        <span class="keyword">else</span></div><div class="line">            <span class="keyword">return</span> getKth(nums1, st1, nums2, st2 + k/<span class="number">2</span>, k - k/<span class="number">2</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>自己思路<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">findMedianSortedArrays</span><span class="params">($nums1, $nums2)</span> </span>&#123;</div><div class="line">        $count1 = count($nums1);</div><div class="line">        $count2 = count($nums2);</div><div class="line">        <span class="comment">//第一个数组为0情况</span></div><div class="line">        <span class="keyword">if</span>($count1 == <span class="number">0</span> ) &#123;</div><div class="line">            <span class="keyword">if</span>($count2%<span class="number">2</span> ==<span class="number">0</span>) &#123;</div><div class="line">                <span class="keyword">return</span> ($nums2[$count2/<span class="number">2</span><span class="number">-1</span>] + $nums2[($count2/<span class="number">2</span>)])/<span class="number">2</span>;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">return</span> $nums2[ceil($count2/<span class="number">2</span>)<span class="number">-1</span>];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//第二个数组为0情况</span></div><div class="line">        <span class="keyword">if</span>($count2 == <span class="number">0</span> ) &#123;</div><div class="line">            <span class="keyword">if</span>($count1%<span class="number">2</span> ==<span class="number">0</span>) &#123;</div><div class="line">                <span class="keyword">return</span> ($nums1[$count1/<span class="number">2</span> <span class="number">-1</span>] + $nums1[($count1/<span class="number">2</span>)])/<span class="number">2</span>;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">return</span> $nums1[ceil($count1/<span class="number">2</span>) <span class="number">-1</span>];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//中位数在两个数组合并以后的位置（从0开始）</span></div><div class="line">        $halfLen = ($count1 + $count2)%<span class="number">2</span> == <span class="number">0</span> ? ($count1 + $count2)/<span class="number">2</span> <span class="number">-1</span> :intval(($count1 + $count2)/<span class="number">2</span>) ;</div><div class="line">        <span class="comment">//交换$nums1为大一点数组</span></div><div class="line">        <span class="keyword">if</span>($count2 &gt; $count1)</div><div class="line">        &#123;</div><div class="line">            $count1 = $count1 + $count2;</div><div class="line">            $count2 = $count1 - $count2;</div><div class="line">            $count1 = $count1 - $count2;</div><div class="line">            $tmp = $nums1;</div><div class="line">            $nums1 = $nums2;</div><div class="line">            $nums2= $tmp;</div><div class="line">        &#125;</div><div class="line">        $ret = <span class="keyword">$this</span>-&gt;Bsearch($nums1, $nums2, <span class="number">0</span>,$count2<span class="number">-1</span>, $halfLen);</div><div class="line">        <span class="keyword">return</span> $ret;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//递归查找</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Bsearch</span><span class="params">($nums1,$nums2,$start,$end,$halfLen)</span></span></div><div class="line">    &#123;</div><div class="line">        </div><div class="line">        <span class="comment">//向下取整中位数</span></div><div class="line">        $mid = intval(($start+$end)/<span class="number">2</span>);</div><div class="line">        $poision = $halfLen - $mid<span class="number">-1</span>;</div><div class="line">        <span class="comment">//这里临界值判断</span></div><div class="line">        <span class="keyword">if</span>($start == $end) &#123;</div><div class="line">            <span class="comment">//偶数个</span></div><div class="line">            <span class="keyword">if</span>((count($nums1)+count($nums2))%<span class="number">2</span>==<span class="number">0</span>)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>($start == <span class="number">0</span> ) </div><div class="line">                &#123;</div><div class="line">                    <span class="keyword">if</span>($nums1[$poision] &lt; $nums2[$mid])&#123;</div><div class="line">                        <span class="keyword">echo</span> <span class="number">1</span>;</div><div class="line">                        <span class="keyword">return</span> ($nums1[$poision] +(<span class="keyword">isset</span>($nums1[$poision+<span class="number">1</span>]) ? min($nums1[$poision+<span class="number">1</span>], $nums2[$mid]) : $nums2[$mid]))/<span class="number">2</span>; </div><div class="line">                    &#125; </div><div class="line">                    <span class="keyword">if</span>($nums1[$poision] &gt; $nums2[$mid])</div><div class="line">                    &#123;</div><div class="line">                        <span class="keyword">echo</span> <span class="number">2</span>;</div><div class="line">                        <span class="keyword">return</span> (($nums1[$poision] + (<span class="keyword">isset</span>($nums1[$poision<span class="number">-1</span>]) ? max($nums1[$poision<span class="number">-1</span>], $nums2[$mid]) : $nums2[$mid]) )/<span class="number">2</span>); </div><div class="line">                    &#125;</div><div class="line">                &#125; </div><div class="line">                <span class="keyword">if</span>($start == (count($nums2) <span class="number">-1</span>)) &#123;</div><div class="line">                    <span class="comment">//都是临界值时</span></div><div class="line">                    <span class="keyword">if</span>($nums1[$poision] &gt; $nums2[$mid])</div><div class="line">                    &#123;</div><div class="line">                        <span class="keyword">echo</span> <span class="number">3</span>;</div><div class="line">                        <span class="keyword">return</span> (($nums1[$poision] + (<span class="keyword">isset</span>($nums1[$poision<span class="number">-1</span>]) ? max($nums1[$poision<span class="number">-1</span>], $nums2[$mid]) : $nums2[$mid]) )/<span class="number">2</span>); </div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">if</span>($nums1[$poision] &lt; $nums2[$mid])</div><div class="line">                    &#123;</div><div class="line">                        <span class="keyword">echo</span> <span class="number">9</span>;</div><div class="line">                        <span class="keyword">return</span> ($nums1[$poision] +(<span class="keyword">isset</span>($nums1[$poision+<span class="number">1</span>]) ? min($nums1[$poision+<span class="number">1</span>], $nums2[$mid]) : $nums2[$mid]))/<span class="number">2</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">echo</span> <span class="number">5</span>;</div><div class="line">                <span class="keyword">return</span> ((<span class="keyword">isset</span>($nums1[$poision+<span class="number">1</span>]) ? min($nums2[$mid], $nums1[$poision+<span class="number">1</span>]) : $nums2[$mid])  + $nums1[$poision])/<span class="number">2</span>;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="comment">//基数个</span></div><div class="line">                <span class="keyword">if</span>($start == <span class="number">0</span> ) </div><div class="line">                &#123;</div><div class="line">                    <span class="keyword">if</span>($nums1[$poision] &gt; $nums2[$mid])&#123;</div><div class="line">                        <span class="keyword">echo</span> <span class="number">6</span>;</div><div class="line">                        <span class="keyword">return</span> $nums2[$mid];</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">echo</span> <span class="number">11</span>;</div><div class="line">                    <span class="keyword">return</span> $nums1[$poision];</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span>($start == count($count2)<span class="number">-1</span>)</div><div class="line">                &#123;</div><div class="line">                    <span class="keyword">if</span>($start == $halfLen &amp;&amp; $nums1[$poision] &lt; $nums2[$mid])</div><div class="line">                    &#123;</div><div class="line">                        <span class="keyword">echo</span> <span class="number">7</span>;</div><div class="line">                        <span class="keyword">return</span> $nums1[$poision];</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">echo</span> <span class="number">8</span>;</div><div class="line">                    <span class="keyword">return</span> $nums1[$poision];</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">echo</span> <span class="number">10</span>;</div><div class="line">                <span class="keyword">echo</span> $poision.<span class="string">"\n"</span>;</div><div class="line">                <span class="keyword">echo</span> $mid.<span class="string">"\n"</span>;</div><div class="line">                <span class="keyword">return</span> $nums1[$poision];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//比对中位数</span></div><div class="line">        <span class="keyword">if</span>($nums2[$mid] &lt; $nums1[$poision])</div><div class="line">        &#123;</div><div class="line">            $ret = <span class="keyword">$this</span>-&gt;Bsearch($nums1, $nums2,  (($mid+<span class="number">1</span> &gt; $end) ? $end : $mid+<span class="number">1</span>), $end, $halfLen);</div><div class="line">        &#125; <span class="keyword">elseif</span>($nums2[$mid] &gt; $nums1[$poision])</div><div class="line">        &#123;</div><div class="line">            $ret = <span class="keyword">$this</span>-&gt;Bsearch($nums1,$nums2,$start ,(($mid<span class="number">-1</span> &lt; $start) ? $start : $mid<span class="number">-1</span>), $halfLen);</div><div class="line">        &#125;<span class="keyword">elseif</span>($nums2[$mid] == $nums1[$poision])</div><div class="line">        &#123;</div><div class="line">            $ret = $nums2[$mid];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> $ret;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;h3 id=&quot;英文&quot;&gt;&lt;a href=&quot;#英文&quot; class=&quot;headerlink&quot; title=&quot;英文&quot;&gt;&lt;/a&gt;英文&lt;/h3&gt;&lt;p&gt;&lt;co
      
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>算法-水壶问题</title>
    <link href="http://yoursite.com/2018/01/23/%E7%AE%97%E6%B3%95-%E6%B0%B4%E5%A3%B6%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2018/01/23/算法-水壶问题/</id>
    <published>2018-01-23T07:45:13.000Z</published>
    <updated>2019-02-21T03:49:34.723Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><h3 id="英文"><a href="#英文" class="headerlink" title="英文"></a>英文</h3><p>You are given two jugs with capacities x and y litres. There is an infinite amount of water supply available. You need to determine whether it is possible to measure exactly z litres using these two jugs.</p><p>If z liters of water is measurable, you must have z liters of water contained within one or both buckets by the end.</p><p>Operations allowed:</p><p>Fill any of the jugs completely with water.<br>Empty any of the jugs.<br>Pour water from one jug into another till the other jug is completely full or the first jug itself is empty.<br>Example 1: (From the famous “Die Hard” example)</p><p>Input: x = 3, y = 5, z = 4<br>Output: True<br>Example 2:</p><p>Input: x = 2, y = 6, z = 5<br>Output: False</p><h3 id="中文"><a href="#中文" class="headerlink" title="中文"></a>中文</h3><p>有两个容量分别为 x升 和 y升 的水壶以及无限多的水。请判断能否通过使用这两个水壶，从而可以得到恰好 z升 的水？</p><p>如果可以，最后请用以上水壶中的一或两个来盛放取得的 z升 水。</p><p>你允许：</p><p>装满任意一个水壶<br>清空任意一个水壶<br>从一个水壶向另外一个水壶倒水，直到装满或者倒空<br>示例 1: (From the famous “Die Hard” example)</p><p>输入: x = 3, y = 5, z = 4<br>输出: True<br>示例 2:</p><p>输入: x = 2, y = 6, z = 5<br>输出: False</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>需要满足条件：<br>1.两个杯子，如果z&gt;x+y说明两个杯子无法满足。<br>2.如果z=0，则直接返回true;<br>3.如果a||b有一个为0，则另一个一个不等于z时返回false<br>4.ax+by=z,根据这个公式可知，如果z是a,b的最大公约数的整数倍。</p><p>所以该问题可以转化为 z%gcd(x,y) == 0的问题。</p><h3 id="疑问"><a href="#疑问" class="headerlink" title="疑问"></a>疑问</h3><p>以为一定要是gcd，而不能是公约数呢？(裴蜀定理)<br>如何证明？？？</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">canMeasureWater</span><span class="params">($x, $y, $z)</span> </span>&#123;</div><div class="line">        <span class="comment">//排除为0的情况</span></div><div class="line">        <span class="keyword">if</span>($z == <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>($x == <span class="number">0</span> &amp;&amp; $y == <span class="number">0</span>)</div><div class="line">        &#123;   </div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//设$x为大 $y为小</span></div><div class="line">        <span class="keyword">if</span>($x&lt;$y)</div><div class="line">        &#123;</div><div class="line">            $x = $x+$y;</div><div class="line">            $y= $x-$y;</div><div class="line">            $x = $x - $y;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>($x &lt; <span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">return</span> ($y==$z);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>($y != <span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>($z==$x || $z==$y|| $x+$y==$z || $x-$y == $z)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>($x+$y&lt; $z) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">while</span>($x%$y != <span class="number">0</span>) </div><div class="line">            &#123;</div><div class="line">                $tmp = $x;</div><div class="line">                $x = $y%$x;</div><div class="line">                $y = $tmp;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> ($z%$y==<span class="number">0</span>);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">if</span>($z%$x==<span class="number">0</span>) &#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;h3 id=&quot;英文&quot;&gt;&lt;a href=&quot;#英文&quot; class=&quot;headerlink&quot; title=&quot;英文&quot;&gt;&lt;/a&gt;英文&lt;/h3&gt;&lt;p&gt;You
      
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>算法-俄罗斯套娃问题</title>
    <link href="http://yoursite.com/2018/01/17/%E7%AE%97%E6%B3%95-%E4%BF%84%E7%BD%97%E6%96%AF%E5%A5%97%E5%A8%83%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2018/01/17/算法-俄罗斯套娃问题/</id>
    <published>2018-01-17T03:14:20.000Z</published>
    <updated>2019-02-21T03:49:34.718Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><h3 id="英文"><a href="#英文" class="headerlink" title="英文"></a>英文</h3><p>You have a number of envelopes with widths and heights given as a pair of integers (w, h). One envelope can fit into another if and only if both the width and height of one envelope is greater than the width and height of the other envelope.</p><p>What is the maximum number of envelopes can you Russian doll? (put one inside other)</p><p>Note:<br>Rotation is not allowed.</p><p>Example:</p><p>Input: [[5,4],[6,4],[6,7],[2,3]]<br>Output: 3<br>Explanation: The maximum number of envelopes you can Russian doll is 3 ([2,3] =&gt; [5,4] =&gt; [6,7]).</p><h3 id="中文"><a href="#中文" class="headerlink" title="中文"></a>中文</h3><p>给定一些标记了宽度和高度的信封，宽度和高度以整数对形式 (w, h) 出现。当另一个信封的宽度和高度都比这个信封大的时候，这个信封就可以放进另一个信封里，如同俄罗斯套娃一样。</p><p>请计算最多能有多少个信封能组成一组“俄罗斯套娃”信封（即可以把一个信封放到另一个信封里面）。</p><p>说明:<br>不允许旋转信封。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ul><li>首先对数组进行基数排序（如果不排序，直接计算每个节点的套娃数会消耗大量时间）</li><li>遍历每个节点，计算每个节点最大套娃数</li><li>返回最大套娃数。</li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">maxEnvelopes</span><span class="params">($envelopes)</span> </span>&#123;</div><div class="line">        $nums = count($envelopes);</div><div class="line">        <span class="keyword">if</span>($nums &lt; <span class="number">1</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//实现基数排序</span></div><div class="line">        sort($envelopes);</div><div class="line">        <span class="comment">// var_dump($envelopes);</span></div><div class="line">        $nums = count($envelopes);</div><div class="line"></div><div class="line">        $dp[<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span>($i = <span class="number">1</span>; $i &lt; $nums; $i++)</div><div class="line">        &#123;</div><div class="line">            $dp[$i] = <span class="number">1</span>;</div><div class="line">            <span class="keyword">for</span>($j = <span class="number">0</span>; $j&lt; $i; $j ++)&#123;</div><div class="line">                <span class="keyword">if</span>($envelopes[$i][<span class="number">0</span>] &gt; $envelopes[$j][<span class="number">0</span>] &amp;&amp; $envelopes[$i][<span class="number">1</span>] &gt; $envelopes[$j][<span class="number">1</span>])</div><div class="line">                &#123;</div><div class="line">                    $tmp = $dp[$j] +<span class="number">1</span>;</div><div class="line">                    $dp[$i]  = max($dp[$i], $tmp); </div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> max($dp);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="延伸"><a href="#延伸" class="headerlink" title="延伸"></a>延伸</h2><p>php下的<code>sort</code>是如何实现？ 如何实现<code>基数排序</code>？</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;h3 id=&quot;英文&quot;&gt;&lt;a href=&quot;#英文&quot; class=&quot;headerlink&quot; title=&quot;英文&quot;&gt;&lt;/a&gt;英文&lt;/h3&gt;&lt;p&gt;You
      
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>算法-求第k个排序</title>
    <link href="http://yoursite.com/2018/01/16/%E7%AE%97%E6%B3%95-%E6%B1%82%E7%AC%ACk%E4%B8%AA%E6%8E%92%E5%BA%8F/"/>
    <id>http://yoursite.com/2018/01/16/算法-求第k个排序/</id>
    <published>2018-01-16T15:57:21.000Z</published>
    <updated>2019-02-21T03:49:34.725Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><h3 id="英文"><a href="#英文" class="headerlink" title="英文"></a>英文</h3><p>The set [1,2,3,…,n] contains a total of n! unique permutations.</p><p>By listing and labeling all of the permutations in order, we get the following sequence for n = 3:</p><p>“123”<br>“132”<br>“213”<br>“231”<br>“312”<br>“321”<br>Given n and k, return the kth permutation sequence.</p><p>Note:</p><p>Given n will be between 1 and 9 inclusive.<br>Given k will be between 1 and n! inclusive.<br>Example 1:</p><p>Input: n = 3, k = 3<br>Output: “213”<br>Example 2:</p><p>Input: n = 4, k = 9<br>Output: “2314”</p><h3 id="中文"><a href="#中文" class="headerlink" title="中文"></a>中文</h3><p>给出集合 [1,2,3,…,n]，其所有元素共有 n! 种排列。</p><p>按大小顺序列出所有排列情况，并一一标记，当 n = 3 时, 所有排列如下：</p><p>“123”<br>“132”<br>“213”<br>“231”<br>“312”<br>“321”<br>给定 n 和 k，返回第 k 个排列。</p><p>说明：</p><p>给定 n 的范围是 [1, 9]。<br>给定 k 的范围是[1,  n!]。<br>示例 1:</p><p>输入: n = 3, k = 3<br>输出: “213”<br>示例 2:</p><p>输入: n = 4, k = 9<br>输出: “2314”</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ul><li>排列的每一个位置都有一个固定的进位（如果当前数固定，可以有多少种排列），当k达到前进位是，则改位置加1。</li><li>从最左（进位最大）开始，依次用当前进位对k-1做除法（（k-1）/当前进位)，如果结果不为0，则用<code>结果</code>+当前能够使用的最小值，获得当前位置的值。</li><li>用余数当做k,按照第二步的思路，求其余位置的值。</li></ul><p>##代码<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">char</span>* <span class="title">getPermutation</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> k)</span> </span>&#123;</div><div class="line">    <span class="keyword">char</span>* result = (<span class="keyword">char</span>*)<span class="built_in">malloc</span>((n + <span class="number">1</span>) * <span class="keyword">sizeof</span>(<span class="keyword">char</span>));</div><div class="line">    <span class="keyword">bool</span>* flag = (<span class="keyword">bool</span>*)<span class="built_in">calloc</span>(n, <span class="keyword">sizeof</span>(<span class="keyword">bool</span>));</div><div class="line">    <span class="keyword">int</span> temp[<span class="number">10</span>] = &#123; <span class="number">0</span> &#125;;</div><div class="line">    temp[n] = <span class="number">1</span>;</div><div class="line">    temp[n - <span class="number">1</span>] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span> i = <span class="number">0</span>, t = <span class="number">0</span>, idx = <span class="number">0</span>, j = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(i = n - <span class="number">2</span>; i &gt; <span class="number">0</span>; i--)</div><div class="line">        temp[i] = temp[i + <span class="number">1</span>] * (n - i);</div><div class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= n; i++) &#123;</div><div class="line">        t = (k - <span class="number">1</span>) / temp[i];</div><div class="line">        idx = t;</div><div class="line">        <span class="keyword">for</span>(j = <span class="number">1</span>; j &lt;= n; j++) &#123;</div><div class="line">            <span class="comment">//第j小未使用的数，j为上述计算得来。</span></div><div class="line">            <span class="keyword">if</span>(!flag[j]) &#123;</div><div class="line">                t--;</div><div class="line">                <span class="keyword">if</span>(t == <span class="number">-1</span>)</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        result[i - <span class="number">1</span>] = <span class="string">'0'</span> + j;</div><div class="line">        flag[j] = <span class="literal">true</span>;</div><div class="line">        k -= idx * temp[i];</div><div class="line">    &#125;</div><div class="line">    result[n] = <span class="string">'\0'</span>;</div><div class="line">    <span class="built_in">free</span>(flag);</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;h3 id=&quot;英文&quot;&gt;&lt;a href=&quot;#英文&quot; class=&quot;headerlink&quot; title=&quot;英文&quot;&gt;&lt;/a&gt;英文&lt;/h3&gt;&lt;p&gt;The
      
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
</feed>
