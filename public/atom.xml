<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Maxie&#39;blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-08-25T08:24:48.893Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>MaxieLj</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>php闭包</title>
    <link href="http://yoursite.com/2018/08/25/php%E9%97%AD%E5%8C%85/"/>
    <id>http://yoursite.com/2018/08/25/php闭包/</id>
    <published>2018-08-25T06:50:55.000Z</published>
    <updated>2018-08-25T08:24:48.893Z</updated>
    
    <content type="html"><![CDATA[<p>在看guzzle包的时候看大到了一段有意思的代码, 简化以后类似于下边:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="comment">/**</span></div><div class="line">* </div><div class="line">*/</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span> </span></div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>  $handler;</div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(callable $handler = null)</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">$this</span>-&gt;handler = $handler;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">create</span><span class="params">(callable $handler)</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">self</span>($handler);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span><span class="params">($request,$options)</span></span></div><div class="line">&#123;</div><div class="line">$func = <span class="keyword">$this</span>-&gt;handler;</div><div class="line">    <span class="keyword">return</span> $func($request, $options);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test1</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">return</span> [<span class="keyword">$this</span>, <span class="string">'exec1'</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">exec1</span><span class="params">($a,$b)</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">echo</span> ($a+$b);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$test = <span class="keyword">new</span> test();</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">$obj = test::create($test-&gt;test1());</div><div class="line"></div><div class="line">$obj(<span class="number">1</span>,<span class="number">4</span>);</div></pre></td></tr></table></figure><ul><li>php文档是这样描述闭包的</li></ul><p>`PHP是将函数以string形式传递的。 可以使用任何内置或用户自定义函数，但除了语言结构例如：array()，echo，empty()，eval()，exit()，isset()，list()，print 或 unset()。</p><p> 一个已实例化的 object 的方法被作为 array 传递，下标 0 包含该 object，下标 1 包含方法名。 在同一个类里可以访问 protected 和 private 方法。</p><p> 静态类方法也可不经实例化该类的对象而传递，只要在下标 0 中包含类名而不是对象。自 PHP 5.2.3 起，也可以传递 ‘ClassName::methodName’。</p><p> 除了普通的用户自定义函数外，也可传递 匿名函数 给回调参数。`</p><p> 除了上边的这些可以作为callable参数的类型,还有一个是拥有__invoke()的实例化对象。</p><p>所以实例化的对象可以使用 <code>[$obj,&#39;functionName&#39;]</code> 当做闭包去传递。<br><code>$obj = test::create($test-&gt;test1());</code>将我们的<code>test1</code>方法赋值给新实例化的对象里。</p><ul><li>魔术方法<code>__invoke()</code>表示:</li></ul><p>当尝试以调用函数的方式调用一个对象时，__invoke() 方法会被自动调用。</p><p>所以我们调用<code>$obj()</code>函数时会调用到__invoke()里,最后调用到我们一开始注册的函数。</p><p>ps<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">class test </div><div class="line">&#123;</div><div class="line">public  $handler;</div><div class="line">public function __construct(callable $handler = null)</div><div class="line">&#123;</div><div class="line">$this-&gt;handler = $handler;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public static function create(callable $handler)</div><div class="line">&#123;</div><div class="line">return new self($handler);</div><div class="line">&#125;</div><div class="line"></div><div class="line">public function __invoke($request,$options)</div><div class="line">&#123;</div><div class="line">$func = $this-&gt;handler;</div><div class="line">    return $func($request, $options);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">public function test1()</div><div class="line">&#123;</div><div class="line">return [$this, &apos;exec1&apos;];</div><div class="line">&#125;</div><div class="line"></div><div class="line">public function exec1($a,$b)</div><div class="line">&#123;</div><div class="line">echo ($a+$b);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$test = new test();</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">$blj = test::create($test-&gt;test1());</div><div class="line">$blj(1,4);</div><div class="line">//测试对象是否可以作为callable类型参数</div><div class="line"></div><div class="line"></div><div class="line">$test = test::create(new test());</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在看guzzle包的时候看大到了一段有意思的代码, 简化以后类似于下边:&lt;/p&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div c
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>php数组实现</title>
    <link href="http://yoursite.com/2018/08/20/php%E6%95%B0%E7%BB%84%E5%AE%9E%E7%8E%B0/"/>
    <id>http://yoursite.com/2018/08/20/php数组实现/</id>
    <published>2018-08-20T12:00:08.000Z</published>
    <updated>2018-08-25T08:13:50.366Z</updated>
    
    <content type="html"><![CDATA[<p>要说php的数组,就不得不讲hashtable,以为php的数组是强依赖于hashtable实现的。一般</p><p>Times33的算法很简单，就是不断的乘33,下边是times33算法:</p><h2 id="Times33-hash"><a href="#Times33-hash" class="headerlink" title="Times33(hash)"></a>Times33(hash)</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">myHash</span><span class="params">($str)</span> </span>&#123;</div><div class="line">    <span class="comment">// hash(i) = hash(i-1) * 33 + str[i]</span></div><div class="line">    $hash = <span class="number">5381</span>;</div><div class="line">    $s    = md5($str); <span class="comment">//相比其它版本，进行了md5加密</span></div><div class="line">    $seed = <span class="number">5</span>;</div><div class="line">    $len  = <span class="number">32</span>;<span class="comment">//加密后长度32</span></div><div class="line">    <span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt; $len; $i++) &#123;</div><div class="line">        <span class="comment">// (hash &lt;&lt; 5) + hash 相当于 hash * 33</span></div><div class="line">        <span class="comment">//$hash = sprintf("%u", $hash * 33) + ord($s&#123;$i&#125;);</span></div><div class="line">        <span class="comment">//$hash = ($hash * 33 + ord($s&#123;$i&#125;)) &amp; 0x7FFFFFFF;</span></div><div class="line">        $hash = ($hash &lt;&lt; $seed) + $hash + ord($s&#123;$i&#125;);</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="keyword">return</span> $hash &amp; <span class="number">0x7FFFFFFF</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>其中<code>&lt;&lt;</code> 表示左移,每次左移表示x2例如:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">$num = <span class="number">2</span>;</div><div class="line"></div><div class="line"><span class="keyword">echo</span> $num &lt;&lt; <span class="number">2</span>;</div></pre></td></tr></table></figure><p>所以($hash &lt;&lt; $seed)表示 $hash <em>32 ,同时加上$hash,也就表示 $hash </em>33了。ord()函数返回字符串的首个字符的 ASCII 值。<br>最后<code>$hash &amp; 0x7FFFFFFF</code> 表示与整形的最大值与操作(<code>0x7FFFF111FFF</code>二进制为<code>1111111111111111111111111111</code>),<br>这个与操作会截取超过整形二进制部分,所以times33计算出来的值不会超过整形的最大值。</p><h2 id="为什么要用hashtable实现php数组"><a href="#为什么要用hashtable实现php数组" class="headerlink" title="为什么要用hashtable实现php数组?"></a>为什么要用hashtable实现php数组?</h2><p>因为散列表是根据关键建码值直接进项访问的数据结构。在key和value之间有一个映射函数,可以根据key直接索引到对应的value值,它并<br>不会使用一般的对比操作,而是直接使用<code>内存的起始位置和偏移位置</code>进行寻址,所以会比正常的寻址要快。</p><h2 id="散列表结构"><a href="#散列表结构" class="headerlink" title="散列表结构"></a>散列表结构</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> _zend_array &#123;</div><div class="line">zend_refcounted_h gc;</div><div class="line"><span class="keyword">union</span> &#123;</div><div class="line"><span class="keyword">struct</span> &#123;</div><div class="line">ZEND_ENDIAN_LOHI_4(</div><div class="line">zend_uchar    flags,</div><div class="line">zend_uchar    nApplyCount,</div><div class="line">zend_uchar    nIteratorsCount,</div><div class="line">zend_uchar    reserve)</div><div class="line">&#125; v;</div><div class="line"><span class="keyword">uint32_t</span> flags;</div><div class="line">&#125; u;</div><div class="line"><span class="keyword">uint32_t</span>          nTableMask;</div><div class="line">Bucket           *arData;</div><div class="line"><span class="keyword">uint32_t</span>          nNumUsed;</div><div class="line"><span class="keyword">uint32_t</span>          nNumOfElements;</div><div class="line"><span class="keyword">uint32_t</span>          nTableSize;</div><div class="line"><span class="keyword">uint32_t</span>          nInternalPointer;</div><div class="line">zend_long         nNextFreeElement;</div><div class="line"><span class="keyword">dtor_func_t</span>       pDestructor;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><p>主要字段介绍:</p><ul><li>gc 引用次数,垃圾回收时会用到。</li><li>union u 就不介绍了。</li><li>arData 存储元素的数组,内存是连续的,arData指向第一个元素。</li><li>nTableMask nTableSize的负数。</li><li>nTableSize 数组长度,为2的n此房。</li><li>nNumUsed 当前使用的Bucket数。</li><li>nNumOfElements 当前所有的Bucket数。</li><li>nNextFreeElement 下一个被使用的Bucket($a[] = ‘’)</li><li>pDestructor 删除某个元素是会使用</li></ul><h2 id="Bucket结构"><a href="#Bucket结构" class="headerlink" title="Bucket结构"></a>Bucket结构</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> _Bucket &#123;</div><div class="line">zval              val;</div><div class="line">zend_ulong        h;                <span class="comment">/* hash value (or numeric index)   */</span></div><div class="line">zend_string      *key;              <span class="comment">/* string key or NULL for numerics */</span></div><div class="line">&#125; Bucket;</div></pre></td></tr></table></figure><ul><li>h hash出来的值(times33)</li><li>*key 存储元素的key</li><li>val 具体值,是个zval</li></ul><h2 id="如何实现"><a href="#如何实现" class="headerlink" title="如何实现"></a>如何实现</h2><p>php中实现散列表实现主要使用<code>存储元素数组</code>和 <code>映射函数</code>（也可以称作散列函数）和<code>映射表</code></p><h4 id="举个具体的栗子"><a href="#举个具体的栗子" class="headerlink" title="举个具体的栗子:"></a>举个具体的栗子:</h4><p> 如果我们要在php代码中声明一个数组会发生什么?下边分析下php是如何实现数组的。<br> <figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">$arr= [</div><div class="line"><span class="string">'a'</span> =&gt; <span class="string">'111'</span>,</div><div class="line"><span class="string">'b'</span> =&gt; <span class="string">'222'</span>,</div><div class="line"><span class="string">'c'</span> =&gt; <span class="string">'ccc'</span></div><div class="line">];</div></pre></td></tr></table></figure></p><ol><li>首先肯定是初始化。</li><li>接下来将每个元素对应的值依照顺序拷贝到 Bucket里。</li><li>然后利用映射函数对求值,根据算出来的值将其对应的bucket的地址写到该值对应的映射这表里。</li></ol><p>具体操作如下图:<br><img src="/photo/img/php数组实现/php数组具体实现.png" alt="image"></p><p>当然我们这里的映射是理想映射,因为在映射的计算过程中可能存在冲突,后续会介绍映射函数,以及如何解映射函数计算后的冲突。</p><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">ZEND_API <span class="keyword">void</span> ZEND_FASTCALL _zend_hash_init(HashTable *ht, <span class="keyword">uint32_t</span> nSize, <span class="keyword">dtor_func_t</span> pDestructor, zend_bool persistent ZEND_FILE_LINE_DC)</div><div class="line">&#123;</div><div class="line">GC_REFCOUNT(ht) = <span class="number">1</span>; <span class="comment">//设置引用次数</span></div><div class="line">GC_TYPE_INFO(ht) = IS_ARRAY; <span class="comment">//设置数据类型</span></div><div class="line">ht-&gt;u.flags = (persistent ? HASH_FLAG_PERSISTENT : <span class="number">0</span>) | HASH_FLAG_APPLY_PROTECTION | HASH_FLAG_STATIC_KEYS;</div><div class="line">ht-&gt;nTableMask = HT_MIN_MASK;</div><div class="line">HT_SET_DATA_ADDR(ht, &amp;uninitialized_bucket);</div><div class="line">ht-&gt;nNumUsed = <span class="number">0</span>;</div><div class="line">ht-&gt;nNumOfElements = <span class="number">0</span>;</div><div class="line">ht-&gt;nInternalPointer = HT_INVALID_IDX;</div><div class="line">ht-&gt;nNextFreeElement = <span class="number">0</span>;</div><div class="line">ht-&gt;pDestructor = pDestructor;</div><div class="line">ht-&gt;nTableSize = zend_hash_check_size(nSize);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>初始化的时候主要是对hashtable中各个成员的进行初始化设置,而且在这个时候不会给arData分配内存,只有在开始插入数据的时候才会<br>为arData分配内存。</p><h2 id="映射函数"><a href="#映射函数" class="headerlink" title="映射函数"></a>映射函数</h2><p>映射函数其实就是一次<code>hash</code>操作和和一次<code>|</code>操作.<br>hash操作就是上边锁提到得到times33操作,<code>|</code>操作是计算出来的hash值与nTableSize进行计算。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nIndex = ket-&gt;h | nTableMask;</div></pre></td></tr></table></figure></p><p>因为nTableMask是nTableSize的负数,所以计算出来的nIndex值区间应该为[-1,nTableMask]。</p><p>此处待补充 为什么会在[-1, nTableMask] 区间内。</p><h3 id="写入数据"><a href="#写入数据" class="headerlink" title="写入数据"></a>写入数据</h3><p>在初始化的时候并不会对arData分配内存,只有在写入的时候才会真正分配内存</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> zend_always_inline <span class="title">zend_hash_real_init_ex</span><span class="params">(HashTable *ht, <span class="keyword">int</span> packed)</span></span></div><div class="line">&#123;</div><div class="line">HT_ASSERT(GC_REFCOUNT(ht) == <span class="number">1</span>);</div><div class="line">ZEND_ASSERT(!((ht)-&gt;u.flags &amp; HASH_FLAG_INITIALIZED));</div><div class="line"><span class="keyword">if</span> (packed) &#123;</div><div class="line">HT_SET_DATA_ADDR(ht, pemalloc(HT_SIZE(ht), (ht)-&gt;u.flags &amp; HASH_FLAG_PERSISTENT));</div><div class="line">(ht)-&gt;u.flags |= HASH_FLAG_INITIALIZED | HASH_FLAG_PACKED;</div><div class="line">HT_HASH_RESET_PACKED(ht);</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">(ht)-&gt;nTableMask = -(ht)-&gt;nTableSize;</div><div class="line">HT_SET_DATA_ADDR(ht, pemalloc(HT_SIZE(ht), (ht)-&gt;u.flags &amp; HASH_FLAG_PERSISTENT));</div><div class="line">(ht)-&gt;u.flags |= HASH_FLAG_INITIALIZED;</div><div class="line"><span class="keyword">if</span> (EXPECTED(ht-&gt;nTableMask == <span class="number">-8</span>)) &#123;</div><div class="line">Bucket *arData = ht-&gt;arData;</div><div class="line"></div><div class="line">HT_HASH_EX(arData, <span class="number">-8</span>) = <span class="number">-1</span>;</div><div class="line">HT_HASH_EX(arData, <span class="number">-7</span>) = <span class="number">-1</span>;</div><div class="line">HT_HASH_EX(arData, <span class="number">-6</span>) = <span class="number">-1</span>;</div><div class="line">HT_HASH_EX(arData, <span class="number">-5</span>) = <span class="number">-1</span>;</div><div class="line">HT_HASH_EX(arData, <span class="number">-4</span>) = <span class="number">-1</span>;</div><div class="line">HT_HASH_EX(arData, <span class="number">-3</span>) = <span class="number">-1</span>;</div><div class="line">HT_HASH_EX(arData, <span class="number">-2</span>) = <span class="number">-1</span>;</div><div class="line">HT_HASH_EX(arData, <span class="number">-1</span>) = <span class="number">-1</span>;</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">HT_HASH_RESET(ht);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>分配具体的内存</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">define</span> HT_SIZE_EX(nTableSize, nTableMask) \</span></div><div class="line">(HT_DATA_SIZE((nTableSize)) + HT_HASH_SIZE((nTableMask)))</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">#define HT_HASH_SIZE(nTableMask) \</div><div class="line">(((size_t)(uint32_t)-(int32_t)(nTableMask)) * sizeof(uint32_t))</div><div class="line"></div><div class="line">#define HT_DATA_SIZE(nTableSize) \</div><div class="line">((size_t)(nTableSize) * sizeof(Bucket))</div></pre></td></tr></table></figure><p>可以看到在分配具体分配内存的时候会分配 nTableSize<em>(Bucket+uint32_t)大小的内存。<br>讲道理只需要分配nTableSize</em>Bucket大小内存就可以了,为什么会多余出来 nTableSize<em>uint32_t内存呢?<br>因为nTableSize</em>uint32_t就是<code>映射表</code>所占内存大小。所以说Bucket会和映射表一次申请内存。<br>写完成写入操作以后会将<code>*arData</code> 指向第一个Bucket。</p><p>具体在内存里的结果如图所示:<br><img src="/photo/img/php数组实现/hashtable.png" alt="image"></p><p><code>映射表</code>在初始化的时候所有值都是-1,只有在被赋值时候会写入对应<code>Bucket</code>所在链表的偏移量。;<br>ht-&gt;arData 指向第一个<code>Bucket</code>的位置,在赋值的时候会按照列表顺序,将值写入<code>Bucket</code>的value里,然后会根据<br>映射函数算出值当做偏移量找到对应<code>映射表</code>的元素,然后将当前<code>Bucket</code>写入此元素。</p><p>ps nTableSize 为2的次方倍。</p><h2 id="冲突"><a href="#冲突" class="headerlink" title="冲突"></a>冲突</h2><p>如果<code>nIndex = ket-&gt;h | nTableMask</code> 算出来的值冲突了怎么办? 首先<code>映射表</code>的每个元素不是链表,所以导致无法存储多个元素。<br>在php中是这样处理冲突的:<br>首先<code>映射表</code>的所有元素初始化值为 -1 ,当前<br>如果用冲突会将新算出来的值对应的<code>Bucket</code>覆盖原来旧的<code>Bucket</code>,然后将旧的<code>Bucket</code>迁移到新的<code>Bucket</code>,<br>并将旧的<code>Bucket</code>的u2.next(默认为-1) 指向新<code>Bucket</code>。</p><p>如图<br><img src="/photo/img/php数组实现/链表冲突.png" alt="image"></p><h2 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h2><p>php再查找一个数组元素是,首先会根据其key 获取到计算后hash值’ket-&gt;h’,然后根据映射函数算出当前元素在<code>映射表</code>中的偏移量,利用当前位置+偏移量找到<code>映射表</code>的元素,再根据其内的偏量找到对应<code>Bucket</code>链表的首个元素位置,最后遍历该链表核对key值,找到对应的值。</p><p>具体实现函数:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> zend_always_inline Bucket *<span class="title">zend_hash_find_bucket</span><span class="params">(<span class="keyword">const</span> HashTable *ht, zend_string *key)</span></span></div><div class="line">&#123;</div><div class="line">zend_ulong h;</div><div class="line"><span class="keyword">uint32_t</span> nIndex;</div><div class="line"><span class="keyword">uint32_t</span> idx;</div><div class="line">Bucket *p, *arData;</div><div class="line"></div><div class="line">h = zend_string_hash_val(key);</div><div class="line">arData = ht-&gt;arData;</div><div class="line">nIndex = h | ht-&gt;nTableMask;</div><div class="line">idx = HT_HASH_EX(arData, nIndex);</div><div class="line"><span class="keyword">while</span> (EXPECTED(idx != HT_INVALID_IDX)) &#123;</div><div class="line">p = HT_HASH_TO_BUCKET_EX(arData, idx);</div><div class="line"><span class="keyword">if</span> (EXPECTED(p-&gt;key == key)) &#123; <span class="comment">/* check for the same interned string */</span></div><div class="line"><span class="keyword">return</span> p;</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (EXPECTED(p-&gt;h == h) &amp;&amp;</div><div class="line">     EXPECTED(p-&gt;key) &amp;&amp;</div><div class="line">     EXPECTED(ZSTR_LEN(p-&gt;key) == ZSTR_LEN(key)) &amp;&amp;</div><div class="line">     EXPECTED(<span class="built_in">memcmp</span>(ZSTR_VAL(p-&gt;key), ZSTR_VAL(key), ZSTR_LEN(key)) == <span class="number">0</span>)) &#123;</div><div class="line"><span class="keyword">return</span> p;</div><div class="line">&#125;</div><div class="line">idx = Z_NEXT(p-&gt;val);</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="扩容"><a href="#扩容" class="headerlink" title="扩容"></a>扩容</h2><p>数组的容量在初始化的时候已经确定了大小,就是nTableSize。当然映射函数也是根据 nTableMask 来计算的。<br>所以我们扩容时候必须重新计算索引,也就是<code>映射表</code>里的值。<br>具体扩容规则:<br>首先当需要扩容时,会计算当前<code>Bucket</code>链表里删除元素数量占总表元素数量的比例,如果没有超过阈值则申请分配一个原来数组大小两倍的新素组,把元素复制到新数组上,然后重新建立索引。</p><p>阈值判断:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ht-&gt;nNumUsed &gt; ht-&gt;nNumOfElements + (ht-&gt;nNumOfElements &gt;&gt; <span class="number">5</span></div></pre></td></tr></table></figure></p><p>处理过程:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> ZEND_FASTCALL <span class="title">zend_hash_do_resize</span><span class="params">(HashTable *ht)</span></span></div><div class="line">&#123;</div><div class="line"></div><div class="line">IS_CONSISTENT(ht);</div><div class="line">HT_ASSERT(GC_REFCOUNT(ht) == <span class="number">1</span>);</div><div class="line"></div><div class="line"><span class="keyword">if</span> (ht-&gt;nNumUsed &gt; ht-&gt;nNumOfElements + (ht-&gt;nNumOfElements &gt;&gt; <span class="number">5</span>)) &#123; <span class="comment">/* additional term is there to amortize the cost of compaction */</span></div><div class="line">HANDLE_BLOCK_INTERRUPTIONS();</div><div class="line">zend_hash_rehash(ht);</div><div class="line">HANDLE_UNBLOCK_INTERRUPTIONS();</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (ht-&gt;nTableSize &lt; HT_MAX_SIZE) &#123;<span class="comment">/* Let's double the table size */</span></div><div class="line"><span class="keyword">void</span> *new_data, *old_data = HT_GET_DATA_ADDR(ht);</div><div class="line"><span class="keyword">uint32_t</span> nSize = ht-&gt;nTableSize + ht-&gt;nTableSize;</div><div class="line">Bucket *old_buckets = ht-&gt;arData;</div><div class="line"></div><div class="line">HANDLE_BLOCK_INTERRUPTIONS();</div><div class="line">new_data = pemalloc(HT_SIZE_EX(nSize, -nSize), ht-&gt;u.flags &amp; HASH_FLAG_PERSISTENT);</div><div class="line">ht-&gt;nTableSize = nSize;</div><div class="line">ht-&gt;nTableMask = -ht-&gt;nTableSize;</div><div class="line">HT_SET_DATA_ADDR(ht, new_data);</div><div class="line"><span class="built_in">memcpy</span>(ht-&gt;arData, old_buckets, <span class="keyword">sizeof</span>(Bucket) * ht-&gt;nNumUsed);</div><div class="line">pefree(old_data, ht-&gt;u.flags &amp; HASH_FLAG_PERSISTENT);</div><div class="line">zend_hash_rehash(ht);</div><div class="line">HANDLE_UNBLOCK_INTERRUPTIONS();</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">zend_error_noreturn(E_ERROR, <span class="string">"Possible integer overflow in memory allocation (%zu * %zu + %zu)"</span>, ht-&gt;nTableSize * <span class="number">2</span>, <span class="keyword">sizeof</span>(Bucket) + <span class="keyword">sizeof</span>(<span class="keyword">uint32_t</span>), <span class="keyword">sizeof</span>(Bucket));</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>在处理的过程中还会把已经删除的<code>Bucket</code>给删除。</p><p>具体的操作在<code>zend_hash.c</code>文件里。<br>如果超过阈值,则会把已经删除<code>Bucket</code>移除,然后把又有后边的元素往前移动,不上空缺的<code>Bucket</code>,当然索引也会重建。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.cnblogs.com/52fhy/p/5007456.html" target="_blank" rel="noopener">time33 </a></li><li><a href="https://github.com/pangudashu/php7-internal/blob/master/2/zval.md" target="_blank" rel="noopener">2.1 变量的内部实现</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;要说php的数组,就不得不讲hashtable,以为php的数组是强依赖于hashtable实现的。一般&lt;/p&gt;
&lt;p&gt;Times33的算法很简单，就是不断的乘33,下边是times33算法:&lt;/p&gt;
&lt;h2 id=&quot;Times33-hash&quot;&gt;&lt;a href=&quot;#Time
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>php数据结构</title>
    <link href="http://yoursite.com/2018/08/19/php%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <id>http://yoursite.com/2018/08/19/php数据结构/</id>
    <published>2018-08-19T12:30:34.000Z</published>
    <updated>2018-08-20T10:09:40.292Z</updated>
    
    <content type="html"><![CDATA[<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>php是如何统一实现各种变量类型的? 这和php变量类型的实现是密不可分的。<br>一个变量主要有三个要素:<code>变量名``变量类型``变量值</code>,他们在php变量类型实现中主要对应 zval zend_value 和<br>zend的各种数据类型。<br>php中用$去声明一个变量,在声明的时候可以进行初始化,当然也可以不声明直接使用。一般来说,一个变量的定义包含<br>两步:变量定义和变量初始化,在php中只定义不初始化是可以的。</p><h2 id="变量结构体"><a href="#变量结构体" class="headerlink" title="变量结构体"></a>变量结构体</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// php zval结构</span></div><div class="line"><span class="keyword">struct</span> _zval_struct &#123;</div><div class="line">zend_value        value; 指向具体的value<span class="comment">/* value */</span></div><div class="line"><span class="keyword">union</span> &#123;</div><div class="line"><span class="keyword">struct</span> &#123;</div><div class="line">ZEND_ENDIAN_LOHI_4(</div><div class="line">zend_uchar    type,<span class="comment">/* active type */</span></div><div class="line">zend_uchar    type_flags,</div><div class="line">zend_uchar    const_flags,</div><div class="line">zend_uchar    reserved)    <span class="comment">/* call info for EX(This) */</span></div><div class="line">&#125; v;</div><div class="line"><span class="keyword">uint32_t</span> type_info;</div><div class="line">&#125; u1;</div><div class="line"><span class="keyword">union</span> &#123;</div><div class="line"><span class="keyword">uint32_t</span>     var_flags;</div><div class="line"><span class="keyword">uint32_t</span>     next;                 <span class="comment">/* hash collision chain */</span></div><div class="line"><span class="keyword">uint32_t</span>     cache_slot;           <span class="comment">/* literal cache slot */</span></div><div class="line"><span class="keyword">uint32_t</span>     lineno;               <span class="comment">/* line number (for ast nodes) */</span></div><div class="line"><span class="keyword">uint32_t</span>     num_args;             <span class="comment">/* arguments number for EX(This) */</span></div><div class="line"><span class="keyword">uint32_t</span>     fe_pos;               <span class="comment">/* foreach position */</span></div><div class="line"><span class="keyword">uint32_t</span>     fe_iter_idx;          <span class="comment">/* foreach iterator index */</span></div><div class="line">&#125; u2;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><h2 id="变量类型"><a href="#变量类型" class="headerlink" title="变量类型"></a>变量类型</h2><p>其中type 表示当前变量的类型,例如string array int等,以下为php中全部变量类型。<br>其中type 是一个无符号类型的char,他的定义是这样的<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> zend_uchar;</div></pre></td></tr></table></figure></p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">union</span> _zend_value &#123;</div><div class="line">    zend_long         lval;<span class="comment">/* long value */</span></div><div class="line">    <span class="keyword">double</span>            dval;<span class="comment">/* double value */</span></div><div class="line">    zend_refcounted  *counted;</div><div class="line">    zend_string      *str;</div><div class="line">    zend_array       *arr;</div><div class="line">    zend_object      *obj;</div><div class="line">    zend_resource    *res;</div><div class="line">    zend_reference   *ref;</div><div class="line">    zend_ast_ref     *ast;</div><div class="line">    zval             *zv;</div><div class="line">    <span class="keyword">void</span>             *ptr;</div><div class="line">    zend_class_entry *ce;</div><div class="line">    zend_function    *func;</div><div class="line">    <span class="keyword">struct</span> &#123;</div><div class="line">    <span class="keyword">uint32_t</span> w1;</div><div class="line">    <span class="keyword">uint32_t</span> w2;</div><div class="line">    &#125; ww;</div><div class="line">    &#125; zend_value;</div></pre></td></tr></table></figure><ul><li>在这些类型里不存在boolean类型,因为在php7中已经将boolean拆分为true和false.直接保存在type中,也就是说<br>boolean没有_zend_value结构,直接通过type字段就可以确定boolean的值。</li><li>从上边的结构体可以看出来 <code>zend_long</code>、<code>double</code> 类型不是指针类型,也就是说整形和浮点型正能进行深拷贝,<br>并不能和其他说句类型一样进行 <code>引用计数</code>和<code>写时复制</code>。因为有<code>引用计数</code>和<code>写时复制</code>在变量赋值且不做修改时<br>才能大量节省内存。</li></ul><p>以string类型为例,它在php中的结构类型应该是这样的:</p><p><img src="/photo/img/php数据结构/php数据结构.png" alt="image"></p><p>_zend_string:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> _zend_string &#123;</div><div class="line">zend_refcounted_h gc;</div><div class="line">zend_ulong        h;                <span class="comment">/* hash value */</span></div><div class="line"><span class="keyword">size_t</span>            len;</div><div class="line"><span class="keyword">char</span>              val[<span class="number">1</span>];          <span class="comment">/*字符串起始地址*/</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure></p><ul><li>其中<code>gc</code> 字段表示这个结构体被引用的次数,垃圾回收的时候会用到。</li><li>h 字符串通过Times33计算出来的hashcode</li><li>len 字符串长度</li><li>val 字符串内容</li></ul><p>我们在这里都会有疑问,为什么存储字符串内容的时候没有使用char*类型,而用了一个数组类型来存储。zend_string<br>在申请内存的时候会会申请malloc(sizeof(zend_string)+字符串长度),且val[0]存的是字符串最后一个字符安“\0”</p><p>zend_string结构在内存中如下所示:</p><p><img src="/photo/img/php数据结构/zend_stirng内存中结构.png" alt="image"></p><p>当时也在char val[1]的地方疑惑了很久,再往上找了很多文章,其中<br>Nikita Popov(nikic，PHP 官方开发组成员，柏林科技大学的学生) 这样解释</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">如果你对 C 语言了解的不是很深入的话，可能会觉得 val 的定义有些奇怪：这个声明只有一个元素，但是显然我们想存储的字符串长度肯定大于一个字符的长度。这里其实使用的是结构体的一个『黑』方法：在声明数组时只定义一个元素，但是实际创建 zend_string 时再分配足够的内存来存储整个字符串。这样我们还是可以通过 val 访问完整的字符串。</div></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考:"></a>参考:</h2><ul><li><a href="https://nikic.github.io/2015/06/19/Internal-value-representation-in-PHP-7-part-2.html" target="_blank" rel="noopener">Internal value representation in PHP 7 - Part 2 </a></li><li><a href="https://0x1.im/blog/php/Internal-value-representation-in-PHP-7-part-2.html" target="_blank" rel="noopener">[译]变量在 PHP7 内部的实现（二）</a></li><li><a href="https://www.kancloud.cn/nickbai/php7/363268" target="_blank" rel="noopener">php内核分析——2.1 变量的内部实现</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;变量&quot;&gt;&lt;a href=&quot;#变量&quot; class=&quot;headerlink&quot; title=&quot;变量&quot;&gt;&lt;/a&gt;变量&lt;/h2&gt;&lt;p&gt;php是如何统一实现各种变量类型的? 这和php变量类型的实现是密不可分的。&lt;br&gt;一个变量主要有三个要素:&lt;code&gt;变量名``变量类型`
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>php的引用</title>
    <link href="http://yoursite.com/2018/08/12/php%E7%9A%84&amp;%E7%AC%A6%E5%8F%B7/"/>
    <id>http://yoursite.com/2018/08/12/php的&amp;符号/</id>
    <published>2018-08-12T14:18:07.000Z</published>
    <updated>2018-08-12T15:11:33.480Z</updated>
    
    <content type="html"><![CDATA[<h3 id="amp"><a href="#amp" class="headerlink" title="&amp;"></a>&amp;</h3><p>&amp;是php中的引用,他并不一种独立的数据类型,而是指向其他数据类型的数据结构,和C语言的指针类似。</p><p>具体作用为:当我们修改引用类型变量是,其修改的将作用于实际引用的变量上。</p><p>如果当我们使用&amp;符号生成一个引用变量时,首先会为&amp;操作生成一个zend_reference结构,zend_reference就是引用<br>类型的结构体,他内嵌一个zval,然后此结构的体zval的value指向原来zval的value上。然后将原来zval的变量<br>类型变为IS_REFERENCE,原来zval的value执行新创建zend_reference结构。<br>索引&amp;的作用就是新生成zend_reference,然后将其指向原来的zval的value上,顺便把原来zval的变量类型变化为引用类型。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> _zend_reference &#123;</div><div class="line">    zend_refcondted_h gc;</div><div class="line">    zval              val;  指向原来的value.</div><div class="line">&#125;;</div></pre></td></tr></table></figure><h3 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$a = &apos;test&apos;; //步骤1</div><div class="line">$b = &amp;$a;    //步骤2</div></pre></td></tr></table></figure><p><strong>步骤1</strong></p><p>现在<code>$a = &#39;&#39;test</code>是他们的数据结构指向为:</p><p><img src="/photo/img/php引用/未引用前.png" alt="image"></p><p>此时数据结构,一直指针指向是这个样子。</p><p><strong>步骤2</strong></p><p><img src="/photo/img/php引用/引用后.png" alt="image"></p><p>也就是说PHP的引用在使用后新生成一个引用类型机构,然后将引用类型结构指向越来的value,最后将原来zval的value<br>指向新生成的结构体,并将其变量类型变为引用类型,IS_REFERENCE。当然随之改变的还有计数。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;amp&quot;&gt;&lt;a href=&quot;#amp&quot; class=&quot;headerlink&quot; title=&quot;&amp;amp;&quot;&gt;&lt;/a&gt;&amp;amp;&lt;/h3&gt;&lt;p&gt;&amp;amp;是php中的引用,他并不一种独立的数据类型,而是指向其他数据类型的数据结构,和C语言的指针类似。&lt;/p&gt;
&lt;p&gt;具
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>swagger</title>
    <link href="http://yoursite.com/2018/08/06/swagger/"/>
    <id>http://yoursite.com/2018/08/06/swagger/</id>
    <published>2018-08-06T07:30:13.000Z</published>
    <updated>2018-08-07T03:33:16.945Z</updated>
    
    <content type="html"><![CDATA[<p>swagger 是什么鬼?<br>swagger像是个接口生成、管理、mock、测试的框架。主要功能:</p><ul><li>支持API自动生成同步的在线文档</li><li>这些文档可用于项目内部API审核</li><li>方便测试人员了解API</li><li>这些文档可作为客户产品文档的一部分进行发布</li><li>可以mock接口方便调试<br>支持API规范生成代码，生成的客户端和服务器端骨架代码可以加速开发和测试速度<br>##<br>swagger-ui 一个是一个管理接口的服务,它可以根据swagger.json模拟接口返回。<h3 id="搭建swagger-ui"><a href="#搭建swagger-ui" class="headerlink" title="搭建swagger-ui"></a>搭建swagger-ui</h3></li></ul><p>克隆swagger-ui</p><p><code>git clone https://github.com/swagger-api/swagger-ui.git</code></p><p>配置nginx 服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">       listen       8090;</div><div class="line">       server_name  www.swagger-ui.com;</div><div class="line">       autoindex on;</div><div class="line">       #charset koi8-r;</div><div class="line"></div><div class="line">      # access_log  logs/host.access.log  main;</div><div class="line">       root  /Users/lijian/Desktop/code/web_code/swagger/swagger-ui/dist;</div><div class="line">       location / &#123;</div><div class="line"></div><div class="line">           index  index.php index.html index.htm;</div><div class="line">           try_files $uri $uri/ /index.php?$query_string;</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       #error_page  404              /404.html;</div><div class="line"></div><div class="line">       # redirect server error pages to the static page /50x.html</div><div class="line">       #</div><div class="line">       error_page   500 502 503 504  /50x.html;</div><div class="line">       location = /50x.html &#123;</div><div class="line">           root   html;</div><div class="line">       &#125;</div><div class="line">       location ~ \.php$ &#123;</div><div class="line"></div><div class="line">           fastcgi_pass   127.0.0.1:9000;</div><div class="line">           fastcgi_index  index.php;</div><div class="line">           fastcgi_split_path_info    ^(.+\.php)(/.+)$;</div><div class="line">           fastcgi_param PATH_TRANSLATED $document_root$fastcgi_path_info;</div><div class="line">   fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;</div><div class="line">           include        fastcgi_params;</div><div class="line">       &#125;</div><div class="line"></div><div class="line">   &#125;</div></pre></td></tr></table></figure><p>重启NGINX<br><code>nginx -s reload</code></p><p>样子如下:</p><p><img src="/photo/img/swagger-ui/WX20180807-095949.png" alt="image"></p><h2 id="swagger-json"><a href="#swagger-json" class="headerlink" title="swagger.json"></a>swagger.json</h2><p>swagger.json,swagger-ui能够将swagger.json解析为对应的可处理的接口文档。</p><p>效果如上图所示。<br>最终要的一点在于 <code>http://localhost:8091/swagger.json</code>该url为被解析的json地址。</p><p>当然如果我们需要管理不同项目的项目,可以单独配置个服务用来管理swagger.json。</p><h2 id="swagger-php"><a href="#swagger-php" class="headerlink" title="swagger-php"></a>swagger-php</h2><p>github 地址: <code>https://github.com/zircote/swagger-php</code></p><p>首先我们需要在项目里引入swagger-php 扩展包。</p><p><code>composer global require zircote/swagger-php</code></p><p>按照swagger文档写swagger备注:<br>eg:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * @SWG\Post(</div><div class="line"> *     path=&quot;/guestbook/appmsg&quot;,</div><div class="line"> *     summary=&quot;访客留言&quot;,</div><div class="line"> *     tags=&#123;&quot;new&quot;, &quot;guests&quot;&#125;,</div><div class="line"> *     description=&quot;访客留言&quot;,</div><div class="line"> *     operationId=&quot;appmsg&quot;,</div><div class="line"> *     @SWG\Parameter(</div><div class="line"> *         description=&quot;msg&quot;,</div><div class="line"> *         format=&quot;string&quot;,</div><div class="line"> *         in=&quot;formData&quot;,</div><div class="line"> *         name=&quot;msg&quot;,</div><div class="line"> *         required=true,</div><div class="line"> *         type=&quot;string&quot;,</div><div class="line"> *     ),</div><div class="line"> *     @SWG\Parameter(</div><div class="line"> *         description=&quot;email&quot;,</div><div class="line"> *         format=&quot;string&quot;,</div><div class="line"> *         in=&quot;formData&quot;,</div><div class="line"> *         name=&quot;email&quot;,</div><div class="line"> *         required=true,</div><div class="line"> *         type=&quot;string&quot;,</div><div class="line"> *</div><div class="line"> *     ),</div><div class="line"> *     consumes=&#123;&quot;multipart/form-data&quot;, &quot;application/x-www-form-urlencoded&quot;&#125;,</div><div class="line"> *     produces=&#123;&quot;application/json&quot;&#125;,</div><div class="line"> *     @SWG\Response(</div><div class="line"> *         response=&quot;200&quot;,</div><div class="line"> *         description=&quot;返回成功&quot;,</div><div class="line"> *     ),</div><div class="line"> * )</div><div class="line"> *</div><div class="line"> */</div><div class="line"></div><div class="line">/**</div><div class="line"> *   @SWG\Get(</div><div class="line"> *     path=&quot;/get/feedback&quot;,</div><div class="line"> *     summary=&quot;留言表&quot;,</div><div class="line"> *     tags=&#123;&quot;getList&quot;&#125;,</div><div class="line"> *     descriptionId=&quot;appmsglist&quot;,</div><div class="line"> *     @SWG\Parameter(</div><div class="line"> *          description=&quot;Id&quot;,</div><div class="line"> *          format=&quot;integer&quot;,</div><div class="line"> *          in=&quot;formData&quot;,</div><div class="line"> *          name=&quot;user_id&quot;,</div><div class="line"> *          required=&quot;true&quot;,</div><div class="line"> *          type=&quot;integer&quot;</div><div class="line">    *      ),</div><div class="line"> *      @SWG\Parameter(</div><div class="line"> *          description=&quot;phone&quot;,</div><div class="line"> *          format=&quot;integer&quot;,</div><div class="line"> *          in=&quot;formData&quot;,</div><div class="line"> *          name=&quot;user_id&quot;,</div><div class="line"> *          required=&quot;true&quot;,</div><div class="line"> *          type=&quot;integer&quot;</div><div class="line"> *        ),</div><div class="line"> *     consumes=&#123;&quot;multipart/form-data&quot;, &quot;application/x-www-form-urlencode&quot;&#125;,</div><div class="line"> *     produces=&#123;&quot;application/json&quot;&#125;,</div><div class="line"> *     @SWG\Response(</div><div class="line"> *        response=&quot;200&quot;,</div><div class="line"> *        description=&quot;返回成功&quot;,</div><div class="line"> *     )</div><div class="line"> * )</div><div class="line"> *</div><div class="line"> */</div></pre></td></tr></table></figure><p>写完以后运行:</p><p><code>./vendor/zircote/swagger-php/bin/swagger app/Business/Hera/HeraMockApi.php -o ./../../swagger_json/rrc/swagger.json</code><br>第一个为swagger.json的生成器,第二个为目标文件,第三个为生成文件。</p><p>然后我们在swagger-ui 引入生成的json即可。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;swagger 是什么鬼?&lt;br&gt;swagger像是个接口生成、管理、mock、测试的框架。主要功能:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;支持API自动生成同步的在线文档&lt;/li&gt;
&lt;li&gt;这些文档可用于项目内部API审核&lt;/li&gt;
&lt;li&gt;方便测试人员了解API&lt;/li&gt;
&lt;li
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>设计模式1</title>
    <link href="http://yoursite.com/2018/08/01/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F1/"/>
    <id>http://yoursite.com/2018/08/01/设计模式1/</id>
    <published>2018-08-01T12:53:15.000Z</published>
    <updated>2018-08-02T10:12:34.678Z</updated>
    
    <content type="html"><![CDATA[<h2 id="builder-模式"><a href="#builder-模式" class="headerlink" title="builder 模式"></a>builder 模式</h2><p>builder 建造者模式,又称生成器模式。</p><p>建造者模式是为了简化 使用多个建单的对象构建成一个复杂对象的 设计模式。 属于创建型模式。</p><p>代码示例</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">publish class SmallWheel()</div><div class="line">&#123;</div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line">publish class BigWheel()</div><div class="line">&#123;</div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line">publish class SmallCar()</div><div class="line">&#123;</div><div class="line">    publish $wheel;</div><div class="line">&#125;</div><div class="line"></div><div class="line">publish class BigCar()</div><div class="line">&#123;</div><div class="line">    publish $wheel;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>以上为零件。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">publish CarBuilder()</div><div class="line">&#123;</div><div class="line">    <span class="comment">//创建小轿车</span></div><div class="line">    publish <span class="function"><span class="keyword">function</span> <span class="title">getSmallCar</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        $smallCar = <span class="keyword">new</span> SmallCar();</div><div class="line">        $smallCar-&gt;whell = <span class="keyword">new</span> SmallWheel();</div><div class="line">        <span class="keyword">return</span> $smallCar;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//创建大轿车</span></div><div class="line">    publish <span class="function"><span class="keyword">function</span> <span class="title">getBigCar</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        $bigCar = <span class="keyword">new</span> BigCar();</div><div class="line">        $bigCar-&gt;whell = <span class="keyword">new</span> BigWheel();</div><div class="line">        <span class="keyword">return</span> $bigCar;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>调度 </p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">$carBuilder = <span class="keyword">new</span> CArBuilder();</div><div class="line"></div><div class="line">$smallCar = $carBuilder-&gt;getSmallCar();</div><div class="line">$bigCar = $carBuilder-&gt;getBigCar();</div></pre></td></tr></table></figure><p>备注:</p><p>建造者模式与工厂模式区别:<br>工厂模式用于批量创建那哪一种类, 建造者模式更注重构建过程。</p><h2 id="template-method"><a href="#template-method" class="headerlink" title="template method"></a>template method</h2><p>模板方法:定义一个抽象类或者/父类,由继承它的子类按照需求重写它的方法实现。</p><p>eg:</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">publish abstract class Car()</div><div class="line">&#123;</div><div class="line">    //强制子类实现</div><div class="line">    abstract public function run();</div><div class="line">    abstract public function turnOnTheLight();</div><div class="line">    //不强制</div><div class="line">    public function palyMusic()</div><div class="line">    &#123;</div><div class="line">        return 'hengheng hahei';</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>继承</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SmaCar</span> <span class="keyword">extends</span> <span class="title">car</span> </span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">'run'</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">public</span> funtion turnOnTheLight()</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">'turnOnTheLight'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>以上</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;builder-模式&quot;&gt;&lt;a href=&quot;#builder-模式&quot; class=&quot;headerlink&quot; title=&quot;builder 模式&quot;&gt;&lt;/a&gt;builder 模式&lt;/h2&gt;&lt;p&gt;builder 建造者模式,又称生成器模式。&lt;/p&gt;
&lt;p&gt;建造者模式是为了
      
    
    </summary>
    
    
      <category term="builder template method" scheme="http://yoursite.com/tags/builder-template-method/"/>
    
  </entry>
  
  <entry>
    <title>我不是药神</title>
    <link href="http://yoursite.com/2018/07/13/%E6%88%91%E4%B8%8D%E6%98%AF%E8%8D%AF%E7%A5%9E/"/>
    <id>http://yoursite.com/2018/07/13/我不是药神/</id>
    <published>2018-07-13T14:44:43.000Z</published>
    <updated>2018-07-13T15:08:55.702Z</updated>
    
    <content type="html"><![CDATA[<p>一直以来都想成为一个坚强的人,但是生活中还是有很多时候让我情不自禁,一部电影被感动哭的稀里哗啦,<br>不得不承认我是个泪点很低的人,但是我想这并不妨碍我成为一个坚强的人。</p><p>看完点影,不禁想问自己几个问题:</p><ul><li>电影里徐峥错了么?好像并没有什么大错。尊重知识产权确实一个严肃的问题,不然社会没有前进的动力。</li><li>警察错了么? 好像也没有错,秉公执法的警察才是好警察。</li><li>病人错了么? 明明知道这是走私药,却仍然要买,我想对于想要活命的人来说,什么都无足轻重了。<br>只有哪些真正历过生离死别,一直在生与死的边缘挣扎的人, 才知道生命的可贵。</li></ul><p>到底是哪里错了? 我想真的事像电影里所说的一样, 都是因为穷。如果穷是原罪的话,我想这个世界大多数人都犯了很重的罪。<br>那么错在哪里, 我想我们的国家体制已经意识到了,她在改变。</p><ul><li>黄毛是个仗义的兄弟, 看到了黄毛, 这不禁让我想到我的高中, 想到了当我处于和别人争执的时候那些为我站出来的朋友。</li></ul><p>我想我一直是一个不善于表达的人, 无论对于父母, 伴侣, 还是朋友, 对于他们我一直都很吝啬赞美之词。</p><ul><li>最后一个问题, 如果我是徐峥, 我会站出来么? 当我事业有成的时候, 衣食无忧的时候, 家庭美满的时候, 我会为那些<br>需要帮助的人站出来么?</li></ul><p>但是我知道, 那些站出来的背影真的很帅, 也值得我们尊敬。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一直以来都想成为一个坚强的人,但是生活中还是有很多时候让我情不自禁,一部电影被感动哭的稀里哗啦,&lt;br&gt;不得不承认我是个泪点很低的人,但是我想这并不妨碍我成为一个坚强的人。&lt;/p&gt;
&lt;p&gt;看完点影,不禁想问自己几个问题:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;电影里徐峥错了么?好像并没
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>微服务数据一致性和服务可靠性</title>
    <link href="http://yoursite.com/2018/07/12/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%95%B0%E6%8D%AE%E4%B8%80%E8%87%B4%E6%80%A7%E5%92%8C%E6%9C%8D%E5%8A%A1%E5%8F%AF%E9%9D%A0%E6%80%A7/"/>
    <id>http://yoursite.com/2018/07/12/微服务数据一致性和服务可靠性/</id>
    <published>2018-07-12T13:54:30.353Z</published>
    <updated>2018-07-12T13:54:30.353Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/photo/img/2018-06-19/servicePic1.png" alt="image"></p><h2 id="存在问题"><a href="#存在问题" class="headerlink" title="存在问题"></a>存在问题</h2><p>  我们的保证金服务现有结构是这个样子。<br>在 1、2、3、4、5、6 各个阶段都会存在超时和异常问题，当负载少时，我们还可以手动人工处理，但是当数据量大的时候，问题或多的令人发指，沉浸于洗数据，无法自拔。。<br>超时存在问题：<br>1.当1、2、3 步骤超时时，下游服务可以忽略，当做执行失败，重试。<br>2.当在环节4、5、6超时时，对于下游服务是也是执行失败，但是还可以重试么？</p><h2 id="如何提高服务可靠性"><a href="#如何提高服务可靠性" class="headerlink" title="如何提高服务可靠性"></a>如何提高服务可靠性</h2><p>对于上游服务，如何保证对下游提供可靠的服务。</p><h3 id="补偿机制"><a href="#补偿机制" class="headerlink" title="补偿机制"></a>补偿机制</h3><p> <img src="/photo/img/2018-06-19/servicePic5.png" alt="image"><br> 在服务间的调用失败时，可以记录失败调用，如队列，消费重试。但是前提一定是接口幂等。<br> 但是这样并不能解决根本性问题，如果我们在调用保证金冻结服务时，失败此时我们冻结时报操作入队列，让队列异步消费，如果此时要解冻保证金，就会出现业务异常。</p><p> <strong>所以</strong>补偿机制建议使用在 <code>不可避免的业务异常情况下使用</code>，我们应该尽可能的优化技术方案，来保证数据一致性，最后再采用补偿机制。</p><h3 id="两段提交协议（2pc）"><a href="#两段提交协议（2pc）" class="headerlink" title="两段提交协议（2pc）"></a>两段提交协议（2pc）</h3><p><img src="/photo/img/2018-06-19/servicePic4.png" alt="image"></p><p>preOperation 执行请求，在调用微服务前，执行预操作成功则表示此次操作可行。<br>如果commit失败该如何处理？重新preOperetion嘛？如果接口幂等是否可以重复，commit？如何保证避免重复提交？<br>在preOperation时，返回唯一操作ID，业务逻辑每个操作对应一个操作ID，commit失败就重试，当然前提是我们的上有服务接口幂等。</p><p><img src="/photo/img/2018-06-19/servicePic3.png" alt="image"><br>即使是这样也会存在问题，如果保证金预操作成功，但是执行一直失败呢？我们必须提供回滚机制。<br><img src="/photo/img/2018-06-19/servicePic2.png" alt="image"></p><ol><li>大量同步RPC依赖，如何保证自身服务可靠性？<br>  服务之间在调用的时候，会存在大量异常、超时。我该如何处理，认为这次是失败的？还是成功的？如果依赖的服务返回成功，才算成功的话，我改如何保证服务可靠性，该如何对我的下游服务提供可靠的服务。</li><li>调用依赖服务失败，如何降级处理？<br>  在服务调用失败的时候，我的上游出错了，我该如何降级处理，我该重试？还是直接跳过，跳过后是否会造成微服务之间数据一致性问题。如果重试是否会造成重复提交，接口是否幂等？</li><li>是否还欠缺回滚机制？ </li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/photo/img/2018-06-19/servicePic1.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;存在问题&quot;&gt;&lt;a href=&quot;#存在问题&quot; class=&quot;headerlink&quot; title=&quot;存在问题&quot;&gt;&lt;/a&gt;存在问题&lt;
      
    
    </summary>
    
    
      <category term="分布式,事务" scheme="http://yoursite.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F-%E4%BA%8B%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>Item2使用sz rz命令从服务下载上传文件</title>
    <link href="http://yoursite.com/2018/07/12/%E4%BD%BF%E7%94%A8sz-rz%E5%91%BD%E4%BB%A4%E4%BB%8E%E6%9C%8D%E5%8A%A1%E4%B8%8B%E8%BD%BD%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6/"/>
    <id>http://yoursite.com/2018/07/12/使用sz-rz命令从服务下载上传文件/</id>
    <published>2018-07-12T13:27:37.000Z</published>
    <updated>2018-07-12T13:42:45.196Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>如何从linux服务下载/上传文件</p><ul><li>使用scp命令</li><li>使用sz命令</li></ul><p>这里主要介绍使用sz命令下载文件</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul><li>安装lrzsz <code>hobrew install llssz</code></li><li>在本地编写shell用于接受sz命令下载下来的文件</li></ul><p>上传shell</p><p><code>iterm2-send-zmodem.sh</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line"></div><div class="line"></div><div class="line">#Author: Matt Mastracci (matthew@mastracci.com)</div><div class="line"></div><div class="line"></div><div class="line"># AppleScript from http://stackoverflow.com/questions/4309087/cancel-button-on-osascript-in-a-bash-script</div><div class="line"></div><div class="line"></div><div class="line"># licensed under cc-wiki with attribution required</div><div class="line"></div><div class="line"></div><div class="line"># Remainder of script public domain</div><div class="line"></div><div class="line"></div><div class="line">osascript -e &apos;tell application &quot;iTerm2&quot; to version&apos; &gt; /dev/null 2&gt;&amp;1 &amp;&amp; NAME=iTerm2 || NAME=iTerm</div><div class="line">if [[ $NAME = &quot;iTerm&quot; ]]; then</div><div class="line">    FILE=`osascript -e &apos;tell application &quot;iTerm&quot; to activate&apos; -e &apos;tell application &quot;iTerm&quot; to set thefile to choose file with prompt &quot;Choose a file to send&quot;&apos; -e &quot;do shell script (\&quot;echo \&quot;&amp;(quoted form of POSIX path of thefile as Unicode text)&amp;\&quot;\&quot;)&quot;`</div><div class="line">else</div><div class="line">    FILE=`osascript -e &apos;tell application &quot;iTerm2&quot; to activate&apos; -e &apos;tell application &quot;iTerm2&quot; to set thefile to choose file with prompt &quot;Choose a file to send&quot;&apos; -e &quot;do shell script (\&quot;echo \&quot;&amp;(quoted form of POSIX path of thefile as Unicode text)&amp;\&quot;\&quot;)&quot;`</div><div class="line">fi</div><div class="line">if [[ $FILE = &quot;&quot; ]]; then</div><div class="line">    echo Cancelled.</div><div class="line">    # Send ZModem cancel</div><div class="line">    echo -e \\x18\\x18\\x18\\x18\\x18</div><div class="line">    sleep 1</div><div class="line">    echo</div><div class="line">    echo \# Cancelled transfer</div><div class="line">else</div><div class="line">    /usr/local/bin/sz &quot;$FILE&quot; -e -b</div><div class="line">    sleep 1</div><div class="line">    echo</div><div class="line">    echo \# Received $FILE</div><div class="line">fi</div></pre></td></tr></table></figure></p><p>下载shell</p><p><code>iterm2-recv-zmodem.sh</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line"># Author: Matt Mastracci (matthew@mastracci.com)</div><div class="line"># AppleScript from http://stackoverflow.com/questions/4309087/cancel-button-on-osascript-in-a-bash-script</div><div class="line"># licensed under cc-wiki with attribution required </div><div class="line"># Remainder of script public domain</div><div class="line"></div><div class="line">osascript -e &apos;tell application &quot;iTerm2&quot; to version&apos; &gt; /dev/null 2&gt;&amp;1 &amp;&amp; NAME=iTerm2 || NAME=iTerm</div><div class="line">if [[ $NAME = &quot;iTerm&quot; ]]; then</div><div class="line">    FILE=`osascript -e &apos;tell application &quot;iTerm&quot; to activate&apos; -e &apos;tell application &quot;iTerm&quot; to set thefile to choose folder with prompt &quot;Choose a folder to place received files in&quot;&apos; -e &quot;do shell script (\&quot;echo \&quot;&amp;(quoted form of POSIX path of thefile as Unicode text)&amp;\&quot;\&quot;)&quot;`</div><div class="line">else</div><div class="line">    FILE=`osascript -e &apos;tell application &quot;iTerm2&quot; to activate&apos; -e &apos;tell application &quot;iTerm2&quot; to set thefile to choose folder with prompt &quot;Choose a folder to place received files in&quot;&apos; -e &quot;do shell script (\&quot;echo \&quot;&amp;(quoted form of POSIX path of thefile as Unicode text)&amp;\&quot;\&quot;)&quot;`</div><div class="line">fi</div><div class="line"></div><div class="line">if [[ $FILE = &quot;&quot; ]]; then</div><div class="line">    echo Cancelled.</div><div class="line">    # Send ZModem cancel</div><div class="line">    echo -e \\x18\\x18\\x18\\x18\\x18</div><div class="line">    sleep 1</div><div class="line">    echo</div><div class="line">    echo \# Cancelled transfer</div><div class="line">else</div><div class="line">    cd &quot;$FILE&quot;</div><div class="line">    /usr/local/bin/rz -E -e -b</div><div class="line">    sleep 1</div><div class="line">    echo</div><div class="line">    echo</div><div class="line">    echo \# Sent \-\&gt; $FILE</div><div class="line">fi</div></pre></td></tr></table></figure><h2 id="配置iterm2"><a href="#配置iterm2" class="headerlink" title="配置iterm2"></a>配置iterm2</h2><ul><li>设置Iterm2的Tirgger特性，profiles-default-editProfiles-Advanced中的Tirgger</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">添加两条trigger，分别设置Regular expression，Action，Parameters，Instant如下：</div><div class="line">    1.第一条</div><div class="line">        Regular expression: rz waiting to receive.\*\*B0100</div><div class="line">        Action: Run Silent Coprocess</div><div class="line">        Parameters: /usr/local/bin/iterm2-send-zmodem.sh</div><div class="line">        Instant: checked</div><div class="line">    2.第二条</div><div class="line">        Regular expression: \*\*B00000000000000</div><div class="line">        Action: Run Silent Coprocess</div><div class="line">        Parameters: /usr/local/bin/iterm2-recv-zmodem.sh</div><div class="line">        Instant: checked</div></pre></td></tr></table></figure><p><strong>备注</strong>:注意两个文件的权限</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;如何从linux服务下载/上传文件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用scp命令&lt;/li&gt;
&lt;li&gt;使用sz命令&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>python学习笔记一</title>
    <link href="http://yoursite.com/2018/07/06/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%80/"/>
    <id>http://yoursite.com/2018/07/06/python学习笔记一/</id>
    <published>2018-07-06T09:43:01.000Z</published>
    <updated>2018-08-19T12:31:04.532Z</updated>
    
    <content type="html"><![CDATA[<p>在php里数组分为索引数组和关联数组<br>但是在python里这两者数组确实不同的数据类型<br>list:<br>data = [1,2,3,4,5]<br>字典<br>{data:1}</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在php里数组分为索引数组和关联数组&lt;br&gt;但是在python里这两者数组确实不同的数据类型&lt;br&gt;list:&lt;br&gt;data = [1,2,3,4,5]&lt;br&gt;字典&lt;br&gt;{data:1}&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>solr-从控制页面删除数据</title>
    <link href="http://yoursite.com/2018/06/21/solr-%E4%BB%8E%E6%8E%A7%E5%88%B6%E9%A1%B5%E9%9D%A2%E5%88%A0%E9%99%A4%E6%95%B0%E6%8D%AE/"/>
    <id>http://yoursite.com/2018/06/21/solr-从控制页面删除数据/</id>
    <published>2018-06-21T12:21:18.000Z</published>
    <updated>2018-06-21T12:30:05.551Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-xml"><a href="#1-xml" class="headerlink" title="1.xml"></a>1.xml</h1><p><img src="/photo/img/2018-06-21/DingTalk20180621202319.png" alt="image"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;delete&gt;&lt;query&gt;*:*&lt;/query&gt;&lt;/delete&gt;</div><div class="line">&lt;commit/&gt;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-xml&quot;&gt;&lt;a href=&quot;#1-xml&quot; class=&quot;headerlink&quot; title=&quot;1.xml&quot;&gt;&lt;/a&gt;1.xml&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/photo/img/2018-06-21/DingTalk20180621202319.png
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>websocket订阅火币成交记录</title>
    <link href="http://yoursite.com/2018/06/19/websocket%E8%AE%A2%E9%98%85%E7%81%AB%E5%B8%81%E6%88%90%E4%BA%A4%E8%AE%B0%E5%BD%95/"/>
    <id>http://yoursite.com/2018/06/19/websocket订阅火币成交记录/</id>
    <published>2018-06-19T10:15:57.000Z</published>
    <updated>2018-06-19T10:19:48.515Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python3"><a href="#python3" class="headerlink" title="python3"></a>python3</h1><h2 id="单线程："><a href="#单线程：" class="headerlink" title="单线程："></a>单线程：</h2><h3 id="文件一："><a href="#文件一：" class="headerlink" title="文件一："></a>文件一：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"><span class="comment">#author: maxie_lj</span></div><div class="line"><span class="keyword">import</span> _thread</div><div class="line"><span class="keyword">from</span> websocket <span class="keyword">import</span> create_connection</div><div class="line"><span class="keyword">from</span> mysqlOpertion <span class="keyword">import</span> connect_mysql</div><div class="line"><span class="keyword">import</span> gzip</div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">import</span> json</div><div class="line"></div><div class="line"><span class="comment"># 链接</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">connect</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">while</span>(<span class="number">1</span>):</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            print(<span class="string">''</span>)</div><div class="line">            <span class="comment"># 挂代理</span></div><div class="line">            ws = create_connection(<span class="string">"wss://www.huobi.br.com/-/s/pro/ws"</span>)</div><div class="line">            <span class="comment">#print('链接成功')</span></div><div class="line">            <span class="keyword">return</span> ws</div><div class="line">            <span class="keyword">break</span></div><div class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> err:</div><div class="line">            <span class="comment">#print(err)</span></div><div class="line">            <span class="comment">#print('connect ws error,retry...')</span></div><div class="line">            time.sleep(<span class="number">1</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getsubconfig</span><span class="params">()</span>:</span></div><div class="line">    <span class="comment"># 统计参数</span></div><div class="line">    tradeStr=[</div><div class="line">              <span class="string">"""&#123;"sub": "market.elfusdt.trade.detail","id": "id1"&#125;"""</span>,</div><div class="line">              <span class="string">"""&#123;"sub": "market.btcusdt.trade.detail","id": "id2"&#125;"""</span>,</div><div class="line">              <span class="string">"""&#123;"sub": "market.htusdt.trade.detail","id": "id3"&#125;"""</span>,</div><div class="line">              <span class="string">"""&#123;"sub": "market.swftcbtc.trade.detail","id": "id4"&#125;"""</span>,</div><div class="line">              <span class="string">"""&#123;"sub": "market.topcbtc.trade.detail","id": "id6"&#125;"""</span>,</div><div class="line">              <span class="string">"""&#123;"sub": "market.bchusdt.trade.detail","id": "id7"&#125;"""</span>,</div><div class="line">              <span class="string">"""&#123;"sub": "market.ethusdt.trade.detail","id": "id8"&#125;"""</span>,</div><div class="line">              <span class="string">"""&#123;"sub": "market.etcusdt.trade.detail","id": "id9"&#125;"""</span>,</div><div class="line">              <span class="string">"""&#123;"sub": "market.eosusdt.trade.detail","id": "id9"&#125;"""</span>,</div><div class="line">              <span class="string">"""&#123;"sub": "market.ltcusdt.trade.detail","id": "id9"&#125;"""</span></div><div class="line">              ]</div><div class="line">    <span class="keyword">return</span> tradeStr</div><div class="line"></div><div class="line"><span class="comment"># 订阅</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">sub</span><span class="params">(ws,tradeStr)</span>:</span></div><div class="line">    ws.send(tradeStr)</div><div class="line"></div><div class="line"><span class="comment"># 获取返回</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getResponse</span><span class="params">(ws,tradeStr)</span>:</span></div><div class="line">    db = connect_mysql.connect()</div><div class="line">    <span class="keyword">while</span> <span class="number">1</span> :</div><div class="line">        <span class="keyword">try</span> :</div><div class="line">            compressData=ws.recv()</div><div class="line">        <span class="keyword">except</span> Exception :</div><div class="line">            <span class="comment">#print('链接异常')</span></div><div class="line">            run(tradeStr,<span class="number">1</span>)</div><div class="line">        <span class="keyword">try</span> :</div><div class="line">            result=gzip.decompress(compressData).decode(<span class="string">'utf-8'</span>)</div><div class="line">        <span class="keyword">except</span>:</div><div class="line">            <span class="comment">#print('丢包解析异常')</span></div><div class="line">            <span class="keyword">continue</span></div><div class="line">        <span class="keyword">if</span> result[:<span class="number">7</span>] == <span class="string">'&#123;"ping"'</span>:</div><div class="line">            ts=result[<span class="number">8</span>:<span class="number">21</span>]</div><div class="line">            <span class="comment">#print('心跳包',ts)</span></div><div class="line">            pong=<span class="string">'&#123;"pong":'</span>+ts+<span class="string">'&#125;'</span></div><div class="line">            ws.send(pong)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">if</span> result[:<span class="number">5</span>] == <span class="string">'&#123;"ch"'</span>:</div><div class="line">                result = json.loads(result)</div><div class="line">                <span class="comment">#print(result)</span></div><div class="line">                <span class="comment">#print('------------------------------------------------------')</span></div><div class="line">                n = <span class="number">0</span></div><div class="line">                <span class="keyword">while</span> n &lt; len(result[<span class="string">'tick'</span>][<span class="string">'data'</span>]) :</div><div class="line">                    connect_mysql.commit(<span class="string">'%s'</span> % result[<span class="string">'ch'</span>].split(<span class="string">'.'</span>)[<span class="number">1</span>],result[<span class="string">'tick'</span>][<span class="string">'data'</span>][n][<span class="string">'price'</span>],result[<span class="string">'tick'</span>][<span class="string">'data'</span>][n][<span class="string">'amount'</span>],<span class="string">"'%s'"</span> % result[<span class="string">"tick"</span>][<span class="string">"data"</span>][n][<span class="string">"direction"</span>], <span class="string">"'%s'"</span> % result[<span class="string">'ch'</span>].split(<span class="string">'.'</span>)[<span class="number">1</span>],db);</div><div class="line">                    n += <span class="number">1</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">subCoin</span><span class="params">(tradeStr)</span>:</span></div><div class="line">    ws=connect()</div><div class="line">    sub(ws,tradeStr)</div><div class="line">    getResponse(ws,tradeStr)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(tradeStr,test)</span>:</span></div><div class="line">    subCoin(tradeStr)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">    tradeStr=getsubconfig()</div><div class="line">    <span class="keyword">try</span> :</div><div class="line">        tradeStr = getsubconfig()</div><div class="line">        i = <span class="number">0</span></div><div class="line">        <span class="keyword">while</span> i &lt; len(tradeStr) :</div><div class="line">            _thread.start_new_thread( run, (tradeStr[i],i) )</div><div class="line">            i += <span class="number">1</span></div><div class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> err :</div><div class="line">        print(err)</div><div class="line">    <span class="keyword">while</span> <span class="number">1</span>:</div><div class="line">        <span class="keyword">pass</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    main()</div></pre></td></tr></table></figure><h1 id="多线程版本："><a href="#多线程版本：" class="headerlink" title="多线程版本："></a>多线程版本：</h1><h2 id="文件一：-1"><a href="#文件一：-1" class="headerlink" title="文件一："></a>文件一：</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"><span class="comment">#author: maxie_lj</span></div><div class="line"><span class="keyword">import</span> _thread</div><div class="line"><span class="keyword">from</span> websocket <span class="keyword">import</span> create_connection</div><div class="line"><span class="keyword">from</span> test1 <span class="keyword">import</span> connect_mysql</div><div class="line"><span class="keyword">import</span> gzip</div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">import</span> json</div><div class="line"></div><div class="line"><span class="comment"># 链接数据库</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">connect</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">while</span>(<span class="number">1</span>):</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            ws = create_connection(<span class="string">"wss://www.huobi.br.com/-/s/pro/ws"</span>)</div><div class="line">            <span class="comment"># print('链接成功')</span></div><div class="line">            <span class="keyword">return</span> ws</div><div class="line">            <span class="keyword">break</span></div><div class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> err:</div><div class="line">            print(err)</div><div class="line">            <span class="comment">#print('connect ws error,retry...')</span></div><div class="line">            time.sleep(<span class="number">1</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getsubconfig</span><span class="params">()</span>:</span></div><div class="line">    <span class="comment"># 统计参数</span></div><div class="line">    tradeStr=[</div><div class="line">              <span class="string">"""&#123;"sub": "market.elfusdt.trade.detail"&#125;"""</span>,</div><div class="line">              <span class="string">"""&#123;"sub": "market.btcusdt.trade.detail"&#125;"""</span>,</div><div class="line">              <span class="string">"""&#123;"sub": "market.htusdt.trade.detail"&#125;"""</span>,</div><div class="line">              <span class="string">"""&#123;"sub": "market.swftcbtc.trade.detail"&#125;"""</span>,</div><div class="line">              <span class="string">"""&#123;"sub": "market.topcbtc.trade.detail"&#125;"""</span>,</div><div class="line">              <span class="string">"""&#123;"sub": "market.bchusdt.trade.detail"&#125;"""</span>,</div><div class="line">              <span class="string">"""&#123;"sub": "market.ethusdt.trade.detail"&#125;"""</span>,</div><div class="line">              <span class="string">"""&#123;"sub": "market.etcusdt.trade.detail"&#125;"""</span>,</div><div class="line">              <span class="string">"""&#123;"sub": "market.eosusdt.trade.detail"&#125;"""</span>,</div><div class="line">              <span class="string">"""&#123;"sub": "market.ltcusdt.trade.detail"&#125;"""</span></div><div class="line">              ]</div><div class="line">    <span class="keyword">return</span> tradeStr</div><div class="line"></div><div class="line"><span class="comment"># 订阅</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">sub</span><span class="params">(ws,tradeStr)</span>:</span></div><div class="line">    ws.send(tradeStr)</div><div class="line"></div><div class="line"><span class="comment"># 获取返回</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getResponse</span><span class="params">(ws)</span>:</span></div><div class="line">    db = connect_mysql.connect()</div><div class="line">    <span class="keyword">while</span> <span class="number">1</span> :</div><div class="line">        <span class="keyword">try</span> :</div><div class="line">            compressData=ws.recv()</div><div class="line">        <span class="keyword">except</span> Exception :</div><div class="line">            ws=connect()</div><div class="line">            subCoin(ws)</div><div class="line">            print(<span class="string">'链接异常'</span>)</div><div class="line">        <span class="keyword">try</span> :</div><div class="line">            result=gzip.decompress(compressData).decode(<span class="string">'utf-8'</span>)</div><div class="line">        <span class="keyword">except</span>:</div><div class="line">            print(<span class="string">'丢包解析异常'</span>)</div><div class="line">            <span class="keyword">continue</span></div><div class="line">        <span class="keyword">if</span> result[:<span class="number">7</span>] == <span class="string">'&#123;"ping"'</span>:</div><div class="line">            ts=result[<span class="number">8</span>:<span class="number">21</span>]</div><div class="line">            <span class="comment">#print('心跳包',ts)</span></div><div class="line">            pong=<span class="string">'&#123;"pong":'</span>+ts+<span class="string">'&#125;'</span></div><div class="line">            ws.send(pong)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">if</span> result[:<span class="number">5</span>] == <span class="string">'&#123;"ch"'</span>:</div><div class="line">                result = json.loads(result)</div><div class="line">                print(result)</div><div class="line">                <span class="comment">#print('------------------------------------------------------')</span></div><div class="line">                n = <span class="number">0</span></div><div class="line">                <span class="keyword">while</span> n &lt; len(result[<span class="string">'tick'</span>][<span class="string">'data'</span>]) :</div><div class="line">                    connect_mysql.commit(<span class="string">'%s'</span> % result[<span class="string">'ch'</span>].split(<span class="string">'.'</span>)[<span class="number">1</span>],result[<span class="string">'tick'</span>][<span class="string">'data'</span>][n][<span class="string">'price'</span>],result[<span class="string">'tick'</span>][<span class="string">'data'</span>][n][<span class="string">'amount'</span>],<span class="string">"'%s'"</span> % result[<span class="string">"tick"</span>][<span class="string">"data"</span>][n][<span class="string">"direction"</span>], <span class="string">"'%s'"</span> % result[<span class="string">'ch'</span>].split(<span class="string">'.'</span>)[<span class="number">1</span>],db);</div><div class="line">                    n += <span class="number">1</span></div><div class="line"></div><div class="line"><span class="comment"># 订阅</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">subCoin</span><span class="params">(ws)</span>:</span></div><div class="line">    tradeStr=getsubconfig()</div><div class="line">    i = <span class="number">0</span></div><div class="line">    <span class="keyword">while</span> i &lt; len(tradeStr) :</div><div class="line">            sub(ws,tradeStr[i])</div><div class="line">            i += <span class="number">1</span></div><div class="line"><span class="comment"># 主函数</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">    ws=connect()</div><div class="line">    subCoin(ws)</div><div class="line">    getResponse(ws)</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    main()</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">### 文件二:</div><div class="line"></div><div class="line">```python</div><div class="line">import json</div><div class="line">import pymysql</div><div class="line">import time</div><div class="line"></div><div class="line">class connect_mysql():</div><div class="line">    db = &apos;&apos;</div><div class="line">    def connect() :</div><div class="line">            db = connect_mysql.db = pymysql.connect(&quot;localhost&quot;, &quot;root&quot;, &quot;root&quot;, &quot;huobi&quot;, charset=&apos;utf8&apos; )</div><div class="line">            return db</div><div class="line"></div><div class="line">    def commit(table, price, amount, action, coin_type, db) :</div><div class="line"></div><div class="line">        try:</div><div class="line">            cursor = db.cursor()</div><div class="line">            sql = &quot;INSERT INTO %s_success_order(action,order_amount, price, coin_type)VALUES (%s, %.10f, %.10f,%s )&quot; % (table,action, amount, price,coin_type )</div><div class="line">            cursor.execute(sql)</div><div class="line">           # 提交到数据库执行</div><div class="line">            db.commit()</div><div class="line">        except Exception as e:</div><div class="line">            db = connect_mysql.db = pymysql.connect(&quot;localhost&quot;, &quot;root&quot;, &quot;root&quot;, &quot;huobi&quot;, charset=&apos;utf8&apos; )</div><div class="line">            commit(table, price, amount, action, coin_type, db)</div><div class="line">        return</div><div class="line"></div><div class="line"></div><div class="line">    def connect_close() :</div><div class="line">        connect_mysql.db.close()</div></pre></td></tr></table></figure><p>文件二是单线程和多线程版的公用文件</p><h1 id="shell-脚本"><a href="#shell-脚本" class="headerlink" title="shell 脚本"></a>shell 脚本</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line">total=1</div><div class="line">avaliable=`ps -ef | grep -w huobi.py | grep -v grep | wc -l`</div><div class="line">diff=`expr $total - $avaliable`</div><div class="line">#echo $diff &gt;&gt; /home/script/diff.text</div><div class="line">#echo $total &gt;&gt; /home/script/diff.text</div><div class="line">#echo $avaliable &gt;&gt; /home/script/diff.text</div><div class="line">if [ $diff -gt 0 ];then</div><div class="line">        for((i=0;i&lt;$diff;i++));do</div><div class="line">                 /usr/local/bin/python3 /home/script/huobi.py &gt;&gt; /home/script/huobi.out</div><div class="line">        done</div><div class="line">fi</div></pre></td></tr></table></figure><h1 id="crontab-配置"><a href="#crontab-配置" class="headerlink" title="crontab 配置"></a>crontab 配置</h1><figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">MAILTO=<span class="string">""</span></div><div class="line"></div><div class="line">* * * * * sudo /bin/bash /home/script/huobi.sh</div></pre></td></tr></table></figure><p><strong>注意事项</strong>：<br>在写shell脚本时，尽量用绝对路径。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;python3&quot;&gt;&lt;a href=&quot;#python3&quot; class=&quot;headerlink&quot; title=&quot;python3&quot;&gt;&lt;/a&gt;python3&lt;/h1&gt;&lt;h2 id=&quot;单线程：&quot;&gt;&lt;a href=&quot;#单线程：&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
    
      <category term="python, shell, crond" scheme="http://yoursite.com/tags/python-shell-crond/"/>
    
  </entry>
  
  <entry>
    <title>一次HTTP请求</title>
    <link href="http://yoursite.com/2017/11/20/%E4%B8%80%E6%AC%A1HTTP%E8%AF%B7%E6%B1%82/"/>
    <id>http://yoursite.com/2017/11/20/一次HTTP请求/</id>
    <published>2017-11-20T12:09:23.000Z</published>
    <updated>2017-11-21T03:01:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>#一次完整的HTTP请求，以及请求方式的区别</p><hr><p>今天在对接业务组mas时候遇到一个很少遇到的问题，发送一个一个不但参数的POST的请求。<br>在我的印象里传参好像必带名字，因为就像一个你不认识的人要来你家，你肯定不会让他进来的。<br>所以重新缕了一下POST请求，冲冲能。</p><p>##一次HTTP请求的过程</p><p>访问某个网址，例如我们访问www.baidu.com<br>浏览器会和百度的服务器进行三次握手（中间的域名解析等暂不考虑）<br>然后是程序层面的信息请求与提交</p><p>三次握手-&gt;get或者post请求</p><p>1） Client首先发送一个连接试探，ACK=0 表示确认号无效，SYN = 1 表示这是一个连接请求或连接接受报文，同时表示这个数据报不能携带数据，seq = x 表示Client自己的初始序号（seq = 0 就代表这是第0号包），这时候Client进入syn_sent状态，表示客户端等待服务器的回复</p><p>2） Server监听到连接请求报文后，如同意建立连接，则向Client发送确认。TCP报文首部中的SYN 和 ACK都置1 ，ack = x + 1表示期望收到对方下一个报文段的第一个数据字节序号是x+1，同时表明x为止的所有数据都已正确收到（ack=1其实是ack=0+1,也就是期望客户端的第1个包），seq = y 表示Server 自己的初始序号（seq=0就代表这是服务器这边发出的第0号包）。这时服务器进入syn_rcvd，表示服务器已经收到Client的连接请求，等待client的确认。</p><p>3） Client收到确认后还需再次发送确认，同时携带要发送给Server的数据。ACK 置1 表示确认号ack= y + 1 有效（代表期望收到服务器的第1个包），Client自己的序号seq= x + 1（表示这就是我的第1个包，相对于第0个包来说的），一旦收到Client的确认之后，这个TCP连接就进入Established状态，就可以发起http请求了。</p><h2 id="post请求"><a href="#post请求" class="headerlink" title="post请求"></a>post请求</h2><p>HTTP 协议是以 ASCII 码传输，建立在TCP/IP协议之上的应用层规范，规范把 HTTP 请求分为三个部分：状态行、请求头、消息主体。类似于下面这样：</p><p><method> <request-url> <version></version></request-url></method></p><p><headers></headers></p><p><entity-body></entity-body><br>协议规定 POST 提交的数据必须放在消息主体（entity-body）中，但协议并没有规定数据必须使用什么编码方式。实际上，开发者完全可以自己决定消息主体的格式，只要最后发送的 HTTP 请求满足上面的格式就可以。</p><p>但是，数据发送出去，还要服务端解析成功才有意义。一般服务端语言如 php、python 等，以及它们的 framework，都内置了自动解析常见数据格式的功能。服务端通常是根据请求头（headers）中的 Content-Type 字段来获知请求中的消息主体是用何种方式编码，再对主体进行解析。所以说到 POST 提交数据方案，包含了 Content-Type 和消息主体编码方式两部分。下面就正式开始介绍它们。</p><p>header<br>Content-Type，内容类型，一般是指网页中存在的Content-Type，用于定义网络文件的类型和网页的编码，决定文件接收方将以什么形式、什么编码读取这个文件.<br>当然还有UA等其他头信息，</p><p>Content-Type对照表：<a href="http://tool.oschina.net/commons" target="_blank" rel="noopener">http://tool.oschina.net/commons</a></p><p>说几种常见的Content-Type</p><p>1.application/x-www-form-urlencoded<br>这个就是我们常见form表格提的方式</p><p>2.multipart/form-data</p><p>这又是一个常见的 POST 数据提交的方式。我们使用表单上传文件时，必须让 form 的 enctyped 等于这个值。直接来看一个请求示例</p><p>3.application/json</p><p>application/json 这个 Content-Type 作为响应头大家肯定不陌生。实际上，现在越来越多的人把它作为请求头，用来告诉服务端消息主体是序列化后的 JSON 字符串。由于 JSON 规范的流行，除了低版本 IE 之外的各大浏览器都原生支持 JSON.stringify，服务端语言也都有处理 JSON 的函数，使用 JSON 不会遇上什么麻烦。</p><p>so 用这种格式就可以传递非Key Val的数据</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#一次完整的HTTP请求，以及请求方式的区别&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;今天在对接业务组mas时候遇到一个很少遇到的问题，发送一个一个不但参数的POST的请求。&lt;br&gt;在我的印象里传参好像必带名字，因为就像一个你不认识的人要来你家，你肯定不会让他进来的。&lt;br&gt;所以重新缕了一
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>PHPExcel</title>
    <link href="http://yoursite.com/2017/10/30/PHPExecel/"/>
    <id>http://yoursite.com/2017/10/30/PHPExecel/</id>
    <published>2017-10-30T02:42:03.000Z</published>
    <updated>2018-06-19T10:36:01.359Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PHPEXcel"><a href="#PHPEXcel" class="headerlink" title="PHPEXcel"></a>PHPEXcel</h1><hr><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在工作中我们肯定会遇到由于后端管理系统不完善，而导致运营同学无法从管理系统获取想要的数据。亦或程序设计之初没有考虑到完善，导致一些必要的数据没有录入，希望后续补充批量导入。在这个时候我们就需要获取从数据批量导出数据或者导入数据，而无论导入还是导出数据，我们都希望是Excel格式。</p><h2 id="根据Execel生成sql"><a href="#根据Execel生成sql" class="headerlink" title="根据Execel生成sql"></a>根据Execel生成sql</h2><p>1.PHPExcel</p><p>准备：我们需要从github获取PHPExcel工具包。地址 <code>https://github.com/PHPOffice/PHPExcel</code> </p><p>打开PHPExcel文件夹，看下代码结构。我们需要的主要代码在<code>Classes</code>文件下，我们只需要引入<code>PHPExcel.php</code>即可。</p><p>代码实现<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">include</span> <span class="string">'./code/web_code/PHPExcel/Classes/PHPExcel.php'</span>;<span class="comment">//引入必要的第三方依赖</span></div><div class="line">$inputFileType = <span class="string">'Excel2007'</span>;<span class="comment">//设置Excel的版本</span></div><div class="line">$inputFileName = <span class="string">'./targe.xlsx'</span>;<span class="comment">// 需要导入文件地址</span></div><div class="line"></div><div class="line"></div><div class="line">$currentsheet = $objPHPExcel-&gt;getSheet(<span class="number">0</span>); <span class="comment">//选择Excel页</span></div><div class="line">$maxColumn = $currentsheet-&gt;getHighestColumn(); <span class="comment">//获取当前页的最大列数</span></div><div class="line">$maxRow = $currentsheet-&gt;getHighestRow(); <span class="comment">//获取当前页的最大行数</span></div><div class="line"></div><div class="line"><span class="comment">//循环拼接sql</span></div><div class="line"><span class="keyword">for</span> ($i=<span class="number">2</span>; $i&lt; $maxRow; $i++) &#123; </div><div class="line">    <span class="comment">//过滤条件</span></div><div class="line">     <span class="keyword">if</span>(is_null($currentsheet-&gt;getCell(<span class="string">'J'</span>.$i)-&gt;getValue())||$currentsheet-&gt;getCell(<span class="string">'J'</span>.$i)-&gt;getValue()== <span class="string">'已退款'</span> || $currentsheet-&gt;getCell(<span class="string">'J'</span>.$i)-&gt;getValue() == <span class="string">'待退款'</span> || $currentsheet-&gt;getCell(<span class="string">'J'</span>.$i)-&gt;getValue() == <span class="string">'已经申请退款'</span> || $currentsheet-&gt;getCell(<span class="string">'J'</span>.$i)-&gt;getValue() == <span class="string">'退了'</span> ||$currentsheet-&gt;getCell(<span class="string">'J'</span>.$i)-&gt;getValue() == <span class="string">'没有电话'</span> || $currentsheet-&gt;getCell(<span class="string">'J'</span>.$i)-&gt;getValue() == <span class="string">'0'</span>) &#123;</div><div class="line"></div><div class="line">        <span class="keyword">continue</span>;</div><div class="line">     &#125;</div><div class="line">     <span class="comment">//过滤条件</span></div><div class="line">     <span class="keyword">if</span>(!is_numeric($currentsheet-&gt;getCell(<span class="string">'J'</span>.$i)-&gt;getValue())||$currentsheet-&gt;getCell(<span class="string">'J'</span>.$i)-&gt;getValue() == <span class="string">'0'</span> || <span class="keyword">empty</span>($currentsheet-&gt;getCell(<span class="string">'J'</span>.$i)-&gt;getValue()) || $currentsheet-&gt;getCell(<span class="string">'J'</span>.$i)-&gt;getValue() == <span class="string">''</span>) &#123;</div><div class="line">        <span class="keyword">continue</span>;</div><div class="line">     &#125;</div><div class="line"></div><div class="line">    $sql_bd_name .= <span class="string">' WHEN '</span>.$currentsheet-&gt;getCell(<span class="string">'A'</span>.$i)-&gt;getValue().<span class="string">' THEN '</span>.$currentsheet-&gt;getCell(<span class="string">'J'</span>.$i)-&gt;getValue();</div><div class="line">    $sql_bd_name .= <span class="string">','</span>.$currentsheet-&gt;getCell(<span class="string">'A'</span>.$i)-&gt;getValue();</div><div class="line">    $res +=<span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//输入，当然这里无论我们用fopen或者其他的输入当属都可以，这里我把结果打到了控制台。</span></div><div class="line"><span class="keyword">echo</span> $sql_bd_name;</div><div class="line"><span class="keyword">echo</span> $res</div></pre></td></tr></table></figure></p><p>我们生成的sql是<code>WHEN</code>  <code>THEN</code>的样式，完整语句应该是 update tablename set seller_jn_activity CASE id<br>WHEN 1 TEHN 2<br>END,<br>bd_jn_activity CASE id<br>when 2 THEN 3<br>END<br>WHERE in (1,2,3)</p><p>发现数据清洗其实是一件很麻烦的事。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;PHPEXcel&quot;&gt;&lt;a href=&quot;#PHPEXcel&quot; class=&quot;headerlink&quot; title=&quot;PHPEXcel&quot;&gt;&lt;/a&gt;PHPEXcel&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>&#39;laravel学习笔记四中间件&#39;</title>
    <link href="http://yoursite.com/2016/03/02/laravel%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%9B%9B%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    <id>http://yoursite.com/2016/03/02/laravel学习笔记四中间件/</id>
    <published>2016-03-02T11:44:12.000Z</published>
    <updated>2018-06-19T10:35:54.667Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Laravel-学习笔记四Http中间件"><a href="#Laravel-学习笔记四Http中间件" class="headerlink" title="Laravel 学习笔记四Http中间件"></a>Laravel 学习笔记四Http中间件</h1><p>标签（空格分隔）： laravel</p><hr><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>  关于中间件，从字面意思上我们很好理解中间件的意思。就是存在两个节点之间的节点。这里我们所描述的节点是<code>Route</code>和<code>Controller</code>。</p><p>  一次正产给的请求是客户端发送请求，服务端接受请求，然后对参数做一些判断然后处理逻辑。任何请求都会从进入控制器开始就直接进入真正的逻辑处理，我们会先判断请求参数是否正确，以防止黑客攻击。比较常见的处理逻辑反馈有403、503页面。这些是我们在接受参数后对参数进行处理，从而反馈到客户端。如果我们传递参数较多，对参数筛选很严格的话，就会出现很多对参数判断的代码，以及当一些对参数判断的代码需要复用时候我们无法将其从控制器中分离出来，这些都是我们平常工作中饭经常遇到的问题。这是<code>中间件</code>就能很好地处理这个问题了。</p><p>  间件的作用是在请求从<code>Route</code>进入控制器是时，我们可以先将请求引入到中间件中，对数据做些处理，然后才引入到控制器中，或者直接反馈给客户端。这样我们的控制器可以专心于数据逻辑，从而代码简洁，以及参数判断代码会得到复用，很大的提升工作效率。</p><h3 id="创建一个控制器"><a href="#创建一个控制器" class="headerlink" title="创建一个控制器"></a>创建一个控制器</h3><p>第一步我们来创建一个中间件。在<code>larval</code>中，自带了一条命令用来创建中间件。<code>php artisan make:middleware CheckAge</code> 。我们可以用此命令创建一个<code>CheckAge</code>的中间，用来过滤用户的年龄。穿件代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line"></div><div class="line">namespace App\Http\Middleware;</div><div class="line"></div><div class="line">use Closure;</div><div class="line"></div><div class="line">class CheckAge</div><div class="line">&#123;</div><div class="line">    /**</div><div class="line">     * 运行请求过滤器。</div><div class="line">     *</div><div class="line">     * @param  \Illuminate\Http\Request  $request</div><div class="line">     * @param  \Closure  $next</div><div class="line">     * @return mixed</div><div class="line">     */</div><div class="line">    public function handle($request, Closure $next)</div><div class="line">    &#123;</div><div class="line">        if ($request-&gt;age &lt;= 200) &#123;</div><div class="line">            return redirect(&apos;home&apos;);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        return $next($request);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p> 当然在这里少不了路由的代码，我们的请求先到路由，然后到中间件最后到控制器。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Route::get(&apos;getuser/user/&#123;id&#125;/age/&#123;age&#125;&apos;,UserController@getUser)-&gt;middleware(&apos;CheckAge&apos;);</div></pre></td></tr></table></figure></p><p> 在这段代码中我们把所有请求age大于200的重定向到<code>home</code>中，佛则就继续，这样就是实现了参数过滤。这就是中间件的基本作用。</p><h1 id="注册中间件"><a href="#注册中间件" class="headerlink" title="注册中间件"></a>注册中间件</h1><p> 我们的中间件在使用前，是需要注册的。否则我们无法正常调用到我们的中间件。这个注册文件在<code>app/Http/Kernel.php</code>中。我们打开这个文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line"></div><div class="line">namespace App\Http;</div><div class="line"></div><div class="line">use Illuminate\Foundation\Http\Kernel as HttpKernel;</div><div class="line"></div><div class="line">class Kernel extends HttpKernel</div><div class="line">&#123;</div><div class="line">    // 这里注册是全局的中间件，在所有的都需要经过这个中间件来过滤信息，无论是来之web的请求还是API的///请求</div><div class="line">    protected $middleware = [</div><div class="line">        \Illuminate\Foundation\Http\Middleware\CheckForMaintenanceMode::class,</div><div class="line">    ];</div><div class="line"></div><div class="line">    // 中间件群组，在这里我们可以注册中间件群组，用来给请求批量的添加空间。这里laravel中web请求默认     //都必须经过web群组的中间的过滤，api请求需要经过api群组的中间件过滤。使用实例在下边已经给出。</div><div class="line">    protected $middlewareGroups = [</div><div class="line">        &apos;web&apos; =&gt; [</div><div class="line">            \App\Http\Middleware\EncryptCookies::class,</div><div class="line">            \Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse::class,</div><div class="line">            \Illuminate\Session\Middleware\StartSession::class,</div><div class="line">            \Illuminate\View\Middleware\ShareErrorsFromSession::class,</div><div class="line">            \App\Http\Middleware\VerifyCsrfToken::class,</div><div class="line">        ],</div><div class="line"></div><div class="line">        &apos;api&apos; =&gt; [</div><div class="line">            &apos;throttle:60,1&apos;,</div><div class="line">        ],</div><div class="line">    ];</div><div class="line">    </div><div class="line">    // 非全局的中间件，单独给某些路由指定下面的中间件（用户自己编写）。</div><div class="line">    protected $routeMiddleware = [</div><div class="line">        &apos;auth&apos; =&gt; \App\Http\Middleware\Authenticate::class,</div><div class="line">        &apos;auth.basic&apos; =&gt; \Illuminate\Auth\Middleware\AuthenticateWithBasicAuth::class,</div><div class="line">        &apos;can&apos; =&gt; \Illuminate\Foundation\Http\Middleware\Authorize::class,</div><div class="line">        &apos;guest&apos; =&gt; \App\Http\Middleware\RedirectIfAuthenticated::class,</div><div class="line">        &apos;throttle&apos; =&gt; \Illuminate\Routing\Middleware\ThrottleRequests::class,</div><div class="line">    ];</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>群组使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Route::group([&apos;middleware&apos; =&gt; [&apos;web&apos;]], function () &#123;</div><div class="line">    //</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p><p>我们可以看出这个<code>Kernel.php</code>文件中有是哪个属性，分别为 <code>protected $middleware</code> <code>protected $middlewareGroups</code> <code>protected $routeMiddleware</code> 这三个属性分别用来注册<code>全局中间件</code> <code>群组中间件</code> <code>和自定义中间件</code>。</p><h3 id="特殊中间件"><a href="#特殊中间件" class="headerlink" title="特殊中间件"></a>特殊中间件</h3><p>在中间件中用连个比较特殊的中间件，分别为<code>前置中间件</code> <code>和后置中间件</code>。顾名思义，前置中间件就是在请求前运作的，后置中间件就是在请求后运作的。这有什么用呢？我们可以在这里举一个栗子：</p><p>在正常的项目中我们肯定要记录一些数据操作记录，用来跟踪每次请求的逻辑处理。方便我们在项目出现bug时候跟踪数据。<br>在laravel中我们用下面函数来进行sql语句的记录：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">DB::enableQueryLog();</div><div class="line">DB::getQueryLog();</div></pre></td></tr></table></figure></p><p>我们可以将<code>DB::enableQueryLog()</code> 放在需要记录sql语句的请求的前置中间件中，用来开启sql记录。将<code>DB::getQueryLog()</code>放在需要记录请求的后置中间件中，记录所执行的sql。</p><p>这就是中间件的作用。</p><h3 id="中间件参数"><a href="#中间件参数" class="headerlink" title="中间件参数"></a>中间件参数</h3><p>在调取中间件时，我们可以穿的附加参数。例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line"></div><div class="line">namespace App\Http\Middleware;</div><div class="line"></div><div class="line">use Closure;</div><div class="line"></div><div class="line">class CheckRole</div><div class="line">&#123;</div><div class="line">    /**</div><div class="line">     * 处理传入的请求</div><div class="line">     *</div><div class="line">     * @param  \Illuminate\Http\Request  $request</div><div class="line">     * @param  \Closure  $next</div><div class="line">     * @param  string  $role</div><div class="line">     * @return mixed</div><div class="line">     */</div><div class="line">    public function handle($request, Closure $next, $role)</div><div class="line">    &#123;</div><div class="line">        if (! $request-&gt;user()-&gt;hasRole($role)) &#123;</div><div class="line">            // Redirect...</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        return $next($request);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>传递指定参数可以:隔开<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Route::put(&apos;post/&#123;id&#125;&apos;, function ($id) &#123;</div><div class="line">    //</div><div class="line">&#125;)-&gt;middleware(&apos;role:editor&apos;);</div></pre></td></tr></table></figure></p><p>好了，本节就到此为止了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Laravel-学习笔记四Http中间件&quot;&gt;&lt;a href=&quot;#Laravel-学习笔记四Http中间件&quot; class=&quot;headerlink&quot; title=&quot;Laravel 学习笔记四Http中间件&quot;&gt;&lt;/a&gt;Laravel 学习笔记四Http中间件&lt;/h1&gt;&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Laravel学习笔记三控制器</title>
    <link href="http://yoursite.com/2016/02/16/Laravel%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%89%E6%8E%A7%E5%88%B6%E5%99%A8/"/>
    <id>http://yoursite.com/2016/02/16/Laravel学习笔记三控制器/</id>
    <published>2016-02-16T13:26:25.000Z</published>
    <updated>2018-06-19T10:35:54.664Z</updated>
    
    <content type="html"><![CDATA[<p>标签（空格分隔）： Laravel</p><hr><p>关于laravel我们学习了如何配置laravel、以及路由。接下来让然是至关重要的控制器了。<br>在MVC框架中，C是一个很重要的环节。用来处理我们的数据逻辑。</p><p>我们之前在学习路由是后，是给Route::get()第二个参数一个闭包函数。当然能处理一些数据逻辑，但是如果我们所有的数据逻辑都放在路由文件，那么我们路由文件将会特别臃肿，而且我们的代码耦合度会特别高。这也就回到php面向过程的时代，这不是我们所想要的。</p><p>在我们的面向对象的思维中，是把不同功能的代码封装成一个一个类，各自处理自己流水线上的数据。所以我们要通过路由把必要的参数传给我们的控制器去处理。</p><p>在这里看到一个小插曲，Laravel官方文档说在上线前使用<code>php artisan route:cache</code>会让路由速度快上一百倍，我不知道这是不是吹牛逼。废话不多说我们开始我们的控制器学习吧。</p><p>###控制器到路由###</p><p> 在第一步我们需要把访问到路由的请求转到控制器。在Laravel中使用下边代码即可：<br> <figure class="highlight plain"><figcaption><span>'UserController@show');```</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">  我们可以把客户的请求跳转到 App/Http/Controller下的UserController的show方法。</div><div class="line">  </div><div class="line">  在这里laravel给我们提供很好的工具让我们来创建控制器。使用`php artisan make:controller NameController` 。默认会出现App/Http/Controller 路径下。并且还有一些级基础代码。</div><div class="line">```&lt;?php</div><div class="line"></div><div class="line">namespace App\Http\Controllers;</div><div class="line"></div><div class="line">use Illuminate\Http\Request;</div><div class="line">use App\Http\Controllers\Controller;</div><div class="line"></div><div class="line">class NameController extends Controller</div><div class="line">&#123;</div><div class="line">    //</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>###传递参数到控制器###</p><p>我们看到在自动生成代码中我们看到引入了<code>Request</code> 类。这个类要讲起来其实可以单独讲，但是我们学到控制器就稍微讲一下，不然没法传递参数。如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">public function index(Request $request)&#123;</div><div class="line">   $name = $request-&gt;input(&apos;name&apos;);</div><div class="line"></div><div class="line">   &#125;</div></pre></td></tr></table></figure></p><p>用该方法可以获取到我们想要的参数。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;标签（空格分隔）： Laravel&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;关于laravel我们学习了如何配置laravel、以及路由。接下来让然是至关重要的控制器了。&lt;br&gt;在MVC框架中，C是一个很重要的环节。用来处理我们的数据逻辑。&lt;/p&gt;
&lt;p&gt;我们之前在学习路由是后，是给Rou
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>&#39;laravel学习笔记二路由&#39;</title>
    <link href="http://yoursite.com/2016/02/09/laravel%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%8C%E8%B7%AF%E7%94%B1/"/>
    <id>http://yoursite.com/2016/02/09/laravel学习笔记二路由/</id>
    <published>2016-02-09T14:09:19.000Z</published>
    <updated>2018-06-19T10:35:54.670Z</updated>
    
    <content type="html"><![CDATA[<p>laravel框架安装好之后我们就要开始熟悉laravel框架的内部结构。<br>我们主要是从这个几个方便来学习laravel：</p><ul><li>route 路由</li><li>controller 控制器</li><li>blade 模板</li><li>model 模型</li></ul><p>今天我们主要讲路由。</p><h3 id="laravel-route"><a href="#laravel-route" class="headerlink" title="laravel-route"></a>laravel-route</h3><p>可能我们在学习laravel之前已经接触过一些框架例如：yii，tp,ci。<br>但是他们都没有laravel所带的路由系统强大，我们现在开始介绍laravel框架的路由。</p><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><p>最基本的路由接受的是一个闭包函数，直接返回值，例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Roure::get(&apos;/&apos;,funcition()&#123;</div><div class="line">return &apos;this is Route&apos;&#125;)</div></pre></td></tr></table></figure></p><p>我们在 <strong>/routes/web.php</strong> 里注册该路由即可返回 <code>this us Route</code>。当然laravel路由所能接受的请求方式不仅仅是get还要post put 等等法法，示例如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Route::get($uri, $callback);</div><div class="line">Route::post($uri, $callback);</div><div class="line">Route::put($uri, $callback);</div><div class="line">Route::patch($uri, $callback);</div><div class="line">Route::delete($uri, $callback);</div><div class="line">Route::options($uri, $callback);</div></pre></td></tr></table></figure></p><h3 id="带参数访问"><a href="#带参数访问" class="headerlink" title="带参数访问"></a>带参数访问</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Roure::get(&apos;/&#123;id&#125;&apos;,function($id)&#123;</div><div class="line">return &apos;user id is &apos;.$id</div><div class="line">&#125;)</div></pre></td></tr></table></figure><p> 当然也可以带多参数访问</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Route::get(&apos;/id/&#123;id&#125;/name/&#123;name&#125;&apos;,function($id,$name)&#123;</div><div class="line">//</div><div class="line">&#125;)</div></pre></td></tr></table></figure><p> 让然也可以传递一个可选参数 ,但是我们需要用<code>？</code>来标记该参数，还给予他默认值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Route::get(&apos;/name/&#123;name&#125;?&apos;,function($name=&apos;Maxie&apos;)&#123;</div><div class="line">//</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p><h3 id="路由命名"><a href="#路由命名" class="headerlink" title="路由命名"></a>路由命名</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Roure::get(&apos;/&apos;,funcition()&#123;</div><div class="line">return &apos;this is Route&apos;&#125;)-&gt;name(&apos;index&apos;)</div></pre></td></tr></table></figure><p>我们可以给路由命名一个名字，让我们在模板中使用rul函数可以解析到我们所命名的路由<code>url(&#39;index&#39;)</code>。这些我们在模板中在细讲</p><h3 id="路由群组"><a href="#路由群组" class="headerlink" title="路由群组"></a>路由群组</h3><p>路由群组是一个很好东西，我们在开发中很定会给我们的项目分不同模块。例如用户模块，商户模块。这时候我么会给他们加上不同的命名空间，我们可以通过路由群组把我们注册的路由也分类，很方便我们的访问。例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Route::groun([&apos;namespace&apos;=&gt;&apos;user&apos;],function()&#123;</div><div class="line">//我们可以在此注册我们的路由，路由控制器路由会在App/Http/Controller/user 下</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p><p> 当让我们可以在群组里继续注册群组，在这里我们不多做演示。</p><h2 id="路由绑定到控制器"><a href="#路由绑定到控制器" class="headerlink" title="路由绑定到控制器"></a>路由绑定到控制器</h2><p>这是我们最关键的地方，一般我们通过访问URI都会想传递参数给我们的控制器，当然laravel还给我们提供了中间件让我们在路路由控制器之间或者路由玉模板之前做一个参数处理或者过滤，我们在此不做演示。后边我们会详细解释，现在我们详细解释路由有绑定到控制器，想必这是你我最关系的。<br>路由绑定到控制器只需要：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Roure::get(&apos;/&apos;,&apos;UserController@showProfile&apos;)</div></pre></td></tr></table></figure></p><p>这样既可绑定我么你的路由到控制器。</p><h2 id="路由绑定绑定到视图"><a href="#路由绑定绑定到视图" class="headerlink" title="路由绑定绑定到视图"></a>路由绑定绑定到视图</h2><p>有很多的访问不需要我们做处理，只需展示一些东西既可，我么你可以直接把路由绑定到视图</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Route::get(&apos;/&apos;,function()&#123;</div><div class="line">return view(&apos;welcom&apos;)</div><div class="line">&#125;)</div><div class="line"></div><div class="line">这也是我们刚刚配置完laravel时候路由web.php唯一注册一个路由</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;laravel框架安装好之后我们就要开始熟悉laravel框架的内部结构。&lt;br&gt;我们主要是从这个几个方便来学习laravel：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;route 路由&lt;/li&gt;
&lt;li&gt;controller 控制器&lt;/li&gt;
&lt;li&gt;blade 模板&lt;/li&gt;
&lt;li
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>laravel学习笔记</title>
    <link href="http://yoursite.com/2016/02/08/larave%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2016/02/08/larave学习笔记/</id>
    <published>2016-02-08T14:10:05.000Z</published>
    <updated>2018-07-12T13:56:07.558Z</updated>
    
    <content type="html"><![CDATA[<h1 id="laravel-学习笔记"><a href="#laravel-学习笔记" class="headerlink" title="laravel-  学习笔记"></a>laravel-  学习笔记</h1><hr><h2 id="laravel-配置篇"><a href="#laravel-配置篇" class="headerlink" title="laravel 配置篇"></a>laravel 配置篇</h2><p>lavel 有三种安装方法：</p><ul><li>使用composer安装</li><li>使用laravel安装器安装</li><li>下载解压安装</li></ul><h3 id="composer"><a href="#composer" class="headerlink" title="composer"></a>composer</h3><p>先说第一种，使用composer安装，使用 composer create-project 进行安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">composer create-project --prefer-dist laravel/laravel blog</div></pre></td></tr></table></figure></p><h3 id="laravel安装器"><a href="#laravel安装器" class="headerlink" title="laravel安装器"></a>laravel安装器</h3><p> 使用laravel安装器首先需要安装laravel安装器，让我们来使用composer安装laravel安装器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">composer global require &quot;laravel/installer&quot;</div></pre></td></tr></table></figure><p>当然我们在使用laravel安装器安装laravel之前，需要配置PATH环境变量，不然系统找不到laravel安装器<br>laravel安装器默认位置<br>Windows:<br><code>C:\Users\admin\AppData\Roaming\Composer\vendor\bin</code><br>linux:<br><code>~/.composer/vendor/bin</code></p><h3 id="下载解压安装"><a href="#下载解压安装" class="headerlink" title="下载解压安装"></a>下载解压安装</h3><p>因为composer可能被墙，所以golaravel给出了已经集成了所有以来的laravel意见安装包<br>下载地址为<code>http://www.golaravel.com/download/</code></p><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>laravel所有的配置文件都在根目录conf文件夹下<br>当然我们不能忽视的一个很重的一点，就是要设置laravel的应用key，如果不加以设置，我的会话和其他需要加密的信息将会不安全，让然我们通过composer或者laravel安装器安装的laravel不需要进行配置，因为在我们安装laravel时候composer和laravel已经给我们配置好了，所以通过第三种方法安装laravel的，需要为laravel配置新的key，生成key的方法是，在laravel根目录输入<code>key:generate</code>.<br>laravel所有的配置都是conf文件夹下的，但是为了方便配置，laravel调用根目录的.env,我们配置框架最关键的数据库信息卸载根目录的.env文件里</p><h1 id="开发服务器"><a href="#开发服务器" class="headerlink" title="开发服务器"></a>开发服务器</h1><p>laravel为我们提供了一个简单的开发服务器，当我需要时只需要在跟路面输入命令<code>php artisan serve</code>即可。但是这毕竟是开发使用过的，不能再生产环境中使用。</p><p>#laravel其他<br>laravel还为我们提供很多其他功能，具体我就不在此赘述，需要请看官网。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;laravel-学习笔记&quot;&gt;&lt;a href=&quot;#laravel-学习笔记&quot; class=&quot;headerlink&quot; title=&quot;laravel-  学习笔记&quot;&gt;&lt;/a&gt;laravel-  学习笔记&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;laravel-配置篇&quot;&gt;&lt;a 
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>php curl</title>
    <link href="http://yoursite.com/2015/07/18/php-curl/"/>
    <id>http://yoursite.com/2015/07/18/php-curl/</id>
    <published>2015-07-18T12:28:10.000Z</published>
    <updated>2018-07-18T12:47:59.013Z</updated>
    
    <content type="html"><![CDATA[<h3 id="参数1"><a href="#参数1" class="headerlink" title="参数1"></a>参数1</h3><p>curl_setopt<br>CURLOPT_RETURNTRANSFER 表示是否直接输出到控制台<br> eg:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$curl = curl_init();</div><div class="line">curl_setopt($curl, CURLOPT_URL, <span class="string">'http://baidu.com'</span>);</div><div class="line">curl_setopt($curl, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);</div><div class="line">curl_setopt($curl, CURLOPT_HEADER, <span class="number">0</span>);</div><div class="line"><span class="comment">// curl_setopt($curl, CURLOPT_POST, 1);</span></div><div class="line">$ret = curl_exec($curl);</div><div class="line"><span class="comment">// var_dump($ret);</span></div></pre></td></tr></table></figure><p>输出结果为:</p><p><img src="/photo/img/php-curl/DingTalk20180718203726.png" alt="image"></p><p>打开参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">$curl = curl_init();</div><div class="line">curl_setopt($curl, CURLOPT_URL, &apos;http://baidu.com&apos;);</div><div class="line">curl_setopt($curl, CURLOPT_RETURNTRANSFER, 0);</div><div class="line">curl_setopt($curl, CURLOPT_HEADER, 0);</div><div class="line">// curl_setopt($curl, CURLOPT_POST, 1);</div><div class="line">$ret = curl_exec($curl);</div><div class="line">// var_dump($ret);</div></pre></td></tr></table></figure><p>输出结果</p><p><img src="/photo/img/php-curl/DingTalk20180718204055.png" alt="image"></p><h3 id="参数2"><a href="#参数2" class="headerlink" title="参数2"></a>参数2</h3><p>CURLOPT_HEADER<br>CURLOPT_HEADER 表示是否输出头信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">$curl = curl_init();</div><div class="line">curl_setopt($curl, CURLOPT_URL, &apos;http://baidu.com&apos;);</div><div class="line">curl_setopt($curl, CURLOPT_RETURNTRANSFER, 0);</div><div class="line">curl_setopt($curl, CURLOPT_HEADER, 1);</div><div class="line">// curl_setopt($curl, CURLOPT_POST, 1);</div><div class="line">$ret = curl_exec($curl);</div><div class="line">// var_dump($ret);</div></pre></td></tr></table></figure><p>返回结果<br><img src="/photo/img/php-curl/DingTalk20180718204343.png" alt="image"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">$curl = curl_init();</div><div class="line">curl_setopt($curl, CURLOPT_URL, &apos;http://baidu.com&apos;);</div><div class="line">curl_setopt($curl, CURLOPT_RETURNTRANSFER, 0);</div><div class="line">curl_setopt($curl, CURLOPT_HEADER, 0);</div><div class="line">// curl_setopt($curl, CURLOPT_POST, 1);</div><div class="line">$ret = curl_exec($curl);</div><div class="line">// var_dump($ret);</div></pre></td></tr></table></figure><p>返回结果<br><img src="/photo/img/php-curl/DingTalk20180718204411.png" alt="image"></p><h2 id="get-与-post"><a href="#get-与-post" class="headerlink" title="get 与 post"></a>get 与 post</h2><p><code>get</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">//初始化</div><div class="line">$curl = curl_init();</div><div class="line">//设置url</div><div class="line">curl_setopt($curl, CURLOPT_URL, &apos;http://baidu.com&apos;);</div><div class="line">curl_setopt($curl, CURLOPT_RETURNTRANSFER, 0);</div><div class="line">curl_setopt($curl, CURLOPT_HEADER, 0);</div><div class="line">$ret = curl_exec($curl);</div><div class="line">//关闭</div><div class="line">curl_close($curl);</div></pre></td></tr></table></figure></p><p><code>post</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">//初始化</div><div class="line">$curl = curl_init();</div><div class="line">//设置url</div><div class="line">curl_setopt($curl, CURLOPT_URL, &apos;http://baidu.com&apos;);</div><div class="line">curl_setopt($curl, CURLOPT_RETURNTRANSFER, 0);</div><div class="line">curl_setopt($curl, CURLOPT_HEADER, 0);</div><div class="line">curl_setopt($curl, CURLOPT_POST, 1);</div><div class="line">$ret = curl_exec($curl);</div><div class="line">//关闭</div><div class="line">curl_close($curl);</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;参数1&quot;&gt;&lt;a href=&quot;#参数1&quot; class=&quot;headerlink&quot; title=&quot;参数1&quot;&gt;&lt;/a&gt;参数1&lt;/h3&gt;&lt;p&gt;curl_setopt&lt;br&gt;CURLOPT_RETURNTRANSFER 表示是否直接输出到控制台&lt;br&gt; eg:&lt;/p&gt;
&lt;fi
      
    
    </summary>
    
    
      <category term="curl" scheme="http://yoursite.com/tags/curl/"/>
    
  </entry>
  
  <entry>
    <title>github</title>
    <link href="http://yoursite.com/2015/06/26/github/"/>
    <id>http://yoursite.com/2015/06/26/github/</id>
    <published>2015-06-26T14:04:09.000Z</published>
    <updated>2018-06-19T10:35:14.525Z</updated>
    
    <content type="html"><![CDATA[<h2 id="关于Git的使用"><a href="#关于Git的使用" class="headerlink" title="#关于Git的使用  "></a>#关于Git的使用  </h2><h2 id="Git的安装和使用"><a href="#Git的安装和使用" class="headerlink" title="Git的安装和使用"></a>Git的安装和使用</h2><p> 准备工作：</p><blockquote><ul><li>下载git 客户端 <a href="https://git-scm.com/download/win" target="_blank" rel="noopener">链接地址</a></li></ul></blockquote><p>下载完毕后，安装一路一下一步。<br>安装完成之后我们开始使用Git<br>使用前我们需要告诉Git，我们是谁。所以需要配置一些信息，来确定我们的身份。</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git config –global user.name “用户名”</div><div class="line">git config –global user.email “邮箱”</div></pre></td></tr></table></figure><p>第一条命令用来告诉 git 我们的名字（以后链接github）<br>第二条命令用来告诉git 我们的邮箱</p><p>到此我们就可以使用Git了</p><h2 id="链接github"><a href="#链接github" class="headerlink" title="链接github"></a>链接github</h2><p>如果我们希望把自己的项目托管在github我们就需要再做一些配置</p><p>首先我们需要生成ssh,使用以下命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh-keygen –t rsa –C</div></pre></td></tr></table></figure></p><ol><li>然后他提示的默认路径生成一些文件，或者你自己配置路径。 在生成过程中会让你输入密码，可以不输入，一路回车<br>生成完毕后，会在你选择路径下生成两个文件 一个是 .rsa 一个是 .pub 我们这里只需要.pub里的内容 复制里边的内容</li><li>接下来我们需要把文件里的key添加到我们的github账号里。 首先我们登陆我们的github账号。 然后在设置里 NEW SSH KEY 添加描述然后把我们的key复制到里边即可。</li></ol><p>不过在提交之前我们还需要做一些配置来确定我们需要把当前库的代码推送到github账号的哪个库里<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git remote add origin git@github.com:aaa/xxx</div></pre></td></tr></table></figure></p><p>在上边的配置的命令中，aaa表示的我们的github账号。xxx使我们的库文件。<br>以后就可以使用git来进行版本管理和推送到github里了。<br>正常操作代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">git status</div><div class="line">git add .</div><div class="line">git commit -a &apos;message&apos;</div><div class="line">git push</div></pre></td></tr></table></figure></p><p>提交完毕。</p><p>如果我们需要在其他电脑上使用我们托管的代码，我们需要使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git pull</div></pre></td></tr></table></figure></p><p>或者<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git colne &apos;address&apos;</div></pre></td></tr></table></figure></p><p>来从github上获取我们所需要的代码</p><p>如果在配置过程中出现错误，按照提示的代码解决即可。<br>当然在此如果我们直接使用了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git commit -a</div></pre></td></tr></table></figure></p><p>会弹出来vim窗口，在这里写一些vim的命令<br>在非insert状态下我们使用ctrl+d来批量选择#，然后按d删除</p><p>在飞插入模式写:wq 保存并推出</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;关于Git的使用&quot;&gt;&lt;a href=&quot;#关于Git的使用&quot; class=&quot;headerlink&quot; title=&quot;#关于Git的使用  &quot;&gt;&lt;/a&gt;#关于Git的使用  &lt;/h2&gt;&lt;h2 id=&quot;Git的安装和使用&quot;&gt;&lt;a href=&quot;#Git的安装和使用&quot; cla
      
    
    </summary>
    
    
  </entry>
  
</feed>
