<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Maxie&#39;blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-02-15T07:52:08.730Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>MaxieLj</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>数据库-索引的使用优化</title>
    <link href="http://yoursite.com/2019/02/15/%E6%95%B0%E6%8D%AE%E5%BA%93-%E7%B4%A2%E5%BC%95%E4%BD%BF%E7%94%A8%E4%BC%98%E5%8C%96/"/>
    <id>http://yoursite.com/2019/02/15/数据库-索引使用优化/</id>
    <published>2019-02-15T07:10:57.000Z</published>
    <updated>2019-02-15T07:52:08.730Z</updated>
    
    <content type="html"><![CDATA[<p>数据库索引使用的优化</p><h2 id="索引的选择"><a href="#索引的选择" class="headerlink" title="索引的选择"></a>索引的选择</h2><h3 id="B-tree"><a href="#B-tree" class="headerlink" title="B-tree"></a>B-tree</h3><p>特点：</p><ul><li><code>B-tree</code>索引用<code>B+tree</code>实现，</li><li>适合范围查找</li><li>适合精确查找</li></ul><h4 id="使用注意"><a href="#使用注意" class="headerlink" title="使用注意"></a>使用注意</h4><p>创建索引（user_name,user_num,city）。</p><ul><li>全值匹配，查询条件包括user_name、user_num、city全部条件。</li><li><strong>最左匹配</strong>，有限匹配最左索引列，上述所以可以匹配（user_name）、（user_name,user_num）、（user_name,user_num，city）这样的查询条件，但是如果我们使用（user_num,city）则无法使用用索引。如果使用(user_name,city)查询条件，则只会使用user_name索引，这就是最左匹配原则。</li><li>可匹配列前缀，例如：user_name like ‘li%’.</li><li>可用作范围查询，例如(user_name= ‘li’ and user_num &gt; 20)</li><li><strong>联合索引</strong>，建立索引时，经常使用的列优先，辨识度高的索引放前边，长度小的优先。</li><li><strong>如果可以使用联合索引</strong>，可以减少磁盘io</li><li><strong>不要建立过多的索引</strong>，这样会影响mysql的写入和更新，尽量扩展建立联合索引，不要增加索引。</li><li>如何可以使用前缀索引。</li></ul><h4 id="无法使用索引的情况"><a href="#无法使用索引的情况" class="headerlink" title="无法使用索引的情况"></a>无法使用索引的情况</h4><ul><li>无最左匹配列的情况，例如(user_num,city)这样的查询条件。</li><li>使用列列后缀匹配，例如user_name like  ‘%jian’</li><li>如果某一列使用范围查询，则后续列无法继续使用索引。例如 user_name = ‘lijian’ and user_num &gt; 20 and city = ‘郑州’，city 列是无法使用索引的。</li><li>查询时，不要对索引使用函数 例如:<code>SELECT * FROM user_test WHERE user_name = concat(user_name, &#39;fei&#39;)</code></li><li>索引不参与计算，如果索引列参与计算不走索引</li><li>字符串与数字比较不走索引。</li></ul><h2 id="mysql不支持hash索引"><a href="#mysql不支持hash索引" class="headerlink" title="mysql不支持hash索引"></a>mysql不支持hash索引</h2><p>贴上一份官方文档：<br><a href="https://dev.mysql.com/doc/refman/5.7/en/innodb-introduction.html" target="_blank" rel="noopener">mysql官方介绍inndb</a></p><p><img src="/photo/img/数据库索引使用优化/picture1.png" alt="image"></p><p>很明显，mysql是不支持hash索引的。innodb内部会根据表的使用支持自适应hash索引优化，所以无法认为建立。<br>当然建表语句还是有的，如下。<br>查看一下表的建表语句：<br><img src="/photo/img/数据库索引使用优化/picture2.png" alt="image"><br>这个时候可以发现，建立语句里还是有hash的。</p><p>但是执行<code>show index from cm_deposit_order</code>可以返现其实使用hash的索引还是Btree.</p><p><img src="/photo/img/数据库索引使用优化/picture3.png" alt="image"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;数据库索引使用的优化&lt;/p&gt;
&lt;h2 id=&quot;索引的选择&quot;&gt;&lt;a href=&quot;#索引的选择&quot; class=&quot;headerlink&quot; title=&quot;索引的选择&quot;&gt;&lt;/a&gt;索引的选择&lt;/h2&gt;&lt;h3 id=&quot;B-tree&quot;&gt;&lt;a href=&quot;#B-tree&quot; class=&quot;he
      
    
    </summary>
    
      <category term="数据库" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="数据库" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>http各个状态码含义</title>
    <link href="http://yoursite.com/2019/02/12/http%E5%90%84%E4%B8%AA%E7%8A%B6%E6%80%81%E7%A0%81%E5%90%AB%E4%B9%89/"/>
    <id>http://yoursite.com/2019/02/12/http各个状态码含义/</id>
    <published>2019-02-12T09:07:24.000Z</published>
    <updated>2019-02-12T13:21:12.438Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li>200请求成功</li><li>301资源被转移</li><li>404请求资源不存在</li><li>500内部服务错误<h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2></li></ul><table><thead><tr><th>状态码</th><th>含义</th></tr></thead><tbody><tr><td>1xx</td><td>信息交换，指服务器收到请求，需要请求者继续操作，常见于ws协议</td></tr><tr><td>2xx</td><td>操作成功并且被处理，很常见</td></tr><tr><td>3xx</td><td>资源被转移</td></tr><tr><td>4xx</td><td>客户端错误，包含语法错误以及无法完成的请求</td></tr><tr><td>5xx</td><td>服务器错误，指服务器在处理过程中发生错误</td></tr></tbody></table><h2 id="详细介绍"><a href="#详细介绍" class="headerlink" title="详细介绍"></a>详细介绍</h2><table><thead><tr><th>状态码</th><th>含义</th></tr></thead><tbody><tr><td>100</td><td>继续，客户端应该继续请求</td></tr><tr><td>101</td><td>切换协议，服务端根据客户端的请求切换协议。但是只能切换到更高的协议，例如切换到http新版协议</td></tr><tr><td>-</td><td>-</td></tr><tr><td><strong>200</strong></td><td>请求成功</td></tr><tr><td>201</td><td>已创建。请求成功，并创建了资源</td></tr><tr><td>202</td><td>已接收。已接收请求，但是处理仍未完成</td></tr><tr><td>203</td><td>非授权信息。请求成功，但是返回的meta信息不在原始的服务器，而是一个副本</td></tr><tr><td>204</td><td>无内容。服务器成功处理，但未返回内容。</td></tr><tr><td>205</td><td>充值内容。服务器处理成功，用户应该充值文档视图。可通过此返回码清楚浏览器的表单域</td></tr><tr><td>206</td><td>部分内容。服务器成功处理了部分get请求</td></tr><tr><td>-</td><td>-</td></tr><tr><td>300</td><td>多种选择。请求的资源可包括多个位置，相应可返回一个资源特征与地址的列表的列表用于用户终端选择</td></tr><tr><td><strong>301</strong></td><td>资源被永久移动。请求的资源已被永久的移动到新的URI，返回的信息包括新的URI，浏览器会自动定到新的URI。今后任何新的请求都应使用新的URI代替</td></tr><tr><td><strong>302</strong></td><td>临时移动。与301类似，但是资源资源只是被临时移动。客户端应继续使用URI</td></tr><tr><td>303</td><td>查看其它地址，与301类似。</td></tr><tr><td><strong>304</strong></td><td>未修改。所请求的资源未修改，不返回任何资源。这种请求一般发生在终端缓存请求数据状况下发生，请求时头信息会指出客户端希望返回指定日期修改之后的资源。如果返回304终端一般会加载本地缓存资源</td></tr><tr><td>305</td><td>使用代理。所请求的资源必须通过代理访问</td></tr><tr><td>-</td><td>-</td></tr><tr><td>400</td><td>客户端请求语法错误，一般参数校验错误返回此状态码</td></tr><tr><td>401</td><td>要求请求用户进行身份校验</td></tr><tr><td>402</td><td>保留状态码</td></tr><tr><td>403</td><td>接受到客户端的请求，但是无法执行。一般指用户权限不够</td></tr><tr><td>404</td><td>服务器无法找到客户端所请求资源</td></tr><tr><td>405</td><td>客户端锁清秋的方法被禁止</td></tr><tr><td>406</td><td>服务器无法根据客户端请求的内容特性完成请求</td></tr><tr><td>407</td><td>请求要求代理身份认证，与401类似，单请求者应当使用代理进行授权</td></tr><tr><td>408</td><td>服务端等待客户端发送的请求时间过长，超时</td></tr><tr><td>414</td><td>请求的URI过长，服务器无法处理</td></tr><tr><td>415</td><td>服务端无法处理附带的媒体格式</td></tr><tr><td>-</td><td>-</td></tr><tr><td><strong>500</strong></td><td>服务器内部错误，无法完成请求</td></tr><tr><td>501</td><td>服务器不支持请求功能，无法完成请求</td></tr><tr><td><strong>502</strong></td><td>作为网关或者代理工作的服务器尝试执行请求时，从远程服务器接收到了一个无效的响应</td></tr><tr><td>503</td><td>服务器超载或系统维护，暂时无法处理客户端的请求。延时的长度可包含在服务器的Retry-after头信息中</td></tr><tr><td><strong>504</strong></td><td>充当网关的服务器，无法及时从远端服务器获取请求</td></tr><tr><td><strong>505</strong></td><td>服务器不支持当前请求的HTTP协议，无法完成处理</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;200请求成功&lt;/li&gt;
&lt;li&gt;301资源被转移&lt;/li&gt;
&lt;li&gt;404请求资源不存在&lt;/li&gt;
&lt;li&gt;500内部服务错误
      
    
    </summary>
    
      <category term="http" scheme="http://yoursite.com/categories/http/"/>
    
    
      <category term="http" scheme="http://yoursite.com/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>C语言多维数组传参问题</title>
    <link href="http://yoursite.com/2019/02/12/C%E8%AF%AD%E8%A8%80%E5%A4%9A%E7%BB%B4%E6%95%B0%E7%BB%84%E4%BC%A0%E5%8F%82%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2019/02/12/C语言多维数组传参问题/</id>
    <published>2019-02-12T07:18:35.000Z</published>
    <updated>2019-02-14T13:29:45.155Z</updated>
    
    <content type="html"><![CDATA[<p>刷题遇到个问题，需要传递一个二维数组作为实参。函数如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">int* spiralOrder(int** matrix, int matrixRowSize, int matrixColSize) &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>遇到的问题是如果我直接<code>int matrix[3][3]</code>声明，然后传递参数，在<code>spiralOrder</code>无法用matrix[3][3]的形式调用。代码如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span>* <span class="title">spiralOrder</span><span class="params">(<span class="keyword">int</span>** matrix, <span class="keyword">int</span> matrixRowSize, <span class="keyword">int</span> matrixColSize)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span>* ret;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"matrix:%d\n"</span>,*(*(matrix+<span class="number">0</span>)+<span class="number">2</span>));</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"matrix:%d\n"</span>, matrix[<span class="number">2</span>][<span class="number">2</span>]);</div><div class="line">    <span class="keyword">return</span>  ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> c[<span class="number">3</span>][<span class="number">3</span>] = &#123; &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125; , &#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;, &#123;<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;&#125;;</div><div class="line"></div><div class="line">    spiralOrder((<span class="keyword">int</span>**)c, <span class="number">3</span>, <span class="number">3</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>在<code>spiralOrder</code>打印的时候报错如下：</p><p><img src="/photo/img/c语言多维数组传参问题/bug1.png" alt="image"><br>当然c primer也明确指出，数组当做实参传递时，当做指针处理。所以说上述问题在于把数组当成二重指针处理当然没法处理了。以为数组可以当做指针，其实二维数组也是可以当做指针。<br>那么二维数组如何作为实参传递呢？</p><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><blockquote><p>多维数组以指向 0 号元素的指针方式传递。多维数组的 元素本身就是数组。除了第一维以外的所有维的长度都是元素类型的一部分，必须明确指定.—C++ Primer</p></blockquote><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">void spiralOrder1(int matrix[][3], int matrixRowSize, int matrixColSize) &#123;</div><div class="line">    printf(&quot;matrix:%d\n&quot;, matrix[0][0]);</div><div class="line">    printf(&quot;matrix:%d\n&quot;, matrix[1][1]);</div><div class="line">    printf(&quot;matrix:%d\n&quot;, matrix[2][2]);</div><div class="line">    return ;</div><div class="line">&#125;</div><div class="line">int main()&#123;</div><div class="line">    int c[3][3] = &#123; &#123;1,2,3&#125; , &#123;4,5,6&#125;, &#123;7,8,9&#125;&#125;;</div><div class="line">    spiralOrder1(c, 3, 3);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>因为形参是<code>(int matrix[][3]</code>所以编译器知道它按照二维数组的方式寻址。</p><h3 id="返回结果"><a href="#返回结果" class="headerlink" title="返回结果"></a>返回结果</h3><p><img src="/photo/img/c语言多维数组传参问题/result2.png" alt="image"></p><h2 id="方法二——指针的形式"><a href="#方法二——指针的形式" class="headerlink" title="方法二——指针的形式"></a>方法二——指针的形式</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">spiralOrder1</span><span class="params">(<span class="keyword">int</span>* matrix, <span class="keyword">int</span> matrixRowSize, <span class="keyword">int</span> matrixColSize)</span> </span>&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"matrix:%d\n"</span>, matrix[<span class="number">0</span>]);</div><div class="line">    <span class="keyword">return</span> ;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> c[<span class="number">3</span>][<span class="number">3</span>] = &#123; &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125; , &#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;, &#123;<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;&#125;;</div><div class="line">    spiralOrder1((<span class="keyword">int</span>*)c, <span class="number">3</span>, <span class="number">3</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><img src="/photo/img/c语言多维数组传参问题/result1.png" alt="image"></p><p>所以当形参是<code>int*</code>的情况下，二维数组可以通过[i]的形式访问，也可以通过<em>(i</em>j+j)(规整的二维数组)的方式访问，其中i、j可以通过传参的形式传入。<br><strong>原因是直接定义的数组是在程序的堆栈区，数据占用连续的空间，所以可以使用上述方式寻址。</strong></p><h2 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h2><p>如果上述都不满足需求的话，还有一种方式——通过二级指针的形式。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">int* spiralOrder(int** matrix, int matrixRowSize, int matrixColSize) &#123;</div><div class="line">    int* ret;</div><div class="line">    printf(&quot;matrix:%d\n&quot;,*(*(matrix+0)+2));</div><div class="line">    printf(&quot;matrix:%d\n&quot;, matrix[2][2]);</div><div class="line">    return  ret;</div><div class="line">&#125;</div><div class="line">int main()&#123;</div><div class="line">    int** a = (int**)malloc(sizeof(int*)*9);</div><div class="line">    int** current = a;</div><div class="line">    for(int i = 0; i &lt; 3; i++)</div><div class="line">    &#123;</div><div class="line">        int *tmp = (int*)malloc(sizeof(int)*3);</div><div class="line">        *a = tmp;</div><div class="line">        a++;</div><div class="line">        for(int j = 0; j &lt; 3; j++)</div><div class="line">        &#123;</div><div class="line">            (*tmp) = j+i;</div><div class="line">            tmp++;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    spiralOrder(current, 3, 3);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="返回结果-1"><a href="#返回结果-1" class="headerlink" title="返回结果"></a>返回结果</h3><p><img src="/photo/img/c语言多维数组传参问题/result3.png" alt="image"><br>返回结果<br>如果形参是二级指针的形式，可以通过<code>[][]</code>的形式访问数组，当然这里必须要控制二维数组范围。也可以通过<code>*(*(matrix+0)+2))</code>方式访问。是否可以像上一个方法中提到的 通过连续的内存地址 去访问？</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span>* <span class="title">spiralOrder</span><span class="params">(<span class="keyword">int</span>** matrix, <span class="keyword">int</span> matrixRowSize, <span class="keyword">int</span> matrixColSize)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span>* ret;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"matrix:%d\n"</span>, *(*(matrix+<span class="number">2</span>)));</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"matrix:%d\n"</span>, *(*(matrix+<span class="number">4</span>)));</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"matrix:%d\n"</span>, matrix[<span class="number">0</span>]);</div><div class="line">    <span class="keyword">return</span>  ret;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span>** a = (<span class="keyword">int</span>**)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>*)*<span class="number">9</span>);</div><div class="line">    <span class="keyword">int</span>** current = a;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> *tmp = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>)*<span class="number">3</span>);</div><div class="line">        *a = tmp;</div><div class="line">        a++;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++)</div><div class="line">        &#123;</div><div class="line">            (*tmp) = j+i;</div><div class="line">            tmp++;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    spiralOrder(current, <span class="number">3</span>, <span class="number">3</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>返回结果<br><img src="/photo/img/c语言多维数组传参问题/result4.png" alt="image"></p><p>首先它是一个二维数组以一维数组的形式访问打印出来是一个内存地址。为什么<code>*(*(matrix+2))</code>打印出来是对的数值，而<code>*(*(matrix+4))</code>却是内存地址呢？ 因为<strong>malloc动态申请出来的数组是在系统的远堆上（far heap）,元素不是连续的，导致无法按照连续内存访问</strong></p><h2 id="最后一个问题"><a href="#最后一个问题" class="headerlink" title="最后一个问题"></a>最后一个问题</h2><p>那么二维数组和二级指针是什么关系呢？？？</p><p>首先声明一个二维数组和一个二维指针，我们把它打印出来</p><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> c[<span class="number">3</span>][<span class="number">3</span>] = &#123; &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125; , &#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;, &#123;<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;&#125;;</div><div class="line">    <span class="keyword">int</span>** a = (<span class="keyword">int</span>**)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>*)*<span class="number">9</span>);</div><div class="line">    <span class="keyword">int</span>** current = a;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> *tmp = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>)*<span class="number">3</span>);</div><div class="line">        *a = tmp;</div><div class="line">        a++;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++)</div><div class="line">        &#123;</div><div class="line">            (*tmp) = j+i;</div><div class="line">            tmp++;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"current%p\n"</span>, current);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"current0%p\n"</span>, current[<span class="number">0</span>]);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"c:%p\n"</span>, c);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"c:%p\n"</span>, c+<span class="number">1</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"c0:%p\n"</span>, c[<span class="number">0</span>]);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"c0:%p\n"</span>, c[<span class="number">0</span>]+<span class="number">1</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"c00:%d\n"</span>, c[<span class="number">0</span>][<span class="number">0</span>]);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"c00:%p\n"</span>, &amp;c[<span class="number">0</span>][<span class="number">0</span>]);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="返回结果-2"><a href="#返回结果-2" class="headerlink" title="返回结果"></a>返回结果</h3><p><img src="/photo/img/c语言多维数组传参问题/result5.png" alt="image"></p><p>首先数组<code>c</code>存储的是一个占用两个int大小对象的地址。<code>c[0]</code>存储的是一个占用一个int大小对象的地址。因为<code>c</code>与<code>c[0]</code>存储的都是数组元素的首地址所以所以<code>c</code>与<code>c[0]</code>所存地址相同，但是他们所存储对象的大小不同。从输出的<strong>c+1</strong>和<strong>c[0]+1</strong>就可以看出来（这里的+1是指按照一个对象长度寻址）</p><p>再看看malloc申请出来的二级指针，压根<code>current</code> 与<code>current[0]</code>所存储的地址不一样，所以肯定无法像直接申请数组按照连续内存寻址找到所需数值。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;刷题遇到个问题，需要传递一个二维数组作为实参。函数如下&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;l
      
    
    </summary>
    
      <category term="c语言" scheme="http://yoursite.com/categories/c%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="c语言" scheme="http://yoursite.com/tags/c%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>算法-螺旋矩阵</title>
    <link href="http://yoursite.com/2019/02/11/%E7%AE%97%E6%B3%95-%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5/"/>
    <id>http://yoursite.com/2019/02/11/算法-螺旋矩阵/</id>
    <published>2019-02-11T12:17:20.000Z</published>
    <updated>2019-02-12T03:24:27.265Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><h3 id="英文"><a href="#英文" class="headerlink" title="英文"></a>英文</h3><p>Given a matrix of m x n elements (m rows, n columns), return all elements of the matrix in spiral order.</p><p>Example 1:</p><p>Input:<br>[<br> [ 1, 2, 3 ],<br> [ 4, 5, 6 ],<br> [ 7, 8, 9 ]<br>]<br>Output: [1,2,3,6,9,8,7,4,5]<br>Example 2:</p><p>Input:<br>[<br>  [1, 2, 3, 4],<br>  [5, 6, 7, 8],<br>  [9,10,11,12]<br>]<br>Output: [1,2,3,4,8,12,11,10,9,5,6,7]</p><h3 id="中文"><a href="#中文" class="headerlink" title="中文"></a>中文</h3><p>给定一个包含 m x n 个元素的矩阵（m 行, n 列），请按照顺时针螺旋顺序，返回矩阵中的所有元素。</p><p>示例 1:</p><p>输入:<br>[<br> [ 1, 2, 3 ],<br> [ 4, 5, 6 ],<br> [ 7, 8, 9 ]<br>]<br>输出: [1,2,3,6,9,8,7,4,5]<br>示例 2:</p><p>输入:<br>[<br>  [1, 2, 3, 4],<br>  [5, 6, 7, 8],<br>  [9,10,11,12]<br>]<br>输出: [1,2,3,4,8,12,11,10,9,5,6,7]</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ul><li>所有走过的节点标记为null</li><li>用turn标记当前走向，如果下一个节点为null或notSet,则调转到下一个方向。</li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">spiralOrder</span><span class="params">($matrix)</span> </span>&#123;</div><div class="line">        $row = count($matrix);</div><div class="line">        <span class="keyword">if</span>($row == <span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">return</span> [];</div><div class="line">        &#125;</div><div class="line">        $columu = count($matrix[<span class="number">1</span>]);</div><div class="line">        $currentpoint = $matrix[<span class="number">0</span>][<span class="number">0</span>];</div><div class="line">        $turn = <span class="number">0</span>;</div><div class="line">        $i = <span class="number">0</span>;</div><div class="line">        $j = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span>(<span class="keyword">isset</span>($currentpoint) &amp;&amp; !is_null($currentpoint))</div><div class="line">        &#123;</div><div class="line">            <span class="comment">//向右</span></div><div class="line">            $ret[] = $currentpoint;</div><div class="line">            $matrix[$i][$j] = <span class="keyword">null</span>;</div><div class="line">            <span class="keyword">if</span>($turn == <span class="number">0</span>)</div><div class="line">            &#123;</div><div class="line">                </div><div class="line">                <span class="keyword">if</span>(<span class="keyword">isset</span>($matrix[$i][$j+<span class="number">1</span>])&amp;&amp;!is_null($matrix[$i][$j+<span class="number">1</span>]))</div><div class="line">                &#123;</div><div class="line">                    $currentpoint = $matrix[$i][$j+<span class="number">1</span>];</div><div class="line">                    $j++;</div><div class="line">                &#125; <span class="keyword">elseif</span>(<span class="keyword">isset</span>($matrix[$i+<span class="number">1</span>][$j])&amp;&amp;!is_null($matrix[$i+<span class="number">1</span>][$j])) &#123;</div><div class="line">                    $currentpoint = $matrix[$i+<span class="number">1</span>][$j];</div><div class="line">                    $i++;</div><div class="line">                    $turn = <span class="number">1</span>;</div><div class="line">                    <span class="keyword">continue</span>;</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    $currentpoint = <span class="keyword">null</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">//向下</span></div><div class="line">            <span class="keyword">if</span>($turn == <span class="number">1</span>)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(<span class="keyword">isset</span>($matrix[$i+<span class="number">1</span>][$j])&amp;&amp;!is_null($matrix[$i+<span class="number">1</span>][$j]))</div><div class="line">                &#123;</div><div class="line">                    $currentpoint = $matrix[$i+<span class="number">1</span>][$j];</div><div class="line">                    $i++;</div><div class="line">                &#125; <span class="keyword">elseif</span>(<span class="keyword">isset</span>($matrix[$i][$j<span class="number">-1</span>])&amp;&amp;!is_null($matrix[$i][$j<span class="number">-1</span>])) &#123;</div><div class="line">                    $currentpoint = $matrix[$i][$j<span class="number">-1</span>];</div><div class="line">                    $j--;</div><div class="line">                    $turn = <span class="number">2</span>;</div><div class="line">                    <span class="keyword">continue</span>;</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    $currentpoint = <span class="keyword">null</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">//向左</span></div><div class="line">            <span class="keyword">if</span>($turn == <span class="number">2</span>)</div><div class="line">            &#123;</div><div class="line"> </div><div class="line">                <span class="keyword">if</span>(<span class="keyword">isset</span>($matrix[$i][$j<span class="number">-1</span>])&amp;&amp;!is_null($matrix[$i][$j<span class="number">-1</span>]))</div><div class="line">                &#123;</div><div class="line">                    $currentpoint = $matrix[$i][$j<span class="number">-1</span>];</div><div class="line">                    $j--;</div><div class="line">                &#125; <span class="keyword">elseif</span>(<span class="keyword">isset</span>($matrix[$i<span class="number">-1</span>][$j])&amp;&amp;!is_null($matrix[$i<span class="number">-1</span>][$j])) &#123;;</div><div class="line">                    $currentpoint = $matrix[$i<span class="number">-1</span>][$j];</div><div class="line">                    $i--;</div><div class="line">                    $turn = <span class="number">3</span>;</div><div class="line">                    <span class="keyword">continue</span>;</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    $currentpoint = <span class="keyword">null</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>($turn == <span class="number">3</span>)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(<span class="keyword">isset</span>($matrix[$i<span class="number">-1</span>][$j])&amp;&amp;!is_null($matrix[$i<span class="number">-1</span>][$j]))</div><div class="line">                &#123;</div><div class="line">                    $currentpoint = $matrix[$i<span class="number">-1</span>][$j];</div><div class="line">                    $i--;</div><div class="line">                &#125; <span class="keyword">elseif</span>(<span class="keyword">isset</span>($matrix[$i][$j+<span class="number">1</span>])&amp;&amp;!is_null($matrix[$i][$j+<span class="number">1</span>])) &#123;</div><div class="line">                    $currentpoint = $matrix[$i][$j+<span class="number">1</span>];</div><div class="line">                    $j++;</div><div class="line">                    $turn = <span class="number">0</span>;</div><div class="line">                    <span class="keyword">continue</span>;</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    $currentpoint = <span class="keyword">null</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> $ret;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;h3 id=&quot;英文&quot;&gt;&lt;a href=&quot;#英文&quot; class=&quot;headerlink&quot; title=&quot;英文&quot;&gt;&lt;/a&gt;英文&lt;/h3&gt;&lt;p&gt;Giv
      
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>算法-几种排序算法的实现</title>
    <link href="http://yoursite.com/2019/01/30/%E7%AE%97%E6%B3%95-%E5%87%A0%E7%A7%8D%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
    <id>http://yoursite.com/2019/01/30/算法-几种排序算法的实现/</id>
    <published>2019-01-30T06:47:03.000Z</published>
    <updated>2019-02-10T10:57:52.818Z</updated>
    
    <content type="html"><![CDATA[<h2 id="快速排序（快拍）"><a href="#快速排序（快拍）" class="headerlink" title="快速排序（快拍）"></a>快速排序（快拍）</h2><p>快速排序的思想是分治，平均时间复杂度O(nlogn)，当然快速排序的时间复杂度并不是稳定的，最大时间复杂度是n^2。当然在用C语言实现的快速排序中，快速排序是原地排序，所有排序中空间复杂最低。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p><code>基于数组的快速排序（递归）</code> </p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">qSort</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(low &gt; high) <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">int</span> first = low;</div><div class="line">    <span class="keyword">int</span> last = high;</div><div class="line">    <span class="keyword">int</span> key = a[first];</div><div class="line">    <span class="keyword">while</span>(first &lt; last)&#123;</div><div class="line">        <span class="keyword">while</span>(first &lt; last &amp;&amp; a[last] &gt;= key) --last;</div><div class="line">        <span class="keyword">if</span>(first &lt; last) a[first] = a[last]; <span class="comment">//这个地方是精髓啊</span></div><div class="line">        <span class="keyword">while</span>(first &lt; last &amp;&amp; a[first] &lt;= key) ++first;</div><div class="line">        <span class="keyword">if</span>(first &lt; last) a[last] = a[first];</div><div class="line">        &#125;</div><div class="line">    a[first] = key;</div><div class="line">    Qsort(a, low, first<span class="number">-1</span>);</div><div class="line">    Qsort(a, first+<span class="number">1</span>, high);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><code>这个版本可能便于理解</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> *x, <span class="keyword">int</span> *y)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> t = *x;</div><div class="line">    *x = *y;</div><div class="line">    *y = t;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">quick_sort_recursive</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (start &gt;= end)</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">int</span> mid = arr[end];</div><div class="line">    <span class="keyword">int</span> left = start, right = end - <span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span> (left &lt; right) &#123;</div><div class="line">        <span class="keyword">while</span> (arr[left] &lt; mid &amp;&amp; left &lt; right)</div><div class="line">            left++;</div><div class="line">        <span class="keyword">while</span> (arr[right] &gt;= mid &amp;&amp; left &lt; right)</div><div class="line">            right--;</div><div class="line">        swap(&amp;arr[left], &amp;arr[right]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (arr[left] &gt;= arr[end])</div><div class="line">        swap(&amp;arr[left], &amp;arr[end]);</div><div class="line">    <span class="keyword">else</span></div><div class="line">        left++;</div><div class="line">    <span class="keyword">if</span> (left)</div><div class="line">        quick_sort_recursive(arr, start, left - <span class="number">1</span>);</div><div class="line">    quick_sort_recursive(arr, left + <span class="number">1</span>, end);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">quick_sort</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> len)</span> </span>&#123;</div><div class="line">    quick_sort_recursive(arr, <span class="number">0</span>, len - <span class="number">1</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><code>php的快速排序</code><br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">qSort</span><span class="params">(&amp;$envelopes, $start, $end )</span></span></div><div class="line">&#123;</div><div class="line">        <span class="keyword">if</span>($end &lt;= $start)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        $i = $start;</div><div class="line">        $j = $end;</div><div class="line">        <span class="keyword">while</span>($i &lt; $j)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">while</span>($i &lt; $end &amp;&amp; $envelopes[$i] &lt;= $envelopes[$start])</div><div class="line">            &#123;</div><div class="line">                $i++;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">while</span>($j &gt; $start &amp;&amp; $envelopes[$j] &gt;  $envelopes[$start])</div><div class="line">            &#123;</div><div class="line">                $j--;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>($i &lt; $j)</div><div class="line">            &#123;</div><div class="line">                $tmp = $envelopes[$i];</div><div class="line">                $envelopes[$i] = $envelopes[$j];</div><div class="line">                $envelopes[$j] = $tmp;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//或者当i= 8 j = 10 i--j++（处理当j==i ）指向9事无法交换情况。</span></div><div class="line">        <span class="keyword">if</span>($envelopes[$i] &lt; $envelopes[$start]) &#123;</div><div class="line">            $tmp = $envelopes[$start];</div><div class="line">            $envelopes[$start] = $envelopes[$j];</div><div class="line">            $envelopes[$i] = $tmp;</div><div class="line">        &#125;</div><div class="line">        qSort($envelopes, $start, $i<span class="number">-1</span>);</div><div class="line">        qSort($envelopes, $i+<span class="number">1</span>, $end);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><code>基于链表的快速排序</code><br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> Node   </div><div class="line">&#123;  </div><div class="line">    <span class="keyword">int</span> key;  </div><div class="line">    Node* next;  </div><div class="line">&#125;;  </div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>* a, <span class="keyword">int</span>* b)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> tmp = *a ;</div><div class="line">    *a = *b;</div><div class="line">    *b = tmp;</div><div class="line">&#125;  </div><div class="line"><span class="function">Node* <span class="title">GetPartion</span><span class="params">(Node* pBegin, Node* pEnd)</span>  </span></div><div class="line">&#123;  </div><div class="line">    <span class="keyword">int</span> key = pBegin-&gt;key;  </div><div class="line">    Node* p = pBegin;  </div><div class="line">    Node* q = p-&gt;next;  </div><div class="line">  </div><div class="line">    <span class="keyword">while</span>(q != pEnd)  </div><div class="line">    &#123;  </div><div class="line">        <span class="keyword">if</span>(q-&gt;key &lt; key)  </div><div class="line">        &#123;  </div><div class="line">            p = p-&gt;next;  </div><div class="line">            swap(p-&gt;key,q-&gt;key);  </div><div class="line">        &#125;  </div><div class="line">  </div><div class="line">        q = q-&gt;next;  </div><div class="line">    &#125;  </div><div class="line">    swap(&amp;p-&gt;key,&amp;pBegin-&gt;key);  </div><div class="line">    <span class="keyword">return</span> p;  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">QuickSort</span><span class="params">(Node* pBeign, Node* pEnd)</span>  </span></div><div class="line">&#123;  </div><div class="line">    <span class="keyword">if</span>(pBeign != pEnd)  </div><div class="line">    &#123;  </div><div class="line">        Node* partion = GetPartion(pBeign,pEnd);  </div><div class="line">        QuickSort(pBeign,partion);  </div><div class="line">        QuickSort(partion-&gt;next,pEnd);  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="并归排序"><a href="#并归排序" class="headerlink" title="并归排序"></a>并归排序</h2><p>并归排序的思想是分治的思想，时间复杂度 O(nlogn)。</p><ul><li>如果一个链表（数组）只有一个元素或者为空直接返回。</li><li>如果链表（数组）可以分成尽可能相等两部分，将其分成尽可能相等两部分。</li><li>对于两个被分开的两个部分进行整个归并排序</li><li>把两个拍好序的链表（数组）进行合并。<br>与快拍的区别是：<code>快排是先处理完再递归</code> 而归并排序是<code>先递归在处理</code></li></ul><p>基于链表的并归排序。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"> <span class="function"><span class="keyword">struct</span> ListNode * <span class="title">merge</span><span class="params">(<span class="keyword">struct</span> ListNode *l1,<span class="keyword">struct</span> ListNode *l2)</span></span></div><div class="line"> &#123;</div><div class="line">     <span class="keyword">if</span>(l1 == <span class="literal">NULL</span>) <span class="keyword">return</span> l2;</div><div class="line">     <span class="keyword">if</span>(l2 == <span class="literal">NULL</span>) <span class="keyword">return</span> l1;</div><div class="line">     <span class="keyword">if</span>( (l1==<span class="literal">NULL</span>) &amp;&amp;(l2==<span class="literal">NULL</span>) ) <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">     </div><div class="line">     <span class="keyword">struct</span> ListNode *head=<span class="literal">NULL</span>;</div><div class="line">     <span class="keyword">if</span>(l1-&gt;val &lt; l2-&gt;val)</div><div class="line">    &#123;</div><div class="line">        head=l1;</div><div class="line">        l1=l1-&gt;next;</div><div class="line">    &#125;</div><div class="line">     <span class="keyword">else</span> </div><div class="line">     &#123;</div><div class="line">         head=l2;</div><div class="line">         l2=l2-&gt;next;</div><div class="line">     &#125;</div><div class="line">     </div><div class="line">     <span class="keyword">struct</span> ListNode *p=head;</div><div class="line">     <span class="keyword">while</span>(l1 != <span class="literal">NULL</span> &amp;&amp; l2 != <span class="literal">NULL</span>)</div><div class="line">     &#123;</div><div class="line">         <span class="keyword">if</span>(l1-&gt;val &lt; l2-&gt;val)</div><div class="line">         &#123;</div><div class="line">             p-&gt;next=l1;</div><div class="line">             l1=l1-&gt;next;</div><div class="line">         &#125;</div><div class="line">         <span class="keyword">else</span></div><div class="line">         &#123;</div><div class="line">             p-&gt;next=l2;</div><div class="line">             l2=l2-&gt;next;</div><div class="line">         &#125;</div><div class="line">         p=p-&gt;next;</div><div class="line">     &#125;</div><div class="line">     </div><div class="line">     <span class="keyword">if</span>(l1 != <span class="literal">NULL</span>) p-&gt;next=l1;</div><div class="line">     <span class="keyword">if</span>(l2 != <span class="literal">NULL</span>) p-&gt;next=l2;</div><div class="line">     <span class="keyword">return</span> head;</div><div class="line"> &#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">struct</span> ListNode* <span class="title">sortList</span><span class="params">(<span class="keyword">struct</span> ListNode* head)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(head == <span class="literal">NULL</span> || head-&gt;next == <span class="literal">NULL</span>) <span class="keyword">return</span> head;</div><div class="line">    <span class="keyword">struct</span> ListNode *slow=head;</div><div class="line">    <span class="keyword">struct</span> ListNode *fast=head;</div><div class="line">    <span class="keyword">struct</span> ListNode *pre=<span class="literal">NULL</span>;</div><div class="line">    </div><div class="line">    <span class="comment">// 切成两半</span></div><div class="line">    <span class="keyword">while</span>(fast!= <span class="literal">NULL</span> &amp;&amp; fast-&gt;next != <span class="literal">NULL</span>)</div><div class="line">    &#123;</div><div class="line">        pre=slow;</div><div class="line">        slow=slow-&gt;next;</div><div class="line">        fast=fast-&gt;next-&gt;next;</div><div class="line">    &#125;</div><div class="line">    pre-&gt;next=<span class="literal">NULL</span>;</div><div class="line">    </div><div class="line">    <span class="comment">//两半分别归并</span></div><div class="line">    <span class="keyword">struct</span> ListNode *l1=sortList(head);</div><div class="line">    <span class="keyword">struct</span> ListNode *l2=sortList(slow);</div><div class="line">    </div><div class="line">    <span class="comment">//调用merge</span></div><div class="line">    <span class="keyword">return</span> merge(l1,l2);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><code>基于数组的并归排序(递归)</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">void merge_sort_recursive(int arr[], int reg[], int start, int end) &#123;</div><div class="line">    if (start &gt;= end)</div><div class="line">        return;</div><div class="line">    int len = end - start, mid = (len &gt;&gt; 1) + start;</div><div class="line">    int start1 = start, end1 = mid;</div><div class="line">    int start2 = mid + 1, end2 = end;</div><div class="line">    merge_sort_recursive(arr, reg, start1, end1);</div><div class="line">    merge_sort_recursive(arr, reg, start2, end2);</div><div class="line">    int k = start;</div><div class="line">    while (start1 &lt;= end1 &amp;&amp; start2 &lt;= end2)</div><div class="line">        reg[k++] = arr[start1] &lt; arr[start2] ? arr[start1++] : arr[start2++];</div><div class="line">    while (start1 &lt;= end1)</div><div class="line">        reg[k++] = arr[start1++];</div><div class="line">    while (start2 &lt;= end2)</div><div class="line">        reg[k++] = arr[start2++];</div><div class="line">    for (k = start; k &lt;= end; k++)</div><div class="line">        arr[k] = reg[k];</div><div class="line">&#125;</div><div class="line">void merge_sort(int arr[], const int len) &#123;</div><div class="line">    int reg[len];</div><div class="line">    merge_sort_recursive(arr, reg, 0, len - 1);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><code>基于数组的并归排序（迭代）</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">min</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> x &lt; y ? x : y;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge_sort</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> len)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span>* a = arr;</div><div class="line">    <span class="keyword">int</span>* b = (<span class="keyword">int</span>*) <span class="built_in">malloc</span>(len * <span class="keyword">sizeof</span>(<span class="keyword">int</span>));</div><div class="line">    <span class="keyword">int</span> seg, start;</div><div class="line">    <span class="keyword">for</span> (seg = <span class="number">1</span>; seg &lt; len; seg += seg) &#123;</div><div class="line">        <span class="keyword">for</span> (start = <span class="number">0</span>; start &lt; len; start += seg + seg) &#123;</div><div class="line">            <span class="keyword">int</span> low = start, mid = min(start + seg, len), high = min(start + seg + seg, len);</div><div class="line">            <span class="keyword">int</span> k = low;</div><div class="line">            <span class="keyword">int</span> start1 = low, end1 = mid;</div><div class="line">            <span class="keyword">int</span> start2 = mid, end2 = high;</div><div class="line">            <span class="keyword">while</span> (start1 &lt; end1 &amp;&amp; start2 &lt; end2)</div><div class="line">                b[k++] = a[start1] &lt; a[start2] ? a[start1++] : a[start2++];</div><div class="line">            <span class="keyword">while</span> (start1 &lt; end1)</div><div class="line">                b[k++] = a[start1++];</div><div class="line">            <span class="keyword">while</span> (start2 &lt; end2)</div><div class="line">                b[k++] = a[start2++];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span>* temp = a;</div><div class="line">        a = b;</div><div class="line">        b = temp;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (a != arr) &#123;</div><div class="line">        <span class="keyword">int</span> i;</div><div class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++)</div><div class="line">            b[i] = a[i];</div><div class="line">        b = a;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">free</span>(b);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><h3 id="时间复杂度与空间复杂度"><a href="#时间复杂度与空间复杂度" class="headerlink" title="时间复杂度与空间复杂度"></a>时间复杂度与空间复杂度</h3><p>时间复杂度O(n^2)</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><p><code>c语言冒泡排序</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="keyword">int</span> *nums, <span class="keyword">int</span> lenNums)</span> </span>&#123;</div><div class="line"><span class="keyword">int</span> i,j;</div><div class="line"><span class="keyword">int</span> flag = <span class="number">1</span>;</div><div class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; lenNums; i++)</div><div class="line">&#123;</div><div class="line">    flag = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(j=<span class="number">0</span>; j&lt; lenNums - i <span class="number">-1</span>; j++)</div><div class="line">    &#123;</div><div class="line">        <span class="comment">//比较并交换</span></div><div class="line">        <span class="keyword">if</span>(nums[j] &gt; nums[j+<span class="number">1</span>])</div><div class="line">        &#123;</div><div class="line">            nums[j] = nums[j+<span class="number">1</span>] + nums[j];</div><div class="line">            nums[j+<span class="number">1</span>] = nums[j] - nums[j+<span class="number">1</span>];</div><div class="line">            nums[j] = nums[j] - nums[j+<span class="number">1</span>];</div><div class="line">            flag = <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(flag == <span class="number">1</span>) </div><div class="line">    &#123;</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><h3 id="时间复杂度与空间复杂度-1"><a href="#时间复杂度与空间复杂度-1" class="headerlink" title="时间复杂度与空间复杂度"></a>时间复杂度与空间复杂度</h3><p>时间复杂度O(n^2),空间复杂度O(1)</p><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">insertSort</span><span class="params">(<span class="keyword">int</span> *nums, <span class="keyword">int</span> numsLen)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> tmp;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i&lt; numsLen; i++)</div><div class="line">    &#123;</div><div class="line">        tmp = nums[i];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = i; j&gt;<span class="number">0</span> &amp;&amp; nums[j] &lt; nums[j<span class="number">-1</span>]; j--)</div><div class="line">        &#123;</div><div class="line">            nums[j] = nums[j<span class="number">-1</span>];</div><div class="line">        &#125;</div><div class="line">        nums[j] = tmp;</div><div class="line">    &#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h2><p>基数排序是将 <code>需要排序的所有数字统一为固定位数的数字</code>（如果位数不足向前补0），然后按照位数切割，分别对每一个位数进行比较。从最低位开始，依次进行一次排序。这样排完以后就会变成一个有序序列。</p><h3 id="时间复杂度与空间复杂度-2"><a href="#时间复杂度与空间复杂度-2" class="headerlink" title="时间复杂度与空间复杂度"></a>时间复杂度与空间复杂度</h3><h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">radixsort</span><span class="params">($nums)</span></span></div><div class="line">&#123;</div><div class="line">    $maxNum = max($nums);</div><div class="line">    $wei = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>($exp =<span class="number">1</span> ; intval(($maxNum/$exp ))&gt; <span class="number">0</span>; $exp*=<span class="number">10</span> )</div><div class="line">    &#123;</div><div class="line">    $nums = countSort($nums,$exp);</div><div class="line">    var_dump($nums);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">countSort</span><span class="params">($nums,$exp)</span></span></div><div class="line">&#123;</div><div class="line"></div><div class="line"><span class="keyword">for</span> ($i=<span class="number">0</span>; $i &lt; <span class="number">10</span>; $i++) &#123; </div><div class="line">$count[$i] = <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line">    <span class="keyword">for</span>($i = <span class="number">0</span>; $i&lt; count($nums); $i++)</div><div class="line">    &#123;</div><div class="line">    $key = intval(($nums[$i]/$exp)%<span class="number">10</span>);</div><div class="line">    $count[intval(($nums[$i]/$exp)%<span class="number">10</span>)]++;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>($i = <span class="number">1</span>; $i &lt; <span class="number">10</span>; $i++)</div><div class="line">    &#123;</div><div class="line">    $count[$i] += $count[$i - <span class="number">1</span>];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>($i = count($nums)<span class="number">-1</span>; $i &gt;= <span class="number">0</span>; $i--)</div><div class="line">    &#123;</div><div class="line">    $output[$count[intval(($nums[$i]/$exp)%<span class="number">10</span>) ] <span class="number">-1</span>] = $nums[$i];</div><div class="line">    $count[intval((($nums[$i]/$exp)%<span class="number">10</span>))]--;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> ($i=<span class="number">0</span>; $i &lt; count($nums) ; $i++) &#123; </div><div class="line">    $nums[$i] = $output[$i];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> $nums;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$a = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">12</span>,<span class="number">412</span>,<span class="number">534</span>,<span class="number">122</span>];</div><div class="line"></div><div class="line">radixsort($a);</div></pre></td></tr></table></figure><h2 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h2><p>以最大堆为例，最大堆就是一个特殊二叉树，父节点大于子节点。<br>当前算法是以层序遍历，将二叉树存入数组中。</p><ul><li>堆排序每次把处于堆顶的最大值取出</li><li>然后对堆进行排序</li><li>一次循环，直至堆变为0</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="comment">// echo number_format(100000.5)."\n";</span></div><div class="line"><span class="comment">// echo number_format("100000.5",2)."\n";</span></div><div class="line"><span class="comment">// echo number_format(100000.5,1,".","");</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">heapSort</span><span class="params">($nums)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">//将数组划转为堆(依赖数组实现的堆)</span></div><div class="line">    $n = count($nums);</div><div class="line">    <span class="keyword">for</span>($i = intval($n/<span class="number">2</span>) <span class="number">-1</span> ; $i &gt;= <span class="number">0</span>; $i--)</div><div class="line">    &#123;</div><div class="line">        heapify($nums, $n, $i);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">for</span>($i = $n<span class="number">-1</span>; $i &gt;= <span class="number">0</span>; $i--)</div><div class="line">    &#123;</div><div class="line">    $tmp = $nums[<span class="number">0</span>];</div><div class="line">    $nums[<span class="number">0</span>] = $nums[$i] ;</div><div class="line">    $nums[$i] = $tmp;</div><div class="line">    heapify($nums, $i, <span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    var_dump($nums);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">heapify</span><span class="params">(&amp;$nums, $n, $i)</span></span></div><div class="line">&#123;</div><div class="line">    $largest = $i;</div><div class="line">    $l = $i * <span class="number">2</span> +<span class="number">1</span>;</div><div class="line">    $r = $i * <span class="number">2</span> +<span class="number">2</span>;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>($l &lt; $n &amp;&amp; $nums[$largest] &lt; $nums[$l])</div><div class="line">    &#123;</div><div class="line">    $largest = $l;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>($r &lt; $n &amp;&amp; $nums[$largest] &lt; $nums[$r])</div><div class="line">    &#123;</div><div class="line">    $largest = $r;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>($largest != $i)</div><div class="line">    &#123;</div><div class="line">    $tmp = $nums[$i];</div><div class="line">    $nums[$i] = $nums[$largest];</div><div class="line">    $nums[$largest] = $tmp;</div><div class="line"></div><div class="line">    heapify($nums, $n, $largest);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$a = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">12</span>,<span class="number">412</span>,<span class="number">534</span>,<span class="number">122</span>,<span class="number">534</span>,<span class="number">0</span>,<span class="number">77</span>,<span class="number">88</span>,<span class="number">99</span>,<span class="number">78</span>,<span class="number">56</span>,<span class="number">35</span>,<span class="number">34</span>,<span class="number">1</span>];</div><div class="line"></div><div class="line">heapSort($a);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="桶排序"><a href="#桶排序" class="headerlink" title="桶排序"></a>桶排序</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"> </div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;快速排序（快拍）&quot;&gt;&lt;a href=&quot;#快速排序（快拍）&quot; class=&quot;headerlink&quot; title=&quot;快速排序（快拍）&quot;&gt;&lt;/a&gt;快速排序（快拍）&lt;/h2&gt;&lt;p&gt;快速排序的思想是分治，平均时间复杂度O(nlogn)，当然快速排序的时间复杂度并不是稳定的，
      
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>算法-全排列-46</title>
    <link href="http://yoursite.com/2019/01/29/%E7%AE%97%E6%B3%95-%E5%85%A8%E6%8E%92%E5%88%97-46/"/>
    <id>http://yoursite.com/2019/01/29/算法-全排列-46/</id>
    <published>2019-01-29T07:18:56.000Z</published>
    <updated>2019-01-29T09:46:37.454Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><h3 id="英文"><a href="#英文" class="headerlink" title="英文"></a>英文</h3><p>Given a collection of distinct integers, return all possible permutations.</p><p>Example:</p><p>Input: [1,2,3]<br>Output:<br>[<br>  [1,2,3],<br>  [1,3,2],<br>  [2,1,3],<br>  [2,3,1],<br>  [3,1,2],<br>  [3,2,1]<br>]</p><h3 id="中文"><a href="#中文" class="headerlink" title="中文"></a>中文</h3><p>给定一个没有重复数字的序列，返回其所有可能的全排列。</p><p>示例:</p><p>输入: [1,2,3]<br>输出:<br>[<br>  [1,2,3],<br>  [1,3,2],<br>  [2,1,3],<br>  [2,3,1],<br>  [3,1,2],<br>  [3,2,1]<br>]</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="思路1"><a href="#思路1" class="headerlink" title="思路1"></a>思路1</h3><ul><li>借鉴之前做的第k个排序</li><li>把所有的排序塞进一个二维数组里</li></ul><h3 id="思路2"><a href="#思路2" class="headerlink" title="思路2"></a>思路2</h3><p>思路一打败了百分之56的人，我觉得还有其他建单的思路。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Return an array of arrays of size *returnSize.</div><div class="line"> * Note: The returned array must be malloced, assume caller calls free().</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">jiecheng</span><span class="params">(<span class="keyword">int</span> n)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> ret = <span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span>(n &gt; <span class="number">0</span>)</div><div class="line">    &#123;</div><div class="line">        ret = ret *n;</div><div class="line">        n--;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span>** <span class="title">permute</span><span class="params">(<span class="keyword">int</span>* nums, <span class="keyword">int</span> numsSize, <span class="keyword">int</span>* returnSize)</span> </span>&#123;</div><div class="line">    *returnSize = jiecheng(numsSize);</div><div class="line">    <span class="comment">//返回的二维数组</span></div><div class="line">    <span class="keyword">int</span>** ret = (<span class="keyword">int</span>**)<span class="built_in">malloc</span>((<span class="keyword">sizeof</span>(<span class="keyword">int</span>*)*(*returnSize)));</div><div class="line">    <span class="comment">//记录头指针</span></div><div class="line">    <span class="keyword">int</span>** current = ret;</div><div class="line">    <span class="comment">//标识进位</span></div><div class="line">    <span class="keyword">int</span>* tmp = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>)*numsSize);</div><div class="line">    tmp[numsSize<span class="number">-1</span>] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = numsSize<span class="number">-2</span>; i&gt;=<span class="number">0</span>; i--)</div><div class="line">    &#123;</div><div class="line">        tmp[i] = tmp[i+<span class="number">1</span>]*(numsSize<span class="number">-1</span>-i);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//标识是否使用</span></div><div class="line">    <span class="keyword">int</span> *flag = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>)*numsSize);</div><div class="line">    <span class="comment">//初始化所有都为0；</span></div><div class="line">    <span class="keyword">int</span> idx = <span class="number">0</span>, t = <span class="number">0</span>, k =<span class="number">0</span>, m = <span class="number">0</span>;</div><div class="line">    <span class="built_in">memset</span>(flag, <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="keyword">int</span>)*numsSize);</div><div class="line">    <span class="comment">//输出每一个组合</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= (*returnSize); i++)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span>* tmp1 = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>)*numsSize); </div><div class="line">        <span class="comment">//初始化</span></div><div class="line">        idx = <span class="number">0</span>, t = <span class="number">0</span>; k = i , m=<span class="number">0</span>;</div><div class="line">        <span class="built_in">memset</span>(flag, <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="keyword">int</span>)*numsSize);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; numsSize; j++)</div><div class="line">        &#123;</div><div class="line">            <span class="comment">//取当前应取数字所在位</span></div><div class="line">            t = (k<span class="number">-1</span>)/tmp[j];</div><div class="line">            <span class="comment">//保留数坐在位置</span></div><div class="line">            idx =t;</div><div class="line">            <span class="keyword">for</span>( m  = <span class="number">0</span>; m &lt; numsSize;m++)</div><div class="line">            &#123;</div><div class="line">                <span class="comment">//寻找最左未使用的数</span></div><div class="line">                <span class="keyword">if</span>(!flag[m])</div><div class="line">                &#123;</div><div class="line">                    t--;</div><div class="line">                    <span class="keyword">if</span>(t == <span class="number">-1</span>)</div><div class="line">                    &#123;</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            tmp1[j] = nums[m];</div><div class="line">            <span class="comment">// printf("m:%d,",m);</span></div><div class="line">            <span class="comment">// printf("j:%d,",j);</span></div><div class="line">            <span class="comment">// printf("%d,",tmp1[j]);</span></div><div class="line">            flag[m] = <span class="number">1</span>;</div><div class="line">            k -= (idx*tmp[j]);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        (*current) = tmp1;</div><div class="line"></div><div class="line">        current++;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;h3 id=&quot;英文&quot;&gt;&lt;a href=&quot;#英文&quot; class=&quot;headerlink&quot; title=&quot;英文&quot;&gt;&lt;/a&gt;英文&lt;/h3&gt;&lt;p&gt;Giv
      
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>数据库-explain</title>
    <link href="http://yoursite.com/2019/01/29/%E6%95%B0%E6%8D%AE%E5%BA%93-explain/"/>
    <id>http://yoursite.com/2019/01/29/数据库-explain/</id>
    <published>2019-01-29T07:18:29.000Z</published>
    <updated>2019-01-29T13:28:42.570Z</updated>
    
    <content type="html"><![CDATA[<h2 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h2><p>使用<code>explain</code>可以分析sql的执行情况，定位慢sql的问题，从而可优化查询语句。<br><code>explain的官方文档</code><br><a href="https://dev.mysql.com/doc/refman/5.5/en/explain-output.html" target="_blank" rel="noopener">explain的官方文档</a></p><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>使用方法，在select前加上<strong>explain</strong>即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">explain select * from cm_car_dealer where car_dealer id &gt; 56</div></pre></td></tr></table></figure><p>结果如图，会涉及到多个字段。</p><p><img src="/photo/img/数据库-explain/explain1.png" alt="执行结果"></p><table><thead><tr><th>参数</th><th style="text-align:right">结果</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td>id</td><td style="text-align:right">1</td><td style="text-align:center">第几个执行的语句</td></tr><tr><td>select_type</td><td style="text-align:right">SIMPLE</td><td style="text-align:center">查询类型）</td></tr><tr><td>table</td><td style="text-align:right">cm_car_dealer</td><td style="text-align:center">表示从哪张表获取的数据</td></tr><tr><td>type</td><td style="text-align:right">range</td><td style="text-align:center">区间索引</td></tr><tr><td>possible_keys</td><td style="text-align:right">PRIMARY</td><td style="text-align:center">表示mysql可以使用哪些索引来查到这条记录</td></tr><tr><td>key</td><td style="text-align:right">PRIMARY</td><td style="text-align:center">实际使用到的索引。如果为NULL，则没有使用索引</td></tr><tr><td>key_len</td><td style="text-align:right">4</td><td style="text-align:center">主键是int型，所以为4.一般来说这个越小越好</td></tr><tr><td>ref</td><td style="text-align:right"></td><td style="text-align:center">表示mysql可以使用哪些索引来查到这条记录</td></tr><tr><td>rows</td><td style="text-align:right">159</td><td style="text-align:center">表示需要遍历多少行才能找到当前数据</td></tr><tr><td>Extra</td><td style="text-align:right">Using where</td><td style="text-align:center">执行状态说明</td></tr></tbody></table><h3 id="id查询的序号"><a href="#id查询的序号" class="headerlink" title="id查询的序号"></a>id查询的序号</h3><p>表示当前查询的序号，其值为数字，表示sql执行的次序。</p><h4 id="id相同"><a href="#id相同" class="headerlink" title="id相同"></a>id相同</h4><p>当id相同时，执行顺序是自上而下的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">explain select * from cm_users,cm_car_dealer_certification where cm_users.id = cm_car_dealer_certification.car_dealer_id</div></pre></td></tr></table></figure><p><img src="/photo/img/数据库-explain/explain2.png" alt="执行结果"></p><h4 id="id不同"><a href="#id不同" class="headerlink" title="id不同"></a>id不同</h4><p>当id不同时，id序号递增，id越大的越先被执行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">explain select * from (select * from cm_users where id &gt;14585) as a  where id = 23213</div></pre></td></tr></table></figure><p><img src="/photo/img/数据库-explain/explain3.png" alt="执行结果"></p><h4 id="既有id相同，也有id不同的"><a href="#既有id相同，也有id不同的" class="headerlink" title="既有id相同，也有id不同的"></a>既有id相同，也有id不同的</h4><p>如果既有id相同，也有id不同的。首先按照id由大到小次序执行，如果id相同则执行顺序为由上到下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">explain select d1.id,(select id from cm_users where id = 14585) as d2  from (select * from cm_users where id &gt;1 and id &lt; 200) as d1 ,cm_car_dealer_certification as d3 where d1.id =  d3.car_dealer_id</div></pre></td></tr></table></figure><p><img src="/photo/img/数据库-explain/explain4.png" alt="执行结果"></p><h3 id="select-type"><a href="#select-type" class="headerlink" title="select_type"></a>select_type</h3><p>select_type表示查询的类型，主要有普通查询、联合查询、子查询和复杂查询。</p><p>1.simple: 为建单的select查询，查询中不包含子查询或者union<br>2.primary: 查询中包含任何复杂的子部分，最外层查询被标记为primary<br>3.subquert: 在select或者where列表中包含了子查询<br>4.derived: 在from列表中包含的子查询被标记为derived(衍生)，mysql或递归执行这些子查询，把结果放在临时表里<br>5.union:若第二个select出现在union之后，责备标记为union;若union包含在from子句的查询中，外城select将被标记为derived<br>6.union result :union的结果</p><p>单独解释下第六项，如下。<br><img src="/photo/img/数据库-explain/explain5.png" alt="执行结果"></p><h3 id="type"><a href="#type" class="headerlink" title="type"></a>type</h3><p>官方全称为<code>type join</code>意思为<strong>链接类型</strong>，从字面意思很容易误解为两个表的链接，其实并不是这样的。这里更应该理解为数据库引擎查找表的一种方式。《高性能mysql》称呼它为访问类型。是sql查询优化中的一个很重要的指标。</p><p>mysql5.7中type的类型达到了14种之多，这里只对常见的类型进行排序，结果有好到坏顺序为：<br>system &gt; count &gt; eq_ref &gt; ref &gt; fulltext &gt;ref_or_null &gt; index_merge &gt; unique_subquery &gt; index_subquery &gt; range &gt; index &gt; ALL</p><p>好sql的标准是：至少达到range,最好达到ref。从最坏的一一开始介绍。</p><h4 id="ALL"><a href="#ALL" class="headerlink" title="ALL"></a>ALL</h4><p>这既是传说的<strong>扫全表</strong>，例如 <code>select * from cm_users where &#39;name&#39; = &quot;张三&quot;</code>，在<code>cm_users</code> 里<code>name</code>未建立索引，因为<code>name</code>不是唯一的，所以即使mysql找到了名为张三的记录，也不会停下来，因为无法确定时候还有叫张三的。这样就会扫全表全量的数据，并且不是走索引的扫全表。<br>这种情况如果是为了展示全量的数据还好，如果是普通查询查出现了<strong>all</strong>,说明有很大优化空间。</p><h4 id="index"><a href="#index" class="headerlink" title="index"></a>index</h4><p>通过索引<strong>扫全表</strong>，和上边比，半斤八俩，但是通过索引读取的数据有序。</p><h4 id="range"><a href="#range" class="headerlink" title="range"></a>range</h4><p>range指的是，通过索引有范围的扫描,mysqls在找到范围的开始结束节点时，会通过索引链表扫描指定范围的数据。</p><h4 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h4><p>指的是非唯一性索引扫描，扫描当前所选择索引的全量数据，找到满足条件的所有数据，这里是所有数据，因为索引是非唯一，所以mysql需要扫描全量的索引。</p><p>例如<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> cm_users <span class="keyword">where</span> created_at = <span class="string">'2019-01-29 00:00:00'</span>;</div></pre></td></tr></table></figure></p><h4 id="eq-ref"><a href="#eq-ref" class="headerlink" title="eq_ref"></a>eq_ref</h4><p>唯一性索引查找，对于每个索引，表中只有一条记录与之匹配。常见于主键或唯一索引。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> cm_users <span class="keyword">where</span> ucid = <span class="number">1083396207893549056</span></div><div class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> cm_users <span class="keyword">where</span> created_at=<span class="string">'2019-01-11 00:12:39'</span></div></pre></td></tr></table></figure><p><img src="/photo/img/数据库-explain/explain6.png" alt="执行结果"><br><img src="/photo/img/数据库-explain/explain7.png" alt="执行结果"></p><h4 id="const"><a href="#const" class="headerlink" title="const"></a>const</h4><p>eg:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> cm_users <span class="keyword">where</span> <span class="keyword">id</span>  = <span class="number">423358</span></div></pre></td></tr></table></figure></p><p><img src="/photo/img/数据库-explain/explain8.png" alt="执行结果"></p><h4 id="system"><a href="#system" class="headerlink" title="system"></a>system</h4><p>当表里只有一条数据，或者子查询和父查询条件重复时会发生，一般不会出现。</p><p>eg:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> (<span class="keyword">select</span> * <span class="keyword">from</span> cm_users <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">14585</span>) <span class="keyword">as</span> a  <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">14585</span></div></pre></td></tr></table></figure></p><p><img src="/photo/img/数据库-explain/explain9.png" alt="执行结果"></p><h3 id="possible-keys"><a href="#possible-keys" class="headerlink" title="possible_keys"></a>possible_keys</h3><p>查询涉及到的到的字段上如果有索引，则该索引将会被列出来，但不一定被查询实际使用。</p><h3 id="key"><a href="#key" class="headerlink" title="key"></a>key</h3><p>实际使用的索引，如果没有使用索引则为NULL。</p><h3 id="key-len"><a href="#key-len" class="headerlink" title="key_len"></a>key_len</h3><p>表示索引中使用的字节数，查询中使用的索引的长度（最大可能长度），并非实际使用长度，理论上长度越短越好。</p><h3 id="ref-1"><a href="#ref-1" class="headerlink" title="ref"></a>ref</h3><p>显示索引的哪一列被使用了，有时候会是一个常量：表示哪些列或常量被用于用于查找索引列上的值</p><p><img src="/photo/img/数据库-explain/explain10.png" alt="执行结果"></p><h3 id="row"><a href="#row" class="headerlink" title="row"></a>row</h3><p>表示此次查询需要读取的行数。</p><h3 id="extra"><a href="#extra" class="headerlink" title="extra"></a>extra</h3><h4 id="Using-filesort"><a href="#Using-filesort" class="headerlink" title="Using filesort"></a>Using filesort</h4><p>如果使用非索引列进行排序，则<code>extra</code>会展示<code>Using filesort</code><br>eg:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> cm_users <span class="keyword">where</span> created_at &lt; <span class="string">'2019-01-11 00:12:39'</span> <span class="keyword">order</span> <span class="keyword">by</span>  <span class="string">`name`</span> <span class="keyword">limit</span> <span class="number">5</span></div></pre></td></tr></table></figure><p><img src="/photo/img/数据库-explain/explain11.png" alt="执行结果"></p><h4 id="Using-temporary"><a href="#Using-temporary" class="headerlink" title="Using temporary"></a>Using temporary</h4><p>如果mysql 使用临时表保存中间结果，</p><p>eg:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> cm_users <span class="keyword">where</span> created_at &lt; <span class="string">'2019-01-11 00:12:39'</span> <span class="keyword">group</span> <span class="keyword">by</span>  <span class="string">`name`</span> <span class="keyword">limit</span> <span class="number">5</span></div></pre></td></tr></table></figure></p><p><img src="/photo/img/数据库-explain/explain12.png" alt="执行结果"></p><h4 id="Using-index"><a href="#Using-index" class="headerlink" title="Using index"></a>Using index</h4><p>表次此次查询使用了覆盖索引，没有直接访问表的数据行，效率高。如果同时出现了 using where,表明索引用来执行索引键值的查找。如果没有出现using where 表明索引只是用来读取数据。</p><blockquote><p>覆盖索引：当前查询的数据在索引内都存在，则不需要访问数据表即可获取数据。如果要使用覆盖索引不可使用 <code>select *</code>,如果给所字段建立索引则会降低数据库写入更新速度。</p></blockquote><h4 id="Using-where"><a href="#Using-where" class="headerlink" title="Using where"></a>Using where</h4><p>使用了where过滤</p><h4 id="Using-join-buffer"><a href="#Using-join-buffer" class="headerlink" title="Using join buffer"></a>Using join buffer</h4><p>使用了链接缓存</p><h4 id="Impossible-WHERE"><a href="#Impossible-WHERE" class="headerlink" title="Impossible WHERE"></a>Impossible WHERE</h4><p>where永远为不可成立的条件时出现</p><h4 id="distinct"><a href="#distinct" class="headerlink" title="distinct"></a>distinct</h4><p>优化distinct操作，在找到第一个匹配的数据时，停止对同样的值寻找。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;官方文档&quot;&gt;&lt;a href=&quot;#官方文档&quot; class=&quot;headerlink&quot; title=&quot;官方文档&quot;&gt;&lt;/a&gt;官方文档&lt;/h2&gt;&lt;p&gt;使用&lt;code&gt;explain&lt;/code&gt;可以分析sql的执行情况，定位慢sql的问题，从而可优化查询语句。&lt;br&gt;&lt;co
      
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数据库" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>算法-最接近的三数之和-16</title>
    <link href="http://yoursite.com/2019/01/28/%E7%AE%97%E6%B3%95-%E6%9C%80%E6%8E%A5%E8%BF%91%E7%9A%84%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C/"/>
    <id>http://yoursite.com/2019/01/28/算法-最接近的三数之和/</id>
    <published>2019-01-28T07:18:49.000Z</published>
    <updated>2019-01-28T13:48:23.557Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><h3 id="英文"><a href="#英文" class="headerlink" title="英文"></a>英文</h3><p>Given an array nums of n integers and an integer target, find three integers in nums such that the sum is closest to target. Return the sum of the three integers. You may assume that each input would have exactly one solution.</p><p>Example:</p><p>Given array nums = [-1, 2, 1, -4], and target = 1.</p><p>The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).</p><h3 id="中文"><a href="#中文" class="headerlink" title="中文"></a>中文</h3><p>给定一个包括 n 个整数的数组 nums 和 一个目标值 target。找出 nums 中的三个整数，使得它们的和与 target 最接近。返回这三个数的和。假定每组输入只存在唯一答案。</p><p>例如，给定数组 nums = [-1，2，1，-4], 和 target = 1.</p><p>与 target 最接近的三个数的和为 2. (-1 + 2 + 1 = 2).</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="原来思路"><a href="#原来思路" class="headerlink" title="原来思路"></a>原来思路</h3><p>与求三数之和相似，先排序再查找最优解，然是时间复杂度由n^3变为n^2。</p><ul><li>排序数组</li><li>定义左右指针 <code>i=key+1</code>、<code>j=size-1</code>，左加右减，寻找最优解（val +$nums[$i]+$nums[$j] == $target）。</li><li>循环节点，重复上述操作寻找最优解。</li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">threeSumClosest</span><span class="params">($nums, $target)</span> </span>&#123;</div><div class="line">        sort($nums);<span class="comment">//排序就不写了。。</span></div><div class="line">        <span class="keyword">foreach</span>($nums <span class="keyword">as</span> $key =&gt; $val)</div><div class="line">        &#123;</div><div class="line">            $i = $key +<span class="number">1</span>;</div><div class="line">            $j = count($nums) <span class="number">-1</span>;</div><div class="line">            <span class="keyword">while</span>($j &gt; $i)</div><div class="line">            &#123;</div><div class="line">                <span class="comment">//如果相等，直接返回。</span></div><div class="line">                <span class="keyword">if</span>($val + $nums[$i] + $nums[$j] == $target)</div><div class="line">                &#123;</div><div class="line">                    <span class="keyword">return</span> $val + $nums[$i] + $nums[$j];</div><div class="line">                &#125;</div><div class="line">                <span class="comment">//获取最优解</span></div><div class="line">                <span class="keyword">if</span>(<span class="keyword">isset</span>($tmp))&#123;</div><div class="line">                    $absv = abs($val + $nums[$i] + $nums[$j] -$target);</div><div class="line">                    <span class="keyword">if</span>($absv &lt; abs($tmp-$target)) &#123;</div><div class="line">                        $tmp = ($val + $nums[$i] + $nums[$j]);</div><div class="line">                    &#125;  </div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    $absv = abs($val + $nums[$i] + $nums[$j] -$target);</div><div class="line">                    $tmp = ($val + $nums[$i] + $nums[$j]);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span>($val + $nums[$i] + $nums[$j] &gt; $target)</div><div class="line">                &#123;</div><div class="line">                    $j--;</div><div class="line">                    <span class="keyword">continue</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span>($val + $nums[$i] + $nums[$j] &lt;$target)</div><div class="line">                &#123;</div><div class="line">                    $i++;</div><div class="line">                    <span class="keyword">continue</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> $tmp;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;h3 id=&quot;英文&quot;&gt;&lt;a href=&quot;#英文&quot; class=&quot;headerlink&quot; title=&quot;英文&quot;&gt;&lt;/a&gt;英文&lt;/h3&gt;&lt;p&gt;Giv
      
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>算法-盛水最多的容器</title>
    <link href="http://yoursite.com/2019/01/28/%E7%AE%97%E6%B3%95-%E7%9B%9B%E6%B0%B4%E6%9C%80%E5%A4%9A%E7%9A%84%E5%AE%B9%E5%99%A8/"/>
    <id>http://yoursite.com/2019/01/28/算法-盛水最多的容器/</id>
    <published>2019-01-28T07:11:20.000Z</published>
    <updated>2019-01-28T13:48:50.216Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><h3 id="英文"><a href="#英文" class="headerlink" title="英文"></a>英文</h3><p><code>11. Container With Most Water</code><br>Given n non-negative integers a1, a2, …, an , where each represents a point at coordinate (i, ai). n vertical lines are drawn such that the two endpoints of line i is at (i, ai) and (i, 0). Find two lines, which together with x-axis forms a container, such that the container contains the most water.</p><p>Note: You may not slant the container and n is at least 2.</p><p><img src="/photo/img/算法-盛水最多的容器/question_11.jpg" alt="image"></p><p>The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.</p><p>Example:</p><p>Input: [1,8,6,2,5,4,8,3,7]<br>Output: 49</p><h3 id="中文"><a href="#中文" class="headerlink" title="中文"></a>中文</h3><p><code>11. 盛最多水的容器</code></p><p>给定 n 个非负整数 a1，a2，…，an，每个数代表坐标中的一个点 (i, ai) 。在坐标内画 n 条垂直线，垂直线 i 的两个端点分别为 (i, ai) 和 (i, 0)。找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。</p><p>说明：你不能倾斜容器，且 n 的值至少为 2。</p><p><img src="/photo/img/算法-盛水最多的容器/question_11.jpg" alt="image"></p><p>图中垂直线代表输入数组 [1,8,6,2,5,4,8,3,7]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为 49。</p><p>示例:</p><p>输入: [1,8,6,2,5,4,8,3,7]<br>输出: 49</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="思路1"><a href="#思路1" class="headerlink" title="思路1"></a>思路1</h3><ul><li>遍历循环，寻找最优解。</li></ul><h3 id="思路2（贪心）"><a href="#思路2（贪心）" class="headerlink" title="思路2（贪心）"></a>思路2（贪心）</h3><ul><li>取数组最左最右作为容器的左右边界。</li><li>将高度较小的的边界不断向内移动，直到找到面积更大的。</li><li>重复第二部操作，直到左右边界重合。</li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxArea</span><span class="params">(<span class="keyword">int</span>* height, <span class="keyword">int</span> heightSize)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(heightSize &lt; <span class="number">2</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> width = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> hight = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; heightSize;i++)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = i+<span class="number">1</span>; j &lt; heightSize; j++)</div><div class="line">        &#123;</div><div class="line">            width = j -i;</div><div class="line">            hight = min(height[i], height[j]);</div><div class="line">            ret = max(ret, (width*hight));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//获取两数最小值</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">min</span><span class="params">(a, b)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> a &gt; b ? b : a;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//获取两数内最大值</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(a, b)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> a &gt; b ? a : b;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><code>优化后代码</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxArea</span><span class="params">(<span class="keyword">int</span>* height, <span class="keyword">int</span> heightSize)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(heightSize &lt; <span class="number">2</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> j = heightSize - <span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span> h = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>(i &lt; j)</div><div class="line">    &#123;</div><div class="line">        h = min(height[i], height[j]);</div><div class="line">        ret  = max(ret, (h*(j-i)));</div><div class="line">        <span class="keyword">if</span>(height[i] &lt; height[j]) i++;</div><div class="line">        <span class="keyword">else</span> j--;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//获取两数最小值</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">min</span><span class="params">(a, b)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> a &gt; b ? b : a;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//获取两数内最大值</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(a, b)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> a &gt; b ? a : b;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;h3 id=&quot;英文&quot;&gt;&lt;a href=&quot;#英文&quot; class=&quot;headerlink&quot; title=&quot;英文&quot;&gt;&lt;/a&gt;英文&lt;/h3&gt;&lt;p&gt;&lt;co
      
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>算法-三数之和</title>
    <link href="http://yoursite.com/2019/01/28/%E7%AE%97%E6%B3%95-%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C/"/>
    <id>http://yoursite.com/2019/01/28/算法-三数之和/</id>
    <published>2019-01-28T04:23:30.000Z</published>
    <updated>2019-01-29T13:40:58.450Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><h3 id="英文"><a href="#英文" class="headerlink" title="英文"></a>英文</h3><p>Given an array nums of n integers, are there elements a, b, c in nums such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.</p><p>Note:</p><p>The solution set must not contain duplicate triplets.</p><p>Example:</p><p>Given array nums = [-1, 0, 1, 2, -1, -4],</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">A solution set is:</div><div class="line">[</div><div class="line">  [-1, 0, 1],</div><div class="line">  [-1, -1, 2]</div><div class="line">]</div></pre></td></tr></table></figure><h3 id="中文"><a href="#中文" class="headerlink" title="中文"></a>中文</h3><p>给定一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，使得 a + b + c = 0 ？找出所有满足条件且不重复的三元组。</p><p>注意：答案中不可以包含重复的三元组。</p><p>例如, 给定数组 nums = [-1, 0, 1, 2, -1, -4]，</p><p>满足要求的三元组集合为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">  [-1, 0, 1],</div><div class="line">  [-1, -1, 2]</div><div class="line">]</div></pre></td></tr></table></figure><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ul><li>对数据进行排序（将三数之和转化为两数之和，减少时间复杂度）</li><li>遍历,取<code>当前节点</code>以及<code>当前节点右边非重复两个值</code>（这里利用双指针），比对三个值的和是否等于0。</li><li>因为比对的结果是0，且除当前节点外的两个节点都大于当前节点，所以如果当前节点大于0，则停止遍历<h3 id="原思路"><a href="#原思路" class="headerlink" title="原思路"></a>原思路</h3>暴力循环寻找最优解，但是时间复杂度变成n^3,会超时。<h3 id="优化思路"><a href="#优化思路" class="headerlink" title="优化思路"></a>优化思路</h3></li><li>首先对数组进行排序（最好快排）</li><li>循环数组，当前节点为i</li><li>定义两个指针 <code>j (j=i+1)</code>、 <code>k (k=numssize-1)</code>,依据条件（nums[j] + nums[j] + nums[k] == 0）遍历寻找最优解。</li><li>如果最小节点i &gt; 0，则无需继续循环。<br>优化后代码时间复杂度由原来的n^3变为n^2</li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="keyword">int</span> *nums, <span class="keyword">int</span> lenNums)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> i, j;</div><div class="line">    <span class="keyword">int</span> tmp;</div><div class="line">    <span class="keyword">int</span> flag = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; lenNums; i++) &#123;</div><div class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; lenNums - <span class="number">1</span>; ++j) &#123;</div><div class="line">            <span class="keyword">if</span> (nums[j + <span class="number">1</span>] &lt; nums[j]) &#123;</div><div class="line">                tmp = nums[j + <span class="number">1</span>];</div><div class="line">                nums[j + <span class="number">1</span>] = nums[j];</div><div class="line">                nums[j] = tmp;</div><div class="line">                flag = <span class="number">0</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (flag == <span class="number">1</span>) &#123;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Return an array of arrays of size *returnSize.</div><div class="line"> * Note: The returned array must be malloced, assume caller calls free().</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">int</span> **<span class="title">threeSum</span><span class="params">(<span class="keyword">int</span> *nums, <span class="keyword">int</span> numsSize, <span class="keyword">int</span> *returnSize)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> i, j, k, m;</div><div class="line">    <span class="keyword">int</span> **ret = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span> ) * (numsSize*(numsSize<span class="number">-1</span>)*(numsSize<span class="number">-2</span>))/<span class="number">6</span>);</div><div class="line">    *returnSize = <span class="number">0</span>;</div><div class="line">    bubbleSort(nums, numsSize);</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; numsSize; i++) &#123;</div><div class="line">        <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; nums[i - <span class="number">1</span>] == nums[i]) &#123;</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(nums[i] &gt; <span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        j = i + <span class="number">1</span>;</div><div class="line">        k = numsSize - <span class="number">1</span>;</div><div class="line">        <span class="keyword">while</span> (k &gt; j) &#123;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (nums[j] + nums[k] + nums[i]== <span class="number">0</span>) &#123;</div><div class="line">                ret[*returnSize] = (<span class="keyword">int</span> *) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>) * <span class="number">3</span>);</div><div class="line">                ret[*returnSize][<span class="number">0</span>] = nums[i];</div><div class="line">                ret[*returnSize][<span class="number">1</span>] = nums[j];</div><div class="line">                ret[*returnSize][<span class="number">2</span>] = nums[k];</div><div class="line">                j++;</div><div class="line">                k--;</div><div class="line">                (*returnSize)++;</div><div class="line">                <span class="keyword">while</span> (j &lt; k &amp;&amp; nums[j] == nums[j - <span class="number">1</span>]) &#123;</div><div class="line">                    j++;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">while</span> (j &lt; k &amp;&amp; nums[k] == nums[k + <span class="number">1</span>]) &#123;</div><div class="line">                    k--;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (nums[j] + nums[k] + nums[i] &gt; <span class="number">0</span>) &#123;</div><div class="line">                k--;</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (nums[j] + nums[k] + nums[i] &lt; <span class="number">0</span>) &#123;</div><div class="line">                j++;</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;h3 id=&quot;英文&quot;&gt;&lt;a href=&quot;#英文&quot; class=&quot;headerlink&quot; title=&quot;英文&quot;&gt;&lt;/a&gt;英文&lt;/h3&gt;&lt;p&gt;Giv
      
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>算法-求两个有序链表的中位数</title>
    <link href="http://yoursite.com/2019/01/27/%E7%AE%97%E6%B3%95-%E6%B1%82%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8%E7%9A%84%E4%B8%AD%E4%BD%8D%E6%95%B0/"/>
    <id>http://yoursite.com/2019/01/27/算法-求两个有序链表的中位数/</id>
    <published>2019-01-27T12:34:22.000Z</published>
    <updated>2019-01-28T13:48:34.444Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><h3 id="英文"><a href="#英文" class="headerlink" title="英文"></a>英文</h3><p><code>4. Median of Two Sorted Arrays</code><br>There are two sorted arrays nums1 and nums2 of size m and n respectively.</p><p>Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).</p><p>You may assume nums1 and nums2 cannot be both empty.</p><p>Example 1:</p><p>nums1 = [1, 3]<br>nums2 = [2]</p><p>The median is 2.0<br>Example 2:</p><p>nums1 = [1, 2]<br>nums2 = [3, 4]</p><p>The median is (2 + 3)/2 = 2.5</p><h3 id="中文"><a href="#中文" class="headerlink" title="中文"></a>中文</h3><p><code>4. 寻找两个有序数组的中位数</code><br>给定两个大小为 m 和 n 的有序数组 nums1 和 nums2。</p><p>请你找出这两个有序数组的中位数，并且要求算法的时间复杂度为 O(log(m + n))。</p><p>你可以假设 nums1 和 nums2 不会同时为空。</p><p>示例 1:</p><p>nums1 = [1, 3]<br>nums2 = [2]</p><p>则中位数是 2.0<br>示例 2:</p><p>nums1 = [1, 2]<br>nums2 = [3, 4]</p><p>则中位数是 (2 + 3)/2 = 2.5</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>一下午，还是没解出来尴尬。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>官方解题思路</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">findMedianSortedArrays</span><span class="params">($nums1, $nums2)</span> </span>&#123;</div><div class="line">        $count1 = count($nums1);</div><div class="line">        $count2 = count($nums2);</div><div class="line">        </div><div class="line">        <span class="comment">//交换$nums1为大一点数组</span></div><div class="line">        <span class="keyword">if</span>($count2 &gt; $count1)</div><div class="line">        &#123;</div><div class="line">            $count1 = $count1 + $count2;</div><div class="line">            $count2 = $count1 - $count2;</div><div class="line">            $count1 = $count1 - $count2;</div><div class="line">            $tmp = $nums1;</div><div class="line">            $nums1 = $nums2;</div><div class="line">            $nums2= $tmp;</div><div class="line">        &#125;</div><div class="line">    </div><div class="line">        $iMin = <span class="number">0</span>;</div><div class="line">        $iMax = $count2;</div><div class="line">        $halfLen = intval((($count1 + $count2 +<span class="number">1</span>)/<span class="number">2</span>)) ;</div><div class="line">        <span class="keyword">while</span>($iMin &lt;= $iMax)</div><div class="line">        &#123;</div><div class="line">            $i = intval((($iMax+$iMin) /<span class="number">2</span>));</div><div class="line">            $j = $halfLen -$i;</div><div class="line">            <span class="keyword">if</span>($i &lt; $iMax &amp;&amp; $nums1[$j<span class="number">-1</span>] &gt; $nums2[$i])</div><div class="line">            &#123;</div><div class="line">                $iMin = $i + <span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>($i &gt; $iMin &amp;&amp; $nums2[$i<span class="number">-1</span>] &gt; $nums1[$j])</div><div class="line">            &#123;</div><div class="line">                $iMax = $i<span class="number">-1</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> &#123;</div><div class="line">                $maxLeft = <span class="number">0</span>;</div><div class="line">                <span class="keyword">if</span>($i == <span class="number">0</span>)&#123;$maxLeft = $nums1[$j<span class="number">-1</span>];&#125;</div><div class="line">                <span class="keyword">elseif</span>($j == <span class="number">0</span>)&#123;$maxLeft =  $nums2[$i<span class="number">-1</span>];&#125;</div><div class="line">                <span class="keyword">else</span>&#123;$maxLeft = max($nums2[$i<span class="number">-1</span>],$nums1[$j<span class="number">-1</span>]);&#125;</div><div class="line">                <span class="keyword">if</span>((($count1 + $count2)%<span class="number">2</span>) == <span class="number">1</span>) &#123;<span class="keyword">return</span> $maxLeft;&#125;</div><div class="line">                $minRight = <span class="number">0</span>;</div><div class="line">                <span class="keyword">if</span>($i == $count2)&#123;$minRight = $nums1[$j];&#125;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>($j == $count1)&#123;$minRight = $nums2[$i];&#125;</div><div class="line">                <span class="keyword">else</span>&#123;$minRight = min($nums1[$j], $nums2[$i]);&#125;</div><div class="line">                </div><div class="line">                <span class="keyword">return</span> ($maxLeft + $minRight)/<span class="number">2</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="number">0.0</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure><p>思路清晰<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">findMedianSortedArrays</span><span class="params">(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span>[] nums2)</span> </span>&#123;</div><div class="line">        <span class="comment">/**</span></div><div class="line">        如果两个数组的中位数 mid1 &lt; mid2, 则说明合并后的中位数位于 num1.right + num2之间</div><div class="line">        否则合并后的中位数位于 nums2.right + nums1 之间 (right 是相对于 mid 而言的) </div><div class="line">        getKth 函数负责找到两个数组合并(假设)后有序的数组中的第 k 个元素, k 从 1 开始计算</div><div class="line">        **/   </div><div class="line">        <span class="keyword">if</span>(nums1.length == <span class="number">0</span> &amp;&amp; nums2.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0.0</span>;</div><div class="line">        <span class="keyword">int</span> m = nums1.length, n = nums2.length;</div><div class="line">        <span class="comment">// l: 合并后数组的左半部分的最后一个数 r: 合并后数组的右半部分的第一个数</span></div><div class="line">        <span class="keyword">int</span> l = (m+n+<span class="number">1</span>) / <span class="number">2</span>; </div><div class="line">        <span class="keyword">int</span> r = (m+n+<span class="number">2</span>) / <span class="number">2</span>;</div><div class="line">        <span class="comment">// 如果 m+n 是奇数 getKth 的返回值是相同的, 是偶数则是合并后数组的中间两个数</span></div><div class="line">        <span class="keyword">if</span>(l == r) <span class="keyword">return</span> getKth(nums1, <span class="number">0</span>, nums2, <span class="number">0</span>, l);</div><div class="line">        <span class="keyword">return</span> (getKth(nums1, <span class="number">0</span>, nums2, <span class="number">0</span>, l) + getKth(nums1, <span class="number">0</span>, nums2, <span class="number">0</span>, r)) / <span class="number">2.0</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">double</span> <span class="title">getKth</span><span class="params">(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span> st1, <span class="keyword">int</span>[] nums2, <span class="keyword">int</span> st2, <span class="keyword">int</span> k)</span> </span>&#123;</div><div class="line">        <span class="comment">// 边界情况, 如果 nums1数组已经穷尽了, 则只能返回 nums2 中的第 k 个元素</span></div><div class="line">        <span class="keyword">if</span>(st1 &gt; nums1.length-<span class="number">1</span>) <span class="keyword">return</span> nums2[st2 + k - <span class="number">1</span>];</div><div class="line">        <span class="keyword">if</span>(st2 &gt; nums2.length-<span class="number">1</span>) <span class="keyword">return</span> nums1[st1 + k - <span class="number">1</span>];</div><div class="line">        <span class="comment">// 边界情况, k = 1 则返回两个数组中最小的那个</span></div><div class="line">        <span class="keyword">if</span>(k == <span class="number">1</span>) <span class="keyword">return</span> Math.min(nums1[st1], nums2[st2]);</div><div class="line">        <span class="comment">// 在 nums1 和 nums2 当前范围内找出 mid1 和 mid2 判断舍弃哪半部分</span></div><div class="line">        <span class="keyword">int</span> mid1 = Integer.MAX_VALUE;</div><div class="line">        <span class="keyword">int</span> mid2 = Integer.MAX_VALUE;</div><div class="line">        <span class="keyword">if</span>(st1 + k/<span class="number">2</span> - <span class="number">1</span> &lt; nums1.length) mid1 = nums1[st1 + k/<span class="number">2</span> - <span class="number">1</span>];</div><div class="line">        <span class="keyword">if</span>(st2 + k/<span class="number">2</span> - <span class="number">1</span> &lt; nums2.length) mid2 = nums2[st2 + k/<span class="number">2</span> - <span class="number">1</span>];</div><div class="line">        <span class="comment">// mid1 &lt; mid2 在 nums1.right 和 nums2 之间搜索, 丢掉 k/2 个数.</span></div><div class="line">        <span class="keyword">if</span>(mid1 &lt; mid2)</div><div class="line">            <span class="keyword">return</span> getKth(nums1, st1 + k/<span class="number">2</span>, nums2, st2, k - k/<span class="number">2</span>);</div><div class="line">        <span class="keyword">else</span></div><div class="line">            <span class="keyword">return</span> getKth(nums1, st1, nums2, st2 + k/<span class="number">2</span>, k - k/<span class="number">2</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>自己思路<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">findMedianSortedArrays</span><span class="params">($nums1, $nums2)</span> </span>&#123;</div><div class="line">        $count1 = count($nums1);</div><div class="line">        $count2 = count($nums2);</div><div class="line">        <span class="comment">//第一个数组为0情况</span></div><div class="line">        <span class="keyword">if</span>($count1 == <span class="number">0</span> ) &#123;</div><div class="line">            <span class="keyword">if</span>($count2%<span class="number">2</span> ==<span class="number">0</span>) &#123;</div><div class="line">                <span class="keyword">return</span> ($nums2[$count2/<span class="number">2</span><span class="number">-1</span>] + $nums2[($count2/<span class="number">2</span>)])/<span class="number">2</span>;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">return</span> $nums2[ceil($count2/<span class="number">2</span>)<span class="number">-1</span>];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//第二个数组为0情况</span></div><div class="line">        <span class="keyword">if</span>($count2 == <span class="number">0</span> ) &#123;</div><div class="line">            <span class="keyword">if</span>($count1%<span class="number">2</span> ==<span class="number">0</span>) &#123;</div><div class="line">                <span class="keyword">return</span> ($nums1[$count1/<span class="number">2</span> <span class="number">-1</span>] + $nums1[($count1/<span class="number">2</span>)])/<span class="number">2</span>;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">return</span> $nums1[ceil($count1/<span class="number">2</span>) <span class="number">-1</span>];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//中位数在两个数组合并以后的位置（从0开始）</span></div><div class="line">        $halfLen = ($count1 + $count2)%<span class="number">2</span> == <span class="number">0</span> ? ($count1 + $count2)/<span class="number">2</span> <span class="number">-1</span> :intval(($count1 + $count2)/<span class="number">2</span>) ;</div><div class="line">        <span class="comment">//交换$nums1为大一点数组</span></div><div class="line">        <span class="keyword">if</span>($count2 &gt; $count1)</div><div class="line">        &#123;</div><div class="line">            $count1 = $count1 + $count2;</div><div class="line">            $count2 = $count1 - $count2;</div><div class="line">            $count1 = $count1 - $count2;</div><div class="line">            $tmp = $nums1;</div><div class="line">            $nums1 = $nums2;</div><div class="line">            $nums2= $tmp;</div><div class="line">        &#125;</div><div class="line">        $ret = <span class="keyword">$this</span>-&gt;Bsearch($nums1, $nums2, <span class="number">0</span>,$count2<span class="number">-1</span>, $halfLen);</div><div class="line">        <span class="keyword">return</span> $ret;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//递归查找</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Bsearch</span><span class="params">($nums1,$nums2,$start,$end,$halfLen)</span></span></div><div class="line">    &#123;</div><div class="line">        </div><div class="line">        <span class="comment">//向下取整中位数</span></div><div class="line">        $mid = intval(($start+$end)/<span class="number">2</span>);</div><div class="line">        $poision = $halfLen - $mid<span class="number">-1</span>;</div><div class="line">        <span class="comment">//这里临界值判断</span></div><div class="line">        <span class="keyword">if</span>($start == $end) &#123;</div><div class="line">            <span class="comment">//偶数个</span></div><div class="line">            <span class="keyword">if</span>((count($nums1)+count($nums2))%<span class="number">2</span>==<span class="number">0</span>)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>($start == <span class="number">0</span> ) </div><div class="line">                &#123;</div><div class="line">                    <span class="keyword">if</span>($nums1[$poision] &lt; $nums2[$mid])&#123;</div><div class="line">                        <span class="keyword">echo</span> <span class="number">1</span>;</div><div class="line">                        <span class="keyword">return</span> ($nums1[$poision] +(<span class="keyword">isset</span>($nums1[$poision+<span class="number">1</span>]) ? min($nums1[$poision+<span class="number">1</span>], $nums2[$mid]) : $nums2[$mid]))/<span class="number">2</span>; </div><div class="line">                    &#125; </div><div class="line">                    <span class="keyword">if</span>($nums1[$poision] &gt; $nums2[$mid])</div><div class="line">                    &#123;</div><div class="line">                        <span class="keyword">echo</span> <span class="number">2</span>;</div><div class="line">                        <span class="keyword">return</span> (($nums1[$poision] + (<span class="keyword">isset</span>($nums1[$poision<span class="number">-1</span>]) ? max($nums1[$poision<span class="number">-1</span>], $nums2[$mid]) : $nums2[$mid]) )/<span class="number">2</span>); </div><div class="line">                    &#125;</div><div class="line">                &#125; </div><div class="line">                <span class="keyword">if</span>($start == (count($nums2) <span class="number">-1</span>)) &#123;</div><div class="line">                    <span class="comment">//都是临界值时</span></div><div class="line">                    <span class="keyword">if</span>($nums1[$poision] &gt; $nums2[$mid])</div><div class="line">                    &#123;</div><div class="line">                        <span class="keyword">echo</span> <span class="number">3</span>;</div><div class="line">                        <span class="keyword">return</span> (($nums1[$poision] + (<span class="keyword">isset</span>($nums1[$poision<span class="number">-1</span>]) ? max($nums1[$poision<span class="number">-1</span>], $nums2[$mid]) : $nums2[$mid]) )/<span class="number">2</span>); </div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">if</span>($nums1[$poision] &lt; $nums2[$mid])</div><div class="line">                    &#123;</div><div class="line">                        <span class="keyword">echo</span> <span class="number">9</span>;</div><div class="line">                        <span class="keyword">return</span> ($nums1[$poision] +(<span class="keyword">isset</span>($nums1[$poision+<span class="number">1</span>]) ? min($nums1[$poision+<span class="number">1</span>], $nums2[$mid]) : $nums2[$mid]))/<span class="number">2</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">echo</span> <span class="number">5</span>;</div><div class="line">                <span class="keyword">return</span> ((<span class="keyword">isset</span>($nums1[$poision+<span class="number">1</span>]) ? min($nums2[$mid], $nums1[$poision+<span class="number">1</span>]) : $nums2[$mid])  + $nums1[$poision])/<span class="number">2</span>;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="comment">//基数个</span></div><div class="line">                <span class="keyword">if</span>($start == <span class="number">0</span> ) </div><div class="line">                &#123;</div><div class="line">                    <span class="keyword">if</span>($nums1[$poision] &gt; $nums2[$mid])&#123;</div><div class="line">                        <span class="keyword">echo</span> <span class="number">6</span>;</div><div class="line">                        <span class="keyword">return</span> $nums2[$mid];</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">echo</span> <span class="number">11</span>;</div><div class="line">                    <span class="keyword">return</span> $nums1[$poision];</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span>($start == count($count2)<span class="number">-1</span>)</div><div class="line">                &#123;</div><div class="line">                    <span class="keyword">if</span>($start == $halfLen &amp;&amp; $nums1[$poision] &lt; $nums2[$mid])</div><div class="line">                    &#123;</div><div class="line">                        <span class="keyword">echo</span> <span class="number">7</span>;</div><div class="line">                        <span class="keyword">return</span> $nums1[$poision];</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">echo</span> <span class="number">8</span>;</div><div class="line">                    <span class="keyword">return</span> $nums1[$poision];</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">echo</span> <span class="number">10</span>;</div><div class="line">                <span class="keyword">echo</span> $poision.<span class="string">"\n"</span>;</div><div class="line">                <span class="keyword">echo</span> $mid.<span class="string">"\n"</span>;</div><div class="line">                <span class="keyword">return</span> $nums1[$poision];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//比对中位数</span></div><div class="line">        <span class="keyword">if</span>($nums2[$mid] &lt; $nums1[$poision])</div><div class="line">        &#123;</div><div class="line">            $ret = <span class="keyword">$this</span>-&gt;Bsearch($nums1, $nums2,  (($mid+<span class="number">1</span> &gt; $end) ? $end : $mid+<span class="number">1</span>), $end, $halfLen);</div><div class="line">        &#125; <span class="keyword">elseif</span>($nums2[$mid] &gt; $nums1[$poision])</div><div class="line">        &#123;</div><div class="line">            $ret = <span class="keyword">$this</span>-&gt;Bsearch($nums1,$nums2,$start ,(($mid<span class="number">-1</span> &lt; $start) ? $start : $mid<span class="number">-1</span>), $halfLen);</div><div class="line">        &#125;<span class="keyword">elseif</span>($nums2[$mid] == $nums1[$poision])</div><div class="line">        &#123;</div><div class="line">            $ret = $nums2[$mid];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> $ret;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;h3 id=&quot;英文&quot;&gt;&lt;a href=&quot;#英文&quot; class=&quot;headerlink&quot; title=&quot;英文&quot;&gt;&lt;/a&gt;英文&lt;/h3&gt;&lt;p&gt;&lt;co
      
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>算法-水壶问题</title>
    <link href="http://yoursite.com/2019/01/23/%E7%AE%97%E6%B3%95-%E6%B0%B4%E5%A3%B6%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2019/01/23/算法-水壶问题/</id>
    <published>2019-01-23T07:45:13.000Z</published>
    <updated>2019-01-23T10:24:22.285Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><h3 id="英文"><a href="#英文" class="headerlink" title="英文"></a>英文</h3><p>You are given two jugs with capacities x and y litres. There is an infinite amount of water supply available. You need to determine whether it is possible to measure exactly z litres using these two jugs.</p><p>If z liters of water is measurable, you must have z liters of water contained within one or both buckets by the end.</p><p>Operations allowed:</p><p>Fill any of the jugs completely with water.<br>Empty any of the jugs.<br>Pour water from one jug into another till the other jug is completely full or the first jug itself is empty.<br>Example 1: (From the famous “Die Hard” example)</p><p>Input: x = 3, y = 5, z = 4<br>Output: True<br>Example 2:</p><p>Input: x = 2, y = 6, z = 5<br>Output: False</p><h3 id="中文"><a href="#中文" class="headerlink" title="中文"></a>中文</h3><p>有两个容量分别为 x升 和 y升 的水壶以及无限多的水。请判断能否通过使用这两个水壶，从而可以得到恰好 z升 的水？</p><p>如果可以，最后请用以上水壶中的一或两个来盛放取得的 z升 水。</p><p>你允许：</p><p>装满任意一个水壶<br>清空任意一个水壶<br>从一个水壶向另外一个水壶倒水，直到装满或者倒空<br>示例 1: (From the famous “Die Hard” example)</p><p>输入: x = 3, y = 5, z = 4<br>输出: True<br>示例 2:</p><p>输入: x = 2, y = 6, z = 5<br>输出: False</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>需要满足条件：<br>1.两个杯子，如果z&gt;x+y说明两个杯子无法满足。<br>2.如果z=0，则直接返回true;<br>3.如果a||b有一个为0，则另一个一个不等于z时返回false<br>4.ax+by=z,根据这个公式可知，如果z是a,b的最大公约数的整数倍。</p><p>所以该问题可以转化为 z%gcd(x,y) == 0的问题。</p><h3 id="疑问"><a href="#疑问" class="headerlink" title="疑问"></a>疑问</h3><p>以为一定要是gcd，而不能是公约数呢？(裴蜀定理)<br>如何证明？？？</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">canMeasureWater</span><span class="params">($x, $y, $z)</span> </span>&#123;</div><div class="line">        <span class="comment">//排除为0的情况</span></div><div class="line">        <span class="keyword">if</span>($z == <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>($x == <span class="number">0</span> &amp;&amp; $y == <span class="number">0</span>)</div><div class="line">        &#123;   </div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//设$x为大 $y为小</span></div><div class="line">        <span class="keyword">if</span>($x&lt;$y)</div><div class="line">        &#123;</div><div class="line">            $x = $x+$y;</div><div class="line">            $y= $x-$y;</div><div class="line">            $x = $x - $y;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>($x &lt; <span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">return</span> ($y==$z);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>($y != <span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>($z==$x || $z==$y|| $x+$y==$z || $x-$y == $z)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>($x+$y&lt; $z) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">while</span>($x%$y != <span class="number">0</span>) </div><div class="line">            &#123;</div><div class="line">                $tmp = $x;</div><div class="line">                $x = $y%$x;</div><div class="line">                $y = $tmp;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> ($z%$y==<span class="number">0</span>);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">if</span>($z%$x==<span class="number">0</span>) &#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;h3 id=&quot;英文&quot;&gt;&lt;a href=&quot;#英文&quot; class=&quot;headerlink&quot; title=&quot;英文&quot;&gt;&lt;/a&gt;英文&lt;/h3&gt;&lt;p&gt;You
      
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>数据库-mysql索引简介</title>
    <link href="http://yoursite.com/2019/01/18/%E6%95%B0%E6%8D%AE%E5%BA%93-%E7%B4%A2%E5%BC%95%E7%AE%80%E4%BB%8B/"/>
    <id>http://yoursite.com/2019/01/18/数据库-索引简介/</id>
    <published>2019-01-18T03:10:15.000Z</published>
    <updated>2019-01-22T02:37:48.431Z</updated>
    
    <content type="html"><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>因为各个数据库的索引机制不尽相同，在此涉及到mysql的两种索引<code>b-tree</code>、<code>hash</code>。</p><blockquote><p>这里所指的所有数据库都是指mysql.</p></blockquote><h2 id="索引的本质"><a href="#索引的本质" class="headerlink" title="索引的本质"></a>索引的本质</h2><p>mysql官方文档对索引的描述：<code>索引</code>是帮助mysql高效获取数据的数据结构。so 索引的本质是<code>数据结构</code>。涉及到查找的时候肯定避不开查找算法，例如<code>顺序查找</code>、<code>二分查找</code>。随着人们对查找性能要求的越来越高就延伸出来了基于树的查找，例如<code>二叉树的查找</code>。当然即使是<code>二叉树的查找</code>也无法满足现在程序对于查找性能的要求，进而出现了基于<code>b-tree</code>、<code>hash</code>的查找。可以分析下查找的演变过程，所有的查找都是基于一定的数据结构，例如最开始<code>顺序查找</code>基于链表、<code>二分查找</code>基于有序链表、<code>二叉树查找</code>基于树。这种为了满足这种<strong>高效小的查询效率</strong>所衍伸出来的数据结构就是<strong>索引</strong>。</p><h2 id="索引的选择"><a href="#索引的选择" class="headerlink" title="索引的选择"></a>索引的选择</h2><p>基于树的查找效率由树的深度决定，所以二叉树是无法满足查询速度的要求，mysql的索引主要使用 <code>b+tree</code>。</p><h3 id="b-tree"><a href="#b-tree" class="headerlink" title="b-tree"></a>b-tree</h3><p><code>b-树</code>（由b-tree翻译过来）也就是b树，是一种路自平衡搜索树。如果我们以一个二元组来表示索引的内容的话（[key,val]）,key表示键值，val表示数据（地址或者主键），则<code>b-树</code>有以下特点。</p><blockquote><p>树的度的定义：每个节点包含子树的个数。</p><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ul><li>所有的键值分布在整个树种（包括叶子节点和非叶子节点）</li><li>任何<strong>key</strong>只会出现一次</li><li>所有的叶子节点必须在同一层次，也就是他们具有相同的深度。</li><li>每个节点里的关键字是有序的（一个结点中的key从左至右非递减排列），当前节点的左右两个指针指向的节点，左指针指向的节点的key小于当前节点，右指针指向的节点的key大于当前节点。</li><li>d&gt;=2,每个节点有n-1个<code>key</code> 和n个指针，d&lt;=n&lt;=2d。</li></ul></blockquote><p>假设b-tree的度为d,高为h，其索引个数为N。则<code>h=logd((n+1)/2)</code>，查找一条数据的渐进复杂度为<code>logdn</code>。由于索引数量n和其高度h程对数关系（实际使用中d一般会大于100），所以即使是key很大，查询效率也会很快，分析可以的出b-tree查找一个最多需要<strong>h-1</strong>次磁盘io。<br>举个栗子一个度为1001，高度为2（不包含根节点）的b-tree可以存储超高10亿的数据，且每个节点如果使用二分查找的话，只需要三次查找就可以查询到所需的数据。</p><h4 id="结构图"><a href="#结构图" class="headerlink" title="结构图"></a>结构图</h4><p><img src="/photo/img/数据库索引/b-tree.png" alt="image"></p><h3 id="b-tree-1"><a href="#b-tree-1" class="headerlink" title="b+tree"></a>b+tree</h3><p>b+tree是是b-tree的升级版，所有的data值存在叶子节点。</p><h4 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h4><ul><li>b+tree树只有叶子节点包含data，非叶子节点只存key与指针</li><li>所有的叶子节点为一个链表</li></ul><h4 id="结构图-1"><a href="#结构图-1" class="headerlink" title="结构图"></a>结构图</h4><p><img src="/photo/img/数据库索引/b+tree.png" alt="image"></p><h2 id="索引原理"><a href="#索引原理" class="headerlink" title="索引原理"></a>索引原理</h2><ul><li>聚簇索引 ：索引和文件为同一个文件。</li><li>非聚簇索引： 索引和数据文件分开的索引。</li></ul><p>MyISAM 和 InnoDb都使用<code>b+tree</code>索引结构，但是底层确实不一样的，MyISAM采用的事非聚簇索引，而innoDB采用的是聚簇索引。</p><h3 id="MyISAM"><a href="#MyISAM" class="headerlink" title="MyISAM"></a>MyISAM</h3><p>MyISAM索引原理 : 采用的费聚簇索引 My-ISAM myi索引文件和myd数据文件分离，索引文件值保存数据记录和指针地址。叶子节点data存执指向数据记录的地址。</p><p><img src="/photo/img/数据库索引/MyISAM.png" alt="image"></p><h3 id="InnoDB"><a href="#InnoDB" class="headerlink" title="InnoDB"></a>InnoDB</h3><h4 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h4><p>InnoDB物理存储文件结构说明：<br>InnoDB以表空间Tablespace(idb文件)结构进行组织，每个Tablespace包含多个Segment段（Segment 分为为叶子节点和飞叶子节点Segment），一个Segment段包含多个Extent,一个Extent占用1M空间且包含64page,innoDB b+tree一个逻辑节点就分配一个屋里Page,一个节点一次io操作。一个page里包含d个Row行数据，行数据包<br>每一个索引是一个b+tree，一个节点是=一个page(16k)。数据会按照16kb切片为page并编号，标号可以通过偏移量（16k*n）找到文件存储地址。且叶子节点为双向链表，数据按主键索引聚簇索，二级索引叶子节点存储主键值，除了覆盖索引其他二级索引都通过主键查找数据。</p><p><img src="/photo/img/数据库索引/InnoDB.png" alt="image"></p><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>InnoDB采用聚簇索引，存储于idb文件里，表数据本身就是主索引，相邻的索引临近存储。叶节点data域保存了完整的数据记录（data(除主键外所有数据）+key(主键)）。也是由于这种方式InnoDB必须建指定主键，如通过没有指定主键则mysql自动选择一个可以唯一表示数据记录的列作为主键。如果这样的列不存在，mysql自动为表生成一个隐含字段（6个字节长整型）作为主键。</p><blockquote><p>mysql所有的辅助索引data存储皆为主键值</p></blockquote><p>结构图<br><img src="/photo/img/数据库索引/InnoDB2.png" alt="image"></p><h4 id="查询流程"><a href="#查询流程" class="headerlink" title="查询流程"></a>查询流程</h4><p>1.索引精确查找<br>确定定位条件, 找到根节点Page No, 根节点读到内存, 逐层向下查找, 读取叶子节点Page,通过 二分查找找到记录或未命中。（select * from user_info where id = 23）</p><p><img src="/photo/img/数据库索引/精确查找.png" alt="image"></p><p>2.索引范围查找<br>读取根节点至内存, 确定索引定位条件id=18, 找到满足条件第一个叶节点<br>, 顺序扫描所有结果, 直到终止条件满足id &gt;=22 （select * from user_info where id &gt;= 18 and id &lt; 22）<br><img src="/photo/img/数据库索引/范围查找.png" alt="image"></p><p>3.全表扫描<br>直接读取叶节点头结点， 顺序扫描， 返回符合条件记录， 到最终节点结束<br>（select * from user_info where name = ‘abc’）</p><p><img src="/photo/img/数据库索引/扫全表.png" alt="image"></p><p>4.二级索引查找<br>建立索引<br>Create table table_x(int id primary key, varchar(64) name,key sec_index(name) )</p><p>如果执行<code>select * from table_x where name = &#39;xxxx&#39;</code></p><p><img src="/photo/img/数据库索引/二级索引查找.png" alt="image"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="mysql为什么选择b-tree"><a href="#mysql为什么选择b-tree" class="headerlink" title="mysql为什么选择b+tree"></a>mysql为什么选择b+tree</h3><p>内存读取和存盘读取不在一个数量级，所以一般内存读取相较于与磁盘io可以忽略不计。一般来说，索引的大小是无法全部存在ram里的so衡量一个索引的优劣可以以磁盘io次数来衡量。这里就可以排除h黑大的红黑树。<br><code>b-tree</code>和<code>b+tree</code>一次检索最多需要查询<strong>h-1</strong>个节点,但是<code>b+tree</code>不存data数据，索引可以存的key更多，这样查询的节点数也就也少，磁盘io也就越少。</p><blockquote><p>详解：Mysql设计利用了磁盘预读原理，将一个B+Tree节点大小设为一个页大小，在新建节点时直接申请一个页的空间，这样就能保证一个节点物理上存储在一个页里，加之计算机存储分配都是按页对齐的，这样就实现了每个Node节点只需要一次I/O操作。(一个物理Page16K)</p></blockquote><p>一般一个key的大小为8b指针的大小也为8b,这样一个page可以存储(16k/16b=1000)条记录，n层数据可以存储k的n次方跳数据，一亿条数据也不过3层而已，可谓非常高效。</p><h3 id="为什么要建立索引"><a href="#为什么要建立索引" class="headerlink" title="为什么要建立索引"></a>为什么要建立索引</h3><p>如<code>全表扫描</code>扫描那样，我们不能保证每次查询都能在前几个page里查询到所需的数据，目标数据越往后，查询效率就越慢，如果有1亿跳数据，数据查询将会慢的恐怕。</p><h3 id="是否索引越多越好"><a href="#是否索引越多越好" class="headerlink" title="是否索引越多越好"></a>是否索引越多越好</h3><p>每一个索引都是一个树，每次插入和删除都可能破坏原有的树，当树破坏是mysql需要重新把树平衡，这会消耗资源，所以索引不宜过多。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h2&gt;&lt;p&gt;因为各个数据库的索引机制不尽相同，在此涉及到mysql的两种索引&lt;code&gt;b-tree&lt;/code&gt;、&lt;code&gt;hash&lt;/code&gt;。
      
    
    </summary>
    
      <category term="数据库" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="数据库" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>数据结构-树</title>
    <link href="http://yoursite.com/2019/01/18/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%A0%91/"/>
    <id>http://yoursite.com/2019/01/18/数据结构-树/</id>
    <published>2019-01-18T01:30:16.000Z</published>
    <updated>2019-01-18T01:30:16.018Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>算法-俄罗斯套娃问题</title>
    <link href="http://yoursite.com/2019/01/17/%E7%AE%97%E6%B3%95-%E4%BF%84%E7%BD%97%E6%96%AF%E5%A5%97%E5%A8%83%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2019/01/17/算法-俄罗斯套娃问题/</id>
    <published>2019-01-17T03:14:20.000Z</published>
    <updated>2019-01-28T13:48:09.803Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><h3 id="英文"><a href="#英文" class="headerlink" title="英文"></a>英文</h3><p>You have a number of envelopes with widths and heights given as a pair of integers (w, h). One envelope can fit into another if and only if both the width and height of one envelope is greater than the width and height of the other envelope.</p><p>What is the maximum number of envelopes can you Russian doll? (put one inside other)</p><p>Note:<br>Rotation is not allowed.</p><p>Example:</p><p>Input: [[5,4],[6,4],[6,7],[2,3]]<br>Output: 3<br>Explanation: The maximum number of envelopes you can Russian doll is 3 ([2,3] =&gt; [5,4] =&gt; [6,7]).</p><h3 id="中文"><a href="#中文" class="headerlink" title="中文"></a>中文</h3><p>给定一些标记了宽度和高度的信封，宽度和高度以整数对形式 (w, h) 出现。当另一个信封的宽度和高度都比这个信封大的时候，这个信封就可以放进另一个信封里，如同俄罗斯套娃一样。</p><p>请计算最多能有多少个信封能组成一组“俄罗斯套娃”信封（即可以把一个信封放到另一个信封里面）。</p><p>说明:<br>不允许旋转信封。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ul><li>首先对数组进行基数排序（如果不排序，直接计算每个节点的套娃数会消耗大量时间）</li><li>遍历每个节点，计算每个节点最大套娃数</li><li>返回最大套娃数。</li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">maxEnvelopes</span><span class="params">($envelopes)</span> </span>&#123;</div><div class="line">        $nums = count($envelopes);</div><div class="line">        <span class="keyword">if</span>($nums &lt; <span class="number">1</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//实现基数排序</span></div><div class="line">        sort($envelopes);</div><div class="line">        <span class="comment">// var_dump($envelopes);</span></div><div class="line">        $nums = count($envelopes);</div><div class="line"></div><div class="line">        $dp[<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span>($i = <span class="number">1</span>; $i &lt; $nums; $i++)</div><div class="line">        &#123;</div><div class="line">            $dp[$i] = <span class="number">1</span>;</div><div class="line">            <span class="keyword">for</span>($j = <span class="number">0</span>; $j&lt; $i; $j ++)&#123;</div><div class="line">                <span class="keyword">if</span>($envelopes[$i][<span class="number">0</span>] &gt; $envelopes[$j][<span class="number">0</span>] &amp;&amp; $envelopes[$i][<span class="number">1</span>] &gt; $envelopes[$j][<span class="number">1</span>])</div><div class="line">                &#123;</div><div class="line">                    $tmp = $dp[$j] +<span class="number">1</span>;</div><div class="line">                    $dp[$i]  = max($dp[$i], $tmp); </div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> max($dp);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="延伸"><a href="#延伸" class="headerlink" title="延伸"></a>延伸</h2><p>php下的<code>sort</code>是如何实现？ 如何实现<code>基数排序</code>？</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;h3 id=&quot;英文&quot;&gt;&lt;a href=&quot;#英文&quot; class=&quot;headerlink&quot; title=&quot;英文&quot;&gt;&lt;/a&gt;英文&lt;/h3&gt;&lt;p&gt;You
      
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>算法-求第k个排序</title>
    <link href="http://yoursite.com/2019/01/16/%E7%AE%97%E6%B3%95-%E6%B1%82%E7%AC%ACk%E4%B8%AA%E6%8E%92%E5%BA%8F/"/>
    <id>http://yoursite.com/2019/01/16/算法-求第k个排序/</id>
    <published>2019-01-16T15:57:21.000Z</published>
    <updated>2019-01-29T07:41:40.304Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><h3 id="英文"><a href="#英文" class="headerlink" title="英文"></a>英文</h3><p>The set [1,2,3,…,n] contains a total of n! unique permutations.</p><p>By listing and labeling all of the permutations in order, we get the following sequence for n = 3:</p><p>“123”<br>“132”<br>“213”<br>“231”<br>“312”<br>“321”<br>Given n and k, return the kth permutation sequence.</p><p>Note:</p><p>Given n will be between 1 and 9 inclusive.<br>Given k will be between 1 and n! inclusive.<br>Example 1:</p><p>Input: n = 3, k = 3<br>Output: “213”<br>Example 2:</p><p>Input: n = 4, k = 9<br>Output: “2314”</p><h3 id="中文"><a href="#中文" class="headerlink" title="中文"></a>中文</h3><p>给出集合 [1,2,3,…,n]，其所有元素共有 n! 种排列。</p><p>按大小顺序列出所有排列情况，并一一标记，当 n = 3 时, 所有排列如下：</p><p>“123”<br>“132”<br>“213”<br>“231”<br>“312”<br>“321”<br>给定 n 和 k，返回第 k 个排列。</p><p>说明：</p><p>给定 n 的范围是 [1, 9]。<br>给定 k 的范围是[1,  n!]。<br>示例 1:</p><p>输入: n = 3, k = 3<br>输出: “213”<br>示例 2:</p><p>输入: n = 4, k = 9<br>输出: “2314”</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ul><li>排列的每一个位置都有一个固定的进位（如果当前数固定，可以有多少种排列），当k达到前进位是，则改位置加1。</li><li>从最左（进位最大）开始，依次用当前进位对k-1做除法（（k-1）/当前进位)，如果结果不为0，则用<code>结果</code>+当前能够使用的最小值，获得当前位置的值。</li><li>用余数当做k,按照第二步的思路，求其余位置的值。</li></ul><p>##代码<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">char</span>* <span class="title">getPermutation</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> k)</span> </span>&#123;</div><div class="line">    <span class="keyword">char</span>* result = (<span class="keyword">char</span>*)<span class="built_in">malloc</span>((n + <span class="number">1</span>) * <span class="keyword">sizeof</span>(<span class="keyword">char</span>));</div><div class="line">    <span class="keyword">bool</span>* flag = (<span class="keyword">bool</span>*)<span class="built_in">calloc</span>(n, <span class="keyword">sizeof</span>(<span class="keyword">bool</span>));</div><div class="line">    <span class="keyword">int</span> temp[<span class="number">10</span>] = &#123; <span class="number">0</span> &#125;;</div><div class="line">    temp[n] = <span class="number">1</span>;</div><div class="line">    temp[n - <span class="number">1</span>] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span> i = <span class="number">0</span>, t = <span class="number">0</span>, idx = <span class="number">0</span>, j = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(i = n - <span class="number">2</span>; i &gt; <span class="number">0</span>; i--)</div><div class="line">        temp[i] = temp[i + <span class="number">1</span>] * (n - i);</div><div class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= n; i++) &#123;</div><div class="line">        t = (k - <span class="number">1</span>) / temp[i];</div><div class="line">        idx = t;</div><div class="line">        <span class="keyword">for</span>(j = <span class="number">1</span>; j &lt;= n; j++) &#123;</div><div class="line">            <span class="comment">//第j小未使用的数，j为上述计算得来。</span></div><div class="line">            <span class="keyword">if</span>(!flag[j]) &#123;</div><div class="line">                t--;</div><div class="line">                <span class="keyword">if</span>(t == <span class="number">-1</span>)</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        result[i - <span class="number">1</span>] = <span class="string">'0'</span> + j;</div><div class="line">        flag[j] = <span class="literal">true</span>;</div><div class="line">        k -= idx * temp[i];</div><div class="line">    &#125;</div><div class="line">    result[n] = <span class="string">'\0'</span>;</div><div class="line">    <span class="built_in">free</span>(flag);</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;h3 id=&quot;英文&quot;&gt;&lt;a href=&quot;#英文&quot; class=&quot;headerlink&quot; title=&quot;英文&quot;&gt;&lt;/a&gt;英文&lt;/h3&gt;&lt;p&gt;The
      
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>算法-三角形最小路径和</title>
    <link href="http://yoursite.com/2019/01/15/%E7%AE%97%E6%B3%95-%E4%B8%89%E8%A7%92%E5%BD%A2%E6%9C%80%E5%B0%8F%E8%B7%AF%E5%BE%84%E5%92%8C/"/>
    <id>http://yoursite.com/2019/01/15/算法-三角形最小路径和/</id>
    <published>2019-01-15T08:51:56.000Z</published>
    <updated>2019-01-28T13:47:51.945Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">char</span>* <span class="title">getPermutation</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> k)</span> </span>&#123;</div><div class="line">    <span class="keyword">char</span>* result = (<span class="keyword">char</span>*)<span class="built_in">malloc</span>((n + <span class="number">1</span>) * <span class="keyword">sizeof</span>(<span class="keyword">char</span>));</div><div class="line">    <span class="keyword">bool</span>* flag = (<span class="keyword">bool</span>*)<span class="built_in">calloc</span>(n, <span class="keyword">sizeof</span>(<span class="keyword">bool</span>));</div><div class="line">    <span class="keyword">int</span> temp[<span class="number">10</span>] = &#123; <span class="number">0</span> &#125;;</div><div class="line">    temp[n] = <span class="number">1</span>;</div><div class="line">    temp[n - <span class="number">1</span>] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span> i = <span class="number">0</span>, t = <span class="number">0</span>, idx = <span class="number">0</span>, j = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(i = n - <span class="number">2</span>; i &gt; <span class="number">0</span>; i--)</div><div class="line">        temp[i] = temp[i + <span class="number">1</span>] * (n - i);</div><div class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= n; i++) &#123;</div><div class="line">        t = (k - <span class="number">1</span>) / temp[i];</div><div class="line">        idx = t;</div><div class="line">        <span class="keyword">for</span>(j = <span class="number">1</span>; j &lt;= n; j++) &#123;</div><div class="line">            <span class="comment">//取当前最小的未使用的数值</span></div><div class="line">            <span class="keyword">if</span>(!flag[j]) &#123;</div><div class="line">                t--;</div><div class="line">                <span class="keyword">if</span>(t == <span class="number">-1</span>)</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        result[i - <span class="number">1</span>] = <span class="string">'0'</span> + j;</div><div class="line">        flag[j] = <span class="literal">true</span>;</div><div class="line">        k -= idx * temp[i];</div><div class="line">    &#125;</div><div class="line">    result[n] = <span class="string">'\0'</span>;</div><div class="line">    <span class="built_in">free</span>(flag);</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;h2 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;headerlink&quot; title=&quot;思路&quot;&gt;&lt;/a&gt;思路&lt;/h2&gt;&lt;h2 id
      
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>算法-最大子序和</title>
    <link href="http://yoursite.com/2019/01/14/%E7%AE%97%E6%B3%95-%E6%9C%80%E5%A4%A7%E5%AD%90%E5%BA%8F%E5%92%8C/"/>
    <id>http://yoursite.com/2019/01/14/算法-最大子序和/</id>
    <published>2019-01-14T13:43:04.000Z</published>
    <updated>2019-01-30T05:28:33.821Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><h3 id="英文"><a href="#英文" class="headerlink" title="英文"></a>英文</h3><p>Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.</p><p>Example:</p><p>Input: [-2,1,-3,4,-1,2,1,-5,4],<br>Output: 6<br>Explanation: [4,-1,2,1] has the largest sum = 6.</p><h3 id="中文"><a href="#中文" class="headerlink" title="中文"></a>中文</h3><p>给定一个整数数组 nums ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ul><li>动态规划。</li><li>把求联系最大子序列转化为求当前节点与上一节点的最大值。</li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxSubArray</span><span class="params">(<span class="keyword">int</span>* nums, <span class="keyword">int</span> numsSize)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(numsSize == <span class="number">0</span>)&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(numsSize &lt;=<span class="number">1</span>)&#123;</div><div class="line">        <span class="keyword">return</span> *nums;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> tmp = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> pre =  *nums ;</div><div class="line">    nums++;</div><div class="line">    </div><div class="line">    <span class="keyword">int</span> ret = pre;</div><div class="line">   <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i&lt; numsSize;i++)</div><div class="line">   &#123;</div><div class="line">       tmp = (pre + *nums) &gt; *nums ? (pre + *nums) : *nums;</div><div class="line">       </div><div class="line">           <span class="comment">// printf("tmp:%d\n", tmp);</span></div><div class="line">           <span class="keyword">if</span>(tmp &gt; ret)</div><div class="line">           &#123;</div><div class="line">               ret = tmp;</div><div class="line">           &#125;</div><div class="line">        </div><div class="line">       </div><div class="line">       pre = tmp;</div><div class="line">       nums++;</div><div class="line">   &#125;</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;h3 id=&quot;英文&quot;&gt;&lt;a href=&quot;#英文&quot; class=&quot;headerlink&quot; title=&quot;英文&quot;&gt;&lt;/a&gt;英文&lt;/h3&gt;&lt;p&gt;Giv
      
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>算法-求最大正方形面积</title>
    <link href="http://yoursite.com/2019/01/14/%E7%AE%97%E6%B3%95-%E6%B1%82%E6%9C%80%E5%A4%A7%E6%AD%A3%E6%96%B9%E5%BD%A2%E9%9D%A2%E7%A7%AF/"/>
    <id>http://yoursite.com/2019/01/14/算法-求最大正方形面积/</id>
    <published>2019-01-14T09:18:04.000Z</published>
    <updated>2019-01-14T11:25:28.948Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><h3 id="英文"><a href="#英文" class="headerlink" title="英文"></a>英文</h3><p>Given a 2D binary matrix filled with 0’s and 1’s, find the largest square containing only 1’s and return its area.</p><p>Example:</p><p>Input: </p><p>1 0 1 0 0<br>1 0 1 1 1<br>1 1 1 1 1<br>1 0 0 1 0</p><p>Output: 4</p><h3 id="中文"><a href="#中文" class="headerlink" title="中文"></a>中文</h3><p>在一个由 0 和 1 组成的二维矩阵内，找到只包含 1 的最大正方形，并返回其面积。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ul><li>动态规划(主要用户将一个复杂的问题分解为多个建单的问题，求最优解时)。</li><li>声明一个空间和原有二位数据大小一样的二位数组(tmp[i][j])。</li><li>计算每一个节点最大正方形的边长，并存储与该节点（利用之前节点计算当前节点最大正方形边长）。</li><li>取tmp[i][j]得最大值的平凡返回。<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2></li></ul><p><code>第一版代码</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">maximalSquare</span><span class="params">($matrix)</span> </span>&#123;</div><div class="line">      $hight =  count($matrix);</div><div class="line">      <span class="keyword">if</span>($hight&lt;<span class="number">1</span>)</div><div class="line">      &#123;</div><div class="line">          <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">      &#125;</div><div class="line">      $wide = <span class="number">0</span>;</div><div class="line">      <span class="keyword">if</span>($hight &gt; <span class="number">0</span>)&#123;</div><div class="line">          $wide= count($matrix[<span class="number">0</span>]);</div><div class="line">      &#125;</div><div class="line">      $ret = <span class="number">0</span>;</div><div class="line">      <span class="keyword">for</span>($i = <span class="number">1</span>; $i&lt;= $hight; $i++)</div><div class="line">      &#123;</div><div class="line">          $tmp = <span class="keyword">$this</span>-&gt;getRet($matrix, $i, $hight, $wide);</div><div class="line">          <span class="keyword">if</span>($ret &lt;$tmp )&#123;</div><div class="line">              $ret = $tmp;</div><div class="line">          &#125;</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">return</span> $ret;</div><div class="line">  &#125;</div><div class="line">    </div><div class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getRet</span><span class="params">($matrix, $i, $hight, $wide)</span></span></div><div class="line">  &#123;</div><div class="line">    <span class="comment">//起始点纵向坐标  </span></div><div class="line">    <span class="keyword">for</span>($h = <span class="number">0</span>; $h&lt;= $hight-$i; $h++ )</div><div class="line">    &#123;   </div><div class="line">        <span class="keyword">for</span>($j = <span class="number">0</span>;$j &lt;= $wide-$i; $j++)</div><div class="line">        &#123;</div><div class="line">            <span class="comment">//h 为起点高，j为起点宽。</span></div><div class="line">            $ret = <span class="number">1</span>;</div><div class="line">            <span class="keyword">for</span>($m = $h; $m &lt;$h + $i; $m++)&#123;</div><div class="line">                <span class="keyword">for</span>($k = $j; $k &lt; $j + $i; $k++)&#123;</div><div class="line">                    <span class="keyword">if</span>($matrix[$m][$k] == <span class="number">0</span>)</div><div class="line">                    &#123;</div><div class="line">                        $ret = <span class="number">0</span>;</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span>($ret == <span class="number">0</span>) &#123;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>($ret == <span class="number">1</span>)&#123;</div><div class="line">                <span class="keyword">return</span> $i*$i;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">  &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure><p>用php跑测试用例，跑了2.5秒。😓</p><p>回头用c重写下试试。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">待定</div></pre></td></tr></table></figure></p><h2 id="最优解"><a href="#最优解" class="headerlink" title="最优解"></a>最优解</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maximalSquare</span><span class="params">(<span class="keyword">char</span>[][] matrix)</span> </span>&#123;</div><div class="line">        <span class="comment">/**</span></div><div class="line">        dp[i][j]表示以第i行第j列为右下角所能构成的最大正方形边长, 则递推式为: </div><div class="line">        dp[i][j] = 1 + min(dp[i-1][j-1], dp[i-1][j], dp[i][j-1]);</div><div class="line">        **/</div><div class="line">        <span class="keyword">int</span> m = matrix.length;</div><div class="line">        <span class="keyword">if</span>(m &lt; <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> n = matrix[<span class="number">0</span>].length;</div><div class="line">        <span class="keyword">int</span> max = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[m+<span class="number">1</span>][n+<span class="number">1</span>];</div><div class="line">        </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123;</div><div class="line">                <span class="keyword">if</span>(matrix[i-<span class="number">1</span>][j-<span class="number">1</span>] == <span class="string">'1'</span>) &#123;</div><div class="line">                    dp[i][j] = <span class="number">1</span> + Math.min(dp[i-<span class="number">1</span>][j-<span class="number">1</span>], Math.min(dp[i-<span class="number">1</span>][j], dp[i][j-<span class="number">1</span>]));</div><div class="line">                    max = Math.max(max, dp[i][j]); </div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> max*max;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;h3 id=&quot;英文&quot;&gt;&lt;a href=&quot;#英文&quot; class=&quot;headerlink&quot; title=&quot;英文&quot;&gt;&lt;/a&gt;英文&lt;/h3&gt;&lt;p&gt;Giv
      
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>二叉树最近公共祖先</title>
    <link href="http://yoursite.com/2019/01/10/%E7%AE%97%E6%B3%95-%E4%BA%8C%E5%8F%89%E6%A0%91%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/"/>
    <id>http://yoursite.com/2019/01/10/算法-二叉树最近公共祖先/</id>
    <published>2019-01-10T14:59:11.000Z</published>
    <updated>2019-01-28T13:47:41.634Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个二叉树, 找到该树中两个指定节点的最近公共祖先。</p><p>百度百科中最近公共祖先的定义为：“对于有根树 T 的两个结点 p、q，最近公共祖先表示为一个结点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（一个节点也可以是它自己的祖先）。”</p><p>例如，给定如下二叉树:  root = [3,5,1,6,2,0,8,null,null,7,4]</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="原有思路"><a href="#原有思路" class="headerlink" title="原有思路"></a>原有思路</h3><ul><li>查询有两个子节点有两个目标节点的节点。</li><li>然后查询当前节点的左右子节点，如果有一个子节点的子节点只包含一个目标节点，则他的父节点则为最近公共祖先。</li></ul><h2 id="改良后思路"><a href="#改良后思路" class="headerlink" title="改良后思路"></a>改良后思路</h2><ul><li>目标节点一定存在于当前树。</li><li>中序遍历所有节点，如果当前接电接点或者其子节点匹配到了目标节点，则返回当前节点。</li><li>如果当前节点的左右节点分别匹配到了一个目标节点（root == null || p || q 直接返回root），则当前节点是最近公共祖先。<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2></li></ul><p><code>原版代码</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">leftFist</span><span class="params">(<span class="keyword">struct</span> TreeNode* root, <span class="keyword">struct</span> TreeNode* p, <span class="keyword">struct</span> TreeNode*  q)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span>(root-&gt;left) &#123;</div><div class="line">        ret =  ret + leftFist(root-&gt;left, p, q);</div><div class="line">    &#125; </div><div class="line">    </div><div class="line">    <span class="keyword">if</span>(root-&gt;right)&#123;</div><div class="line">        ret = ret+ leftFist(root-&gt;right, p, q);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(root == p) &#123;</div><div class="line">        ret +=<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(root == q) &#123;</div><div class="line">        ret +=<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for a binary tree node.</div><div class="line"> * struct TreeNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     struct TreeNode *left;</div><div class="line"> *     struct TreeNode *right;</div><div class="line"> * &#125;;</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">struct</span> TreeNode* <span class="title">lowestCommonAncestor</span><span class="params">(<span class="keyword">struct</span> TreeNode* root, <span class="keyword">struct</span> TreeNode* p, <span class="keyword">struct</span> TreeNode* q)</span> </span>&#123;</div><div class="line">    <span class="keyword">struct</span> TreeNode* retRoot = <span class="literal">NULL</span> ;</div><div class="line">    <span class="keyword">int</span> retSum =  leftFist(root, p, q);</div><div class="line">    </div><div class="line">    <span class="keyword">if</span>(retSum ==  <span class="number">2</span>) &#123;</div><div class="line">        <span class="keyword">int</span> retSumleft = <span class="literal">NULL</span>;</div><div class="line">        <span class="keyword">if</span>(root-&gt;left) &#123;</div><div class="line">            retSumleft = leftFist(root-&gt;left, p, q);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(<span class="number">0</span> &lt; retSumleft &amp;&amp;  retSumleft &lt; <span class="number">2</span>) &#123;</div><div class="line">            <span class="comment">// printf("retSumleft:%d,", root-&gt;left-&gt;val);</span></div><div class="line">            <span class="keyword">return</span> root;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">int</span> retSumright = <span class="literal">NULL</span>;</div><div class="line">        <span class="keyword">if</span>(root-&gt;right) &#123;</div><div class="line">            retSumright = leftFist(root-&gt;right, p, q);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(<span class="number">0</span> &lt; retSumright &amp;&amp; retSumright&lt; <span class="number">2</span>) &#123;</div><div class="line">            <span class="comment">// printf("retSumright:%d", root-&gt;right-&gt;val);</span></div><div class="line">            <span class="keyword">return</span> root;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(root-&gt;left) &#123;</div><div class="line">        retRoot =  lowestCommonAncestor(root-&gt;left, p, q);</div><div class="line">        <span class="keyword">if</span>(retRoot) &#123;</div><div class="line">            <span class="keyword">return</span> retRoot;</div><div class="line">        &#125;</div><div class="line">    &#125; </div><div class="line">    </div><div class="line">    <span class="keyword">if</span>(root-&gt;right)&#123;</div><div class="line">        retRoot =  lowestCommonAncestor(root-&gt;right, p, q);</div><div class="line">        <span class="keyword">if</span>(retRoot) &#123;</div><div class="line">            <span class="keyword">return</span> retRoot;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> retRoot;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>c语言让我跑了1888ms。。</p><h3 id="优化解"><a href="#优化解" class="headerlink" title="优化解"></a>优化解</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for a binary tree node.</div><div class="line"> * struct TreeNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     struct TreeNode *left;</div><div class="line"> *     struct TreeNode *right;</div><div class="line"> * &#125;;</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">struct</span> TreeNode* <span class="title">lowestCommonAncestor</span><span class="params">(<span class="keyword">struct</span> TreeNode* root, <span class="keyword">struct</span> TreeNode* p, <span class="keyword">struct</span> TreeNode* q)</span> </span>&#123;</div><div class="line">   <span class="keyword">if</span>(root == <span class="literal">NULL</span> || root == p || root == q) &#123;</div><div class="line">       <span class="keyword">return</span> root;</div><div class="line">   &#125;</div><div class="line">    <span class="keyword">struct</span> TreeNode* left = lowestCommonAncestor(root-&gt;left, p ,q);</div><div class="line">    <span class="keyword">struct</span> TreeNode* right = lowestCommonAncestor(root-&gt;right, p ,q);</div><div class="line">    </div><div class="line">    <span class="keyword">if</span>(left == <span class="literal">NULL</span> &amp;&amp; right == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">    <span class="keyword">if</span>(left != <span class="literal">NULL</span> &amp;&amp; right != <span class="literal">NULL</span>) <span class="keyword">return</span> root;</div><div class="line">    <span class="keyword">return</span> (left == <span class="literal">NULL</span> ? right : left);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><code>12ms</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;p&gt;给定一个二叉树, 找到该树中两个指定节点的最近公共祖先。&lt;/p&gt;
&lt;p&gt;百度百科中最近公共祖先的定义为：“对于有根树 T 的两个结点 p、q
      
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
</feed>
