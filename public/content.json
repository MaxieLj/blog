[{"title":"php垃圾回收","date":"2018-09-12T13:28:00.000Z","path":"2018/09/12/php垃圾回收/","text":"php是如何实现内存管理的?内存管理包括内存分配、内存回收、以及内存使用优化。 内存使用的优化 垃圾回收机制 底层内存分配 内存使用的优化引用计数php的引用中有个引用结构体 1234struct _zend_reference &#123; zend_refcondted_h gc; zval val; 指向原来的value.&#125;; 其中zend_refcondted_h 便是gc便是当前变量被引用的次数,这个参数会在变量回收的时候用到。 zend_refcondted_h : 123456789101112typedef struct _zend_refcounted_h &#123; uint32_t refcount; /* reference counter 32-bit */ union &#123; struct &#123; ZEND_ENDIAN_LOHI_3( zend_uchar type, zend_uchar flags, /* used for strings &amp; objects */ uint16_t gc_info) /* keeps GC root number (or 0) and color */ &#125; v; uint32_t type_info; &#125; u;&#125; zend_refcounted_h; 在实际中这个结构体到底是什么样的? 具体可以举例来看。 1234$a = 'this is string'; // zend_array (refcount = 1) 只有$a引用了zend_array$b = &amp;$a; // zend_array (refcount = 2) $a、$b引用了zend_array$c = $b; // zend_array (refcount = 3) $a、$b、$c引用了zend_arrayunset($b); // zend_array (refcount = 2) $a、$c引用了zend_array 并不是所有的变量类型都会使用引用计数, 例如 整形、浮点型、布尔型、NUll(在php中这是一个变量类型)等采用了深拷贝,即只要这几种变量赋值, 就会申请一款一块内存写入一个新的变量结构（注意这里不是引用结构）,当然这些类型不会公用value。 写时复制当然只有引用计数是不够的, 因为变量会发生赋值的情况。所以在更改某一个变量时, 会对原来的变量进行拷贝并赋值。 举个栗子: 12345$foo = time();$bar = &amp;$b;$si = $a;$c = '123'; 具体数据结构的引用计数情况如下图: 内存回收自动gc在zend数据接口中有一个gc.refount,他是自动gc的关键。 在自动gc机制中,如果zval不在指向value且当前value的gc.refount为0时,会直接释放value。这种情况多发生于函数返回时（销毁所有局部变量）、变量修改时、以及unset操作的时候。 垃圾回收除了自动gc,还有一种是自动gc无法处理的垃圾, 这种情况称为循环引用。顾名思义也就是自身内部变量引用了自身, 这种情况常出现与object和array。当我该变量zval被销毁是, 与其对应的value gc.refcount -1,但是因为有自身变量指向自身, 所以就陷入了一个循环:如果不销毁自身变量 value gc.refcount就无法自动gc, 只有自动gc才会销毁value。 1234$a = [1];$a[] = &amp;$a;unset($a); unset($a)执行以后 由于\b上述情况导致无法自动gc,所以需要引入另外一钟垃圾回收机制-垃圾回收器。现在会存在两种情况的数据需要回收： 当value的gc.refcount =0 是需要回收。 当value的gc.refcount 减少不等于0，但是存在循环引用时。 回收机制当发生value gc.refcount减少时，垃圾回收机制会把可能是垃圾的value存起来， 当可能是垃圾的value到达一定数量的时候启动垃圾鉴别程序，统一处理垃圾。当然这里的value类型只有object和array。 垃圾兼备程序：其实垃圾鉴别程序很简单，递归遍历自身value，查看是否存在指向自身的即可。 code:gc 初始化1234567891011ZEND_API void gc_init(void)&#123; if (GC_G(buf) == NULL &amp;&amp; GC_G(gc_enabled)) &#123; //初始化buf\b内存区域，大小为sizeof(gc_root_buffer) * //GC_ROOT_BUFFER_MAX_ENTRIES GC_G(buf) = (gc_root_buffer*) malloc(sizeof(gc_root_buffer) * GC_ROOT_BUFFER_MAX_ENTRIES); //设置_zend_gc_globals.last_unused为\b\bbug入口位置 GC_G(last_unused) = &amp;GC_G(buf)[GC_ROOT_BUFFER_MAX_ENTRIES]; //初始化_zend_gc_globals的参数 gc_reset(); &#125;&#125; 垃圾回收及其依赖 _zend_gc_globals _zend_gc_globals1234567891011121314151617181920212223242526272829typedef struct _zend_gc_globals &#123; zend_bool gc_enabled; zend_bool gc_active; zend_bool gc_full; gc_root_buffer *buf; /* preallocated arrays of buffers */ gc_root_buffer roots; /* list of possible roots of cycles */ gc_root_buffer *unused; /* list of unused buffers */ gc_root_buffer *first_unused; /* pointer to first unused buffer */ gc_root_buffer *last_unused; /* pointer to last unused buffer */ gc_root_buffer to_free; /* list to free */ gc_root_buffer *next_to_free; uint32_t gc_runs; uint32_t collected;#if GC_BENCH uint32_t root_buf_length; uint32_t root_buf_peak; uint32_t zval_possible_root; uint32_t zval_buffered; uint32_t zval_remove_from_buffer; uint32_t zval_marked_grey;#endif gc_additional_buffer *additional_buffer;&#125; zend_gc_globals; gc_enabled 是否使使用gc gc_active 是否在垃圾检查的过程中 gc_full buf缓冲区是否已满 *buf 与分配用于保存可能为垃圾的value roots 指向buf最新加入的一个可能垃圾 unused 指向第未使用的buffer *first_unused 指向第一个没用使用buffer *last_unused 指向buffer的尾部 to_free 等待释放的buffer gc_runs 统计gc运行的次数 collected 统计已经释放的垃圾数 php垃圾回收中几个重要的颜色写在zeng_gc的备注中。1234* BLACK (GC_BLACK) - In use or free.* GREY (GC_GREY) - Possible member of cycle.* WHITE (GC_WHITE) - Member of garbage cycle.* PURPLE (GC_PURPLE) - Possible root of cycle. GC_WHITE 白色表示垃圾 GC_PURPLE 紫色表示已放入缓冲区 GC_GREY 灰色表示已经进行了一次refcount的减一操作 GC_BLACK 黑色是默认颜色，正常 gc过程中主要处理功能的函数zend_gc_collect_cycles 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657ZEND_API void ZEND_FASTCALL gc_possible_root(zend_refcounted *ref)&#123; gc_root_buffer *newRoot; if (UNEXPECTED(CG(unclean_shutdown)) || UNEXPECTED(GC_G(gc_active))) &#123; return; &#125; ZEND_ASSERT(GC_TYPE(ref) == IS_ARRAY || GC_TYPE(ref) == IS_OBJECT); ZEND_ASSERT(EXPECTED(GC_REF_GET_COLOR(ref) == GC_BLACK)); ZEND_ASSERT(!GC_ADDRESS(GC_INFO(ref))); GC_BENCH_INC(zval_possible_root); newRoot = GC_G(unused); if (newRoot) &#123; GC_G(unused) = newRoot-&gt;prev; &#125; else if (GC_G(first_unused) != GC_G(last_unused)) &#123; newRoot = GC_G(first_unused); GC_G(first_unused)++; &#125; else &#123; //垃圾处理，当缓冲区满时，程序调用gc_collect_cycles函数，执行垃圾回收操作。 其中最关键的几步就是 //如果当前处于可以gc的状态 if (!GC_G(gc_enabled)) &#123; return; &#125; GC_REFCOUNT(ref)++; //垃圾回收 gc_collect_cycles(); GC_REFCOUNT(ref)--; if (UNEXPECTED(GC_REFCOUNT(ref)) == 0) &#123; zval_dtor_func(ref); return; &#125; if (UNEXPECTED(GC_INFO(ref))) &#123; return; &#125; newRoot = GC_G(unused); if (!newRoot) &#123; return; &#125; GC_G(unused) = newRoot-&gt;prev; &#125; GC_TRACE_SET_COLOR(ref, GC_PURPLE); GC_INFO(ref) = (newRoot - GC_G(buf)) | GC_PURPLE; newRoot-&gt;ref = ref; newRoot-&gt;next = GC_G(roots).next; newRoot-&gt;prev = &amp;GC_G(roots); GC_G(roots).next-&gt;prev = newRoot; GC_G(roots).next = newRoot; GC_BENCH_INC(zval_buffered); GC_BENCH_INC(root_buf_length); GC_BENCH_PEAK(root_buf_peak, root_buf_length);&#125; \b深度优先对对象或者数据的每一个元素的refcount--并将其标记为灰色 深度遍历root的每个每个变量，如果此时变量的refcount为0，则代表着改变量为垃圾，将其标记为垃圾，如果不为0，则将其标记为黑色（正常）。 检查roots清除标记为白色的垃圾。 //TODO 垃圾回收抽出来出来写。 具体代码：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164ZEND_API int zend_gc_collect_cycles(void)&#123; int count = 0; if (GC_G(roots).next != &amp;GC_G(roots)) &#123; gc_root_buffer *current, *next, *orig_next_to_free; zend_refcounted *p; gc_root_buffer to_free; uint32_t gc_flags = 0; gc_additional_buffer *additional_buffer_snapshot; if (GC_G(gc_active)) &#123; return 0; &#125; GC_TRACE(\"Collecting cycles\"); //标识gc运行了多少次 GC_G(gc_runs)++; //标识当前正在gc GC_G(gc_active) = 1; GC_TRACE(\"Marking roots\"); //重点 gc_mark_roots(); GC_TRACE(\"Scanning roots\"); //重点 gc_scan_roots(); GC_TRACE(\"Collecting roots\"); additional_buffer_snapshot = GC_G(additional_buffer); count = gc_collect_roots(&amp;gc_flags); GC_G(gc_active) = 0; if (GC_G(to_free).next == &amp;GC_G(to_free)) &#123; /* nothing to free */ GC_TRACE(\"Nothing to free\"); return 0; &#125; /* Copy global to_free list into local list */ to_free.next = GC_G(to_free).next; to_free.prev = GC_G(to_free).prev; to_free.next-&gt;prev = &amp;to_free; to_free.prev-&gt;next = &amp;to_free; /* Free global list */ GC_G(to_free).next = &amp;GC_G(to_free); GC_G(to_free).prev = &amp;GC_G(to_free); orig_next_to_free = GC_G(next_to_free); if (gc_flags &amp; GC_HAS_DESTRUCTORS) &#123; GC_TRACE(\"Calling destructors\"); /* Remember reference counters before calling destructors */ current = to_free.next; while (current != &amp;to_free) &#123; current-&gt;refcount = GC_REFCOUNT(current-&gt;ref); current = current-&gt;next; &#125; /* Call destructors */ current = to_free.next; while (current != &amp;to_free) &#123; p = current-&gt;ref; GC_G(next_to_free) = current-&gt;next; if (GC_TYPE(p) == IS_OBJECT) &#123; zend_object *obj = (zend_object*)p; if (!(GC_FLAGS(obj) &amp; IS_OBJ_DESTRUCTOR_CALLED)) &#123; GC_TRACE_REF(obj, \"calling destructor\"); GC_FLAGS(obj) |= IS_OBJ_DESTRUCTOR_CALLED; if (obj-&gt;handlers-&gt;dtor_obj &amp;&amp; (obj-&gt;handlers-&gt;dtor_obj != zend_objects_destroy_object || obj-&gt;ce-&gt;destructor)) &#123; GC_REFCOUNT(obj)++; obj-&gt;handlers-&gt;dtor_obj(obj); GC_REFCOUNT(obj)--; &#125; &#125; &#125; current = GC_G(next_to_free); &#125; /* Remove values captured in destructors */ current = to_free.next; while (current != &amp;to_free) &#123; GC_G(next_to_free) = current-&gt;next; if (GC_REFCOUNT(current-&gt;ref) &gt; current-&gt;refcount) &#123; gc_remove_nested_data_from_buffer(current-&gt;ref, current); &#125; current = GC_G(next_to_free); &#125; &#125; /* Destroy zvals */ GC_TRACE(\"Destroying zvals\"); GC_G(gc_active) = 1; current = to_free.next; while (current != &amp;to_free) &#123; p = current-&gt;ref; GC_G(next_to_free) = current-&gt;next; GC_TRACE_REF(p, \"destroying\"); if (GC_TYPE(p) == IS_OBJECT) &#123; zend_object *obj = (zend_object*)p; EG(objects_store).object_buckets[obj-&gt;handle] = SET_OBJ_INVALID(obj); GC_TYPE(obj) = IS_NULL; if (!(GC_FLAGS(obj) &amp; IS_OBJ_FREE_CALLED)) &#123; GC_FLAGS(obj) |= IS_OBJ_FREE_CALLED; if (obj-&gt;handlers-&gt;free_obj) &#123; GC_REFCOUNT(obj)++; obj-&gt;handlers-&gt;free_obj(obj); GC_REFCOUNT(obj)--; &#125; &#125; SET_OBJ_BUCKET_NUMBER(EG(objects_store).object_buckets[obj-&gt;handle], EG(objects_store).free_list_head); EG(objects_store).free_list_head = obj-&gt;handle; p = current-&gt;ref = (zend_refcounted*)(((char*)obj) - obj-&gt;handlers-&gt;offset); &#125; else if (GC_TYPE(p) == IS_ARRAY) &#123; zend_array *arr = (zend_array*)p; GC_TYPE(arr) = IS_NULL; /* GC may destroy arrays with rc&gt;1. This is valid and safe. */ HT_ALLOW_COW_VIOLATION(arr); zend_hash_destroy(arr); &#125; current = GC_G(next_to_free); &#125; /* Free objects */ current = to_free.next; while (current != &amp;to_free) &#123; next = current-&gt;next; p = current-&gt;ref; if (EXPECTED(current &gt;= GC_G(buf) &amp;&amp; current &lt; GC_G(buf) + GC_ROOT_BUFFER_MAX_ENTRIES)) &#123; current-&gt;prev = GC_G(unused); GC_G(unused) = current; &#125; efree(p); current = next; &#125; while (GC_G(additional_buffer) != additional_buffer_snapshot) &#123; gc_additional_buffer *next = GC_G(additional_buffer)-&gt;next; efree(GC_G(additional_buffer)); GC_G(additional_buffer) = next; &#125; GC_TRACE(\"Collection finished\"); GC_G(collected) += count; GC_G(next_to_free) = orig_next_to_free; GC_G(gc_active) = 0; &#125; return count;&#125; 123456789101112static void gc_mark_roots(void)&#123; gc_root_buffer *current = GC_G(roots).next; while (current != &amp;GC_G(roots)) &#123; //GC_PURPLE 标识在缓冲区 if (GC_REF_GET_COLOR(current-&gt;ref) == GC_PURPLE) &#123; gc_mark_grey(current-&gt;ref); &#125; current = current-&gt;next; &#125;&#125; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104static void gc_mark_grey(zend_refcounted *ref)&#123; HashTable *ht; Bucket *p, *end; zval *zv;tail_call: if (GC_REF_GET_COLOR(ref) != GC_GREY) &#123; ht = NULL; GC_BENCH_INC(zval_marked_grey); GC_REF_SET_COLOR(ref, GC_GREY); if (GC_TYPE(ref) == IS_OBJECT) &#123; zend_object_get_gc_t get_gc; zend_object *obj = (zend_object*)ref; if (EXPECTED(!(GC_FLAGS(ref) &amp; IS_OBJ_FREE_CALLED) &amp;&amp; (get_gc = obj-&gt;handlers-&gt;get_gc) != NULL)) &#123; int n; zval *zv, *end; zval tmp; ZVAL_OBJ(&amp;tmp, obj); ht = get_gc(&amp;tmp, &amp;zv, &amp;n); end = zv + n; if (EXPECTED(!ht)) &#123; if (!n) return; while (!Z_REFCOUNTED_P(--end)) &#123; //表明当前object size为0 if (zv == end) return; &#125; &#125; while (zv != end) &#123; //循环对每个元素进行-- if (Z_REFCOUNTED_P(zv)) &#123; ref = Z_COUNTED_P(zv); GC_REFCOUNT(ref)--; //refcount已经减过，标记为灰色 gc_mark_grey(ref); &#125; zv++; &#125; if (EXPECTED(!ht)) &#123; ref = Z_COUNTED_P(zv); GC_REFCOUNT(ref)--; goto tail_call; &#125; &#125; else &#123; return; &#125; &#125; else if (GC_TYPE(ref) == IS_ARRAY) &#123; if (((zend_array*)ref) == &amp;EG(symbol_table)) &#123; //标识是正常非垃圾 GC_REF_SET_BLACK(ref); return; &#125; else &#123; ht = (zend_array*)ref; &#125; &#125; else if (GC_TYPE(ref) == IS_REFERENCE) &#123; if (Z_REFCOUNTED(((zend_reference*)ref)-&gt;val)) &#123; ref = Z_COUNTED(((zend_reference*)ref)-&gt;val); GC_REFCOUNT(ref)--; goto tail_call; &#125; return; &#125; else &#123; return; &#125; if (!ht-&gt;nNumUsed) return; p = ht-&gt;arData; end = p + ht-&gt;nNumUsed; while (1) &#123; end--; zv = &amp;end-&gt;val; if (Z_TYPE_P(zv) == IS_INDIRECT) &#123; zv = Z_INDIRECT_P(zv); &#125; if (Z_REFCOUNTED_P(zv)) &#123; break; &#125; if (p == end) return; &#125; while (p != end) &#123; zv = &amp;p-&gt;val; if (Z_TYPE_P(zv) == IS_INDIRECT) &#123; zv = Z_INDIRECT_P(zv); &#125; if (Z_REFCOUNTED_P(zv)) &#123; ref = Z_COUNTED_P(zv); GC_REFCOUNT(ref)--; gc_mark_grey(ref); &#125; p++; &#125; zv = &amp;p-&gt;val; if (Z_TYPE_P(zv) == IS_INDIRECT) &#123; zv = Z_INDIRECT_P(zv); &#125; ref = Z_COUNTED_P(zv); GC_REFCOUNT(ref)--; goto tail_call; &#125;&#125; 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495969798static void gc_scan(zend_refcounted *ref)&#123; HashTable *ht; Bucket *p, *end; zval *zv;tail_call: if (GC_REF_GET_COLOR(ref) == GC_GREY) &#123; if (GC_REFCOUNT(ref) &gt; 0) &#123; //所有refount--以后如果还&gt;0，说明非垃圾 gc_scan_black(ref); &#125; else &#123; //否则则为垃圾 GC_REF_SET_COLOR(ref, GC_WHITE); if (GC_TYPE(ref) == IS_OBJECT) &#123; zend_object_get_gc_t get_gc; zend_object *obj = (zend_object*)ref; if (EXPECTED(!(GC_FLAGS(ref) &amp; IS_OBJ_FREE_CALLED) &amp;&amp; (get_gc = obj-&gt;handlers-&gt;get_gc) != NULL)) &#123; int n; zval *zv, *end; zval tmp; ZVAL_OBJ(&amp;tmp, obj); ht = get_gc(&amp;tmp, &amp;zv, &amp;n); end = zv + n; if (EXPECTED(!ht)) &#123; if (!n) return; while (!Z_REFCOUNTED_P(--end)) &#123; if (zv == end) return; &#125; &#125; while (zv != end) &#123; if (Z_REFCOUNTED_P(zv)) &#123; ref = Z_COUNTED_P(zv); gc_scan(ref); &#125; zv++; &#125; if (EXPECTED(!ht)) &#123; ref = Z_COUNTED_P(zv); goto tail_call; &#125; &#125; else &#123; return; &#125; &#125; else if (GC_TYPE(ref) == IS_ARRAY) &#123; if ((zend_array*)ref == &amp;EG(symbol_table)) &#123; GC_REF_SET_BLACK(ref); return; &#125; else &#123; ht = (zend_array*)ref; &#125; &#125; else if (GC_TYPE(ref) == IS_REFERENCE) &#123; if (Z_REFCOUNTED(((zend_reference*)ref)-&gt;val)) &#123; ref = Z_COUNTED(((zend_reference*)ref)-&gt;val); goto tail_call; &#125; return; &#125; else &#123; return; &#125; if (!ht-&gt;nNumUsed) return; p = ht-&gt;arData; end = p + ht-&gt;nNumUsed; while (1) &#123; end--; zv = &amp;end-&gt;val; if (Z_TYPE_P(zv) == IS_INDIRECT) &#123; zv = Z_INDIRECT_P(zv); &#125; if (Z_REFCOUNTED_P(zv)) &#123; break; &#125; if (p == end) return; &#125; while (p != end) &#123; zv = &amp;p-&gt;val; if (Z_TYPE_P(zv) == IS_INDIRECT) &#123; zv = Z_INDIRECT_P(zv); &#125; if (Z_REFCOUNTED_P(zv)) &#123; ref = Z_COUNTED_P(zv); gc_scan(ref); &#125; p++; &#125; zv = &amp;p-&gt;val; if (Z_TYPE_P(zv) == IS_INDIRECT) &#123; zv = Z_INDIRECT_P(zv); &#125; ref = Z_COUNTED_P(zv); goto tail_call; &#125; &#125;&#125; 主要为三个函数： gc_mark_roots队规遍历，对object、array所有元素的refcount–并将其标记为灰色 gc_scan_roots这个函数对节点信息的链表再次进行深度优先遍历，如果发现zval的refcount大于等于1，则对该zval和其包含的zval的refcount加1操作，这个是对非垃圾的一个信息还原，然后将这些zval颜色属性去掉(设置成black)。如果发现zval的refcount等于0，则就标记成白色，这些是后面将要清理掉的垃圾。 gc_collect_roots 遍历节点信息链表,将前面一个步骤中标记为白色的节点信息放到GC_G(zval_to_free)为入口的链表中，这个链表用来存放将要释放的垃圾。 然后释放掉全部的节点信息，缓冲区被清空。分析结束后将重新收集节点信息。","tags":[{"name":"php源码","slug":"php源码","permalink":"http://yoursite.com/tags/php源码/"}]},{"title":"php数组实现","date":"2018-08-20T12:00:08.000Z","path":"2018/08/20/php数组实现/","text":"php的数组依赖于hashtable实现的。 Times33的算法很简单，就是不断的乘33,下边是times33算法: Times33(hash)12345678910111213141516&lt;?phpfunction myHash($str) &#123; // hash(i) = hash(i-1) * 33 + str[i] $hash = 5381; $s = md5($str); //相比其它版本，进行了md5加密 $seed = 5; $len = 32;//加密后长度32 for ($i = 0; $i &lt; $len; $i++) &#123; // (hash &lt;&lt; 5) + hash 相当于 hash * 33 //$hash = sprintf(\"%u\", $hash * 33) + ord($s&#123;$i&#125;); //$hash = ($hash * 33 + ord($s&#123;$i&#125;)) &amp; 0x7FFFFFFF; $hash = ($hash &lt;&lt; $seed) + $hash + ord($s&#123;$i&#125;); &#125; return $hash &amp; 0x7FFFFFFF;&#125; 其中&lt;&lt; 表示左移,每次左移表示x2例如: 1234&lt;?php$num = 2;echo $num &lt;&lt; 2; 所以($hash &lt;&lt; $seed)表示 $hash * 32 ,同时加上$hash,也就表示 $hash * 33了。ord()函数返回字符串的首个字符的 ASCII 值。最后$hash &amp; 0x7FFFFFFF 表示与整形的最大值与操作(0x7FFFF111FFF二进制为1111111111111111111111111111),这个与操作会截取超过整形二进制部分,所以times33计算出来的值不会超过整形的最大值。 为什么要用hashtable实现php数组?因为散列表是根据关键建码值直接进项访问的数据结构。在key和value之间有一个映射函数,可以根据key直接索引到对应的value值,它并不会使用一般的对比操作,而是直接使用内存的起始位置和偏移位置进行寻址,所以会比正常的寻址要快。 散列表结构123456789101112131415161718192021struct _zend_array &#123; zend_refcounted_h gc; union &#123; struct &#123; ZEND_ENDIAN_LOHI_4( zend_uchar flags, zend_uchar nApplyCount, zend_uchar nIteratorsCount, zend_uchar reserve) &#125; v; uint32_t flags; &#125; u; uint32_t nTableMask; Bucket *arData; uint32_t nNumUsed; uint32_t nNumOfElements; uint32_t nTableSize; uint32_t nInternalPointer; zend_long nNextFreeElement; dtor_func_t pDestructor;&#125;; 主要字段介绍: gc 引用次数,垃圾回收时会用到。 union u 就不介绍了。 arData 存储元素的数组,内存是连续的,arData指向第一个元素。 nTableMask nTableSize的负数。 nTableSize 数组长度,为2的n此房。 nNumUsed 当前使用的Bucket数。 nNumOfElements 当前所有的Bucket数。 nNextFreeElement 下一个被使用的Bucket($a[] = ‘’) pDestructor 删除某个元素是会使用 Bucket结构12345typedef struct _Bucket &#123; zval val; zend_ulong h; /* hash value (or numeric index) */ zend_string *key; /* string key or NULL for numerics */&#125; Bucket; h hash出来的值(times33) *key 存储元素的key val 具体值,是个zval 如何实现php中实现散列表实现主要使用存储元素数组和 映射函数（也可以称作散列函数）和映射表 举个具体的栗子: 如果我们要在php代码中声明一个数组会发生什么?下边分析下php是如何实现数组的。 123456&lt;?php$arr= [ 'a' =&gt; '111', 'b' =&gt; '222', 'c' =&gt; 'ccc']; 首先肯定是初始化。 接下来将每个元素对应的值依照顺序拷贝到 Bucket里。 然后利用映射函数对求值,根据算出来的值将其对应的bucket的地址写到该值对应的映射这表里。 具体操作如下图: 当然我们这里的映射是理想映射,因为在映射的计算过程中可能存在冲突,后续会介绍映射函数,以及如何解映射函数计算后的冲突。 初始化1234567891011121314ZEND_API void ZEND_FASTCALL _zend_hash_init(HashTable *ht, uint32_t nSize, dtor_func_t pDestructor, zend_bool persistent ZEND_FILE_LINE_DC)&#123; GC_REFCOUNT(ht) = 1; //设置引用次数 GC_TYPE_INFO(ht) = IS_ARRAY; //设置数据类型 ht-&gt;u.flags = (persistent ? HASH_FLAG_PERSISTENT : 0) | HASH_FLAG_APPLY_PROTECTION | HASH_FLAG_STATIC_KEYS; ht-&gt;nTableMask = HT_MIN_MASK; HT_SET_DATA_ADDR(ht, &amp;uninitialized_bucket); ht-&gt;nNumUsed = 0; ht-&gt;nNumOfElements = 0; ht-&gt;nInternalPointer = HT_INVALID_IDX; ht-&gt;nNextFreeElement = 0; ht-&gt;pDestructor = pDestructor; ht-&gt;nTableSize = zend_hash_check_size(nSize);&#125; 初始化的时候主要是对hashtable中各个成员的进行初始化设置,而且在这个时候不会给arData分配内存,只有在开始插入数据的时候才会为arData分配内存。 映射函数映射函数其实就是一次hash操作和和一次|操作.hash操作就是上边锁提到得到times33操作,|操作是计算出来的hash值与nTableSize进行计算。1nIndex = ket-&gt;h | nTableMask; 因为nTableMask是nTableSize的负数,所以计算出来的nIndex值区间应该为[-1,nTableMask]。 此处待补充 为什么会在[-1, nTableMask] 区间内。 写入数据在初始化的时候并不会对arData分配内存,只有在写入的时候才会真正分配内存 12345678910111213141516171819202122232425262728static void zend_always_inline zend_hash_real_init_ex(HashTable *ht, int packed)&#123; HT_ASSERT(GC_REFCOUNT(ht) == 1); ZEND_ASSERT(!((ht)-&gt;u.flags &amp; HASH_FLAG_INITIALIZED)); if (packed) &#123; HT_SET_DATA_ADDR(ht, pemalloc(HT_SIZE(ht), (ht)-&gt;u.flags &amp; HASH_FLAG_PERSISTENT)); (ht)-&gt;u.flags |= HASH_FLAG_INITIALIZED | HASH_FLAG_PACKED; HT_HASH_RESET_PACKED(ht); &#125; else &#123; (ht)-&gt;nTableMask = -(ht)-&gt;nTableSize; HT_SET_DATA_ADDR(ht, pemalloc(HT_SIZE(ht), (ht)-&gt;u.flags &amp; HASH_FLAG_PERSISTENT)); (ht)-&gt;u.flags |= HASH_FLAG_INITIALIZED; if (EXPECTED(ht-&gt;nTableMask == -8)) &#123; Bucket *arData = ht-&gt;arData; HT_HASH_EX(arData, -8) = -1; HT_HASH_EX(arData, -7) = -1; HT_HASH_EX(arData, -6) = -1; HT_HASH_EX(arData, -5) = -1; HT_HASH_EX(arData, -4) = -1; HT_HASH_EX(arData, -3) = -1; HT_HASH_EX(arData, -2) = -1; HT_HASH_EX(arData, -1) = -1; &#125; else &#123; HT_HASH_RESET(ht); &#125; &#125;&#125; 分配具体的内存 12#define HT_SIZE_EX(nTableSize, nTableMask) \\ (HT_DATA_SIZE((nTableSize)) + HT_HASH_SIZE((nTableMask))) 12345#define HT_HASH_SIZE(nTableMask) \\ (((size_t)(uint32_t)-(int32_t)(nTableMask)) * sizeof(uint32_t))#define HT_DATA_SIZE(nTableSize) \\ ((size_t)(nTableSize) * sizeof(Bucket)) 可以看到在分配具体分配内存的时候会分配 nTableSize(Bucket+uint32_t)大小的内存。讲道理只需要分配nTableSizeBucket大小内存就可以了,为什么会多余出来 nTableSizeuint32_t内存呢?因为nTableSizeuint32_t就是映射表所占内存大小。所以说Bucket会和映射表一次申请内存。写完成写入操作以后会将*arData 指向第一个Bucket。 具体在内存里的结果如图所示: 映射表在初始化的时候所有值都是-1,只有在被赋值时候会写入对应Bucket所在链表的偏移量。;ht-&gt;arData 指向第一个Bucket的位置,在赋值的时候会按照列表顺序,将值写入Bucket的value里,然后会根据映射函数算出值当做偏移量找到对应映射表的元素,然后将当前Bucket写入此元素。 ps nTableSize 为2的次方倍。 冲突如果nIndex = ket-&gt;h | nTableMask 算出来的值冲突了怎么办? 首先映射表的每个元素不是链表,所以导致无法存储多个元素。在php中是这样处理冲突的:首先映射表的所有元素初始化值为 -1 ,当前如果用冲突会将新算出来的值对应的Bucket覆盖原来旧的Bucket,然后将旧的Bucket迁移到新的Bucket,并将旧的Bucket的u2.next(默认为-1) 指向新Bucket。 如图 查找php再查找一个数组元素是,首先会根据其key 获取到计算后hash值’ket-&gt;h’,然后根据映射函数算出当前元素在映射表中的偏移量,利用当前位置+偏移量找到映射表的元素,再根据其内的偏量找到对应Bucket链表的首个元素位置,最后遍历该链表核对key值,找到对应的值。 具体实现函数:12345678910111213141516171819202122232425static zend_always_inline Bucket *zend_hash_find_bucket(const HashTable *ht, zend_string *key)&#123; zend_ulong h; uint32_t nIndex; uint32_t idx; Bucket *p, *arData; h = zend_string_hash_val(key); arData = ht-&gt;arData; nIndex = h | ht-&gt;nTableMask; idx = HT_HASH_EX(arData, nIndex); while (EXPECTED(idx != HT_INVALID_IDX)) &#123; p = HT_HASH_TO_BUCKET_EX(arData, idx); if (EXPECTED(p-&gt;key == key)) &#123; /* check for the same interned string */ return p; &#125; else if (EXPECTED(p-&gt;h == h) &amp;&amp; EXPECTED(p-&gt;key) &amp;&amp; EXPECTED(ZSTR_LEN(p-&gt;key) == ZSTR_LEN(key)) &amp;&amp; EXPECTED(memcmp(ZSTR_VAL(p-&gt;key), ZSTR_VAL(key), ZSTR_LEN(key)) == 0)) &#123; return p; &#125; idx = Z_NEXT(p-&gt;val); &#125; return NULL;&#125; 扩容数组的容量在初始化的时候已经确定了大小,就是nTableSize。当然映射函数也是根据 nTableMask 来计算的。所以我们扩容时候必须重新计算索引,也就是映射表里的值。具体扩容规则:首先当需要扩容时,会计算当前Bucket链表里删除元素数量占总表元素数量的比例,如果没有超过阈值则申请分配一个原来数组大小两倍的新素组,把元素复制到新数组上,然后重新建立索引。 阈值判断:1ht-&gt;nNumUsed &gt; ht-&gt;nNumOfElements + (ht-&gt;nNumOfElements &gt;&gt; 5 处理过程:12345678910111213141516171819202122232425262728static void ZEND_FASTCALL zend_hash_do_resize(HashTable *ht)&#123; IS_CONSISTENT(ht); HT_ASSERT(GC_REFCOUNT(ht) == 1); if (ht-&gt;nNumUsed &gt; ht-&gt;nNumOfElements + (ht-&gt;nNumOfElements &gt;&gt; 5)) &#123; /* additional term is there to amortize the cost of compaction */ HANDLE_BLOCK_INTERRUPTIONS(); zend_hash_rehash(ht); HANDLE_UNBLOCK_INTERRUPTIONS(); &#125; else if (ht-&gt;nTableSize &lt; HT_MAX_SIZE) &#123; /* Let's double the table size */ void *new_data, *old_data = HT_GET_DATA_ADDR(ht); uint32_t nSize = ht-&gt;nTableSize + ht-&gt;nTableSize; Bucket *old_buckets = ht-&gt;arData; HANDLE_BLOCK_INTERRUPTIONS(); new_data = pemalloc(HT_SIZE_EX(nSize, -nSize), ht-&gt;u.flags &amp; HASH_FLAG_PERSISTENT); ht-&gt;nTableSize = nSize; ht-&gt;nTableMask = -ht-&gt;nTableSize; HT_SET_DATA_ADDR(ht, new_data); memcpy(ht-&gt;arData, old_buckets, sizeof(Bucket) * ht-&gt;nNumUsed); pefree(old_data, ht-&gt;u.flags &amp; HASH_FLAG_PERSISTENT); zend_hash_rehash(ht); HANDLE_UNBLOCK_INTERRUPTIONS(); &#125; else &#123; zend_error_noreturn(E_ERROR, \"Possible integer overflow in memory allocation (%zu * %zu + %zu)\", ht-&gt;nTableSize * 2, sizeof(Bucket) + sizeof(uint32_t), sizeof(Bucket)); &#125;&#125; 在处理的过程中还会把已经删除的Bucket给删除。 具体的操作在zend_hash.c文件里。如果超过阈值,则会把已经删除Bucket移除,然后把又有后边的元素往前移动,补上空缺的Bucket,当然索引也会重建。 参考 time33 2.1 变量的内部实现","tags":[{"name":"php源码","slug":"php源码","permalink":"http://yoursite.com/tags/php源码/"}]},{"title":"php数据结构","date":"2018-08-19T12:30:34.000Z","path":"2018/08/19/php数据结构/","text":"变量php是如何统一实现各种变量类型的? 这和php变量类型的实现是密不可分的。一个变量主要有三个要素:变量名``变量类型``变量值,他们在php变量类型实现中主要对应 zval zend_value 和zend的各种数据类型。php中用$去声明一个变量,在声明的时候可以进行初始化,当然也可以不声明直接使用。一般来说,一个变量的定义包含两步:变量定义和变量初始化,在php中只定义不初始化是可以的。 变量结构体1234567891011121314151617181920212223// php zval结构struct _zval_struct &#123; zend_value value; 指向具体的value /* value */ union &#123; struct &#123; ZEND_ENDIAN_LOHI_4( zend_uchar type, /* active type */ zend_uchar type_flags, zend_uchar const_flags, zend_uchar reserved) /* call info for EX(This) */ &#125; v; uint32_t type_info; &#125; u1; union &#123; uint32_t var_flags; uint32_t next; /* hash collision chain */ uint32_t cache_slot; /* literal cache slot */ uint32_t lineno; /* line number (for ast nodes) */ uint32_t num_args; /* arguments number for EX(This) */ uint32_t fe_pos; /* foreach position */ uint32_t fe_iter_idx; /* foreach iterator index */ &#125; u2;&#125;; 变量类型其中type 表示当前变量的类型,例如string array int等,以下为php中全部变量类型。其中type 是一个无符号类型的char,他的定义是这样的1typedef unsigned char zend_uchar; 12345678910111213141516171819typedef union _zend_value &#123; zend_long lval; /* long value */ double dval; /* double value */ zend_refcounted *counted; zend_string *str; zend_array *arr; zend_object *obj; zend_resource *res; zend_reference *ref; zend_ast_ref *ast; zval *zv; void *ptr; zend_class_entry *ce; zend_function *func; struct &#123; uint32_t w1; uint32_t w2; &#125; ww; &#125; zend_value; 在这些类型里不存在boolean类型,因为在php7中已经将boolean拆分为true和false.直接保存在type中,也就是说boolean没有_zend_value结构,直接通过type字段就可以确定boolean的值。 从上边的结构体可以看出来 zend_long、double 类型不是指针类型,也就是说整形和浮点型正能进行深拷贝,并不能和其他说句类型一样进行 引用计数和写时复制。因为有引用计数和写时复制在变量赋值且不做修改时才能大量节省内存。 以string类型为例,它在php中的结构类型应该是这样的: _zend_string:123456struct _zend_string &#123; zend_refcounted_h gc; zend_ulong h; /* hash value */ size_t len; char val[1]; /*字符串起始地址*/&#125;; 其中gc 字段表示这个结构体被引用的次数,垃圾回收的时候会用到。 h 字符串通过Times33计算出来的hashcode len 字符串长度 val 字符串内容 我们在这里都会有疑问,为什么存储字符串内容的时候没有使用char*类型,而用了一个数组类型来存储。zend_string在申请内存的时候会会申请malloc(sizeof(zend_string)+字符串长度),且val[0]存的是字符串最后一个字符安“\\0” zend_string结构在内存中如下所示: 当时也在char val[1]的地方疑惑了很久,再往上找了很多文章,其中Nikita Popov(nikic，PHP 官方开发组成员，柏林科技大学的学生) 这样解释 1如果你对 C 语言了解的不是很深入的话，可能会觉得 val 的定义有些奇怪：这个声明只有一个元素，但是显然我们想存储的字符串长度肯定大于一个字符的长度。这里其实使用的是结构体的一个『黑』\b方法：在声明数组时只定义一个元素，但是实际创建 zend_string 时再分配足够的内存来存储整个字符串。这样我们还是可以通过 val 访问完整的字符串。 参考: Internal value representation in PHP 7 - Part 2 [译]变量在 PHP7 内部的实现（二） php内核分析——2.1 变量的内部实现","tags":[{"name":"php源码","slug":"php源码","permalink":"http://yoursite.com/tags/php源码/"}]},{"title":"php的引用","date":"2018-08-12T14:18:07.000Z","path":"2018/08/12/php的&符号/","text":"&amp;&amp;是php中的引用,他并不一种独立的数据类型,而是指向其他数据类型的数据结构,和C语言的指针类似。 具体作用为:当我们修改引用类型变量是,其修改的将作用于实际引用的变量上。 如果当我们使用&amp;符号生成一个引用变量时,首先会为&amp;操作生成一个zend_reference结构,zend_reference就是引用类型的结构体,他内嵌一个zval,然后此结构的体zval的value指向原来zval的value上。然后将原来zval的变量类型变为IS_REFERENCE,原来zval的value执行新创建zend_reference结构。索引&amp;的作用就是新生成zend_reference,然后将其指向原来的zval的value上,顺便把原来zval的变量类型变化为引用类型。 1234struct _zend_reference &#123; zend_refcondted_h gc; zval val; 指向原来的value.&#125;; 举个栗子12$a = time(); //步骤1$b = &amp;$a; //步骤2 步骤1 现在$a = time()是他们的数据结构指向为: 此时数据结构,一直指针指向是这个样子。 步骤2 也就是说PHP的引用在使用后新生成一个引用类型机构,然后将引用类型结构指向越来的value,最后将原来zval的value指向新生成的结构体,并将其变量类型变为引用类型,IS_REFERENCE。当然随之改变的还有计数。","tags":[{"name":"php源码","slug":"php源码","permalink":"http://yoursite.com/tags/php源码/"}]},{"title":"算法-几种排序算法的实现","date":"2018-07-30T06:47:03.000Z","path":"2018/07/30/算法-几种排序算法的实现/","text":"快速排序（快拍）快速排序的思想是分治，平均时间复杂度O(nlogn)，当然快速排序的时间复杂度并不是稳定的，最大时间复杂度是n^2。当然在用C语言实现的快速排序中，快速排序是原地排序，所有排序中空间复杂最低。 代码基于数组的快速排序（递归） 123456789101112131415void qSort(int *a, int low, int high)&#123; if(low &gt; high) return; int first = low; int last = high; int key = a[first]; while(first &lt; last)&#123; while(first &lt; last &amp;&amp; a[last] &gt;= key) --last; if(first &lt; last) a[first] = a[last]; //这个地方是精髓啊 while(first &lt; last &amp;&amp; a[first] &lt;= key) ++first; if(first &lt; last) a[last] = a[first]; &#125; a[first] = key; Qsort(a, low, first-1); Qsort(a, first+1, high);&#125; 这个版本可能便于理解 12345678910111213141516171819202122232425262728void swap(int *x, int *y) &#123; int t = *x; *x = *y; *y = t;&#125;void quick_sort_recursive(int arr[], int start, int end) &#123; if (start &gt;= end) return; int mid = arr[end]; int left = start, right = end - 1; while (left &lt; right) &#123; while (arr[left] &lt; mid &amp;&amp; left &lt; right) left++; while (arr[right] &gt;= mid &amp;&amp; left &lt; right) right--; swap(&amp;arr[left], &amp;arr[right]); &#125; if (arr[left] &gt;= arr[end]) swap(&amp;arr[left], &amp;arr[end]); else left++; if (left) quick_sort_recursive(arr, start, left - 1); quick_sort_recursive(arr, left + 1, end);&#125;void quick_sort(int arr[], int len) &#123; quick_sort_recursive(arr, 0, len - 1);&#125; php的快速排序12345678910111213141516171819202122232425262728293031323334function qSort(&amp;$envelopes, $start, $end )&#123; if($end &lt;= $start) &#123; return; &#125; $i = $start; $j = $end; while($i &lt; $j) &#123; while($i &lt; $end &amp;&amp; $envelopes[$i] &lt;= $envelopes[$start]) &#123; $i++; &#125; while($j &gt; $start &amp;&amp; $envelopes[$j] &gt; $envelopes[$start]) &#123; $j--; &#125; if($i &lt; $j) &#123; $tmp = $envelopes[$i]; $envelopes[$i] = $envelopes[$j]; $envelopes[$j] = $tmp; &#125; &#125; //或者当i= 8 j = 10 i--j++（处理当j==i ）指向9事无法交换情况。 if($envelopes[$i] &lt; $envelopes[$start]) &#123; $tmp = $envelopes[$start]; $envelopes[$start] = $envelopes[$j]; $envelopes[$i] = $tmp; &#125; qSort($envelopes, $start, $i-1); qSort($envelopes, $i+1, $end);&#125; 基于链表的快速排序1234567891011121314151617181920212223242526272829303132333435363738394041struct Node &#123; int key; Node* next; &#125;; void swap(int* a, int* b)&#123; int tmp = *a ; *a = *b; *b = tmp;&#125; Node* GetPartion(Node* pBegin, Node* pEnd) &#123; int key = pBegin-&gt;key; Node* p = pBegin; Node* q = p-&gt;next; while(q != pEnd) &#123; if(q-&gt;key &lt; key) &#123; p = p-&gt;next; swap(p-&gt;key,q-&gt;key); &#125; q = q-&gt;next; &#125; swap(&amp;p-&gt;key,&amp;pBegin-&gt;key); return p; &#125; void QuickSort(Node* pBeign, Node* pEnd) &#123; if(pBeign != pEnd) &#123; Node* partion = GetPartion(pBeign,pEnd); QuickSort(pBeign,partion); QuickSort(partion-&gt;next,pEnd); &#125; &#125; 并归排序并归排序的思想是分治的思想，时间复杂度 O(nlogn)。 如果一个链表（数组）只有一个元素或者为空直接返回。 如果链表（数组）可以分成尽可能相等两部分，将其分成尽可能相等两部分。 对于两个被分开的两个部分进行整个归并排序 把两个拍好序的链表（数组）进行合并。与快拍的区别是：快排是先处理完再递归 而归并排序是先递归在处理 基于链表的并归排序。 代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061 struct ListNode * merge(struct ListNode *l1,struct ListNode *l2) &#123; if(l1 == NULL) return l2; if(l2 == NULL) return l1; if( (l1==NULL) &amp;&amp;(l2==NULL) ) return NULL; struct ListNode *head=NULL; if(l1-&gt;val &lt; l2-&gt;val) &#123; head=l1; l1=l1-&gt;next; &#125; else &#123; head=l2; l2=l2-&gt;next; &#125; struct ListNode *p=head; while(l1 != NULL &amp;&amp; l2 != NULL) &#123; if(l1-&gt;val &lt; l2-&gt;val) &#123; p-&gt;next=l1; l1=l1-&gt;next; &#125; else &#123; p-&gt;next=l2; l2=l2-&gt;next; &#125; p=p-&gt;next; &#125; if(l1 != NULL) p-&gt;next=l1; if(l2 != NULL) p-&gt;next=l2; return head; &#125; struct ListNode* sortList(struct ListNode* head) &#123; if(head == NULL || head-&gt;next == NULL) return head; struct ListNode *slow=head; struct ListNode *fast=head; struct ListNode *pre=NULL; // 切成两半 while(fast!= NULL &amp;&amp; fast-&gt;next != NULL) &#123; pre=slow; slow=slow-&gt;next; fast=fast-&gt;next-&gt;next; &#125; pre-&gt;next=NULL; //两半分别归并 struct ListNode *l1=sortList(head); struct ListNode *l2=sortList(slow); //调用merge return merge(l1,l2);&#125; 基于数组的并归排序(递归)12345678910111213141516171819202122void merge_sort_recursive(int arr[], int reg[], int start, int end) &#123; if (start &gt;= end) return; int len = end - start, mid = (len &gt;&gt; 1) + start; int start1 = start, end1 = mid; int start2 = mid + 1, end2 = end; merge_sort_recursive(arr, reg, start1, end1); merge_sort_recursive(arr, reg, start2, end2); int k = start; while (start1 &lt;= end1 &amp;&amp; start2 &lt;= end2) reg[k++] = arr[start1] &lt; arr[start2] ? arr[start1++] : arr[start2++]; while (start1 &lt;= end1) reg[k++] = arr[start1++]; while (start2 &lt;= end2) reg[k++] = arr[start2++]; for (k = start; k &lt;= end; k++) arr[k] = reg[k];&#125;void merge_sort(int arr[], const int len) &#123; int reg[len]; merge_sort_recursive(arr, reg, 0, len - 1);&#125; 基于数组的并归排序（迭代） 1234567891011121314151617181920212223242526272829303132int min(int x, int y) &#123; return x &lt; y ? x : y;&#125;void merge_sort(int arr[], int len) &#123; int* a = arr; int* b = (int*) malloc(len * sizeof(int)); int seg, start; for (seg = 1; seg &lt; len; seg += seg) &#123; for (start = 0; start &lt; len; start += seg + seg) &#123; int low = start, mid = min(start + seg, len), high = min(start + seg + seg, len); int k = low; int start1 = low, end1 = mid; int start2 = mid, end2 = high; while (start1 &lt; end1 &amp;&amp; start2 &lt; end2) b[k++] = a[start1] &lt; a[start2] ? a[start1++] : a[start2++]; while (start1 &lt; end1) b[k++] = a[start1++]; while (start2 &lt; end2) b[k++] = a[start2++]; &#125; int* temp = a; a = b; b = temp; &#125; if (a != arr) &#123; int i; for (i = 0; i &lt; len; i++) b[i] = a[i]; b = a; &#125; free(b);&#125; 冒泡排序时间复杂度与空间复杂度时间复杂度O(n^2) 代码c语言冒泡排序 1234567891011121314151617181920212223void bubbleSort(int *nums, int lenNums) &#123;int i,j;int flag = 1;for(i = 0; i &lt; lenNums; i++)&#123; flag = 0; for(j=0; j&lt; lenNums - i -1; j++) &#123; //比较并交换 if(nums[j] &gt; nums[j+1]) &#123; nums[j] = nums[j+1] + nums[j]; nums[j+1] = nums[j] - nums[j+1]; nums[j] = nums[j] - nums[j+1]; flag = 0; &#125; &#125; if(flag == 1) &#123; break; &#125;&#125;&#125; 插入排序时间复杂度与空间复杂度时间复杂度O(n^2),空间复杂度O(1) 代码12345678910111213void insertSort(int *nums, int numsLen)&#123; int tmp; for(int i = 1; i&lt; numsLen; i++) &#123; tmp = nums[i]; for(int j = i; j&gt;0 &amp;&amp; nums[j] &lt; nums[j-1]; j--) &#123; nums[j] = nums[j-1]; &#125; nums[j] = tmp; &#125; &#125; 基数排序基数排序是将 需要排序的所有数字统一为固定位数的数字（如果位数不足向前补0），然后按照位数切割，分别对每一个位数进行比较。从最低位开始，依次进行一次排序。这样排完以后就会变成一个有序序列。 时间复杂度与空间复杂度代码1234567891011121314151617181920212223242526272829303132333435363738394041function radixsort($nums)&#123; $maxNum = max($nums); $wei = 0; for($exp =1 ; intval(($maxNum/$exp ))&gt; 0; $exp*=10 ) &#123; $nums = countSort($nums,$exp); var_dump($nums); &#125;&#125;function countSort($nums,$exp)&#123; for ($i=0; $i &lt; 10; $i++) &#123; $count[$i] = 0; &#125; for($i = 0; $i&lt; count($nums); $i++) &#123; $key = intval(($nums[$i]/$exp)%10); $count[intval(($nums[$i]/$exp)%10)]++; &#125; for($i = 1; $i &lt; 10; $i++) &#123; $count[$i] += $count[$i - 1]; &#125; for($i = count($nums)-1; $i &gt;= 0; $i--) &#123; $output[$count[intval(($nums[$i]/$exp)%10) ] -1] = $nums[$i]; $count[intval((($nums[$i]/$exp)%10))]--; &#125; for ($i=0; $i &lt; count($nums) ; $i++) &#123; $nums[$i] = $output[$i]; &#125; return $nums;&#125;$a = [1,3,4,5,12,412,534,122];radixsort($a); 堆排序以最大堆为例，最大堆就是一个特殊二叉树，父节点大于子节点。当前算法是以层序遍历，将二叉树存入数组中。 堆排序每次把处于堆顶的最大值取出 然后对堆进行排序 一次循环，直至堆变为0 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556&lt;?php// echo number_format(100000.5).\"\\n\";// echo number_format(\"100000.5\",2).\"\\n\";// echo number_format(100000.5,1,\".\",\"\");function heapSort($nums)&#123; //将数组划转为堆(依赖数组实现的堆) $n = count($nums); for($i = intval($n/2) -1 ; $i &gt;= 0; $i--) &#123; heapify($nums, $n, $i); &#125; for($i = $n-1; $i &gt;= 0; $i--) &#123; $tmp = $nums[0]; $nums[0] = $nums[$i] ; $nums[$i] = $tmp; heapify($nums, $i, 0); &#125; var_dump($nums);&#125;function heapify(&amp;$nums, $n, $i)&#123; $largest = $i; $l = $i * 2 +1; $r = $i * 2 +2; if($l &lt; $n &amp;&amp; $nums[$largest] &lt; $nums[$l]) &#123; $largest = $l; &#125; if($r &lt; $n &amp;&amp; $nums[$largest] &lt; $nums[$r]) &#123; $largest = $r; &#125; if($largest != $i) &#123; $tmp = $nums[$i]; $nums[$i] = $nums[$largest]; $nums[$largest] = $tmp; heapify($nums, $n, $largest); &#125;&#125;$a = [1,3,4,5,12,412,534,122,534,0,77,88,99,78,56,35,34,1];heapSort($a);&#125; 桶排序1","tags":[{"name":"算法","slug":"算法","permalink":"http://yoursite.com/tags/算法/"}]},{"title":"websocket订阅火币成交记录","date":"2018-06-19T10:15:57.000Z","path":"2018/06/19/websocket订阅火币成交记录/","text":"python3单线程：文件一：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495969798# -*- coding: utf-8 -*-#author: maxie_ljimport _threadfrom websocket import create_connectionfrom mysqlOpertion import connect_mysqlimport gzipimport timeimport json# 链接def connect(): while(1): try: print('') # 挂代理 ws = create_connection(\"wss://www.huobi.br.com/-/s/pro/ws\") #print('链接成功') return ws break except Exception as err: #print(err) #print('connect ws error,retry...') time.sleep(1)def getsubconfig(): # 统计参数 tradeStr=[ \"\"\"&#123;\"sub\": \"market.elfusdt.trade.detail\",\"id\": \"id1\"&#125;\"\"\", \"\"\"&#123;\"sub\": \"market.btcusdt.trade.detail\",\"id\": \"id2\"&#125;\"\"\", \"\"\"&#123;\"sub\": \"market.htusdt.trade.detail\",\"id\": \"id3\"&#125;\"\"\", \"\"\"&#123;\"sub\": \"market.swftcbtc.trade.detail\",\"id\": \"id4\"&#125;\"\"\", \"\"\"&#123;\"sub\": \"market.topcbtc.trade.detail\",\"id\": \"id6\"&#125;\"\"\", \"\"\"&#123;\"sub\": \"market.bchusdt.trade.detail\",\"id\": \"id7\"&#125;\"\"\", \"\"\"&#123;\"sub\": \"market.ethusdt.trade.detail\",\"id\": \"id8\"&#125;\"\"\", \"\"\"&#123;\"sub\": \"market.etcusdt.trade.detail\",\"id\": \"id9\"&#125;\"\"\", \"\"\"&#123;\"sub\": \"market.eosusdt.trade.detail\",\"id\": \"id9\"&#125;\"\"\", \"\"\"&#123;\"sub\": \"market.ltcusdt.trade.detail\",\"id\": \"id9\"&#125;\"\"\" ] return tradeStr# 订阅def sub(ws,tradeStr): ws.send(tradeStr)# 获取返回def getResponse(ws,tradeStr): db = connect_mysql.connect() while 1 : try : compressData=ws.recv() except Exception : #print('链接异常') run(tradeStr,1) try : result=gzip.decompress(compressData).decode('utf-8') except: #print('丢包解析异常') continue if result[:7] == '&#123;\"ping\"': ts=result[8:21] #print('心跳包',ts) pong='&#123;\"pong\":'+ts+'&#125;' ws.send(pong) else: if result[:5] == '&#123;\"ch\"': result = json.loads(result) #print(result) #print('------------------------------------------------------') n = 0 while n &lt; len(result['tick']['data']) : connect_mysql.commit('%s' % result['ch'].split('.')[1],result['tick']['data'][n]['price'],result['tick']['data'][n]['amount'],\"'%s'\" % result[\"tick\"][\"data\"][n][\"direction\"], \"'%s'\" % result['ch'].split('.')[1],db); n += 1def subCoin(tradeStr): ws=connect() sub(ws,tradeStr) getResponse(ws,tradeStr)def run(tradeStr,test): subCoin(tradeStr)def main(): tradeStr=getsubconfig() try : tradeStr = getsubconfig() i = 0 while i &lt; len(tradeStr) : _thread.start_new_thread( run, (tradeStr[i],i) ) i += 1 except Exception as err : print(err) while 1: passif __name__ == '__main__': main() 多线程版本：文件一：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889# -*- coding: utf-8 -*-#author: maxie_ljimport _threadfrom websocket import create_connectionfrom test1 import connect_mysqlimport gzipimport timeimport json# 链接数据库def connect(): while(1): try: ws = create_connection(\"wss://www.huobi.br.com/-/s/pro/ws\") # print('链接成功') return ws break except Exception as err: print(err) #print('connect ws error,retry...') time.sleep(1)def getsubconfig(): # 统计参数 tradeStr=[ \"\"\"&#123;\"sub\": \"market.elfusdt.trade.detail\"&#125;\"\"\", \"\"\"&#123;\"sub\": \"market.btcusdt.trade.detail\"&#125;\"\"\", \"\"\"&#123;\"sub\": \"market.htusdt.trade.detail\"&#125;\"\"\", \"\"\"&#123;\"sub\": \"market.swftcbtc.trade.detail\"&#125;\"\"\", \"\"\"&#123;\"sub\": \"market.topcbtc.trade.detail\"&#125;\"\"\", \"\"\"&#123;\"sub\": \"market.bchusdt.trade.detail\"&#125;\"\"\", \"\"\"&#123;\"sub\": \"market.ethusdt.trade.detail\"&#125;\"\"\", \"\"\"&#123;\"sub\": \"market.etcusdt.trade.detail\"&#125;\"\"\", \"\"\"&#123;\"sub\": \"market.eosusdt.trade.detail\"&#125;\"\"\", \"\"\"&#123;\"sub\": \"market.ltcusdt.trade.detail\"&#125;\"\"\" ] return tradeStr# 订阅def sub(ws,tradeStr): ws.send(tradeStr)# 获取返回def getResponse(ws): db = connect_mysql.connect() while 1 : try : compressData=ws.recv() except Exception : ws=connect() subCoin(ws) print('链接异常') try : result=gzip.decompress(compressData).decode('utf-8') except: print('丢包解析异常') continue if result[:7] == '&#123;\"ping\"': ts=result[8:21] #print('心跳包',ts) pong='&#123;\"pong\":'+ts+'&#125;' ws.send(pong) else: if result[:5] == '&#123;\"ch\"': result = json.loads(result) print(result) #print('------------------------------------------------------') n = 0 while n &lt; len(result['tick']['data']) : connect_mysql.commit('%s' % result['ch'].split('.')[1],result['tick']['data'][n]['price'],result['tick']['data'][n]['amount'],\"'%s'\" % result[\"tick\"][\"data\"][n][\"direction\"], \"'%s'\" % result['ch'].split('.')[1],db); n += 1# 订阅def subCoin(ws): tradeStr=getsubconfig() i = 0 while i &lt; len(tradeStr) : sub(ws,tradeStr[i]) i += 1# 主函数def main(): ws=connect() subCoin(ws) getResponse(ws)if __name__ == '__main__': main() 1234567891011121314151617181920212223242526272829### 文件二:```pythonimport jsonimport pymysqlimport timeclass connect_mysql(): db = '' def connect() : db = connect_mysql.db = pymysql.connect(\"localhost\", \"root\", \"root\", \"huobi\", charset='utf8' ) return db def commit(table, price, amount, action, coin_type, db) : try: cursor = db.cursor() sql = \"INSERT INTO %s_success_order(action,order_amount, price, coin_type)VALUES (%s, %.10f, %.10f,%s )\" % (table,action, amount, price,coin_type ) cursor.execute(sql) # 提交到数据库执行 db.commit() except Exception as e: db = connect_mysql.db = pymysql.connect(\"localhost\", \"root\", \"root\", \"huobi\", charset='utf8' ) commit(table, price, amount, action, coin_type, db) return def connect_close() : connect_mysql.db.close() 文件二是单线程和多线程版的公用文件 shell 脚本123456789101112#!/bin/bashtotal=1avaliable=`ps -ef | grep -w huobi.py | grep -v grep | wc -l`diff=`expr $total - $avaliable`#echo $diff &gt;&gt; /home/script/diff.text#echo $total &gt;&gt; /home/script/diff.text#echo $avaliable &gt;&gt; /home/script/diff.textif [ $diff -gt 0 ];then for((i=0;i&lt;$diff;i++));do /usr/local/bin/python3 /home/script/huobi.py &gt;&gt; /home/script/huobi.out donefi crontab 配置123MAILTO=\"\"* * * * * sudo /bin/bash /home/script/huobi.sh 注意事项：在写shell脚本时，尽量用绝对路径。","tags":[{"name":"折腾","slug":"折腾","permalink":"http://yoursite.com/tags/折腾/"}]},{"title":"数据库-索引的使用优化","date":"2018-06-15T07:10:57.000Z","path":"2018/06/15/数据库-索引使用优化/","text":"数据库索引使用的优化 索引的选择B-tree特点： B-tree索引用B+tree实现， 适合范围查找 适合精确查找 使用注意创建索引（user_name,user_num,city）。 全值匹配，查询条件包括user_name、user_num、city全部条件。 最左匹配，有限匹配最左索引列，上述所以可以匹配（user_name）、（user_name,user_num）、（user_name,user_num，city）这样的查询条件，但是如果我们使用（user_num,city）则无法使用用索引。如果使用(user_name,city)查询条件，则只会使用user_name索引，这就是最左匹配原则。 可匹配列前缀，例如：user_name like ‘li%’. 可用作范围查询，例如(user_name= ‘li’ and user_num &gt; 20) 联合索引，建立索引时，经常使用的列优先，辨识度高的索引放前边，长度小的优先。 如果可以使用联合索引，可以减少磁盘io 不要建立过多的索引，这样会影响mysql的写入和更新，尽量扩展建立联合索引，不要增加索引。 如何可以使用前缀索引。 无法使用索引的情况 无最左匹配列的情况，例如(user_num,city)这样的查询条件。 使用列列后缀匹配，例如user_name like ‘%jian’ 如果某一列使用范围查询，则后续列无法继续使用索引。例如 user_name = ‘lijian’ and user_num &gt; 20 and city = ‘郑州’，city 列是无法使用索引的。 查询时，不要对索引使用函数 例如:SELECT * FROM user_test WHERE user_name = concat(user_name, &#39;fei&#39;) 索引不参与计算，如果索引列参与计算不走索引 字符串与数字比较不走索引。 mysql不支持hash索引贴上一份官方文档：mysql官方介绍inndb 很明显，mysql是不支持hash索引的。innodb内部会根据表的使用支持自适应hash索引优化，所以无法认为建立。当然建表语句还是有的，如下。查看一下表的建表语句：这个时候可以发现，建立语句里还是有hash的。 但是执行show index from cm_deposit_order可以返现其实使用hash的索引还是Btree.","tags":[{"name":"数据库","slug":"数据库","permalink":"http://yoursite.com/tags/数据库/"}]},{"title":"数据库-explain","date":"2018-05-29T07:18:29.000Z","path":"2018/05/29/数据库-explain执行计划/","text":"官方文档使用explain可以分析sql的执行情况，定位慢sql的问题，从而可优化查询语句。explain的官方文档explain的官方文档 使用方法使用方法，在select前加上explain即可。 1explain select * from cm_car_dealer where car_dealer id &gt; 56 结果如图，会涉及到多个字段。 参数 结果 含义 id 1 第几个执行的语句 select_type SIMPLE 查询类型） table cm_car_dealer 表示从哪张表获取的数据 type range 区间索引 possible_keys PRIMARY 表示mysql可以使用哪些索引来查到这条记录 key PRIMARY 实际使用到的索引。如果为NULL，则没有使用索引 key_len 4 主键是int型，所以为4.一般来说这个越小越好 ref 表示mysql可以使用哪些索引来查到这条记录 rows 159 表示需要遍历多少行才能找到当前数据 Extra Using where 执行状态说明 id查询的序号表示当前查询的序号，其值为数字，表示sql执行的次序。 id相同当id相同时，执行顺序是自上而下的。 1explain select * from cm_users,cm_car_dealer_certification where cm_users.id = cm_car_dealer_certification.car_dealer_id id不同当id不同时，id序号递增，id越大的越先被执行。 1explain select * from (select * from cm_users where id &gt;14585) as a where id = 23213 既有id相同，也有id不同的如果既有id相同，也有id不同的。首先按照id由大到小次序执行，如果id相同则执行顺序为由上到下。 1explain select d1.id,(select id from cm_users where id = 14585) as d2 from (select * from cm_users where id &gt;1 and id &lt; 200) as d1 ,cm_car_dealer_certification as d3 where d1.id = d3.car_dealer_id select_typeselect_type表示查询的类型，主要有普通查询、联合查询、子查询和复杂查询。 1.simple: 为建单的select查询，查询中不包含子查询或者union2.primary: 查询中包含任何复杂的子部分，最外层查询被标记为primary3.subquert: 在select或者where列表中包含了子查询4.derived: 在from列表中包含的子查询被标记为derived(衍生)，mysql或递归执行这些子查询，把结果放在临时表里5.union:若第二个select出现在union之后，责备标记为union;若union包含在from子句的查询中，外城select将被标记为derived6.union result :union的结果 单独解释下第六项，如下。 type官方全称为type join意思为链接类型，从字面意思很容易误解为两个表的链接，其实并不是这样的。这里更应该理解为数据库引擎查找表的一种方式。《高性能mysql》称呼它为访问类型。是sql查询优化中的一个很重要的指标。 mysql5.7中type的类型达到了14种之多，这里只对常见的类型进行排序，结果有好到坏顺序为：system &gt; count &gt; eq_ref &gt; ref &gt; fulltext &gt;ref_or_null &gt; index_merge &gt; unique_subquery &gt; index_subquery &gt; range &gt; index &gt; ALL 好sql的标准是：至少达到range,最好达到ref。从最坏的一一开始介绍。 ALL这既是传说的扫全表，例如 select * from cm_users where &#39;name&#39; = &quot;张三&quot;，在cm_users 里name未建立索引，因为name不是唯一的，所以即使mysql找到了名为张三的记录，也不会停下来，因为无法确定时候还有叫张三的。这样就会扫全表全量的数据，并且不是走索引的扫全表。这种情况如果是为了展示全量的数据还好，如果是普通查询查出现了all,说明有很大优化空间。 index通过索引扫全表，和上边比，半斤八俩，但是通过索引读取的数据有序。 rangerange指的是，通过索引有范围的扫描,mysqls在找到范围的开始结束节点时，会通过索引链表扫描指定范围的数据。 ref指的是非唯一性索引扫描，扫描当前所选择索引的全量数据，找到满足条件的所有数据，这里是所有数据，因为索引是非唯一，所以mysql需要扫描全量的索引。 例如1select * from cm_users where created_at = '2019-01-29 00:00:00'; eq_ref唯一性索引查找，对于每个索引，表中只有一条记录与之匹配。常见于主键或唯一索引。 12explain select * from cm_users where ucid = 1083396207893549056explain select * from cm_users where created_at='2019-01-11 00:12:39' consteg:1explain select * from cm_users where id = 423358 system当表里只有一条数据，或者子查询和父查询条件重复时会发生，一般不会出现。 eg:1explain select * from (select * from cm_users where id = 14585) as a where id = 14585 possible_keys查询涉及到的到的字段上如果有索引，则该索引将会被列出来，但不一定被查询实际使用。 key实际使用的索引，如果没有使用索引则为NULL。 key_len表示索引中使用的字节数，查询中使用的索引的长度（最大可能长度），并非实际使用长度，理论上长度越短越好。 ref显示索引的哪一列被使用了，有时候会是一个常量：表示哪些列或常量被用于用于查找索引列上的值 row表示此次查询需要读取的行数。 extraUsing filesort如果使用非索引列进行排序，则extra会展示Using filesorteg: 1explain select * from cm_users where created_at &lt; '2019-01-11 00:12:39' order by `name` limit 5 Using temporary如果mysql 使用临时表保存中间结果， eg:1explain select * from cm_users where created_at &lt; '2019-01-11 00:12:39' group by `name` limit 5 Using index表次此次查询使用了覆盖索引，没有直接访问表的数据行，效率高。如果同时出现了 using where,表明索引用来执行索引键值的查找。如果没有出现using where 表明索引只是用来读取数据。 覆盖索引：当前查询的数据在索引内都存在，则不需要访问数据表即可获取数据。如果要使用覆盖索引不可使用 select *,如果给所字段建立索引则会降低数据库写入更新速度。 Using where使用了where过滤 Using join buffer使用了链接缓存 Impossible WHEREwhere永远为不可成立的条件时出现 distinct优化distinct操作，在找到第一个匹配的数据时，停止对同样的值寻找。","tags":[{"name":"数据库","slug":"数据库","permalink":"http://yoursite.com/tags/数据库/"}]},{"title":"数据库-mysql索引简介","date":"2018-04-29T03:10:15.000Z","path":"2018/04/29/数据库-索引简介/","text":"摘要因为各个数据库的索引机制不尽相同，在此涉及到mysql的两种索引b-tree、hash。 这里所指的所有数据库都是指mysql. 索引的本质mysql官方文档对索引的描述：索引是帮助mysql高效获取数据的数据结构。so 索引的本质是数据结构。涉及到查找的时候肯定避不开查找算法，例如顺序查找、二分查找。随着人们对查找性能要求的越来越高就延伸出来了基于树的查找，例如二叉树的查找。当然即使是二叉树的查找也无法满足现在程序对于查找性能的要求，进而出现了基于b-tree、hash的查找。可以分析下查找的演变过程，所有的查找都是基于一定的数据结构，例如最开始顺序查找基于链表、二分查找基于有序链表、二叉树查找基于树。这种为了满足这种高效小的查询效率所衍伸出来的数据结构就是索引。 索引的选择基于树的查找效率由树的深度决定，所以二叉树是无法满足查询速度的要求，mysql的索引主要使用 b+tree。 b-treeb-树（由b-tree翻译过来）也就是b树，是一种路自平衡搜索树。如果我们以一个二元组来表示索引的内容的话（[key,val]）,key表示键值，val表示数据（地址或者主键），则b-树有以下特点。 树的度的定义：每个节点包含子树的个数。 特点 所有的键值分布在整个树种（包括叶子节点和非叶子节点） 任何key只会出现一次 所有的叶子节点必须在同一层次，也就是他们具有相同的深度。 每个节点里的关键字是有序的（一个结点中的key从左至右非递减排列），当前节点的左右两个指针指向的节点，左指针指向的节点的key小于当前节点，右指针指向的节点的key大于当前节点。 d&gt;=2,每个节点有n-1个key 和n个指针，d&lt;=n&lt;=2d。 假设b-tree的度为d,高为h，其索引个数为N。则h=logd((n+1)/2)，查找一条数据的渐进复杂度为logdn。由于索引数量n和其高度h程对数关系（实际使用中d一般会大于100），所以即使是key很大，查询效率也会很快，分析可以的出b-tree查找一个最多需要h-1次磁盘io。举个栗子一个度为1001，高度为2（不包含根节点）的b-tree可以存储超高10亿的数据，且每个节点如果使用二分查找的话，只需要三次查找就可以查询到所需的数据。 结构图 b+treeb+tree是是b-tree的升级版，所有的data值存在叶子节点。 特点 b+tree树只有叶子节点包含data，非叶子节点只存key与指针 所有的叶子节点为一个链表 结构图 索引原理 聚簇索引 ：索引和文件为同一个文件。 非聚簇索引： 索引和数据文件分开的索引。 MyISAM 和 InnoDb都使用b+tree索引结构，但是底层确实不一样的，MyISAM采用的事非聚簇索引，而innoDB采用的是聚簇索引。 MyISAMMyISAM索引原理 : 采用的费聚簇索引 My-ISAM myi索引文件和myd数据文件分离，索引文件值保存数据记录和指针地址。叶子节点data存执指向数据记录的地址。 InnoDB结构InnoDB物理存储文件结构说明：InnoDB以表空间Tablespace(idb文件)结构进行组织，每个Tablespace包含多个Segment段（Segment 分为为叶子节点和飞叶子节点Segment），一个Segment段包含多个Extent,一个Extent占用1M空间且包含64page,innoDB b+tree一个逻辑节点就分配一个屋里Page,一个节点一次io操作。一个page里包含d个Row行数据，行数据包每一个索引是一个b+tree，一个节点是=一个page(16k)。数据会按照16kb切片为page并编号，标号可以通过偏移量（16k*n）找到文件存储地址。且叶子节点为双向链表，数据按主键索引聚簇索，二级索引叶子节点存储主键值，除了覆盖索引其他二级索引都通过主键查找数据。 原理InnoDB采用聚簇索引，存储于idb文件里，表数据本身就是主索引，相邻的索引临近存储。叶节点data域保存了完整的数据记录（data(除主键外所有数据）+key(主键)）。也是由于这种方式InnoDB必须建指定主键，如通过没有指定主键则mysql自动选择一个可以唯一表示数据记录的列作为主键。如果这样的列不存在，mysql自动为表生成一个隐含字段（6个字节长整型）作为主键。 mysql所有的辅助索引data存储皆为主键值 结构图 查询流程1.索引精确查找确定定位条件, 找到根节点Page No, 根节点读到内存, 逐层向下查找, 读取叶子节点Page,通过 二分查找找到记录或未命中。（select * from user_info where id = 23） 2.索引范围查找读取根节点至内存, 确定索引定位条件id=18, 找到满足条件第一个叶节点, 顺序扫描所有结果, 直到终止条件满足id &gt;=22 （select * from user_info where id &gt;= 18 and id &lt; 22） 3.全表扫描直接读取叶节点头结点， 顺序扫描， 返回符合条件记录， 到最终节点结束（select * from user_info where name = ‘abc’） 4.二级索引查找建立索引Create table table_x(int id primary key, varchar(64) name,key sec_index(name) ) 如果执行select * from table_x where name = &#39;xxxx&#39; 总结mysql为什么选择b+tree内存读取和存盘读取不在一个数量级，所以一般内存读取相较于与磁盘io可以忽略不计。一般来说，索引的大小是无法全部存在ram里的so衡量一个索引的优劣可以以磁盘io次数来衡量。这里就可以排除h黑大的红黑树。b-tree和b+tree一次检索最多需要查询h-1个节点,但是b+tree不存data数据，索引可以存的key更多，这样查询的节点数也就也少，磁盘io也就越少。 详解：Mysql设计利用了磁盘预读原理，将一个B+Tree节点大小设为一个页大小，在新建节点时直接申请一个页的空间，这样就能保证一个节点物理上存储在一个页里，加之计算机存储分配都是按页对齐的，这样就实现了每个Node节点只需要一次I/O操作。(一个物理Page16K) 一般一个key的大小为8b指针的大小也为8b,这样一个page可以存储(16k/16b=1000)条记录，n层数据可以存储k的n次方跳数据，一亿条数据也不过3层而已，可谓非常高效。 为什么要建立索引如全表扫描扫描那样，我们不能保证每次查询都能在前几个page里查询到所需的数据，目标数据越往后，查询效率就越慢，如果有1亿跳数据，数据查询将会慢的恐怕。 是否索引越多越好每一个索引都是一个树，每次插入和删除都可能破坏原有的树，当树破坏是mysql需要重新把树平衡，这会消耗资源，所以索引不宜过多。","tags":[{"name":"数据库","slug":"数据库","permalink":"http://yoursite.com/tags/数据库/"}]},{"title":"数据库隔离级别","date":"2018-04-23T12:34:25.000Z","path":"2018/04/23/数据库隔离级别/","text":"SQL标准规范中定义了四种数据库隔离级别。每种隔离级别带来的系统开销是不一样的。通常较低的隔离级别的系统开销会更低，可以执行更高的并发。 READ COMMITTED(未提交读)顾名思义，未提交读隔离级别中，事物的修改即使没有提交，对其他事务也是可见的。事务可以读取为未提交的数据，也成为脏读。READ COMMITED 性能上不会有跟很大的优势，但是却会导致很多的问题，在实际应用中很少使用。 eg:业务场景支付扣款。当用户统一时刻发生一笔充值500，和一笔扣款200业务时。 扣款读到是未执行的充值事务金额，账户余额500元，但是充值事务回滚了，这种情况下数据出现问题，所以未提交读是一种不可靠的事务。 READ COMMITED(提交读)多数数据库的隔离级是提交读(比如Sql Server , Oracle)，但是mysql不是。提交读的含义是：一个事务只能看到已经提交的事务所做的修改。也就是说事务和事务之前在提交前是相互不可见的。这个级别又称为不可重复读，因为每次读取的结果可能是不一样的。 eg:当我们拿着银行卡去消费时候，查询到卡里还有2000元，这时准备消费。与此同时这张卡的钱被老婆转账了（已经转出去2000元），当我们在扣款你的时候会提示余额不足。提交读避免了脏读，但是却产生了不可重复读（同一事务内）。 Repeatable read （重复读）重复读，保证了在同一个事务内读取同一条数据是不变的，但是却无法保证我们读取（同一事务内）同一表里的数据量是一致的。但是却会产生幻读（幻行）。 例如消费记录表，我们在打印信用卡的消费记录时查询出来只有一条消费记录80（这是另外一个事务无法改变的），但是在我们打印的时候，老婆又消费了1000元（另外一个事务，但是没有对原来的80元进行修改），我们打印出来的结果是两条记录 80 +1000，这就是幻行。 Serializable （序列化）Serializable 通过强制事务串行执行避免了欢读。但是Serializable在执行的时候会对每一样的数据都加上锁，会导致大量的超时和锁竞争。只有在数据一致性非常重要，且并发不是很大情况选，可以选用这种隔离级别。 几个名词脏读指的是在A事务内，多次读取同一一个数据。与此同时还有另外一个B事务对同一数据进行了修改，但是未提交。这时就会产生事务A两次读取的数据不一致，一个是事务B未执行前的数据，一个是读取事务B未提交的数据。 不可重复读。指的是同一事务内，无法对同一个数据多次读取，因为两次读取可能是不一致的（因为没有对 数据写 加锁）。 幻读幻读是在可重复读的隔离级别下产生的问题。可重复读虽然对数据加写锁，但是却没对表加锁，造成每次读取表的数据量是不一致的，所以又称幻行。","tags":[{"name":"数据库","slug":"数据库","permalink":"http://yoursite.com/tags/数据库/"}]},{"title":"算法-螺旋矩阵","date":"2018-02-11T12:17:20.000Z","path":"2018/02/11/算法-螺旋矩阵/","text":"题目英文Given a matrix of m x n elements (m rows, n columns), return all elements of the matrix in spiral order. Example 1: Input:[ [ 1, 2, 3 ], [ 4, 5, 6 ], [ 7, 8, 9 ]]Output: [1,2,3,6,9,8,7,4,5]Example 2: Input:[ [1, 2, 3, 4], [5, 6, 7, 8], [9,10,11,12]]Output: [1,2,3,4,8,12,11,10,9,5,6,7] 中文给定一个包含 m x n 个元素的矩阵（m 行, n 列），请按照顺时针螺旋顺序，返回矩阵中的所有元素。 示例 1: 输入:[ [ 1, 2, 3 ], [ 4, 5, 6 ], [ 7, 8, 9 ]]输出: [1,2,3,6,9,8,7,4,5]示例 2: 输入:[ [1, 2, 3, 4], [5, 6, 7, 8], [9,10,11,12]]输出: [1,2,3,4,8,12,11,10,9,5,6,7] 思路 所有走过的节点标记为null 用turn标记当前走向，如果下一个节点为null或notSet,则调转到下一个方向。 代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485class Solution &#123; function spiralOrder($matrix) &#123; $row = count($matrix); if($row == 0) &#123; return []; &#125; $columu = count($matrix[1]); $currentpoint = $matrix[0][0]; $turn = 0; $i = 0; $j = 0; while(isset($currentpoint) &amp;&amp; !is_null($currentpoint)) &#123; //向右 $ret[] = $currentpoint; $matrix[$i][$j] = null; if($turn == 0) &#123; if(isset($matrix[$i][$j+1])&amp;&amp;!is_null($matrix[$i][$j+1])) &#123; $currentpoint = $matrix[$i][$j+1]; $j++; &#125; elseif(isset($matrix[$i+1][$j])&amp;&amp;!is_null($matrix[$i+1][$j])) &#123; $currentpoint = $matrix[$i+1][$j]; $i++; $turn = 1; continue; &#125; else &#123; $currentpoint = null; &#125; &#125; //向下 if($turn == 1) &#123; if(isset($matrix[$i+1][$j])&amp;&amp;!is_null($matrix[$i+1][$j])) &#123; $currentpoint = $matrix[$i+1][$j]; $i++; &#125; elseif(isset($matrix[$i][$j-1])&amp;&amp;!is_null($matrix[$i][$j-1])) &#123; $currentpoint = $matrix[$i][$j-1]; $j--; $turn = 2; continue; &#125; else &#123; $currentpoint = null; &#125; &#125; //向左 if($turn == 2) &#123; if(isset($matrix[$i][$j-1])&amp;&amp;!is_null($matrix[$i][$j-1])) &#123; $currentpoint = $matrix[$i][$j-1]; $j--; &#125; elseif(isset($matrix[$i-1][$j])&amp;&amp;!is_null($matrix[$i-1][$j])) &#123;; $currentpoint = $matrix[$i-1][$j]; $i--; $turn = 3; continue; &#125; else &#123; $currentpoint = null; &#125; &#125; if($turn == 3) &#123; if(isset($matrix[$i-1][$j])&amp;&amp;!is_null($matrix[$i-1][$j])) &#123; $currentpoint = $matrix[$i-1][$j]; $i--; &#125; elseif(isset($matrix[$i][$j+1])&amp;&amp;!is_null($matrix[$i][$j+1])) &#123; $currentpoint = $matrix[$i][$j+1]; $j++; $turn = 0; continue; &#125; else &#123; $currentpoint = null; &#125; &#125; &#125; return $ret; &#125;&#125;","tags":[{"name":"算法","slug":"算法","permalink":"http://yoursite.com/tags/算法/"}]},{"title":"算法-全排列-46","date":"2018-01-29T07:18:56.000Z","path":"2018/01/29/算法-全排列-46/","text":"题目英文Given a collection of distinct integers, return all possible permutations. Example: Input: [1,2,3]Output:[ [1,2,3], [1,3,2], [2,1,3], [2,3,1], [3,1,2], [3,2,1]] 中文给定一个没有重复数字的序列，返回其所有可能的全排列。 示例: 输入: [1,2,3]输出:[ [1,2,3], [1,3,2], [2,1,3], [2,3,1], [3,1,2], [3,2,1]] 思路思路1 借鉴之前做的第k个排序 把所有的排序塞进一个二维数组里 思路2思路一打败了百分之56的人，我觉得还有其他建单的思路。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172/** * Return an array of arrays of size *returnSize. * Note: The returned array must be malloced, assume caller calls free(). */int jiecheng(int n)&#123; int ret = 1; while(n &gt; 0) &#123; ret = ret *n; n--; &#125; return ret;&#125;int** permute(int* nums, int numsSize, int* returnSize) &#123; *returnSize = jiecheng(numsSize); //返回的二维数组 int** ret = (int**)malloc((sizeof(int*)*(*returnSize))); //记录头指针 int** current = ret; //标识进位 int* tmp = (int*)malloc(sizeof(int)*numsSize); tmp[numsSize-1] = 1; for(int i = numsSize-2; i&gt;=0; i--) &#123; tmp[i] = tmp[i+1]*(numsSize-1-i); &#125; //标识是否使用 int *flag = (int*)malloc(sizeof(int)*numsSize); //初始化所有都为0； int idx = 0, t = 0, k =0, m = 0; memset(flag, 0, sizeof(int)*numsSize); //输出每一个组合 for(int i = 1; i &lt;= (*returnSize); i++) &#123; int* tmp1 = (int*)malloc(sizeof(int)*numsSize); //初始化 idx = 0, t = 0; k = i , m=0; memset(flag, 0, sizeof(int)*numsSize); for(int j = 0; j &lt; numsSize; j++) &#123; //取当前应取数字所在位 t = (k-1)/tmp[j]; //保留数坐在位置 idx =t; for( m = 0; m &lt; numsSize;m++) &#123; //寻找最左未使用的数 if(!flag[m]) &#123; t--; if(t == -1) &#123; break; &#125; &#125; &#125; tmp1[j] = nums[m]; // printf(\"m:%d,\",m); // printf(\"j:%d,\",j); // printf(\"%d,\",tmp1[j]); flag[m] = 1; k -= (idx*tmp[j]); &#125; (*current) = tmp1; current++; &#125; return ret;&#125;","tags":[{"name":"算法","slug":"算法","permalink":"http://yoursite.com/tags/算法/"}]},{"title":"算法-最接近的三数之和-16","date":"2018-01-28T07:18:49.000Z","path":"2018/01/28/算法-最接近的三数之和/","text":"题目英文Given an array nums of n integers and an integer target, find three integers in nums such that the sum is closest to target. Return the sum of the three integers. You may assume that each input would have exactly one solution. Example: Given array nums = [-1, 2, 1, -4], and target = 1. The sum that is closest to the target is 2. (-1 + 2 + 1 = 2). 中文给定一个包括 n 个整数的数组 nums 和 一个目标值 target。找出 nums 中的三个整数，使得它们的和与 target 最接近。返回这三个数的和。假定每组输入只存在唯一答案。 例如，给定数组 nums = [-1，2，1，-4], 和 target = 1. 与 target 最接近的三个数的和为 2. (-1 + 2 + 1 = 2). 思路原来思路与求三数之和相似，先排序再查找最优解，然是时间复杂度由n^3变为n^2。 排序数组 定义左右指针 i=key+1、j=size-1，左加右减，寻找最优解（val +$nums[$i]+$nums[$j] == $target）。 循环节点，重复上述操作寻找最优解。 代码123456789101112131415161718192021222324252627282930313233343536373839class Solution &#123; function threeSumClosest($nums, $target) &#123; sort($nums);//排序就不写了。。 foreach($nums as $key =&gt; $val) &#123; $i = $key +1; $j = count($nums) -1; while($j &gt; $i) &#123; //如果相等，直接返回。 if($val + $nums[$i] + $nums[$j] == $target) &#123; return $val + $nums[$i] + $nums[$j]; &#125; //获取最优解 if(isset($tmp))&#123; $absv = abs($val + $nums[$i] + $nums[$j] -$target); if($absv &lt; abs($tmp-$target)) &#123; $tmp = ($val + $nums[$i] + $nums[$j]); &#125; &#125; else &#123; $absv = abs($val + $nums[$i] + $nums[$j] -$target); $tmp = ($val + $nums[$i] + $nums[$j]); &#125; if($val + $nums[$i] + $nums[$j] &gt; $target) &#123; $j--; continue; &#125; if($val + $nums[$i] + $nums[$j] &lt;$target) &#123; $i++; continue; &#125; &#125; &#125; return $tmp; &#125;&#125;","tags":[{"name":"算法","slug":"算法","permalink":"http://yoursite.com/tags/算法/"}]},{"title":"算法-盛水最多的容器","date":"2018-01-28T07:11:20.000Z","path":"2018/01/28/算法-盛水最多的容器/","text":"题目英文11. Container With Most WaterGiven n non-negative integers a1, a2, …, an , where each represents a point at coordinate (i, ai). n vertical lines are drawn such that the two endpoints of line i is at (i, ai) and (i, 0). Find two lines, which together with x-axis forms a container, such that the container contains the most water. Note: You may not slant the container and n is at least 2. The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49. Example: Input: [1,8,6,2,5,4,8,3,7]Output: 49 中文11. 盛最多水的容器 给定 n 个非负整数 a1，a2，…，an，每个数代表坐标中的一个点 (i, ai) 。在坐标内画 n 条垂直线，垂直线 i 的两个端点分别为 (i, ai) 和 (i, 0)。找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。 说明：你不能倾斜容器，且 n 的值至少为 2。 图中垂直线代表输入数组 [1,8,6,2,5,4,8,3,7]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为 49。 示例: 输入: [1,8,6,2,5,4,8,3,7]输出: 49 思路思路1 遍历循环，寻找最优解。 思路2（贪心） 取数组最左最右作为容器的左右边界。 将高度较小的的边界不断向内移动，直到找到面积更大的。 重复第二部操作，直到左右边界重合。 代码1234567891011121314151617181920212223242526272829int maxArea(int* height, int heightSize) &#123; if(heightSize &lt; 2) &#123; return 0; &#125; int ret = 0; int width = 0; int hight = 0; for(int i = 0; i &lt; heightSize;i++) &#123; for(int j = i+1; j &lt; heightSize; j++) &#123; width = j -i; hight = min(height[i], height[j]); ret = max(ret, (width*hight)); &#125; &#125; return ret;&#125;//获取两数最小值int min(a, b)&#123; return a &gt; b ? b : a;&#125;//获取两数内最大值int max(a, b)&#123; return a &gt; b ? a : b;&#125; 优化后代码 12345678910111213141516171819202122232425262728int maxArea(int* height, int heightSize) &#123; if(heightSize &lt; 2) &#123; return 0; &#125; int ret = 0; int i = 0; int j = heightSize - 1; int h = 0; while(i &lt; j) &#123; h = min(height[i], height[j]); ret = max(ret, (h*(j-i))); if(height[i] &lt; height[j]) i++; else j--; &#125; return ret;&#125;//获取两数最小值int min(a, b)&#123; return a &gt; b ? b : a;&#125;//获取两数内最大值int max(a, b)&#123; return a &gt; b ? a : b;&#125;","tags":[{"name":"算法","slug":"算法","permalink":"http://yoursite.com/tags/算法/"}]},{"title":"算法-三数之和","date":"2018-01-28T04:23:30.000Z","path":"2018/01/28/算法-三数之和/","text":"题目英文Given an array nums of n integers, are there elements a, b, c in nums such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero. Note: The solution set must not contain duplicate triplets. Example: Given array nums = [-1, 0, 1, 2, -1, -4], 12345A solution set is:[ [-1, 0, 1], [-1, -1, 2]] 中文给定一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，使得 a + b + c = 0 ？找出所有满足条件且不重复的三元组。 注意：答案中不可以包含重复的三元组。 例如, 给定数组 nums = [-1, 0, 1, 2, -1, -4]， 满足要求的三元组集合为： 1234[ [-1, 0, 1], [-1, -1, 2]] 思路 对数据进行排序（将三数之和转化为两数之和，减少时间复杂度） 遍历,取当前节点以及当前节点右边非重复两个值（这里利用双指针），比对三个值的和是否等于0。 因为比对的结果是0，且除当前节点外的两个节点都大于当前节点，所以如果当前节点大于0，则停止遍历原思路暴力循环寻找最优解，但是时间复杂度变成n^3,会超时。优化思路 首先对数组进行排序（最好快排） 循环数组，当前节点为i 定义两个指针 j (j=i+1)、 k (k=numssize-1),依据条件（nums[j] + nums[j] + nums[k] == 0）遍历寻找最优解。 如果最小节点i &gt; 0，则无需继续循环。优化后代码时间复杂度由原来的n^3变为n^2 代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970void bubbleSort(int *nums, int lenNums) &#123; int i, j; int tmp; int flag = 1; for (i = 0; i &lt; lenNums; i++) &#123; for (j = 0; j &lt; lenNums - 1; ++j) &#123; if (nums[j + 1] &lt; nums[j]) &#123; tmp = nums[j + 1]; nums[j + 1] = nums[j]; nums[j] = tmp; flag = 0; &#125; &#125; if (flag == 1) &#123; break; &#125; &#125;&#125;/** * Return an array of arrays of size *returnSize. * Note: The returned array must be malloced, assume caller calls free(). */int **threeSum(int *nums, int numsSize, int *returnSize) &#123; int i, j, k, m; int **ret = malloc(sizeof(int ) * (numsSize*(numsSize-1)*(numsSize-2))/6); *returnSize = 0; bubbleSort(nums, numsSize); for (i = 0; i &lt; numsSize; i++) &#123; if (i &gt; 0 &amp;&amp; nums[i - 1] == nums[i]) &#123; continue; &#125; if(nums[i] &gt; 0) &#123; break; &#125; j = i + 1; k = numsSize - 1; while (k &gt; j) &#123; if (nums[j] + nums[k] + nums[i]== 0) &#123; ret[*returnSize] = (int *) malloc(sizeof(int) * 3); ret[*returnSize][0] = nums[i]; ret[*returnSize][1] = nums[j]; ret[*returnSize][2] = nums[k]; j++; k--; (*returnSize)++; while (j &lt; k &amp;&amp; nums[j] == nums[j - 1]) &#123; j++; &#125; while (j &lt; k &amp;&amp; nums[k] == nums[k + 1]) &#123; k--; &#125; continue; &#125; if (nums[j] + nums[k] + nums[i] &gt; 0) &#123; k--; continue; &#125; if (nums[j] + nums[k] + nums[i] &lt; 0) &#123; j++; continue; &#125; &#125; &#125; return ret;&#125;","tags":[{"name":"算法","slug":"算法","permalink":"http://yoursite.com/tags/算法/"}]},{"title":"算法-求两个有序链表的中位数","date":"2018-01-27T12:34:22.000Z","path":"2018/01/27/算法-求两个有序链表的中位数/","text":"题目英文4. Median of Two Sorted ArraysThere are two sorted arrays nums1 and nums2 of size m and n respectively. Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)). You may assume nums1 and nums2 cannot be both empty. Example 1: nums1 = [1, 3]nums2 = [2] The median is 2.0Example 2: nums1 = [1, 2]nums2 = [3, 4] The median is (2 + 3)/2 = 2.5 中文4. 寻找两个有序数组的中位数给定两个大小为 m 和 n 的有序数组 nums1 和 nums2。 请你找出这两个有序数组的中位数，并且要求算法的时间复杂度为 O(log(m + n))。 你可以假设 nums1 和 nums2 不会同时为空。 示例 1: nums1 = [1, 3]nums2 = [2] 则中位数是 2.0示例 2: nums1 = [1, 2]nums2 = [3, 4] 则中位数是 (2 + 3)/2 = 2.5 思路一下午，还是没解出来尴尬。 代码官方解题思路 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849class Solution &#123; function findMedianSortedArrays($nums1, $nums2) &#123; $count1 = count($nums1); $count2 = count($nums2); //交换$nums1为大一点数组 if($count2 &gt; $count1) &#123; $count1 = $count1 + $count2; $count2 = $count1 - $count2; $count1 = $count1 - $count2; $tmp = $nums1; $nums1 = $nums2; $nums2= $tmp; &#125; $iMin = 0; $iMax = $count2; $halfLen = intval((($count1 + $count2 +1)/2)) ; while($iMin &lt;= $iMax) &#123; $i = intval((($iMax+$iMin) /2)); $j = $halfLen -$i; if($i &lt; $iMax &amp;&amp; $nums1[$j-1] &gt; $nums2[$i]) &#123; $iMin = $i + 1; &#125; else if($i &gt; $iMin &amp;&amp; $nums2[$i-1] &gt; $nums1[$j]) &#123; $iMax = $i-1; &#125; else &#123; $maxLeft = 0; if($i == 0)&#123;$maxLeft = $nums1[$j-1];&#125; elseif($j == 0)&#123;$maxLeft = $nums2[$i-1];&#125; else&#123;$maxLeft = max($nums2[$i-1],$nums1[$j-1]);&#125; if((($count1 + $count2)%2) == 1) &#123;return $maxLeft;&#125; $minRight = 0; if($i == $count2)&#123;$minRight = $nums1[$j];&#125; else if($j == $count1)&#123;$minRight = $nums2[$i];&#125; else&#123;$minRight = min($nums1[$j], $nums2[$i]);&#125; return ($maxLeft + $minRight)/2; &#125; &#125; return 0.0; &#125; &#125; 思路清晰1234567891011121314151617181920212223242526272829303132333435class Solution &#123; public double findMedianSortedArrays(int[] nums1, int[] nums2) &#123; /** 如果两个数组的中位数 mid1 &lt; mid2, 则说明合并后的中位数位于 num1.right + num2之间 否则合并后的中位数位于 nums2.right + nums1 之间 (right 是相对于 mid 而言的) getKth 函数负责找到两个数组合并(假设)后有序的数组中的第 k 个元素, k 从 1 开始计算 **/ if(nums1.length == 0 &amp;&amp; nums2.length == 0) return 0.0; int m = nums1.length, n = nums2.length; // l: 合并后数组的左半部分的最后一个数 r: 合并后数组的右半部分的第一个数 int l = (m+n+1) / 2; int r = (m+n+2) / 2; // 如果 m+n 是奇数 getKth 的返回值是相同的, 是偶数则是合并后数组的中间两个数 if(l == r) return getKth(nums1, 0, nums2, 0, l); return (getKth(nums1, 0, nums2, 0, l) + getKth(nums1, 0, nums2, 0, r)) / 2.0; &#125; private double getKth(int[] nums1, int st1, int[] nums2, int st2, int k) &#123; // 边界情况, 如果 nums1数组已经穷尽了, 则只能返回 nums2 中的第 k 个元素 if(st1 &gt; nums1.length-1) return nums2[st2 + k - 1]; if(st2 &gt; nums2.length-1) return nums1[st1 + k - 1]; // 边界情况, k = 1 则返回两个数组中最小的那个 if(k == 1) return Math.min(nums1[st1], nums2[st2]); // 在 nums1 和 nums2 当前范围内找出 mid1 和 mid2 判断舍弃哪半部分 int mid1 = Integer.MAX_VALUE; int mid2 = Integer.MAX_VALUE; if(st1 + k/2 - 1 &lt; nums1.length) mid1 = nums1[st1 + k/2 - 1]; if(st2 + k/2 - 1 &lt; nums2.length) mid2 = nums2[st2 + k/2 - 1]; // mid1 &lt; mid2 在 nums1.right 和 nums2 之间搜索, 丢掉 k/2 个数. if(mid1 &lt; mid2) return getKth(nums1, st1 + k/2, nums2, st2, k - k/2); else return getKth(nums1, st1, nums2, st2 + k/2, k - k/2); &#125;&#125; 自己思路123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117class Solution &#123; function findMedianSortedArrays($nums1, $nums2) &#123; $count1 = count($nums1); $count2 = count($nums2); //第一个数组为0情况 if($count1 == 0 ) &#123; if($count2%2 ==0) &#123; return ($nums2[$count2/2-1] + $nums2[($count2/2)])/2; &#125; else &#123; return $nums2[ceil($count2/2)-1]; &#125; &#125; //第二个数组为0情况 if($count2 == 0 ) &#123; if($count1%2 ==0) &#123; return ($nums1[$count1/2 -1] + $nums1[($count1/2)])/2; &#125; else &#123; return $nums1[ceil($count1/2) -1]; &#125; &#125; //中位数在两个数组合并以后的位置（从0开始） $halfLen = ($count1 + $count2)%2 == 0 ? ($count1 + $count2)/2 -1 :intval(($count1 + $count2)/2) ; //交换$nums1为大一点数组 if($count2 &gt; $count1) &#123; $count1 = $count1 + $count2; $count2 = $count1 - $count2; $count1 = $count1 - $count2; $tmp = $nums1; $nums1 = $nums2; $nums2= $tmp; &#125; $ret = $this-&gt;Bsearch($nums1, $nums2, 0,$count2-1, $halfLen); return $ret; &#125; //递归查找 function Bsearch($nums1,$nums2,$start,$end,$halfLen) &#123; //向下取整中位数 $mid = intval(($start+$end)/2); $poision = $halfLen - $mid-1; //这里临界值判断 if($start == $end) &#123; //偶数个 if((count($nums1)+count($nums2))%2==0) &#123; if($start == 0 ) &#123; if($nums1[$poision] &lt; $nums2[$mid])&#123; echo 1; return ($nums1[$poision] +(isset($nums1[$poision+1]) ? min($nums1[$poision+1], $nums2[$mid]) : $nums2[$mid]))/2; &#125; if($nums1[$poision] &gt; $nums2[$mid]) &#123; echo 2; return (($nums1[$poision] + (isset($nums1[$poision-1]) ? max($nums1[$poision-1], $nums2[$mid]) : $nums2[$mid]) )/2); &#125; &#125; if($start == (count($nums2) -1)) &#123; //都是临界值时 if($nums1[$poision] &gt; $nums2[$mid]) &#123; echo 3; return (($nums1[$poision] + (isset($nums1[$poision-1]) ? max($nums1[$poision-1], $nums2[$mid]) : $nums2[$mid]) )/2); &#125; if($nums1[$poision] &lt; $nums2[$mid]) &#123; echo 9; return ($nums1[$poision] +(isset($nums1[$poision+1]) ? min($nums1[$poision+1], $nums2[$mid]) : $nums2[$mid]))/2; &#125; &#125; echo 5; return ((isset($nums1[$poision+1]) ? min($nums2[$mid], $nums1[$poision+1]) : $nums2[$mid]) + $nums1[$poision])/2; &#125; else &#123; //基数个 if($start == 0 ) &#123; if($nums1[$poision] &gt; $nums2[$mid])&#123; echo 6; return $nums2[$mid]; &#125; echo 11; return $nums1[$poision]; &#125; if($start == count($count2)-1) &#123; if($start == $halfLen &amp;&amp; $nums1[$poision] &lt; $nums2[$mid]) &#123; echo 7; return $nums1[$poision]; &#125; echo 8; return $nums1[$poision]; &#125; echo 10; echo $poision.\"\\n\"; echo $mid.\"\\n\"; return $nums1[$poision]; &#125; &#125; //比对中位数 if($nums2[$mid] &lt; $nums1[$poision]) &#123; $ret = $this-&gt;Bsearch($nums1, $nums2, (($mid+1 &gt; $end) ? $end : $mid+1), $end, $halfLen); &#125; elseif($nums2[$mid] &gt; $nums1[$poision]) &#123; $ret = $this-&gt;Bsearch($nums1,$nums2,$start ,(($mid-1 &lt; $start) ? $start : $mid-1), $halfLen); &#125;elseif($nums2[$mid] == $nums1[$poision]) &#123; $ret = $nums2[$mid]; &#125; return $ret; &#125; &#125;","tags":[{"name":"算法","slug":"算法","permalink":"http://yoursite.com/tags/算法/"}]},{"title":"算法-水壶问题","date":"2018-01-23T07:45:13.000Z","path":"2018/01/23/算法-水壶问题/","text":"问题英文You are given two jugs with capacities x and y litres. There is an infinite amount of water supply available. You need to determine whether it is possible to measure exactly z litres using these two jugs. If z liters of water is measurable, you must have z liters of water contained within one or both buckets by the end. Operations allowed: Fill any of the jugs completely with water.Empty any of the jugs.Pour water from one jug into another till the other jug is completely full or the first jug itself is empty.Example 1: (From the famous “Die Hard” example) Input: x = 3, y = 5, z = 4Output: TrueExample 2: Input: x = 2, y = 6, z = 5Output: False 中文有两个容量分别为 x升 和 y升 的水壶以及无限多的水。请判断能否通过使用这两个水壶，从而可以得到恰好 z升 的水？ 如果可以，最后请用以上水壶中的一或两个来盛放取得的 z升 水。 你允许： 装满任意一个水壶清空任意一个水壶从一个水壶向另外一个水壶倒水，直到装满或者倒空示例 1: (From the famous “Die Hard” example) 输入: x = 3, y = 5, z = 4输出: True示例 2: 输入: x = 2, y = 6, z = 5输出: False 分析需要满足条件：1.两个杯子，如果z&gt;x+y说明两个杯子无法满足。2.如果z=0，则直接返回true;3.如果a||b有一个为0，则另一个一个不等于z时返回false4.ax+by=z,根据这个公式可知，如果z是a,b的最大公约数的整数倍。 所以该问题可以转化为 z%gcd(x,y) == 0的问题。 疑问以为一定要是gcd，而不能是公约数呢？(裴蜀定理)如何证明？？？ 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445class Solution &#123; function canMeasureWater($x, $y, $z) &#123; //排除为0的情况 if($z == 0) &#123; return true; &#125; if($x == 0 &amp;&amp; $y == 0) &#123; return false; &#125; //设$x为大 $y为小 if($x&lt;$y) &#123; $x = $x+$y; $y= $x-$y; $x = $x - $y; &#125; if($x &lt; 0) &#123; return ($y==$z); &#125; if($y != 0) &#123; if($z==$x || $z==$y|| $x+$y==$z || $x-$y == $z) &#123; return true; &#125; if($x+$y&lt; $z) &#123; return false; &#125; while($x%$y != 0) &#123; $tmp = $x; $x = $y%$x; $y = $tmp; &#125; return ($z%$y==0); &#125; else &#123; if($z%$x==0) &#123; return true; &#125; &#125; return false; &#125;&#125;","tags":[{"name":"算法","slug":"算法","permalink":"http://yoursite.com/tags/算法/"}]},{"title":"算法-俄罗斯套娃问题","date":"2018-01-17T03:14:20.000Z","path":"2018/01/17/算法-俄罗斯套娃问题/","text":"题目英文You have a number of envelopes with widths and heights given as a pair of integers (w, h). One envelope can fit into another if and only if both the width and height of one envelope is greater than the width and height of the other envelope. What is the maximum number of envelopes can you Russian doll? (put one inside other) Note:Rotation is not allowed. Example: Input: [[5,4],[6,4],[6,7],[2,3]]Output: 3Explanation: The maximum number of envelopes you can Russian doll is 3 ([2,3] =&gt; [5,4] =&gt; [6,7]). 中文给定一些标记了宽度和高度的信封，宽度和高度以整数对形式 (w, h) 出现。当另一个信封的宽度和高度都比这个信封大的时候，这个信封就可以放进另一个信封里，如同俄罗斯套娃一样。 请计算最多能有多少个信封能组成一组“俄罗斯套娃”信封（即可以把一个信封放到另一个信封里面）。 说明:不允许旋转信封。 思路 首先对数组进行基数排序（如果不排序，直接计算每个节点的套娃数会消耗大量时间） 遍历每个节点，计算每个节点最大套娃数 返回最大套娃数。 代码1234567891011121314151617181920212223242526class Solution &#123; function maxEnvelopes($envelopes) &#123; $nums = count($envelopes); if($nums &lt; 1) &#123; return 0; &#125; //实现基数排序 sort($envelopes); // var_dump($envelopes); $nums = count($envelopes); $dp[0] = 1; for($i = 1; $i &lt; $nums; $i++) &#123; $dp[$i] = 1; for($j = 0; $j&lt; $i; $j ++)&#123; if($envelopes[$i][0] &gt; $envelopes[$j][0] &amp;&amp; $envelopes[$i][1] &gt; $envelopes[$j][1]) &#123; $tmp = $dp[$j] +1; $dp[$i] = max($dp[$i], $tmp); &#125; &#125; &#125; return max($dp); &#125;&#125; 延伸php下的sort是如何实现？ 如何实现基数排序？","tags":[{"name":"算法","slug":"算法","permalink":"http://yoursite.com/tags/算法/"}]},{"title":"算法-求第k个排序","date":"2018-01-16T15:57:21.000Z","path":"2018/01/16/算法-求第k个排序/","text":"题目英文The set [1,2,3,…,n] contains a total of n! unique permutations. By listing and labeling all of the permutations in order, we get the following sequence for n = 3: “123”“132”“213”“231”“312”“321”Given n and k, return the kth permutation sequence. Note: Given n will be between 1 and 9 inclusive.Given k will be between 1 and n! inclusive.Example 1: Input: n = 3, k = 3Output: “213”Example 2: Input: n = 4, k = 9Output: “2314” 中文给出集合 [1,2,3,…,n]，其所有元素共有 n! 种排列。 按大小顺序列出所有排列情况，并一一标记，当 n = 3 时, 所有排列如下： “123”“132”“213”“231”“312”“321”给定 n 和 k，返回第 k 个排列。 说明： 给定 n 的范围是 [1, 9]。给定 k 的范围是[1, n!]。示例 1: 输入: n = 3, k = 3输出: “213”示例 2: 输入: n = 4, k = 9输出: “2314” 思路 排列的每一个位置都有一个固定的进位（如果当前数固定，可以有多少种排列），当k达到前进位是，则改位置加1。 从最左（进位最大）开始，依次用当前进位对k-1做除法（（k-1）/当前进位)，如果结果不为0，则用结果+当前能够使用的最小值，获得当前位置的值。 用余数当做k,按照第二步的思路，求其余位置的值。 ##代码12345678910111213141516171819202122232425262728char* getPermutation(int n, int k) &#123; char* result = (char*)malloc((n + 1) * sizeof(char)); bool* flag = (bool*)calloc(n, sizeof(bool)); int temp[10] = &#123; 0 &#125;; temp[n] = 1; temp[n - 1] = 1; int i = 0, t = 0, idx = 0, j = 0; for(i = n - 2; i &gt; 0; i--) temp[i] = temp[i + 1] * (n - i); for(i = 1; i &lt;= n; i++) &#123; t = (k - 1) / temp[i]; idx = t; for(j = 1; j &lt;= n; j++) &#123; //第j小未使用的数，j为上述计算得来。 if(!flag[j]) &#123; t--; if(t == -1) break; &#125; &#125; result[i - 1] = '0' + j; flag[j] = true; k -= idx * temp[i]; &#125; result[n] = '\\0'; free(flag); return result;&#125;","tags":[{"name":"算法","slug":"算法","permalink":"http://yoursite.com/tags/算法/"}]},{"title":"算法-三角形最小路径和","date":"2018-01-15T08:51:56.000Z","path":"2018/01/15/算法-三角形最小路径和/","text":"题目思路代码12345678910111213141516171819202122232425262728char* getPermutation(int n, int k) &#123; char* result = (char*)malloc((n + 1) * sizeof(char)); bool* flag = (bool*)calloc(n, sizeof(bool)); int temp[10] = &#123; 0 &#125;; temp[n] = 1; temp[n - 1] = 1; int i = 0, t = 0, idx = 0, j = 0; for(i = n - 2; i &gt; 0; i--) temp[i] = temp[i + 1] * (n - i); for(i = 1; i &lt;= n; i++) &#123; t = (k - 1) / temp[i]; idx = t; for(j = 1; j &lt;= n; j++) &#123; //取当前最小的未使用的数值 if(!flag[j]) &#123; t--; if(t == -1) break; &#125; &#125; result[i - 1] = '0' + j; flag[j] = true; k -= idx * temp[i]; &#125; result[n] = '\\0'; free(flag); return result;&#125;","tags":[{"name":"算法","slug":"算法","permalink":"http://yoursite.com/tags/算法/"}]},{"title":"算法-最大子序和","date":"2018-01-14T13:43:04.000Z","path":"2018/01/14/算法-最大子序和/","text":"题目英文Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum. Example: Input: [-2,1,-3,4,-1,2,1,-5,4],Output: 6Explanation: [4,-1,2,1] has the largest sum = 6. 中文给定一个整数数组 nums ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。 思路 动态规划。 把求联系最大子序列转化为求当前节点与上一节点的最大值。 代码12345678910111213141516171819202122232425262728int maxSubArray(int* nums, int numsSize) &#123; if(numsSize == 0)&#123; return 0; &#125; if(numsSize &lt;=1)&#123; return *nums; &#125; int tmp = 0; int pre = *nums ; nums++; int ret = pre; for(int i = 1; i&lt; numsSize;i++) &#123; tmp = (pre + *nums) &gt; *nums ? (pre + *nums) : *nums; // printf(\"tmp:%d\\n\", tmp); if(tmp &gt; ret) &#123; ret = tmp; &#125; pre = tmp; nums++; &#125; return ret;&#125;","tags":[{"name":"算法","slug":"算法","permalink":"http://yoursite.com/tags/算法/"}]},{"title":"算法-求最大正方形面积","date":"2018-01-14T09:18:04.000Z","path":"2018/01/14/算法-求最大正方形面积/","text":"题目英文Given a 2D binary matrix filled with 0’s and 1’s, find the largest square containing only 1’s and return its area. Example: Input: 1 0 1 0 01 0 1 1 11 1 1 1 11 0 0 1 0 Output: 4 中文在一个由 0 和 1 组成的二维矩阵内，找到只包含 1 的最大正方形，并返回其面积。 思路 动态规划(主要用户将一个复杂的问题分解为多个建单的问题，求最优解时)。 声明一个空间和原有二位数据大小一样的二位数组(tmp[i][j])。 计算每一个节点最大正方形的边长，并存储与该节点（利用之前节点计算当前节点最大正方形边长）。 取tmp[i][j]得最大值的平凡返回。代码 第一版代码 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152class Solution &#123; function maximalSquare($matrix) &#123; $hight = count($matrix); if($hight&lt;1) &#123; return 0; &#125; $wide = 0; if($hight &gt; 0)&#123; $wide= count($matrix[0]); &#125; $ret = 0; for($i = 1; $i&lt;= $hight; $i++) &#123; $tmp = $this-&gt;getRet($matrix, $i, $hight, $wide); if($ret &lt;$tmp )&#123; $ret = $tmp; &#125; &#125; return $ret; &#125; public function getRet($matrix, $i, $hight, $wide) &#123; //起始点纵向坐标 for($h = 0; $h&lt;= $hight-$i; $h++ ) &#123; for($j = 0;$j &lt;= $wide-$i; $j++) &#123; //h 为起点高，j为起点宽。 $ret = 1; for($m = $h; $m &lt;$h + $i; $m++)&#123; for($k = $j; $k &lt; $j + $i; $k++)&#123; if($matrix[$m][$k] == 0) &#123; $ret = 0; break; &#125; &#125; if($ret == 0) &#123; break; &#125; &#125; if($ret == 1)&#123; return $i*$i; &#125; &#125; &#125; return 0; &#125; &#125; 用php跑测试用例，跑了2.5秒。😓 回头用c重写下试试。1待定 最优解123456789101112131415161718192021222324class Solution &#123; public int maximalSquare(char[][] matrix) &#123; /** dp[i][j]表示以第i行第j列为右下角所能构成的最大正方形边长, 则递推式为: dp[i][j] = 1 + min(dp[i-1][j-1], dp[i-1][j], dp[i][j-1]); **/ int m = matrix.length; if(m &lt; 1) return 0; int n = matrix[0].length; int max = 0; int[][] dp = new int[m+1][n+1]; for(int i = 1; i &lt;= m; ++i) &#123; for(int j = 1; j &lt;= n; ++j) &#123; if(matrix[i-1][j-1] == '1') &#123; dp[i][j] = 1 + Math.min(dp[i-1][j-1], Math.min(dp[i-1][j], dp[i][j-1])); max = Math.max(max, dp[i][j]); &#125; &#125; &#125; return max*max; &#125;&#125;","tags":[{"name":"算法","slug":"算法","permalink":"http://yoursite.com/tags/算法/"}]},{"title":"二叉树最近公共祖先","date":"2018-01-10T14:59:11.000Z","path":"2018/01/10/算法-二叉树最近公共祖先/","text":"题目给定一个二叉树, 找到该树中两个指定节点的最近公共祖先。 百度百科中最近公共祖先的定义为：“对于有根树 T 的两个结点 p、q，最近公共祖先表示为一个结点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（一个节点也可以是它自己的祖先）。” 例如，给定如下二叉树: root = [3,5,1,6,2,0,8,null,null,7,4] 思路原有思路 查询有两个子节点有两个目标节点的节点。 然后查询当前节点的左右子节点，如果有一个子节点的子节点只包含一个目标节点，则他的父节点则为最近公共祖先。 改良后思路 目标节点一定存在于当前树。 中序遍历所有节点，如果当前接电接点或者其子节点匹配到了目标节点，则返回当前节点。 如果当前节点的左右节点分别匹配到了一个目标节点（root == null || p || q 直接返回root），则当前节点是最近公共祖先。代码 原版代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263int leftFist(struct TreeNode* root, struct TreeNode* p, struct TreeNode* q) &#123; int ret = 0; if(root-&gt;left) &#123; ret = ret + leftFist(root-&gt;left, p, q); &#125; if(root-&gt;right)&#123; ret = ret+ leftFist(root-&gt;right, p, q); &#125; if(root == p) &#123; ret +=1; &#125; if(root == q) &#123; ret +=1; &#125; return ret;&#125;/** * Definition for a binary tree node. * struct TreeNode &#123; * int val; * struct TreeNode *left; * struct TreeNode *right; * &#125;; */struct TreeNode* lowestCommonAncestor(struct TreeNode* root, struct TreeNode* p, struct TreeNode* q) &#123; struct TreeNode* retRoot = NULL ; int retSum = leftFist(root, p, q); if(retSum == 2) &#123; int retSumleft = NULL; if(root-&gt;left) &#123; retSumleft = leftFist(root-&gt;left, p, q); &#125; if(0 &lt; retSumleft &amp;&amp; retSumleft &lt; 2) &#123; // printf(\"retSumleft:%d,\", root-&gt;left-&gt;val); return root; &#125; int retSumright = NULL; if(root-&gt;right) &#123; retSumright = leftFist(root-&gt;right, p, q); &#125; if(0 &lt; retSumright &amp;&amp; retSumright&lt; 2) &#123; // printf(\"retSumright:%d\", root-&gt;right-&gt;val); return root; &#125; &#125; if(root-&gt;left) &#123; retRoot = lowestCommonAncestor(root-&gt;left, p, q); if(retRoot) &#123; return retRoot; &#125; &#125; if(root-&gt;right)&#123; retRoot = lowestCommonAncestor(root-&gt;right, p, q); if(retRoot) &#123; return retRoot; &#125; &#125; return retRoot;&#125; c语言让我跑了1888ms。。 优化解12345678910111213141516171819/** * Definition for a binary tree node. * struct TreeNode &#123; * int val; * struct TreeNode *left; * struct TreeNode *right; * &#125;; */struct TreeNode* lowestCommonAncestor(struct TreeNode* root, struct TreeNode* p, struct TreeNode* q) &#123; if(root == NULL || root == p || root == q) &#123; return root; &#125; struct TreeNode* left = lowestCommonAncestor(root-&gt;left, p ,q); struct TreeNode* right = lowestCommonAncestor(root-&gt;right, p ,q); if(left == NULL &amp;&amp; right == NULL) return NULL; if(left != NULL &amp;&amp; right != NULL) return root; return (left == NULL ? right : left);&#125; 12ms","tags":[{"name":"算法","slug":"算法","permalink":"http://yoursite.com/tags/算法/"}]},{"title":"合并k个链表","date":"2018-01-10T08:09:18.000Z","path":"2018/01/10/算法-合并k个链表/","text":"题目合并 k 个排序链表，返回合并后的排序链表。请分析和描述算法的复杂度。 示例: 输入:[ 1-&gt;4-&gt;5, 1-&gt;3-&gt;4, 2-&gt;6]输出: 1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4-&gt;5-&gt;6 分析 如果理由最后选择进行合并链表，这是时间复杂度是kn如果 k 很大的时候时间复杂度简直爆炸，还不如直接合并。 如果使用归并排序 时间复杂度是nlogk。 如果直接两两暴力合并，时间复杂度是n(k^2+k)/2 所以当k很大的时候，最优解应该是并归。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172struct ListNode* merge(struct ListNode* l1, struct ListNode* l2)&#123; struct ListNode* l3 = NULL; struct ListNode* p = NULL; struct ListNode* tmp = NULL; if(!l1 &amp;&amp; !l2) &#123; return l3; &#125; if(l1 &amp;&amp; !l2) &#123; return l1; &#125; if(!l1 &amp;&amp; l2) &#123; return l2; &#125; //设置头结点 if(l1-&gt;val &lt; l2-&gt;val) &#123; l3 = l1; l1 = l1-&gt;next; &#125; else &#123; l3 = l2; l2 = l2-&gt;next; &#125; p = l3; while(l1 &amp;&amp; l2) &#123; if(l1-&gt;val &lt; l2-&gt;val) &#123; tmp = l1-&gt;next; p-&gt;next = l1; l1 = tmp; &#125; else &#123; tmp = l2-&gt;next; p-&gt;next = l2; l2 = tmp; &#125; p = p-&gt;next; &#125; if(l1) &#123; p-&gt;next = l1; &#125; if(l2) &#123; p-&gt;next = l2; &#125; return l3;&#125;/** * Definition for singly-linked list. * struct ListNode &#123; * int val; * struct ListNode *next; * &#125;; */struct ListNode* mergeKLists(struct ListNode** lists, int listsSize) &#123; if(listsSize == 0) &#123; return 0; &#125; if(listsSize == 1) &#123; return (*lists); &#125; struct ListNode* ret = (*lists); for(int i = 1 ; i &lt; listsSize; i++) &#123; lists++; ret = merge((*lists), ret); &#125; return ret; &#125; 后记尝试寻找更优解法。","tags":[{"name":"算法","slug":"算法","permalink":"http://yoursite.com/tags/算法/"}]},{"title":"算法-链表相交(ntersection of Two Linked Lists)","date":"2018-01-08T09:11:56.000Z","path":"2018/01/08/算法-链表相交/","text":"题目编写一个程序，找到两个单链表相交的起始节点注意： 如果两个链表没有交点，返回 null. 在返回结果后，两个链表仍须保持原有的结构。 可假定整个链表结构中没有循环。 程序尽量满足 O(n) 时间复杂度，且仅用 O(1) 内存。 思路架设存在两个链表 headA headB。定义两个指针 a b分别对应headA headB, 循环a b 直至到达链表的尾部，然后将a指向headB、将b指向headA ,继续循环直至出现a==b的情况，或者任意一个链表到达终点。 代码1234567891011121314151617181920212223242526272829303132333435363738394041424344454647/** * Definition for singly-linked list. * struct ListNode &#123; * int val; * struct ListNode *next; * &#125;; */struct ListNode *getIntersectionNode(struct ListNode *headA, struct ListNode *headB) &#123; struct ListNode *a = headA; struct ListNode *b = headB; int aDone =0; int bDone =0; while(1) &#123; if(a == b) &#123; return a; &#125; if(a &amp;&amp; a-&gt;next) &#123; a = a-&gt;next; &#125; else &#123; if(aDone != 1) &#123; a = headB; aDone = 1; &#125; else &#123; break; &#125; &#125; if(b &amp;&amp; b-&gt;next ) &#123; b = b-&gt;next; &#125; else &#123; if(bDone != 1) &#123; b = headA; bDone =1; &#125; else &#123; break; &#125; &#125; &#125; return NULL; &#125;","tags":[{"name":"算法","slug":"算法","permalink":"http://yoursite.com/tags/算法/"}]},{"title":"如何建立一个composer私有包","date":"2017-09-28T09:11:00.000Z","path":"2017/09/28/如何建立一个composer私有包/","text":"最近发现分布式锁在很多项目都有所用到,所以想把之前完成的代码封装成pear包,供大家使用。但是发现自己对composer并不是很熟悉,所以学习一番,在此记录以防自己忘记。 新建仓库$ git clone git@gitlab.renrenche.com:web/jugg.git$ cd jugg conmposer 初始化composer init 123456789101112131415161718//包名Package name (&lt;vendor&gt;/&lt;name&gt;) [lijian/test_composer]: jugg/jugg//描述Description []: 基于redis的分布式锁//作者Author [, n to skip]: Maxie lj &lt;xiaolijian110@163.com&gt;//最小稳定版本Minimum Stability []: dev//遵循协议License []: MIT//依赖Would you like to define your dependencies (require) interactively [yes]? yesSearch for a package: phpEnter the version constraint to require (or leave blank to use the latest version):Using version ^7.0 for php 生成composer.json文件 12345678910111213141516171819&#123; \"name\": \"jugg/jugg\", \"description\": \"基于redis的分布式锁\", \"type\": \"library\", \"require\": &#123; \"php\": \"^7.0\" &#125;, \"require-dev\": &#123; \"php\": \"7\" &#125;, \"license\": \"MIT\", \"authors\": [ &#123; \"name\": \"Maxie lj\", \"email\": \"xiaolijian110@163.com\" &#125; ], \"minimum-stability\": \"dev\"&#125; 生成自动加载（psr-4）在composer.json 文件里添加123456789101112131415161718&#123; \"name\": \"jugg/jugg\", \"description\": \"基于redis的分布式锁\", \"type\": \"library\", \"license\": \"MIT\", \"authors\": [ &#123; \"name\": \"Maxie lj\", \"email\": \"xiaolijian110@163.com\" &#125; ], \"autoload\": &#123; \"psr-4\": &#123; \"Jugg\\\\\": \"jugg\" &#125; &#125;, \"minimum-stability\": \"dev\"&#125; 执行composer install 就会生成一个自动加载文件 然后我们就可以按照psr-4规范开发我们pear包了。 测试我们可以在测试文件里引入autoload.php文件,这样就实现了自动加载。 1require './vendor/autoload.php'; 这样就可以正常的测试了 上传代码到gitlab或者github当我们开完的时候,需要将我们的代码上传到远程代码库。 需要注意的事 一定不要讲.git文件上传。 其他项目引入因为没有上传到pagelist,所以我们暂时是公司私有包。 如果需要再项目里引入私有包,需要在项目的composer.json文件里添加。 1234567891011121314151617\"jugg\": &#123; \"type\":\"package\", \"package\": &#123; \"name\": \"jugg\", \"version\": \"v1.1\", \"source\": &#123; \"type\": \"git\", \"url\": \"git@gitlab.renrenche.com:web/jugg.git\", \"reference\": \"master\" &#125;, \"autoload\": &#123; \"psr-4\": &#123; \"Jugg\\\\\": \"jugg\" &#125; &#125; &#125; &#125; 完整文件: 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129&#123; \"name\": \"laravel/lumen\", \"description\": \"The Laravel Lumen Framework.\", \"keywords\": [ \"framework\", \"laravel\", \"lumen\" ], \"license\": \"MIT\", \"type\": \"project\", \"repositories\": &#123; \"packagist\": &#123; \"type\": \"composer\", \"url\": \"https://packagist.phpcomposer.com\" &#125;, \"0\": &#123; \"type\": \"package\", \"package\": &#123; \"name\": \"sdk/clusterproxy\", \"version\": \"1.0.3\", \"source\": &#123; \"type\": \"git\", \"url\": \"git@gitlab.renrenche.com:sdk/clusterproxy.git\", \"reference\": \"master\" &#125;, \"autoload\": &#123; \"psr-4\": &#123; \"Cluster\\\\\": \"src/Cluster\" &#125; &#125; &#125; &#125;, \"1\": &#123; \"type\": \"package\", \"package\": &#123; \"name\": \"sdk/dingtalk-alarm-php-sdk\", \"version\": \"1.0\", \"source\": &#123; \"type\": \"git\", \"url\": \"git@gitlab.renrenche.com:sdk/dingtalk-alarm-php-sdk.git\", \"reference\": \"master\" &#125;, \"autoload\": &#123; \"psr-4\": &#123; \"Rrc\\\\\": \"src/Rrc/\" &#125; &#125; &#125; &#125;, \"2\": &#123; \"type\":\"package\", \"package\": &#123; \"name\": \"sdk/prometheus-php-sdk\", \"version\": \"1.0\", \"source\": &#123; \"type\": \"git\", \"url\": \"git@gitlab.renrenche.com:sdk/prometheus-php-sdk.git\", \"reference\": \"master\" &#125;, \"autoload\": &#123; \"psr-4\": &#123; \"Rrc\\\\\": \"src/Rrc/\" &#125; &#125; &#125; &#125;, \"jugg\": &#123; \"type\":\"package\", \"package\": &#123; \"name\": \"jugg\", \"version\": \"v1.1\", \"source\": &#123; \"type\": \"git\", \"url\": \"git@gitlab.renrenche.com:web/jugg.git\", \"reference\": \"master\" &#125;, \"autoload\": &#123; \"psr-4\": &#123; \"Jugg\\\\\": \"jugg\" &#125; &#125; &#125; &#125; &#125;, \"require\": &#123; \"php\": \"&gt;=7.0\", \"laravel/lumen-framework\": \"5.5.*\", \"vlucas/phpdotenv\": \"~2.2\", \"guzzlehttp/guzzle\": \"^6.2\", \"sdk/clusterproxy\": \"^1.0\", \"illuminate/redis\": \"^5.3\", \"peixinchen/mns\": \"^1.0\", \"mockery/mockery\": \"^0.9.5\", \"firebase/php-jwt\": \"^4.0\", \"sdk/dingtalk-alarm-php-sdk\": \"^1.0\", \"sdk/prometheus-php-sdk\": \"^1.0\", \"predis/predis\": \"^1.1\", \"solarium/solarium\": \"^3.8\", \"mongodb/mongodb\": \"^1.3\", \"jugg\": \"^1.0\" &#125;, \"require-dev\": &#123; \"fzaninotto/faker\": \"~1.4\", \"phpunit/phpunit\": \"~6.0\", \"mockery/mockery\": \"~0.9\", \"phpstan/phpstan\": \"^0.9.2\" &#125;, \"autoload\": &#123; \"psr-4\": &#123; \"Rrc\\\\\": \"./\" &#125; &#125;, \"autoload-dev\": &#123; \"classmap\": [ \"tests/\", \"database/\" ] &#125;, \"scripts\": &#123; \"post-root-package-install\": [ \"php -r \\\"copy('.env.example', '.env');\\\"\" ] &#125;, \"minimum-stability\": \"dev\", \"prefer-stable\": true, \"config\": &#123; \"optimize-autoloader\": true &#125;&#125; 然后执行composer require jugg&lt;包名&gt; 就可以引入到项目里了。","tags":[{"name":"composer","slug":"composer","permalink":"http://yoursite.com/tags/composer/"}]},{"title":"http各个状态码含义","date":"2017-02-12T09:07:24.000Z","path":"2017/02/12/http各个状态码含义/","text":"简介 200请求成功 301资源被转移 404请求资源不存在 500内部服务错误分类 状态码 含义 1xx 信息交换，指服务器收到请求，需要请求者继续操作，常见于ws协议 2xx 操作成功并且被处理，很常见 3xx 资源被转移 4xx 客户端错误，包含语法错误以及无法完成的请求 5xx 服务器错误，指服务器在处理过程中发生错误 详细介绍 状态码 含义 100 继续，客户端应该继续请求 101 切换协议，服务端根据客户端的请求切换协议。但是只能切换到更高的协议，例如切换到http新版协议 - - 200 请求成功 201 已创建。请求成功，并创建了资源 202 已接收。已接收请求，但是处理仍未完成 203 非授权信息。请求成功，但是返回的meta信息不在原始的服务器，而是一个副本 204 无内容。服务器成功处理，但未返回内容。 205 充值内容。服务器处理成功，用户应该充值文档视图。可通过此返回码清楚浏览器的表单域 206 部分内容。服务器成功处理了部分get请求 - - 300 多种选择。请求的资源可包括多个位置，相应可返回一个资源特征与地址的列表的列表用于用户终端选择 301 资源被永久移动。请求的资源已被永久的移动到新的URI，返回的信息包括新的URI，浏览器会自动定到新的URI。今后任何新的请求都应使用新的URI代替 302 临时移动。与301类似，但是资源资源只是被临时移动。客户端应继续使用URI 303 查看其它地址，与301类似。 304 未修改。所请求的资源未修改，不返回任何资源。这种请求一般发生在终端缓存请求数据状况下发生，请求时头信息会指出客户端希望返回指定日期修改之后的资源。如果返回304终端一般会加载本地缓存资源 305 使用代理。所请求的资源必须通过代理访问 - - 400 客户端请求语法错误，一般参数校验错误返回此状态码 401 要求请求用户进行身份校验 402 保留状态码 403 接受到客户端的请求，但是无法执行。一般指用户权限不够 404 服务器无法找到客户端所请求资源 405 客户端锁清秋的方法被禁止 406 服务器无法根据客户端请求的内容特性完成请求 407 请求要求代理身份认证，与401类似，单请求者应当使用代理进行授权 408 服务端等待客户端发送的请求时间过长，超时 414 请求的URI过长，服务器无法处理 415 服务端无法处理附带的媒体格式 - - 500 服务器内部错误，无法完成请求 501 服务器不支持请求功能，无法完成请求 502 作为网关或者代理工作的服务器尝试执行请求时，从远程服务器接收到了一个无效的响应 503 服务器超载或系统维护，暂时无法处理客户端的请求。延时的长度可包含在服务器的Retry-after头信息中 504 充当网关的服务器，无法及时从远端服务器获取请求 505 服务器不支持当前请求的HTTP协议，无法完成处理","tags":[{"name":"http","slug":"http","permalink":"http://yoursite.com/tags/http/"}]},{"title":"C语言多维数组传参问题","date":"2017-02-12T07:18:35.000Z","path":"2017/02/12/C语言多维数组传参问题/","text":"刷题遇到个问题，需要传递一个二维数组作为实参。函数如下 12int* spiralOrder(int** matrix, int matrixRowSize, int matrixColSize) &#123;&#125; 遇到的问题是如果我直接int matrix[3][3]声明，然后传递参数，在spiralOrder无法用matrix[3][3]的形式调用。代码如下 123456789101112int* spiralOrder(int** matrix, int matrixRowSize, int matrixColSize) &#123; int* ret; printf(\"matrix:%d\\n\",*(*(matrix+0)+2)); printf(\"matrix:%d\\n\", matrix[2][2]); return ret;&#125;int main()&#123; int c[3][3] = &#123; &#123;1,2,3&#125; , &#123;4,5,6&#125;, &#123;7,8,9&#125;&#125;; spiralOrder((int**)c, 3, 3);&#125; 在spiralOrder打印的时候报错如下： 当然c primer也明确指出，数组当做实参传递时，当做指针处理。所以说上述问题在于把数组当成二重指针处理当然没法处理了。以为数组可以当做指针，其实二维数组也是可以当做指针。那么二维数组如何作为实参传递呢？ 方法一 多维数组以指向 0 号元素的指针方式传递。多维数组的 元素本身就是数组。除了第一维以外的所有维的长度都是元素类型的一部分，必须明确指定.—C++ Primer 代码12345678910void spiralOrder1(int matrix[][3], int matrixRowSize, int matrixColSize) &#123; printf(\"matrix:%d\\n\", matrix[0][0]); printf(\"matrix:%d\\n\", matrix[1][1]); printf(\"matrix:%d\\n\", matrix[2][2]); return ;&#125;int main()&#123; int c[3][3] = &#123; &#123;1,2,3&#125; , &#123;4,5,6&#125;, &#123;7,8,9&#125;&#125;; spiralOrder1(c, 3, 3);&#125; 因为形参是(int matrix[][3]所以编译器知道它按照二维数组的方式寻址。 返回结果 方法二——指针的形式123456789void spiralOrder1(int* matrix, int matrixRowSize, int matrixColSize) &#123; printf(\"matrix:%d\\n\", matrix[0]); return ;&#125;int main()&#123; int c[3][3] = &#123; &#123;1,2,3&#125; , &#123;4,5,6&#125;, &#123;7,8,9&#125;&#125;; spiralOrder1((int*)c, 3, 3);&#125; 所以当形参是int*的情况下，二维数组可以通过[i]的形式访问，也可以通过(ij+j)(规整的二维数组)的方式访问，其中i、j可以通过传参的形式传入。原因是直接定义的数组是在程序的堆栈区，数据占用连续的空间，所以可以使用上述方式寻址。 方法三如果上述都不满足需求的话，还有一种方式——通过二级指针的形式。 代码12345678910111213141516171819202122int* spiralOrder(int** matrix, int matrixRowSize, int matrixColSize) &#123; int* ret; printf(\"matrix:%d\\n\",*(*(matrix+0)+2)); printf(\"matrix:%d\\n\", matrix[2][2]); return ret;&#125;int main()&#123; int** a = (int**)malloc(sizeof(int*)*9); int** current = a; for(int i = 0; i &lt; 3; i++) &#123; int *tmp = (int*)malloc(sizeof(int)*3); *a = tmp; a++; for(int j = 0; j &lt; 3; j++) &#123; (*tmp) = j+i; tmp++; &#125; &#125; spiralOrder(current, 3, 3);&#125; 返回结果返回结果如果形参是二级指针的形式，可以通过[][]的形式访问数组，当然这里必须要控制二维数组范围。也可以通过*(*(matrix+0)+2))方式访问。是否可以像上一个方法中提到的 \b通过连续的内存地址 去访问？ 代码1234567891011121314151617181920212223int* spiralOrder(int** matrix, int matrixRowSize, int matrixColSize) &#123; int* ret; printf(\"matrix:%d\\n\", *(*(matrix+2))); printf(\"matrix:%d\\n\", *(*(matrix+4))); printf(\"matrix:%d\\n\", matrix[0]); return ret;&#125;int main()&#123; int** a = (int**)malloc(sizeof(int*)*9); int** current = a; for(int i = 0; i &lt; 3; i++) &#123; int *tmp = (int*)malloc(sizeof(int)*3); *a = tmp; a++; for(int j = 0; j &lt; 3; j++) &#123; (*tmp) = j+i; tmp++; &#125; &#125; spiralOrder(current, 3, 3);&#125; 返回结果 首先它是一个二维数组以一维数组的形式访问打印出来是一个内存地址。为什么*(*(matrix+2))打印出来是对的数值，而*(*(matrix+4))却是内存地址呢？ 因为malloc动态申请出来的数组是在系统的远堆上（far heap）,元素不是连续的，导致无法按照连续内存访问 最后一个问题那么二维数组和二级指针是什么关系呢？？？ 首先声明一个二维数组和一个二维指针，我们把它打印出来 代码123456789101112131415161718192021222324int main()&#123; int c[3][3] = &#123; &#123;1,2,3&#125; , &#123;4,5,6&#125;, &#123;7,8,9&#125;&#125;; int** a = (int**)malloc(sizeof(int*)*9); int** current = a; for(int i = 0; i &lt; 3; i++) &#123; int *tmp = (int*)malloc(sizeof(int)*3); *a = tmp; a++; for(int j = 0; j &lt; 3; j++) &#123; (*tmp) = j+i; tmp++; &#125; &#125; printf(\"current%p\\n\", current); printf(\"current0%p\\n\", current[0]); printf(\"c:%p\\n\", c); printf(\"c:%p\\n\", c+1); printf(\"c0:%p\\n\", c[0]); printf(\"c0:%p\\n\", c[0]+1); printf(\"c00:%d\\n\", c[0][0]); printf(\"c00:%p\\n\", &amp;c[0][0]);&#125; 返回结果 首先数组c存储的是一个占用两个int大小对象的地址。c[0]存储的是一个占用一个int大小对象的地址。因为c与c[0]存储的都是数组元素的首地址所以所以c与c[0]所存地址相同，但是他们所存储对象的大小不同。从输出的c+1和c[0]+1就可以看出来（这里的+1是指按照一个对象长度寻址） 再看看malloc申请出来的二级指针，压根current 与current[0]所存储的地址不一样，所以肯定无法像直接申请数组按照连续内存寻址找到所需数值。","tags":[{"name":"c语言","slug":"c语言","permalink":"http://yoursite.com/tags/c语言/"}]},{"title":"tcp三次握手与四次挥手","date":"2017-01-09T14:16:19.000Z","path":"2017/01/09/tcp三次握手与四次挥手/","text":"三次握手三次握手 是指tcp建立连接时候需要服务端和客户端发送三个网络包。三次握手的目的是链接与服务器端口，并建立tcp连接，并同步连接双方的序列号和确认号，并交换tcp窗口大小信息。 在tcp/ip协议中, tcp提供可靠的链接服务，采用三次握手建立一个链接，如上图所示。 第一次握手：建立连接时，客户端发送SYN包到服务器，同时进入SYN_SEND状态，等待服务器B确认。 第二次握手：服务器B收到SYN包，确认客户端的SYN(ACK+1),同时自己发送一个SYN包，此时服务器进入SYN_RECV状态。 第三次握手： 客户端收到服务器的SYN+ACK包，向服务器发送确认包（ACK+1）,此包发送完毕，客户端和服务端进入RESTABLISHED状态，完成三次握手。四次挥手tcp断开连接需要发送四个包，所以称之为 四次挥手,客户端和服务端都可以发起挥手。 由于TCP是全双工的，所以需要双向关闭。原则是当一方完成数据发送后就只能发送一个FIN来终止这个方向的链接。收到一个FIN只意味着这个一个方向没有数据发送，一个tcp链接收到一个FIN后仍然能发送数据。首先关闭的以防进行主动关闭，另外以防执行被动关闭。 主动方发送一个FIN,用来告诉被动方我发送完毕，请求关闭链接。 被动方收到主动方的FIN请求，会回发一个ACK(我知道了)，但是并没有统一关闭链接。 当被动方也发送完数据了，会发送一个FIN包，高速主动方我也发送完了。 主动方收到被动方的FIN包，回复ACK(确认收到)，此时tcp断开连接。","tags":[{"name":"网络","slug":"网络","permalink":"http://yoursite.com/tags/网络/"}]},{"title":"hexo git github搭建博客","date":"2016-01-02T13:48:07.000Z","path":"2016/01/02/hexo-git-github搭建博客/","text":"开始**需求环境 git git下载地址 node.js node.js下载地址 两个安装都是一路下一步 验证软件正确安装git --version node -v npm -v 如果显示版本信息，怎安装成功。 安装hexo在这里如果被墙的可以使用淘宝镜像cnpm 具体怎么操作可以自行百度，这里不多做解释。不过一般不会被墙，我使用npm。运行下边的命令安装hexo：被墙请使用命令： npm install -g cnpm --registry=https://registry.npm.taobao.org 以下是没有被墙的命令，被墙把npm换成cnpm即可。安装hexo npm install hexo-cli -g 安装完成后，验证是否安装成功。 hexo -v 新建文件夹yourblog,输入命令 $ hexo init blog $ cd blog 新建博客 $ hexo new &quot;Hello Hexo&quot; 生成静态页面 $ hexo generate 运行服务 $ hexo server 然后打开浏览器输入 localhost:4000 即可访问本地静态页面。 接下来我们把本地静态页面PUSH到github 首先你要有github账号。 新建一个github.io的库 设置本地github配置参数 经本地静态页面push到github github设置 新建github账号就不在这里陈述了，如果有同学不会使用git将代码push到github的话可以参考 廖雪峰的官网我们来直接进行第二不，创建一个github.io库。首先登陆我们的github账号点击new repository,然后输入youname.github.iogit设置设置git配置信息 $ git config --global user.name &quot;你的用户名&quot; $ git config --global user.email &quot;你的邮箱&quot; hexo 设置 安装hexo git插件 npm install hexo-deployer-git --save 然后打开博客根目录的_config.yml文件大致内容是这个样子的 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192# Hexo Configuration## Docs: https://hexo.io/docs/configuration.html## Source: https://github.com/hexojs/hexo/# Sitetitle: 和女票抢可乐subtitle:description:author: MaxieLjlanguage:timezone:# URL## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'url: http://yoursite.comroot: /permalink: :year/:month/:day/:title/permalink_defaults:# Directorysource_dir: sourcepublic_dir: publictag_dir: tagsarchive_dir: archivescategory_dir: categoriescode_dir: downloads/codei18n_dir: :langskip_render:# Writingnew_post_name: :title.md # File name of new postsdefault_layout: posttitlecase: false # Transform title into titlecaseexternal_link: true # Open external links in new tabfilename_case: 0render_drafts: falsepost_asset_folder: falserelative_link: falsefuture: truehighlight: enable: true line_number: true auto_detect: false tab_replace:# Category &amp; Tagdefault_category: uncategorizedcategory_map:tag_map:# Date / Time format## Hexo uses Moment.js to parse and display date## You can customize the date format as defined in## http://momentjs.com/docs/#/displaying/format/date_format: YYYY-MM-DDtime_format: HH:mm:ss# Pagination## Set per_page to 0 to disable paginationper_page: 10pagination_dir: page# Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: yilia# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git repository: https://github.com/MaxieLj/MaxieLj.github.io.git branch: masterjsonContent: meta: false pages: false posts: title: true date: true path: true text: true raw: false content: false slug: false updated: false comments: false link: false permalink: false excerpt: false categories: false tags: true 我们只需要在尾部添加：1234deploy: type: git repository: https://github.com/MaxieLj/MaxieLj.github.io.git branch: master 然后我们运行 $ hexo g 生成静态文件然后推送到github $ hexo d 然后访问youname.github.io就可以看到生成的静态页面了当然我们一般是在本地调试好再用 hexo d推送到github","tags":[{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/tags/hexo/"}]}]