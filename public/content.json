[{"title":"php闭包","date":"2018-08-25T06:50:55.000Z","path":"2018/08/25/php闭包/","text":"在看guzzle包的时候看大到了一段有意思的代码, 简化以后类似于下边: 123456789101112131415161718192021222324252627282930313233343536373839404142&lt;?php/*** */class test &#123; public $handler; public function __construct(callable $handler = null) &#123; $this-&gt;handler = $handler; &#125; public static function create(callable $handler) &#123; return new self($handler); &#125; public function __invoke($request,$options) &#123; $func = $this-&gt;handler; return $func($request, $options); &#125; public function test1() &#123; return [$this, 'exec1']; &#125; public function exec1($a,$b) &#123; echo ($a+$b); &#125;&#125;$test = new test();$obj = test::create($test-&gt;test1());$obj(1,4); php文档是这样描述闭包的 `PHP是将函数以string形式传递的。 可以使用任何内置或用户自定义函数，但除了语言结构例如：array()，echo，empty()，eval()，exit()，isset()，list()，print 或 unset()。 一个已实例化的 object 的方法被作为 array 传递，下标 0 包含该 object，下标 1 包含方法名。 在同一个类里可以访问 protected 和 private 方法。 静态类方法也可不经实例化该类的对象而传递，只要在下标 0 中包含类名而不是对象。自 PHP 5.2.3 起，也可以传递 ‘ClassName::methodName’。 除了普通的用户自定义函数外，也可传递 匿名函数 给回调参数。` 所以实例化的对象可以使用 [$obj,&#39;functionName&#39;] 当做闭包去传递。$obj = test::create($test-&gt;test1());将我们的test1方法赋值给新实例化的对象里。 魔术方法__invoke()表示: 当尝试以调用函数的方式调用一个对象时，__invoke() 方法会被自动调用。 所以我们调用$obj()函数时会调用到__invoke()里,最后调用到我们一开始注册的函数。","tags":[]},{"title":"php数组实现","date":"2018-08-20T12:00:08.000Z","path":"2018/08/20/php数组实现/","text":"要说php的数组,就不得不讲hashtable,以为php的数组是强依赖于hashtable实现的。一般 Times33的算法很简单，就是不断的乘33,下边是times33算法: Times33(hash)12345678910111213141516&lt;?phpfunction myHash($str) &#123; // hash(i) = hash(i-1) * 33 + str[i] $hash = 5381; $s = md5($str); //相比其它版本，进行了md5加密 $seed = 5; $len = 32;//加密后长度32 for ($i = 0; $i &lt; $len; $i++) &#123; // (hash &lt;&lt; 5) + hash 相当于 hash * 33 //$hash = sprintf(\"%u\", $hash * 33) + ord($s&#123;$i&#125;); //$hash = ($hash * 33 + ord($s&#123;$i&#125;)) &amp; 0x7FFFFFFF; $hash = ($hash &lt;&lt; $seed) + $hash + ord($s&#123;$i&#125;); &#125; return $hash &amp; 0x7FFFFFFF;&#125; 其中&lt;&lt; 表示左移,每次左移表示x2例如: 1234&lt;?php$num = 2;echo $num &lt;&lt; 2; 所以($hash &lt;&lt; $seed)表示 $hash 32 ,同时加上$hash,也就表示 $hash 33了。ord()函数返回字符串的首个字符的 ASCII 值。最后$hash &amp; 0x7FFFFFFF 表示与整形的最大值与操作(0x7FFFF111FFF二进制为1111111111111111111111111111),这个与操作会截取超过整形二进制部分,所以times33计算出来的值不会超过整形的最大值。 为什么要用hashtable实现php数组?因为散列表是根据关键建码值直接进项访问的数据结构。在key和value之间有一个映射函数,可以根据key直接索引到对应的value值,它并不会使用一般的对比操作,而是直接使用内存的起始位置和偏移位置进行寻址,所以会比正常的寻址要快。 散列表结构123456789101112131415161718192021struct _zend_array &#123; zend_refcounted_h gc; union &#123; struct &#123; ZEND_ENDIAN_LOHI_4( zend_uchar flags, zend_uchar nApplyCount, zend_uchar nIteratorsCount, zend_uchar reserve) &#125; v; uint32_t flags; &#125; u; uint32_t nTableMask; Bucket *arData; uint32_t nNumUsed; uint32_t nNumOfElements; uint32_t nTableSize; uint32_t nInternalPointer; zend_long nNextFreeElement; dtor_func_t pDestructor;&#125;; 主要字段介绍: gc 引用次数,垃圾回收时会用到。 union u 就不介绍了。 arData 存储元素的数组,内存是连续的,arData指向第一个元素。 nTableMask nTableSize的负数。 nTableSize 数组长度,为2的n此房。 nNumUsed 当前使用的Bucket数。 nNumOfElements 当前所有的Bucket数。 nNextFreeElement 下一个被使用的Bucket($a[] = ‘’) pDestructor 删除某个元素是会使用 Bucket结构12345typedef struct _Bucket &#123; zval val; zend_ulong h; /* hash value (or numeric index) */ zend_string *key; /* string key or NULL for numerics */&#125; Bucket; h hash出来的值(times33) *key 存储元素的key val 具体值,是个zval 如何实现php中实现散列表实现主要使用存储元素数组和 映射函数（也可以称作散列函数）和映射表 举个具体的栗子: 如果我们要在php代码中声明一个数组会发生什么?下边分析下php是如何实现数组的。 123456&lt;?php$arr= [ 'a' =&gt; '111', 'b' =&gt; '222', 'c' =&gt; 'ccc']; 首先肯定是初始化。 接下来将每个元素对应的值依照顺序拷贝到 Bucket里。 然后利用映射函数对求值,根据算出来的值将其对应的bucket的地址写到该值对应的映射这表里。 具体操作如下图: 当然我们这里的映射是理想映射,因为在映射的计算过程中可能存在冲突,后续会介绍映射函数,以及如何解映射函数计算后的冲突。 初始化1234567891011121314ZEND_API void ZEND_FASTCALL _zend_hash_init(HashTable *ht, uint32_t nSize, dtor_func_t pDestructor, zend_bool persistent ZEND_FILE_LINE_DC)&#123; GC_REFCOUNT(ht) = 1; //设置引用次数 GC_TYPE_INFO(ht) = IS_ARRAY; //设置数据类型 ht-&gt;u.flags = (persistent ? HASH_FLAG_PERSISTENT : 0) | HASH_FLAG_APPLY_PROTECTION | HASH_FLAG_STATIC_KEYS; ht-&gt;nTableMask = HT_MIN_MASK; HT_SET_DATA_ADDR(ht, &amp;uninitialized_bucket); ht-&gt;nNumUsed = 0; ht-&gt;nNumOfElements = 0; ht-&gt;nInternalPointer = HT_INVALID_IDX; ht-&gt;nNextFreeElement = 0; ht-&gt;pDestructor = pDestructor; ht-&gt;nTableSize = zend_hash_check_size(nSize);&#125; 初始化的时候主要是对hashtable中各个成员的进行初始化设置,而且在这个时候不会给arData分配内存,只有在开始插入数据的时候才会为arData分配内存。 映射函数映射函数其实就是一次hash操作和和一次|操作.hash操作就是上边锁提到得到times33操作,|操作是计算出来的hash值与nTableSize进行计算。1nIndex = ket-&gt;h | nTableMask; 因为nTableMask是nTableSize的负数,所以计算出来的nIndex值区间应该为[-1,nTableMask]。 此处待补充 为什么会在[-1, nTableMask] 区间内。 写入数据在初始化的时候并不会对arData分配内存,只有在写入的时候才会真正分配内存 12345678910111213141516171819202122232425262728static void zend_always_inline zend_hash_real_init_ex(HashTable *ht, int packed)&#123; HT_ASSERT(GC_REFCOUNT(ht) == 1); ZEND_ASSERT(!((ht)-&gt;u.flags &amp; HASH_FLAG_INITIALIZED)); if (packed) &#123; HT_SET_DATA_ADDR(ht, pemalloc(HT_SIZE(ht), (ht)-&gt;u.flags &amp; HASH_FLAG_PERSISTENT)); (ht)-&gt;u.flags |= HASH_FLAG_INITIALIZED | HASH_FLAG_PACKED; HT_HASH_RESET_PACKED(ht); &#125; else &#123; (ht)-&gt;nTableMask = -(ht)-&gt;nTableSize; HT_SET_DATA_ADDR(ht, pemalloc(HT_SIZE(ht), (ht)-&gt;u.flags &amp; HASH_FLAG_PERSISTENT)); (ht)-&gt;u.flags |= HASH_FLAG_INITIALIZED; if (EXPECTED(ht-&gt;nTableMask == -8)) &#123; Bucket *arData = ht-&gt;arData; HT_HASH_EX(arData, -8) = -1; HT_HASH_EX(arData, -7) = -1; HT_HASH_EX(arData, -6) = -1; HT_HASH_EX(arData, -5) = -1; HT_HASH_EX(arData, -4) = -1; HT_HASH_EX(arData, -3) = -1; HT_HASH_EX(arData, -2) = -1; HT_HASH_EX(arData, -1) = -1; &#125; else &#123; HT_HASH_RESET(ht); &#125; &#125;&#125; 分配具体的内存 12#define HT_SIZE_EX(nTableSize, nTableMask) \\ (HT_DATA_SIZE((nTableSize)) + HT_HASH_SIZE((nTableMask))) 12345#define HT_HASH_SIZE(nTableMask) \\ (((size_t)(uint32_t)-(int32_t)(nTableMask)) * sizeof(uint32_t))#define HT_DATA_SIZE(nTableSize) \\ ((size_t)(nTableSize) * sizeof(Bucket)) 可以看到在分配具体分配内存的时候会分配 nTableSize(Bucket+uint32_t)大小的内存。讲道理只需要分配nTableSizeBucket大小内存就可以了,为什么会多余出来 nTableSizeuint32_t内存呢?因为nTableSizeuint32_t就是映射表所占内存大小。所以说Bucket会和映射表一次申请内存。写完成写入操作以后会将*arData 指向第一个Bucket。 具体在内存里的结果如图所示: 映射表在初始化的时候所有值都是-1,只有在被赋值时候会写入对应Bucket所在链表的偏移量。;ht-&gt;arData 指向第一个Bucket的位置,在赋值的时候会按照列表顺序,将值写入Bucket的value里,然后会根据映射函数算出值当做偏移量找到对应映射表的元素,然后将当前Bucket写入此元素。 ps nTableSize 为2的次方倍。 冲突如果nIndex = ket-&gt;h | nTableMask 算出来的值冲突了怎么办? 首先映射表的每个元素不是链表,所以导致无法存储多个元素。在php中是这样处理冲突的:首先映射表的所有元素初始化值为 -1 ,当前如果用冲突会将新算出来的值对应的Bucket覆盖原来旧的Bucket,然后将旧的Bucket迁移到新的Bucket,并将旧的Bucket的u2.next(默认为-1) 指向新Bucket。 如图 查找php再查找一个数组元素是,首先会根据其key 获取到计算后hash值’ket-&gt;h’,然后根据映射函数算出当前元素在映射表中的偏移量,利用当前位置+偏移量找到映射表的元素,再根据其内的偏量找到对应Bucket链表的首个元素位置,最后遍历该链表核对key值,找到对应的值。 具体实现函数:12345678910111213141516171819202122232425static zend_always_inline Bucket *zend_hash_find_bucket(const HashTable *ht, zend_string *key)&#123; zend_ulong h; uint32_t nIndex; uint32_t idx; Bucket *p, *arData; h = zend_string_hash_val(key); arData = ht-&gt;arData; nIndex = h | ht-&gt;nTableMask; idx = HT_HASH_EX(arData, nIndex); while (EXPECTED(idx != HT_INVALID_IDX)) &#123; p = HT_HASH_TO_BUCKET_EX(arData, idx); if (EXPECTED(p-&gt;key == key)) &#123; /* check for the same interned string */ return p; &#125; else if (EXPECTED(p-&gt;h == h) &amp;&amp; EXPECTED(p-&gt;key) &amp;&amp; EXPECTED(ZSTR_LEN(p-&gt;key) == ZSTR_LEN(key)) &amp;&amp; EXPECTED(memcmp(ZSTR_VAL(p-&gt;key), ZSTR_VAL(key), ZSTR_LEN(key)) == 0)) &#123; return p; &#125; idx = Z_NEXT(p-&gt;val); &#125; return NULL;&#125; 扩容数组的容量在初始化的时候已经确定了大小,就是nTableSize。当然映射函数也是根据 nTableMask 来计算的。所以我们扩容时候必须重新计算索引,也就是映射表里的值。具体扩容规则:首先当需要扩容时,会计算当前Bucket链表里删除元素数量占总表元素数量的比例,如果没有超过阈值则申请分配一个原来数组大小两倍的新素组,把元素复制到新数组上,然后重新建立索引。 阈值判断:1ht-&gt;nNumUsed &gt; ht-&gt;nNumOfElements + (ht-&gt;nNumOfElements &gt;&gt; 5 处理过程:12345678910111213141516171819202122232425262728static void ZEND_FASTCALL zend_hash_do_resize(HashTable *ht)&#123; IS_CONSISTENT(ht); HT_ASSERT(GC_REFCOUNT(ht) == 1); if (ht-&gt;nNumUsed &gt; ht-&gt;nNumOfElements + (ht-&gt;nNumOfElements &gt;&gt; 5)) &#123; /* additional term is there to amortize the cost of compaction */ HANDLE_BLOCK_INTERRUPTIONS(); zend_hash_rehash(ht); HANDLE_UNBLOCK_INTERRUPTIONS(); &#125; else if (ht-&gt;nTableSize &lt; HT_MAX_SIZE) &#123; /* Let's double the table size */ void *new_data, *old_data = HT_GET_DATA_ADDR(ht); uint32_t nSize = ht-&gt;nTableSize + ht-&gt;nTableSize; Bucket *old_buckets = ht-&gt;arData; HANDLE_BLOCK_INTERRUPTIONS(); new_data = pemalloc(HT_SIZE_EX(nSize, -nSize), ht-&gt;u.flags &amp; HASH_FLAG_PERSISTENT); ht-&gt;nTableSize = nSize; ht-&gt;nTableMask = -ht-&gt;nTableSize; HT_SET_DATA_ADDR(ht, new_data); memcpy(ht-&gt;arData, old_buckets, sizeof(Bucket) * ht-&gt;nNumUsed); pefree(old_data, ht-&gt;u.flags &amp; HASH_FLAG_PERSISTENT); zend_hash_rehash(ht); HANDLE_UNBLOCK_INTERRUPTIONS(); &#125; else &#123; zend_error_noreturn(E_ERROR, \"Possible integer overflow in memory allocation (%zu * %zu + %zu)\", ht-&gt;nTableSize * 2, sizeof(Bucket) + sizeof(uint32_t), sizeof(Bucket)); &#125;&#125; 在处理的过程中还会把已经删除的Bucket给删除。 具体的操作在zend_hash.c文件里。如果超过阈值,则会把已经删除Bucket移除,然后把又有后边的元素往前移动,不上空缺的Bucket,当然索引也会重建。 参考 time33 2.1 变量的内部实现","tags":[]},{"title":"php数据结构","date":"2018-08-19T12:30:34.000Z","path":"2018/08/19/php数据结构/","text":"变量php是如何统一实现各种变量类型的? 这和php变量类型的实现是密不可分的。一个变量主要有三个要素:变量名``变量类型``变量值,他们在php变量类型实现中主要对应 zval zend_value 和zend的各种数据类型。php中用$去声明一个变量,在声明的时候可以进行初始化,当然也可以不声明直接使用。一般来说,一个变量的定义包含两步:变量定义和变量初始化,在php中只定义不初始化是可以的。 变量结构体1234567891011121314151617181920212223// php zval结构struct _zval_struct &#123; zend_value value; 指向具体的value /* value */ union &#123; struct &#123; ZEND_ENDIAN_LOHI_4( zend_uchar type, /* active type */ zend_uchar type_flags, zend_uchar const_flags, zend_uchar reserved) /* call info for EX(This) */ &#125; v; uint32_t type_info; &#125; u1; union &#123; uint32_t var_flags; uint32_t next; /* hash collision chain */ uint32_t cache_slot; /* literal cache slot */ uint32_t lineno; /* line number (for ast nodes) */ uint32_t num_args; /* arguments number for EX(This) */ uint32_t fe_pos; /* foreach position */ uint32_t fe_iter_idx; /* foreach iterator index */ &#125; u2;&#125;; 变量类型其中type 表示当前变量的类型,例如string array int等,以下为php中全部变量类型。其中type 是一个无符号类型的char,他的定义是这样的1typedef unsigned char zend_uchar; 12345678910111213141516171819typedef union _zend_value &#123; zend_long lval; /* long value */ double dval; /* double value */ zend_refcounted *counted; zend_string *str; zend_array *arr; zend_object *obj; zend_resource *res; zend_reference *ref; zend_ast_ref *ast; zval *zv; void *ptr; zend_class_entry *ce; zend_function *func; struct &#123; uint32_t w1; uint32_t w2; &#125; ww; &#125; zend_value; 在这些类型里不存在boolean类型,因为在php7中已经将boolean拆分为true和false.直接保存在type中,也就是说boolean没有_zend_value结构,直接通过type字段就可以确定boolean的值。 从上边的结构体可以看出来 zend_long、double 类型不是指针类型,也就是说整形和浮点型正能进行深拷贝,并不能和其他说句类型一样进行 引用计数和写时复制。因为有引用计数和写时复制在变量赋值且不做修改时才能大量节省内存。 以string类型为例,它在php中的结构类型应该是这样的: _zend_string:123456struct _zend_string &#123; zend_refcounted_h gc; zend_ulong h; /* hash value */ size_t len; char val[1]; /*字符串起始地址*/&#125;; 其中gc 字段表示这个结构体被引用的次数,垃圾回收的时候会用到。 h 字符串通过Times33计算出来的hashcode len 字符串长度 val 字符串内容 我们在这里都会有疑问,为什么存储字符串内容的时候没有使用char*类型,而用了一个数组类型来存储。zend_string在申请内存的时候会会申请malloc(sizeof(zend_string)+字符串长度),且val[0]存的是字符串最后一个字符安“\\0” zend_string结构在内存中如下所示: 当时也在char val[1]的地方疑惑了很久,再往上找了很多文章,其中Nikita Popov(nikic，PHP 官方开发组成员，柏林科技大学的学生) 这样解释 1如果你对 C 语言了解的不是很深入的话，可能会觉得 val 的定义有些奇怪：这个声明只有一个元素，但是显然我们想存储的字符串长度肯定大于一个字符的长度。这里其实使用的是结构体的一个『黑』\b方法：在声明数组时只定义一个元素，但是实际创建 zend_string 时再分配足够的内存来存储整个字符串。这样我们还是可以通过 val 访问完整的字符串。 参考: Internal value representation in PHP 7 - Part 2 [译]变量在 PHP7 内部的实现（二） php内核分析——2.1 变量的内部实现","tags":[]},{"title":"php的引用","date":"2018-08-12T14:18:07.000Z","path":"2018/08/12/php的&符号/","text":"&amp;&amp;是php中的引用,他并不一种独立的数据类型,而是指向其他数据类型的数据结构,和C语言的指针类似。 具体作用为:当我们修改引用类型变量是,其修改的将作用于实际引用的变量上。 如果当我们使用&amp;符号生成一个引用变量时,首先会为&amp;操作生成一个zend_reference结构,zend_reference就是引用类型的结构体,他内嵌一个zval,然后此结构的体zval的value指向原来zval的value上。然后将原来zval的变量类型变为IS_REFERENCE,原来zval的value执行新创建zend_reference结构。索引&amp;的作用就是新生成zend_reference,然后将其指向原来的zval的value上,顺便把原来zval的变量类型变化为引用类型。 1234struct _zend_reference &#123; zend_refcondted_h gc; zval val; 指向原来的value.&#125;; 举个栗子12$a = &apos;test&apos;; //步骤1$b = &amp;$a; //步骤2 步骤1 现在$a = &#39;&#39;test是他们的数据结构指向为: 此时数据结构,一直指针指向是这个样子。 步骤2 也就是说PHP的引用在使用后新生成一个引用类型机构,然后将引用类型结构指向越来的value,最后将原来zval的value指向新生成的结构体,并将其变量类型变为引用类型,IS_REFERENCE。当然随之改变的还有计数。","tags":[]},{"title":"swagger","date":"2018-08-06T07:30:13.000Z","path":"2018/08/06/swagger/","text":"swagger 是什么鬼?swagger像是个接口生成、管理、mock、测试的框架。主要功能: 支持API自动生成同步的在线文档 这些文档可用于项目内部API审核 方便测试人员了解API 这些文档可作为客户产品文档的一部分进行发布 可以mock接口方便调试支持API规范生成代码，生成的客户端和服务器端骨架代码可以加速开发和测试速度##swagger-ui 一个是一个管理接口的服务,它可以根据swagger.json模拟接口返回。搭建swagger-ui 克隆swagger-ui git clone https://github.com/swagger-api/swagger-ui.git 配置nginx 服务 123456789101112131415161718192021222324252627282930313233server &#123; listen 8090; server_name www.swagger-ui.com; autoindex on; #charset koi8-r; # access_log logs/host.access.log main; root /Users/lijian/Desktop/code/web_code/swagger/swagger-ui/dist; location / &#123; index index.php index.html index.htm; try_files $uri $uri/ /index.php?$query_string; &#125; #error_page 404 /404.html; # redirect server error pages to the static page /50x.html # error_page 500 502 503 504 /50x.html; location = /50x.html &#123; root html; &#125; location ~ \\.php$ &#123; fastcgi_pass 127.0.0.1:9000; fastcgi_index index.php; fastcgi_split_path_info ^(.+\\.php)(/.+)$; fastcgi_param PATH_TRANSLATED $document_root$fastcgi_path_info; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; include fastcgi_params; &#125; &#125; 重启NGINXnginx -s reload 样子如下: swagger.jsonswagger.json,swagger-ui能够将swagger.json解析为对应的可处理的接口文档。 效果如上图所示。最终要的一点在于 http://localhost:8091/swagger.json该url为被解析的json地址。 当然如果我们需要管理不同项目的项目,可以单独配置个服务用来管理swagger.json。 swagger-phpgithub 地址: https://github.com/zircote/swagger-php 首先我们需要在项目里引入swagger-php 扩展包。 composer global require zircote/swagger-php 按照swagger文档写swagger备注:eg: 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465/** * @SWG\\Post( * path=&quot;/guestbook/appmsg&quot;, * summary=&quot;访客留言&quot;, * tags=&#123;&quot;new&quot;, &quot;guests&quot;&#125;, * description=&quot;访客留言&quot;, * operationId=&quot;appmsg&quot;, * @SWG\\Parameter( * description=&quot;msg&quot;, * format=&quot;string&quot;, * in=&quot;formData&quot;, * name=&quot;msg&quot;, * required=true, * type=&quot;string&quot;, * ), * @SWG\\Parameter( * description=&quot;email&quot;, * format=&quot;string&quot;, * in=&quot;formData&quot;, * name=&quot;email&quot;, * required=true, * type=&quot;string&quot;, * * ), * consumes=&#123;&quot;multipart/form-data&quot;, &quot;application/x-www-form-urlencoded&quot;&#125;, * produces=&#123;&quot;application/json&quot;&#125;, * @SWG\\Response( * response=&quot;200&quot;, * description=&quot;返回成功&quot;, * ), * ) * *//** * @SWG\\Get( * path=&quot;/get/feedback&quot;, * summary=&quot;留言表&quot;, * tags=&#123;&quot;getList&quot;&#125;, * descriptionId=&quot;appmsglist&quot;, * @SWG\\Parameter( * description=&quot;Id&quot;, * format=&quot;integer&quot;, * in=&quot;formData&quot;, * name=&quot;user_id&quot;, * required=&quot;true&quot;, * type=&quot;integer&quot; * ), * @SWG\\Parameter( * description=&quot;phone&quot;, * format=&quot;integer&quot;, * in=&quot;formData&quot;, * name=&quot;user_id&quot;, * required=&quot;true&quot;, * type=&quot;integer&quot; * ), * consumes=&#123;&quot;multipart/form-data&quot;, &quot;application/x-www-form-urlencode&quot;&#125;, * produces=&#123;&quot;application/json&quot;&#125;, * @SWG\\Response( * response=&quot;200&quot;, * description=&quot;返回成功&quot;, * ) * ) * */ 写完以后运行: ./vendor/zircote/swagger-php/bin/swagger app/Business/Hera/HeraMockApi.php -o ./../../swagger_json/rrc/swagger.json第一个为swagger.json的生成器,第二个为目标文件,第三个为生成文件。 然后我们在swagger-ui 引入生成的json即可。","tags":[]},{"title":"设计模式1","date":"2018-08-01T12:53:15.000Z","path":"2018/08/01/设计模式1/","text":"builder 模式builder 建造者模式,又称生成器模式。 建造者模式是为了简化 使用多个建单的对象构建成一个复杂对象的 设计模式。 属于创建型模式。 代码示例 1234567891011121314151617181920publish class SmallWheel()&#123; &#125;publish class BigWheel()&#123; &#125;publish class SmallCar()&#123; publish $wheel;&#125;publish class BigCar()&#123; publish $wheel;&#125; 以上为零件。 12345678910111213141516171819publish CarBuilder()&#123; //创建小轿车 publish function getSmallCar() &#123; $smallCar = new SmallCar(); $smallCar-&gt;whell = new SmallWheel(); return $smallCar; &#125; //创建大轿车 publish function getBigCar() &#123; $bigCar = new BigCar(); $bigCar-&gt;whell = new BigWheel(); return $bigCar; &#125;&#125; 调度 12345$carBuilder = new CArBuilder();$smallCar = $carBuilder-&gt;getSmallCar();$bigCar = $carBuilder-&gt;getBigCar(); 备注: 建造者模式与工厂模式区别:工厂模式用于批量创建那哪一种类, 建造者模式更注重构建过程。 template method模板方法:定义一个抽象类或者/父类,由继承它的子类按照需求重写它的方法实现。 eg: 123456789101112publish abstract class Car()&#123; //强制子类实现 abstract public function run(); abstract public function turnOnTheLight(); //不强制 public function palyMusic() &#123; return 'hengheng hahei'; &#125;&#125; 继承 123456789101112public class SmaCar extends car &#123; public function run() &#123; return 'run'; &#125; public funtion turnOnTheLight() &#123; return 'turnOnTheLight'; &#125;&#125; 以上","tags":[{"name":"builder template method","slug":"builder-template-method","permalink":"http://yoursite.com/tags/builder-template-method/"}]},{"title":"我不是药神","date":"2018-07-13T14:44:43.000Z","path":"2018/07/13/我不是药神/","text":"一直以来都想成为一个坚强的人,但是生活中还是有很多时候让我情不自禁,一部电影被感动哭的稀里哗啦,不得不承认我是个泪点很低的人,但是我想这并不妨碍我成为一个坚强的人。 看完点影,不禁想问自己几个问题: 电影里徐峥错了么?好像并没有什么大错。尊重知识产权确实一个严肃的问题,不然社会没有前进的动力。 警察错了么? 好像也没有错,秉公执法的警察才是好警察。 病人错了么? 明明知道这是走私药,却仍然要买,我想对于想要活命的人来说,什么都无足轻重了。只有哪些真正历过生离死别,一直在生与死的边缘挣扎的人, 才知道生命的可贵。 到底是哪里错了? 我想真的事像电影里所说的一样, 都是因为穷。如果穷是原罪的话,我想这个世界大多数人都犯了很重的罪。那么错在哪里, 我想我们的国家体制已经意识到了,她在改变。 黄毛是个仗义的兄弟, 看到了黄毛, 这不禁让我想到我的高中, 想到了当我处于和别人争执的时候那些为我站出来的朋友。 我想我一直是一个不善于表达的人, 无论对于父母, 伴侣, 还是朋友, 对于他们我一直都很吝啬赞美之词。 最后一个问题, 如果我是徐峥, 我会站出来么? 当我事业有成的时候, 衣食无忧的时候, 家庭美满的时候, 我会为那些需要帮助的人站出来么? 但是我知道, 那些站出来的背影真的很帅, 也值得我们尊敬。","tags":[]},{"title":"微服务数据一致性和服务可靠性","date":"2018-07-12T13:54:30.353Z","path":"2018/07/12/微服务数据一致性和服务可靠性/","text":"存在问题 我们的保证金服务现有结构是这个样子。在 1、2、3、4、5、6 各个阶段都会存在超时和异常问题，当负载少时，我们还可以手动人工处理，但是当数据量大的时候，问题或多的令人发指，沉浸于洗数据，无法自拔。。超时存在问题：1.当1、2、3 步骤超时时，下游服务可以忽略，当做执行失败，重试。2.当在环节4、5、6超时时，对于下游服务是也是执行失败，但是还可以重试么？ 如何提高服务可靠性对于上游服务，如何保证对下游提供可靠的服务。 补偿机制 在服务间的调用失败时，可以记录失败调用，如队列，消费重试。但是前提一定是接口幂等。 但是这样并不能解决根本性问题，如果我们在调用保证金冻结服务时，失败此时我们冻结时报操作入队列，让队列异步消费，如果此时要解冻保证金，就会出现业务异常。 所以补偿机制建议使用在 不可避免的业务异常情况下使用，我们应该尽可能的优化技术方案，来保证数据一致性，最后再采用补偿机制。 两段提交协议（2pc） preOperation 执行请求，在调用微服务前，执行预操作成功则表示此次操作可行。如果commit失败该如何处理？重新preOperetion嘛？如果接口幂等是否可以重复，commit？如何保证避免重复提交？在preOperation时，返回唯一操作ID，业务逻辑每个操作对应一个操作ID，commit失败就重试，当然前提是我们的上有服务接口幂等。 即使是这样也会存在问题，如果保证金预操作成功，但是执行一直失败呢？我们必须提供回滚机制。 大量同步RPC依赖，如何保证自身服务可靠性？ 服务之间在调用的时候，会存在大量异常、超时。我该如何处理，认为这次是失败的？还是成功的？如果依赖的服务返回成功，才算成功的话，我改如何保证服务可靠性，该如何对我的下游服务提供可靠的服务。 调用依赖服务失败，如何降级处理？ 在服务调用失败的时候，我的上游出错了，我该如何降级处理，我该重试？还是直接跳过，跳过后是否会造成微服务之间数据一致性问题。如果重试是否会造成重复提交，接口是否幂等？ 是否还欠缺回滚机制？","tags":[{"name":"分布式,事务","slug":"分布式-事务","permalink":"http://yoursite.com/tags/分布式-事务/"}]},{"title":"Item2使用sz rz命令从服务下载上传文件","date":"2018-07-12T13:27:37.000Z","path":"2018/07/12/使用sz-rz命令从服务下载上传文件/","text":"背景如何从linux服务下载/上传文件 使用scp命令 使用sz命令 这里主要介绍使用sz命令下载文件 安装 安装lrzsz hobrew install llssz 在本地编写shell用于接受sz命令下载下来的文件 上传shell iterm2-send-zmodem.sh12345678910111213141516171819202122232425262728293031323334#!/bin/bash#Author: Matt Mastracci (matthew@mastracci.com)# AppleScript from http://stackoverflow.com/questions/4309087/cancel-button-on-osascript-in-a-bash-script# licensed under cc-wiki with attribution required# Remainder of script public domainosascript -e &apos;tell application &quot;iTerm2&quot; to version&apos; &gt; /dev/null 2&gt;&amp;1 &amp;&amp; NAME=iTerm2 || NAME=iTermif [[ $NAME = &quot;iTerm&quot; ]]; then FILE=`osascript -e &apos;tell application &quot;iTerm&quot; to activate&apos; -e &apos;tell application &quot;iTerm&quot; to set thefile to choose file with prompt &quot;Choose a file to send&quot;&apos; -e &quot;do shell script (\\&quot;echo \\&quot;&amp;(quoted form of POSIX path of thefile as Unicode text)&amp;\\&quot;\\&quot;)&quot;`else FILE=`osascript -e &apos;tell application &quot;iTerm2&quot; to activate&apos; -e &apos;tell application &quot;iTerm2&quot; to set thefile to choose file with prompt &quot;Choose a file to send&quot;&apos; -e &quot;do shell script (\\&quot;echo \\&quot;&amp;(quoted form of POSIX path of thefile as Unicode text)&amp;\\&quot;\\&quot;)&quot;`fiif [[ $FILE = &quot;&quot; ]]; then echo Cancelled. # Send ZModem cancel echo -e \\\\x18\\\\x18\\\\x18\\\\x18\\\\x18 sleep 1 echo echo \\# Cancelled transferelse /usr/local/bin/sz &quot;$FILE&quot; -e -b sleep 1 echo echo \\# Received $FILEfi 下载shell iterm2-recv-zmodem.sh 12345678910111213141516171819202122232425262728#!/bin/bash# Author: Matt Mastracci (matthew@mastracci.com)# AppleScript from http://stackoverflow.com/questions/4309087/cancel-button-on-osascript-in-a-bash-script# licensed under cc-wiki with attribution required # Remainder of script public domainosascript -e &apos;tell application &quot;iTerm2&quot; to version&apos; &gt; /dev/null 2&gt;&amp;1 &amp;&amp; NAME=iTerm2 || NAME=iTermif [[ $NAME = &quot;iTerm&quot; ]]; then FILE=`osascript -e &apos;tell application &quot;iTerm&quot; to activate&apos; -e &apos;tell application &quot;iTerm&quot; to set thefile to choose folder with prompt &quot;Choose a folder to place received files in&quot;&apos; -e &quot;do shell script (\\&quot;echo \\&quot;&amp;(quoted form of POSIX path of thefile as Unicode text)&amp;\\&quot;\\&quot;)&quot;`else FILE=`osascript -e &apos;tell application &quot;iTerm2&quot; to activate&apos; -e &apos;tell application &quot;iTerm2&quot; to set thefile to choose folder with prompt &quot;Choose a folder to place received files in&quot;&apos; -e &quot;do shell script (\\&quot;echo \\&quot;&amp;(quoted form of POSIX path of thefile as Unicode text)&amp;\\&quot;\\&quot;)&quot;`fiif [[ $FILE = &quot;&quot; ]]; then echo Cancelled. # Send ZModem cancel echo -e \\\\x18\\\\x18\\\\x18\\\\x18\\\\x18 sleep 1 echo echo \\# Cancelled transferelse cd &quot;$FILE&quot; /usr/local/bin/rz -E -e -b sleep 1 echo echo echo \\# Sent \\-\\&gt; $FILEfi 配置iterm2 设置Iterm2的Tirgger特性，profiles-default-editProfiles-Advanced中的Tirgger 1234567891011添加两条trigger，分别设置Regular expression，Action，Parameters，Instant如下： 1.第一条 Regular expression: rz waiting to receive.\\*\\*B0100 Action: Run Silent Coprocess Parameters: /usr/local/bin/iterm2-send-zmodem.sh Instant: checked 2.第二条 Regular expression: \\*\\*B00000000000000 Action: Run Silent Coprocess Parameters: /usr/local/bin/iterm2-recv-zmodem.sh Instant: checked 备注:注意两个文件的权限","tags":[]},{"title":"python学习笔记一","date":"2018-07-06T09:43:01.000Z","path":"2018/07/06/python学习笔记一/","text":"在php里数组分为索引数组和关联数组但是在python里这两者数组确实不同的数据类型list:data = [1,2,3,4,5]字典{data:1}","tags":[]},{"title":"solr-从控制页面删除数据","date":"2018-06-21T12:21:18.000Z","path":"2018/06/21/solr-从控制页面删除数据/","text":"1.xml 12&lt;delete&gt;&lt;query&gt;*:*&lt;/query&gt;&lt;/delete&gt;&lt;commit/&gt;","tags":[]},{"title":"websocket订阅火币成交记录","date":"2018-06-19T10:15:57.000Z","path":"2018/06/19/websocket订阅火币成交记录/","text":"python3单线程：文件一：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495969798# -*- coding: utf-8 -*-#author: maxie_ljimport _threadfrom websocket import create_connectionfrom mysqlOpertion import connect_mysqlimport gzipimport timeimport json# 链接def connect(): while(1): try: print('') # 挂代理 ws = create_connection(\"wss://www.huobi.br.com/-/s/pro/ws\") #print('链接成功') return ws break except Exception as err: #print(err) #print('connect ws error,retry...') time.sleep(1)def getsubconfig(): # 统计参数 tradeStr=[ \"\"\"&#123;\"sub\": \"market.elfusdt.trade.detail\",\"id\": \"id1\"&#125;\"\"\", \"\"\"&#123;\"sub\": \"market.btcusdt.trade.detail\",\"id\": \"id2\"&#125;\"\"\", \"\"\"&#123;\"sub\": \"market.htusdt.trade.detail\",\"id\": \"id3\"&#125;\"\"\", \"\"\"&#123;\"sub\": \"market.swftcbtc.trade.detail\",\"id\": \"id4\"&#125;\"\"\", \"\"\"&#123;\"sub\": \"market.topcbtc.trade.detail\",\"id\": \"id6\"&#125;\"\"\", \"\"\"&#123;\"sub\": \"market.bchusdt.trade.detail\",\"id\": \"id7\"&#125;\"\"\", \"\"\"&#123;\"sub\": \"market.ethusdt.trade.detail\",\"id\": \"id8\"&#125;\"\"\", \"\"\"&#123;\"sub\": \"market.etcusdt.trade.detail\",\"id\": \"id9\"&#125;\"\"\", \"\"\"&#123;\"sub\": \"market.eosusdt.trade.detail\",\"id\": \"id9\"&#125;\"\"\", \"\"\"&#123;\"sub\": \"market.ltcusdt.trade.detail\",\"id\": \"id9\"&#125;\"\"\" ] return tradeStr# 订阅def sub(ws,tradeStr): ws.send(tradeStr)# 获取返回def getResponse(ws,tradeStr): db = connect_mysql.connect() while 1 : try : compressData=ws.recv() except Exception : #print('链接异常') run(tradeStr,1) try : result=gzip.decompress(compressData).decode('utf-8') except: #print('丢包解析异常') continue if result[:7] == '&#123;\"ping\"': ts=result[8:21] #print('心跳包',ts) pong='&#123;\"pong\":'+ts+'&#125;' ws.send(pong) else: if result[:5] == '&#123;\"ch\"': result = json.loads(result) #print(result) #print('------------------------------------------------------') n = 0 while n &lt; len(result['tick']['data']) : connect_mysql.commit('%s' % result['ch'].split('.')[1],result['tick']['data'][n]['price'],result['tick']['data'][n]['amount'],\"'%s'\" % result[\"tick\"][\"data\"][n][\"direction\"], \"'%s'\" % result['ch'].split('.')[1],db); n += 1def subCoin(tradeStr): ws=connect() sub(ws,tradeStr) getResponse(ws,tradeStr)def run(tradeStr,test): subCoin(tradeStr)def main(): tradeStr=getsubconfig() try : tradeStr = getsubconfig() i = 0 while i &lt; len(tradeStr) : _thread.start_new_thread( run, (tradeStr[i],i) ) i += 1 except Exception as err : print(err) while 1: passif __name__ == '__main__': main() 多线程版本：文件一：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889# -*- coding: utf-8 -*-#author: maxie_ljimport _threadfrom websocket import create_connectionfrom test1 import connect_mysqlimport gzipimport timeimport json# 链接数据库def connect(): while(1): try: ws = create_connection(\"wss://www.huobi.br.com/-/s/pro/ws\") # print('链接成功') return ws break except Exception as err: print(err) #print('connect ws error,retry...') time.sleep(1)def getsubconfig(): # 统计参数 tradeStr=[ \"\"\"&#123;\"sub\": \"market.elfusdt.trade.detail\"&#125;\"\"\", \"\"\"&#123;\"sub\": \"market.btcusdt.trade.detail\"&#125;\"\"\", \"\"\"&#123;\"sub\": \"market.htusdt.trade.detail\"&#125;\"\"\", \"\"\"&#123;\"sub\": \"market.swftcbtc.trade.detail\"&#125;\"\"\", \"\"\"&#123;\"sub\": \"market.topcbtc.trade.detail\"&#125;\"\"\", \"\"\"&#123;\"sub\": \"market.bchusdt.trade.detail\"&#125;\"\"\", \"\"\"&#123;\"sub\": \"market.ethusdt.trade.detail\"&#125;\"\"\", \"\"\"&#123;\"sub\": \"market.etcusdt.trade.detail\"&#125;\"\"\", \"\"\"&#123;\"sub\": \"market.eosusdt.trade.detail\"&#125;\"\"\", \"\"\"&#123;\"sub\": \"market.ltcusdt.trade.detail\"&#125;\"\"\" ] return tradeStr# 订阅def sub(ws,tradeStr): ws.send(tradeStr)# 获取返回def getResponse(ws): db = connect_mysql.connect() while 1 : try : compressData=ws.recv() except Exception : ws=connect() subCoin(ws) print('链接异常') try : result=gzip.decompress(compressData).decode('utf-8') except: print('丢包解析异常') continue if result[:7] == '&#123;\"ping\"': ts=result[8:21] #print('心跳包',ts) pong='&#123;\"pong\":'+ts+'&#125;' ws.send(pong) else: if result[:5] == '&#123;\"ch\"': result = json.loads(result) print(result) #print('------------------------------------------------------') n = 0 while n &lt; len(result['tick']['data']) : connect_mysql.commit('%s' % result['ch'].split('.')[1],result['tick']['data'][n]['price'],result['tick']['data'][n]['amount'],\"'%s'\" % result[\"tick\"][\"data\"][n][\"direction\"], \"'%s'\" % result['ch'].split('.')[1],db); n += 1# 订阅def subCoin(ws): tradeStr=getsubconfig() i = 0 while i &lt; len(tradeStr) : sub(ws,tradeStr[i]) i += 1# 主函数def main(): ws=connect() subCoin(ws) getResponse(ws)if __name__ == '__main__': main() 1234567891011121314151617181920212223242526272829### 文件二:```pythonimport jsonimport pymysqlimport timeclass connect_mysql(): db = &apos;&apos; def connect() : db = connect_mysql.db = pymysql.connect(&quot;localhost&quot;, &quot;root&quot;, &quot;root&quot;, &quot;huobi&quot;, charset=&apos;utf8&apos; ) return db def commit(table, price, amount, action, coin_type, db) : try: cursor = db.cursor() sql = &quot;INSERT INTO %s_success_order(action,order_amount, price, coin_type)VALUES (%s, %.10f, %.10f,%s )&quot; % (table,action, amount, price,coin_type ) cursor.execute(sql) # 提交到数据库执行 db.commit() except Exception as e: db = connect_mysql.db = pymysql.connect(&quot;localhost&quot;, &quot;root&quot;, &quot;root&quot;, &quot;huobi&quot;, charset=&apos;utf8&apos; ) commit(table, price, amount, action, coin_type, db) return def connect_close() : connect_mysql.db.close() 文件二是单线程和多线程版的公用文件 shell 脚本123456789101112#!/bin/bashtotal=1avaliable=`ps -ef | grep -w huobi.py | grep -v grep | wc -l`diff=`expr $total - $avaliable`#echo $diff &gt;&gt; /home/script/diff.text#echo $total &gt;&gt; /home/script/diff.text#echo $avaliable &gt;&gt; /home/script/diff.textif [ $diff -gt 0 ];then for((i=0;i&lt;$diff;i++));do /usr/local/bin/python3 /home/script/huobi.py &gt;&gt; /home/script/huobi.out donefi crontab 配置123MAILTO=\"\"* * * * * sudo /bin/bash /home/script/huobi.sh 注意事项：在写shell脚本时，尽量用绝对路径。","tags":[{"name":"python, shell, crond","slug":"python-shell-crond","permalink":"http://yoursite.com/tags/python-shell-crond/"}]},{"title":"一次HTTP请求","date":"2017-11-20T12:09:23.000Z","path":"2017/11/20/一次HTTP请求/","text":"#一次完整的HTTP请求，以及请求方式的区别 今天在对接业务组mas时候遇到一个很少遇到的问题，发送一个一个不但参数的POST的请求。在我的印象里传参好像必带名字，因为就像一个你不认识的人要来你家，你肯定不会让他进来的。所以重新缕了一下POST请求，冲冲能。 ##一次HTTP请求的过程 访问某个网址，例如我们访问www.baidu.com浏览器会和百度的服务器进行三次握手（中间的域名解析等暂不考虑）然后是程序层面的信息请求与提交 三次握手-&gt;get或者post请求 1） Client首先发送一个连接试探，ACK=0 表示确认号无效，SYN = 1 表示这是一个连接请求或连接接受报文，同时表示这个数据报不能携带数据，seq = x 表示Client自己的初始序号（seq = 0 就代表这是第0号包），这时候Client进入syn_sent状态，表示客户端等待服务器的回复 2） Server监听到连接请求报文后，如同意建立连接，则向Client发送确认。TCP报文首部中的SYN 和 ACK都置1 ，ack = x + 1表示期望收到对方下一个报文段的第一个数据字节序号是x+1，同时表明x为止的所有数据都已正确收到（ack=1其实是ack=0+1,也就是期望客户端的第1个包），seq = y 表示Server 自己的初始序号（seq=0就代表这是服务器这边发出的第0号包）。这时服务器进入syn_rcvd，表示服务器已经收到Client的连接请求，等待client的确认。 3） Client收到确认后还需再次发送确认，同时携带要发送给Server的数据。ACK 置1 表示确认号ack= y + 1 有效（代表期望收到服务器的第1个包），Client自己的序号seq= x + 1（表示这就是我的第1个包，相对于第0个包来说的），一旦收到Client的确认之后，这个TCP连接就进入Established状态，就可以发起http请求了。 post请求HTTP 协议是以 ASCII 码传输，建立在TCP/IP协议之上的应用层规范，规范把 HTTP 请求分为三个部分：状态行、请求头、消息主体。类似于下面这样： 协议规定 POST 提交的数据必须放在消息主体（entity-body）中，但协议并没有规定数据必须使用什么编码方式。实际上，开发者完全可以自己决定消息主体的格式，只要最后发送的 HTTP 请求满足上面的格式就可以。 但是，数据发送出去，还要服务端解析成功才有意义。一般服务端语言如 php、python 等，以及它们的 framework，都内置了自动解析常见数据格式的功能。服务端通常是根据请求头（headers）中的 Content-Type 字段来获知请求中的消息主体是用何种方式编码，再对主体进行解析。所以说到 POST 提交数据方案，包含了 Content-Type 和消息主体编码方式两部分。下面就正式开始介绍它们。 headerContent-Type，内容类型，一般是指网页中存在的Content-Type，用于定义网络文件的类型和网页的编码，决定文件接收方将以什么形式、什么编码读取这个文件.当然还有UA等其他头信息， Content-Type对照表：http://tool.oschina.net/commons 说几种常见的Content-Type 1.application/x-www-form-urlencoded这个就是我们常见form表格提的方式 2.multipart/form-data 这又是一个常见的 POST 数据提交的方式。我们使用表单上传文件时，必须让 form 的 enctyped 等于这个值。直接来看一个请求示例 3.application/json application/json 这个 Content-Type 作为响应头大家肯定不陌生。实际上，现在越来越多的人把它作为请求头，用来告诉服务端消息主体是序列化后的 JSON 字符串。由于 JSON 规范的流行，除了低版本 IE 之外的各大浏览器都原生支持 JSON.stringify，服务端语言也都有处理 JSON 的函数，使用 JSON 不会遇上什么麻烦。 so 用这种格式就可以传递非Key Val的数据","tags":[]},{"title":"PHPExcel","date":"2017-10-30T02:42:03.000Z","path":"2017/10/30/PHPExecel/","text":"PHPEXcel 背景在工作中我们肯定会遇到由于后端管理系统不完善，而导致运营同学无法从管理系统获取想要的数据。亦或程序设计之初没有考虑到完善，导致一些必要的数据没有录入，希望后续补充批量导入。在这个时候我们就需要获取从数据批量导出数据或者导入数据，而无论导入还是导出数据，我们都希望是Excel格式。 根据Execel生成sql1.PHPExcel 准备：我们需要从github获取PHPExcel工具包。地址 https://github.com/PHPOffice/PHPExcel 打开PHPExcel文件夹，看下代码结构。我们需要的主要代码在Classes文件下，我们只需要引入PHPExcel.php即可。 代码实现1234567891011121314151617181920212223242526272829include './code/web_code/PHPExcel/Classes/PHPExcel.php';//引入必要的第三方依赖$inputFileType = 'Excel2007';//设置Excel的版本$inputFileName = './targe.xlsx';// 需要导入文件地址$currentsheet = $objPHPExcel-&gt;getSheet(0); //选择Excel页$maxColumn = $currentsheet-&gt;getHighestColumn(); //获取当前页的最大列数$maxRow = $currentsheet-&gt;getHighestRow(); //获取当前页的最大行数//循环拼接sqlfor ($i=2; $i&lt; $maxRow; $i++) &#123; //过滤条件 if(is_null($currentsheet-&gt;getCell('J'.$i)-&gt;getValue())||$currentsheet-&gt;getCell('J'.$i)-&gt;getValue()== '已退款' || $currentsheet-&gt;getCell('J'.$i)-&gt;getValue() == '待退款' || $currentsheet-&gt;getCell('J'.$i)-&gt;getValue() == '已经申请退款' || $currentsheet-&gt;getCell('J'.$i)-&gt;getValue() == '退了' ||$currentsheet-&gt;getCell('J'.$i)-&gt;getValue() == '没有电话' || $currentsheet-&gt;getCell('J'.$i)-&gt;getValue() == '0') &#123; continue; &#125; //过滤条件 if(!is_numeric($currentsheet-&gt;getCell('J'.$i)-&gt;getValue())||$currentsheet-&gt;getCell('J'.$i)-&gt;getValue() == '0' || empty($currentsheet-&gt;getCell('J'.$i)-&gt;getValue()) || $currentsheet-&gt;getCell('J'.$i)-&gt;getValue() == '') &#123; continue; &#125; $sql_bd_name .= ' WHEN '.$currentsheet-&gt;getCell('A'.$i)-&gt;getValue().' THEN '.$currentsheet-&gt;getCell('J'.$i)-&gt;getValue(); $sql_bd_name .= ','.$currentsheet-&gt;getCell('A'.$i)-&gt;getValue(); $res +=1;&#125;//输入，当然这里无论我们用fopen或者其他的输入当属都可以，这里我把结果打到了控制台。echo $sql_bd_name;echo $res 我们生成的sql是WHEN THEN的样式，完整语句应该是 update tablename set seller_jn_activity CASE idWHEN 1 TEHN 2END,bd_jn_activity CASE idwhen 2 THEN 3ENDWHERE in (1,2,3) 发现数据清洗其实是一件很麻烦的事。","tags":[]},{"title":"'laravel学习笔记四中间件'","date":"2016-03-02T11:44:12.000Z","path":"2016/03/02/laravel学习笔记四中间件/","text":"Laravel 学习笔记四Http中间件标签（空格分隔）： laravel 简介 关于中间件，从字面意思上我们很好理解中间件的意思。就是存在两个节点之间的节点。这里我们所描述的节点是Route和Controller。 一次正产给的请求是客户端发送请求，服务端接受请求，然后对参数做一些判断然后处理逻辑。任何请求都会从进入控制器开始就直接进入真正的逻辑处理，我们会先判断请求参数是否正确，以防止黑客攻击。比较常见的处理逻辑反馈有403、503页面。这些是我们在接受参数后对参数进行处理，从而反馈到客户端。如果我们传递参数较多，对参数筛选很严格的话，就会出现很多对参数判断的代码，以及当一些对参数判断的代码需要复用时候我们无法将其从控制器中分离出来，这些都是我们平常工作中饭经常遇到的问题。这是中间件就能很好地处理这个问题了。 间件的作用是在请求从Route进入控制器是时，我们可以先将请求引入到中间件中，对数据做些处理，然后才引入到控制器中，或者直接反馈给客户端。这样我们的控制器可以专心于数据逻辑，从而代码简洁，以及参数判断代码会得到复用，很大的提升工作效率。 创建一个控制器第一步我们来创建一个中间件。在larval中，自带了一条命令用来创建中间件。php artisan make:middleware CheckAge 。我们可以用此命令创建一个CheckAge的中间，用来过滤用户的年龄。穿件代码如下： 12345678910111213141516171819202122232425&lt;?phpnamespace App\\Http\\Middleware;use Closure;class CheckAge&#123; /** * 运行请求过滤器。 * * @param \\Illuminate\\Http\\Request $request * @param \\Closure $next * @return mixed */ public function handle($request, Closure $next) &#123; if ($request-&gt;age &lt;= 200) &#123; return redirect(&apos;home&apos;); &#125; return $next($request); &#125;&#125; 当然在这里少不了路由的代码，我们的请求先到路由，然后到中间件最后到控制器。1Route::get(&apos;getuser/user/&#123;id&#125;/age/&#123;age&#125;&apos;,UserController@getUser)-&gt;middleware(&apos;CheckAge&apos;); 在这段代码中我们把所有请求age大于200的重定向到home中，佛则就继续，这样就是实现了参数过滤。这就是中间件的基本作用。 注册中间件 我们的中间件在使用前，是需要注册的。否则我们无法正常调用到我们的中间件。这个注册文件在app/Http/Kernel.php中。我们打开这个文件。 12345678910111213141516171819202122232425262728293031323334353637&lt;?phpnamespace App\\Http;use Illuminate\\Foundation\\Http\\Kernel as HttpKernel;class Kernel extends HttpKernel&#123; // 这里注册是全局的中间件，在所有的都需要经过这个中间件来过滤信息，无论是来之web的请求还是API的///请求 protected $middleware = [ \\Illuminate\\Foundation\\Http\\Middleware\\CheckForMaintenanceMode::class, ]; // 中间件群组，在这里我们可以注册中间件群组，用来给请求批量的添加空间。这里laravel中web请求默认 //都必须经过web群组的中间的过滤，api请求需要经过api群组的中间件过滤。使用实例在下边已经给出。 protected $middlewareGroups = [ &apos;web&apos; =&gt; [ \\App\\Http\\Middleware\\EncryptCookies::class, \\Illuminate\\Cookie\\Middleware\\AddQueuedCookiesToResponse::class, \\Illuminate\\Session\\Middleware\\StartSession::class, \\Illuminate\\View\\Middleware\\ShareErrorsFromSession::class, \\App\\Http\\Middleware\\VerifyCsrfToken::class, ], &apos;api&apos; =&gt; [ &apos;throttle:60,1&apos;, ], ]; // 非全局的中间件，单独给某些路由指定下面的中间件（用户自己编写）。 protected $routeMiddleware = [ &apos;auth&apos; =&gt; \\App\\Http\\Middleware\\Authenticate::class, &apos;auth.basic&apos; =&gt; \\Illuminate\\Auth\\Middleware\\AuthenticateWithBasicAuth::class, &apos;can&apos; =&gt; \\Illuminate\\Foundation\\Http\\Middleware\\Authorize::class, &apos;guest&apos; =&gt; \\App\\Http\\Middleware\\RedirectIfAuthenticated::class, &apos;throttle&apos; =&gt; \\Illuminate\\Routing\\Middleware\\ThrottleRequests::class, ];&#125; 群组使用123Route::group([&apos;middleware&apos; =&gt; [&apos;web&apos;]], function () &#123; //&#125;) 我们可以看出这个Kernel.php文件中有是哪个属性，分别为 protected $middleware protected $middlewareGroups protected $routeMiddleware 这三个属性分别用来注册全局中间件 群组中间件 和自定义中间件。 特殊中间件在中间件中用连个比较特殊的中间件，分别为前置中间件 和后置中间件。顾名思义，前置中间件就是在请求前运作的，后置中间件就是在请求后运作的。这有什么用呢？我们可以在这里举一个栗子： 在正常的项目中我们肯定要记录一些数据操作记录，用来跟踪每次请求的逻辑处理。方便我们在项目出现bug时候跟踪数据。在laravel中我们用下面函数来进行sql语句的记录：12DB::enableQueryLog();DB::getQueryLog(); 我们可以将DB::enableQueryLog() 放在需要记录sql语句的请求的前置中间件中，用来开启sql记录。将DB::getQueryLog()放在需要记录请求的后置中间件中，记录所执行的sql。 这就是中间件的作用。 中间件参数在调取中间件时，我们可以穿的附加参数。例如：1234567891011121314151617181920212223242526&lt;?phpnamespace App\\Http\\Middleware;use Closure;class CheckRole&#123; /** * 处理传入的请求 * * @param \\Illuminate\\Http\\Request $request * @param \\Closure $next * @param string $role * @return mixed */ public function handle($request, Closure $next, $role) &#123; if (! $request-&gt;user()-&gt;hasRole($role)) &#123; // Redirect... &#125; return $next($request); &#125;&#125; 传递指定参数可以:隔开123Route::put(&apos;post/&#123;id&#125;&apos;, function ($id) &#123; //&#125;)-&gt;middleware(&apos;role:editor&apos;); 好了，本节就到此为止了。","tags":[]},{"title":"Laravel学习笔记三控制器","date":"2016-02-16T13:26:25.000Z","path":"2016/02/16/Laravel学习笔记三控制器/","text":"标签（空格分隔）： Laravel 关于laravel我们学习了如何配置laravel、以及路由。接下来让然是至关重要的控制器了。在MVC框架中，C是一个很重要的环节。用来处理我们的数据逻辑。 我们之前在学习路由是后，是给Route::get()第二个参数一个闭包函数。当然能处理一些数据逻辑，但是如果我们所有的数据逻辑都放在路由文件，那么我们路由文件将会特别臃肿，而且我们的代码耦合度会特别高。这也就回到php面向过程的时代，这不是我们所想要的。 在我们的面向对象的思维中，是把不同功能的代码封装成一个一个类，各自处理自己流水线上的数据。所以我们要通过路由把必要的参数传给我们的控制器去处理。 在这里看到一个小插曲，Laravel官方文档说在上线前使用php artisan route:cache会让路由速度快上一百倍，我不知道这是不是吹牛逼。废话不多说我们开始我们的控制器学习吧。 ###控制器到路由### 在第一步我们需要把访问到路由的请求转到控制器。在Laravel中使用下边代码即可： 'UserController@show');```1234567891011121314 我们可以把客户的请求跳转到 App/Http/Controller下的UserController的show方法。 在这里laravel给我们提供很好的工具让我们来创建控制器。使用`php artisan make:controller NameController` 。默认会出现App/Http/Controller 路径下。并且还有一些级基础代码。```&lt;?phpnamespace App\\Http\\Controllers;use Illuminate\\Http\\Request;use App\\Http\\Controllers\\Controller;class NameController extends Controller&#123; //&#125; ###传递参数到控制器### 我们看到在自动生成代码中我们看到引入了Request 类。这个类要讲起来其实可以单独讲，但是我们学到控制器就稍微讲一下，不然没法传递参数。如下1234public function index(Request $request)&#123; $name = $request-&gt;input(&apos;name&apos;); &#125; 用该方法可以获取到我们想要的参数。","tags":[]},{"title":"'laravel学习笔记二路由'","date":"2016-02-09T14:09:19.000Z","path":"2016/02/09/laravel学习笔记二路由/","text":"laravel框架安装好之后我们就要开始熟悉laravel框架的内部结构。我们主要是从这个几个方便来学习laravel： route 路由 controller 控制器 blade 模板 model 模型 今天我们主要讲路由。 laravel-route可能我们在学习laravel之前已经接触过一些框架例如：yii，tp,ci。但是他们都没有laravel所带的路由系统强大，我们现在开始介绍laravel框架的路由。 闭包最基本的路由接受的是一个闭包函数，直接返回值，例如：12Roure::get(&apos;/&apos;,funcition()&#123;return &apos;this is Route&apos;&#125;) 我们在 /routes/web.php 里注册该路由即可返回 this us Route。当然laravel路由所能接受的请求方式不仅仅是get还要post put 等等法法，示例如下123456Route::get($uri, $callback);Route::post($uri, $callback);Route::put($uri, $callback);Route::patch($uri, $callback);Route::delete($uri, $callback);Route::options($uri, $callback); 带参数访问123Roure::get(&apos;/&#123;id&#125;&apos;,function($id)&#123;return &apos;user id is &apos;.$id&#125;) 当然也可以带多参数访问 123Route::get(&apos;/id/&#123;id&#125;/name/&#123;name&#125;&apos;,function($id,$name)&#123;//&#125;) 让然也可以传递一个可选参数 ,但是我们需要用？来标记该参数，还给予他默认值123Route::get(&apos;/name/&#123;name&#125;?&apos;,function($name=&apos;Maxie&apos;)&#123;//&#125;) 路由命名12Roure::get(&apos;/&apos;,funcition()&#123;return &apos;this is Route&apos;&#125;)-&gt;name(&apos;index&apos;) 我们可以给路由命名一个名字，让我们在模板中使用rul函数可以解析到我们所命名的路由url(&#39;index&#39;)。这些我们在模板中在细讲 路由群组路由群组是一个很好东西，我们在开发中很定会给我们的项目分不同模块。例如用户模块，商户模块。这时候我么会给他们加上不同的命名空间，我们可以通过路由群组把我们注册的路由也分类，很方便我们的访问。例如：123Route::groun([&apos;namespace&apos;=&gt;&apos;user&apos;],function()&#123;//我们可以在此注册我们的路由，路由控制器路由会在App/Http/Controller/user 下&#125;) 当让我们可以在群组里继续注册群组，在这里我们不多做演示。 路由绑定到控制器这是我们最关键的地方，一般我们通过访问URI都会想传递参数给我们的控制器，当然laravel还给我们提供了中间件让我们在路路由控制器之间或者路由玉模板之前做一个参数处理或者过滤，我们在此不做演示。后边我们会详细解释，现在我们详细解释路由有绑定到控制器，想必这是你我最关系的。路由绑定到控制器只需要：1Roure::get(&apos;/&apos;,&apos;UserController@showProfile&apos;) 这样既可绑定我么你的路由到控制器。 路由绑定绑定到视图有很多的访问不需要我们做处理，只需展示一些东西既可，我么你可以直接把路由绑定到视图 12345Route::get(&apos;/&apos;,function()&#123;return view(&apos;welcom&apos;)&#125;)这也是我们刚刚配置完laravel时候路由web.php唯一注册一个路由","tags":[]},{"title":"laravel学习笔记","date":"2016-02-08T14:10:05.000Z","path":"2016/02/08/larave学习笔记/","text":"laravel- 学习笔记 laravel 配置篇lavel 有三种安装方法： 使用composer安装 使用laravel安装器安装 下载解压安装 composer先说第一种，使用composer安装，使用 composer create-project 进行安装1composer create-project --prefer-dist laravel/laravel blog laravel安装器 使用laravel安装器首先需要安装laravel安装器，让我们来使用composer安装laravel安装器 1composer global require &quot;laravel/installer&quot; 当然我们在使用laravel安装器安装laravel之前，需要配置PATH环境变量，不然系统找不到laravel安装器laravel安装器默认位置Windows:C:\\Users\\admin\\AppData\\Roaming\\Composer\\vendor\\binlinux:~/.composer/vendor/bin 下载解压安装因为composer可能被墙，所以golaravel给出了已经集成了所有以来的laravel意见安装包下载地址为http://www.golaravel.com/download/ 配置laravel所有的配置文件都在根目录conf文件夹下当然我们不能忽视的一个很重的一点，就是要设置laravel的应用key，如果不加以设置，我的会话和其他需要加密的信息将会不安全，让然我们通过composer或者laravel安装器安装的laravel不需要进行配置，因为在我们安装laravel时候composer和laravel已经给我们配置好了，所以通过第三种方法安装laravel的，需要为laravel配置新的key，生成key的方法是，在laravel根目录输入key:generate.laravel所有的配置都是conf文件夹下的，但是为了方便配置，laravel调用根目录的.env,我们配置框架最关键的数据库信息卸载根目录的.env文件里 开发服务器laravel为我们提供了一个简单的开发服务器，当我需要时只需要在跟路面输入命令php artisan serve即可。但是这毕竟是开发使用过的，不能再生产环境中使用。 #laravel其他laravel还为我们提供很多其他功能，具体我就不在此赘述，需要请看官网。","tags":[]},{"title":"php curl","date":"2015-07-18T12:28:10.000Z","path":"2015/07/18/php-curl/","text":"参数1curl_setoptCURLOPT_RETURNTRANSFER 表示是否直接输出到控制台 eg: 1234567$curl = curl_init();curl_setopt($curl, CURLOPT_URL, 'http://baidu.com');curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);curl_setopt($curl, CURLOPT_HEADER, 0);// curl_setopt($curl, CURLOPT_POST, 1);$ret = curl_exec($curl);// var_dump($ret); 输出结果为: 打开参数 12345678&lt;?php$curl = curl_init();curl_setopt($curl, CURLOPT_URL, &apos;http://baidu.com&apos;);curl_setopt($curl, CURLOPT_RETURNTRANSFER, 0);curl_setopt($curl, CURLOPT_HEADER, 0);// curl_setopt($curl, CURLOPT_POST, 1);$ret = curl_exec($curl);// var_dump($ret); 输出结果 参数2CURLOPT_HEADERCURLOPT_HEADER 表示是否输出头信息 12345678&lt;?php$curl = curl_init();curl_setopt($curl, CURLOPT_URL, &apos;http://baidu.com&apos;);curl_setopt($curl, CURLOPT_RETURNTRANSFER, 0);curl_setopt($curl, CURLOPT_HEADER, 1);// curl_setopt($curl, CURLOPT_POST, 1);$ret = curl_exec($curl);// var_dump($ret); 返回结果 12345678&lt;?php$curl = curl_init();curl_setopt($curl, CURLOPT_URL, &apos;http://baidu.com&apos;);curl_setopt($curl, CURLOPT_RETURNTRANSFER, 0);curl_setopt($curl, CURLOPT_HEADER, 0);// curl_setopt($curl, CURLOPT_POST, 1);$ret = curl_exec($curl);// var_dump($ret); 返回结果 get 与 postget123456789//初始化$curl = curl_init();//设置urlcurl_setopt($curl, CURLOPT_URL, &apos;http://baidu.com&apos;);curl_setopt($curl, CURLOPT_RETURNTRANSFER, 0);curl_setopt($curl, CURLOPT_HEADER, 0);$ret = curl_exec($curl);//关闭curl_close($curl); post 12345678910//初始化$curl = curl_init();//设置urlcurl_setopt($curl, CURLOPT_URL, &apos;http://baidu.com&apos;);curl_setopt($curl, CURLOPT_RETURNTRANSFER, 0);curl_setopt($curl, CURLOPT_HEADER, 0);curl_setopt($curl, CURLOPT_POST, 1);$ret = curl_exec($curl);//关闭curl_close($curl);","tags":[{"name":"curl","slug":"curl","permalink":"http://yoursite.com/tags/curl/"}]},{"title":"github","date":"2015-06-26T14:04:09.000Z","path":"2015/06/26/github/","text":"#关于Git的使用 Git的安装和使用 准备工作： 下载git 客户端 链接地址 下载完毕后，安装一路一下一步。安装完成之后我们开始使用Git使用前我们需要告诉Git，我们是谁。所以需要配置一些信息，来确定我们的身份。 12git config –global user.name “用户名”git config –global user.email “邮箱” 第一条命令用来告诉 git 我们的名字（以后链接github）第二条命令用来告诉git 我们的邮箱 到此我们就可以使用Git了 链接github如果我们希望把自己的项目托管在github我们就需要再做一些配置 首先我们需要生成ssh,使用以下命令1ssh-keygen –t rsa –C 然后他提示的默认路径生成一些文件，或者你自己配置路径。 在生成过程中会让你输入密码，可以不输入，一路回车生成完毕后，会在你选择路径下生成两个文件 一个是 .rsa 一个是 .pub 我们这里只需要.pub里的内容 复制里边的内容 接下来我们需要把文件里的key添加到我们的github账号里。 首先我们登陆我们的github账号。 然后在设置里 NEW SSH KEY 添加描述然后把我们的key复制到里边即可。 不过在提交之前我们还需要做一些配置来确定我们需要把当前库的代码推送到github账号的哪个库里1git remote add origin git@github.com:aaa/xxx 在上边的配置的命令中，aaa表示的我们的github账号。xxx使我们的库文件。以后就可以使用git来进行版本管理和推送到github里了。正常操作代码1234git statusgit add .git commit -a &apos;message&apos;git push 提交完毕。 如果我们需要在其他电脑上使用我们托管的代码，我们需要使用1git pull 或者1git colne &apos;address&apos; 来从github上获取我们所需要的代码 如果在配置过程中出现错误，按照提示的代码解决即可。当然在此如果我们直接使用了1git commit -a 会弹出来vim窗口，在这里写一些vim的命令在非insert状态下我们使用ctrl+d来批量选择#，然后按d删除 在飞插入模式写:wq 保存并推出","tags":[]},{"title":"hexo git github搭建博客","date":"2015-06-02T13:48:07.000Z","path":"2015/06/02/hexo-git-github搭建博客/","text":"在经搭建个人博客、csnd写博客、博客园写博客一系列折腾之后最终决定用 git github hexo 来搭建自己的个人博。我这样做的原因最主要就这么几点： github的大环境。（装逼） 免费稳定1 有一定的技术含量，我个人喜欢折腾。 为了保持使用git的习惯，顺带看看新的技术，跟上时代潮流。 ** 开始**需求环境 git git下载地址 node.js node.js下载地址 两个安装都是一路下一步 验证软件正确安装git --version node -v npm -v 如果显示版本信息，怎安装成功。 安装hexo在这里如果被墙的可以使用淘宝镜像cnpm 具体怎么操作可以自行百度，这里不多做解释。不过一般不会被墙，我使用npm。运行下边的命令安装hexo：被墙请使用命令： npm install -g cnpm --registry=https://registry.npm.taobao.org 以下是没有被墙的命令，被墙把npm换成cnpm即可。安装hexo npm install hexo-cli -g 安装完成后，验证是否安装成功。 hexo -v 新建文件夹yourblog,输入命令 $ hexo init blog $ cd blog 新建博客 $ hexo new &quot;Hello Hexo&quot; 生成静态页面 $ hexo generate 运行服务 $ hexo server 然后打开浏览器输入 localhost:4000 即可访问本地静态页面。 接下来我们把本地静态页面PUSH到github 首先你要有github账号。 新建一个github.io的库 设置本地github配置参数 经本地静态页面push到github github设置 新建github账号就不在这里陈述了，如果有同学不会使用git将代码push到github的话可以参考 廖雪峰的官网我们来直接进行第二不，创建一个github.io库。首先登陆我们的github账号点击new repository,然后输入youname.github.iogit设置设置git配置信息 $ git config --global user.name &quot;你的用户名&quot; $ git config --global user.email &quot;你的邮箱&quot; hexo 设置 安装hexo git插件 npm install hexo-deployer-git --save 然后打开博客根目录的_config.yml文件大致内容是这个样子的 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192# Hexo Configuration## Docs: https://hexo.io/docs/configuration.html## Source: https://github.com/hexojs/hexo/# Sitetitle: 和女票抢可乐subtitle:description:author: MaxieLjlanguage:timezone:# URL## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;url: http://yoursite.comroot: /permalink: :year/:month/:day/:title/permalink_defaults:# Directorysource_dir: sourcepublic_dir: publictag_dir: tagsarchive_dir: archivescategory_dir: categoriescode_dir: downloads/codei18n_dir: :langskip_render:# Writingnew_post_name: :title.md # File name of new postsdefault_layout: posttitlecase: false # Transform title into titlecaseexternal_link: true # Open external links in new tabfilename_case: 0render_drafts: falsepost_asset_folder: falserelative_link: falsefuture: truehighlight: enable: true line_number: true auto_detect: false tab_replace:# Category &amp; Tagdefault_category: uncategorizedcategory_map:tag_map:# Date / Time format## Hexo uses Moment.js to parse and display date## You can customize the date format as defined in## http://momentjs.com/docs/#/displaying/format/date_format: YYYY-MM-DDtime_format: HH:mm:ss# Pagination## Set per_page to 0 to disable paginationper_page: 10pagination_dir: page# Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: yilia# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git repository: https://github.com/MaxieLj/MaxieLj.github.io.git branch: masterjsonContent: meta: false pages: false posts: title: true date: true path: true text: true raw: false content: false slug: false updated: false comments: false link: false permalink: false excerpt: false categories: false tags: true 我们只需要在尾部添加：1234deploy: type: git repository: https://github.com/MaxieLj/MaxieLj.github.io.git branch: master 然后我们运行 $ hexo g 生成静态文件然后推送到github $ hexo d 然后访问youname.github.io就可以看到生成的静态页面了当然我们一般是在本地调试好再用 hexo d推送到github","tags":[]}]