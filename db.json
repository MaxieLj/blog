{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/b325609689e6e350fab73951048aba5b_xl.jpg","path":"b325609689e6e350fab73951048aba5b_xl.jpg","modified":0,"renderable":0},{"_id":"themes/maupassant/source/css/donate.css","path":"css/donate.css","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/AliPayQR.png","path":"img/AliPayQR.png","modified":0,"renderable":1},{"_id":"themes/maupassant/source/css/style.scss","path":"css/style.scss","modified":0,"renderable":1},{"_id":"themes/maupassant/source/css/default.css","path":"css/default.css","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/BTCQR.png","path":"img/BTCQR.png","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/alipay.svg","path":"img/alipay.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/WeChatQR.png","path":"img/WeChatQR.png","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/bitcoin.svg","path":"img/bitcoin.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/github.svg","path":"img/github.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/donate/index.html","path":"donate/index.html","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/paypal.svg","path":"img/paypal.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/like.svg","path":"img/like.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/wechat.svg","path":"img/wechat.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/codeblock-resizer.js","path":"js/codeblock-resizer.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/fancybox.js","path":"js/fancybox.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/donate.js","path":"js/donate.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/smartresize.js","path":"js/smartresize.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/totop.js","path":"js/totop.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/share.js","path":"js/share.js","modified":0,"renderable":1},{"_id":"source/photo/img/c语言多维数组传参问题/result3.png","path":"photo/img/c语言多维数组传参问题/result3.png","modified":0,"renderable":0},{"_id":"source/photo/img/2018-06-19/servicePic1.png","path":"photo/img/2018-06-19/servicePic1.png","modified":0,"renderable":0},{"_id":"source/photo/img/c语言多维数组传参问题/result5.png","path":"photo/img/c语言多维数组传参问题/result5.png","modified":0,"renderable":0},{"_id":"source/photo/img/2018-06-19/servicePic5.png","path":"photo/img/2018-06-19/servicePic5.png","modified":0,"renderable":0},{"_id":"source/photo/img/2018-06-19/servicePic4.png","path":"photo/img/2018-06-19/servicePic4.png","modified":0,"renderable":0},{"_id":"source/photo/img/2018-06-19/servicePic3.png","path":"photo/img/2018-06-19/servicePic3.png","modified":0,"renderable":0},{"_id":"source/photo/img/php引用/引用后.png","path":"photo/img/php引用/引用后.png","modified":0,"renderable":0},{"_id":"source/photo/img/php引用/未引用前.png","path":"photo/img/php引用/未引用前.png","modified":0,"renderable":0},{"_id":"source/photo/img/php内存管理/写时复制.png","path":"photo/img/php内存管理/写时复制.png","modified":0,"renderable":0},{"_id":"source/photo/img/php内存管理/自身引用.png","path":"photo/img/php内存管理/自身引用.png","modified":0,"renderable":0},{"_id":"source/photo/img/php内存管理/释放.png","path":"photo/img/php内存管理/释放.png","modified":0,"renderable":0},{"_id":"source/photo/img/php数据结构/php数据结构.png","path":"photo/img/php数据结构/php数据结构.png","modified":0,"renderable":0},{"_id":"source/photo/img/php数据结构/zend_stirng内存中结构.png","path":"photo/img/php数据结构/zend_stirng内存中结构.png","modified":0,"renderable":0},{"_id":"source/photo/img/php数组实现/hashtable.png","path":"photo/img/php数组实现/hashtable.png","modified":0,"renderable":0},{"_id":"source/photo/img/php数组实现/链表冲突.png","path":"photo/img/php数组实现/链表冲突.png","modified":0,"renderable":0},{"_id":"source/photo/img/php数组实现/php数组具体实现.png","path":"photo/img/php数组实现/php数组具体实现.png","modified":0,"renderable":0},{"_id":"source/photo/img/tcp三次握手与四次挥手/100327002629.png","path":"photo/img/tcp三次握手与四次挥手/100327002629.png","modified":0,"renderable":0},{"_id":"source/photo/img/tcp三次握手与四次挥手/tcp四次挥手.png","path":"photo/img/tcp三次握手与四次挥手/tcp四次挥手.png","modified":0,"renderable":0},{"_id":"source/photo/img/tcp三次握手与四次挥手/tcp握手.png","path":"photo/img/tcp三次握手与四次挥手/tcp握手.png","modified":0,"renderable":0},{"_id":"source/photo/img/创建一个composer包/自动加载目录.png","path":"photo/img/创建一个composer包/自动加载目录.png","modified":0,"renderable":0},{"_id":"source/photo/img/数据库-explain/explain8.png","path":"photo/img/数据库-explain/explain8.png","modified":0,"renderable":0},{"_id":"source/photo/img/数据库索引/b+tree.png","path":"photo/img/数据库索引/b+tree.png","modified":0,"renderable":0},{"_id":"source/photo/img/数据库索引/b-tree.png","path":"photo/img/数据库索引/b-tree.png","modified":0,"renderable":0},{"_id":"source/photo/img/数据库索引/二级索引查找.png","path":"photo/img/数据库索引/二级索引查找.png","modified":0,"renderable":0},{"_id":"source/photo/img/数据库索引/范围查找.png","path":"photo/img/数据库索引/范围查找.png","modified":0,"renderable":0},{"_id":"source/photo/img/数据库索引/扫全表.png","path":"photo/img/数据库索引/扫全表.png","modified":0,"renderable":0},{"_id":"source/photo/img/数据库索引/精确查找.png","path":"photo/img/数据库索引/精确查找.png","modified":0,"renderable":0},{"_id":"source/photo/img/算法-盛水最多的容器/question_11.jpg","path":"photo/img/算法-盛水最多的容器/question_11.jpg","modified":0,"renderable":0},{"_id":"source/photo/img/数据库索引使用优化/picture3.png","path":"photo/img/数据库索引使用优化/picture3.png","modified":0,"renderable":0},{"_id":"source/photo/img/c语言多维数组传参问题/result1.png","path":"photo/img/c语言多维数组传参问题/result1.png","modified":0,"renderable":0},{"_id":"source/photo/img/c语言多维数组传参问题/result2.png","path":"photo/img/c语言多维数组传参问题/result2.png","modified":0,"renderable":0},{"_id":"source/photo/img/c语言多维数组传参问题/bug1.png","path":"photo/img/c语言多维数组传参问题/bug1.png","modified":0,"renderable":0},{"_id":"source/photo/img/c语言多维数组传参问题/result4.png","path":"photo/img/c语言多维数组传参问题/result4.png","modified":0,"renderable":0},{"_id":"source/photo/img/guzzle压测/逻辑上并行-100次结束.png","path":"photo/img/guzzle压测/逻辑上并行-100次结束.png","modified":0,"renderable":0},{"_id":"source/photo/img/php-curl/DingTalk20180718204055.png","path":"photo/img/php-curl/DingTalk20180718204055.png","modified":0,"renderable":0},{"_id":"source/photo/img/php-curl/DingTalk20180718203726.png","path":"photo/img/php-curl/DingTalk20180718203726.png","modified":0,"renderable":0},{"_id":"source/photo/img/php-curl/DingTalk20180718204343.png","path":"photo/img/php-curl/DingTalk20180718204343.png","modified":0,"renderable":0},{"_id":"source/photo/img/php-curl/DingTalk20180718204411.png","path":"photo/img/php-curl/DingTalk20180718204411.png","modified":0,"renderable":0},{"_id":"source/photo/img/swagger-ui/WX20180807-095949.png","path":"photo/img/swagger-ui/WX20180807-095949.png","modified":0,"renderable":0},{"_id":"source/photo/img/solr-增删改查/DingTalk20180621202319.png","path":"photo/img/solr-增删改查/DingTalk20180621202319.png","modified":0,"renderable":0},{"_id":"source/photo/img/solr-增删改查/执行删除操作结果.png","path":"photo/img/solr-增删改查/执行删除操作结果.png","modified":0,"renderable":0},{"_id":"source/photo/img/数据库-explain/explain10.png","path":"photo/img/数据库-explain/explain10.png","modified":0,"renderable":0},{"_id":"source/photo/img/数据库-explain/explain1.png","path":"photo/img/数据库-explain/explain1.png","modified":0,"renderable":0},{"_id":"source/photo/img/数据库-explain/explain11.png","path":"photo/img/数据库-explain/explain11.png","modified":0,"renderable":0},{"_id":"source/photo/img/数据库-explain/explain12.png","path":"photo/img/数据库-explain/explain12.png","modified":0,"renderable":0},{"_id":"source/photo/img/数据库-explain/explain2.png","path":"photo/img/数据库-explain/explain2.png","modified":0,"renderable":0},{"_id":"source/photo/img/数据库-explain/explain3.png","path":"photo/img/数据库-explain/explain3.png","modified":0,"renderable":0},{"_id":"source/photo/img/数据库-explain/explain4.png","path":"photo/img/数据库-explain/explain4.png","modified":0,"renderable":0},{"_id":"source/photo/img/数据库-explain/explain5.png","path":"photo/img/数据库-explain/explain5.png","modified":0,"renderable":0},{"_id":"source/photo/img/数据库-explain/explain6.png","path":"photo/img/数据库-explain/explain6.png","modified":0,"renderable":0},{"_id":"source/photo/img/数据库-explain/explain7.png","path":"photo/img/数据库-explain/explain7.png","modified":0,"renderable":0},{"_id":"source/photo/img/数据库-explain/explain9.png","path":"photo/img/数据库-explain/explain9.png","modified":0,"renderable":0},{"_id":"source/photo/img/数据库索引/InnoDB.png","path":"photo/img/数据库索引/InnoDB.png","modified":0,"renderable":0},{"_id":"source/photo/img/数据库索引/InnoDB2.png","path":"photo/img/数据库索引/InnoDB2.png","modified":0,"renderable":0},{"_id":"source/photo/img/数据库索引/MyISAM.png","path":"photo/img/数据库索引/MyISAM.png","modified":0,"renderable":0},{"_id":"themes/maupassant/source/js/gitment.browser.js","path":"js/gitment.browser.js","modified":0,"renderable":1},{"_id":"source/photo/img/2018-06-19/servicePic2.png","path":"photo/img/2018-06-19/servicePic2.png","modified":0,"renderable":0},{"_id":"source/photo/img/solr-增删改查/执行删除前数据.png","path":"photo/img/solr-增删改查/执行删除前数据.png","modified":0,"renderable":0},{"_id":"source/photo/img/solr-增删改查/执行结果.png","path":"photo/img/solr-增删改查/执行结果.png","modified":0,"renderable":0},{"_id":"source/photo/img/数据库索引使用优化/picture1.png","path":"photo/img/数据库索引使用优化/picture1.png","modified":0,"renderable":0},{"_id":"source/photo/img/数据库索引使用优化/picture2.png","path":"photo/img/数据库索引使用优化/picture2.png","modified":0,"renderable":0},{"_id":"source/photo/img/guzzle压测/带时间的并行请求结果.png","path":"photo/img/guzzle压测/带时间的并行请求结果.png","modified":0,"renderable":0},{"_id":"source/photo/img/guzzle压测/串行每个请求耗时.png","path":"photo/img/guzzle压测/串行每个请求耗时.png","modified":0,"renderable":0},{"_id":"source/photo/img/guzzle压测/逻辑上并行-100次.png","path":"photo/img/guzzle压测/逻辑上并行-100次.png","modified":0,"renderable":0},{"_id":"source/photo/img/solr-增删改查/更新操作.png","path":"photo/img/solr-增删改查/更新操作.png","modified":0,"renderable":0},{"_id":"source/photo/img/guzzle压测/带时间的串行请求结果.png","path":"photo/img/guzzle压测/带时间的串行请求结果.png","modified":0,"renderable":0},{"_id":"source/photo/img/solr-增删改查/执行删除操作.png","path":"photo/img/solr-增删改查/执行删除操作.png","modified":0,"renderable":0},{"_id":"source/photo/img/solr-增删改查/新增数据.png","path":"photo/img/solr-增删改查/新增数据.png","modified":0,"renderable":0},{"_id":"source/photo/img/guzzle压测/串行.png","path":"photo/img/guzzle压测/串行.png","modified":0,"renderable":0},{"_id":"source/photo/img/guzzle压测/并行.png","path":"photo/img/guzzle压测/并行.png","modified":0,"renderable":0},{"_id":"source/photo/img/kong/kong-404.png","path":"photo/img/kong/kong-404.png","modified":0,"renderable":0},{"_id":"source/photo/img/guzzle压测/逻辑上的串行-100次.png","path":"photo/img/guzzle压测/逻辑上的串行-100次.png","modified":0,"renderable":0},{"_id":"source/photo/img/kong/pg_hba.conf.png","path":"photo/img/kong/pg_hba.conf.png","modified":0,"renderable":0}],"Cache":[{"_id":"source/b325609689e6e350fab73951048aba5b_xl.jpg","hash":"f42904b1e5ce91bd3fae16b21c7928301e88c9da","modified":1546191980110},{"_id":"themes/maupassant/.gitignore","hash":"16945417d10c15c950306794dbb0d970b5a199fe","modified":1546192820747},{"_id":"themes/maupassant/.travis.yml","hash":"0339959f29deddc365e8fe8bd85da524410b9a23","modified":1546192820747},{"_id":"themes/maupassant/LICENSE","hash":"f0ac2f92770650c9835183f79010c0d307b34acd","modified":1546192820747},{"_id":"themes/maupassant/_config.yml","hash":"533e65270e628c05427fb246bfe8f8a19b81bd72","modified":1546947592146},{"_id":"themes/maupassant/README.md","hash":"a3dcfa9b646980ee5811ec03b4c5786618b85ff9","modified":1546192820747},{"_id":"themes/maupassant/package.json","hash":"f092433469eb87362e831326425a6a5c3c9fea0d","modified":1546192821011},{"_id":"source/_drafts/c语言指针与字符串.md","hash":"373f72131080552282f97b575064d2399370838b","modified":1546191980097},{"_id":"source/_drafts/gdb.md","hash":"d44a43d4b3ee5543f58f6a350345ffb48cd2448a","modified":1546191980097},{"_id":"source/_drafts/git-手册.md","hash":"c41e951909d9898c145f18cae26bf3f993f730d8","modified":1550680978548},{"_id":"source/_drafts/jMeter.md","hash":"045f55b08726884f9b0711e938893a4c3480b29e","modified":1546191980098},{"_id":"source/_drafts/kong.md","hash":"54e35048ac629a67b3e27a1d778c5f76071c9ee5","modified":1550720974698},{"_id":"source/_drafts/socket编程.md","hash":"55e17c181f2c393ef72788ab605467b78e6402c8","modified":1546191980098},{"_id":"source/_drafts/php闭包.md","hash":"01326f81d176bd8b61591cdb2dffca4ad2ff351b","modified":1550720974698},{"_id":"source/_drafts/strace.md","hash":"ee753534c702acf5ad1e6666774e8f3575720707","modified":1546191980098},{"_id":"source/_drafts/tcpdump.md","hash":"753a34520851c0d97336dd14430687656a446cb4","modified":1546191980098},{"_id":"source/_drafts/一次HTTP请求.md","hash":"440caeebbf6148ba12c8f7fe496334a860d99fe5","modified":1550720974699},{"_id":"source/_drafts/使用guzzle并行请求.md","hash":"22d033b0b42ba5f7a46be11f82fb80eb3630eed1","modified":1550720974699},{"_id":"source/_drafts/压测优化nginx日志.md","hash":"89f4b96c432a4199b47db2627c29f125a2ede947","modified":1546191980099},{"_id":"source/_drafts/使用sz-rz命令从服务下载上传文件.md","hash":"670df11aff8a8da13f2ebef14f7eeb76dc831c34","modified":1550720974700},{"_id":"source/_drafts/基于c语言实现链表.md","hash":"ea2b44221624a627128a8904ff83c79898c37d3f","modified":1546191980099},{"_id":"source/_drafts/如何实现psr4自动加载.md","hash":"2634350be8e0d44eed4c606ff563ff9c659e05b9","modified":1550681316063},{"_id":"source/_drafts/基于redis的分布式锁.md","hash":"0739f90263e33b0835e29be45579c51b710582bc","modified":1550681316062},{"_id":"source/_drafts/微服务数据一致性和服务可靠性.md","hash":"29f01ad04e5dea15d0bddf3ad9ef4918294b6891","modified":1550720974701},{"_id":"source/_drafts/算法-各个查找算法.md","hash":"70dd46283f5898182a97bb72898cbdfe334ebb2b","modified":1550720974702},{"_id":"source/_drafts/算法.md","hash":"001fffb219ce3ad6744e177358c581d8eb0baf23","modified":1550681316064},{"_id":"source/_drafts/设计模式.md","hash":"b6bdf5e601fc1ff08e604f55ddae60ece04487c2","modified":1550720974703},{"_id":"source/_posts/C语言多维数组传参问题.md","hash":"c0d7fb816596f0f3cecb5dfcdc7130c5907116b1","modified":1550720974704},{"_id":"source/_posts/hexo-git-github搭建博客.md","hash":"67af04b6c2cfce1c3213060e0f92b0d133f334b4","modified":1550720974706},{"_id":"source/_posts/http各个状态码含义.md","hash":"8d8c50fa58a97762a89f7100f106eb42ea13b96e","modified":1550720974707},{"_id":"source/_posts/php垃圾回收.md","hash":"76da252e9af7b39ecef74e1819974bd1c9d26f77","modified":1550720974710},{"_id":"source/_posts/php数据结构.md","hash":"b3213e68c2248d6951730405c937057adf63f8cd","modified":1546944919888},{"_id":"source/_posts/php数组实现.md","hash":"40f3c1e791fb136aee0523c3947ff41d8218faae","modified":1550681316067},{"_id":"source/_posts/php的&符号.md","hash":"3a829ae3f7a65c1752af6ab39a0635c400fe3937","modified":1546945008506},{"_id":"source/_posts/tcp三次握手与四次挥手.md","hash":"2d0f44b1254a4dab38baa0c630814a9f84a3137a","modified":1550720974711},{"_id":"source/_posts/websocket订阅火币成交记录.md","hash":"541b3ec27dfdb4a62b37a8dbe887b414d4c53711","modified":1550679946459},{"_id":"source/_posts/如何建立一个composer私有包.md","hash":"2c3f1a6598042075a33522e75bcbe273175c2fc8","modified":1550720974711},{"_id":"source/_posts/数据库-索引使用优化.md","hash":"4364c7aa9fa83a839603bba71730795dea01ebb5","modified":1550720974713},{"_id":"source/_posts/数据库-explain执行计划.md","hash":"f5df67443441521e7ab6182bf7bd0243437703e1","modified":1550720974712},{"_id":"source/_posts/数据库-索引简介.md","hash":"0ecd0cd08658f7201abcb1aa025a85a13e28274e","modified":1550720974714},{"_id":"source/_posts/数据库隔离级别.md","hash":"866d6a17fae05128705701ed2a2a258b514885f0","modified":1550720974715},{"_id":"source/_posts/算法-三角形最小路径和.md","hash":"99dd75f2cc563cf6a60b8e45eb3caaf2b4670aa2","modified":1550720974717},{"_id":"source/_posts/算法-三数之和.md","hash":"f6430bca441e9697478ed5c562d5d82522c0a580","modified":1550720974716},{"_id":"source/_posts/算法-二叉树最近公共祖先.md","hash":"979b49334222678b538d52ad41f642b10d9bf5cf","modified":1550720974717},{"_id":"source/_posts/算法-全排列-46.md","hash":"5640fa9f9266589519f097ed76d4d487d912a2eb","modified":1551172725236},{"_id":"source/_posts/算法-合并k个链表.md","hash":"6ba55f9f6b4341d10a4216b4f849f81ad1d58f51","modified":1550720974721},{"_id":"source/_posts/算法-几种排序算法的实现.md","hash":"4197c1d7134a0568eb901aecb143e414fc231e09","modified":1551334834549},{"_id":"source/_posts/算法-俄罗斯套娃问题.md","hash":"bdcb6a3589faa9c93bdced67ae995954d1208184","modified":1550720974718},{"_id":"source/_posts/算法-求两个有序链表的中位数.md","hash":"a859f839ea2ba49c7a72b36c83543fd89ee01c52","modified":1550720974724},{"_id":"source/_posts/算法-水壶问题.md","hash":"89fb8f677101b098830ce99845e2e3d93de41a1c","modified":1550720974723},{"_id":"source/_posts/算法-最接近的三数之和.md","hash":"33f51b41f1f6b6f25dd8dc68e4372cff88c0e7d5","modified":1550720974722},{"_id":"source/_posts/算法-最大子序和.md","hash":"11872a344bdb4bff4fd8c6462340558afb09b0d2","modified":1550720974722},{"_id":"source/_posts/算法-求最大正方形面积.md","hash":"eeb3e6c17bf08ce3b39decdc941d7659c3daeb8a","modified":1550720974725},{"_id":"source/_posts/算法-盛水最多的容器.md","hash":"fc2ecd2240cf60214513865bdf2125d368545345","modified":1550720974726},{"_id":"source/_posts/算法-螺旋矩阵.md","hash":"59bedfe65d273d438f4343a81c6ed4c6f7caf953","modified":1550720974727},{"_id":"source/_posts/算法-求第k个排序.md","hash":"bc65c14a276eb30b3870265d3a5cdee5fd78f53e","modified":1550720974725},{"_id":"source/_posts/算法-链表相交.md","hash":"5822c8d8695d12bcd81e523dcec90b5da7697418","modified":1550720974727},{"_id":"source/about/ceshi.md","hash":"100cc1218874d0d65062303d8f72e2ca7da7c400","modified":1550720974728},{"_id":"source/about/index.md","hash":"6d06e6d07e27e0b051b39cb02312be0abb346f93","modified":1550720974729},{"_id":"themes/maupassant/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1546192820736},{"_id":"source/photo/index.md","hash":"0aa76c50ad7e4c763eecba26bff548f2666b8f7f","modified":1546191980170},{"_id":"themes/maupassant/.git/config","hash":"037345b11c41abb3dbbbd6e0242ced24979a7097","modified":1546192820742},{"_id":"source/photo/output.json","hash":"b6f0c8376f879349bd41590b2d9301d2faf6b38e","modified":1546191980171},{"_id":"source/photo/tool.js","hash":"9166382c1d5e9dffac1cf484503a70488c720166","modified":1546191980171},{"_id":"themes/maupassant/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1546192810015},{"_id":"themes/maupassant/.git/index","hash":"f7a6a46ac94aeb136886fd683a1f1439b6239171","modified":1546945375449},{"_id":"themes/maupassant/.git/packed-refs","hash":"3d1060ac070341c07c117aace6e93ee59887ec2b","modified":1546192820731},{"_id":"themes/maupassant/languages/de-DE.yml","hash":"5d3556a885e355a8c2da65ef3e7b3ee36a628bfa","modified":1546192820748},{"_id":"themes/maupassant/languages/es-ES.yml","hash":"58e1d04bcd1834fa9d2960e18e027abbbccbedc9","modified":1546192820748},{"_id":"themes/maupassant/languages/en.yml","hash":"c3fb5c155560a00889a75882c680afe1197ebf1a","modified":1546192820748},{"_id":"themes/maupassant/languages/fr-FR.yml","hash":"b47906ec0abf867fb3e3360bc046b7afb68aee25","modified":1546192820749},{"_id":"themes/maupassant/languages/ko.yml","hash":"909a33e0befa6978e8e72157c6b415b48551ee31","modified":1546192820749},{"_id":"themes/maupassant/languages/zh-TW.yml","hash":"bf3ab970f2ab3f29ddeb9f59bf98163be635e284","modified":1546192820749},{"_id":"themes/maupassant/languages/ru.yml","hash":"2476a631f4d3c668de04af85a6c2c97ba2a57e96","modified":1546192820749},{"_id":"themes/maupassant/languages/zh-CN.yml","hash":"710b204e637c18b86ac7c681f7d1cf8dfeddf4bb","modified":1546192820749},{"_id":"themes/maupassant/layout/base-without-sidebar.pug","hash":"16c4d1079450f801b5ac079d3cc101856d8f387c","modified":1546192820979},{"_id":"themes/maupassant/layout/archive.pug","hash":"665582bb4092fcd81bfaf4d08fc1689abee1e6c4","modified":1546192820978},{"_id":"themes/maupassant/layout/index.pug","hash":"0435a4e5f5c6976e05b3079d335453c246f5ba6e","modified":1546192820979},{"_id":"themes/maupassant/layout/base.pug","hash":"a4e32bcb580b76af9ad0582d9d3f0107e34509ed","modified":1546192820979},{"_id":"themes/maupassant/layout/page.pug","hash":"8cfd307b13cad8be34a1e75c4566f96c1722e08e","modified":1546192820980},{"_id":"themes/maupassant/layout/single-column.pug","hash":"0593f261dc208bb0b5c4232eb41eff597a291bd9","modified":1546192820991},{"_id":"themes/maupassant/layout/timeline.pug","hash":"84fbfc92ccdf291b491140d89557553141a5d3f9","modified":1546192821010},{"_id":"themes/maupassant/layout/post.pug","hash":"bfe10ecfb515d241bb9a07e7d08be5779f2ef119","modified":1546192820982},{"_id":"themes/maupassant/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1546192810016},{"_id":"themes/maupassant/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1546192810017},{"_id":"themes/maupassant/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1546192810015},{"_id":"themes/maupassant/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1546192810017},{"_id":"themes/maupassant/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1546192810016},{"_id":"themes/maupassant/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1546192810016},{"_id":"themes/maupassant/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1546192810016},{"_id":"themes/maupassant/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1546192810015},{"_id":"themes/maupassant/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1546192810017},{"_id":"themes/maupassant/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1546192810017},{"_id":"themes/maupassant/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1546192810015},{"_id":"themes/maupassant/.git/logs/HEAD","hash":"df76a818b967c6cd66ab7e1996089fa3dc4df0b5","modified":1546192820737},{"_id":"themes/maupassant/source/css/donate.css","hash":"f019876946aeb80e567ece250d54c1327c794583","modified":1546192821021},{"_id":"themes/maupassant/source/img/AliPayQR.png","hash":"7787b5d91cbf0e19a1260df24f7d949771c7d45b","modified":1546192821026},{"_id":"themes/maupassant/source/css/style.scss","hash":"b44da192f0875e144bf7990a99b42e31e986e099","modified":1546192821025},{"_id":"themes/maupassant/source/css/default.css","hash":"7fbb18b73b44ed11193739c55fce53a6f173cf68","modified":1546192821020},{"_id":"themes/maupassant/source/img/BTCQR.png","hash":"7d1c80f953bfb6f0a37d432b04c936ea165bfd97","modified":1546192821027},{"_id":"themes/maupassant/source/img/alipay.svg","hash":"46cc0552a9f6d700d618db3fcad25e1b8e697e36","modified":1546192821028},{"_id":"themes/maupassant/source/img/WeChatQR.png","hash":"8c41aca7883e5ff714c56556f5fff8e7e7c38093","modified":1546192821027},{"_id":"themes/maupassant/source/img/bitcoin.svg","hash":"635f7cca5e675d192be2717788175c7a2146013a","modified":1546192821028},{"_id":"themes/maupassant/source/img/github.svg","hash":"90ba9a3b0dc19e70e742a39b014194f801e00f97","modified":1546192821028},{"_id":"themes/maupassant/source/donate/index.html","hash":"04fb043ed312f6eaf8435440739febac2d465de0","modified":1546192821025},{"_id":"themes/maupassant/source/img/paypal.svg","hash":"92f3bc495f20a0190d3041be03345c46d6238c25","modified":1546192821030},{"_id":"themes/maupassant/source/img/like.svg","hash":"22a2754dc454d7b0321b70914fb2936b8d2ea8ab","modified":1546192821029},{"_id":"themes/maupassant/source/img/wechat.svg","hash":"330496ad42446a29f37a2b97fc388ebd77a8cb9f","modified":1546192821030},{"_id":"themes/maupassant/source/js/codeblock-resizer.js","hash":"5d0b786d60bf225d9eabcc9cece2719ff4d9b6cd","modified":1546192821030},{"_id":"themes/maupassant/source/js/fancybox.js","hash":"13c4781570339f4fba76a3d7f202e442817dd605","modified":1546192821033},{"_id":"themes/maupassant/source/js/donate.js","hash":"780beaaf44b1e6c057752bdbc085b1048937e5e7","modified":1546192821032},{"_id":"themes/maupassant/source/js/smartresize.js","hash":"3ef157fd877167e3290f42c67a624ea375a46c24","modified":1546192821035},{"_id":"themes/maupassant/source/js/totop.js","hash":"7dbf8fcf582a4fb6eb9b2c60d6de9f9c2091ec4c","modified":1546192821035},{"_id":"themes/maupassant/layout/_partial/after_footer.pug","hash":"06969aefa52218aa2320b7d735f751df4a7b5e1d","modified":1546192820750},{"_id":"themes/maupassant/layout/_partial/comments.pug","hash":"ff14baa25f6db34dedfb5e029c25687a335ad430","modified":1546192820751},{"_id":"themes/maupassant/layout/_partial/head.pug","hash":"025c34e4e89d99b866fd5af2924e60e9f63e386b","modified":1546192820752},{"_id":"themes/maupassant/layout/_partial/footer.pug","hash":"650781b5bc8c632658ad6880ba663b1e3bfb5798","modified":1546192820751},{"_id":"themes/maupassant/source/js/search.js","hash":"0c0630e2ef213701d393b041f10572e951a27985","modified":1546192821035},{"_id":"themes/maupassant/layout/_partial/mathjax.pug","hash":"0ca48cbf73f5a5bbf5e2f615ce6c6366fe5662e7","modified":1546192820752},{"_id":"themes/maupassant/layout/_partial/paginator.pug","hash":"53f9cb77448e84a98da5eb688e2e12b173c555bb","modified":1546192820754},{"_id":"themes/maupassant/layout/_partial/mathjax2.pug","hash":"10fb2af46002c57b6a38e2c530eaa8c3e0a77c67","modified":1546192820753},{"_id":"themes/maupassant/layout/_partial/post_nav.pug","hash":"a2d698c84bb6da08195fe870dbd7215f65388d3f","modified":1546192820754},{"_id":"themes/maupassant/layout/_partial/totop.pug","hash":"8225bbc3cdb9648bc2e6872e5c616a9a1e4def4f","modified":1546192820757},{"_id":"themes/maupassant/source/js/share.js","hash":"a2f9de374523dc7f2ddb90ed5f24b668c20d9272","modified":1546192821035},{"_id":"themes/maupassant/layout/_partial/wordcount.pug","hash":"004c8a3edc19d428179b83a0f97eae3c1a6d3cfa","modified":1546192820758},{"_id":"themes/maupassant/layout/_partial/tag.pug","hash":"0f0e6770e9d5dd8040e330d71bbbfadd2df36a28","modified":1546192820755},{"_id":"themes/maupassant/layout/_widget/links.pug","hash":"c45aa7ec00158579e58f1f8dfd890447bb5e5e54","modified":1546192820762},{"_id":"themes/maupassant/layout/_partial/helpers.pug","hash":"acdf9e2d52ee86c831fa15ce1570930c5779bc78","modified":1546192820752},{"_id":"themes/maupassant/layout/_widget/recent_comments.pug","hash":"4102d446f13b02ff617f055c2a8f726bca12744a","modified":1546192820764},{"_id":"themes/maupassant/layout/_widget/recent_posts.pug","hash":"19431336d724d2118e46da43683bce9063176541","modified":1546192820765},{"_id":"themes/maupassant/layout/_widget/search.pug","hash":"6e8e4123cca38840c4607c1a056205972b82bb7b","modified":1546192820770},{"_id":"themes/maupassant/layout/_widget/tag.pug","hash":"132f049ce677d0e38f50073174c4ee4b825d4a06","modified":1546192820978},{"_id":"themes/maupassant/layout/_widget/category.pug","hash":"7c6aed762934ca51aa2669b886254da24b77bc14","modified":1546192820758},{"_id":"source/photo/img/c语言多维数组传参问题/result3.png","hash":"d0998081b30612ee0de21c01cddb3a2983f6d983","modified":1550720974737},{"_id":"source/photo/img/2018-06-19/servicePic1.png","hash":"d70e7b5cc208e05b58b9716a1affb8a4018fc929","modified":1546191980110},{"_id":"source/photo/img/c语言多维数组传参问题/result5.png","hash":"6ef9fbb697930728c692d2d10285ad446175cc1e","modified":1550720974740},{"_id":"source/photo/img/2018-06-19/servicePic5.png","hash":"523b397346c0042541a83d0ce9d5503e78b8b6d0","modified":1546191980113},{"_id":"source/photo/img/2018-06-19/servicePic4.png","hash":"85884fa22437134430169182e3ea72df03fd7e43","modified":1546191980113},{"_id":"source/photo/img/2018-06-19/servicePic3.png","hash":"17be50dacdca270537254810c882fad0cc060cb2","modified":1546191980112},{"_id":"source/photo/img/php引用/引用后.png","hash":"9597a3a0a657405cdd1202aff6b89c6310de3764","modified":1546191980155},{"_id":"source/photo/img/php引用/未引用前.png","hash":"754834c971f01ca2808ea626deafa39e9adeee8c","modified":1546191980155},{"_id":"source/photo/img/php内存管理/写时复制.png","hash":"89fdb3b8d476cb02e6ddc9bf0f3eb75ec8ba27aa","modified":1546191980153},{"_id":"source/photo/img/php内存管理/自身引用.png","hash":"98af7602bc35fb49c9d5482afcf22d0fab024459","modified":1546191980154},{"_id":"source/photo/img/php内存管理/释放.png","hash":"48e5bfc07235ea4fd58df90369a00ddc5c91da08","modified":1546191980154},{"_id":"source/photo/img/php数据结构/php数据结构.png","hash":"9d90514461188eeded55f8428baae352753f9a68","modified":1546191980155},{"_id":"source/photo/img/php数据结构/zend_stirng内存中结构.png","hash":"ba352ab7603161e9b22bab7346c7f36b09579f1d","modified":1546191980155},{"_id":"source/photo/img/php数组实现/hashtable.png","hash":"c2e5ad35cb5d5a8b906d6e1ffb3165584511d83e","modified":1546191980156},{"_id":"source/photo/img/php数组实现/链表冲突.png","hash":"8832a1cea6dc461fdf5da067b9451f2dbdd4a09a","modified":1546191980157},{"_id":"source/photo/img/php数组实现/php数组具体实现.png","hash":"a3bd58cf36844ad094ef214cb2be3e6e4d2998a9","modified":1546191980156},{"_id":"source/photo/img/tcp三次握手与四次挥手/100327002629.png","hash":"884a5aab00ff268bbb86ad1449b237c624200723","modified":1550720974741},{"_id":"source/photo/img/tcp三次握手与四次挥手/tcp四次挥手.png","hash":"e1ebd034dac6668e107fafd67b1e94a710a1d463","modified":1550720974743},{"_id":"source/photo/img/tcp三次握手与四次挥手/tcp握手.png","hash":"a3b4aba56d7ac7f8d740ed51c32f4acbc3b1785a","modified":1550720974745},{"_id":"source/photo/img/创建一个composer包/自动加载目录.png","hash":"64abb657c6240079a6507cc4a0c5b3618b082cf1","modified":1546191980170},{"_id":"source/photo/img/数据库-explain/explain8.png","hash":"e521c2cdf29853d24b80474f2b4f40926a7ea0cb","modified":1550720974780},{"_id":"source/photo/img/数据库索引/b+tree.png","hash":"d90b011c86f4e2339bfff855e67177e933a0da07","modified":1550720974803},{"_id":"source/photo/img/数据库索引/b-tree.png","hash":"95c9bca0ec489a90e836cc5413078e96185bb8cc","modified":1550720974808},{"_id":"source/photo/img/数据库索引/二级索引查找.png","hash":"f12ab93d17f9a82a6cb6bf340a017846d3e23318","modified":1550720974812},{"_id":"source/photo/img/数据库索引/范围查找.png","hash":"96813b331d7da28a84db9fa5dc683a1569fb3d52","modified":1550720974831},{"_id":"source/photo/img/数据库索引/扫全表.png","hash":"8c81ab0c7a0b196736600443a3ccfe6e456b2c35","modified":1550720974816},{"_id":"source/photo/img/数据库索引/精确查找.png","hash":"57b3c94682659dad2069329e9f4877e6906312df","modified":1550720974821},{"_id":"source/photo/img/算法-盛水最多的容器/question_11.jpg","hash":"e775d41977358490db76fca98876432928b2e076","modified":1550720974846},{"_id":"source/photo/img/数据库索引使用优化/picture3.png","hash":"2f90beef1b6dc67f87d4433bd182e9b732edd4c2","modified":1550720974843},{"_id":"themes/maupassant/.git/refs/heads/master","hash":"8d6c2028163017f65bb54fb912c65c6455ce7583","modified":1546192820737},{"_id":"themes/maupassant/.git/objects/pack/pack-c9f899d4b09b3e87558ae12626842798eb209708.idx","hash":"5823786eecf1806bb11faf62fa89fbbb363b31f4","modified":1546192820715},{"_id":"source/photo/img/c语言多维数组传参问题/result1.png","hash":"406fe2089b81d30044ffe2e62a9eae5d8e545675","modified":1550720974734},{"_id":"source/photo/img/c语言多维数组传参问题/result2.png","hash":"d6c2bbfb51d9d392edb90b5e6dffbc0196bc086b","modified":1550720974736},{"_id":"source/photo/img/c语言多维数组传参问题/bug1.png","hash":"b53eb5f7562f2f46a27b99637331f648e639dcd2","modified":1550720974732},{"_id":"source/photo/img/c语言多维数组传参问题/result4.png","hash":"8118e8c920255aafc242b61e2d24a4b79dfe1b55","modified":1550720974738},{"_id":"source/photo/img/guzzle压测/逻辑上并行-100次结束.png","hash":"119848567dd0203e6101d2ea437fbd976e054ac4","modified":1546191980129},{"_id":"source/photo/img/php-curl/DingTalk20180718204055.png","hash":"ebe305b6b44223e9e5d2761ad257d252b4dbfec0","modified":1546191980151},{"_id":"source/photo/img/php-curl/DingTalk20180718203726.png","hash":"c7f3e0a5e85439f98b330994c35ef3944254e5df","modified":1546191980150},{"_id":"source/photo/img/php-curl/DingTalk20180718204343.png","hash":"2bea4819d0eab6d599bf82f1a06d16787f94ae66","modified":1546191980152},{"_id":"source/photo/img/php-curl/DingTalk20180718204411.png","hash":"faf427a5248d8466352ca960417ff6c97940ceec","modified":1546191980153},{"_id":"source/photo/img/swagger-ui/WX20180807-095949.png","hash":"da067d9351db2e6e4a28343c1cb5c2ca2c8cab1e","modified":1546191980169},{"_id":"source/photo/img/solr-增删改查/DingTalk20180621202319.png","hash":"5dfa9cb97017ed029184472ecbb11a9142704bed","modified":1546191980158},{"_id":"source/photo/img/solr-增删改查/执行删除操作结果.png","hash":"f21588f4d3afcb91d8122b87cf2f74d0b0927273","modified":1546191980163},{"_id":"source/photo/img/数据库-explain/explain10.png","hash":"fe460a7514e5fb3a0d08bf0c43ab51453635e915","modified":1550720974749},{"_id":"source/photo/img/数据库-explain/explain1.png","hash":"8a123dee30ec77accd1a00078929c9c6a0249426","modified":1550720974747},{"_id":"source/photo/img/数据库-explain/explain11.png","hash":"ed704c3127cbaea15bfc923b7fd8b42b845f27ea","modified":1550720974752},{"_id":"source/photo/img/数据库-explain/explain12.png","hash":"3582cdf3f1a752f7ed94bf65520de53963948e2f","modified":1550720974755},{"_id":"source/photo/img/数据库-explain/explain2.png","hash":"7a55291bcaf15f2e940db9374d37522e0e0ddb28","modified":1550720974757},{"_id":"source/photo/img/数据库-explain/explain3.png","hash":"61ca1dc490a7546942c3801c2a4aa46bc73c9016","modified":1550720974759},{"_id":"source/photo/img/数据库-explain/explain4.png","hash":"7410ade5ba8fa01a9472983a0f54b04843a241be","modified":1550720974760},{"_id":"source/photo/img/数据库-explain/explain5.png","hash":"c22fe40ed112a7236492ad8e1123856e2251d390","modified":1550720974764},{"_id":"source/photo/img/数据库-explain/explain6.png","hash":"a870ea59cba8c4de9e3c35a4514493b45067248f","modified":1550720974772},{"_id":"source/photo/img/数据库-explain/explain7.png","hash":"5638c30967e79ae23e95dd8506992e223cce7778","modified":1550720974777},{"_id":"source/photo/img/数据库-explain/explain9.png","hash":"a4aef07f8efd83cce75ee708557def70952c009c","modified":1550720974785},{"_id":"source/photo/img/数据库索引/InnoDB.png","hash":"6b161e52f174aeebb8d48a354dd8470a24988adc","modified":1550720974791},{"_id":"source/photo/img/数据库索引/InnoDB2.png","hash":"08f95e5a4bddf14a9987947d2786a8fccdb7a9f1","modified":1550720974796},{"_id":"source/photo/img/数据库索引/MyISAM.png","hash":"d5f787883a37559b84bba7e9f23b59b09b075f8b","modified":1550720974799},{"_id":"themes/maupassant/source/js/gitment.browser.js","hash":"376446d9c5930576016f97dd63e5e6616c94d8d4","modified":1546192821034},{"_id":"source/photo/img/2018-06-19/servicePic2.png","hash":"eb24df666df5261869eee0f24b7285485789bd83","modified":1546191980112},{"_id":"source/photo/img/solr-增删改查/执行删除前数据.png","hash":"6661fbdb596354789ad24d6bb4c9a4fa8b9d9eb2","modified":1546191980159},{"_id":"source/photo/img/solr-增删改查/执行结果.png","hash":"7dc54985909b181f82c5be86204f562e29289400","modified":1546191980164},{"_id":"source/photo/img/数据库索引使用优化/picture1.png","hash":"63c2eb59a7b560bf21c8a282162614c1bda24f88","modified":1550720974837},{"_id":"source/photo/img/数据库索引使用优化/picture2.png","hash":"80b3d4ae105f0256475e3bc3b17def6c65724721","modified":1550720974841},{"_id":"themes/maupassant/.git/logs/refs/heads/master","hash":"df76a818b967c6cd66ab7e1996089fa3dc4df0b5","modified":1546192820738},{"_id":"themes/maupassant/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1546192820735},{"_id":"source/photo/img/guzzle压测/带时间的并行请求结果.png","hash":"ce356c2c25d1e36c8ef3430432aa50ece32eeaf8","modified":1546191980123},{"_id":"source/photo/img/guzzle压测/串行每个请求耗时.png","hash":"f5da5dae9b9810e7f44fcd55687110856a1cc1a0","modified":1546191980118},{"_id":"source/photo/img/guzzle压测/逻辑上并行-100次.png","hash":"3fb745973c0fe5e83c0e3e0015996ac296d6f3c1","modified":1546191980128},{"_id":"source/photo/img/solr-增删改查/更新操作.png","hash":"037a32d4c743e6d9143f0558db68a4bb2a87a8f1","modified":1546191980168},{"_id":"source/photo/img/guzzle压测/带时间的串行请求结果.png","hash":"c186c02d5fe483853df7f94b8bb1725df17d4fe2","modified":1546191980121},{"_id":"source/photo/img/solr-增删改查/执行删除操作.png","hash":"1260cbf7fff4519a3e6a318e6a82a2c0335b7d4e","modified":1546191980161},{"_id":"source/photo/img/solr-增删改查/新增数据.png","hash":"51b48f48a30b3f10d82f02ca1ef9ed4c69648b40","modified":1546191980166},{"_id":"themes/maupassant/.git/logs/refs/remotes/origin/HEAD","hash":"df76a818b967c6cd66ab7e1996089fa3dc4df0b5","modified":1546192820735},{"_id":"source/photo/img/guzzle压测/串行.png","hash":"7b4b69870d3f717ef74036d144f06020104f6b42","modified":1546191980116},{"_id":"source/photo/img/guzzle压测/并行.png","hash":"8d678769c9c5c73db9e1b4bcb88f93c35fb60523","modified":1546191980126},{"_id":"source/photo/img/kong/kong-404.png","hash":"3d3dd12a068d9c8d1b2d4dec1d702a486583a3f3","modified":1546191980142},{"_id":"themes/maupassant/.git/objects/pack/pack-c9f899d4b09b3e87558ae12626842798eb209708.pack","hash":"1de01345e0b6f0e93c2a9f5c6b78b261ef76d051","modified":1546192820714},{"_id":"source/photo/img/guzzle压测/逻辑上的串行-100次.png","hash":"518b74fc8648770dd69471e41288618be4a09490","modified":1546191980137},{"_id":"source/photo/img/kong/pg_hba.conf.png","hash":"3474a8f6dcbb890b8f528fb7a07bd098a564512e","modified":1546191980149}],"Category":[{"name":"kong","_id":"cjswwkdou0006g7wwhlded0lv"},{"name":"php","_id":"cjswwkdoz000bg7wwdg65cqsy"},{"name":"网络","_id":"cjswwkdp3000ig7wwfu8gz6fo"},{"name":"工具","_id":"cjswwkdp6000pg7wwn5hdjppf"},{"name":"微服务","_id":"cjswwkdpc0010g7wwry4n7sfj"},{"name":"算法","_id":"cjswwkdpf0015g7wwvaopdff3"},{"name":"设计模式","_id":"cjswwkdpj001bg7wwqabnyz7k"},{"name":"hexo","_id":"cjswwkdpm001hg7wwlbemg46l"},{"name":"http","_id":"cjswwkdpp001ng7wwpwx88pdv"},{"name":"php源码学习","_id":"cjswwkdps001vg7wwx45c27i7"},{"name":"折腾","_id":"cjswwkdq3002gg7wwgbkz6z0u"},{"name":"数据库","_id":"cjswwkdq5002lg7wwx956c1eq"},{"name":"c语言","_id":"cjswwkdq6002sg7ww69oxbjc3"}],"Data":[],"Page":[{"_content":"l;alla","source":"about/ceshi.md","raw":"l;alla","date":"2019-02-21T03:49:34.728Z","updated":"2019-02-21T03:49:34.728Z","path":"about/ceshi.html","title":"","comments":1,"layout":"page","_id":"cjswwkdqp0034g7wwkwhobvgc","content":"<p>l;alla</p>\n","site":{"data":{}},"excerpt":"","more":"<p>l;alla</p>\n"},{"title":"个人简介","date":"2015-06-26T14:04:09.000Z","tags":"git","toc":true,"_content":"\n待补充 \n","source":"about/index.md","raw":"---\ntitle: 个人简介\ndate: 2015-06-26 22:04:09\ntags: git\ntoc: true\n---\n\n待补充 \n","updated":"2019-02-21T03:49:34.729Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjswwkdqq0036g7ww1f6f4ccg","content":"<p>待补充 </p>\n","site":{"data":{}},"excerpt":"","more":"<p>待补充 </p>\n"},{"title":"相册","noDate":"true","_content":"<link type=\"text/css\" href=\"/fancybox/jquery.fancybox.css\" rel=\"stylesheet\">\n<div class=\"instagram\"><section class=\"archives album\"><ul class=\"img-box-ul\"></ul></section></div>\n\t\n</div>\n<script src=\"/js/photo.js\"></script>\n<script src=\"/js/jquery-3.1.1.min.js\"></script>\n<script type=\"text/javascript\">\nfunction test() {\n\t$.getJSON(\"/photo/output.json\", function (data) {\n\t\tvar li=\"\";\n    \t for(i=0;i<=data.length-1;i++){\n    \t \tli += '<div style=\"width:250px;height:250px;float:left;margin-left:10px\"><img src=\"https://raw.githubusercontent.com/MaxieLj/blog/master/photos/' + data[i] + '\"  style=\"width:100%; height:100%;float:left\"/></div>'\n                   ;\n    \t }\n       li+='<div style=\"clear:both\"></div>'\n    \t $('.instagram').append(li);   \t\n    });\n    \n}\ntest();\n\n\t\n</script>","source":"photo/index.md","raw":"title: 相册\nnoDate: 'true'\n---\n<link type=\"text/css\" href=\"/fancybox/jquery.fancybox.css\" rel=\"stylesheet\">\n<div class=\"instagram\"><section class=\"archives album\"><ul class=\"img-box-ul\"></ul></section></div>\n\t\n</div>\n<script src=\"/js/photo.js\"></script>\n<script src=\"/js/jquery-3.1.1.min.js\"></script>\n<script type=\"text/javascript\">\nfunction test() {\n\t$.getJSON(\"/photo/output.json\", function (data) {\n\t\tvar li=\"\";\n    \t for(i=0;i<=data.length-1;i++){\n    \t \tli += '<div style=\"width:250px;height:250px;float:left;margin-left:10px\"><img src=\"https://raw.githubusercontent.com/MaxieLj/blog/master/photos/' + data[i] + '\"  style=\"width:100%; height:100%;float:left\"/></div>'\n                   ;\n    \t }\n       li+='<div style=\"clear:both\"></div>'\n    \t $('.instagram').append(li);   \t\n    });\n    \n}\ntest();\n\n\t\n</script>","date":"2018-12-30T17:46:20.170Z","updated":"2018-12-30T17:46:20.170Z","path":"photo/index.html","comments":1,"layout":"page","_id":"cjswwkdqs0039g7wwtqgclgh7","content":"<p><link type=\"text/css\" href=\"/fancybox/jquery.fancybox.css\" rel=\"stylesheet\"></p>\n<div class=\"instagram\"><section class=\"archives album\"><ul class=\"img-box-ul\"></ul></section></div>\n\n<p></p>\n<script src=\"/js/photo.js\"></script>\n<script src=\"/js/jquery-3.1.1.min.js\"></script>\n<script type=\"text/javascript\">\nfunction test() {\n    $.getJSON(\"/photo/output.json\", function (data) {\n        var li=\"\";\n         for(i=0;i<=data.length-1;i++){\n             li += '<div style=\"width:250px;height:250px;float:left;margin-left:10px\"><img src=\"https://raw.githubusercontent.com/MaxieLj/blog/master/photos/' + data[i] + '\"  style=\"width:100%; height:100%;float:left\"/></div>'\n                   ;\n         }\n       li+='<div style=\"clear:both\"></div>'\n         $('.instagram').append(li);       \n    });\n\n}\ntest();\n\n\n</script>","site":{"data":{}},"excerpt":"","more":"<p><link type=\"text/css\" href=\"/fancybox/jquery.fancybox.css\" rel=\"stylesheet\"></p>\n<div class=\"instagram\"><section class=\"archives album\"><ul class=\"img-box-ul\"></ul></section></div>\n\n<p></p>\n<script src=\"/js/photo.js\"></script>\n<script src=\"/js/jquery-3.1.1.min.js\"></script>\n<script type=\"text/javascript\">\nfunction test() {\n    $.getJSON(\"/photo/output.json\", function (data) {\n        var li=\"\";\n         for(i=0;i<=data.length-1;i++){\n             li += '<div style=\"width:250px;height:250px;float:left;margin-left:10px\"><img src=\"https://raw.githubusercontent.com/MaxieLj/blog/master/photos/' + data[i] + '\"  style=\"width:100%; height:100%;float:left\"/></div>'\n                   ;\n         }\n       li+='<div style=\"clear:both\"></div>'\n         $('.instagram').append(li);       \n    });\n\n}\ntest();\n\n\n</script>"},{"_content":"[\n\t\"219305422169140726.jpg\",\n\t\"326320136918309177.jpg\",\n\t\"832021159053859552.jpg\",\n\t\"844103819611894943.jpg\"\n]","source":"photo/output.json","raw":"[\n\t\"219305422169140726.jpg\",\n\t\"326320136918309177.jpg\",\n\t\"832021159053859552.jpg\",\n\t\"844103819611894943.jpg\"\n]","date":"2018-12-30T17:46:20.171Z","updated":"2018-12-30T17:46:20.171Z","path":"photo/output.json","layout":"false","title":"","comments":1,"_id":"cjswwkdqu003dg7wwiqxi4fgg","content":"[\"219305422169140726.jpg\",\"326320136918309177.jpg\",\"832021159053859552.jpg\",\"844103819611894943.jpg\"]","site":{"data":{}},"excerpt":"","more":"[\"219305422169140726.jpg\",\"326320136918309177.jpg\",\"832021159053859552.jpg\",\"844103819611894943.jpg\"]"},{"_content":"\"use strict\";\n    const fs = require(\"fs\");\n    const path = \"../../photos\";\n\n    fs.readdir(path, function (err, files) {\n        if (err) {\n            return;\n        }\n        let arr = [];\n        (function iterator(index) {\n            if (index == files.length) {\n                fs.writeFile(\"output.json\", JSON.stringify(arr, null, \"\\t\"));\n                return;\n            }\n\n            fs.stat(path + \"/\" + files[index], function (err, stats) {\n                if (err) {\n                    return;\n                }\n                if (stats.isFile()) {\n                    arr.push(files[index]);\n                }\n                iterator(index + 1);\n            })\n        }(0));\n    });","source":"photo/tool.js","raw":"\"use strict\";\n    const fs = require(\"fs\");\n    const path = \"../../photos\";\n\n    fs.readdir(path, function (err, files) {\n        if (err) {\n            return;\n        }\n        let arr = [];\n        (function iterator(index) {\n            if (index == files.length) {\n                fs.writeFile(\"output.json\", JSON.stringify(arr, null, \"\\t\"));\n                return;\n            }\n\n            fs.stat(path + \"/\" + files[index], function (err, stats) {\n                if (err) {\n                    return;\n                }\n                if (stats.isFile()) {\n                    arr.push(files[index]);\n                }\n                iterator(index + 1);\n            })\n        }(0));\n    });","date":"2018-12-30T17:46:20.171Z","updated":"2018-12-30T17:46:20.171Z","path":"photo/tool.js","layout":"false","title":"","comments":1,"_id":"cjswwkdqv003hg7ww4tcab84h","content":"\"use strict\";\n    const fs = require(\"fs\");\n    const path = \"../../photos\";\n\n    fs.readdir(path, function (err, files) {\n        if (err) {\n            return;\n        }\n        let arr = [];\n        (function iterator(index) {\n            if (index == files.length) {\n                fs.writeFile(\"output.json\", JSON.stringify(arr, null, \"\\t\"));\n                return;\n            }\n\n            fs.stat(path + \"/\" + files[index], function (err, stats) {\n                if (err) {\n                    return;\n                }\n                if (stats.isFile()) {\n                    arr.push(files[index]);\n                }\n                iterator(index + 1);\n            })\n        }(0));\n    });","site":{"data":{}},"excerpt":"","more":"\"use strict\";\n    const fs = require(\"fs\");\n    const path = \"../../photos\";\n\n    fs.readdir(path, function (err, files) {\n        if (err) {\n            return;\n        }\n        let arr = [];\n        (function iterator(index) {\n            if (index == files.length) {\n                fs.writeFile(\"output.json\", JSON.stringify(arr, null, \"\\t\"));\n                return;\n            }\n\n            fs.stat(path + \"/\" + files[index], function (err, stats) {\n                if (err) {\n                    return;\n                }\n                if (stats.isFile()) {\n                    arr.push(files[index]);\n                }\n                iterator(index + 1);\n            })\n        }(0));\n    });"}],"Post":[{"title":"c语言指针与字符串","_content":"\n## 问题\n\n```c\n#include<string.h>\nvoid main(){\n    char str[] = \"hello world\";\n\tint len = strlen(str),i;\n\tfor (i = 0; i < len; i++) {\n\t\tprintf(\"%c\", str[i]);\n\t}\n        printf(\"\\n\");\n\tchar *p = str;\n\tfor (i = 0; i < len; i++) {\n\t\tprintf(\"%c\", *(p++));\n\t}\n        printf(\"\\n\");\n        for (i = 0; i < len; i++) {\n\t\tprintf(\"%c\", *(str+i));\n\t}\n\tsystem(\"pause\");\n```\n- 字符数组归根结底还是一个数组，上图中定义的字符串数组，str也可以认为是一个指针，指针以及数组方面操作均适用。\n\n除了字符数组外，C语言还支持直接使用一个指针指向字符串的方式来表示字符串，代码如下\n```c\nchar *str = \"hello C language\";\n```\n### 原因\n以此方式定义的字符串，同样可以对此字符串进行多样的操作。为什么可以用字符数组表示字符串，非要弄个指针来表示字符串呢？这其中定有深意。原来它们最根本的区别是在内存中的存储区域不一样，字符数组存储在全局数据区或栈区，而以指针形式表示的字符串却存储在常量区。全局数据区和栈区的字符串（也包括其他数据）有读取和写入的权限，而常量区的字符串（也包括其他数据）只有读取权限，没有写入权限。一句话概括：数组形字符串存放在全局数据区或栈区，可读可写。指针字符串存放在常量区，只读不能写。\n\n所以经常会出现我在本地调试的时候字符串指针无法修改其内容（指针指向一个常量），但是在leecode（指针指向数组，存储于堆栈）却可以。。。尴尬。\n\n\n","source":"_drafts/c语言指针与字符串.md","raw":"---\ntitle: c语言指针与字符串\ntags:\n---\n\n## 问题\n\n```c\n#include<string.h>\nvoid main(){\n    char str[] = \"hello world\";\n\tint len = strlen(str),i;\n\tfor (i = 0; i < len; i++) {\n\t\tprintf(\"%c\", str[i]);\n\t}\n        printf(\"\\n\");\n\tchar *p = str;\n\tfor (i = 0; i < len; i++) {\n\t\tprintf(\"%c\", *(p++));\n\t}\n        printf(\"\\n\");\n        for (i = 0; i < len; i++) {\n\t\tprintf(\"%c\", *(str+i));\n\t}\n\tsystem(\"pause\");\n```\n- 字符数组归根结底还是一个数组，上图中定义的字符串数组，str也可以认为是一个指针，指针以及数组方面操作均适用。\n\n除了字符数组外，C语言还支持直接使用一个指针指向字符串的方式来表示字符串，代码如下\n```c\nchar *str = \"hello C language\";\n```\n### 原因\n以此方式定义的字符串，同样可以对此字符串进行多样的操作。为什么可以用字符数组表示字符串，非要弄个指针来表示字符串呢？这其中定有深意。原来它们最根本的区别是在内存中的存储区域不一样，字符数组存储在全局数据区或栈区，而以指针形式表示的字符串却存储在常量区。全局数据区和栈区的字符串（也包括其他数据）有读取和写入的权限，而常量区的字符串（也包括其他数据）只有读取权限，没有写入权限。一句话概括：数组形字符串存放在全局数据区或栈区，可读可写。指针字符串存放在常量区，只读不能写。\n\n所以经常会出现我在本地调试的时候字符串指针无法修改其内容（指针指向一个常量），但是在leecode（指针指向数组，存储于堆栈）却可以。。。尴尬。\n\n\n","slug":"c语言指针与字符串","published":0,"date":"2018-12-30T17:46:20.097Z","updated":"2018-12-30T17:46:20.097Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjswwkdoi0000g7wwdaiq51b2","content":"<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string.h&gt;</span></span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">char</span> str[] = <span class=\"string\">\"hello world\"</span>;</div><div class=\"line\">\t<span class=\"keyword\">int</span> len = <span class=\"built_in\">strlen</span>(str),i;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</div><div class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%c\"</span>, str[i]);</div><div class=\"line\">\t&#125;</div><div class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"\\n\"</span>);</div><div class=\"line\">\t<span class=\"keyword\">char</span> *p = str;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</div><div class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%c\"</span>, *(p++));</div><div class=\"line\">\t&#125;</div><div class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"\\n\"</span>);</div><div class=\"line\">        <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</div><div class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%c\"</span>, *(str+i));</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</div></pre></td></tr></table></figure>\n<ul>\n<li>字符数组归根结底还是一个数组，上图中定义的字符串数组，str也可以认为是一个指针，指针以及数组方面操作均适用。</li>\n</ul>\n<p>除了字符数组外，C语言还支持直接使用一个指针指向字符串的方式来表示字符串，代码如下<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">char</span> *str = <span class=\"string\">\"hello C language\"</span>;</div></pre></td></tr></table></figure></p>\n<h3 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因\"></a>原因</h3><p>以此方式定义的字符串，同样可以对此字符串进行多样的操作。为什么可以用字符数组表示字符串，非要弄个指针来表示字符串呢？这其中定有深意。原来它们最根本的区别是在内存中的存储区域不一样，字符数组存储在全局数据区或栈区，而以指针形式表示的字符串却存储在常量区。全局数据区和栈区的字符串（也包括其他数据）有读取和写入的权限，而常量区的字符串（也包括其他数据）只有读取权限，没有写入权限。一句话概括：数组形字符串存放在全局数据区或栈区，可读可写。指针字符串存放在常量区，只读不能写。</p>\n<p>所以经常会出现我在本地调试的时候字符串指针无法修改其内容（指针指向一个常量），但是在leecode（指针指向数组，存储于堆栈）却可以。。。尴尬。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string.h&gt;</span></span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">char</span> str[] = <span class=\"string\">\"hello world\"</span>;</div><div class=\"line\">\t<span class=\"keyword\">int</span> len = <span class=\"built_in\">strlen</span>(str),i;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</div><div class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%c\"</span>, str[i]);</div><div class=\"line\">\t&#125;</div><div class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"\\n\"</span>);</div><div class=\"line\">\t<span class=\"keyword\">char</span> *p = str;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</div><div class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%c\"</span>, *(p++));</div><div class=\"line\">\t&#125;</div><div class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"\\n\"</span>);</div><div class=\"line\">        <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</div><div class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%c\"</span>, *(str+i));</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</div></pre></td></tr></table></figure>\n<ul>\n<li>字符数组归根结底还是一个数组，上图中定义的字符串数组，str也可以认为是一个指针，指针以及数组方面操作均适用。</li>\n</ul>\n<p>除了字符数组外，C语言还支持直接使用一个指针指向字符串的方式来表示字符串，代码如下<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">char</span> *str = <span class=\"string\">\"hello C language\"</span>;</div></pre></td></tr></table></figure></p>\n<h3 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因\"></a>原因</h3><p>以此方式定义的字符串，同样可以对此字符串进行多样的操作。为什么可以用字符数组表示字符串，非要弄个指针来表示字符串呢？这其中定有深意。原来它们最根本的区别是在内存中的存储区域不一样，字符数组存储在全局数据区或栈区，而以指针形式表示的字符串却存储在常量区。全局数据区和栈区的字符串（也包括其他数据）有读取和写入的权限，而常量区的字符串（也包括其他数据）只有读取权限，没有写入权限。一句话概括：数组形字符串存放在全局数据区或栈区，可读可写。指针字符串存放在常量区，只读不能写。</p>\n<p>所以经常会出现我在本地调试的时候字符串指针无法修改其内容（指针指向一个常量），但是在leecode（指针指向数组，存储于堆栈）却可以。。。尴尬。</p>\n"},{"title":"git 手册","_content":"\n1.如何上传本地文件到git远程仓库\n```\ngit init \ngit remote add origin git@gitlab.renrenche.com:lijian/hera-kong.git\ngit add .\ngit commit -m ''\ngit push --set-upstream origin master\ngit push\n```","source":"_drafts/git-手册.md","raw":"---\ntitle: git 手册\ntags:\n---\n\n1.如何上传本地文件到git远程仓库\n```\ngit init \ngit remote add origin git@gitlab.renrenche.com:lijian/hera-kong.git\ngit add .\ngit commit -m ''\ngit push --set-upstream origin master\ngit push\n```","slug":"git-手册","published":0,"date":"2019-02-20T16:42:58.547Z","updated":"2019-02-20T16:42:58.548Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjswwkdon0001g7wwegt99pih","content":"<p>1.如何上传本地文件到git远程仓库<br><figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">git init </div><div class=\"line\">git remote <span class=\"keyword\">add</span><span class=\"bash\"> origin git@gitlab.renrenche.com:lijian/hera-kong.git</span></div><div class=\"line\">git <span class=\"keyword\">add</span><span class=\"bash\"> .</span></div><div class=\"line\">git commit -m <span class=\"string\">''</span></div><div class=\"line\">git push --set-upstream origin master</div><div class=\"line\">git push</div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>1.如何上传本地文件到git远程仓库<br><figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">git init </div><div class=\"line\">git remote <span class=\"keyword\">add</span><span class=\"bash\"> origin git@gitlab.renrenche.com:lijian/hera-kong.git</span></div><div class=\"line\">git <span class=\"keyword\">add</span><span class=\"bash\"> .</span></div><div class=\"line\">git commit -m <span class=\"string\">''</span></div><div class=\"line\">git push --set-upstream origin master</div><div class=\"line\">git push</div></pre></td></tr></table></figure></p>\n"},{"title":"gdb","_content":"","source":"_drafts/gdb.md","raw":"---\ntitle: gdb\ntags:\n---\n","slug":"gdb","published":0,"date":"2018-12-30T17:46:20.097Z","updated":"2018-12-30T17:46:20.097Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjswwkdop0002g7wwd35hsvjy","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"jMeter","_content":"","source":"_drafts/jMeter.md","raw":"---\ntitle: jMeter\ntags:\n---\n","slug":"jMeter","published":0,"date":"2018-12-30T17:46:20.098Z","updated":"2018-12-30T17:46:20.098Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjswwkdoq0003g7wwkytw1vvv","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"kong","date":"2018-12-02T11:02:17.000Z","toc":true,"_content":"\n当前系统，环境centos7\n\b起kong服务需要做：\n- 安装\n    - kong\n    - pgsql\n    - dashboard(可选，用来通过api来管理空)\n- 配置\n    - kong.conf（配置数据库等）、配置路由。\n    - pgsql配置（新建数据库）\n    - 配置kong路由\n- 注意事项\n    - 尽量安装高版本，防止和pgsql不兼容。\n\n\n# 1.安装kong\n\n- 需要安装kong\n- 安装pgsql\n\n官方文档提供的快速安装地址`https://docs.konghq.com/install/centos/?_ga=2.182378343.1594956911.1543481061-735966922.1539239867`\n\nstep1:\n`baseurl=https://kong.bintray.com/kong-community-edition-rpm/centos/7` 各个版本的地址，下载要安装的版本。\nwget `https://kong.bintray.com/kong-community-edition-rpm/centos/7/kong-community-edition-0.14.1.el7.noarch.rpm`\nsrep2:\n执行下边命令:\n```\nsudo yum install epel-release\nsudo yum install kong-community-edition-0.14.1.*.noarch.rpm --nogpgcheck\n```\n安装完成，这个时候是起不来额，因为没有安装pgsql。\n\n\n# 2.安装postgresql10\n\n尽量安装高版本，防止和pgsql不兼容,为了避免采坑，选择`kong-community-edition-0.14.1.el7.noarch.rpm`版本，当然也在测试机测试没有问题。\n官方地址`https://www.postgresql.org/download/linux/redhat/` 可以选择对需安装的对应的版本，会自动生成安装命令，我选择的是10.6\n\npostgresql10安装与启动\n```\nyum install https://download.postgresql.org/pub/repos/yum/10/redhat/rhel-7-x86_64/pgdg-centos10-10-2.noarch.rpm    \nyum install postgresql10    \nyum install postgresql10-server\n/usr/pgsql-10/bin/postgresql-10-setup initdb  \nsystemctl enable postgresql-10  \nsystemctl start postgresql-10\n```\n安装完成后，还需要做：\n1. 配置postgreps用户。\n2. 新增和数据库。\n3. 配置远程连接。\n\n添加用户以及新增数据：\n```\nsudo -s  //取得root权限\nsu - postgres \npsql -U postgres //连接本地数据\n\npostgres=# CREATE USER kong WITH LOGIN PASSWORD 'kong';  //创建用户\npostgres-# CREATE ROLE //返回CREATE ROLE，表示创建用户成功\n\npostgres=# CREATE DATABASE kong; //创建数据库\nCREATE DATABASE //返回CREATE DATABASE，表示创建数据库成功.\n\n```\n\n然后初始化数据库:`sudo /usr/local/bin/kong migrations up`\n\n修改pgsql,配置远程连接：\n执行`vim /var/lib/pgsql/10/data/pg_hba.conf`\n```\n//修改 127.0.0.1/32 为trust\nhost    all             all             127.0.0.1/32            trust\n//添加下边这条记录，用于ssl连接\nhost    all             all             0.0.0.0/0               md5\n```\n![image](/photo/img/kong/pg_hba.conf.png)\n\n执行`vim /var/lib/pgsql/10/data/postgresql.conf`\n添加一下信息:\n```\nlisten_addresses = '*' //允许所有的ip访问postgres\n```\n\n# 3.配置kong.conf\n\n执行 `vi /etc/kong/kong.conf`\n\n```\npg_host = 127.0.0.1             # The PostgreSQL host to connect to.\npg_port = 5432                  # The port to connect to.\npg_user = kong                  # The username to authenticate if required.\npg_password = kong                  # The password to authenticate if required.\npg_database = kong              # The database name to connect to.\n```\n执行`sudo /usr/local/bin/kong start -c /etc/kong/kong.conf`,提示`Kong started`则代表启动成功\n\n`curl -i http://localhost:8001/`,测试kong是否启动。也可以访问`http://host:8000/`,来确定kong是否起来。因为此时我们尚未配置任何服务、路由，访问会返回404，如下：\n![image](/photo/img/kong/kong-404.png)\n\n\n# 4.配置dashboard\n前置操作：需要安装nodejs\n`sudo yum install nodejs`\n\nkong提供一套api，用于动态管服务、路由、插件等。当然有开源的dashboard，这样我们操作起来更方便。\n开源项目地址`https://github.com/PGBI/kong-dashboard`\n\n安装命令`npm install -g kong-dashboard`\n\n启动命令：`nohup kong-dashboard start --kong-url http://localhost:8001 /dev/null 2>&1 &`\n\n为了安全起见，可以吧启动kong的账户密码放在work的环境变量里。\n修改work的环境变量 vi ~.bash_profile，添加password参数。\nkong-dashboard start \\\n  --kong-url http://kong:8001 \\\n  --basic-auth work=$password\n\n# 5.日志目录以及启动相关\n查看日志文件`tail -f /usr/local/kong/logs/error.log`\n\nkong配置文件默认地址为 /ect/kong/kong.conf\n想要删除postgreSql，需要先断开所有连接`sudo ps aux | grep scidb | xargs sudo kill -9`\n\n启动命令`sudo /usr/local/bin/kong start -c /etc/kong/kong.conf`\n\n# 6.遇到问题\n\n沙盒项目部署的时候，我把项目上传到了 /home/work/kong/目录下，并将其软连到了/usr/local/share/lua/目录下。、\n\n再启动kong时，报错:\n\n```\n2018/12/06 15:26:01 [error] 7684#0: init_worker_by_lua error: /usr/local/share/lua/5.1/kong/init.lua:244: module 'resty.worker.events' not found:Failed loading module resty.worker.events in LuaRocks rock lua-resty-worker-events 0.3.3-1\n\tno field package.preload['resty.worker.events']\n\tno file './resty/worker/events.lua'\n\tno file './resty/worker/events/init.lua'\n\tno file '/usr/local/openresty/site/lualib/resty/worker/events.ljbc'\n\tno file '/usr/local/openresty/site/lualib/resty/worker/events/init.ljbc'\n\tno file '/usr/local/openresty/lualib/resty/worker/events.ljbc'\n\tno file '/usr/local/openresty/lualib/resty/worker/events/init.ljbc'\n\tno file '/usr/local/openresty/site/lualib/resty/worker/events.lua'\n\tno file '/usr/local/openresty/site/lualib/resty/worker/events/init.lua'\n\tno file '/usr/local/openresty/lualib/resty/worker/events.lua'\n\tno file '/usr/local/openresty/lualib/resty/worker/events/init.lua'\n\tno file '/usr/local/openresty/luajit/share/luajit-2.1.0-beta3/resty/worker/events.lua'\n\tno file '/usr/local/share/lua/5.1/resty/worker/events.lua'\n\tno file '/usr/local/share/lua/5.1/resty/worker/events/init.lua'\n\tno file '/usr/local/openresty/luajit/share/lua/5.1/resty/worker/events.lua'\n\tno file '/usr/local/openresty/luajit/share/lua/5.1/resty/worker/events/init.lua'\n\tno file '/root/.luarocks/share/lua/5.1/resty/worker/events.lua'\n\tno file '/root/.luarocks/share/lua/5.1/resty/worker/events/init.lua'\n\tno file '/usr/local/openresty/site/lualib/resty/worker/events.so'\n\tno file '/usr/local/openresty/lualib/resty/worker/events.so'\n\tno file './resty/worker/events.so'\n\tno file '/usr/local/lib/lua/5.1/resty/worker/events.so'\n\tno file '/usr/local/openresty/luajit/lib/lua/5.1/resty/worker/events.so'\n\tno file '/usr/local/lib/lua/5.1/loadall.so'\n\tno file '/root/.luarocks/lib/lua/5.1/resty/worker/events.so'\n\tno file '/usr/local/openresty/site/lualib/resty.so'\n\tno file '/usr/local/openresty/lualib/resty.so'\n\tno file './resty.so'\n\tno file '/usr/local/lib/lua/5.1/resty.so'\n\tno file '/usr/local/openresty/luajit/lib/lua/5.1/resty.so'\n\tno file '/usr/local/lib/lua/5.1/loadall.so'\n\tno file '/root/.luarocks/lib/lua/5.1/resty.so'\n```\n\n最终我把项目上传到了/usr/local/share/releas/目录下，并将其软连到了/usr/local/share/lua/下，启动并没有出现改问题.\n\n\n线索：\n`https://github.com/Kong/kong/issues/2838`\n","source":"_drafts/kong.md","raw":"---\ntitle: kong\ndate: 2018-12-02 19:02:17\ntags: kong\ncategories: kong\ntoc: true\n---\n\n当前系统，环境centos7\n\b起kong服务需要做：\n- 安装\n    - kong\n    - pgsql\n    - dashboard(可选，用来通过api来管理空)\n- 配置\n    - kong.conf（配置数据库等）、配置路由。\n    - pgsql配置（新建数据库）\n    - 配置kong路由\n- 注意事项\n    - 尽量安装高版本，防止和pgsql不兼容。\n\n\n# 1.安装kong\n\n- 需要安装kong\n- 安装pgsql\n\n官方文档提供的快速安装地址`https://docs.konghq.com/install/centos/?_ga=2.182378343.1594956911.1543481061-735966922.1539239867`\n\nstep1:\n`baseurl=https://kong.bintray.com/kong-community-edition-rpm/centos/7` 各个版本的地址，下载要安装的版本。\nwget `https://kong.bintray.com/kong-community-edition-rpm/centos/7/kong-community-edition-0.14.1.el7.noarch.rpm`\nsrep2:\n执行下边命令:\n```\nsudo yum install epel-release\nsudo yum install kong-community-edition-0.14.1.*.noarch.rpm --nogpgcheck\n```\n安装完成，这个时候是起不来额，因为没有安装pgsql。\n\n\n# 2.安装postgresql10\n\n尽量安装高版本，防止和pgsql不兼容,为了避免采坑，选择`kong-community-edition-0.14.1.el7.noarch.rpm`版本，当然也在测试机测试没有问题。\n官方地址`https://www.postgresql.org/download/linux/redhat/` 可以选择对需安装的对应的版本，会自动生成安装命令，我选择的是10.6\n\npostgresql10安装与启动\n```\nyum install https://download.postgresql.org/pub/repos/yum/10/redhat/rhel-7-x86_64/pgdg-centos10-10-2.noarch.rpm    \nyum install postgresql10    \nyum install postgresql10-server\n/usr/pgsql-10/bin/postgresql-10-setup initdb  \nsystemctl enable postgresql-10  \nsystemctl start postgresql-10\n```\n安装完成后，还需要做：\n1. 配置postgreps用户。\n2. 新增和数据库。\n3. 配置远程连接。\n\n添加用户以及新增数据：\n```\nsudo -s  //取得root权限\nsu - postgres \npsql -U postgres //连接本地数据\n\npostgres=# CREATE USER kong WITH LOGIN PASSWORD 'kong';  //创建用户\npostgres-# CREATE ROLE //返回CREATE ROLE，表示创建用户成功\n\npostgres=# CREATE DATABASE kong; //创建数据库\nCREATE DATABASE //返回CREATE DATABASE，表示创建数据库成功.\n\n```\n\n然后初始化数据库:`sudo /usr/local/bin/kong migrations up`\n\n修改pgsql,配置远程连接：\n执行`vim /var/lib/pgsql/10/data/pg_hba.conf`\n```\n//修改 127.0.0.1/32 为trust\nhost    all             all             127.0.0.1/32            trust\n//添加下边这条记录，用于ssl连接\nhost    all             all             0.0.0.0/0               md5\n```\n![image](/photo/img/kong/pg_hba.conf.png)\n\n执行`vim /var/lib/pgsql/10/data/postgresql.conf`\n添加一下信息:\n```\nlisten_addresses = '*' //允许所有的ip访问postgres\n```\n\n# 3.配置kong.conf\n\n执行 `vi /etc/kong/kong.conf`\n\n```\npg_host = 127.0.0.1             # The PostgreSQL host to connect to.\npg_port = 5432                  # The port to connect to.\npg_user = kong                  # The username to authenticate if required.\npg_password = kong                  # The password to authenticate if required.\npg_database = kong              # The database name to connect to.\n```\n执行`sudo /usr/local/bin/kong start -c /etc/kong/kong.conf`,提示`Kong started`则代表启动成功\n\n`curl -i http://localhost:8001/`,测试kong是否启动。也可以访问`http://host:8000/`,来确定kong是否起来。因为此时我们尚未配置任何服务、路由，访问会返回404，如下：\n![image](/photo/img/kong/kong-404.png)\n\n\n# 4.配置dashboard\n前置操作：需要安装nodejs\n`sudo yum install nodejs`\n\nkong提供一套api，用于动态管服务、路由、插件等。当然有开源的dashboard，这样我们操作起来更方便。\n开源项目地址`https://github.com/PGBI/kong-dashboard`\n\n安装命令`npm install -g kong-dashboard`\n\n启动命令：`nohup kong-dashboard start --kong-url http://localhost:8001 /dev/null 2>&1 &`\n\n为了安全起见，可以吧启动kong的账户密码放在work的环境变量里。\n修改work的环境变量 vi ~.bash_profile，添加password参数。\nkong-dashboard start \\\n  --kong-url http://kong:8001 \\\n  --basic-auth work=$password\n\n# 5.日志目录以及启动相关\n查看日志文件`tail -f /usr/local/kong/logs/error.log`\n\nkong配置文件默认地址为 /ect/kong/kong.conf\n想要删除postgreSql，需要先断开所有连接`sudo ps aux | grep scidb | xargs sudo kill -9`\n\n启动命令`sudo /usr/local/bin/kong start -c /etc/kong/kong.conf`\n\n# 6.遇到问题\n\n沙盒项目部署的时候，我把项目上传到了 /home/work/kong/目录下，并将其软连到了/usr/local/share/lua/目录下。、\n\n再启动kong时，报错:\n\n```\n2018/12/06 15:26:01 [error] 7684#0: init_worker_by_lua error: /usr/local/share/lua/5.1/kong/init.lua:244: module 'resty.worker.events' not found:Failed loading module resty.worker.events in LuaRocks rock lua-resty-worker-events 0.3.3-1\n\tno field package.preload['resty.worker.events']\n\tno file './resty/worker/events.lua'\n\tno file './resty/worker/events/init.lua'\n\tno file '/usr/local/openresty/site/lualib/resty/worker/events.ljbc'\n\tno file '/usr/local/openresty/site/lualib/resty/worker/events/init.ljbc'\n\tno file '/usr/local/openresty/lualib/resty/worker/events.ljbc'\n\tno file '/usr/local/openresty/lualib/resty/worker/events/init.ljbc'\n\tno file '/usr/local/openresty/site/lualib/resty/worker/events.lua'\n\tno file '/usr/local/openresty/site/lualib/resty/worker/events/init.lua'\n\tno file '/usr/local/openresty/lualib/resty/worker/events.lua'\n\tno file '/usr/local/openresty/lualib/resty/worker/events/init.lua'\n\tno file '/usr/local/openresty/luajit/share/luajit-2.1.0-beta3/resty/worker/events.lua'\n\tno file '/usr/local/share/lua/5.1/resty/worker/events.lua'\n\tno file '/usr/local/share/lua/5.1/resty/worker/events/init.lua'\n\tno file '/usr/local/openresty/luajit/share/lua/5.1/resty/worker/events.lua'\n\tno file '/usr/local/openresty/luajit/share/lua/5.1/resty/worker/events/init.lua'\n\tno file '/root/.luarocks/share/lua/5.1/resty/worker/events.lua'\n\tno file '/root/.luarocks/share/lua/5.1/resty/worker/events/init.lua'\n\tno file '/usr/local/openresty/site/lualib/resty/worker/events.so'\n\tno file '/usr/local/openresty/lualib/resty/worker/events.so'\n\tno file './resty/worker/events.so'\n\tno file '/usr/local/lib/lua/5.1/resty/worker/events.so'\n\tno file '/usr/local/openresty/luajit/lib/lua/5.1/resty/worker/events.so'\n\tno file '/usr/local/lib/lua/5.1/loadall.so'\n\tno file '/root/.luarocks/lib/lua/5.1/resty/worker/events.so'\n\tno file '/usr/local/openresty/site/lualib/resty.so'\n\tno file '/usr/local/openresty/lualib/resty.so'\n\tno file './resty.so'\n\tno file '/usr/local/lib/lua/5.1/resty.so'\n\tno file '/usr/local/openresty/luajit/lib/lua/5.1/resty.so'\n\tno file '/usr/local/lib/lua/5.1/loadall.so'\n\tno file '/root/.luarocks/lib/lua/5.1/resty.so'\n```\n\n最终我把项目上传到了/usr/local/share/releas/目录下，并将其软连到了/usr/local/share/lua/下，启动并没有出现改问题.\n\n\n线索：\n`https://github.com/Kong/kong/issues/2838`\n","slug":"kong","published":0,"updated":"2019-02-21T03:49:34.698Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjswwkdos0004g7ww6ysxr7xs","content":"<p>当前系统，环境centos7<br>\b起kong服务需要做：</p>\n<ul>\n<li>安装<ul>\n<li>kong</li>\n<li>pgsql</li>\n<li>dashboard(可选，用来通过api来管理空)</li>\n</ul>\n</li>\n<li>配置<ul>\n<li>kong.conf（配置数据库等）、配置路由。</li>\n<li>pgsql配置（新建数据库）</li>\n<li>配置kong路由</li>\n</ul>\n</li>\n<li>注意事项<ul>\n<li>尽量安装高版本，防止和pgsql不兼容。</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"1-安装kong\"><a href=\"#1-安装kong\" class=\"headerlink\" title=\"1.安装kong\"></a>1.安装kong</h1><ul>\n<li>需要安装kong</li>\n<li>安装pgsql</li>\n</ul>\n<p>官方文档提供的快速安装地址<code>https://docs.konghq.com/install/centos/?_ga=2.182378343.1594956911.1543481061-735966922.1539239867</code></p>\n<p>step1:<br><code>baseurl=https://kong.bintray.com/kong-community-edition-rpm/centos/7</code> 各个版本的地址，下载要安装的版本。<br>wget <code>https://kong.bintray.com/kong-community-edition-rpm/centos/7/kong-community-edition-0.14.1.el7.noarch.rpm</code><br>srep2:<br>执行下边命令:<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo yum <span class=\"keyword\">install</span> epel-<span class=\"keyword\">release</span></div><div class=\"line\">sudo yum <span class=\"keyword\">install</span> kong-community-<span class=\"keyword\">edition</span><span class=\"number\">-0.14</span><span class=\"number\">.1</span>.*.noarch.rpm <span class=\"comment\">--nogpgcheck</span></div></pre></td></tr></table></figure></p>\n<p>安装完成，这个时候是起不来额，因为没有安装pgsql。</p>\n<h1 id=\"2-安装postgresql10\"><a href=\"#2-安装postgresql10\" class=\"headerlink\" title=\"2.安装postgresql10\"></a>2.安装postgresql10</h1><p>尽量安装高版本，防止和pgsql不兼容,为了避免采坑，选择<code>kong-community-edition-0.14.1.el7.noarch.rpm</code>版本，当然也在测试机测试没有问题。<br>官方地址<code>https://www.postgresql.org/download/linux/redhat/</code> 可以选择对需安装的对应的版本，会自动生成安装命令，我选择的是10.6</p>\n<p>postgresql10安装与启动<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum <span class=\"keyword\">install</span> https://download.postgresql.org/pub/repos/yum/<span class=\"number\">10</span>/redhat/rhel<span class=\"number\">-7</span>-x86_64/pgdg-centos10<span class=\"number\">-10</span><span class=\"number\">-2.</span>noarch.rpm    </div><div class=\"line\">yum <span class=\"keyword\">install</span> postgresql10    </div><div class=\"line\">yum <span class=\"keyword\">install</span> postgresql10-<span class=\"keyword\">server</span></div><div class=\"line\">/usr/pgsql<span class=\"number\">-10</span>/<span class=\"keyword\">bin</span>/postgresql<span class=\"number\">-10</span>-setup initdb  </div><div class=\"line\">systemctl <span class=\"keyword\">enable</span> postgresql<span class=\"number\">-10</span>  </div><div class=\"line\">systemctl <span class=\"keyword\">start</span> postgresql<span class=\"number\">-10</span></div></pre></td></tr></table></figure></p>\n<p>安装完成后，还需要做：</p>\n<ol>\n<li>配置postgreps用户。</li>\n<li>新增和数据库。</li>\n<li>配置远程连接。</li>\n</ol>\n<p>添加用户以及新增数据：<br><figure class=\"highlight oxygene\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo -s  <span class=\"comment\">//取得root权限</span></div><div class=\"line\">su - postgres </div><div class=\"line\">psql -U postgres <span class=\"comment\">//连接本地数据</span></div><div class=\"line\"></div><div class=\"line\">postgres=# <span class=\"keyword\">CREATE</span> USER kong <span class=\"keyword\">WITH</span> LOGIN PASSWORD <span class=\"string\">'kong'</span>;  <span class=\"comment\">//创建用户</span></div><div class=\"line\">postgres-# <span class=\"keyword\">CREATE</span> ROLE <span class=\"comment\">//返回CREATE ROLE，表示创建用户成功</span></div><div class=\"line\"></div><div class=\"line\">postgres=# <span class=\"keyword\">CREATE</span> DATABASE kong; <span class=\"comment\">//创建数据库</span></div><div class=\"line\"><span class=\"keyword\">CREATE</span> DATABASE <span class=\"comment\">//返回CREATE DATABASE，表示创建数据库成功.</span></div></pre></td></tr></table></figure></p>\n<p>然后初始化数据库:<code>sudo /usr/local/bin/kong migrations up</code></p>\n<p>修改pgsql,配置远程连接：<br>执行<code>vim /var/lib/pgsql/10/data/pg_hba.conf</code><br><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//修改 127.0.0.1/32 为trust</span></div><div class=\"line\">host    all             all             <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>/<span class=\"number\">32</span>            trust</div><div class=\"line\"><span class=\"comment\">//添加下边这条记录，用于ssl连接</span></div><div class=\"line\">host    all             all             <span class=\"number\">0.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span>/<span class=\"number\">0</span>               md5</div></pre></td></tr></table></figure></p>\n<p><img src=\"/photo/img/kong/pg_hba.conf.png\" alt=\"image\"></p>\n<p>执行<code>vim /var/lib/pgsql/10/data/postgresql.conf</code><br>添加一下信息:<br><figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">listen_addresses</span> = <span class=\"string\">'*'</span> //允许所有的ip访问postgres</div></pre></td></tr></table></figure></p>\n<h1 id=\"3-配置kong-conf\"><a href=\"#3-配置kong-conf\" class=\"headerlink\" title=\"3.配置kong.conf\"></a>3.配置kong.conf</h1><p>执行 <code>vi /etc/kong/kong.conf</code></p>\n<figure class=\"highlight delphi\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">pg_host = <span class=\"number\">127.0</span>.<span class=\"number\">0.1</span>             # The PostgreSQL host <span class=\"keyword\">to</span> connect <span class=\"keyword\">to</span>.</div><div class=\"line\">pg_port = <span class=\"number\">5432</span>                  # The port <span class=\"keyword\">to</span> connect <span class=\"keyword\">to</span>.</div><div class=\"line\">pg_user = kong                  # The username <span class=\"keyword\">to</span> authenticate <span class=\"keyword\">if</span> required.</div><div class=\"line\">pg_password = kong                  # The password <span class=\"keyword\">to</span> authenticate <span class=\"keyword\">if</span> required.</div><div class=\"line\">pg_database = kong              # The database <span class=\"keyword\">name</span> <span class=\"keyword\">to</span> connect <span class=\"keyword\">to</span>.</div></pre></td></tr></table></figure>\n<p>执行<code>sudo /usr/local/bin/kong start -c /etc/kong/kong.conf</code>,提示<code>Kong started</code>则代表启动成功</p>\n<p><code>curl -i http://localhost:8001/</code>,测试kong是否启动。也可以访问<code>http://host:8000/</code>,来确定kong是否起来。因为此时我们尚未配置任何服务、路由，访问会返回404，如下：<br><img src=\"/photo/img/kong/kong-404.png\" alt=\"image\"></p>\n<h1 id=\"4-配置dashboard\"><a href=\"#4-配置dashboard\" class=\"headerlink\" title=\"4.配置dashboard\"></a>4.配置dashboard</h1><p>前置操作：需要安装nodejs<br><code>sudo yum install nodejs</code></p>\n<p>kong提供一套api，用于动态管服务、路由、插件等。当然有开源的dashboard，这样我们操作起来更方便。<br>开源项目地址<code>https://github.com/PGBI/kong-dashboard</code></p>\n<p>安装命令<code>npm install -g kong-dashboard</code></p>\n<p>启动命令：<code>nohup kong-dashboard start --kong-url http://localhost:8001 /dev/null 2&gt;&amp;1 &amp;</code></p>\n<p>为了安全起见，可以吧启动kong的账户密码放在work的环境变量里。<br>修改work的环境变量 vi ~.bash_profile，添加password参数。<br>kong-dashboard start \\<br>  –kong-url <a href=\"http://kong:8001\" target=\"_blank\" rel=\"noopener\">http://kong:8001</a> \\<br>  –basic-auth work=$password</p>\n<h1 id=\"5-日志目录以及启动相关\"><a href=\"#5-日志目录以及启动相关\" class=\"headerlink\" title=\"5.日志目录以及启动相关\"></a>5.日志目录以及启动相关</h1><p>查看日志文件<code>tail -f /usr/local/kong/logs/error.log</code></p>\n<p>kong配置文件默认地址为 /ect/kong/kong.conf<br>想要删除postgreSql，需要先断开所有连接<code>sudo ps aux | grep scidb | xargs sudo kill -9</code></p>\n<p>启动命令<code>sudo /usr/local/bin/kong start -c /etc/kong/kong.conf</code></p>\n<h1 id=\"6-遇到问题\"><a href=\"#6-遇到问题\" class=\"headerlink\" title=\"6.遇到问题\"></a>6.遇到问题</h1><p>沙盒项目部署的时候，我把项目上传到了 /home/work/kong/目录下，并将其软连到了/usr/local/share/lua/目录下。、</p>\n<p>再启动kong时，报错:</p>\n<figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\">2018/12/06 15:26:01 [<span class=\"keyword\">error</span>] 7684#0: init_worker_by_lua <span class=\"keyword\">error</span>: /usr/<span class=\"keyword\">local</span>/share/lua/5.1/kong/init.lua:244: module 'resty.worker.events' not found:Failed loading module resty.worker.events <span class=\"keyword\">in</span> LuaRocks rock lua-resty-worker-events 0.3.3-1</div><div class=\"line\">\t<span class=\"keyword\">no</span> field package.preload['resty.worker.events']</div><div class=\"line\">\t<span class=\"keyword\">no</span> <span class=\"keyword\">file</span> './resty/worker/events.lua'</div><div class=\"line\">\t<span class=\"keyword\">no</span> <span class=\"keyword\">file</span> './resty/worker/events/init.lua'</div><div class=\"line\">\t<span class=\"keyword\">no</span> <span class=\"keyword\">file</span> '/usr/<span class=\"keyword\">local</span>/openresty/site/lualib/resty/worker/events.ljbc'</div><div class=\"line\">\t<span class=\"keyword\">no</span> <span class=\"keyword\">file</span> '/usr/<span class=\"keyword\">local</span>/openresty/site/lualib/resty/worker/events/init.ljbc'</div><div class=\"line\">\t<span class=\"keyword\">no</span> <span class=\"keyword\">file</span> '/usr/<span class=\"keyword\">local</span>/openresty/lualib/resty/worker/events.ljbc'</div><div class=\"line\">\t<span class=\"keyword\">no</span> <span class=\"keyword\">file</span> '/usr/<span class=\"keyword\">local</span>/openresty/lualib/resty/worker/events/init.ljbc'</div><div class=\"line\">\t<span class=\"keyword\">no</span> <span class=\"keyword\">file</span> '/usr/<span class=\"keyword\">local</span>/openresty/site/lualib/resty/worker/events.lua'</div><div class=\"line\">\t<span class=\"keyword\">no</span> <span class=\"keyword\">file</span> '/usr/<span class=\"keyword\">local</span>/openresty/site/lualib/resty/worker/events/init.lua'</div><div class=\"line\">\t<span class=\"keyword\">no</span> <span class=\"keyword\">file</span> '/usr/<span class=\"keyword\">local</span>/openresty/lualib/resty/worker/events.lua'</div><div class=\"line\">\t<span class=\"keyword\">no</span> <span class=\"keyword\">file</span> '/usr/<span class=\"keyword\">local</span>/openresty/lualib/resty/worker/events/init.lua'</div><div class=\"line\">\t<span class=\"keyword\">no</span> <span class=\"keyword\">file</span> '/usr/<span class=\"keyword\">local</span>/openresty/luajit/share/luajit-2.1.0-beta3/resty/worker/events.lua'</div><div class=\"line\">\t<span class=\"keyword\">no</span> <span class=\"keyword\">file</span> '/usr/<span class=\"keyword\">local</span>/share/lua/5.1/resty/worker/events.lua'</div><div class=\"line\">\t<span class=\"keyword\">no</span> <span class=\"keyword\">file</span> '/usr/<span class=\"keyword\">local</span>/share/lua/5.1/resty/worker/events/init.lua'</div><div class=\"line\">\t<span class=\"keyword\">no</span> <span class=\"keyword\">file</span> '/usr/<span class=\"keyword\">local</span>/openresty/luajit/share/lua/5.1/resty/worker/events.lua'</div><div class=\"line\">\t<span class=\"keyword\">no</span> <span class=\"keyword\">file</span> '/usr/<span class=\"keyword\">local</span>/openresty/luajit/share/lua/5.1/resty/worker/events/init.lua'</div><div class=\"line\">\t<span class=\"keyword\">no</span> <span class=\"keyword\">file</span> '/root/.luarocks/share/lua/5.1/resty/worker/events.lua'</div><div class=\"line\">\t<span class=\"keyword\">no</span> <span class=\"keyword\">file</span> '/root/.luarocks/share/lua/5.1/resty/worker/events/init.lua'</div><div class=\"line\">\t<span class=\"keyword\">no</span> <span class=\"keyword\">file</span> '/usr/<span class=\"keyword\">local</span>/openresty/site/lualib/resty/worker/events.<span class=\"keyword\">so</span>'</div><div class=\"line\">\t<span class=\"keyword\">no</span> <span class=\"keyword\">file</span> '/usr/<span class=\"keyword\">local</span>/openresty/lualib/resty/worker/events.<span class=\"keyword\">so</span>'</div><div class=\"line\">\t<span class=\"keyword\">no</span> <span class=\"keyword\">file</span> './resty/worker/events.<span class=\"keyword\">so</span>'</div><div class=\"line\">\t<span class=\"keyword\">no</span> <span class=\"keyword\">file</span> '/usr/<span class=\"keyword\">local</span>/lib/lua/5.1/resty/worker/events.<span class=\"keyword\">so</span>'</div><div class=\"line\">\t<span class=\"keyword\">no</span> <span class=\"keyword\">file</span> '/usr/<span class=\"keyword\">local</span>/openresty/luajit/lib/lua/5.1/resty/worker/events.<span class=\"keyword\">so</span>'</div><div class=\"line\">\t<span class=\"keyword\">no</span> <span class=\"keyword\">file</span> '/usr/<span class=\"keyword\">local</span>/lib/lua/5.1/loadall.<span class=\"keyword\">so</span>'</div><div class=\"line\">\t<span class=\"keyword\">no</span> <span class=\"keyword\">file</span> '/root/.luarocks/lib/lua/5.1/resty/worker/events.<span class=\"keyword\">so</span>'</div><div class=\"line\">\t<span class=\"keyword\">no</span> <span class=\"keyword\">file</span> '/usr/<span class=\"keyword\">local</span>/openresty/site/lualib/resty.<span class=\"keyword\">so</span>'</div><div class=\"line\">\t<span class=\"keyword\">no</span> <span class=\"keyword\">file</span> '/usr/<span class=\"keyword\">local</span>/openresty/lualib/resty.<span class=\"keyword\">so</span>'</div><div class=\"line\">\t<span class=\"keyword\">no</span> <span class=\"keyword\">file</span> './resty.<span class=\"keyword\">so</span>'</div><div class=\"line\">\t<span class=\"keyword\">no</span> <span class=\"keyword\">file</span> '/usr/<span class=\"keyword\">local</span>/lib/lua/5.1/resty.<span class=\"keyword\">so</span>'</div><div class=\"line\">\t<span class=\"keyword\">no</span> <span class=\"keyword\">file</span> '/usr/<span class=\"keyword\">local</span>/openresty/luajit/lib/lua/5.1/resty.<span class=\"keyword\">so</span>'</div><div class=\"line\">\t<span class=\"keyword\">no</span> <span class=\"keyword\">file</span> '/usr/<span class=\"keyword\">local</span>/lib/lua/5.1/loadall.<span class=\"keyword\">so</span>'</div><div class=\"line\">\t<span class=\"keyword\">no</span> <span class=\"keyword\">file</span> '/root/.luarocks/lib/lua/5.1/resty.<span class=\"keyword\">so</span>'</div></pre></td></tr></table></figure>\n<p>最终我把项目上传到了/usr/local/share/releas/目录下，并将其软连到了/usr/local/share/lua/下，启动并没有出现改问题.</p>\n<p>线索：<br><code>https://github.com/Kong/kong/issues/2838</code></p>\n","site":{"data":{}},"excerpt":"","more":"<p>当前系统，环境centos7<br>\b起kong服务需要做：</p>\n<ul>\n<li>安装<ul>\n<li>kong</li>\n<li>pgsql</li>\n<li>dashboard(可选，用来通过api来管理空)</li>\n</ul>\n</li>\n<li>配置<ul>\n<li>kong.conf（配置数据库等）、配置路由。</li>\n<li>pgsql配置（新建数据库）</li>\n<li>配置kong路由</li>\n</ul>\n</li>\n<li>注意事项<ul>\n<li>尽量安装高版本，防止和pgsql不兼容。</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"1-安装kong\"><a href=\"#1-安装kong\" class=\"headerlink\" title=\"1.安装kong\"></a>1.安装kong</h1><ul>\n<li>需要安装kong</li>\n<li>安装pgsql</li>\n</ul>\n<p>官方文档提供的快速安装地址<code>https://docs.konghq.com/install/centos/?_ga=2.182378343.1594956911.1543481061-735966922.1539239867</code></p>\n<p>step1:<br><code>baseurl=https://kong.bintray.com/kong-community-edition-rpm/centos/7</code> 各个版本的地址，下载要安装的版本。<br>wget <code>https://kong.bintray.com/kong-community-edition-rpm/centos/7/kong-community-edition-0.14.1.el7.noarch.rpm</code><br>srep2:<br>执行下边命令:<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo yum <span class=\"keyword\">install</span> epel-<span class=\"keyword\">release</span></div><div class=\"line\">sudo yum <span class=\"keyword\">install</span> kong-community-<span class=\"keyword\">edition</span><span class=\"number\">-0.14</span><span class=\"number\">.1</span>.*.noarch.rpm <span class=\"comment\">--nogpgcheck</span></div></pre></td></tr></table></figure></p>\n<p>安装完成，这个时候是起不来额，因为没有安装pgsql。</p>\n<h1 id=\"2-安装postgresql10\"><a href=\"#2-安装postgresql10\" class=\"headerlink\" title=\"2.安装postgresql10\"></a>2.安装postgresql10</h1><p>尽量安装高版本，防止和pgsql不兼容,为了避免采坑，选择<code>kong-community-edition-0.14.1.el7.noarch.rpm</code>版本，当然也在测试机测试没有问题。<br>官方地址<code>https://www.postgresql.org/download/linux/redhat/</code> 可以选择对需安装的对应的版本，会自动生成安装命令，我选择的是10.6</p>\n<p>postgresql10安装与启动<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum <span class=\"keyword\">install</span> https://download.postgresql.org/pub/repos/yum/<span class=\"number\">10</span>/redhat/rhel<span class=\"number\">-7</span>-x86_64/pgdg-centos10<span class=\"number\">-10</span><span class=\"number\">-2.</span>noarch.rpm    </div><div class=\"line\">yum <span class=\"keyword\">install</span> postgresql10    </div><div class=\"line\">yum <span class=\"keyword\">install</span> postgresql10-<span class=\"keyword\">server</span></div><div class=\"line\">/usr/pgsql<span class=\"number\">-10</span>/<span class=\"keyword\">bin</span>/postgresql<span class=\"number\">-10</span>-setup initdb  </div><div class=\"line\">systemctl <span class=\"keyword\">enable</span> postgresql<span class=\"number\">-10</span>  </div><div class=\"line\">systemctl <span class=\"keyword\">start</span> postgresql<span class=\"number\">-10</span></div></pre></td></tr></table></figure></p>\n<p>安装完成后，还需要做：</p>\n<ol>\n<li>配置postgreps用户。</li>\n<li>新增和数据库。</li>\n<li>配置远程连接。</li>\n</ol>\n<p>添加用户以及新增数据：<br><figure class=\"highlight oxygene\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo -s  <span class=\"comment\">//取得root权限</span></div><div class=\"line\">su - postgres </div><div class=\"line\">psql -U postgres <span class=\"comment\">//连接本地数据</span></div><div class=\"line\"></div><div class=\"line\">postgres=# <span class=\"keyword\">CREATE</span> USER kong <span class=\"keyword\">WITH</span> LOGIN PASSWORD <span class=\"string\">'kong'</span>;  <span class=\"comment\">//创建用户</span></div><div class=\"line\">postgres-# <span class=\"keyword\">CREATE</span> ROLE <span class=\"comment\">//返回CREATE ROLE，表示创建用户成功</span></div><div class=\"line\"></div><div class=\"line\">postgres=# <span class=\"keyword\">CREATE</span> DATABASE kong; <span class=\"comment\">//创建数据库</span></div><div class=\"line\"><span class=\"keyword\">CREATE</span> DATABASE <span class=\"comment\">//返回CREATE DATABASE，表示创建数据库成功.</span></div></pre></td></tr></table></figure></p>\n<p>然后初始化数据库:<code>sudo /usr/local/bin/kong migrations up</code></p>\n<p>修改pgsql,配置远程连接：<br>执行<code>vim /var/lib/pgsql/10/data/pg_hba.conf</code><br><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//修改 127.0.0.1/32 为trust</span></div><div class=\"line\">host    all             all             <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>/<span class=\"number\">32</span>            trust</div><div class=\"line\"><span class=\"comment\">//添加下边这条记录，用于ssl连接</span></div><div class=\"line\">host    all             all             <span class=\"number\">0.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span>/<span class=\"number\">0</span>               md5</div></pre></td></tr></table></figure></p>\n<p><img src=\"/photo/img/kong/pg_hba.conf.png\" alt=\"image\"></p>\n<p>执行<code>vim /var/lib/pgsql/10/data/postgresql.conf</code><br>添加一下信息:<br><figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">listen_addresses</span> = <span class=\"string\">'*'</span> //允许所有的ip访问postgres</div></pre></td></tr></table></figure></p>\n<h1 id=\"3-配置kong-conf\"><a href=\"#3-配置kong-conf\" class=\"headerlink\" title=\"3.配置kong.conf\"></a>3.配置kong.conf</h1><p>执行 <code>vi /etc/kong/kong.conf</code></p>\n<figure class=\"highlight delphi\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">pg_host = <span class=\"number\">127.0</span>.<span class=\"number\">0.1</span>             # The PostgreSQL host <span class=\"keyword\">to</span> connect <span class=\"keyword\">to</span>.</div><div class=\"line\">pg_port = <span class=\"number\">5432</span>                  # The port <span class=\"keyword\">to</span> connect <span class=\"keyword\">to</span>.</div><div class=\"line\">pg_user = kong                  # The username <span class=\"keyword\">to</span> authenticate <span class=\"keyword\">if</span> required.</div><div class=\"line\">pg_password = kong                  # The password <span class=\"keyword\">to</span> authenticate <span class=\"keyword\">if</span> required.</div><div class=\"line\">pg_database = kong              # The database <span class=\"keyword\">name</span> <span class=\"keyword\">to</span> connect <span class=\"keyword\">to</span>.</div></pre></td></tr></table></figure>\n<p>执行<code>sudo /usr/local/bin/kong start -c /etc/kong/kong.conf</code>,提示<code>Kong started</code>则代表启动成功</p>\n<p><code>curl -i http://localhost:8001/</code>,测试kong是否启动。也可以访问<code>http://host:8000/</code>,来确定kong是否起来。因为此时我们尚未配置任何服务、路由，访问会返回404，如下：<br><img src=\"/photo/img/kong/kong-404.png\" alt=\"image\"></p>\n<h1 id=\"4-配置dashboard\"><a href=\"#4-配置dashboard\" class=\"headerlink\" title=\"4.配置dashboard\"></a>4.配置dashboard</h1><p>前置操作：需要安装nodejs<br><code>sudo yum install nodejs</code></p>\n<p>kong提供一套api，用于动态管服务、路由、插件等。当然有开源的dashboard，这样我们操作起来更方便。<br>开源项目地址<code>https://github.com/PGBI/kong-dashboard</code></p>\n<p>安装命令<code>npm install -g kong-dashboard</code></p>\n<p>启动命令：<code>nohup kong-dashboard start --kong-url http://localhost:8001 /dev/null 2&gt;&amp;1 &amp;</code></p>\n<p>为了安全起见，可以吧启动kong的账户密码放在work的环境变量里。<br>修改work的环境变量 vi ~.bash_profile，添加password参数。<br>kong-dashboard start \\<br>  –kong-url <a href=\"http://kong:8001\" target=\"_blank\" rel=\"noopener\">http://kong:8001</a> \\<br>  –basic-auth work=$password</p>\n<h1 id=\"5-日志目录以及启动相关\"><a href=\"#5-日志目录以及启动相关\" class=\"headerlink\" title=\"5.日志目录以及启动相关\"></a>5.日志目录以及启动相关</h1><p>查看日志文件<code>tail -f /usr/local/kong/logs/error.log</code></p>\n<p>kong配置文件默认地址为 /ect/kong/kong.conf<br>想要删除postgreSql，需要先断开所有连接<code>sudo ps aux | grep scidb | xargs sudo kill -9</code></p>\n<p>启动命令<code>sudo /usr/local/bin/kong start -c /etc/kong/kong.conf</code></p>\n<h1 id=\"6-遇到问题\"><a href=\"#6-遇到问题\" class=\"headerlink\" title=\"6.遇到问题\"></a>6.遇到问题</h1><p>沙盒项目部署的时候，我把项目上传到了 /home/work/kong/目录下，并将其软连到了/usr/local/share/lua/目录下。、</p>\n<p>再启动kong时，报错:</p>\n<figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\">2018/12/06 15:26:01 [<span class=\"keyword\">error</span>] 7684#0: init_worker_by_lua <span class=\"keyword\">error</span>: /usr/<span class=\"keyword\">local</span>/share/lua/5.1/kong/init.lua:244: module 'resty.worker.events' not found:Failed loading module resty.worker.events <span class=\"keyword\">in</span> LuaRocks rock lua-resty-worker-events 0.3.3-1</div><div class=\"line\">\t<span class=\"keyword\">no</span> field package.preload['resty.worker.events']</div><div class=\"line\">\t<span class=\"keyword\">no</span> <span class=\"keyword\">file</span> './resty/worker/events.lua'</div><div class=\"line\">\t<span class=\"keyword\">no</span> <span class=\"keyword\">file</span> './resty/worker/events/init.lua'</div><div class=\"line\">\t<span class=\"keyword\">no</span> <span class=\"keyword\">file</span> '/usr/<span class=\"keyword\">local</span>/openresty/site/lualib/resty/worker/events.ljbc'</div><div class=\"line\">\t<span class=\"keyword\">no</span> <span class=\"keyword\">file</span> '/usr/<span class=\"keyword\">local</span>/openresty/site/lualib/resty/worker/events/init.ljbc'</div><div class=\"line\">\t<span class=\"keyword\">no</span> <span class=\"keyword\">file</span> '/usr/<span class=\"keyword\">local</span>/openresty/lualib/resty/worker/events.ljbc'</div><div class=\"line\">\t<span class=\"keyword\">no</span> <span class=\"keyword\">file</span> '/usr/<span class=\"keyword\">local</span>/openresty/lualib/resty/worker/events/init.ljbc'</div><div class=\"line\">\t<span class=\"keyword\">no</span> <span class=\"keyword\">file</span> '/usr/<span class=\"keyword\">local</span>/openresty/site/lualib/resty/worker/events.lua'</div><div class=\"line\">\t<span class=\"keyword\">no</span> <span class=\"keyword\">file</span> '/usr/<span class=\"keyword\">local</span>/openresty/site/lualib/resty/worker/events/init.lua'</div><div class=\"line\">\t<span class=\"keyword\">no</span> <span class=\"keyword\">file</span> '/usr/<span class=\"keyword\">local</span>/openresty/lualib/resty/worker/events.lua'</div><div class=\"line\">\t<span class=\"keyword\">no</span> <span class=\"keyword\">file</span> '/usr/<span class=\"keyword\">local</span>/openresty/lualib/resty/worker/events/init.lua'</div><div class=\"line\">\t<span class=\"keyword\">no</span> <span class=\"keyword\">file</span> '/usr/<span class=\"keyword\">local</span>/openresty/luajit/share/luajit-2.1.0-beta3/resty/worker/events.lua'</div><div class=\"line\">\t<span class=\"keyword\">no</span> <span class=\"keyword\">file</span> '/usr/<span class=\"keyword\">local</span>/share/lua/5.1/resty/worker/events.lua'</div><div class=\"line\">\t<span class=\"keyword\">no</span> <span class=\"keyword\">file</span> '/usr/<span class=\"keyword\">local</span>/share/lua/5.1/resty/worker/events/init.lua'</div><div class=\"line\">\t<span class=\"keyword\">no</span> <span class=\"keyword\">file</span> '/usr/<span class=\"keyword\">local</span>/openresty/luajit/share/lua/5.1/resty/worker/events.lua'</div><div class=\"line\">\t<span class=\"keyword\">no</span> <span class=\"keyword\">file</span> '/usr/<span class=\"keyword\">local</span>/openresty/luajit/share/lua/5.1/resty/worker/events/init.lua'</div><div class=\"line\">\t<span class=\"keyword\">no</span> <span class=\"keyword\">file</span> '/root/.luarocks/share/lua/5.1/resty/worker/events.lua'</div><div class=\"line\">\t<span class=\"keyword\">no</span> <span class=\"keyword\">file</span> '/root/.luarocks/share/lua/5.1/resty/worker/events/init.lua'</div><div class=\"line\">\t<span class=\"keyword\">no</span> <span class=\"keyword\">file</span> '/usr/<span class=\"keyword\">local</span>/openresty/site/lualib/resty/worker/events.<span class=\"keyword\">so</span>'</div><div class=\"line\">\t<span class=\"keyword\">no</span> <span class=\"keyword\">file</span> '/usr/<span class=\"keyword\">local</span>/openresty/lualib/resty/worker/events.<span class=\"keyword\">so</span>'</div><div class=\"line\">\t<span class=\"keyword\">no</span> <span class=\"keyword\">file</span> './resty/worker/events.<span class=\"keyword\">so</span>'</div><div class=\"line\">\t<span class=\"keyword\">no</span> <span class=\"keyword\">file</span> '/usr/<span class=\"keyword\">local</span>/lib/lua/5.1/resty/worker/events.<span class=\"keyword\">so</span>'</div><div class=\"line\">\t<span class=\"keyword\">no</span> <span class=\"keyword\">file</span> '/usr/<span class=\"keyword\">local</span>/openresty/luajit/lib/lua/5.1/resty/worker/events.<span class=\"keyword\">so</span>'</div><div class=\"line\">\t<span class=\"keyword\">no</span> <span class=\"keyword\">file</span> '/usr/<span class=\"keyword\">local</span>/lib/lua/5.1/loadall.<span class=\"keyword\">so</span>'</div><div class=\"line\">\t<span class=\"keyword\">no</span> <span class=\"keyword\">file</span> '/root/.luarocks/lib/lua/5.1/resty/worker/events.<span class=\"keyword\">so</span>'</div><div class=\"line\">\t<span class=\"keyword\">no</span> <span class=\"keyword\">file</span> '/usr/<span class=\"keyword\">local</span>/openresty/site/lualib/resty.<span class=\"keyword\">so</span>'</div><div class=\"line\">\t<span class=\"keyword\">no</span> <span class=\"keyword\">file</span> '/usr/<span class=\"keyword\">local</span>/openresty/lualib/resty.<span class=\"keyword\">so</span>'</div><div class=\"line\">\t<span class=\"keyword\">no</span> <span class=\"keyword\">file</span> './resty.<span class=\"keyword\">so</span>'</div><div class=\"line\">\t<span class=\"keyword\">no</span> <span class=\"keyword\">file</span> '/usr/<span class=\"keyword\">local</span>/lib/lua/5.1/resty.<span class=\"keyword\">so</span>'</div><div class=\"line\">\t<span class=\"keyword\">no</span> <span class=\"keyword\">file</span> '/usr/<span class=\"keyword\">local</span>/openresty/luajit/lib/lua/5.1/resty.<span class=\"keyword\">so</span>'</div><div class=\"line\">\t<span class=\"keyword\">no</span> <span class=\"keyword\">file</span> '/usr/<span class=\"keyword\">local</span>/lib/lua/5.1/loadall.<span class=\"keyword\">so</span>'</div><div class=\"line\">\t<span class=\"keyword\">no</span> <span class=\"keyword\">file</span> '/root/.luarocks/lib/lua/5.1/resty.<span class=\"keyword\">so</span>'</div></pre></td></tr></table></figure>\n<p>最终我把项目上传到了/usr/local/share/releas/目录下，并将其软连到了/usr/local/share/lua/下，启动并没有出现改问题.</p>\n<p>线索：<br><code>https://github.com/Kong/kong/issues/2838</code></p>\n"},{"title":"socket编程","_content":"","source":"_drafts/socket编程.md","raw":"---\ntitle: socket编程\ntags:\n---\n","slug":"socket编程","published":0,"date":"2018-12-30T17:46:20.098Z","updated":"2018-12-30T17:46:20.098Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjswwkdot0005g7wwjih1udwi","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"strace","_content":"","source":"_drafts/strace.md","raw":"---\ntitle: strace\ntags:\n---\n","slug":"strace","published":0,"date":"2018-12-30T17:46:20.098Z","updated":"2018-12-30T17:46:20.098Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjswwkdov0008g7ww8xr17hc3","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"php闭包","date":"2018-08-25T06:50:55.000Z","toc":true,"_content":"在看guzzle包的时候看大到了一段有意思的代码, 简化以后类似于下边:\n\n```php\n<?php\n/**\n* \n*/\nclass test \n{\n\tpublic  $handler;\n\tpublic function __construct(callable $handler = null)\n\t{\n\t\t$this->handler = $handler;\n\t}\n\n\tpublic static function create(callable $handler)\n\t{\n\t\treturn new self($handler);\n\t}\n\n\tpublic function __invoke($request,$options)\n\t{\n\t\t$func = $this->handler;\n\t    return $func($request, $options);\n\t}\n\n\n\tpublic function test1()\n\t{\n\t\treturn [$this, 'exec1'];\n\t}\n\n\tpublic function exec1($a,$b)\n\t{\n\t\techo ($a+$b);\n\t}\n}\n\n$test = new test();\n\n\n\n$obj = test::create($test->test1());\n\n$obj(1,4);\n\n\n```\n\n- php文档是这样描述闭包的\n\n\n`PHP是将函数以string形式传递的。 可以使用任何内置或用户自定义函数，但除了语言结构例如：array()，echo，empty()，eval()，exit()，isset()，list()，print 或 unset()。\n \n 一个已实例化的 object 的方法被作为 array 传递，下标 0 包含该 object，下标 1 包含方法名。 在同一个类里可以访问 protected 和 private 方法。\n \n 静态类方法也可不经实例化该类的对象而传递，只要在下标 0 中包含类名而不是对象。自 PHP 5.2.3 起，也可以传递 'ClassName::methodName'。\n \n 除了普通的用户自定义函数外，也可传递 匿名函数 给回调参数。`\n \n 除了上边的这些可以作为callable参数的类型,还有一个是拥有__invoke()的实例化对象。\n\n\n所以实例化的对象可以使用 `[$obj,'functionName']` 当做闭包去传递。\n`$obj = test::create($test->test1());`将我们的`test1`方法赋值给新实例化的对象里。\n\n\n- 魔术方法`__invoke()`表示:\n\n当尝试以调用函数的方式调用一个对象时，__invoke() 方法会被自动调用。\n\n\n所以我们调用`$obj()`函数时会调用到__invoke()里,最后调用到我们一开始注册的函数。\n\n\n\nps\n```\nclass test \n{\n\tpublic  $handler;\n\tpublic function __construct(callable $handler = null)\n\t{\n\t\t$this->handler = $handler;\n\t}\n\n\tpublic static function create(callable $handler)\n\t{\n\t\treturn new self($handler);\n\t}\n\n\tpublic function __invoke($request,$options)\n\t{\n\t\t$func = $this->handler;\n\t    return $func($request, $options);\n\t}\n\n\n\tpublic function test1()\n\t{\n\t\treturn [$this, 'exec1'];\n\t}\n\n\tpublic function exec1($a,$b)\n\t{\n\t\techo ($a+$b);\n\t}\n}\n\n$test = new test();\n\n\n\n$blj = test::create($test->test1());\n$blj(1,4);\n//测试对象是否可以作为callable类型参数\n\n\n$test = test::create(new test());\n```","source":"_drafts/php闭包.md","raw":"---\ntitle: php闭包\ndate: 2018-08-25 14:50:55\ntags: php\ncategories: php\ntoc: true\n---\n在看guzzle包的时候看大到了一段有意思的代码, 简化以后类似于下边:\n\n```php\n<?php\n/**\n* \n*/\nclass test \n{\n\tpublic  $handler;\n\tpublic function __construct(callable $handler = null)\n\t{\n\t\t$this->handler = $handler;\n\t}\n\n\tpublic static function create(callable $handler)\n\t{\n\t\treturn new self($handler);\n\t}\n\n\tpublic function __invoke($request,$options)\n\t{\n\t\t$func = $this->handler;\n\t    return $func($request, $options);\n\t}\n\n\n\tpublic function test1()\n\t{\n\t\treturn [$this, 'exec1'];\n\t}\n\n\tpublic function exec1($a,$b)\n\t{\n\t\techo ($a+$b);\n\t}\n}\n\n$test = new test();\n\n\n\n$obj = test::create($test->test1());\n\n$obj(1,4);\n\n\n```\n\n- php文档是这样描述闭包的\n\n\n`PHP是将函数以string形式传递的。 可以使用任何内置或用户自定义函数，但除了语言结构例如：array()，echo，empty()，eval()，exit()，isset()，list()，print 或 unset()。\n \n 一个已实例化的 object 的方法被作为 array 传递，下标 0 包含该 object，下标 1 包含方法名。 在同一个类里可以访问 protected 和 private 方法。\n \n 静态类方法也可不经实例化该类的对象而传递，只要在下标 0 中包含类名而不是对象。自 PHP 5.2.3 起，也可以传递 'ClassName::methodName'。\n \n 除了普通的用户自定义函数外，也可传递 匿名函数 给回调参数。`\n \n 除了上边的这些可以作为callable参数的类型,还有一个是拥有__invoke()的实例化对象。\n\n\n所以实例化的对象可以使用 `[$obj,'functionName']` 当做闭包去传递。\n`$obj = test::create($test->test1());`将我们的`test1`方法赋值给新实例化的对象里。\n\n\n- 魔术方法`__invoke()`表示:\n\n当尝试以调用函数的方式调用一个对象时，__invoke() 方法会被自动调用。\n\n\n所以我们调用`$obj()`函数时会调用到__invoke()里,最后调用到我们一开始注册的函数。\n\n\n\nps\n```\nclass test \n{\n\tpublic  $handler;\n\tpublic function __construct(callable $handler = null)\n\t{\n\t\t$this->handler = $handler;\n\t}\n\n\tpublic static function create(callable $handler)\n\t{\n\t\treturn new self($handler);\n\t}\n\n\tpublic function __invoke($request,$options)\n\t{\n\t\t$func = $this->handler;\n\t    return $func($request, $options);\n\t}\n\n\n\tpublic function test1()\n\t{\n\t\treturn [$this, 'exec1'];\n\t}\n\n\tpublic function exec1($a,$b)\n\t{\n\t\techo ($a+$b);\n\t}\n}\n\n$test = new test();\n\n\n\n$blj = test::create($test->test1());\n$blj(1,4);\n//测试对象是否可以作为callable类型参数\n\n\n$test = test::create(new test());\n```","slug":"php闭包","published":0,"updated":"2019-02-21T03:49:34.698Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjswwkdow0009g7wwlrhsmd2z","content":"<p>在看guzzle包的时候看大到了一段有意思的代码, 简化以后类似于下边:</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">* </div><div class=\"line\">*/</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test</span> </span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">public</span>  $handler;</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">(callable $handler = null)</span></span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">$this</span>-&gt;handler = $handler;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">create</span><span class=\"params\">(callable $handler)</span></span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"keyword\">self</span>($handler);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__invoke</span><span class=\"params\">($request,$options)</span></span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t$func = <span class=\"keyword\">$this</span>-&gt;handler;</div><div class=\"line\">\t    <span class=\"keyword\">return</span> $func($request, $options);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test1</span><span class=\"params\">()</span></span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> [<span class=\"keyword\">$this</span>, <span class=\"string\">'exec1'</span>];</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">exec1</span><span class=\"params\">($a,$b)</span></span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">echo</span> ($a+$b);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">$test = <span class=\"keyword\">new</span> test();</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">$obj = test::create($test-&gt;test1());</div><div class=\"line\"></div><div class=\"line\">$obj(<span class=\"number\">1</span>,<span class=\"number\">4</span>);</div></pre></td></tr></table></figure>\n<ul>\n<li>php文档是这样描述闭包的</li>\n</ul>\n<p>`PHP是将函数以string形式传递的。 可以使用任何内置或用户自定义函数，但除了语言结构例如：array()，echo，empty()，eval()，exit()，isset()，list()，print 或 unset()。</p>\n<p> 一个已实例化的 object 的方法被作为 array 传递，下标 0 包含该 object，下标 1 包含方法名。 在同一个类里可以访问 protected 和 private 方法。</p>\n<p> 静态类方法也可不经实例化该类的对象而传递，只要在下标 0 中包含类名而不是对象。自 PHP 5.2.3 起，也可以传递 ‘ClassName::methodName’。</p>\n<p> 除了普通的用户自定义函数外，也可传递 匿名函数 给回调参数。`</p>\n<p> 除了上边的这些可以作为callable参数的类型,还有一个是拥有__invoke()的实例化对象。</p>\n<p>所以实例化的对象可以使用 <code>[$obj,&#39;functionName&#39;]</code> 当做闭包去传递。<br><code>$obj = test::create($test-&gt;test1());</code>将我们的<code>test1</code>方法赋值给新实例化的对象里。</p>\n<ul>\n<li>魔术方法<code>__invoke()</code>表示:</li>\n</ul>\n<p>当尝试以调用函数的方式调用一个对象时，__invoke() 方法会被自动调用。</p>\n<p>所以我们调用<code>$obj()</code>函数时会调用到__invoke()里,最后调用到我们一开始注册的函数。</p>\n<p>ps<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test</span> </span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">public</span>  $handler;</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">(callable $handler = null)</span></span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">$this</span>-&gt;handler = $handler;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">create</span><span class=\"params\">(callable $handler)</span></span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"keyword\">self</span>($handler);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__invoke</span><span class=\"params\">($request,$options)</span></span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t$func = <span class=\"keyword\">$this</span>-&gt;handler;</div><div class=\"line\">\t    <span class=\"keyword\">return</span> $func($request, $options);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test1</span><span class=\"params\">()</span></span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> [<span class=\"keyword\">$this</span>, <span class=\"string\">'exec1'</span>];</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">exec1</span><span class=\"params\">($a,$b)</span></span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">echo</span> ($a+$b);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">$test = <span class=\"keyword\">new</span> test();</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">$blj = test::create($test-&gt;test1());</div><div class=\"line\">$blj(<span class=\"number\">1</span>,<span class=\"number\">4</span>);</div><div class=\"line\"><span class=\"comment\">//测试对象是否可以作为callable类型参数</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">$test = test::create(<span class=\"keyword\">new</span> test());</div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>在看guzzle包的时候看大到了一段有意思的代码, 简化以后类似于下边:</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">* </div><div class=\"line\">*/</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test</span> </span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">public</span>  $handler;</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">(callable $handler = null)</span></span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">$this</span>-&gt;handler = $handler;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">create</span><span class=\"params\">(callable $handler)</span></span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"keyword\">self</span>($handler);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__invoke</span><span class=\"params\">($request,$options)</span></span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t$func = <span class=\"keyword\">$this</span>-&gt;handler;</div><div class=\"line\">\t    <span class=\"keyword\">return</span> $func($request, $options);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test1</span><span class=\"params\">()</span></span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> [<span class=\"keyword\">$this</span>, <span class=\"string\">'exec1'</span>];</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">exec1</span><span class=\"params\">($a,$b)</span></span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">echo</span> ($a+$b);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">$test = <span class=\"keyword\">new</span> test();</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">$obj = test::create($test-&gt;test1());</div><div class=\"line\"></div><div class=\"line\">$obj(<span class=\"number\">1</span>,<span class=\"number\">4</span>);</div></pre></td></tr></table></figure>\n<ul>\n<li>php文档是这样描述闭包的</li>\n</ul>\n<p>`PHP是将函数以string形式传递的。 可以使用任何内置或用户自定义函数，但除了语言结构例如：array()，echo，empty()，eval()，exit()，isset()，list()，print 或 unset()。</p>\n<p> 一个已实例化的 object 的方法被作为 array 传递，下标 0 包含该 object，下标 1 包含方法名。 在同一个类里可以访问 protected 和 private 方法。</p>\n<p> 静态类方法也可不经实例化该类的对象而传递，只要在下标 0 中包含类名而不是对象。自 PHP 5.2.3 起，也可以传递 ‘ClassName::methodName’。</p>\n<p> 除了普通的用户自定义函数外，也可传递 匿名函数 给回调参数。`</p>\n<p> 除了上边的这些可以作为callable参数的类型,还有一个是拥有__invoke()的实例化对象。</p>\n<p>所以实例化的对象可以使用 <code>[$obj,&#39;functionName&#39;]</code> 当做闭包去传递。<br><code>$obj = test::create($test-&gt;test1());</code>将我们的<code>test1</code>方法赋值给新实例化的对象里。</p>\n<ul>\n<li>魔术方法<code>__invoke()</code>表示:</li>\n</ul>\n<p>当尝试以调用函数的方式调用一个对象时，__invoke() 方法会被自动调用。</p>\n<p>所以我们调用<code>$obj()</code>函数时会调用到__invoke()里,最后调用到我们一开始注册的函数。</p>\n<p>ps<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test</span> </span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">public</span>  $handler;</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">(callable $handler = null)</span></span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">$this</span>-&gt;handler = $handler;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">create</span><span class=\"params\">(callable $handler)</span></span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"keyword\">self</span>($handler);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__invoke</span><span class=\"params\">($request,$options)</span></span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t$func = <span class=\"keyword\">$this</span>-&gt;handler;</div><div class=\"line\">\t    <span class=\"keyword\">return</span> $func($request, $options);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test1</span><span class=\"params\">()</span></span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> [<span class=\"keyword\">$this</span>, <span class=\"string\">'exec1'</span>];</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">exec1</span><span class=\"params\">($a,$b)</span></span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">echo</span> ($a+$b);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">$test = <span class=\"keyword\">new</span> test();</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">$blj = test::create($test-&gt;test1());</div><div class=\"line\">$blj(<span class=\"number\">1</span>,<span class=\"number\">4</span>);</div><div class=\"line\"><span class=\"comment\">//测试对象是否可以作为callable类型参数</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">$test = test::create(<span class=\"keyword\">new</span> test());</div></pre></td></tr></table></figure></p>\n"},{"title":"tcpdump","_content":"","source":"_drafts/tcpdump.md","raw":"---\ntitle: tcpdump\ntags:\n---\n","slug":"tcpdump","published":0,"date":"2018-12-30T17:46:20.098Z","updated":"2018-12-30T17:46:20.098Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjswwkdox000ag7ww8upl2ttl","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"一次HTTP请求","date":"2016-11-20T12:09:23.000Z","toc":true,"_content":"\n#一次完整的HTTP请求，以及请求方式的区别\n\n-----\n今天在对接业务组mas时候遇到一个很少遇到的问题，发送一个一个不但参数的POST的请求。\n在我的印象里传参好像必带名字，因为就像一个你不认识的人要来你家，你肯定不会让他进来的。\n所以重新缕了一下POST请求，冲冲能。\n\n##一次HTTP请求的过程\n\n访问某个网址，例如我们访问www.baidu.com\n浏览器会和百度的服务器进行三次握手（中间的域名解析等暂不考虑）\n然后是程序层面的信息请求与提交\n\n三次握手->get或者post请求\n\n1） Client首先发送一个连接试探，ACK=0 表示确认号无效，SYN = 1 表示这是一个连接请求或连接接受报文，同时表示这个数据报不能携带数据，seq = x 表示Client自己的初始序号（seq = 0 就代表这是第0号包），这时候Client进入syn_sent状态，表示客户端等待服务器的回复\n\n2） Server监听到连接请求报文后，如同意建立连接，则向Client发送确认。TCP报文首部中的SYN 和 ACK都置1 ，ack = x + 1表示期望收到对方下一个报文段的第一个数据字节序号是x+1，同时表明x为止的所有数据都已正确收到（ack=1其实是ack=0+1,也就是期望客户端的第1个包），seq = y 表示Server 自己的初始序号（seq=0就代表这是服务器这边发出的第0号包）。这时服务器进入syn_rcvd，表示服务器已经收到Client的连接请求，等待client的确认。\n\n3） Client收到确认后还需再次发送确认，同时携带要发送给Server的数据。ACK 置1 表示确认号ack= y + 1 有效（代表期望收到服务器的第1个包），Client自己的序号seq= x + 1（表示这就是我的第1个包，相对于第0个包来说的），一旦收到Client的确认之后，这个TCP连接就进入Established状态，就可以发起http请求了。\n\n## post请求\nHTTP 协议是以 ASCII 码传输，建立在TCP/IP协议之上的应用层规范，规范把 HTTP 请求分为三个部分：状态行、请求头、消息主体。类似于下面这样：\n<method> <request-url> <version>\n<headers>\n<entity-body></entity-body></headers></version></request-url></method>\n协议规定 POST 提交的数据必须放在消息主体（entity-body）中，但协议并没有规定数据必须使用什么编码方式。实际上，开发者完全可以自己决定消息主体的格式，只要最后发送的 HTTP 请求满足上面的格式就可以。\n\n但是，数据发送出去，还要服务端解析成功才有意义。一般服务端语言如 php、python 等，以及它们的 framework，都内置了自动解析常见数据格式的功能。服务端通常是根据请求头（headers）中的 Content-Type 字段来获知请求中的消息主体是用何种方式编码，再对主体进行解析。所以说到 POST 提交数据方案，包含了 Content-Type 和消息主体编码方式两部分。下面就正式开始介绍它们。\n\n\nheader\nContent-Type，内容类型，一般是指网页中存在的Content-Type，用于定义网络文件的类型和网页的编码，决定文件接收方将以什么形式、什么编码读取这个文件.\n当然还有UA等其他头信息，\n\nContent-Type对照表：http://tool.oschina.net/commons\n\n说几种常见的Content-Type\n\n1.application/x-www-form-urlencoded\n这个就是我们常见form表格提的方式\n\n2.multipart/form-data\n\n这又是一个常见的 POST 数据提交的方式。我们使用表单上传文件时，必须让 form 的 enctyped 等于这个值。直接来看一个请求示例\n\n3.application/json\n\napplication/json 这个 Content-Type 作为响应头大家肯定不陌生。实际上，现在越来越多的人把它作为请求头，用来告诉服务端消息主体是序列化后的 JSON 字符串。由于 JSON 规范的流行，除了低版本 IE 之外的各大浏览器都原生支持 JSON.stringify，服务端语言也都有处理 JSON 的函数，使用 JSON 不会遇上什么麻烦。\n\nso 用这种格式就可以传递非Key Val的数据\n","source":"_drafts/一次HTTP请求.md","raw":"---\ntitle: 一次HTTP请求\ndate: 2016-11-20 20:09:23\ntags: 网络\ncategories: 网络\ntoc: true\n---\n\n#一次完整的HTTP请求，以及请求方式的区别\n\n-----\n今天在对接业务组mas时候遇到一个很少遇到的问题，发送一个一个不但参数的POST的请求。\n在我的印象里传参好像必带名字，因为就像一个你不认识的人要来你家，你肯定不会让他进来的。\n所以重新缕了一下POST请求，冲冲能。\n\n##一次HTTP请求的过程\n\n访问某个网址，例如我们访问www.baidu.com\n浏览器会和百度的服务器进行三次握手（中间的域名解析等暂不考虑）\n然后是程序层面的信息请求与提交\n\n三次握手->get或者post请求\n\n1） Client首先发送一个连接试探，ACK=0 表示确认号无效，SYN = 1 表示这是一个连接请求或连接接受报文，同时表示这个数据报不能携带数据，seq = x 表示Client自己的初始序号（seq = 0 就代表这是第0号包），这时候Client进入syn_sent状态，表示客户端等待服务器的回复\n\n2） Server监听到连接请求报文后，如同意建立连接，则向Client发送确认。TCP报文首部中的SYN 和 ACK都置1 ，ack = x + 1表示期望收到对方下一个报文段的第一个数据字节序号是x+1，同时表明x为止的所有数据都已正确收到（ack=1其实是ack=0+1,也就是期望客户端的第1个包），seq = y 表示Server 自己的初始序号（seq=0就代表这是服务器这边发出的第0号包）。这时服务器进入syn_rcvd，表示服务器已经收到Client的连接请求，等待client的确认。\n\n3） Client收到确认后还需再次发送确认，同时携带要发送给Server的数据。ACK 置1 表示确认号ack= y + 1 有效（代表期望收到服务器的第1个包），Client自己的序号seq= x + 1（表示这就是我的第1个包，相对于第0个包来说的），一旦收到Client的确认之后，这个TCP连接就进入Established状态，就可以发起http请求了。\n\n## post请求\nHTTP 协议是以 ASCII 码传输，建立在TCP/IP协议之上的应用层规范，规范把 HTTP 请求分为三个部分：状态行、请求头、消息主体。类似于下面这样：\n<method> <request-url> <version>\n<headers>\n<entity-body></entity-body></headers></version></request-url></method>\n协议规定 POST 提交的数据必须放在消息主体（entity-body）中，但协议并没有规定数据必须使用什么编码方式。实际上，开发者完全可以自己决定消息主体的格式，只要最后发送的 HTTP 请求满足上面的格式就可以。\n\n但是，数据发送出去，还要服务端解析成功才有意义。一般服务端语言如 php、python 等，以及它们的 framework，都内置了自动解析常见数据格式的功能。服务端通常是根据请求头（headers）中的 Content-Type 字段来获知请求中的消息主体是用何种方式编码，再对主体进行解析。所以说到 POST 提交数据方案，包含了 Content-Type 和消息主体编码方式两部分。下面就正式开始介绍它们。\n\n\nheader\nContent-Type，内容类型，一般是指网页中存在的Content-Type，用于定义网络文件的类型和网页的编码，决定文件接收方将以什么形式、什么编码读取这个文件.\n当然还有UA等其他头信息，\n\nContent-Type对照表：http://tool.oschina.net/commons\n\n说几种常见的Content-Type\n\n1.application/x-www-form-urlencoded\n这个就是我们常见form表格提的方式\n\n2.multipart/form-data\n\n这又是一个常见的 POST 数据提交的方式。我们使用表单上传文件时，必须让 form 的 enctyped 等于这个值。直接来看一个请求示例\n\n3.application/json\n\napplication/json 这个 Content-Type 作为响应头大家肯定不陌生。实际上，现在越来越多的人把它作为请求头，用来告诉服务端消息主体是序列化后的 JSON 字符串。由于 JSON 规范的流行，除了低版本 IE 之外的各大浏览器都原生支持 JSON.stringify，服务端语言也都有处理 JSON 的函数，使用 JSON 不会遇上什么麻烦。\n\nso 用这种格式就可以传递非Key Val的数据\n","slug":"一次HTTP请求","published":0,"updated":"2019-02-21T03:49:34.699Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjswwkdoz000eg7ww5or2795e","content":"<p>#一次完整的HTTP请求，以及请求方式的区别</p>\n<hr>\n<p>今天在对接业务组mas时候遇到一个很少遇到的问题，发送一个一个不但参数的POST的请求。<br>在我的印象里传参好像必带名字，因为就像一个你不认识的人要来你家，你肯定不会让他进来的。<br>所以重新缕了一下POST请求，冲冲能。</p>\n<p>##一次HTTP请求的过程</p>\n<p>访问某个网址，例如我们访问www.baidu.com<br>浏览器会和百度的服务器进行三次握手（中间的域名解析等暂不考虑）<br>然后是程序层面的信息请求与提交</p>\n<p>三次握手-&gt;get或者post请求</p>\n<p>1） Client首先发送一个连接试探，ACK=0 表示确认号无效，SYN = 1 表示这是一个连接请求或连接接受报文，同时表示这个数据报不能携带数据，seq = x 表示Client自己的初始序号（seq = 0 就代表这是第0号包），这时候Client进入syn_sent状态，表示客户端等待服务器的回复</p>\n<p>2） Server监听到连接请求报文后，如同意建立连接，则向Client发送确认。TCP报文首部中的SYN 和 ACK都置1 ，ack = x + 1表示期望收到对方下一个报文段的第一个数据字节序号是x+1，同时表明x为止的所有数据都已正确收到（ack=1其实是ack=0+1,也就是期望客户端的第1个包），seq = y 表示Server 自己的初始序号（seq=0就代表这是服务器这边发出的第0号包）。这时服务器进入syn_rcvd，表示服务器已经收到Client的连接请求，等待client的确认。</p>\n<p>3） Client收到确认后还需再次发送确认，同时携带要发送给Server的数据。ACK 置1 表示确认号ack= y + 1 有效（代表期望收到服务器的第1个包），Client自己的序号seq= x + 1（表示这就是我的第1个包，相对于第0个包来说的），一旦收到Client的确认之后，这个TCP连接就进入Established状态，就可以发起http请求了。</p>\n<h2 id=\"post请求\"><a href=\"#post请求\" class=\"headerlink\" title=\"post请求\"></a>post请求</h2><p>HTTP 协议是以 ASCII 码传输，建立在TCP/IP协议之上的应用层规范，规范把 HTTP 请求分为三个部分：状态行、请求头、消息主体。类似于下面这样：</p>\n<p><method> <request-url> <version></version></request-url></method></p>\n<p><headers></headers></p>\n<p><entity-body></entity-body><br>协议规定 POST 提交的数据必须放在消息主体（entity-body）中，但协议并没有规定数据必须使用什么编码方式。实际上，开发者完全可以自己决定消息主体的格式，只要最后发送的 HTTP 请求满足上面的格式就可以。</p>\n<p>但是，数据发送出去，还要服务端解析成功才有意义。一般服务端语言如 php、python 等，以及它们的 framework，都内置了自动解析常见数据格式的功能。服务端通常是根据请求头（headers）中的 Content-Type 字段来获知请求中的消息主体是用何种方式编码，再对主体进行解析。所以说到 POST 提交数据方案，包含了 Content-Type 和消息主体编码方式两部分。下面就正式开始介绍它们。</p>\n<p>header<br>Content-Type，内容类型，一般是指网页中存在的Content-Type，用于定义网络文件的类型和网页的编码，决定文件接收方将以什么形式、什么编码读取这个文件.<br>当然还有UA等其他头信息，</p>\n<p>Content-Type对照表：<a href=\"http://tool.oschina.net/commons\" target=\"_blank\" rel=\"noopener\">http://tool.oschina.net/commons</a></p>\n<p>说几种常见的Content-Type</p>\n<p>1.application/x-www-form-urlencoded<br>这个就是我们常见form表格提的方式</p>\n<p>2.multipart/form-data</p>\n<p>这又是一个常见的 POST 数据提交的方式。我们使用表单上传文件时，必须让 form 的 enctyped 等于这个值。直接来看一个请求示例</p>\n<p>3.application/json</p>\n<p>application/json 这个 Content-Type 作为响应头大家肯定不陌生。实际上，现在越来越多的人把它作为请求头，用来告诉服务端消息主体是序列化后的 JSON 字符串。由于 JSON 规范的流行，除了低版本 IE 之外的各大浏览器都原生支持 JSON.stringify，服务端语言也都有处理 JSON 的函数，使用 JSON 不会遇上什么麻烦。</p>\n<p>so 用这种格式就可以传递非Key Val的数据</p>\n","site":{"data":{}},"excerpt":"","more":"<p>#一次完整的HTTP请求，以及请求方式的区别</p>\n<hr>\n<p>今天在对接业务组mas时候遇到一个很少遇到的问题，发送一个一个不但参数的POST的请求。<br>在我的印象里传参好像必带名字，因为就像一个你不认识的人要来你家，你肯定不会让他进来的。<br>所以重新缕了一下POST请求，冲冲能。</p>\n<p>##一次HTTP请求的过程</p>\n<p>访问某个网址，例如我们访问www.baidu.com<br>浏览器会和百度的服务器进行三次握手（中间的域名解析等暂不考虑）<br>然后是程序层面的信息请求与提交</p>\n<p>三次握手-&gt;get或者post请求</p>\n<p>1） Client首先发送一个连接试探，ACK=0 表示确认号无效，SYN = 1 表示这是一个连接请求或连接接受报文，同时表示这个数据报不能携带数据，seq = x 表示Client自己的初始序号（seq = 0 就代表这是第0号包），这时候Client进入syn_sent状态，表示客户端等待服务器的回复</p>\n<p>2） Server监听到连接请求报文后，如同意建立连接，则向Client发送确认。TCP报文首部中的SYN 和 ACK都置1 ，ack = x + 1表示期望收到对方下一个报文段的第一个数据字节序号是x+1，同时表明x为止的所有数据都已正确收到（ack=1其实是ack=0+1,也就是期望客户端的第1个包），seq = y 表示Server 自己的初始序号（seq=0就代表这是服务器这边发出的第0号包）。这时服务器进入syn_rcvd，表示服务器已经收到Client的连接请求，等待client的确认。</p>\n<p>3） Client收到确认后还需再次发送确认，同时携带要发送给Server的数据。ACK 置1 表示确认号ack= y + 1 有效（代表期望收到服务器的第1个包），Client自己的序号seq= x + 1（表示这就是我的第1个包，相对于第0个包来说的），一旦收到Client的确认之后，这个TCP连接就进入Established状态，就可以发起http请求了。</p>\n<h2 id=\"post请求\"><a href=\"#post请求\" class=\"headerlink\" title=\"post请求\"></a>post请求</h2><p>HTTP 协议是以 ASCII 码传输，建立在TCP/IP协议之上的应用层规范，规范把 HTTP 请求分为三个部分：状态行、请求头、消息主体。类似于下面这样：</p>\n<p><method> <request-url> <version></version></request-url></method></p>\n<p><headers></headers></p>\n<p><entity-body></entity-body><br>协议规定 POST 提交的数据必须放在消息主体（entity-body）中，但协议并没有规定数据必须使用什么编码方式。实际上，开发者完全可以自己决定消息主体的格式，只要最后发送的 HTTP 请求满足上面的格式就可以。</p>\n<p>但是，数据发送出去，还要服务端解析成功才有意义。一般服务端语言如 php、python 等，以及它们的 framework，都内置了自动解析常见数据格式的功能。服务端通常是根据请求头（headers）中的 Content-Type 字段来获知请求中的消息主体是用何种方式编码，再对主体进行解析。所以说到 POST 提交数据方案，包含了 Content-Type 和消息主体编码方式两部分。下面就正式开始介绍它们。</p>\n<p>header<br>Content-Type，内容类型，一般是指网页中存在的Content-Type，用于定义网络文件的类型和网页的编码，决定文件接收方将以什么形式、什么编码读取这个文件.<br>当然还有UA等其他头信息，</p>\n<p>Content-Type对照表：<a href=\"http://tool.oschina.net/commons\" target=\"_blank\" rel=\"noopener\">http://tool.oschina.net/commons</a></p>\n<p>说几种常见的Content-Type</p>\n<p>1.application/x-www-form-urlencoded<br>这个就是我们常见form表格提的方式</p>\n<p>2.multipart/form-data</p>\n<p>这又是一个常见的 POST 数据提交的方式。我们使用表单上传文件时，必须让 form 的 enctyped 等于这个值。直接来看一个请求示例</p>\n<p>3.application/json</p>\n<p>application/json 这个 Content-Type 作为响应头大家肯定不陌生。实际上，现在越来越多的人把它作为请求头，用来告诉服务端消息主体是序列化后的 JSON 字符串。由于 JSON 规范的流行，除了低版本 IE 之外的各大浏览器都原生支持 JSON.stringify，服务端语言也都有处理 JSON 的函数，使用 JSON 不会遇上什么麻烦。</p>\n<p>so 用这种格式就可以传递非Key Val的数据</p>\n"},{"title":"使用guzzle并行请求","date":"2018-09-28T09:10:05.000Z","toc":true,"_content":"\n## 背景\n\n由于拍卖项目特有的点特, 会导致在开拍是有瞬时的高流量。\n后端系统会每个出价排序, 由于高qps导致排序会有重复的情况,。为了解决遮掩样的问题, \n就写了一个分布式锁, 用于解决排序冲突。用guzzle写了一个压测脚本。\n\n\n## 实现\n\n首先压测是为了同一时刻发送指定数量的请求到目标接口。\n所以串行话的请求是无法\nguzzle 支持用pool实现并行的请求。\n官方文档 :\n\n[官方文档支持](https://guzzle-cn.readthedocs.io/zh_CN/latest/quickstart.html?highlight=Pool)\n\n文档中并没有提示如何发送POST请求, 顾琢磨一下:\n\n\n并行方式请求:\n\n```php\n  $client = new Client(['base_uri' => '10.171.22.45:5005', 'timeout' => 10]);\n    \n        $requests = function ($total) {\n            $uri = 'api/v1/bid';\n            for ($i = 0; $i < $total; $i++) {\n                yield new Request('POST', $uri, ['Content-type' => 'application/json'],json_encode([\n                    'car_dealer_id'=> (string)rand(1,20000),\n                    'bid_price' => \"4\",\n                    'car_id' => \"206431344\",\n                    'fr' => 'bd_other',\n                    'platform' => 'MO',\n                    'source' => 'C2B竞价',\n                    'sale_type' => '卖车',\n                    'car_dealer_city' => '深圳',\n                    'app_version' => \"3.2\"\n                ]));\n            }\n        };\n    \n        $pool = new Pool($client, $requests(100), [\n            'concurrency' => 5,\n            'fulfilled' => function ($response, $index) {\n                var_dump($response->getBody()->getContents());\n            },\n            'rejected' => function ($reason, $index) {\n                var_dump($reason->getMessage());\n            },\n        ]);\n    \n        $promise = $pool->promise();\n        $promise->wait();\n```\n![image](/photo/img/guzzle压测/并行.png)\n![image](/photo/img/guzzle压测/逻辑上并行-100次.png)\n![image](/photo/img/guzzle压测/逻辑上并行-100次结束.png)\n\n\n串行:\n\n```php\n        for ($i =1 ; $i<20;$i++) {\n            echo time();\n            $org_res[] = $this->client->request('POST', 'api/v1/bid',['form_params'=>\n                [\n                    'car_dealer_id'=> rand(1,20000),\n                    'bid_price' => 4,\n                    'car_id' => 206431332,\n                    'fr' => 'bd_other',\n                    'platform' => 'MO',\n                    'source' => 'C2B竞价',\n                    'sale_type' => '卖车',\n                    'car_dealer_city' => '深圳',\n                    'app_version' => 3.2\n                ]]);\n        }\n\n        foreach ($org_res as $val) {\n            $resdata = $val->getBody()->getContents();\n        }\n        var_dump($resdata);\n        die;\n```\n\n请求结果:\n\n![image](/photo/img/guzzle压测/串行.png)\n\n![image](/photo/img/guzzle压测/逻辑上的串行-100次.png)\n\n## 两者区别\n\n- 从性能上来看,20次请求, 并行请求耗时2秒, 串行请求3秒。\n- 当请求加到100次的时候, 并行请求耗时6秒, 串行请求耗时27秒,这个时候就能体现出并行和串行的却别相差21秒。\n\n\n为什么会有这么差距,再上一张图和代码,打印出来开始结束时间。\n\n并行:\n```php\n       并行请求\n        echo '总的开始:'.microtime().'<br>';\n        $client = new Client(['base_uri' => '10.171.22.45:5005', 'timeout' => 10]);\n        $requests = function ($total) {\n            $uri = 'api/v1/bid';\n            for ($i = 0; $i < $total; $i++) {\n                $car_dealer_id = (string)rand(1,1000000);\n                echo '开始'.microtime().' car_dealer_id:'.$car_dealer_id.\"<br>\";\n                yield new Request('POST', $uri, ['Content-type' => 'application/json'],json_encode([\n                    'car_dealer_id'=> (string)$car_dealer_id,\n                    'bid_price' => \"4\",\n                    'car_id' => \"206431344\",\n                    'fr' => 'bd_other',\n                    'platform' => 'MO',\n                    'source' => 'C2B竞价',\n                    'sale_type' => '卖车',\n                    'car_dealer_city' => '深圳',\n                    'app_version' => \"3.2\"\n                ]));\n            }\n        };\n\n        $pool = new Pool($client, $requests(100), [\n            'concurrency' => 5,\n            'fulfilled' => function ($response, $index) {\n                var_dump($response->getBody()->getContents());\n                echo microtime().\"<br>\";\n            },\n            'rejected' => function ($reason, $index) {\n                var_dump($reason->getMessage());\n                echo microtime();\n            },\n        ]);\n\n        $promise = $pool->promise();\n\n        $promise->wait();\n        echo '总的结束:'.microtime().'<br>';\n```\n\n100次请求的返回结果\n\n![image](/photo/img/guzzle压测/带时间的并行请求结果.png)\n\n串行:\n\n```php\n     for ($i =1 ; $i<100;$i++) {\n            echo '开始时间'.microtime().\"<br>\";\n            $ret = $this->client->request('POST', 'api/v1/bid',['form_params'=>\n                [\n                    'car_dealer_id'=> rand(1,2000000),\n                    'bid_price' => 4,\n                    'car_id' => 206431332,\n                    'fr' => 'bd_other',\n                    'platform' => 'MO',\n                    'source' => 'C2B竞价',\n                    'sale_type' => '卖车',\n                    'car_dealer_city' => '深圳',\n                    'app_version' => 3.2\n                ]]);\n            $org_res[] = $ret;\n            echo '结束时间'.microtime().\"<br>\";\n            var_export($ret->getBody()->getContents());\n        }\n\n//        foreach ($org_res as $val) {\n//            $resdata[] = $val->getBody()->getContents();\n//        }\n//        var_dump($resdata);\n        die;\n```\n\n100次请求的返回结果\n\n![image](/photo/img/guzzle压测/带时间的串行请求结果.png)\n\n\n- 所以可以看出,并行请求是先生成所有请求（这个上限和concurrency 参数有关）,再等待结果。如果达到当前并行的上线,就等待请求结束再生成新的请求。\n- 串行请求为请求,等待结果然后在请求。\n\n\n所以如果请求量很大的话,尽量还是用并行请求。","source":"_drafts/使用guzzle并行请求.md","raw":"---\ntitle: 使用guzzle并行请求\ndate: 2018-09-28 17:10:05\ntags: php\ncategories: php\ntoc: true\n---\n\n## 背景\n\n由于拍卖项目特有的点特, 会导致在开拍是有瞬时的高流量。\n后端系统会每个出价排序, 由于高qps导致排序会有重复的情况,。为了解决遮掩样的问题, \n就写了一个分布式锁, 用于解决排序冲突。用guzzle写了一个压测脚本。\n\n\n## 实现\n\n首先压测是为了同一时刻发送指定数量的请求到目标接口。\n所以串行话的请求是无法\nguzzle 支持用pool实现并行的请求。\n官方文档 :\n\n[官方文档支持](https://guzzle-cn.readthedocs.io/zh_CN/latest/quickstart.html?highlight=Pool)\n\n文档中并没有提示如何发送POST请求, 顾琢磨一下:\n\n\n并行方式请求:\n\n```php\n  $client = new Client(['base_uri' => '10.171.22.45:5005', 'timeout' => 10]);\n    \n        $requests = function ($total) {\n            $uri = 'api/v1/bid';\n            for ($i = 0; $i < $total; $i++) {\n                yield new Request('POST', $uri, ['Content-type' => 'application/json'],json_encode([\n                    'car_dealer_id'=> (string)rand(1,20000),\n                    'bid_price' => \"4\",\n                    'car_id' => \"206431344\",\n                    'fr' => 'bd_other',\n                    'platform' => 'MO',\n                    'source' => 'C2B竞价',\n                    'sale_type' => '卖车',\n                    'car_dealer_city' => '深圳',\n                    'app_version' => \"3.2\"\n                ]));\n            }\n        };\n    \n        $pool = new Pool($client, $requests(100), [\n            'concurrency' => 5,\n            'fulfilled' => function ($response, $index) {\n                var_dump($response->getBody()->getContents());\n            },\n            'rejected' => function ($reason, $index) {\n                var_dump($reason->getMessage());\n            },\n        ]);\n    \n        $promise = $pool->promise();\n        $promise->wait();\n```\n![image](/photo/img/guzzle压测/并行.png)\n![image](/photo/img/guzzle压测/逻辑上并行-100次.png)\n![image](/photo/img/guzzle压测/逻辑上并行-100次结束.png)\n\n\n串行:\n\n```php\n        for ($i =1 ; $i<20;$i++) {\n            echo time();\n            $org_res[] = $this->client->request('POST', 'api/v1/bid',['form_params'=>\n                [\n                    'car_dealer_id'=> rand(1,20000),\n                    'bid_price' => 4,\n                    'car_id' => 206431332,\n                    'fr' => 'bd_other',\n                    'platform' => 'MO',\n                    'source' => 'C2B竞价',\n                    'sale_type' => '卖车',\n                    'car_dealer_city' => '深圳',\n                    'app_version' => 3.2\n                ]]);\n        }\n\n        foreach ($org_res as $val) {\n            $resdata = $val->getBody()->getContents();\n        }\n        var_dump($resdata);\n        die;\n```\n\n请求结果:\n\n![image](/photo/img/guzzle压测/串行.png)\n\n![image](/photo/img/guzzle压测/逻辑上的串行-100次.png)\n\n## 两者区别\n\n- 从性能上来看,20次请求, 并行请求耗时2秒, 串行请求3秒。\n- 当请求加到100次的时候, 并行请求耗时6秒, 串行请求耗时27秒,这个时候就能体现出并行和串行的却别相差21秒。\n\n\n为什么会有这么差距,再上一张图和代码,打印出来开始结束时间。\n\n并行:\n```php\n       并行请求\n        echo '总的开始:'.microtime().'<br>';\n        $client = new Client(['base_uri' => '10.171.22.45:5005', 'timeout' => 10]);\n        $requests = function ($total) {\n            $uri = 'api/v1/bid';\n            for ($i = 0; $i < $total; $i++) {\n                $car_dealer_id = (string)rand(1,1000000);\n                echo '开始'.microtime().' car_dealer_id:'.$car_dealer_id.\"<br>\";\n                yield new Request('POST', $uri, ['Content-type' => 'application/json'],json_encode([\n                    'car_dealer_id'=> (string)$car_dealer_id,\n                    'bid_price' => \"4\",\n                    'car_id' => \"206431344\",\n                    'fr' => 'bd_other',\n                    'platform' => 'MO',\n                    'source' => 'C2B竞价',\n                    'sale_type' => '卖车',\n                    'car_dealer_city' => '深圳',\n                    'app_version' => \"3.2\"\n                ]));\n            }\n        };\n\n        $pool = new Pool($client, $requests(100), [\n            'concurrency' => 5,\n            'fulfilled' => function ($response, $index) {\n                var_dump($response->getBody()->getContents());\n                echo microtime().\"<br>\";\n            },\n            'rejected' => function ($reason, $index) {\n                var_dump($reason->getMessage());\n                echo microtime();\n            },\n        ]);\n\n        $promise = $pool->promise();\n\n        $promise->wait();\n        echo '总的结束:'.microtime().'<br>';\n```\n\n100次请求的返回结果\n\n![image](/photo/img/guzzle压测/带时间的并行请求结果.png)\n\n串行:\n\n```php\n     for ($i =1 ; $i<100;$i++) {\n            echo '开始时间'.microtime().\"<br>\";\n            $ret = $this->client->request('POST', 'api/v1/bid',['form_params'=>\n                [\n                    'car_dealer_id'=> rand(1,2000000),\n                    'bid_price' => 4,\n                    'car_id' => 206431332,\n                    'fr' => 'bd_other',\n                    'platform' => 'MO',\n                    'source' => 'C2B竞价',\n                    'sale_type' => '卖车',\n                    'car_dealer_city' => '深圳',\n                    'app_version' => 3.2\n                ]]);\n            $org_res[] = $ret;\n            echo '结束时间'.microtime().\"<br>\";\n            var_export($ret->getBody()->getContents());\n        }\n\n//        foreach ($org_res as $val) {\n//            $resdata[] = $val->getBody()->getContents();\n//        }\n//        var_dump($resdata);\n        die;\n```\n\n100次请求的返回结果\n\n![image](/photo/img/guzzle压测/带时间的串行请求结果.png)\n\n\n- 所以可以看出,并行请求是先生成所有请求（这个上限和concurrency 参数有关）,再等待结果。如果达到当前并行的上线,就等待请求结束再生成新的请求。\n- 串行请求为请求,等待结果然后在请求。\n\n\n所以如果请求量很大的话,尽量还是用并行请求。","slug":"使用guzzle并行请求","published":0,"updated":"2019-02-21T03:49:34.699Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjswwkdp1000fg7wwhj03cqnv","content":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>由于拍卖项目特有的点特, 会导致在开拍是有瞬时的高流量。<br>后端系统会每个出价排序, 由于高qps导致排序会有重复的情况,。为了解决遮掩样的问题,<br>就写了一个分布式锁, 用于解决排序冲突。用guzzle写了一个压测脚本。</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><p>首先压测是为了同一时刻发送指定数量的请求到目标接口。<br>所以串行话的请求是无法<br>guzzle 支持用pool实现并行的请求。<br>官方文档 :</p>\n<p><a href=\"https://guzzle-cn.readthedocs.io/zh_CN/latest/quickstart.html?highlight=Pool\" target=\"_blank\" rel=\"noopener\">官方文档支持</a></p>\n<p>文档中并没有提示如何发送POST请求, 顾琢磨一下:</p>\n<p>并行方式请求:</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">$client = <span class=\"keyword\">new</span> Client([<span class=\"string\">'base_uri'</span> =&gt; <span class=\"string\">'10.171.22.45:5005'</span>, <span class=\"string\">'timeout'</span> =&gt; <span class=\"number\">10</span>]);</div><div class=\"line\">  </div><div class=\"line\">      $requests = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">($total)</span> </span>&#123;</div><div class=\"line\">          $uri = <span class=\"string\">'api/v1/bid'</span>;</div><div class=\"line\">          <span class=\"keyword\">for</span> ($i = <span class=\"number\">0</span>; $i &lt; $total; $i++) &#123;</div><div class=\"line\">              <span class=\"keyword\">yield</span> <span class=\"keyword\">new</span> Request(<span class=\"string\">'POST'</span>, $uri, [<span class=\"string\">'Content-type'</span> =&gt; <span class=\"string\">'application/json'</span>],json_encode([</div><div class=\"line\">                  <span class=\"string\">'car_dealer_id'</span>=&gt; (string)rand(<span class=\"number\">1</span>,<span class=\"number\">20000</span>),</div><div class=\"line\">                  <span class=\"string\">'bid_price'</span> =&gt; <span class=\"string\">\"4\"</span>,</div><div class=\"line\">                  <span class=\"string\">'car_id'</span> =&gt; <span class=\"string\">\"206431344\"</span>,</div><div class=\"line\">                  <span class=\"string\">'fr'</span> =&gt; <span class=\"string\">'bd_other'</span>,</div><div class=\"line\">                  <span class=\"string\">'platform'</span> =&gt; <span class=\"string\">'MO'</span>,</div><div class=\"line\">                  <span class=\"string\">'source'</span> =&gt; <span class=\"string\">'C2B竞价'</span>,</div><div class=\"line\">                  <span class=\"string\">'sale_type'</span> =&gt; <span class=\"string\">'卖车'</span>,</div><div class=\"line\">                  <span class=\"string\">'car_dealer_city'</span> =&gt; <span class=\"string\">'深圳'</span>,</div><div class=\"line\">                  <span class=\"string\">'app_version'</span> =&gt; <span class=\"string\">\"3.2\"</span></div><div class=\"line\">              ]));</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125;;</div><div class=\"line\">  </div><div class=\"line\">      $pool = <span class=\"keyword\">new</span> Pool($client, $requests(<span class=\"number\">100</span>), [</div><div class=\"line\">          <span class=\"string\">'concurrency'</span> =&gt; <span class=\"number\">5</span>,</div><div class=\"line\">          <span class=\"string\">'fulfilled'</span> =&gt; <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">($response, $index)</span> </span>&#123;</div><div class=\"line\">              var_dump($response-&gt;getBody()-&gt;getContents());</div><div class=\"line\">          &#125;,</div><div class=\"line\">          <span class=\"string\">'rejected'</span> =&gt; <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">($reason, $index)</span> </span>&#123;</div><div class=\"line\">              var_dump($reason-&gt;getMessage());</div><div class=\"line\">          &#125;,</div><div class=\"line\">      ]);</div><div class=\"line\">  </div><div class=\"line\">      $promise = $pool-&gt;promise();</div><div class=\"line\">      $promise-&gt;wait();</div></pre></td></tr></table></figure>\n<p><img src=\"/photo/img/guzzle压测/并行.png\" alt=\"image\"><br><img src=\"/photo/img/guzzle压测/逻辑上并行-100次.png\" alt=\"image\"><br><img src=\"/photo/img/guzzle压测/逻辑上并行-100次结束.png\" alt=\"image\"></p>\n<p>串行:</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> ($i =<span class=\"number\">1</span> ; $i&lt;<span class=\"number\">20</span>;$i++) &#123;</div><div class=\"line\">    <span class=\"keyword\">echo</span> time();</div><div class=\"line\">    $org_res[] = <span class=\"keyword\">$this</span>-&gt;client-&gt;request(<span class=\"string\">'POST'</span>, <span class=\"string\">'api/v1/bid'</span>,[<span class=\"string\">'form_params'</span>=&gt;</div><div class=\"line\">        [</div><div class=\"line\">            <span class=\"string\">'car_dealer_id'</span>=&gt; rand(<span class=\"number\">1</span>,<span class=\"number\">20000</span>),</div><div class=\"line\">            <span class=\"string\">'bid_price'</span> =&gt; <span class=\"number\">4</span>,</div><div class=\"line\">            <span class=\"string\">'car_id'</span> =&gt; <span class=\"number\">206431332</span>,</div><div class=\"line\">            <span class=\"string\">'fr'</span> =&gt; <span class=\"string\">'bd_other'</span>,</div><div class=\"line\">            <span class=\"string\">'platform'</span> =&gt; <span class=\"string\">'MO'</span>,</div><div class=\"line\">            <span class=\"string\">'source'</span> =&gt; <span class=\"string\">'C2B竞价'</span>,</div><div class=\"line\">            <span class=\"string\">'sale_type'</span> =&gt; <span class=\"string\">'卖车'</span>,</div><div class=\"line\">            <span class=\"string\">'car_dealer_city'</span> =&gt; <span class=\"string\">'深圳'</span>,</div><div class=\"line\">            <span class=\"string\">'app_version'</span> =&gt; <span class=\"number\">3.2</span></div><div class=\"line\">        ]]);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">foreach</span> ($org_res <span class=\"keyword\">as</span> $val) &#123;</div><div class=\"line\">    $resdata = $val-&gt;getBody()-&gt;getContents();</div><div class=\"line\">&#125;</div><div class=\"line\">var_dump($resdata);</div><div class=\"line\"><span class=\"keyword\">die</span>;</div></pre></td></tr></table></figure>\n<p>请求结果:</p>\n<p><img src=\"/photo/img/guzzle压测/串行.png\" alt=\"image\"></p>\n<p><img src=\"/photo/img/guzzle压测/逻辑上的串行-100次.png\" alt=\"image\"></p>\n<h2 id=\"两者区别\"><a href=\"#两者区别\" class=\"headerlink\" title=\"两者区别\"></a>两者区别</h2><ul>\n<li>从性能上来看,20次请求, 并行请求耗时2秒, 串行请求3秒。</li>\n<li>当请求加到100次的时候, 并行请求耗时6秒, 串行请求耗时27秒,这个时候就能体现出并行和串行的却别相差21秒。</li>\n</ul>\n<p>为什么会有这么差距,再上一张图和代码,打印出来开始结束时间。</p>\n<p>并行:<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\">并行请求</div><div class=\"line\"> <span class=\"keyword\">echo</span> <span class=\"string\">'总的开始:'</span>.microtime().<span class=\"string\">'&lt;br&gt;'</span>;</div><div class=\"line\"> $client = <span class=\"keyword\">new</span> Client([<span class=\"string\">'base_uri'</span> =&gt; <span class=\"string\">'10.171.22.45:5005'</span>, <span class=\"string\">'timeout'</span> =&gt; <span class=\"number\">10</span>]);</div><div class=\"line\"> $requests = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">($total)</span> </span>&#123;</div><div class=\"line\">     $uri = <span class=\"string\">'api/v1/bid'</span>;</div><div class=\"line\">     <span class=\"keyword\">for</span> ($i = <span class=\"number\">0</span>; $i &lt; $total; $i++) &#123;</div><div class=\"line\">         $car_dealer_id = (string)rand(<span class=\"number\">1</span>,<span class=\"number\">1000000</span>);</div><div class=\"line\">         <span class=\"keyword\">echo</span> <span class=\"string\">'开始'</span>.microtime().<span class=\"string\">' car_dealer_id:'</span>.$car_dealer_id.<span class=\"string\">\"&lt;br&gt;\"</span>;</div><div class=\"line\">         <span class=\"keyword\">yield</span> <span class=\"keyword\">new</span> Request(<span class=\"string\">'POST'</span>, $uri, [<span class=\"string\">'Content-type'</span> =&gt; <span class=\"string\">'application/json'</span>],json_encode([</div><div class=\"line\">             <span class=\"string\">'car_dealer_id'</span>=&gt; (string)$car_dealer_id,</div><div class=\"line\">             <span class=\"string\">'bid_price'</span> =&gt; <span class=\"string\">\"4\"</span>,</div><div class=\"line\">             <span class=\"string\">'car_id'</span> =&gt; <span class=\"string\">\"206431344\"</span>,</div><div class=\"line\">             <span class=\"string\">'fr'</span> =&gt; <span class=\"string\">'bd_other'</span>,</div><div class=\"line\">             <span class=\"string\">'platform'</span> =&gt; <span class=\"string\">'MO'</span>,</div><div class=\"line\">             <span class=\"string\">'source'</span> =&gt; <span class=\"string\">'C2B竞价'</span>,</div><div class=\"line\">             <span class=\"string\">'sale_type'</span> =&gt; <span class=\"string\">'卖车'</span>,</div><div class=\"line\">             <span class=\"string\">'car_dealer_city'</span> =&gt; <span class=\"string\">'深圳'</span>,</div><div class=\"line\">             <span class=\"string\">'app_version'</span> =&gt; <span class=\"string\">\"3.2\"</span></div><div class=\"line\">         ]));</div><div class=\"line\">     &#125;</div><div class=\"line\"> &#125;;</div><div class=\"line\"></div><div class=\"line\"> $pool = <span class=\"keyword\">new</span> Pool($client, $requests(<span class=\"number\">100</span>), [</div><div class=\"line\">     <span class=\"string\">'concurrency'</span> =&gt; <span class=\"number\">5</span>,</div><div class=\"line\">     <span class=\"string\">'fulfilled'</span> =&gt; <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">($response, $index)</span> </span>&#123;</div><div class=\"line\">         var_dump($response-&gt;getBody()-&gt;getContents());</div><div class=\"line\">         <span class=\"keyword\">echo</span> microtime().<span class=\"string\">\"&lt;br&gt;\"</span>;</div><div class=\"line\">     &#125;,</div><div class=\"line\">     <span class=\"string\">'rejected'</span> =&gt; <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">($reason, $index)</span> </span>&#123;</div><div class=\"line\">         var_dump($reason-&gt;getMessage());</div><div class=\"line\">         <span class=\"keyword\">echo</span> microtime();</div><div class=\"line\">     &#125;,</div><div class=\"line\"> ]);</div><div class=\"line\"></div><div class=\"line\"> $promise = $pool-&gt;promise();</div><div class=\"line\"></div><div class=\"line\"> $promise-&gt;wait();</div><div class=\"line\"> <span class=\"keyword\">echo</span> <span class=\"string\">'总的结束:'</span>.microtime().<span class=\"string\">'&lt;br&gt;'</span>;</div></pre></td></tr></table></figure></p>\n<p>100次请求的返回结果</p>\n<p><img src=\"/photo/img/guzzle压测/带时间的并行请求结果.png\" alt=\"image\"></p>\n<p>串行:</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">     <span class=\"keyword\">for</span> ($i =<span class=\"number\">1</span> ; $i&lt;<span class=\"number\">100</span>;$i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">'开始时间'</span>.microtime().<span class=\"string\">\"&lt;br&gt;\"</span>;</div><div class=\"line\">            $ret = <span class=\"keyword\">$this</span>-&gt;client-&gt;request(<span class=\"string\">'POST'</span>, <span class=\"string\">'api/v1/bid'</span>,[<span class=\"string\">'form_params'</span>=&gt;</div><div class=\"line\">                [</div><div class=\"line\">                    <span class=\"string\">'car_dealer_id'</span>=&gt; rand(<span class=\"number\">1</span>,<span class=\"number\">2000000</span>),</div><div class=\"line\">                    <span class=\"string\">'bid_price'</span> =&gt; <span class=\"number\">4</span>,</div><div class=\"line\">                    <span class=\"string\">'car_id'</span> =&gt; <span class=\"number\">206431332</span>,</div><div class=\"line\">                    <span class=\"string\">'fr'</span> =&gt; <span class=\"string\">'bd_other'</span>,</div><div class=\"line\">                    <span class=\"string\">'platform'</span> =&gt; <span class=\"string\">'MO'</span>,</div><div class=\"line\">                    <span class=\"string\">'source'</span> =&gt; <span class=\"string\">'C2B竞价'</span>,</div><div class=\"line\">                    <span class=\"string\">'sale_type'</span> =&gt; <span class=\"string\">'卖车'</span>,</div><div class=\"line\">                    <span class=\"string\">'car_dealer_city'</span> =&gt; <span class=\"string\">'深圳'</span>,</div><div class=\"line\">                    <span class=\"string\">'app_version'</span> =&gt; <span class=\"number\">3.2</span></div><div class=\"line\">                ]]);</div><div class=\"line\">            $org_res[] = $ret;</div><div class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">'结束时间'</span>.microtime().<span class=\"string\">\"&lt;br&gt;\"</span>;</div><div class=\"line\">            var_export($ret-&gt;getBody()-&gt;getContents());</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//        foreach ($org_res as $val) &#123;</span></div><div class=\"line\"><span class=\"comment\">//            $resdata[] = $val-&gt;getBody()-&gt;getContents();</span></div><div class=\"line\"><span class=\"comment\">//        &#125;</span></div><div class=\"line\"><span class=\"comment\">//        var_dump($resdata);</span></div><div class=\"line\">        <span class=\"keyword\">die</span>;</div></pre></td></tr></table></figure>\n<p>100次请求的返回结果</p>\n<p><img src=\"/photo/img/guzzle压测/带时间的串行请求结果.png\" alt=\"image\"></p>\n<ul>\n<li>所以可以看出,并行请求是先生成所有请求（这个上限和concurrency 参数有关）,再等待结果。如果达到当前并行的上线,就等待请求结束再生成新的请求。</li>\n<li>串行请求为请求,等待结果然后在请求。</li>\n</ul>\n<p>所以如果请求量很大的话,尽量还是用并行请求。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>由于拍卖项目特有的点特, 会导致在开拍是有瞬时的高流量。<br>后端系统会每个出价排序, 由于高qps导致排序会有重复的情况,。为了解决遮掩样的问题,<br>就写了一个分布式锁, 用于解决排序冲突。用guzzle写了一个压测脚本。</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><p>首先压测是为了同一时刻发送指定数量的请求到目标接口。<br>所以串行话的请求是无法<br>guzzle 支持用pool实现并行的请求。<br>官方文档 :</p>\n<p><a href=\"https://guzzle-cn.readthedocs.io/zh_CN/latest/quickstart.html?highlight=Pool\" target=\"_blank\" rel=\"noopener\">官方文档支持</a></p>\n<p>文档中并没有提示如何发送POST请求, 顾琢磨一下:</p>\n<p>并行方式请求:</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">$client = <span class=\"keyword\">new</span> Client([<span class=\"string\">'base_uri'</span> =&gt; <span class=\"string\">'10.171.22.45:5005'</span>, <span class=\"string\">'timeout'</span> =&gt; <span class=\"number\">10</span>]);</div><div class=\"line\">  </div><div class=\"line\">      $requests = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">($total)</span> </span>&#123;</div><div class=\"line\">          $uri = <span class=\"string\">'api/v1/bid'</span>;</div><div class=\"line\">          <span class=\"keyword\">for</span> ($i = <span class=\"number\">0</span>; $i &lt; $total; $i++) &#123;</div><div class=\"line\">              <span class=\"keyword\">yield</span> <span class=\"keyword\">new</span> Request(<span class=\"string\">'POST'</span>, $uri, [<span class=\"string\">'Content-type'</span> =&gt; <span class=\"string\">'application/json'</span>],json_encode([</div><div class=\"line\">                  <span class=\"string\">'car_dealer_id'</span>=&gt; (string)rand(<span class=\"number\">1</span>,<span class=\"number\">20000</span>),</div><div class=\"line\">                  <span class=\"string\">'bid_price'</span> =&gt; <span class=\"string\">\"4\"</span>,</div><div class=\"line\">                  <span class=\"string\">'car_id'</span> =&gt; <span class=\"string\">\"206431344\"</span>,</div><div class=\"line\">                  <span class=\"string\">'fr'</span> =&gt; <span class=\"string\">'bd_other'</span>,</div><div class=\"line\">                  <span class=\"string\">'platform'</span> =&gt; <span class=\"string\">'MO'</span>,</div><div class=\"line\">                  <span class=\"string\">'source'</span> =&gt; <span class=\"string\">'C2B竞价'</span>,</div><div class=\"line\">                  <span class=\"string\">'sale_type'</span> =&gt; <span class=\"string\">'卖车'</span>,</div><div class=\"line\">                  <span class=\"string\">'car_dealer_city'</span> =&gt; <span class=\"string\">'深圳'</span>,</div><div class=\"line\">                  <span class=\"string\">'app_version'</span> =&gt; <span class=\"string\">\"3.2\"</span></div><div class=\"line\">              ]));</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125;;</div><div class=\"line\">  </div><div class=\"line\">      $pool = <span class=\"keyword\">new</span> Pool($client, $requests(<span class=\"number\">100</span>), [</div><div class=\"line\">          <span class=\"string\">'concurrency'</span> =&gt; <span class=\"number\">5</span>,</div><div class=\"line\">          <span class=\"string\">'fulfilled'</span> =&gt; <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">($response, $index)</span> </span>&#123;</div><div class=\"line\">              var_dump($response-&gt;getBody()-&gt;getContents());</div><div class=\"line\">          &#125;,</div><div class=\"line\">          <span class=\"string\">'rejected'</span> =&gt; <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">($reason, $index)</span> </span>&#123;</div><div class=\"line\">              var_dump($reason-&gt;getMessage());</div><div class=\"line\">          &#125;,</div><div class=\"line\">      ]);</div><div class=\"line\">  </div><div class=\"line\">      $promise = $pool-&gt;promise();</div><div class=\"line\">      $promise-&gt;wait();</div></pre></td></tr></table></figure>\n<p><img src=\"/photo/img/guzzle压测/并行.png\" alt=\"image\"><br><img src=\"/photo/img/guzzle压测/逻辑上并行-100次.png\" alt=\"image\"><br><img src=\"/photo/img/guzzle压测/逻辑上并行-100次结束.png\" alt=\"image\"></p>\n<p>串行:</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> ($i =<span class=\"number\">1</span> ; $i&lt;<span class=\"number\">20</span>;$i++) &#123;</div><div class=\"line\">    <span class=\"keyword\">echo</span> time();</div><div class=\"line\">    $org_res[] = <span class=\"keyword\">$this</span>-&gt;client-&gt;request(<span class=\"string\">'POST'</span>, <span class=\"string\">'api/v1/bid'</span>,[<span class=\"string\">'form_params'</span>=&gt;</div><div class=\"line\">        [</div><div class=\"line\">            <span class=\"string\">'car_dealer_id'</span>=&gt; rand(<span class=\"number\">1</span>,<span class=\"number\">20000</span>),</div><div class=\"line\">            <span class=\"string\">'bid_price'</span> =&gt; <span class=\"number\">4</span>,</div><div class=\"line\">            <span class=\"string\">'car_id'</span> =&gt; <span class=\"number\">206431332</span>,</div><div class=\"line\">            <span class=\"string\">'fr'</span> =&gt; <span class=\"string\">'bd_other'</span>,</div><div class=\"line\">            <span class=\"string\">'platform'</span> =&gt; <span class=\"string\">'MO'</span>,</div><div class=\"line\">            <span class=\"string\">'source'</span> =&gt; <span class=\"string\">'C2B竞价'</span>,</div><div class=\"line\">            <span class=\"string\">'sale_type'</span> =&gt; <span class=\"string\">'卖车'</span>,</div><div class=\"line\">            <span class=\"string\">'car_dealer_city'</span> =&gt; <span class=\"string\">'深圳'</span>,</div><div class=\"line\">            <span class=\"string\">'app_version'</span> =&gt; <span class=\"number\">3.2</span></div><div class=\"line\">        ]]);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">foreach</span> ($org_res <span class=\"keyword\">as</span> $val) &#123;</div><div class=\"line\">    $resdata = $val-&gt;getBody()-&gt;getContents();</div><div class=\"line\">&#125;</div><div class=\"line\">var_dump($resdata);</div><div class=\"line\"><span class=\"keyword\">die</span>;</div></pre></td></tr></table></figure>\n<p>请求结果:</p>\n<p><img src=\"/photo/img/guzzle压测/串行.png\" alt=\"image\"></p>\n<p><img src=\"/photo/img/guzzle压测/逻辑上的串行-100次.png\" alt=\"image\"></p>\n<h2 id=\"两者区别\"><a href=\"#两者区别\" class=\"headerlink\" title=\"两者区别\"></a>两者区别</h2><ul>\n<li>从性能上来看,20次请求, 并行请求耗时2秒, 串行请求3秒。</li>\n<li>当请求加到100次的时候, 并行请求耗时6秒, 串行请求耗时27秒,这个时候就能体现出并行和串行的却别相差21秒。</li>\n</ul>\n<p>为什么会有这么差距,再上一张图和代码,打印出来开始结束时间。</p>\n<p>并行:<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\">并行请求</div><div class=\"line\"> <span class=\"keyword\">echo</span> <span class=\"string\">'总的开始:'</span>.microtime().<span class=\"string\">'&lt;br&gt;'</span>;</div><div class=\"line\"> $client = <span class=\"keyword\">new</span> Client([<span class=\"string\">'base_uri'</span> =&gt; <span class=\"string\">'10.171.22.45:5005'</span>, <span class=\"string\">'timeout'</span> =&gt; <span class=\"number\">10</span>]);</div><div class=\"line\"> $requests = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">($total)</span> </span>&#123;</div><div class=\"line\">     $uri = <span class=\"string\">'api/v1/bid'</span>;</div><div class=\"line\">     <span class=\"keyword\">for</span> ($i = <span class=\"number\">0</span>; $i &lt; $total; $i++) &#123;</div><div class=\"line\">         $car_dealer_id = (string)rand(<span class=\"number\">1</span>,<span class=\"number\">1000000</span>);</div><div class=\"line\">         <span class=\"keyword\">echo</span> <span class=\"string\">'开始'</span>.microtime().<span class=\"string\">' car_dealer_id:'</span>.$car_dealer_id.<span class=\"string\">\"&lt;br&gt;\"</span>;</div><div class=\"line\">         <span class=\"keyword\">yield</span> <span class=\"keyword\">new</span> Request(<span class=\"string\">'POST'</span>, $uri, [<span class=\"string\">'Content-type'</span> =&gt; <span class=\"string\">'application/json'</span>],json_encode([</div><div class=\"line\">             <span class=\"string\">'car_dealer_id'</span>=&gt; (string)$car_dealer_id,</div><div class=\"line\">             <span class=\"string\">'bid_price'</span> =&gt; <span class=\"string\">\"4\"</span>,</div><div class=\"line\">             <span class=\"string\">'car_id'</span> =&gt; <span class=\"string\">\"206431344\"</span>,</div><div class=\"line\">             <span class=\"string\">'fr'</span> =&gt; <span class=\"string\">'bd_other'</span>,</div><div class=\"line\">             <span class=\"string\">'platform'</span> =&gt; <span class=\"string\">'MO'</span>,</div><div class=\"line\">             <span class=\"string\">'source'</span> =&gt; <span class=\"string\">'C2B竞价'</span>,</div><div class=\"line\">             <span class=\"string\">'sale_type'</span> =&gt; <span class=\"string\">'卖车'</span>,</div><div class=\"line\">             <span class=\"string\">'car_dealer_city'</span> =&gt; <span class=\"string\">'深圳'</span>,</div><div class=\"line\">             <span class=\"string\">'app_version'</span> =&gt; <span class=\"string\">\"3.2\"</span></div><div class=\"line\">         ]));</div><div class=\"line\">     &#125;</div><div class=\"line\"> &#125;;</div><div class=\"line\"></div><div class=\"line\"> $pool = <span class=\"keyword\">new</span> Pool($client, $requests(<span class=\"number\">100</span>), [</div><div class=\"line\">     <span class=\"string\">'concurrency'</span> =&gt; <span class=\"number\">5</span>,</div><div class=\"line\">     <span class=\"string\">'fulfilled'</span> =&gt; <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">($response, $index)</span> </span>&#123;</div><div class=\"line\">         var_dump($response-&gt;getBody()-&gt;getContents());</div><div class=\"line\">         <span class=\"keyword\">echo</span> microtime().<span class=\"string\">\"&lt;br&gt;\"</span>;</div><div class=\"line\">     &#125;,</div><div class=\"line\">     <span class=\"string\">'rejected'</span> =&gt; <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">($reason, $index)</span> </span>&#123;</div><div class=\"line\">         var_dump($reason-&gt;getMessage());</div><div class=\"line\">         <span class=\"keyword\">echo</span> microtime();</div><div class=\"line\">     &#125;,</div><div class=\"line\"> ]);</div><div class=\"line\"></div><div class=\"line\"> $promise = $pool-&gt;promise();</div><div class=\"line\"></div><div class=\"line\"> $promise-&gt;wait();</div><div class=\"line\"> <span class=\"keyword\">echo</span> <span class=\"string\">'总的结束:'</span>.microtime().<span class=\"string\">'&lt;br&gt;'</span>;</div></pre></td></tr></table></figure></p>\n<p>100次请求的返回结果</p>\n<p><img src=\"/photo/img/guzzle压测/带时间的并行请求结果.png\" alt=\"image\"></p>\n<p>串行:</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">     <span class=\"keyword\">for</span> ($i =<span class=\"number\">1</span> ; $i&lt;<span class=\"number\">100</span>;$i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">'开始时间'</span>.microtime().<span class=\"string\">\"&lt;br&gt;\"</span>;</div><div class=\"line\">            $ret = <span class=\"keyword\">$this</span>-&gt;client-&gt;request(<span class=\"string\">'POST'</span>, <span class=\"string\">'api/v1/bid'</span>,[<span class=\"string\">'form_params'</span>=&gt;</div><div class=\"line\">                [</div><div class=\"line\">                    <span class=\"string\">'car_dealer_id'</span>=&gt; rand(<span class=\"number\">1</span>,<span class=\"number\">2000000</span>),</div><div class=\"line\">                    <span class=\"string\">'bid_price'</span> =&gt; <span class=\"number\">4</span>,</div><div class=\"line\">                    <span class=\"string\">'car_id'</span> =&gt; <span class=\"number\">206431332</span>,</div><div class=\"line\">                    <span class=\"string\">'fr'</span> =&gt; <span class=\"string\">'bd_other'</span>,</div><div class=\"line\">                    <span class=\"string\">'platform'</span> =&gt; <span class=\"string\">'MO'</span>,</div><div class=\"line\">                    <span class=\"string\">'source'</span> =&gt; <span class=\"string\">'C2B竞价'</span>,</div><div class=\"line\">                    <span class=\"string\">'sale_type'</span> =&gt; <span class=\"string\">'卖车'</span>,</div><div class=\"line\">                    <span class=\"string\">'car_dealer_city'</span> =&gt; <span class=\"string\">'深圳'</span>,</div><div class=\"line\">                    <span class=\"string\">'app_version'</span> =&gt; <span class=\"number\">3.2</span></div><div class=\"line\">                ]]);</div><div class=\"line\">            $org_res[] = $ret;</div><div class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">'结束时间'</span>.microtime().<span class=\"string\">\"&lt;br&gt;\"</span>;</div><div class=\"line\">            var_export($ret-&gt;getBody()-&gt;getContents());</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//        foreach ($org_res as $val) &#123;</span></div><div class=\"line\"><span class=\"comment\">//            $resdata[] = $val-&gt;getBody()-&gt;getContents();</span></div><div class=\"line\"><span class=\"comment\">//        &#125;</span></div><div class=\"line\"><span class=\"comment\">//        var_dump($resdata);</span></div><div class=\"line\">        <span class=\"keyword\">die</span>;</div></pre></td></tr></table></figure>\n<p>100次请求的返回结果</p>\n<p><img src=\"/photo/img/guzzle压测/带时间的串行请求结果.png\" alt=\"image\"></p>\n<ul>\n<li>所以可以看出,并行请求是先生成所有请求（这个上限和concurrency 参数有关）,再等待结果。如果达到当前并行的上线,就等待请求结束再生成新的请求。</li>\n<li>串行请求为请求,等待结果然后在请求。</li>\n</ul>\n<p>所以如果请求量很大的话,尽量还是用并行请求。</p>\n"},{"title":"Item2使用sz rz命令从服务下载上传文件","date":"2018-07-12T13:27:37.000Z","toc":true,"_content":"\n## 背景\n如何从linux服务下载/上传文件\n\n - 使用scp命令\n - 使用sz命令\n\n\n这里主要介绍使用sz命令下载文件\n\n## 安装\n - 安装lrzsz `hobrew install llssz`\n - 在本地编写shell用于接受sz命令下载下来的文件\n\n上传shell\n\n`iterm2-send-zmodem.sh`\n```\n    #!/bin/bash\n    \n    \n    #Author: Matt Mastracci (matthew@mastracci.com)\n    \n    \n    # AppleScript from http://stackoverflow.com/questions/4309087/cancel-button-on-osascript-in-a-bash-script\n    \n    \n    # licensed under cc-wiki with attribution required\n    \n    \n    # Remainder of script public domain\n    \n    \n    osascript -e 'tell application \"iTerm2\" to version' > /dev/null 2>&1 && NAME=iTerm2 || NAME=iTerm\n    if [[ $NAME = \"iTerm\" ]]; then\n        FILE=`osascript -e 'tell application \"iTerm\" to activate' -e 'tell application \"iTerm\" to set thefile to choose file with prompt \"Choose a file to send\"' -e \"do shell script (\\\"echo \\\"&(quoted form of POSIX path of thefile as Unicode text)&\\\"\\\")\"`\n    else\n        FILE=`osascript -e 'tell application \"iTerm2\" to activate' -e 'tell application \"iTerm2\" to set thefile to choose file with prompt \"Choose a file to send\"' -e \"do shell script (\\\"echo \\\"&(quoted form of POSIX path of thefile as Unicode text)&\\\"\\\")\"`\n    fi\n    if [[ $FILE = \"\" ]]; then\n        echo Cancelled.\n        # Send ZModem cancel\n        echo -e \\\\x18\\\\x18\\\\x18\\\\x18\\\\x18\n        sleep 1\n        echo\n        echo \\# Cancelled transfer\n    else\n        /usr/local/bin/sz \"$FILE\" -e -b\n        sleep 1\n        echo\n        echo \\# Received $FILE\n    fi  \n```\n\n下载shell\n\n`iterm2-recv-zmodem.sh`\n\n```\n    #!/bin/bash\n    # Author: Matt Mastracci (matthew@mastracci.com)\n    # AppleScript from http://stackoverflow.com/questions/4309087/cancel-button-on-osascript-in-a-bash-script\n    # licensed under cc-wiki with attribution required \n    # Remainder of script public domain\n\n    osascript -e 'tell application \"iTerm2\" to version' > /dev/null 2>&1 && NAME=iTerm2 || NAME=iTerm\n    if [[ $NAME = \"iTerm\" ]]; then\n        FILE=`osascript -e 'tell application \"iTerm\" to activate' -e 'tell application \"iTerm\" to set thefile to choose folder with prompt \"Choose a folder to place received files in\"' -e \"do shell script (\\\"echo \\\"&(quoted form of POSIX path of thefile as Unicode text)&\\\"\\\")\"`\n    else\n        FILE=`osascript -e 'tell application \"iTerm2\" to activate' -e 'tell application \"iTerm2\" to set thefile to choose folder with prompt \"Choose a folder to place received files in\"' -e \"do shell script (\\\"echo \\\"&(quoted form of POSIX path of thefile as Unicode text)&\\\"\\\")\"`\n    fi\n\n    if [[ $FILE = \"\" ]]; then\n        echo Cancelled.\n        # Send ZModem cancel\n        echo -e \\\\x18\\\\x18\\\\x18\\\\x18\\\\x18\n        sleep 1\n        echo\n        echo \\# Cancelled transfer\n    else\n        cd \"$FILE\"\n        /usr/local/bin/rz -E -e -b\n        sleep 1\n        echo\n        echo\n        echo \\# Sent \\-\\> $FILE\n    fi\n```\n## 配置iterm2\n\n- 设置Iterm2的Tirgger特性，profiles-default-editProfiles-Advanced中的Tirgger\n\n```\n    添加两条trigger，分别设置Regular expression，Action，Parameters，Instant如下：\n        1.第一条\n            Regular expression: rz waiting to receive.\\*\\*B0100\n            Action: Run Silent Coprocess\n            Parameters: /usr/local/bin/iterm2-send-zmodem.sh\n            Instant: checked\n        2.第二条\n            Regular expression: \\*\\*B00000000000000\n            Action: Run Silent Coprocess\n            Parameters: /usr/local/bin/iterm2-recv-zmodem.sh\n            Instant: checked\n```\n\n**备注**:注意两个文件的权限","source":"_drafts/使用sz-rz命令从服务下载上传文件.md","raw":"---\ntitle: Item2使用sz rz命令从服务下载上传文件\ndate: 2018-07-12 21:27:37\ntags: 工具\ncategories: 工具\ntoc: true\n---\n\n## 背景\n如何从linux服务下载/上传文件\n\n - 使用scp命令\n - 使用sz命令\n\n\n这里主要介绍使用sz命令下载文件\n\n## 安装\n - 安装lrzsz `hobrew install llssz`\n - 在本地编写shell用于接受sz命令下载下来的文件\n\n上传shell\n\n`iterm2-send-zmodem.sh`\n```\n    #!/bin/bash\n    \n    \n    #Author: Matt Mastracci (matthew@mastracci.com)\n    \n    \n    # AppleScript from http://stackoverflow.com/questions/4309087/cancel-button-on-osascript-in-a-bash-script\n    \n    \n    # licensed under cc-wiki with attribution required\n    \n    \n    # Remainder of script public domain\n    \n    \n    osascript -e 'tell application \"iTerm2\" to version' > /dev/null 2>&1 && NAME=iTerm2 || NAME=iTerm\n    if [[ $NAME = \"iTerm\" ]]; then\n        FILE=`osascript -e 'tell application \"iTerm\" to activate' -e 'tell application \"iTerm\" to set thefile to choose file with prompt \"Choose a file to send\"' -e \"do shell script (\\\"echo \\\"&(quoted form of POSIX path of thefile as Unicode text)&\\\"\\\")\"`\n    else\n        FILE=`osascript -e 'tell application \"iTerm2\" to activate' -e 'tell application \"iTerm2\" to set thefile to choose file with prompt \"Choose a file to send\"' -e \"do shell script (\\\"echo \\\"&(quoted form of POSIX path of thefile as Unicode text)&\\\"\\\")\"`\n    fi\n    if [[ $FILE = \"\" ]]; then\n        echo Cancelled.\n        # Send ZModem cancel\n        echo -e \\\\x18\\\\x18\\\\x18\\\\x18\\\\x18\n        sleep 1\n        echo\n        echo \\# Cancelled transfer\n    else\n        /usr/local/bin/sz \"$FILE\" -e -b\n        sleep 1\n        echo\n        echo \\# Received $FILE\n    fi  \n```\n\n下载shell\n\n`iterm2-recv-zmodem.sh`\n\n```\n    #!/bin/bash\n    # Author: Matt Mastracci (matthew@mastracci.com)\n    # AppleScript from http://stackoverflow.com/questions/4309087/cancel-button-on-osascript-in-a-bash-script\n    # licensed under cc-wiki with attribution required \n    # Remainder of script public domain\n\n    osascript -e 'tell application \"iTerm2\" to version' > /dev/null 2>&1 && NAME=iTerm2 || NAME=iTerm\n    if [[ $NAME = \"iTerm\" ]]; then\n        FILE=`osascript -e 'tell application \"iTerm\" to activate' -e 'tell application \"iTerm\" to set thefile to choose folder with prompt \"Choose a folder to place received files in\"' -e \"do shell script (\\\"echo \\\"&(quoted form of POSIX path of thefile as Unicode text)&\\\"\\\")\"`\n    else\n        FILE=`osascript -e 'tell application \"iTerm2\" to activate' -e 'tell application \"iTerm2\" to set thefile to choose folder with prompt \"Choose a folder to place received files in\"' -e \"do shell script (\\\"echo \\\"&(quoted form of POSIX path of thefile as Unicode text)&\\\"\\\")\"`\n    fi\n\n    if [[ $FILE = \"\" ]]; then\n        echo Cancelled.\n        # Send ZModem cancel\n        echo -e \\\\x18\\\\x18\\\\x18\\\\x18\\\\x18\n        sleep 1\n        echo\n        echo \\# Cancelled transfer\n    else\n        cd \"$FILE\"\n        /usr/local/bin/rz -E -e -b\n        sleep 1\n        echo\n        echo\n        echo \\# Sent \\-\\> $FILE\n    fi\n```\n## 配置iterm2\n\n- 设置Iterm2的Tirgger特性，profiles-default-editProfiles-Advanced中的Tirgger\n\n```\n    添加两条trigger，分别设置Regular expression，Action，Parameters，Instant如下：\n        1.第一条\n            Regular expression: rz waiting to receive.\\*\\*B0100\n            Action: Run Silent Coprocess\n            Parameters: /usr/local/bin/iterm2-send-zmodem.sh\n            Instant: checked\n        2.第二条\n            Regular expression: \\*\\*B00000000000000\n            Action: Run Silent Coprocess\n            Parameters: /usr/local/bin/iterm2-recv-zmodem.sh\n            Instant: checked\n```\n\n**备注**:注意两个文件的权限","slug":"使用sz-rz命令从服务下载上传文件","published":0,"updated":"2019-02-21T03:49:34.700Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjswwkdp2000hg7wwicpkh0wp","content":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>如何从linux服务下载/上传文件</p>\n<ul>\n<li>使用scp命令</li>\n<li>使用sz命令</li>\n</ul>\n<p>这里主要介绍使用sz命令下载文件</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><ul>\n<li>安装lrzsz <code>hobrew install llssz</code></li>\n<li>在本地编写shell用于接受sz命令下载下来的文件</li>\n</ul>\n<p>上传shell</p>\n<p><code>iterm2-send-zmodem.sh</code><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/bash</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#Author: Matt Mastracci (matthew@mastracci.com)</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># AppleScript from http://stackoverflow.com/questions/4309087/cancel-button-on-osascript-in-a-bash-script</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># licensed under cc-wiki with attribution required</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Remainder of script public domain</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">osascript <span class=\"_\">-e</span> <span class=\"string\">'tell application \"iTerm2\" to version'</span> &gt; /dev/null 2&gt;&amp;1 &amp;&amp; NAME=iTerm2 || NAME=iTerm</div><div class=\"line\"><span class=\"keyword\">if</span> [[ <span class=\"variable\">$NAME</span> = <span class=\"string\">\"iTerm\"</span> ]]; <span class=\"keyword\">then</span></div><div class=\"line\">    FILE=`osascript <span class=\"_\">-e</span> <span class=\"string\">'tell application \"iTerm\" to activate'</span> <span class=\"_\">-e</span> <span class=\"string\">'tell application \"iTerm\" to set thefile to choose file with prompt \"Choose a file to send\"'</span> <span class=\"_\">-e</span> <span class=\"string\">\"do shell script (\\\"echo \\\"&amp;(quoted form of POSIX path of thefile as Unicode text)&amp;\\\"\\\")\"</span>`</div><div class=\"line\"><span class=\"keyword\">else</span></div><div class=\"line\">    FILE=`osascript <span class=\"_\">-e</span> <span class=\"string\">'tell application \"iTerm2\" to activate'</span> <span class=\"_\">-e</span> <span class=\"string\">'tell application \"iTerm2\" to set thefile to choose file with prompt \"Choose a file to send\"'</span> <span class=\"_\">-e</span> <span class=\"string\">\"do shell script (\\\"echo \\\"&amp;(quoted form of POSIX path of thefile as Unicode text)&amp;\\\"\\\")\"</span>`</div><div class=\"line\"><span class=\"keyword\">fi</span></div><div class=\"line\"><span class=\"keyword\">if</span> [[ <span class=\"variable\">$FILE</span> = <span class=\"string\">\"\"</span> ]]; <span class=\"keyword\">then</span></div><div class=\"line\">    <span class=\"built_in\">echo</span> Cancelled.</div><div class=\"line\">    <span class=\"comment\"># Send ZModem cancel</span></div><div class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"_\">-e</span> \\\\x18\\\\x18\\\\x18\\\\x18\\\\x18</div><div class=\"line\">    sleep 1</div><div class=\"line\">    <span class=\"built_in\">echo</span></div><div class=\"line\">    <span class=\"built_in\">echo</span> \\<span class=\"comment\"># Cancelled transfer</span></div><div class=\"line\"><span class=\"keyword\">else</span></div><div class=\"line\">    /usr/<span class=\"built_in\">local</span>/bin/sz <span class=\"string\">\"<span class=\"variable\">$FILE</span>\"</span> <span class=\"_\">-e</span> -b</div><div class=\"line\">    sleep 1</div><div class=\"line\">    <span class=\"built_in\">echo</span></div><div class=\"line\">    <span class=\"built_in\">echo</span> \\<span class=\"comment\"># Received $FILE</span></div><div class=\"line\"><span class=\"keyword\">fi</span></div></pre></td></tr></table></figure></p>\n<p>下载shell</p>\n<p><code>iterm2-recv-zmodem.sh</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/bash</span></div><div class=\"line\"><span class=\"comment\"># Author: Matt Mastracci (matthew@mastracci.com)</span></div><div class=\"line\"><span class=\"comment\"># AppleScript from http://stackoverflow.com/questions/4309087/cancel-button-on-osascript-in-a-bash-script</span></div><div class=\"line\"><span class=\"comment\"># licensed under cc-wiki with attribution required </span></div><div class=\"line\"><span class=\"comment\"># Remainder of script public domain</span></div><div class=\"line\"></div><div class=\"line\">osascript <span class=\"_\">-e</span> <span class=\"string\">'tell application \"iTerm2\" to version'</span> &gt; /dev/null 2&gt;&amp;1 &amp;&amp; NAME=iTerm2 || NAME=iTerm</div><div class=\"line\"><span class=\"keyword\">if</span> [[ <span class=\"variable\">$NAME</span> = <span class=\"string\">\"iTerm\"</span> ]]; <span class=\"keyword\">then</span></div><div class=\"line\">    FILE=`osascript <span class=\"_\">-e</span> <span class=\"string\">'tell application \"iTerm\" to activate'</span> <span class=\"_\">-e</span> <span class=\"string\">'tell application \"iTerm\" to set thefile to choose folder with prompt \"Choose a folder to place received files in\"'</span> <span class=\"_\">-e</span> <span class=\"string\">\"do shell script (\\\"echo \\\"&amp;(quoted form of POSIX path of thefile as Unicode text)&amp;\\\"\\\")\"</span>`</div><div class=\"line\"><span class=\"keyword\">else</span></div><div class=\"line\">    FILE=`osascript <span class=\"_\">-e</span> <span class=\"string\">'tell application \"iTerm2\" to activate'</span> <span class=\"_\">-e</span> <span class=\"string\">'tell application \"iTerm2\" to set thefile to choose folder with prompt \"Choose a folder to place received files in\"'</span> <span class=\"_\">-e</span> <span class=\"string\">\"do shell script (\\\"echo \\\"&amp;(quoted form of POSIX path of thefile as Unicode text)&amp;\\\"\\\")\"</span>`</div><div class=\"line\"><span class=\"keyword\">fi</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> [[ <span class=\"variable\">$FILE</span> = <span class=\"string\">\"\"</span> ]]; <span class=\"keyword\">then</span></div><div class=\"line\">    <span class=\"built_in\">echo</span> Cancelled.</div><div class=\"line\">    <span class=\"comment\"># Send ZModem cancel</span></div><div class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"_\">-e</span> \\\\x18\\\\x18\\\\x18\\\\x18\\\\x18</div><div class=\"line\">    sleep 1</div><div class=\"line\">    <span class=\"built_in\">echo</span></div><div class=\"line\">    <span class=\"built_in\">echo</span> \\<span class=\"comment\"># Cancelled transfer</span></div><div class=\"line\"><span class=\"keyword\">else</span></div><div class=\"line\">    <span class=\"built_in\">cd</span> <span class=\"string\">\"<span class=\"variable\">$FILE</span>\"</span></div><div class=\"line\">    /usr/<span class=\"built_in\">local</span>/bin/rz -E <span class=\"_\">-e</span> -b</div><div class=\"line\">    sleep 1</div><div class=\"line\">    <span class=\"built_in\">echo</span></div><div class=\"line\">    <span class=\"built_in\">echo</span></div><div class=\"line\">    <span class=\"built_in\">echo</span> \\<span class=\"comment\"># Sent \\-\\&gt; $FILE</span></div><div class=\"line\"><span class=\"keyword\">fi</span></div></pre></td></tr></table></figure>\n<h2 id=\"配置iterm2\"><a href=\"#配置iterm2\" class=\"headerlink\" title=\"配置iterm2\"></a>配置iterm2</h2><ul>\n<li>设置Iterm2的Tirgger特性，profiles-default-editProfiles-Advanced中的Tirgger</li>\n</ul>\n<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">添加两条trigger，分别设置Regular expression，Action，<span class=\"keyword\">Parameters</span>，Instant如下：</div><div class=\"line\">    1.第一条</div><div class=\"line\">        Regular <span class=\"comment\">expression: rz waiting to receive.\\*\\*B0100</span></div><div class=\"line\">        Action: Run <span class=\"comment\">Silent Coprocess</span></div><div class=\"line\">        <span class=\"keyword\">Parameters</span>: /usr/local/bin/iterm2-send-zmodem.sh</div><div class=\"line\">        Instant: checked</div><div class=\"line\">    2.第二条</div><div class=\"line\">        Regular <span class=\"comment\">expression: \\*\\*B00000000000000</span></div><div class=\"line\">        Action: Run <span class=\"comment\">Silent Coprocess</span></div><div class=\"line\">        <span class=\"keyword\">Parameters</span>: /usr/local/bin/iterm2-recv-zmodem.sh</div><div class=\"line\">        Instant: checked</div></pre></td></tr></table></figure>\n<p><strong>备注</strong>:注意两个文件的权限</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>如何从linux服务下载/上传文件</p>\n<ul>\n<li>使用scp命令</li>\n<li>使用sz命令</li>\n</ul>\n<p>这里主要介绍使用sz命令下载文件</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><ul>\n<li>安装lrzsz <code>hobrew install llssz</code></li>\n<li>在本地编写shell用于接受sz命令下载下来的文件</li>\n</ul>\n<p>上传shell</p>\n<p><code>iterm2-send-zmodem.sh</code><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/bash</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#Author: Matt Mastracci (matthew@mastracci.com)</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># AppleScript from http://stackoverflow.com/questions/4309087/cancel-button-on-osascript-in-a-bash-script</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># licensed under cc-wiki with attribution required</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Remainder of script public domain</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">osascript <span class=\"_\">-e</span> <span class=\"string\">'tell application \"iTerm2\" to version'</span> &gt; /dev/null 2&gt;&amp;1 &amp;&amp; NAME=iTerm2 || NAME=iTerm</div><div class=\"line\"><span class=\"keyword\">if</span> [[ <span class=\"variable\">$NAME</span> = <span class=\"string\">\"iTerm\"</span> ]]; <span class=\"keyword\">then</span></div><div class=\"line\">    FILE=`osascript <span class=\"_\">-e</span> <span class=\"string\">'tell application \"iTerm\" to activate'</span> <span class=\"_\">-e</span> <span class=\"string\">'tell application \"iTerm\" to set thefile to choose file with prompt \"Choose a file to send\"'</span> <span class=\"_\">-e</span> <span class=\"string\">\"do shell script (\\\"echo \\\"&amp;(quoted form of POSIX path of thefile as Unicode text)&amp;\\\"\\\")\"</span>`</div><div class=\"line\"><span class=\"keyword\">else</span></div><div class=\"line\">    FILE=`osascript <span class=\"_\">-e</span> <span class=\"string\">'tell application \"iTerm2\" to activate'</span> <span class=\"_\">-e</span> <span class=\"string\">'tell application \"iTerm2\" to set thefile to choose file with prompt \"Choose a file to send\"'</span> <span class=\"_\">-e</span> <span class=\"string\">\"do shell script (\\\"echo \\\"&amp;(quoted form of POSIX path of thefile as Unicode text)&amp;\\\"\\\")\"</span>`</div><div class=\"line\"><span class=\"keyword\">fi</span></div><div class=\"line\"><span class=\"keyword\">if</span> [[ <span class=\"variable\">$FILE</span> = <span class=\"string\">\"\"</span> ]]; <span class=\"keyword\">then</span></div><div class=\"line\">    <span class=\"built_in\">echo</span> Cancelled.</div><div class=\"line\">    <span class=\"comment\"># Send ZModem cancel</span></div><div class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"_\">-e</span> \\\\x18\\\\x18\\\\x18\\\\x18\\\\x18</div><div class=\"line\">    sleep 1</div><div class=\"line\">    <span class=\"built_in\">echo</span></div><div class=\"line\">    <span class=\"built_in\">echo</span> \\<span class=\"comment\"># Cancelled transfer</span></div><div class=\"line\"><span class=\"keyword\">else</span></div><div class=\"line\">    /usr/<span class=\"built_in\">local</span>/bin/sz <span class=\"string\">\"<span class=\"variable\">$FILE</span>\"</span> <span class=\"_\">-e</span> -b</div><div class=\"line\">    sleep 1</div><div class=\"line\">    <span class=\"built_in\">echo</span></div><div class=\"line\">    <span class=\"built_in\">echo</span> \\<span class=\"comment\"># Received $FILE</span></div><div class=\"line\"><span class=\"keyword\">fi</span></div></pre></td></tr></table></figure></p>\n<p>下载shell</p>\n<p><code>iterm2-recv-zmodem.sh</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/bash</span></div><div class=\"line\"><span class=\"comment\"># Author: Matt Mastracci (matthew@mastracci.com)</span></div><div class=\"line\"><span class=\"comment\"># AppleScript from http://stackoverflow.com/questions/4309087/cancel-button-on-osascript-in-a-bash-script</span></div><div class=\"line\"><span class=\"comment\"># licensed under cc-wiki with attribution required </span></div><div class=\"line\"><span class=\"comment\"># Remainder of script public domain</span></div><div class=\"line\"></div><div class=\"line\">osascript <span class=\"_\">-e</span> <span class=\"string\">'tell application \"iTerm2\" to version'</span> &gt; /dev/null 2&gt;&amp;1 &amp;&amp; NAME=iTerm2 || NAME=iTerm</div><div class=\"line\"><span class=\"keyword\">if</span> [[ <span class=\"variable\">$NAME</span> = <span class=\"string\">\"iTerm\"</span> ]]; <span class=\"keyword\">then</span></div><div class=\"line\">    FILE=`osascript <span class=\"_\">-e</span> <span class=\"string\">'tell application \"iTerm\" to activate'</span> <span class=\"_\">-e</span> <span class=\"string\">'tell application \"iTerm\" to set thefile to choose folder with prompt \"Choose a folder to place received files in\"'</span> <span class=\"_\">-e</span> <span class=\"string\">\"do shell script (\\\"echo \\\"&amp;(quoted form of POSIX path of thefile as Unicode text)&amp;\\\"\\\")\"</span>`</div><div class=\"line\"><span class=\"keyword\">else</span></div><div class=\"line\">    FILE=`osascript <span class=\"_\">-e</span> <span class=\"string\">'tell application \"iTerm2\" to activate'</span> <span class=\"_\">-e</span> <span class=\"string\">'tell application \"iTerm2\" to set thefile to choose folder with prompt \"Choose a folder to place received files in\"'</span> <span class=\"_\">-e</span> <span class=\"string\">\"do shell script (\\\"echo \\\"&amp;(quoted form of POSIX path of thefile as Unicode text)&amp;\\\"\\\")\"</span>`</div><div class=\"line\"><span class=\"keyword\">fi</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> [[ <span class=\"variable\">$FILE</span> = <span class=\"string\">\"\"</span> ]]; <span class=\"keyword\">then</span></div><div class=\"line\">    <span class=\"built_in\">echo</span> Cancelled.</div><div class=\"line\">    <span class=\"comment\"># Send ZModem cancel</span></div><div class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"_\">-e</span> \\\\x18\\\\x18\\\\x18\\\\x18\\\\x18</div><div class=\"line\">    sleep 1</div><div class=\"line\">    <span class=\"built_in\">echo</span></div><div class=\"line\">    <span class=\"built_in\">echo</span> \\<span class=\"comment\"># Cancelled transfer</span></div><div class=\"line\"><span class=\"keyword\">else</span></div><div class=\"line\">    <span class=\"built_in\">cd</span> <span class=\"string\">\"<span class=\"variable\">$FILE</span>\"</span></div><div class=\"line\">    /usr/<span class=\"built_in\">local</span>/bin/rz -E <span class=\"_\">-e</span> -b</div><div class=\"line\">    sleep 1</div><div class=\"line\">    <span class=\"built_in\">echo</span></div><div class=\"line\">    <span class=\"built_in\">echo</span></div><div class=\"line\">    <span class=\"built_in\">echo</span> \\<span class=\"comment\"># Sent \\-\\&gt; $FILE</span></div><div class=\"line\"><span class=\"keyword\">fi</span></div></pre></td></tr></table></figure>\n<h2 id=\"配置iterm2\"><a href=\"#配置iterm2\" class=\"headerlink\" title=\"配置iterm2\"></a>配置iterm2</h2><ul>\n<li>设置Iterm2的Tirgger特性，profiles-default-editProfiles-Advanced中的Tirgger</li>\n</ul>\n<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">添加两条trigger，分别设置Regular expression，Action，<span class=\"keyword\">Parameters</span>，Instant如下：</div><div class=\"line\">    1.第一条</div><div class=\"line\">        Regular <span class=\"comment\">expression: rz waiting to receive.\\*\\*B0100</span></div><div class=\"line\">        Action: Run <span class=\"comment\">Silent Coprocess</span></div><div class=\"line\">        <span class=\"keyword\">Parameters</span>: /usr/local/bin/iterm2-send-zmodem.sh</div><div class=\"line\">        Instant: checked</div><div class=\"line\">    2.第二条</div><div class=\"line\">        Regular <span class=\"comment\">expression: \\*\\*B00000000000000</span></div><div class=\"line\">        Action: Run <span class=\"comment\">Silent Coprocess</span></div><div class=\"line\">        <span class=\"keyword\">Parameters</span>: /usr/local/bin/iterm2-recv-zmodem.sh</div><div class=\"line\">        Instant: checked</div></pre></td></tr></table></figure>\n<p><strong>备注</strong>:注意两个文件的权限</p>\n"},{"title":"nginx各种时间的详细解释","_content":"","source":"_drafts/压测优化nginx日志.md","raw":"---\ntitle: nginx各种时间的详细解释\ntags:\n---\n","slug":"压测优化nginx日志","published":0,"date":"2018-12-30T17:46:20.099Z","updated":"2018-12-30T17:46:20.099Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjswwkdp4000lg7wwlysxgoox","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"基于c语言实现链表","_content":"","source":"_drafts/基于c语言实现链表.md","raw":"---\ntitle: 基于c语言实现链表\ntags:\n---\n","slug":"基于c语言实现链表","published":0,"date":"2018-12-30T17:46:20.099Z","updated":"2018-12-30T17:46:20.099Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjswwkdp5000ng7ww69f7n1ka","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"如何实现psr4自动加载","_content":"","source":"_drafts/如何实现psr4自动加载.md","raw":"---\ntitle: 如何实现psr4自动加载\ntags:\n---\n","slug":"如何实现psr4自动加载","published":0,"date":"2019-02-20T16:48:36.063Z","updated":"2019-02-20T16:48:36.063Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjswwkdp7000rg7wwc6ewux29","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"基于redis的分布式锁","_content":"\n## 锁\n当业务中存在多个竞争者对统一资源进行插入/更新的时候,且当前资源只允许一个操作者更改/插入时,就会存在竞争关系。如果不妥善处理竞争会导致\n数据混乱。\n\neg:\n\n已支付为例,现在存在A B两个操作者,账户余额为100元。\n\n- A 减少账户50元。\n- B 扣账户致账户100元。\n\n在扣除账户余额之前,会对账户余额进行校验,如果账户余额不足,应该拒绝操作。如果此时不对资源（账户）加锁 ,会存在如下情况:\n\n1 A操作首先对账户校验, 当前账户余额100元, 允许操作, 进行扣除操作。\n2 B操作对账户进行校验, 当前账户余额100元, 允许操作, 进行扣除操作。\n3 A执行扣除完毕,当前账户余额50元。\n4 B执行扣除完毕,当前账户余额-50元。\n\n\n在这种场景会导致当前账户余额为负数,这肯定输不允许出现的。\n所以需要资源加锁。\n\n\n## 分布式锁\n\n顾名思义, 锁是分布式的, 多个服务同时公用一个锁。\n\n\n## 如何实现:\n\n\n锁是对某种资源的占有。\n\n加锁:\n\n基于redis生成一个带有过期时间的key\n\n```php\n$redis->set($lock->sourceName, $lock->key, ['nx', 'ex' => $lock->expire])\n\n```\n- `expire`为过期时间,如果超过过期时间,则自动解锁。\n- `key` 生成当前锁的key,随机生成。\n解锁:\n\n具体动作: 比对当前锁和当前key是否匹配,如果匹配则解锁（删除当前redis里的key）\n\n实现:\n\n```php\n$script = '\n        if redis.call(\"get\",KEYS[1]) == ARGV[1]\n        then\n            return redis.call(\"del\",KEYS[1])\n        else\n            return 0\n        end\n    ';\n$redis->eval($script,[$locks, $keys],$numKeys)\n```\n- 其中locks为锁名。\n- $keys为秘钥。\n\n## 异常\n\n如果进程异常,我们需要解锁当前锁。\n具体实现:\n\n```php\n register_shutdown_function(function(){\n            $lock->release();\n        });\n```\n\nphp中程序异常退出会调用register_shutdown_function()所注册函数,所以只要在程序异常时,解锁当前注册锁就可以了。\n\n\n\n","source":"_drafts/基于redis的分布式锁.md","raw":"---\ntitle: 基于redis的分布式锁\ntags:\n---\n\n## 锁\n当业务中存在多个竞争者对统一资源进行插入/更新的时候,且当前资源只允许一个操作者更改/插入时,就会存在竞争关系。如果不妥善处理竞争会导致\n数据混乱。\n\neg:\n\n已支付为例,现在存在A B两个操作者,账户余额为100元。\n\n- A 减少账户50元。\n- B 扣账户致账户100元。\n\n在扣除账户余额之前,会对账户余额进行校验,如果账户余额不足,应该拒绝操作。如果此时不对资源（账户）加锁 ,会存在如下情况:\n\n1 A操作首先对账户校验, 当前账户余额100元, 允许操作, 进行扣除操作。\n2 B操作对账户进行校验, 当前账户余额100元, 允许操作, 进行扣除操作。\n3 A执行扣除完毕,当前账户余额50元。\n4 B执行扣除完毕,当前账户余额-50元。\n\n\n在这种场景会导致当前账户余额为负数,这肯定输不允许出现的。\n所以需要资源加锁。\n\n\n## 分布式锁\n\n顾名思义, 锁是分布式的, 多个服务同时公用一个锁。\n\n\n## 如何实现:\n\n\n锁是对某种资源的占有。\n\n加锁:\n\n基于redis生成一个带有过期时间的key\n\n```php\n$redis->set($lock->sourceName, $lock->key, ['nx', 'ex' => $lock->expire])\n\n```\n- `expire`为过期时间,如果超过过期时间,则自动解锁。\n- `key` 生成当前锁的key,随机生成。\n解锁:\n\n具体动作: 比对当前锁和当前key是否匹配,如果匹配则解锁（删除当前redis里的key）\n\n实现:\n\n```php\n$script = '\n        if redis.call(\"get\",KEYS[1]) == ARGV[1]\n        then\n            return redis.call(\"del\",KEYS[1])\n        else\n            return 0\n        end\n    ';\n$redis->eval($script,[$locks, $keys],$numKeys)\n```\n- 其中locks为锁名。\n- $keys为秘钥。\n\n## 异常\n\n如果进程异常,我们需要解锁当前锁。\n具体实现:\n\n```php\n register_shutdown_function(function(){\n            $lock->release();\n        });\n```\n\nphp中程序异常退出会调用register_shutdown_function()所注册函数,所以只要在程序异常时,解锁当前注册锁就可以了。\n\n\n\n","slug":"基于redis的分布式锁","published":0,"date":"2019-02-20T16:48:36.062Z","updated":"2019-02-20T16:48:36.062Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjswwkdp8000ug7www1djimpx","content":"<h2 id=\"锁\"><a href=\"#锁\" class=\"headerlink\" title=\"锁\"></a>锁</h2><p>当业务中存在多个竞争者对统一资源进行插入/更新的时候,且当前资源只允许一个操作者更改/插入时,就会存在竞争关系。如果不妥善处理竞争会导致<br>数据混乱。</p>\n<p>eg:</p>\n<p>已支付为例,现在存在A B两个操作者,账户余额为100元。</p>\n<ul>\n<li>A 减少账户50元。</li>\n<li>B 扣账户致账户100元。</li>\n</ul>\n<p>在扣除账户余额之前,会对账户余额进行校验,如果账户余额不足,应该拒绝操作。如果此时不对资源（账户）加锁 ,会存在如下情况:</p>\n<p>1 A操作首先对账户校验, 当前账户余额100元, 允许操作, 进行扣除操作。<br>2 B操作对账户进行校验, 当前账户余额100元, 允许操作, 进行扣除操作。<br>3 A执行扣除完毕,当前账户余额50元。<br>4 B执行扣除完毕,当前账户余额-50元。</p>\n<p>在这种场景会导致当前账户余额为负数,这肯定输不允许出现的。<br>所以需要资源加锁。</p>\n<h2 id=\"分布式锁\"><a href=\"#分布式锁\" class=\"headerlink\" title=\"分布式锁\"></a>分布式锁</h2><p>顾名思义, 锁是分布式的, 多个服务同时公用一个锁。</p>\n<h2 id=\"如何实现\"><a href=\"#如何实现\" class=\"headerlink\" title=\"如何实现:\"></a>如何实现:</h2><p>锁是对某种资源的占有。</p>\n<p>加锁:</p>\n<p>基于redis生成一个带有过期时间的key</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$redis-&gt;set($lock-&gt;sourceName, $lock-&gt;key, [<span class=\"string\">'nx'</span>, <span class=\"string\">'ex'</span> =&gt; $lock-&gt;expire])</div></pre></td></tr></table></figure>\n<ul>\n<li><code>expire</code>为过期时间,如果超过过期时间,则自动解锁。</li>\n<li><code>key</code> 生成当前锁的key,随机生成。<br>解锁:</li>\n</ul>\n<p>具体动作: 比对当前锁和当前key是否匹配,如果匹配则解锁（删除当前redis里的key）</p>\n<p>实现:</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">$script = <span class=\"string\">'</span></div><div class=\"line\">        if redis.call(\"get\",KEYS[1]) == ARGV[1]</div><div class=\"line\">        then</div><div class=\"line\">            return redis.call(\"del\",KEYS[1])</div><div class=\"line\">        else</div><div class=\"line\">            return 0</div><div class=\"line\">        end</div><div class=\"line\">    ';</div><div class=\"line\">$redis-&gt;eval($script,[$locks, $keys],$numKeys)</div></pre></td></tr></table></figure>\n<ul>\n<li>其中locks为锁名。</li>\n<li>$keys为秘钥。</li>\n</ul>\n<h2 id=\"异常\"><a href=\"#异常\" class=\"headerlink\" title=\"异常\"></a>异常</h2><p>如果进程异常,我们需要解锁当前锁。<br>具体实现:</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">register_shutdown_function(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">           $lock-&gt;release();</div><div class=\"line\">       &#125;);</div></pre></td></tr></table></figure>\n<p>php中程序异常退出会调用register_shutdown_function()所注册函数,所以只要在程序异常时,解锁当前注册锁就可以了。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"锁\"><a href=\"#锁\" class=\"headerlink\" title=\"锁\"></a>锁</h2><p>当业务中存在多个竞争者对统一资源进行插入/更新的时候,且当前资源只允许一个操作者更改/插入时,就会存在竞争关系。如果不妥善处理竞争会导致<br>数据混乱。</p>\n<p>eg:</p>\n<p>已支付为例,现在存在A B两个操作者,账户余额为100元。</p>\n<ul>\n<li>A 减少账户50元。</li>\n<li>B 扣账户致账户100元。</li>\n</ul>\n<p>在扣除账户余额之前,会对账户余额进行校验,如果账户余额不足,应该拒绝操作。如果此时不对资源（账户）加锁 ,会存在如下情况:</p>\n<p>1 A操作首先对账户校验, 当前账户余额100元, 允许操作, 进行扣除操作。<br>2 B操作对账户进行校验, 当前账户余额100元, 允许操作, 进行扣除操作。<br>3 A执行扣除完毕,当前账户余额50元。<br>4 B执行扣除完毕,当前账户余额-50元。</p>\n<p>在这种场景会导致当前账户余额为负数,这肯定输不允许出现的。<br>所以需要资源加锁。</p>\n<h2 id=\"分布式锁\"><a href=\"#分布式锁\" class=\"headerlink\" title=\"分布式锁\"></a>分布式锁</h2><p>顾名思义, 锁是分布式的, 多个服务同时公用一个锁。</p>\n<h2 id=\"如何实现\"><a href=\"#如何实现\" class=\"headerlink\" title=\"如何实现:\"></a>如何实现:</h2><p>锁是对某种资源的占有。</p>\n<p>加锁:</p>\n<p>基于redis生成一个带有过期时间的key</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$redis-&gt;set($lock-&gt;sourceName, $lock-&gt;key, [<span class=\"string\">'nx'</span>, <span class=\"string\">'ex'</span> =&gt; $lock-&gt;expire])</div></pre></td></tr></table></figure>\n<ul>\n<li><code>expire</code>为过期时间,如果超过过期时间,则自动解锁。</li>\n<li><code>key</code> 生成当前锁的key,随机生成。<br>解锁:</li>\n</ul>\n<p>具体动作: 比对当前锁和当前key是否匹配,如果匹配则解锁（删除当前redis里的key）</p>\n<p>实现:</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">$script = <span class=\"string\">'</span></div><div class=\"line\">        if redis.call(\"get\",KEYS[1]) == ARGV[1]</div><div class=\"line\">        then</div><div class=\"line\">            return redis.call(\"del\",KEYS[1])</div><div class=\"line\">        else</div><div class=\"line\">            return 0</div><div class=\"line\">        end</div><div class=\"line\">    ';</div><div class=\"line\">$redis-&gt;eval($script,[$locks, $keys],$numKeys)</div></pre></td></tr></table></figure>\n<ul>\n<li>其中locks为锁名。</li>\n<li>$keys为秘钥。</li>\n</ul>\n<h2 id=\"异常\"><a href=\"#异常\" class=\"headerlink\" title=\"异常\"></a>异常</h2><p>如果进程异常,我们需要解锁当前锁。<br>具体实现:</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">register_shutdown_function(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">           $lock-&gt;release();</div><div class=\"line\">       &#125;);</div></pre></td></tr></table></figure>\n<p>php中程序异常退出会调用register_shutdown_function()所注册函数,所以只要在程序异常时,解锁当前注册锁就可以了。</p>\n"},{"title":"微服务数据一致性和服务可靠性","date":"2018-09-12T13:28:00.000Z","toc":true,"_content":"\n![image](/photo/img/2018-06-19/servicePic1.png)\n\n  \n  ## 存在问题\n  我们的保证金服务现有结构是这个样子。\n在 1、2、3、4、5、6 各个阶段都会存在超时和异常问题，当负载少时，我们还可以手动人工处理，但是当数据量大的时候，问题或多的令人发指，沉浸于洗数据，无法自拔。。\n超时存在问题：\n1.当1、2、3 步骤超时时，下游服务可以忽略，当做执行失败，重试。\n2.当在环节4、5、6超时时，对于下游服务是也是执行失败，但是还可以重试么？\n\n\n## 如何提高服务可靠性\n对于上游服务，如何保证对下游提供可靠的服务。\n ### 补偿机制\n ![image](/photo/img/2018-06-19/servicePic5.png)\n 在服务间的调用失败时，可以记录失败调用，如队列，消费重试。但是前提一定是接口幂等。\n 但是这样并不能解决根本性问题，如果我们在调用保证金冻结服务时，失败此时我们冻结时报操作入队列，让队列异步消费，如果此时要解冻保证金，就会出现业务异常。\n \n **所以**补偿机制建议使用在 `不可避免的业务异常情况下使用`，我们应该尽可能的优化技术方案，来保证数据一致性，最后再采用补偿机制。\n ### 两段提交协议（2pc）\n![image](/photo/img/2018-06-19/servicePic4.png)\n\npreOperation 执行请求，在调用微服务前，执行预操作成功则表示此次操作可行。\n如果commit失败该如何处理？重新preOperetion嘛？如果接口幂等是否可以重复，commit？如何保证避免重复提交？\n在preOperation时，返回唯一操作ID，业务逻辑每个操作对应一个操作ID，commit失败就重试，当然前提是我们的上有服务接口幂等。\n\n![image](/photo/img/2018-06-19/servicePic3.png)\n即使是这样也会存在问题，如果保证金预操作成功，但是执行一直失败呢？我们必须提供回滚机制。\n![image](/photo/img/2018-06-19/servicePic2.png)\n1. 大量同步RPC依赖，如何保证自身服务可靠性？\n \t服务之间在调用的时候，会存在大量异常、超时。我该如何处理，认为这次是失败的？还是成功的？如果依赖的服务返回成功，才算成功的话，我改如何保证服务可靠性，该如何对我的下游服务提供可靠的服务。\n2. 调用依赖服务失败，如何降级处理？\n\t 在服务调用失败的时候，我的上游出错了，我该如何降级处理，我该重试？还是直接跳过，跳过后是否会造成微服务之间数据一致性问题。如果重试是否会造成重复提交，接口是否幂等？\n3. 是否还欠缺回滚机制？ \n","source":"_drafts/微服务数据一致性和服务可靠性.md","raw":"---\ntitle: 微服务数据一致性和服务可靠性\ntags: 微服务\ncategories: 微服务\ndate: 2018-09-12 21:28:00\ntoc: true\n---\n\n![image](/photo/img/2018-06-19/servicePic1.png)\n\n  \n  ## 存在问题\n  我们的保证金服务现有结构是这个样子。\n在 1、2、3、4、5、6 各个阶段都会存在超时和异常问题，当负载少时，我们还可以手动人工处理，但是当数据量大的时候，问题或多的令人发指，沉浸于洗数据，无法自拔。。\n超时存在问题：\n1.当1、2、3 步骤超时时，下游服务可以忽略，当做执行失败，重试。\n2.当在环节4、5、6超时时，对于下游服务是也是执行失败，但是还可以重试么？\n\n\n## 如何提高服务可靠性\n对于上游服务，如何保证对下游提供可靠的服务。\n ### 补偿机制\n ![image](/photo/img/2018-06-19/servicePic5.png)\n 在服务间的调用失败时，可以记录失败调用，如队列，消费重试。但是前提一定是接口幂等。\n 但是这样并不能解决根本性问题，如果我们在调用保证金冻结服务时，失败此时我们冻结时报操作入队列，让队列异步消费，如果此时要解冻保证金，就会出现业务异常。\n \n **所以**补偿机制建议使用在 `不可避免的业务异常情况下使用`，我们应该尽可能的优化技术方案，来保证数据一致性，最后再采用补偿机制。\n ### 两段提交协议（2pc）\n![image](/photo/img/2018-06-19/servicePic4.png)\n\npreOperation 执行请求，在调用微服务前，执行预操作成功则表示此次操作可行。\n如果commit失败该如何处理？重新preOperetion嘛？如果接口幂等是否可以重复，commit？如何保证避免重复提交？\n在preOperation时，返回唯一操作ID，业务逻辑每个操作对应一个操作ID，commit失败就重试，当然前提是我们的上有服务接口幂等。\n\n![image](/photo/img/2018-06-19/servicePic3.png)\n即使是这样也会存在问题，如果保证金预操作成功，但是执行一直失败呢？我们必须提供回滚机制。\n![image](/photo/img/2018-06-19/servicePic2.png)\n1. 大量同步RPC依赖，如何保证自身服务可靠性？\n \t服务之间在调用的时候，会存在大量异常、超时。我该如何处理，认为这次是失败的？还是成功的？如果依赖的服务返回成功，才算成功的话，我改如何保证服务可靠性，该如何对我的下游服务提供可靠的服务。\n2. 调用依赖服务失败，如何降级处理？\n\t 在服务调用失败的时候，我的上游出错了，我该如何降级处理，我该重试？还是直接跳过，跳过后是否会造成微服务之间数据一致性问题。如果重试是否会造成重复提交，接口是否幂等？\n3. 是否还欠缺回滚机制？ \n","slug":"微服务数据一致性和服务可靠性","published":0,"updated":"2019-02-21T03:49:34.701Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjswwkdpa000wg7wwsidlcqd7","content":"<p><img src=\"/photo/img/2018-06-19/servicePic1.png\" alt=\"image\"></p>\n<h2 id=\"存在问题\"><a href=\"#存在问题\" class=\"headerlink\" title=\"存在问题\"></a>存在问题</h2><p>  我们的保证金服务现有结构是这个样子。<br>在 1、2、3、4、5、6 各个阶段都会存在超时和异常问题，当负载少时，我们还可以手动人工处理，但是当数据量大的时候，问题或多的令人发指，沉浸于洗数据，无法自拔。。<br>超时存在问题：<br>1.当1、2、3 步骤超时时，下游服务可以忽略，当做执行失败，重试。<br>2.当在环节4、5、6超时时，对于下游服务是也是执行失败，但是还可以重试么？</p>\n<h2 id=\"如何提高服务可靠性\"><a href=\"#如何提高服务可靠性\" class=\"headerlink\" title=\"如何提高服务可靠性\"></a>如何提高服务可靠性</h2><p>对于上游服务，如何保证对下游提供可靠的服务。</p>\n<h3 id=\"补偿机制\"><a href=\"#补偿机制\" class=\"headerlink\" title=\"补偿机制\"></a>补偿机制</h3><p> <img src=\"/photo/img/2018-06-19/servicePic5.png\" alt=\"image\"><br> 在服务间的调用失败时，可以记录失败调用，如队列，消费重试。但是前提一定是接口幂等。<br> 但是这样并不能解决根本性问题，如果我们在调用保证金冻结服务时，失败此时我们冻结时报操作入队列，让队列异步消费，如果此时要解冻保证金，就会出现业务异常。</p>\n<p> <strong>所以</strong>补偿机制建议使用在 <code>不可避免的业务异常情况下使用</code>，我们应该尽可能的优化技术方案，来保证数据一致性，最后再采用补偿机制。</p>\n<h3 id=\"两段提交协议（2pc）\"><a href=\"#两段提交协议（2pc）\" class=\"headerlink\" title=\"两段提交协议（2pc）\"></a>两段提交协议（2pc）</h3><p><img src=\"/photo/img/2018-06-19/servicePic4.png\" alt=\"image\"></p>\n<p>preOperation 执行请求，在调用微服务前，执行预操作成功则表示此次操作可行。<br>如果commit失败该如何处理？重新preOperetion嘛？如果接口幂等是否可以重复，commit？如何保证避免重复提交？<br>在preOperation时，返回唯一操作ID，业务逻辑每个操作对应一个操作ID，commit失败就重试，当然前提是我们的上有服务接口幂等。</p>\n<p><img src=\"/photo/img/2018-06-19/servicePic3.png\" alt=\"image\"><br>即使是这样也会存在问题，如果保证金预操作成功，但是执行一直失败呢？我们必须提供回滚机制。<br><img src=\"/photo/img/2018-06-19/servicePic2.png\" alt=\"image\"></p>\n<ol>\n<li>大量同步RPC依赖，如何保证自身服务可靠性？<br>  服务之间在调用的时候，会存在大量异常、超时。我该如何处理，认为这次是失败的？还是成功的？如果依赖的服务返回成功，才算成功的话，我改如何保证服务可靠性，该如何对我的下游服务提供可靠的服务。</li>\n<li>调用依赖服务失败，如何降级处理？<br>  在服务调用失败的时候，我的上游出错了，我该如何降级处理，我该重试？还是直接跳过，跳过后是否会造成微服务之间数据一致性问题。如果重试是否会造成重复提交，接口是否幂等？</li>\n<li>是否还欠缺回滚机制？ </li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"/photo/img/2018-06-19/servicePic1.png\" alt=\"image\"></p>\n<h2 id=\"存在问题\"><a href=\"#存在问题\" class=\"headerlink\" title=\"存在问题\"></a>存在问题</h2><p>  我们的保证金服务现有结构是这个样子。<br>在 1、2、3、4、5、6 各个阶段都会存在超时和异常问题，当负载少时，我们还可以手动人工处理，但是当数据量大的时候，问题或多的令人发指，沉浸于洗数据，无法自拔。。<br>超时存在问题：<br>1.当1、2、3 步骤超时时，下游服务可以忽略，当做执行失败，重试。<br>2.当在环节4、5、6超时时，对于下游服务是也是执行失败，但是还可以重试么？</p>\n<h2 id=\"如何提高服务可靠性\"><a href=\"#如何提高服务可靠性\" class=\"headerlink\" title=\"如何提高服务可靠性\"></a>如何提高服务可靠性</h2><p>对于上游服务，如何保证对下游提供可靠的服务。</p>\n<h3 id=\"补偿机制\"><a href=\"#补偿机制\" class=\"headerlink\" title=\"补偿机制\"></a>补偿机制</h3><p> <img src=\"/photo/img/2018-06-19/servicePic5.png\" alt=\"image\"><br> 在服务间的调用失败时，可以记录失败调用，如队列，消费重试。但是前提一定是接口幂等。<br> 但是这样并不能解决根本性问题，如果我们在调用保证金冻结服务时，失败此时我们冻结时报操作入队列，让队列异步消费，如果此时要解冻保证金，就会出现业务异常。</p>\n<p> <strong>所以</strong>补偿机制建议使用在 <code>不可避免的业务异常情况下使用</code>，我们应该尽可能的优化技术方案，来保证数据一致性，最后再采用补偿机制。</p>\n<h3 id=\"两段提交协议（2pc）\"><a href=\"#两段提交协议（2pc）\" class=\"headerlink\" title=\"两段提交协议（2pc）\"></a>两段提交协议（2pc）</h3><p><img src=\"/photo/img/2018-06-19/servicePic4.png\" alt=\"image\"></p>\n<p>preOperation 执行请求，在调用微服务前，执行预操作成功则表示此次操作可行。<br>如果commit失败该如何处理？重新preOperetion嘛？如果接口幂等是否可以重复，commit？如何保证避免重复提交？<br>在preOperation时，返回唯一操作ID，业务逻辑每个操作对应一个操作ID，commit失败就重试，当然前提是我们的上有服务接口幂等。</p>\n<p><img src=\"/photo/img/2018-06-19/servicePic3.png\" alt=\"image\"><br>即使是这样也会存在问题，如果保证金预操作成功，但是执行一直失败呢？我们必须提供回滚机制。<br><img src=\"/photo/img/2018-06-19/servicePic2.png\" alt=\"image\"></p>\n<ol>\n<li>大量同步RPC依赖，如何保证自身服务可靠性？<br>  服务之间在调用的时候，会存在大量异常、超时。我该如何处理，认为这次是失败的？还是成功的？如果依赖的服务返回成功，才算成功的话，我改如何保证服务可靠性，该如何对我的下游服务提供可靠的服务。</li>\n<li>调用依赖服务失败，如何降级处理？<br>  在服务调用失败的时候，我的上游出错了，我该如何降级处理，我该重试？还是直接跳过，跳过后是否会造成微服务之间数据一致性问题。如果重试是否会造成重复提交，接口是否幂等？</li>\n<li>是否还欠缺回滚机制？ </li>\n</ol>\n"},{"title":"算法-各个查找算法","toc":true,"date":"2018-05-30T06:47:03.000Z","_content":"\n# 基于数组的查找\n\n## 顺序查找\n\n```php\nfunction sequenceSearch($arr, $key)\n{\n    foreach($arr as $k => $v)\n    {\n        if($v == $key)\n        {\n            return $k;\n        }\n    }\n}\n\n```\n## 二分查找\n\n- 前提条件是$arr是顺序列表,切实索引数组。\n```php\nfunction binarySearch($arr, $key, $start, $end)\n{\n    $mid = intval(($start+$end)/2);\n    if($arr[$mid] == $key)\n    {\n        return $mid;\n    }\n    if($mid == $start && $mid == $end) \n    {\n        return false;\n    }\n    //如果大于\n    if($arr[$mid] > $key)\n    {\n        return binarySearch($arr, $key, $start, $mid-1);\n    }\n    //如果小于\n    if($arr[$mid] < $key)\n    {\n        return binarySearch($arr, $key, $$mid+1, $end);\n    }\n    \n}\n```\n\n## 插值查找\n\n插值查找是二分查找的优化，当然优化的前提是数组的值是接近平均分布的，否则效率也会很差。\n```php\nfunction insertSearch($arr, $key, $start,$end)\n{\n    if($start > $end )\n    {\n        return false;\n    }\n    $mid = $start + ($key - $arr[$start])/($arr[$end] - $arr[$start]) * ($end - $start);\n\n    if($arr[$mid] == $key )\n    {\n        return $mid;\n    }\n\n    if($arr[$mid] > $key)\n    {\n        insertSearch($arr, $key, $start, $mid-1);\n    }\n\n    if($arr[$mid] < $key)\n    {\n        insertSearch($arr, $key, $mid+1, $end);\n    }\n}\n\n```\n\n\n","source":"_drafts/算法-各个查找算法.md","raw":"---\ntitle: 算法-各个查找算法\ntags: 算法\ntoc: true\ncategories: 算法\ndate: 2018-05-30 14:47:03\n---\n\n# 基于数组的查找\n\n## 顺序查找\n\n```php\nfunction sequenceSearch($arr, $key)\n{\n    foreach($arr as $k => $v)\n    {\n        if($v == $key)\n        {\n            return $k;\n        }\n    }\n}\n\n```\n## 二分查找\n\n- 前提条件是$arr是顺序列表,切实索引数组。\n```php\nfunction binarySearch($arr, $key, $start, $end)\n{\n    $mid = intval(($start+$end)/2);\n    if($arr[$mid] == $key)\n    {\n        return $mid;\n    }\n    if($mid == $start && $mid == $end) \n    {\n        return false;\n    }\n    //如果大于\n    if($arr[$mid] > $key)\n    {\n        return binarySearch($arr, $key, $start, $mid-1);\n    }\n    //如果小于\n    if($arr[$mid] < $key)\n    {\n        return binarySearch($arr, $key, $$mid+1, $end);\n    }\n    \n}\n```\n\n## 插值查找\n\n插值查找是二分查找的优化，当然优化的前提是数组的值是接近平均分布的，否则效率也会很差。\n```php\nfunction insertSearch($arr, $key, $start,$end)\n{\n    if($start > $end )\n    {\n        return false;\n    }\n    $mid = $start + ($key - $arr[$start])/($arr[$end] - $arr[$start]) * ($end - $start);\n\n    if($arr[$mid] == $key )\n    {\n        return $mid;\n    }\n\n    if($arr[$mid] > $key)\n    {\n        insertSearch($arr, $key, $start, $mid-1);\n    }\n\n    if($arr[$mid] < $key)\n    {\n        insertSearch($arr, $key, $mid+1, $end);\n    }\n}\n\n```\n\n\n","slug":"算法-各个查找算法","published":0,"updated":"2019-02-21T03:49:34.702Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjswwkdpb000yg7wwr0myl5vw","content":"<h1 id=\"基于数组的查找\"><a href=\"#基于数组的查找\" class=\"headerlink\" title=\"基于数组的查找\"></a>基于数组的查找</h1><h2 id=\"顺序查找\"><a href=\"#顺序查找\" class=\"headerlink\" title=\"顺序查找\"></a>顺序查找</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sequenceSearch</span><span class=\"params\">($arr, $key)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">foreach</span>($arr <span class=\"keyword\">as</span> $k =&gt; $v)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>($v == $key)</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> $k;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"二分查找\"><a href=\"#二分查找\" class=\"headerlink\" title=\"二分查找\"></a>二分查找</h2><ul>\n<li>前提条件是$arr是顺序列表,切实索引数组。<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">binarySearch</span><span class=\"params\">($arr, $key, $start, $end)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    $mid = intval(($start+$end)/<span class=\"number\">2</span>);</div><div class=\"line\">    <span class=\"keyword\">if</span>($arr[$mid] == $key)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> $mid;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span>($mid == $start &amp;&amp; $mid == $end) </div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//如果大于</span></div><div class=\"line\">    <span class=\"keyword\">if</span>($arr[$mid] &gt; $key)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> binarySearch($arr, $key, $start, $mid<span class=\"number\">-1</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//如果小于</span></div><div class=\"line\">    <span class=\"keyword\">if</span>($arr[$mid] &lt; $key)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> binarySearch($arr, $key, $$mid+<span class=\"number\">1</span>, $end);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"插值查找\"><a href=\"#插值查找\" class=\"headerlink\" title=\"插值查找\"></a>插值查找</h2><p>插值查找是二分查找的优化，当然优化的前提是数组的值是接近平均分布的，否则效率也会很差。<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">insertSearch</span><span class=\"params\">($arr, $key, $start,$end)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>($start &gt; $end )</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    $mid = $start + ($key - $arr[$start])/($arr[$end] - $arr[$start]) * ($end - $start);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span>($arr[$mid] == $key )</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> $mid;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span>($arr[$mid] &gt; $key)</div><div class=\"line\">    &#123;</div><div class=\"line\">        insertSearch($arr, $key, $start, $mid<span class=\"number\">-1</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span>($arr[$mid] &lt; $key)</div><div class=\"line\">    &#123;</div><div class=\"line\">        insertSearch($arr, $key, $mid+<span class=\"number\">1</span>, $end);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"基于数组的查找\"><a href=\"#基于数组的查找\" class=\"headerlink\" title=\"基于数组的查找\"></a>基于数组的查找</h1><h2 id=\"顺序查找\"><a href=\"#顺序查找\" class=\"headerlink\" title=\"顺序查找\"></a>顺序查找</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sequenceSearch</span><span class=\"params\">($arr, $key)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">foreach</span>($arr <span class=\"keyword\">as</span> $k =&gt; $v)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>($v == $key)</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> $k;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"二分查找\"><a href=\"#二分查找\" class=\"headerlink\" title=\"二分查找\"></a>二分查找</h2><ul>\n<li>前提条件是$arr是顺序列表,切实索引数组。<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">binarySearch</span><span class=\"params\">($arr, $key, $start, $end)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    $mid = intval(($start+$end)/<span class=\"number\">2</span>);</div><div class=\"line\">    <span class=\"keyword\">if</span>($arr[$mid] == $key)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> $mid;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span>($mid == $start &amp;&amp; $mid == $end) </div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//如果大于</span></div><div class=\"line\">    <span class=\"keyword\">if</span>($arr[$mid] &gt; $key)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> binarySearch($arr, $key, $start, $mid<span class=\"number\">-1</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//如果小于</span></div><div class=\"line\">    <span class=\"keyword\">if</span>($arr[$mid] &lt; $key)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> binarySearch($arr, $key, $$mid+<span class=\"number\">1</span>, $end);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"插值查找\"><a href=\"#插值查找\" class=\"headerlink\" title=\"插值查找\"></a>插值查找</h2><p>插值查找是二分查找的优化，当然优化的前提是数组的值是接近平均分布的，否则效率也会很差。<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">insertSearch</span><span class=\"params\">($arr, $key, $start,$end)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>($start &gt; $end )</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    $mid = $start + ($key - $arr[$start])/($arr[$end] - $arr[$start]) * ($end - $start);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span>($arr[$mid] == $key )</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> $mid;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span>($arr[$mid] &gt; $key)</div><div class=\"line\">    &#123;</div><div class=\"line\">        insertSearch($arr, $key, $start, $mid<span class=\"number\">-1</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span>($arr[$mid] &lt; $key)</div><div class=\"line\">    &#123;</div><div class=\"line\">        insertSearch($arr, $key, $mid+<span class=\"number\">1</span>, $end);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n"},{"title":"设计模式-建造者模式(builder template method)","date":"2018-08-01T12:53:15.000Z","toc":true,"_content":"## builder 模式\n\nbuilder 建造者模式,又称生成器模式。\n\n建造者模式是为了简化 使用多个建单的对象构建成一个复杂对象的 设计模式。 属于创建型模式。\n\n代码示例\n\n```php\n\n    publish class SmallWheel()\n    {\n        \n    }\n    \n    publish class BigWheel()\n    {\n        \n    }\n    \n    publish class SmallCar()\n    {\n        publish $wheel;\n    }\n    \n    publish class BigCar()\n    {\n        publish $wheel;\n    }\n\n```\n\n以上为零件。\n\n```php\n    \n    publish CarBuilder()\n    {\n        //创建小轿车\n        publish function getSmallCar()\n        {\n            $smallCar = new SmallCar();\n            $smallCar->whell = new SmallWheel();\n            return $smallCar;\n        }\n        \n        //创建大轿车\n        publish function getBigCar()\n        {\n            $bigCar = new BigCar();\n            $bigCar->whell = new BigWheel();\n            return $bigCar;\n        }\n    }\n```\n\n调度 \n\n```php\n\n    $carBuilder = new CArBuilder();\n    \n    $smallCar = $carBuilder->getSmallCar();\n    $bigCar = $carBuilder->getBigCar();\n```\n\n\n备注:\n\n建造者模式与工厂模式区别:\n工厂模式用于批量创建那哪一种类, 建造者模式更注重构建过程。\n\n\n## template method \n\n模板方法:定义一个抽象类或者/父类,由继承它的子类按照需求重写它的方法实现。\n\neg:\n\n```php\n\n    publish abstract class Car()\n    {\n        //强制子类实现\n        abstract public function run();\n        abstract public function turnOnTheLight();\n        //不强制\n        public function palyMusic()\n        {\n            return 'hengheng hahei';\n        }\n    }\n    \n```\n继承\n\n```php\n    public class SmaCar extends car \n    {\n        public function run()\n        {\n            return 'run';\n        }\n        \n        public funtion turnOnTheLight()\n        {\n            return 'turnOnTheLight';\n        }\n    }\n```\n    \n以上\n","source":"_drafts/设计模式.md","raw":"---\ntitle: 设计模式-建造者模式(builder template method)\ndate: 2018-08-01 20:53:15\ntags: 设计模式\ncategories: 设计模式\ntoc: true\n---\n## builder 模式\n\nbuilder 建造者模式,又称生成器模式。\n\n建造者模式是为了简化 使用多个建单的对象构建成一个复杂对象的 设计模式。 属于创建型模式。\n\n代码示例\n\n```php\n\n    publish class SmallWheel()\n    {\n        \n    }\n    \n    publish class BigWheel()\n    {\n        \n    }\n    \n    publish class SmallCar()\n    {\n        publish $wheel;\n    }\n    \n    publish class BigCar()\n    {\n        publish $wheel;\n    }\n\n```\n\n以上为零件。\n\n```php\n    \n    publish CarBuilder()\n    {\n        //创建小轿车\n        publish function getSmallCar()\n        {\n            $smallCar = new SmallCar();\n            $smallCar->whell = new SmallWheel();\n            return $smallCar;\n        }\n        \n        //创建大轿车\n        publish function getBigCar()\n        {\n            $bigCar = new BigCar();\n            $bigCar->whell = new BigWheel();\n            return $bigCar;\n        }\n    }\n```\n\n调度 \n\n```php\n\n    $carBuilder = new CArBuilder();\n    \n    $smallCar = $carBuilder->getSmallCar();\n    $bigCar = $carBuilder->getBigCar();\n```\n\n\n备注:\n\n建造者模式与工厂模式区别:\n工厂模式用于批量创建那哪一种类, 建造者模式更注重构建过程。\n\n\n## template method \n\n模板方法:定义一个抽象类或者/父类,由继承它的子类按照需求重写它的方法实现。\n\neg:\n\n```php\n\n    publish abstract class Car()\n    {\n        //强制子类实现\n        abstract public function run();\n        abstract public function turnOnTheLight();\n        //不强制\n        public function palyMusic()\n        {\n            return 'hengheng hahei';\n        }\n    }\n    \n```\n继承\n\n```php\n    public class SmaCar extends car \n    {\n        public function run()\n        {\n            return 'run';\n        }\n        \n        public funtion turnOnTheLight()\n        {\n            return 'turnOnTheLight';\n        }\n    }\n```\n    \n以上\n","slug":"设计模式","published":0,"updated":"2019-02-21T03:49:34.703Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjswwkdpc0012g7wwhpp8mske","content":"<h2 id=\"builder-模式\"><a href=\"#builder-模式\" class=\"headerlink\" title=\"builder 模式\"></a>builder 模式</h2><p>builder 建造者模式,又称生成器模式。</p>\n<p>建造者模式是为了简化 使用多个建单的对象构建成一个复杂对象的 设计模式。 属于创建型模式。</p>\n<p>代码示例</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">publish class SmallWheel()</div><div class=\"line\">&#123;</div><div class=\"line\">    </div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">publish class BigWheel()</div><div class=\"line\">&#123;</div><div class=\"line\">    </div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">publish class SmallCar()</div><div class=\"line\">&#123;</div><div class=\"line\">    publish $wheel;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">publish class BigCar()</div><div class=\"line\">&#123;</div><div class=\"line\">    publish $wheel;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>以上为零件。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">publish CarBuilder()</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">//创建小轿车</span></div><div class=\"line\">    publish <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getSmallCar</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        $smallCar = <span class=\"keyword\">new</span> SmallCar();</div><div class=\"line\">        $smallCar-&gt;whell = <span class=\"keyword\">new</span> SmallWheel();</div><div class=\"line\">        <span class=\"keyword\">return</span> $smallCar;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//创建大轿车</span></div><div class=\"line\">    publish <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getBigCar</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        $bigCar = <span class=\"keyword\">new</span> BigCar();</div><div class=\"line\">        $bigCar-&gt;whell = <span class=\"keyword\">new</span> BigWheel();</div><div class=\"line\">        <span class=\"keyword\">return</span> $bigCar;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>调度 </p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">$carBuilder = <span class=\"keyword\">new</span> CArBuilder();</div><div class=\"line\"></div><div class=\"line\">$smallCar = $carBuilder-&gt;getSmallCar();</div><div class=\"line\">$bigCar = $carBuilder-&gt;getBigCar();</div></pre></td></tr></table></figure>\n<p>备注:</p>\n<p>建造者模式与工厂模式区别:<br>工厂模式用于批量创建那哪一种类, 建造者模式更注重构建过程。</p>\n<h2 id=\"template-method\"><a href=\"#template-method\" class=\"headerlink\" title=\"template method\"></a>template method</h2><p>模板方法:定义一个抽象类或者/父类,由继承它的子类按照需求重写它的方法实现。</p>\n<p>eg:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">publish abstract class Car()</div><div class=\"line\">&#123;</div><div class=\"line\">    //强制子类实现</div><div class=\"line\">    abstract public function run();</div><div class=\"line\">    abstract public function turnOnTheLight();</div><div class=\"line\">    //不强制</div><div class=\"line\">    public function palyMusic()</div><div class=\"line\">    &#123;</div><div class=\"line\">        return 'hengheng hahei';</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>继承</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SmaCar</span> <span class=\"keyword\">extends</span> <span class=\"title\">car</span> </span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">run</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'run'</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">public</span> funtion turnOnTheLight()</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'turnOnTheLight'</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>以上</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"builder-模式\"><a href=\"#builder-模式\" class=\"headerlink\" title=\"builder 模式\"></a>builder 模式</h2><p>builder 建造者模式,又称生成器模式。</p>\n<p>建造者模式是为了简化 使用多个建单的对象构建成一个复杂对象的 设计模式。 属于创建型模式。</p>\n<p>代码示例</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">publish class SmallWheel()</div><div class=\"line\">&#123;</div><div class=\"line\">    </div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">publish class BigWheel()</div><div class=\"line\">&#123;</div><div class=\"line\">    </div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">publish class SmallCar()</div><div class=\"line\">&#123;</div><div class=\"line\">    publish $wheel;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">publish class BigCar()</div><div class=\"line\">&#123;</div><div class=\"line\">    publish $wheel;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>以上为零件。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">publish CarBuilder()</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">//创建小轿车</span></div><div class=\"line\">    publish <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getSmallCar</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        $smallCar = <span class=\"keyword\">new</span> SmallCar();</div><div class=\"line\">        $smallCar-&gt;whell = <span class=\"keyword\">new</span> SmallWheel();</div><div class=\"line\">        <span class=\"keyword\">return</span> $smallCar;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//创建大轿车</span></div><div class=\"line\">    publish <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getBigCar</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        $bigCar = <span class=\"keyword\">new</span> BigCar();</div><div class=\"line\">        $bigCar-&gt;whell = <span class=\"keyword\">new</span> BigWheel();</div><div class=\"line\">        <span class=\"keyword\">return</span> $bigCar;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>调度 </p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">$carBuilder = <span class=\"keyword\">new</span> CArBuilder();</div><div class=\"line\"></div><div class=\"line\">$smallCar = $carBuilder-&gt;getSmallCar();</div><div class=\"line\">$bigCar = $carBuilder-&gt;getBigCar();</div></pre></td></tr></table></figure>\n<p>备注:</p>\n<p>建造者模式与工厂模式区别:<br>工厂模式用于批量创建那哪一种类, 建造者模式更注重构建过程。</p>\n<h2 id=\"template-method\"><a href=\"#template-method\" class=\"headerlink\" title=\"template method\"></a>template method</h2><p>模板方法:定义一个抽象类或者/父类,由继承它的子类按照需求重写它的方法实现。</p>\n<p>eg:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">publish abstract class Car()</div><div class=\"line\">&#123;</div><div class=\"line\">    //强制子类实现</div><div class=\"line\">    abstract public function run();</div><div class=\"line\">    abstract public function turnOnTheLight();</div><div class=\"line\">    //不强制</div><div class=\"line\">    public function palyMusic()</div><div class=\"line\">    &#123;</div><div class=\"line\">        return 'hengheng hahei';</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>继承</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SmaCar</span> <span class=\"keyword\">extends</span> <span class=\"title\">car</span> </span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">run</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'run'</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">public</span> funtion turnOnTheLight()</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'turnOnTheLight'</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>以上</p>\n"},{"title":"算法","_content":"\n## 1.算法-求两数之和\n```\n给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。\n\n你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。\n\n示例:\n\n给定 nums = [2, 7, 11, 15], target = 9\n\n因为 nums[0] + nums[1] = 2 + 7 = 9\n所以返回 [0, 1]\n```\n\n```c\nint* twoSum(int* nums, int numsSize, int target) \n{\n    static int arr[2]={0};\n    \n    for(int i = 0;i < numsSize-1; i++) \n    {\n        for(int n = i + 1 ;n < numsSize; n++) \n        {\n            if((nums[i] + nums[n]) == target) \n            {\n                arr[0] = i;\n                arr[1] = n;\n                return arr;\n            }\n        }\n    }\n    return 0;\n}\n```\n\n问：为什么保修用static修饰数组，不然会报错。\n`load of null pointer of type 'const int'`\n原因:\n```\n 因为如果不用静态的话，数组的生命周期就是从定义的地方到函数结束，函数运行结束，这个内存也就释放掉了。返回的是数组的首地址，一旦函数运行结束，这个地址里的东西就变成空了，所以要用静态数组延长数组的生命周期\n```\n\n## 算法-两数相加\n\n很蠢的一个解法\n```c\n/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     struct ListNode *next;\n * };\n */\nstruct ListNode* addTwoNumbers(struct ListNode* l1, struct ListNode* l2) \n{\n    struct ListNode* l3 = (struct ListNode *)malloc(sizeof(struct ListNode));\n    struct ListNode* l3current;\n    l3current = l3;\n    int tmp = 0;\n    aa:\n    if (l1 != NULL) \n    {   \n        struct ListNode* l3tmp = (struct ListNode *)malloc(sizeof(struct ListNode));\n        l3tmp->next = NULL;\n        if(l2 != NULL)\n        {\n            if((l1->val + l2->val+ tmp)> 9 )\n            {\n                l3tmp->val = (l1->val + l2->val+ tmp)-10;      \n                tmp = 1;\n                l1 = l1->next;\n                l2 = l2->next;\n                l3current->next = l3tmp;\n                l3current = l3tmp;\n                goto aa;\n            } else {\n                \n                l3tmp->val = l1->val + l2->val +tmp;                       \n                tmp = 0;\n                l1 = l1->next;\n                l2 = l2->next;\n                l3current->next = l3tmp;\n                l3current = l3tmp;\n                goto aa;\n            }\n        } else {\n            l3tmp->val =(l1->val +tmp)%10 ; \n            if(l1->val +tmp > 9) {\n                tmp = 1;\n            } else {\n                tmp = 0;   \n            }\n            l1 = l1->next;   \n            l3current->next = l3tmp;\n            l3current = l3tmp;\n            goto aa;\n        }  \n    }else {\n        if(l2 != NULL)\n        {\n            struct ListNode* l3tmp = (struct ListNode *)malloc(sizeof(struct ListNode));\n            l3tmp->next = NULL;\n            l3tmp->val =  (l2->val +tmp)%10;\n            if(l2->val +tmp > 9) {\n                tmp = 1;    \n            } else {\n                tmp = 0;    \n            }\n             \n            l2 = l2->next;\n            l3current->next = l3tmp;\n            l3current = l3tmp;\n            goto aa;\n        } else {\n            if(tmp == 0) {\n                return l3->next;   \n            } else {\n            struct ListNode* l3tmp = (struct ListNode *)malloc(sizeof(struct ListNode));\n            l3tmp->next = NULL;\n            l3tmp->val =  tmp;  \n            tmp = 0;\n            l3current->next = l3tmp;\n            l3current = l3tmp;\n            goto aa;\n            }\n        }  \n        \n    } \n    return l3->next;\n}\n\n```\n\n遇到问题：\n- c中的链表如何实现的\n- `struct ListNode* l3tmp = (struct ListNode *)malloc(sizeof(struct ListNode));` 与 `struct ListNode* l3tmp` 的区别\n- 以及为什么返回结构体不需要用static来修饰了\n\n问题2:\n如果头地址不分配内存的话无法赋值，所以导致一直在造作l3current 并不是l3.\n\n\n\n子字符串翻转：\n```c\nvoid reverseWords(char *s) {\n    if(s == \" \") {\n        s = \"\";\n        return;\n    }\n    int len = strlen(s);\n    char *ret = (char *) malloc(len);\n    memset(ret, '\\0,', len);\n    int j = 0, i = 0;\n    memset(ret, '\\0', len);\n    char *tmp = (char *) malloc(len);\n    memset(tmp, '\\0', len);\n\n    while (s[i] != '\\0') {\n        if (s[i] == ' ') {\n            if (ret[j-1] == ' ') {\n                i++;\n                continue;\n            }\n            else {\n                ret[j] = s[i];\n                j++;\n\n            }\n        } else {\n            ret[j] = s[i];\n            j++;\n\n        }\n        i++;\n    }\n\n    int m = 0;\n    int k = 0;\n    char* strtmp = (char*)malloc(len+1);\n    memset(strtmp, '\\0', len +1);\n    for (i = strlen(ret) - 1; i >= 0; i--) {\n\n        if (ret[i] != ' ') {\n            tmp[m] = ret[i];\n            m++;\n        } else {\n            m = m-1;\n            while (m >= 0 ) {\n                strtmp[k] = tmp[m];\n                m--;\n                k++;\n            }\n            memset(tmp, '\\0', len);\n            m = 0;\n            strtmp[k] = ' ';\n            k++;\n\n        }\n\n    }\n    m = m-1;\n    while (m >= 0 ) {\n        strtmp[k] = tmp[m];\n        m--;\n        k++;\n    }\n    memset(tmp, '\\0', len);\n    s = strtmp;\n\n}\n```\n为什么mac下c 语言不允许直接操作字符串中的字符。（已经找到答案）\n\n\nchar* p = (char*)malloc(128);与char p[128]的区别.\n\n\nLeetCode 求真实路径 C语言版本\n`需要补充思路`\n```\nchar *simplifyPath(char *path) {\n    int len = strlen(path);\n    char *ret = (char *) malloc(len+1);\n    memset(ret, '\\0', len+1);\n    char *p;\n    char delim[2] = \"/\";\n    p = strtok(path, delim);\n    int i = 0, j = 0;\n    while (p != NULL) {\n        if (strcoll(p, \".\") == 0) {\n            p = strtok(NULL, delim);\n            continue;\n        }\n        if (strcoll(p, \"..\") == 0) {\n            while (i > 0) {\n                if(ret[i] == '/') {\n                    ret[i] = '\\0';\n                    break;\n                }\n                ret[i] = '\\0';\n                i--;\n            }\n            p = strtok(NULL, delim);\n            continue;\n        }\n\n        if (ret[i] != '/') {\n            ret[i] = '/';\n            i++;\n        } else {\n            i++;\n        }\n        for (j = 0; j < strlen(p); j++) {\n            ret[i] = p[j];\n            i++;\n        }\n        p = strtok(NULL, delim);\n    }\n    if(strlen(ret) < 1) {\n        ret[0] ='/';\n    }\n    return ret;\n\n}\n```","source":"_drafts/算法.md","raw":"---\ntitle: 算法\ntags:\n---\n\n## 1.算法-求两数之和\n```\n给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。\n\n你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。\n\n示例:\n\n给定 nums = [2, 7, 11, 15], target = 9\n\n因为 nums[0] + nums[1] = 2 + 7 = 9\n所以返回 [0, 1]\n```\n\n```c\nint* twoSum(int* nums, int numsSize, int target) \n{\n    static int arr[2]={0};\n    \n    for(int i = 0;i < numsSize-1; i++) \n    {\n        for(int n = i + 1 ;n < numsSize; n++) \n        {\n            if((nums[i] + nums[n]) == target) \n            {\n                arr[0] = i;\n                arr[1] = n;\n                return arr;\n            }\n        }\n    }\n    return 0;\n}\n```\n\n问：为什么保修用static修饰数组，不然会报错。\n`load of null pointer of type 'const int'`\n原因:\n```\n 因为如果不用静态的话，数组的生命周期就是从定义的地方到函数结束，函数运行结束，这个内存也就释放掉了。返回的是数组的首地址，一旦函数运行结束，这个地址里的东西就变成空了，所以要用静态数组延长数组的生命周期\n```\n\n## 算法-两数相加\n\n很蠢的一个解法\n```c\n/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     struct ListNode *next;\n * };\n */\nstruct ListNode* addTwoNumbers(struct ListNode* l1, struct ListNode* l2) \n{\n    struct ListNode* l3 = (struct ListNode *)malloc(sizeof(struct ListNode));\n    struct ListNode* l3current;\n    l3current = l3;\n    int tmp = 0;\n    aa:\n    if (l1 != NULL) \n    {   \n        struct ListNode* l3tmp = (struct ListNode *)malloc(sizeof(struct ListNode));\n        l3tmp->next = NULL;\n        if(l2 != NULL)\n        {\n            if((l1->val + l2->val+ tmp)> 9 )\n            {\n                l3tmp->val = (l1->val + l2->val+ tmp)-10;      \n                tmp = 1;\n                l1 = l1->next;\n                l2 = l2->next;\n                l3current->next = l3tmp;\n                l3current = l3tmp;\n                goto aa;\n            } else {\n                \n                l3tmp->val = l1->val + l2->val +tmp;                       \n                tmp = 0;\n                l1 = l1->next;\n                l2 = l2->next;\n                l3current->next = l3tmp;\n                l3current = l3tmp;\n                goto aa;\n            }\n        } else {\n            l3tmp->val =(l1->val +tmp)%10 ; \n            if(l1->val +tmp > 9) {\n                tmp = 1;\n            } else {\n                tmp = 0;   \n            }\n            l1 = l1->next;   \n            l3current->next = l3tmp;\n            l3current = l3tmp;\n            goto aa;\n        }  \n    }else {\n        if(l2 != NULL)\n        {\n            struct ListNode* l3tmp = (struct ListNode *)malloc(sizeof(struct ListNode));\n            l3tmp->next = NULL;\n            l3tmp->val =  (l2->val +tmp)%10;\n            if(l2->val +tmp > 9) {\n                tmp = 1;    \n            } else {\n                tmp = 0;    \n            }\n             \n            l2 = l2->next;\n            l3current->next = l3tmp;\n            l3current = l3tmp;\n            goto aa;\n        } else {\n            if(tmp == 0) {\n                return l3->next;   \n            } else {\n            struct ListNode* l3tmp = (struct ListNode *)malloc(sizeof(struct ListNode));\n            l3tmp->next = NULL;\n            l3tmp->val =  tmp;  \n            tmp = 0;\n            l3current->next = l3tmp;\n            l3current = l3tmp;\n            goto aa;\n            }\n        }  \n        \n    } \n    return l3->next;\n}\n\n```\n\n遇到问题：\n- c中的链表如何实现的\n- `struct ListNode* l3tmp = (struct ListNode *)malloc(sizeof(struct ListNode));` 与 `struct ListNode* l3tmp` 的区别\n- 以及为什么返回结构体不需要用static来修饰了\n\n问题2:\n如果头地址不分配内存的话无法赋值，所以导致一直在造作l3current 并不是l3.\n\n\n\n子字符串翻转：\n```c\nvoid reverseWords(char *s) {\n    if(s == \" \") {\n        s = \"\";\n        return;\n    }\n    int len = strlen(s);\n    char *ret = (char *) malloc(len);\n    memset(ret, '\\0,', len);\n    int j = 0, i = 0;\n    memset(ret, '\\0', len);\n    char *tmp = (char *) malloc(len);\n    memset(tmp, '\\0', len);\n\n    while (s[i] != '\\0') {\n        if (s[i] == ' ') {\n            if (ret[j-1] == ' ') {\n                i++;\n                continue;\n            }\n            else {\n                ret[j] = s[i];\n                j++;\n\n            }\n        } else {\n            ret[j] = s[i];\n            j++;\n\n        }\n        i++;\n    }\n\n    int m = 0;\n    int k = 0;\n    char* strtmp = (char*)malloc(len+1);\n    memset(strtmp, '\\0', len +1);\n    for (i = strlen(ret) - 1; i >= 0; i--) {\n\n        if (ret[i] != ' ') {\n            tmp[m] = ret[i];\n            m++;\n        } else {\n            m = m-1;\n            while (m >= 0 ) {\n                strtmp[k] = tmp[m];\n                m--;\n                k++;\n            }\n            memset(tmp, '\\0', len);\n            m = 0;\n            strtmp[k] = ' ';\n            k++;\n\n        }\n\n    }\n    m = m-1;\n    while (m >= 0 ) {\n        strtmp[k] = tmp[m];\n        m--;\n        k++;\n    }\n    memset(tmp, '\\0', len);\n    s = strtmp;\n\n}\n```\n为什么mac下c 语言不允许直接操作字符串中的字符。（已经找到答案）\n\n\nchar* p = (char*)malloc(128);与char p[128]的区别.\n\n\nLeetCode 求真实路径 C语言版本\n`需要补充思路`\n```\nchar *simplifyPath(char *path) {\n    int len = strlen(path);\n    char *ret = (char *) malloc(len+1);\n    memset(ret, '\\0', len+1);\n    char *p;\n    char delim[2] = \"/\";\n    p = strtok(path, delim);\n    int i = 0, j = 0;\n    while (p != NULL) {\n        if (strcoll(p, \".\") == 0) {\n            p = strtok(NULL, delim);\n            continue;\n        }\n        if (strcoll(p, \"..\") == 0) {\n            while (i > 0) {\n                if(ret[i] == '/') {\n                    ret[i] = '\\0';\n                    break;\n                }\n                ret[i] = '\\0';\n                i--;\n            }\n            p = strtok(NULL, delim);\n            continue;\n        }\n\n        if (ret[i] != '/') {\n            ret[i] = '/';\n            i++;\n        } else {\n            i++;\n        }\n        for (j = 0; j < strlen(p); j++) {\n            ret[i] = p[j];\n            i++;\n        }\n        p = strtok(NULL, delim);\n    }\n    if(strlen(ret) < 1) {\n        ret[0] ='/';\n    }\n    return ret;\n\n}\n```","slug":"算法","published":0,"date":"2019-02-20T16:48:36.064Z","updated":"2019-02-20T16:48:36.064Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjswwkdpe0013g7ww2q7smbk2","content":"<h2 id=\"1-算法-求两数之和\"><a href=\"#1-算法-求两数之和\" class=\"headerlink\" title=\"1.算法-求两数之和\"></a>1.算法-求两数之和</h2><figure class=\"highlight accesslog\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。</div><div class=\"line\"></div><div class=\"line\">你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。</div><div class=\"line\"></div><div class=\"line\">示例:</div><div class=\"line\"></div><div class=\"line\">给定 nums = <span class=\"string\">[2, 7, 11, 15]</span>, target = <span class=\"number\">9</span></div><div class=\"line\"></div><div class=\"line\">因为 nums<span class=\"string\">[0]</span> + nums<span class=\"string\">[1]</span> = <span class=\"number\">2</span> + <span class=\"number\">7</span> = <span class=\"number\">9</span></div><div class=\"line\">所以返回 <span class=\"string\">[0, 1]</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span>* <span class=\"title\">twoSum</span><span class=\"params\">(<span class=\"keyword\">int</span>* nums, <span class=\"keyword\">int</span> numsSize, <span class=\"keyword\">int</span> target)</span> </span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> arr[<span class=\"number\">2</span>]=&#123;<span class=\"number\">0</span>&#125;;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt; numsSize<span class=\"number\">-1</span>; i++) </div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> n = i + <span class=\"number\">1</span> ;n &lt; numsSize; n++) </div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>((nums[i] + nums[n]) == target) </div><div class=\"line\">            &#123;</div><div class=\"line\">                arr[<span class=\"number\">0</span>] = i;</div><div class=\"line\">                arr[<span class=\"number\">1</span>] = n;</div><div class=\"line\">                <span class=\"keyword\">return</span> arr;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>问：为什么保修用static修饰数组，不然会报错。<br><code>load of null pointer of type &#39;const int&#39;</code><br>原因:<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">因为如果不用静态的话，数组的生命周期就是从定义的地方到函数结束，函数运行结束，这个内存也就释放掉了。返回的是数组的首地址，一旦函数运行结束，这个地址里的东西就变成空了，所以要用静态数组延长数组的生命周期</div></pre></td></tr></table></figure></p>\n<h2 id=\"算法-两数相加\"><a href=\"#算法-两数相加\" class=\"headerlink\" title=\"算法-两数相加\"></a>算法-两数相加</h2><p>很蠢的一个解法<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Definition for singly-linked list.</div><div class=\"line\"> * struct ListNode &#123;</div><div class=\"line\"> *     int val;</div><div class=\"line\"> *     struct ListNode *next;</div><div class=\"line\"> * &#125;;</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">struct</span> ListNode* <span class=\"title\">addTwoNumbers</span><span class=\"params\">(<span class=\"keyword\">struct</span> ListNode* l1, <span class=\"keyword\">struct</span> ListNode* l2)</span> </span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">struct</span> ListNode* l3 = (<span class=\"keyword\">struct</span> ListNode *)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">struct</span> ListNode));</div><div class=\"line\">    <span class=\"keyword\">struct</span> ListNode* l3current;</div><div class=\"line\">    l3current = l3;</div><div class=\"line\">    <span class=\"keyword\">int</span> tmp = <span class=\"number\">0</span>;</div><div class=\"line\">    aa:</div><div class=\"line\">    <span class=\"keyword\">if</span> (l1 != <span class=\"literal\">NULL</span>) </div><div class=\"line\">    &#123;   </div><div class=\"line\">        <span class=\"keyword\">struct</span> ListNode* l3tmp = (<span class=\"keyword\">struct</span> ListNode *)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">struct</span> ListNode));</div><div class=\"line\">        l3tmp-&gt;next = <span class=\"literal\">NULL</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span>(l2 != <span class=\"literal\">NULL</span>)</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>((l1-&gt;val + l2-&gt;val+ tmp)&gt; <span class=\"number\">9</span> )</div><div class=\"line\">            &#123;</div><div class=\"line\">                l3tmp-&gt;val = (l1-&gt;val + l2-&gt;val+ tmp)<span class=\"number\">-10</span>;      </div><div class=\"line\">                tmp = <span class=\"number\">1</span>;</div><div class=\"line\">                l1 = l1-&gt;next;</div><div class=\"line\">                l2 = l2-&gt;next;</div><div class=\"line\">                l3current-&gt;next = l3tmp;</div><div class=\"line\">                l3current = l3tmp;</div><div class=\"line\">                <span class=\"keyword\">goto</span> aa;</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                </div><div class=\"line\">                l3tmp-&gt;val = l1-&gt;val + l2-&gt;val +tmp;                       </div><div class=\"line\">                tmp = <span class=\"number\">0</span>;</div><div class=\"line\">                l1 = l1-&gt;next;</div><div class=\"line\">                l2 = l2-&gt;next;</div><div class=\"line\">                l3current-&gt;next = l3tmp;</div><div class=\"line\">                l3current = l3tmp;</div><div class=\"line\">                <span class=\"keyword\">goto</span> aa;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            l3tmp-&gt;val =(l1-&gt;val +tmp)%<span class=\"number\">10</span> ; </div><div class=\"line\">            <span class=\"keyword\">if</span>(l1-&gt;val +tmp &gt; <span class=\"number\">9</span>) &#123;</div><div class=\"line\">                tmp = <span class=\"number\">1</span>;</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                tmp = <span class=\"number\">0</span>;   </div><div class=\"line\">            &#125;</div><div class=\"line\">            l1 = l1-&gt;next;   </div><div class=\"line\">            l3current-&gt;next = l3tmp;</div><div class=\"line\">            l3current = l3tmp;</div><div class=\"line\">            <span class=\"keyword\">goto</span> aa;</div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(l2 != <span class=\"literal\">NULL</span>)</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">struct</span> ListNode* l3tmp = (<span class=\"keyword\">struct</span> ListNode *)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">struct</span> ListNode));</div><div class=\"line\">            l3tmp-&gt;next = <span class=\"literal\">NULL</span>;</div><div class=\"line\">            l3tmp-&gt;val =  (l2-&gt;val +tmp)%<span class=\"number\">10</span>;</div><div class=\"line\">            <span class=\"keyword\">if</span>(l2-&gt;val +tmp &gt; <span class=\"number\">9</span>) &#123;</div><div class=\"line\">                tmp = <span class=\"number\">1</span>;    </div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                tmp = <span class=\"number\">0</span>;    </div><div class=\"line\">            &#125;</div><div class=\"line\">             </div><div class=\"line\">            l2 = l2-&gt;next;</div><div class=\"line\">            l3current-&gt;next = l3tmp;</div><div class=\"line\">            l3current = l3tmp;</div><div class=\"line\">            <span class=\"keyword\">goto</span> aa;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>(tmp == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> l3-&gt;next;   </div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">struct</span> ListNode* l3tmp = (<span class=\"keyword\">struct</span> ListNode *)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">struct</span> ListNode));</div><div class=\"line\">            l3tmp-&gt;next = <span class=\"literal\">NULL</span>;</div><div class=\"line\">            l3tmp-&gt;val =  tmp;  </div><div class=\"line\">            tmp = <span class=\"number\">0</span>;</div><div class=\"line\">            l3current-&gt;next = l3tmp;</div><div class=\"line\">            l3current = l3tmp;</div><div class=\"line\">            <span class=\"keyword\">goto</span> aa;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;  </div><div class=\"line\">        </div><div class=\"line\">    &#125; </div><div class=\"line\">    <span class=\"keyword\">return</span> l3-&gt;next;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>遇到问题：</p>\n<ul>\n<li>c中的链表如何实现的</li>\n<li><code>struct ListNode* l3tmp = (struct ListNode *)malloc(sizeof(struct ListNode));</code> 与 <code>struct ListNode* l3tmp</code> 的区别</li>\n<li>以及为什么返回结构体不需要用static来修饰了</li>\n</ul>\n<p>问题2:<br>如果头地址不分配内存的话无法赋值，所以导致一直在造作l3current 并不是l3.</p>\n<p>子字符串翻转：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div></pre></td><td class=\"code\"><pre><div class=\"line\">void reverseWords(char *s) &#123;</div><div class=\"line\">    if(s == \" \") &#123;</div><div class=\"line\">        s = \"\";</div><div class=\"line\">        return;</div><div class=\"line\">    &#125;</div><div class=\"line\">    int len = strlen(s);</div><div class=\"line\">    char *ret = (char *) malloc(len);</div><div class=\"line\">    memset(ret, '\\0,', len);</div><div class=\"line\">    int j = 0, i = 0;</div><div class=\"line\">    memset(ret, '\\0', len);</div><div class=\"line\">    char *tmp = (char *) malloc(len);</div><div class=\"line\">    memset(tmp, '\\0', len);</div><div class=\"line\"></div><div class=\"line\">    while (s[i] != '\\0') &#123;</div><div class=\"line\">        if (s[i] == ' ') &#123;</div><div class=\"line\">            if (ret[j-1] == ' ') &#123;</div><div class=\"line\">                i++;</div><div class=\"line\">                continue;</div><div class=\"line\">            &#125;</div><div class=\"line\">            else &#123;</div><div class=\"line\">                ret[j] = s[i];</div><div class=\"line\">                j++;</div><div class=\"line\"></div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; else &#123;</div><div class=\"line\">            ret[j] = s[i];</div><div class=\"line\">            j++;</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\">        i++;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    int m = 0;</div><div class=\"line\">    int k = 0;</div><div class=\"line\">    char* strtmp = (char*)malloc(len+1);</div><div class=\"line\">    memset(strtmp, '\\0', len +1);</div><div class=\"line\">    for (i = strlen(ret) - 1; i &gt;= 0; i--) &#123;</div><div class=\"line\"></div><div class=\"line\">        if (ret[i] != ' ') &#123;</div><div class=\"line\">            tmp[m] = ret[i];</div><div class=\"line\">            m++;</div><div class=\"line\">        &#125; else &#123;</div><div class=\"line\">            m = m-1;</div><div class=\"line\">            while (m &gt;= 0 ) &#123;</div><div class=\"line\">                strtmp[k] = tmp[m];</div><div class=\"line\">                m--;</div><div class=\"line\">                k++;</div><div class=\"line\">            &#125;</div><div class=\"line\">            memset(tmp, '\\0', len);</div><div class=\"line\">            m = 0;</div><div class=\"line\">            strtmp[k] = ' ';</div><div class=\"line\">            k++;</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">    m = m-1;</div><div class=\"line\">    while (m &gt;= 0 ) &#123;</div><div class=\"line\">        strtmp[k] = tmp[m];</div><div class=\"line\">        m--;</div><div class=\"line\">        k++;</div><div class=\"line\">    &#125;</div><div class=\"line\">    memset(tmp, '\\0', len);</div><div class=\"line\">    s = strtmp;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>为什么mac下c 语言不允许直接操作字符串中的字符。（已经找到答案）</p>\n<p>char<em> p = (char</em>)malloc(128);与char p[128]的区别.</p>\n<p>LeetCode 求真实路径 C语言版本<br><code>需要补充思路</code><br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">char</span> *<span class=\"title\">simplifyPath</span><span class=\"params\">(<span class=\"keyword\">char</span> *path)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> len = <span class=\"built_in\">strlen</span>(path);</div><div class=\"line\">    <span class=\"keyword\">char</span> *ret = (<span class=\"keyword\">char</span> *) <span class=\"built_in\">malloc</span>(len+<span class=\"number\">1</span>);</div><div class=\"line\">    <span class=\"built_in\">memset</span>(ret, <span class=\"string\">'\\0'</span>, len+<span class=\"number\">1</span>);</div><div class=\"line\">    <span class=\"keyword\">char</span> *p;</div><div class=\"line\">    <span class=\"keyword\">char</span> delim[<span class=\"number\">2</span>] = <span class=\"string\">\"/\"</span>;</div><div class=\"line\">    p = strtok(path, delim);</div><div class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>, j = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">while</span> (p != <span class=\"literal\">NULL</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (strcoll(p, <span class=\"string\">\".\"</span>) == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            p = strtok(<span class=\"literal\">NULL</span>, delim);</div><div class=\"line\">            <span class=\"keyword\">continue</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (strcoll(p, <span class=\"string\">\"..\"</span>) == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">while</span> (i &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span>(ret[i] == <span class=\"string\">'/'</span>) &#123;</div><div class=\"line\">                    ret[i] = <span class=\"string\">'\\0'</span>;</div><div class=\"line\">                    <span class=\"keyword\">break</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">                ret[i] = <span class=\"string\">'\\0'</span>;</div><div class=\"line\">                i--;</div><div class=\"line\">            &#125;</div><div class=\"line\">            p = strtok(<span class=\"literal\">NULL</span>, delim);</div><div class=\"line\">            <span class=\"keyword\">continue</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (ret[i] != <span class=\"string\">'/'</span>) &#123;</div><div class=\"line\">            ret[i] = <span class=\"string\">'/'</span>;</div><div class=\"line\">            i++;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            i++;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">for</span> (j = <span class=\"number\">0</span>; j &lt; <span class=\"built_in\">strlen</span>(p); j++) &#123;</div><div class=\"line\">            ret[i] = p[j];</div><div class=\"line\">            i++;</div><div class=\"line\">        &#125;</div><div class=\"line\">        p = strtok(<span class=\"literal\">NULL</span>, delim);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">strlen</span>(ret) &lt; <span class=\"number\">1</span>) &#123;</div><div class=\"line\">        ret[<span class=\"number\">0</span>] =<span class=\"string\">'/'</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> ret;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-算法-求两数之和\"><a href=\"#1-算法-求两数之和\" class=\"headerlink\" title=\"1.算法-求两数之和\"></a>1.算法-求两数之和</h2><figure class=\"highlight accesslog\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。</div><div class=\"line\"></div><div class=\"line\">你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。</div><div class=\"line\"></div><div class=\"line\">示例:</div><div class=\"line\"></div><div class=\"line\">给定 nums = <span class=\"string\">[2, 7, 11, 15]</span>, target = <span class=\"number\">9</span></div><div class=\"line\"></div><div class=\"line\">因为 nums<span class=\"string\">[0]</span> + nums<span class=\"string\">[1]</span> = <span class=\"number\">2</span> + <span class=\"number\">7</span> = <span class=\"number\">9</span></div><div class=\"line\">所以返回 <span class=\"string\">[0, 1]</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span>* <span class=\"title\">twoSum</span><span class=\"params\">(<span class=\"keyword\">int</span>* nums, <span class=\"keyword\">int</span> numsSize, <span class=\"keyword\">int</span> target)</span> </span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> arr[<span class=\"number\">2</span>]=&#123;<span class=\"number\">0</span>&#125;;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt; numsSize<span class=\"number\">-1</span>; i++) </div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> n = i + <span class=\"number\">1</span> ;n &lt; numsSize; n++) </div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>((nums[i] + nums[n]) == target) </div><div class=\"line\">            &#123;</div><div class=\"line\">                arr[<span class=\"number\">0</span>] = i;</div><div class=\"line\">                arr[<span class=\"number\">1</span>] = n;</div><div class=\"line\">                <span class=\"keyword\">return</span> arr;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>问：为什么保修用static修饰数组，不然会报错。<br><code>load of null pointer of type &#39;const int&#39;</code><br>原因:<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">因为如果不用静态的话，数组的生命周期就是从定义的地方到函数结束，函数运行结束，这个内存也就释放掉了。返回的是数组的首地址，一旦函数运行结束，这个地址里的东西就变成空了，所以要用静态数组延长数组的生命周期</div></pre></td></tr></table></figure></p>\n<h2 id=\"算法-两数相加\"><a href=\"#算法-两数相加\" class=\"headerlink\" title=\"算法-两数相加\"></a>算法-两数相加</h2><p>很蠢的一个解法<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Definition for singly-linked list.</div><div class=\"line\"> * struct ListNode &#123;</div><div class=\"line\"> *     int val;</div><div class=\"line\"> *     struct ListNode *next;</div><div class=\"line\"> * &#125;;</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">struct</span> ListNode* <span class=\"title\">addTwoNumbers</span><span class=\"params\">(<span class=\"keyword\">struct</span> ListNode* l1, <span class=\"keyword\">struct</span> ListNode* l2)</span> </span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">struct</span> ListNode* l3 = (<span class=\"keyword\">struct</span> ListNode *)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">struct</span> ListNode));</div><div class=\"line\">    <span class=\"keyword\">struct</span> ListNode* l3current;</div><div class=\"line\">    l3current = l3;</div><div class=\"line\">    <span class=\"keyword\">int</span> tmp = <span class=\"number\">0</span>;</div><div class=\"line\">    aa:</div><div class=\"line\">    <span class=\"keyword\">if</span> (l1 != <span class=\"literal\">NULL</span>) </div><div class=\"line\">    &#123;   </div><div class=\"line\">        <span class=\"keyword\">struct</span> ListNode* l3tmp = (<span class=\"keyword\">struct</span> ListNode *)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">struct</span> ListNode));</div><div class=\"line\">        l3tmp-&gt;next = <span class=\"literal\">NULL</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span>(l2 != <span class=\"literal\">NULL</span>)</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>((l1-&gt;val + l2-&gt;val+ tmp)&gt; <span class=\"number\">9</span> )</div><div class=\"line\">            &#123;</div><div class=\"line\">                l3tmp-&gt;val = (l1-&gt;val + l2-&gt;val+ tmp)<span class=\"number\">-10</span>;      </div><div class=\"line\">                tmp = <span class=\"number\">1</span>;</div><div class=\"line\">                l1 = l1-&gt;next;</div><div class=\"line\">                l2 = l2-&gt;next;</div><div class=\"line\">                l3current-&gt;next = l3tmp;</div><div class=\"line\">                l3current = l3tmp;</div><div class=\"line\">                <span class=\"keyword\">goto</span> aa;</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                </div><div class=\"line\">                l3tmp-&gt;val = l1-&gt;val + l2-&gt;val +tmp;                       </div><div class=\"line\">                tmp = <span class=\"number\">0</span>;</div><div class=\"line\">                l1 = l1-&gt;next;</div><div class=\"line\">                l2 = l2-&gt;next;</div><div class=\"line\">                l3current-&gt;next = l3tmp;</div><div class=\"line\">                l3current = l3tmp;</div><div class=\"line\">                <span class=\"keyword\">goto</span> aa;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            l3tmp-&gt;val =(l1-&gt;val +tmp)%<span class=\"number\">10</span> ; </div><div class=\"line\">            <span class=\"keyword\">if</span>(l1-&gt;val +tmp &gt; <span class=\"number\">9</span>) &#123;</div><div class=\"line\">                tmp = <span class=\"number\">1</span>;</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                tmp = <span class=\"number\">0</span>;   </div><div class=\"line\">            &#125;</div><div class=\"line\">            l1 = l1-&gt;next;   </div><div class=\"line\">            l3current-&gt;next = l3tmp;</div><div class=\"line\">            l3current = l3tmp;</div><div class=\"line\">            <span class=\"keyword\">goto</span> aa;</div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(l2 != <span class=\"literal\">NULL</span>)</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">struct</span> ListNode* l3tmp = (<span class=\"keyword\">struct</span> ListNode *)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">struct</span> ListNode));</div><div class=\"line\">            l3tmp-&gt;next = <span class=\"literal\">NULL</span>;</div><div class=\"line\">            l3tmp-&gt;val =  (l2-&gt;val +tmp)%<span class=\"number\">10</span>;</div><div class=\"line\">            <span class=\"keyword\">if</span>(l2-&gt;val +tmp &gt; <span class=\"number\">9</span>) &#123;</div><div class=\"line\">                tmp = <span class=\"number\">1</span>;    </div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                tmp = <span class=\"number\">0</span>;    </div><div class=\"line\">            &#125;</div><div class=\"line\">             </div><div class=\"line\">            l2 = l2-&gt;next;</div><div class=\"line\">            l3current-&gt;next = l3tmp;</div><div class=\"line\">            l3current = l3tmp;</div><div class=\"line\">            <span class=\"keyword\">goto</span> aa;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>(tmp == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> l3-&gt;next;   </div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">struct</span> ListNode* l3tmp = (<span class=\"keyword\">struct</span> ListNode *)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">struct</span> ListNode));</div><div class=\"line\">            l3tmp-&gt;next = <span class=\"literal\">NULL</span>;</div><div class=\"line\">            l3tmp-&gt;val =  tmp;  </div><div class=\"line\">            tmp = <span class=\"number\">0</span>;</div><div class=\"line\">            l3current-&gt;next = l3tmp;</div><div class=\"line\">            l3current = l3tmp;</div><div class=\"line\">            <span class=\"keyword\">goto</span> aa;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;  </div><div class=\"line\">        </div><div class=\"line\">    &#125; </div><div class=\"line\">    <span class=\"keyword\">return</span> l3-&gt;next;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>遇到问题：</p>\n<ul>\n<li>c中的链表如何实现的</li>\n<li><code>struct ListNode* l3tmp = (struct ListNode *)malloc(sizeof(struct ListNode));</code> 与 <code>struct ListNode* l3tmp</code> 的区别</li>\n<li>以及为什么返回结构体不需要用static来修饰了</li>\n</ul>\n<p>问题2:<br>如果头地址不分配内存的话无法赋值，所以导致一直在造作l3current 并不是l3.</p>\n<p>子字符串翻转：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div></pre></td><td class=\"code\"><pre><div class=\"line\">void reverseWords(char *s) &#123;</div><div class=\"line\">    if(s == \" \") &#123;</div><div class=\"line\">        s = \"\";</div><div class=\"line\">        return;</div><div class=\"line\">    &#125;</div><div class=\"line\">    int len = strlen(s);</div><div class=\"line\">    char *ret = (char *) malloc(len);</div><div class=\"line\">    memset(ret, '\\0,', len);</div><div class=\"line\">    int j = 0, i = 0;</div><div class=\"line\">    memset(ret, '\\0', len);</div><div class=\"line\">    char *tmp = (char *) malloc(len);</div><div class=\"line\">    memset(tmp, '\\0', len);</div><div class=\"line\"></div><div class=\"line\">    while (s[i] != '\\0') &#123;</div><div class=\"line\">        if (s[i] == ' ') &#123;</div><div class=\"line\">            if (ret[j-1] == ' ') &#123;</div><div class=\"line\">                i++;</div><div class=\"line\">                continue;</div><div class=\"line\">            &#125;</div><div class=\"line\">            else &#123;</div><div class=\"line\">                ret[j] = s[i];</div><div class=\"line\">                j++;</div><div class=\"line\"></div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; else &#123;</div><div class=\"line\">            ret[j] = s[i];</div><div class=\"line\">            j++;</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\">        i++;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    int m = 0;</div><div class=\"line\">    int k = 0;</div><div class=\"line\">    char* strtmp = (char*)malloc(len+1);</div><div class=\"line\">    memset(strtmp, '\\0', len +1);</div><div class=\"line\">    for (i = strlen(ret) - 1; i &gt;= 0; i--) &#123;</div><div class=\"line\"></div><div class=\"line\">        if (ret[i] != ' ') &#123;</div><div class=\"line\">            tmp[m] = ret[i];</div><div class=\"line\">            m++;</div><div class=\"line\">        &#125; else &#123;</div><div class=\"line\">            m = m-1;</div><div class=\"line\">            while (m &gt;= 0 ) &#123;</div><div class=\"line\">                strtmp[k] = tmp[m];</div><div class=\"line\">                m--;</div><div class=\"line\">                k++;</div><div class=\"line\">            &#125;</div><div class=\"line\">            memset(tmp, '\\0', len);</div><div class=\"line\">            m = 0;</div><div class=\"line\">            strtmp[k] = ' ';</div><div class=\"line\">            k++;</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">    m = m-1;</div><div class=\"line\">    while (m &gt;= 0 ) &#123;</div><div class=\"line\">        strtmp[k] = tmp[m];</div><div class=\"line\">        m--;</div><div class=\"line\">        k++;</div><div class=\"line\">    &#125;</div><div class=\"line\">    memset(tmp, '\\0', len);</div><div class=\"line\">    s = strtmp;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>为什么mac下c 语言不允许直接操作字符串中的字符。（已经找到答案）</p>\n<p>char<em> p = (char</em>)malloc(128);与char p[128]的区别.</p>\n<p>LeetCode 求真实路径 C语言版本<br><code>需要补充思路</code><br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">char</span> *<span class=\"title\">simplifyPath</span><span class=\"params\">(<span class=\"keyword\">char</span> *path)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> len = <span class=\"built_in\">strlen</span>(path);</div><div class=\"line\">    <span class=\"keyword\">char</span> *ret = (<span class=\"keyword\">char</span> *) <span class=\"built_in\">malloc</span>(len+<span class=\"number\">1</span>);</div><div class=\"line\">    <span class=\"built_in\">memset</span>(ret, <span class=\"string\">'\\0'</span>, len+<span class=\"number\">1</span>);</div><div class=\"line\">    <span class=\"keyword\">char</span> *p;</div><div class=\"line\">    <span class=\"keyword\">char</span> delim[<span class=\"number\">2</span>] = <span class=\"string\">\"/\"</span>;</div><div class=\"line\">    p = strtok(path, delim);</div><div class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>, j = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">while</span> (p != <span class=\"literal\">NULL</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (strcoll(p, <span class=\"string\">\".\"</span>) == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            p = strtok(<span class=\"literal\">NULL</span>, delim);</div><div class=\"line\">            <span class=\"keyword\">continue</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (strcoll(p, <span class=\"string\">\"..\"</span>) == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">while</span> (i &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span>(ret[i] == <span class=\"string\">'/'</span>) &#123;</div><div class=\"line\">                    ret[i] = <span class=\"string\">'\\0'</span>;</div><div class=\"line\">                    <span class=\"keyword\">break</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">                ret[i] = <span class=\"string\">'\\0'</span>;</div><div class=\"line\">                i--;</div><div class=\"line\">            &#125;</div><div class=\"line\">            p = strtok(<span class=\"literal\">NULL</span>, delim);</div><div class=\"line\">            <span class=\"keyword\">continue</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (ret[i] != <span class=\"string\">'/'</span>) &#123;</div><div class=\"line\">            ret[i] = <span class=\"string\">'/'</span>;</div><div class=\"line\">            i++;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            i++;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">for</span> (j = <span class=\"number\">0</span>; j &lt; <span class=\"built_in\">strlen</span>(p); j++) &#123;</div><div class=\"line\">            ret[i] = p[j];</div><div class=\"line\">            i++;</div><div class=\"line\">        &#125;</div><div class=\"line\">        p = strtok(<span class=\"literal\">NULL</span>, delim);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">strlen</span>(ret) &lt; <span class=\"number\">1</span>) &#123;</div><div class=\"line\">        ret[<span class=\"number\">0</span>] =<span class=\"string\">'/'</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> ret;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n"},{"title":"hexo git github搭建博客","date":"2016-01-02T13:48:07.000Z","toc":true,"_content":"\n------\n\n\n开始\n--\n\n**\n需求环境\n 1. git [git下载地址][1]\n 2. node.js [node.js下载地址][2]\n\n两个安装都是一路下一步\n## 验证软件正确安装 ##\n\n    git --version\n    node -v\n    npm -v\n如果显示版本信息，怎安装成功。\n## 安装hexo ##\n在这里如果被墙的可以使用淘宝镜像cnpm 具体怎么操作可以自行百度，这里不多做解释。\n不过一般不会被墙，我使用npm。运行下边的命令安装hexo：\n被墙请使用命令：\n\n    npm install -g cnpm --registry=https://registry.npm.taobao.org\n\n以下是没有被墙的命令，被墙把npm换成cnpm即可。安装hexo\n\n    npm install hexo-cli -g\n\n安装完成后，验证是否安装成功。\n\n    hexo -v\n新建文件夹yourblog,输入命令\n\n    $ hexo init blog\n    $ cd blog\n新建博客\n\n    $ hexo new \"Hello Hexo\"\n生成静态页面\n\n    $ hexo generate\n运行服务\n\n    $ hexo server\n\n然后打开浏览器输入 localhost:4000 即可访问本地静态页面。\n\n\n## 接下来我们把本地静态页面PUSH到github ##\n\n - 首先你要有github账号。\n - 新建一个github.io的库\n - 设置本地github配置参数\n - 经本地静态页面push到github\n\n\n----------\n **github设置**\n\n新建github账号就不在这里陈述了，如果有同学不会使用git将代码push到github的话可以参考 [廖雪峰的官网][3]\n我们来直接进行第二不，创建一个github.io库。\n首先登陆我们的github账号点击`new repository`,然后输入youname.github.io\n**git设置**\n设置git配置信息\n\n\n    $ git config --global user.name \"你的用户名\"\n    $ git config --global user.email \"你的邮箱\"\n    \n\n**hexo 设置**\n    安装hexo git插件\n\n    npm install hexo-deployer-git --save\n\n然后打开博客根目录的_config.yml文件\n大致内容是这个样子的\n\n```\n# Hexo Configuration\n## Docs: https://hexo.io/docs/configuration.html\n## Source: https://github.com/hexojs/hexo/\n\n# Site\ntitle: 和女票抢可乐\nsubtitle:\ndescription:\nauthor: MaxieLj\nlanguage:\ntimezone:\n\n# URL\n## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'\nurl: http://yoursite.com\nroot: /\npermalink: :year/:month/:day/:title/\npermalink_defaults:\n\n# Directory\nsource_dir: source\npublic_dir: public\ntag_dir: tags\narchive_dir: archives\ncategory_dir: categories\ncode_dir: downloads/code\ni18n_dir: :lang\nskip_render:\n\n# Writing\nnew_post_name: :title.md # File name of new posts\ndefault_layout: post\ntitlecase: false # Transform title into titlecase\nexternal_link: true # Open external links in new tab\nfilename_case: 0\nrender_drafts: false\npost_asset_folder: false\nrelative_link: false\nfuture: true\nhighlight:\n  enable: true\n  line_number: true\n  auto_detect: false\n  tab_replace:\n\n# Category & Tag\ndefault_category: uncategorized\ncategory_map:\ntag_map:\n\n# Date / Time format\n## Hexo uses Moment.js to parse and display date\n## You can customize the date format as defined in\n## http://momentjs.com/docs/#/displaying/format/\ndate_format: YYYY-MM-DD\ntime_format: HH:mm:ss\n\n# Pagination\n## Set per_page to 0 to disable pagination\nper_page: 10\npagination_dir: page\n\n# Extensions\n## Plugins: https://hexo.io/plugins/\n## Themes: https://hexo.io/themes/\ntheme: yilia\n\n# Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n  repository: https://github.com/MaxieLj/MaxieLj.github.io.git\n  branch: master\n\njsonContent:\n  meta: false\n  pages: false\n  posts:\n    title: true\n    date: true\n    path: true\n    text: true\n    raw: false\n    content: false\n    slug: false\n    updated: false\n    comments: false\n    link: false\n    permalink: false\n    excerpt: false\n    categories: false\n    tags: true\n```\n我们只需要在尾部添加：\n```\ndeploy:\n  type: git\n  repository: https://github.com/MaxieLj/MaxieLj.github.io.git\n  branch: master\n```\n\n然后我们运行\n\n    $ hexo g\n生成静态文件\n然后推送到github\n\n    $ hexo d\n然后访问youname.github.io就可以看到生成的静态页面了\n当然我们一般是在本地调试好再用 hexo d推送到github\n\n\n  [1]: https://git-scm.com/downloads\n  [2]: https://nodejs.org/en/\n  [3]: http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000","source":"_posts/hexo-git-github搭建博客.md","raw":"---\ntitle: hexo git github搭建博客\ndate: 2016-01-02 21:48:07\ntags: hexo\ntoc: true\ncategories: hexo\n---\n\n------\n\n\n开始\n--\n\n**\n需求环境\n 1. git [git下载地址][1]\n 2. node.js [node.js下载地址][2]\n\n两个安装都是一路下一步\n## 验证软件正确安装 ##\n\n    git --version\n    node -v\n    npm -v\n如果显示版本信息，怎安装成功。\n## 安装hexo ##\n在这里如果被墙的可以使用淘宝镜像cnpm 具体怎么操作可以自行百度，这里不多做解释。\n不过一般不会被墙，我使用npm。运行下边的命令安装hexo：\n被墙请使用命令：\n\n    npm install -g cnpm --registry=https://registry.npm.taobao.org\n\n以下是没有被墙的命令，被墙把npm换成cnpm即可。安装hexo\n\n    npm install hexo-cli -g\n\n安装完成后，验证是否安装成功。\n\n    hexo -v\n新建文件夹yourblog,输入命令\n\n    $ hexo init blog\n    $ cd blog\n新建博客\n\n    $ hexo new \"Hello Hexo\"\n生成静态页面\n\n    $ hexo generate\n运行服务\n\n    $ hexo server\n\n然后打开浏览器输入 localhost:4000 即可访问本地静态页面。\n\n\n## 接下来我们把本地静态页面PUSH到github ##\n\n - 首先你要有github账号。\n - 新建一个github.io的库\n - 设置本地github配置参数\n - 经本地静态页面push到github\n\n\n----------\n **github设置**\n\n新建github账号就不在这里陈述了，如果有同学不会使用git将代码push到github的话可以参考 [廖雪峰的官网][3]\n我们来直接进行第二不，创建一个github.io库。\n首先登陆我们的github账号点击`new repository`,然后输入youname.github.io\n**git设置**\n设置git配置信息\n\n\n    $ git config --global user.name \"你的用户名\"\n    $ git config --global user.email \"你的邮箱\"\n    \n\n**hexo 设置**\n    安装hexo git插件\n\n    npm install hexo-deployer-git --save\n\n然后打开博客根目录的_config.yml文件\n大致内容是这个样子的\n\n```\n# Hexo Configuration\n## Docs: https://hexo.io/docs/configuration.html\n## Source: https://github.com/hexojs/hexo/\n\n# Site\ntitle: 和女票抢可乐\nsubtitle:\ndescription:\nauthor: MaxieLj\nlanguage:\ntimezone:\n\n# URL\n## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'\nurl: http://yoursite.com\nroot: /\npermalink: :year/:month/:day/:title/\npermalink_defaults:\n\n# Directory\nsource_dir: source\npublic_dir: public\ntag_dir: tags\narchive_dir: archives\ncategory_dir: categories\ncode_dir: downloads/code\ni18n_dir: :lang\nskip_render:\n\n# Writing\nnew_post_name: :title.md # File name of new posts\ndefault_layout: post\ntitlecase: false # Transform title into titlecase\nexternal_link: true # Open external links in new tab\nfilename_case: 0\nrender_drafts: false\npost_asset_folder: false\nrelative_link: false\nfuture: true\nhighlight:\n  enable: true\n  line_number: true\n  auto_detect: false\n  tab_replace:\n\n# Category & Tag\ndefault_category: uncategorized\ncategory_map:\ntag_map:\n\n# Date / Time format\n## Hexo uses Moment.js to parse and display date\n## You can customize the date format as defined in\n## http://momentjs.com/docs/#/displaying/format/\ndate_format: YYYY-MM-DD\ntime_format: HH:mm:ss\n\n# Pagination\n## Set per_page to 0 to disable pagination\nper_page: 10\npagination_dir: page\n\n# Extensions\n## Plugins: https://hexo.io/plugins/\n## Themes: https://hexo.io/themes/\ntheme: yilia\n\n# Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n  repository: https://github.com/MaxieLj/MaxieLj.github.io.git\n  branch: master\n\njsonContent:\n  meta: false\n  pages: false\n  posts:\n    title: true\n    date: true\n    path: true\n    text: true\n    raw: false\n    content: false\n    slug: false\n    updated: false\n    comments: false\n    link: false\n    permalink: false\n    excerpt: false\n    categories: false\n    tags: true\n```\n我们只需要在尾部添加：\n```\ndeploy:\n  type: git\n  repository: https://github.com/MaxieLj/MaxieLj.github.io.git\n  branch: master\n```\n\n然后我们运行\n\n    $ hexo g\n生成静态文件\n然后推送到github\n\n    $ hexo d\n然后访问youname.github.io就可以看到生成的静态页面了\n当然我们一般是在本地调试好再用 hexo d推送到github\n\n\n  [1]: https://git-scm.com/downloads\n  [2]: https://nodejs.org/en/\n  [3]: http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000","slug":"hexo-git-github搭建博客","published":1,"updated":"2019-02-21T03:49:34.706Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjswwkdpf0014g7wwkljgei97","content":"<hr>\n<h2 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h2><p>**<br>需求环境</p>\n<ol>\n<li>git <a href=\"https://git-scm.com/downloads\" target=\"_blank\" rel=\"noopener\">git下载地址</a></li>\n<li>node.js <a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"noopener\">node.js下载地址</a></li>\n</ol>\n<p>两个安装都是一路下一步</p>\n<h2 id=\"验证软件正确安装\"><a href=\"#验证软件正确安装\" class=\"headerlink\" title=\"验证软件正确安装\"></a>验证软件正确安装</h2><pre><code>git --version\nnode -v\nnpm -v\n</code></pre><p>如果显示版本信息，怎安装成功。</p>\n<h2 id=\"安装hexo\"><a href=\"#安装hexo\" class=\"headerlink\" title=\"安装hexo\"></a>安装hexo</h2><p>在这里如果被墙的可以使用淘宝镜像cnpm 具体怎么操作可以自行百度，这里不多做解释。<br>不过一般不会被墙，我使用npm。运行下边的命令安装hexo：<br>被墙请使用命令：</p>\n<pre><code>npm install -g cnpm --registry=https://registry.npm.taobao.org\n</code></pre><p>以下是没有被墙的命令，被墙把npm换成cnpm即可。安装hexo</p>\n<pre><code>npm install hexo-cli -g\n</code></pre><p>安装完成后，验证是否安装成功。</p>\n<pre><code>hexo -v\n</code></pre><p>新建文件夹yourblog,输入命令</p>\n<pre><code>$ hexo init blog\n$ cd blog\n</code></pre><p>新建博客</p>\n<pre><code>$ hexo new &quot;Hello Hexo&quot;\n</code></pre><p>生成静态页面</p>\n<pre><code>$ hexo generate\n</code></pre><p>运行服务</p>\n<pre><code>$ hexo server\n</code></pre><p>然后打开浏览器输入 localhost:4000 即可访问本地静态页面。</p>\n<h2 id=\"接下来我们把本地静态页面PUSH到github\"><a href=\"#接下来我们把本地静态页面PUSH到github\" class=\"headerlink\" title=\"接下来我们把本地静态页面PUSH到github\"></a>接下来我们把本地静态页面PUSH到github</h2><ul>\n<li>首先你要有github账号。</li>\n<li>新建一个github.io的库</li>\n<li>设置本地github配置参数</li>\n<li>经本地静态页面push到github</li>\n</ul>\n<hr>\n<p> <strong>github设置</strong></p>\n<p>新建github账号就不在这里陈述了，如果有同学不会使用git将代码push到github的话可以参考 <a href=\"http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000\" target=\"_blank\" rel=\"noopener\">廖雪峰的官网</a><br>我们来直接进行第二不，创建一个github.io库。<br>首先登陆我们的github账号点击<code>new repository</code>,然后输入youname.github.io<br><strong>git设置</strong><br>设置git配置信息</p>\n<pre><code>$ git config --global user.name &quot;你的用户名&quot;\n$ git config --global user.email &quot;你的邮箱&quot;\n</code></pre><p><strong>hexo 设置</strong><br>    安装hexo git插件</p>\n<pre><code>npm install hexo-deployer-git --save\n</code></pre><p>然后打开博客根目录的_config.yml文件<br>大致内容是这个样子的</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># Hexo Configuration</span></div><div class=\"line\"><span class=\"comment\">## Docs: https://hexo.io/docs/configuration.html</span></div><div class=\"line\"><span class=\"comment\">## Source: https://github.com/hexojs/hexo/</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Site</span></div><div class=\"line\"><span class=\"attr\">title:</span> 和女票抢可乐</div><div class=\"line\"><span class=\"attr\">subtitle:</span></div><div class=\"line\"><span class=\"attr\">description:</span></div><div class=\"line\"><span class=\"attr\">author:</span> MaxieLj</div><div class=\"line\"><span class=\"attr\">language:</span></div><div class=\"line\"><span class=\"attr\">timezone:</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># URL</span></div><div class=\"line\"><span class=\"comment\">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></div><div class=\"line\"><span class=\"attr\">url:</span> http://yoursite.com</div><div class=\"line\"><span class=\"attr\">root:</span> /</div><div class=\"line\"><span class=\"attr\">permalink:</span> :year/:month/:day/:title/</div><div class=\"line\"><span class=\"attr\">permalink_defaults:</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Directory</span></div><div class=\"line\"><span class=\"attr\">source_dir:</span> source</div><div class=\"line\"><span class=\"attr\">public_dir:</span> public</div><div class=\"line\"><span class=\"attr\">tag_dir:</span> tags</div><div class=\"line\"><span class=\"attr\">archive_dir:</span> archives</div><div class=\"line\"><span class=\"attr\">category_dir:</span> categories</div><div class=\"line\"><span class=\"attr\">code_dir:</span> downloads/code</div><div class=\"line\"><span class=\"attr\">i18n_dir:</span> :lang</div><div class=\"line\"><span class=\"attr\">skip_render:</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Writing</span></div><div class=\"line\"><span class=\"attr\">new_post_name:</span> :title.md <span class=\"comment\"># File name of new posts</span></div><div class=\"line\"><span class=\"attr\">default_layout:</span> post</div><div class=\"line\"><span class=\"attr\">titlecase:</span> <span class=\"literal\">false</span> <span class=\"comment\"># Transform title into titlecase</span></div><div class=\"line\"><span class=\"attr\">external_link:</span> <span class=\"literal\">true</span> <span class=\"comment\"># Open external links in new tab</span></div><div class=\"line\"><span class=\"attr\">filename_case:</span> <span class=\"number\">0</span></div><div class=\"line\"><span class=\"attr\">render_drafts:</span> <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"attr\">post_asset_folder:</span> <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"attr\">relative_link:</span> <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"attr\">future:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"attr\">highlight:</span></div><div class=\"line\"><span class=\"attr\">  enable:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"attr\">  line_number:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"attr\">  auto_detect:</span> <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"attr\">  tab_replace:</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Category &amp; Tag</span></div><div class=\"line\"><span class=\"attr\">default_category:</span> uncategorized</div><div class=\"line\"><span class=\"attr\">category_map:</span></div><div class=\"line\"><span class=\"attr\">tag_map:</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Date / Time format</span></div><div class=\"line\"><span class=\"comment\">## Hexo uses Moment.js to parse and display date</span></div><div class=\"line\"><span class=\"comment\">## You can customize the date format as defined in</span></div><div class=\"line\"><span class=\"comment\">## http://momentjs.com/docs/#/displaying/format/</span></div><div class=\"line\"><span class=\"attr\">date_format:</span> YYYY-MM-DD</div><div class=\"line\"><span class=\"attr\">time_format:</span> HH:mm:ss</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Pagination</span></div><div class=\"line\"><span class=\"comment\">## Set per_page to 0 to disable pagination</span></div><div class=\"line\"><span class=\"attr\">per_page:</span> <span class=\"number\">10</span></div><div class=\"line\"><span class=\"attr\">pagination_dir:</span> page</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Extensions</span></div><div class=\"line\"><span class=\"comment\">## Plugins: https://hexo.io/plugins/</span></div><div class=\"line\"><span class=\"comment\">## Themes: https://hexo.io/themes/</span></div><div class=\"line\"><span class=\"attr\">theme:</span> yilia</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Deployment</span></div><div class=\"line\"><span class=\"comment\">## Docs: https://hexo.io/docs/deployment.html</span></div><div class=\"line\"><span class=\"attr\">deploy:</span></div><div class=\"line\"><span class=\"attr\">  type:</span> git</div><div class=\"line\"><span class=\"attr\">  repository:</span> https://github.com/MaxieLj/MaxieLj.github.io.git</div><div class=\"line\"><span class=\"attr\">  branch:</span> master</div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">jsonContent:</span></div><div class=\"line\"><span class=\"attr\">  meta:</span> <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"attr\">  pages:</span> <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"attr\">  posts:</span></div><div class=\"line\"><span class=\"attr\">    title:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"attr\">    date:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"attr\">    path:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"attr\">    text:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"attr\">    raw:</span> <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"attr\">    content:</span> <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"attr\">    slug:</span> <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"attr\">    updated:</span> <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"attr\">    comments:</span> <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"attr\">    link:</span> <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"attr\">    permalink:</span> <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"attr\">    excerpt:</span> <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"attr\">    categories:</span> <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"attr\">    tags:</span> <span class=\"literal\">true</span></div></pre></td></tr></table></figure>\n<p>我们只需要在尾部添加：<br><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">deploy</span>:</div><div class=\"line\">  <span class=\"attribute\">type</span>: git</div><div class=\"line\">  <span class=\"attribute\">repository</span>: <span class=\"attribute\">https</span>:<span class=\"comment\">//github.com/MaxieLj/MaxieLj.github.io.git</span></div><div class=\"line\">  <span class=\"attribute\">branch</span>: master</div></pre></td></tr></table></figure></p>\n<p>然后我们运行</p>\n<pre><code>$ hexo g\n</code></pre><p>生成静态文件<br>然后推送到github</p>\n<pre><code>$ hexo d\n</code></pre><p>然后访问youname.github.io就可以看到生成的静态页面了<br>当然我们一般是在本地调试好再用 hexo d推送到github</p>\n","site":{"data":{}},"excerpt":"","more":"<hr>\n<h2 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h2><p>**<br>需求环境</p>\n<ol>\n<li>git <a href=\"https://git-scm.com/downloads\" target=\"_blank\" rel=\"noopener\">git下载地址</a></li>\n<li>node.js <a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"noopener\">node.js下载地址</a></li>\n</ol>\n<p>两个安装都是一路下一步</p>\n<h2 id=\"验证软件正确安装\"><a href=\"#验证软件正确安装\" class=\"headerlink\" title=\"验证软件正确安装\"></a>验证软件正确安装</h2><pre><code>git --version\nnode -v\nnpm -v\n</code></pre><p>如果显示版本信息，怎安装成功。</p>\n<h2 id=\"安装hexo\"><a href=\"#安装hexo\" class=\"headerlink\" title=\"安装hexo\"></a>安装hexo</h2><p>在这里如果被墙的可以使用淘宝镜像cnpm 具体怎么操作可以自行百度，这里不多做解释。<br>不过一般不会被墙，我使用npm。运行下边的命令安装hexo：<br>被墙请使用命令：</p>\n<pre><code>npm install -g cnpm --registry=https://registry.npm.taobao.org\n</code></pre><p>以下是没有被墙的命令，被墙把npm换成cnpm即可。安装hexo</p>\n<pre><code>npm install hexo-cli -g\n</code></pre><p>安装完成后，验证是否安装成功。</p>\n<pre><code>hexo -v\n</code></pre><p>新建文件夹yourblog,输入命令</p>\n<pre><code>$ hexo init blog\n$ cd blog\n</code></pre><p>新建博客</p>\n<pre><code>$ hexo new &quot;Hello Hexo&quot;\n</code></pre><p>生成静态页面</p>\n<pre><code>$ hexo generate\n</code></pre><p>运行服务</p>\n<pre><code>$ hexo server\n</code></pre><p>然后打开浏览器输入 localhost:4000 即可访问本地静态页面。</p>\n<h2 id=\"接下来我们把本地静态页面PUSH到github\"><a href=\"#接下来我们把本地静态页面PUSH到github\" class=\"headerlink\" title=\"接下来我们把本地静态页面PUSH到github\"></a>接下来我们把本地静态页面PUSH到github</h2><ul>\n<li>首先你要有github账号。</li>\n<li>新建一个github.io的库</li>\n<li>设置本地github配置参数</li>\n<li>经本地静态页面push到github</li>\n</ul>\n<hr>\n<p> <strong>github设置</strong></p>\n<p>新建github账号就不在这里陈述了，如果有同学不会使用git将代码push到github的话可以参考 <a href=\"http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000\" target=\"_blank\" rel=\"noopener\">廖雪峰的官网</a><br>我们来直接进行第二不，创建一个github.io库。<br>首先登陆我们的github账号点击<code>new repository</code>,然后输入youname.github.io<br><strong>git设置</strong><br>设置git配置信息</p>\n<pre><code>$ git config --global user.name &quot;你的用户名&quot;\n$ git config --global user.email &quot;你的邮箱&quot;\n</code></pre><p><strong>hexo 设置</strong><br>    安装hexo git插件</p>\n<pre><code>npm install hexo-deployer-git --save\n</code></pre><p>然后打开博客根目录的_config.yml文件<br>大致内容是这个样子的</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># Hexo Configuration</span></div><div class=\"line\"><span class=\"comment\">## Docs: https://hexo.io/docs/configuration.html</span></div><div class=\"line\"><span class=\"comment\">## Source: https://github.com/hexojs/hexo/</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Site</span></div><div class=\"line\"><span class=\"attr\">title:</span> 和女票抢可乐</div><div class=\"line\"><span class=\"attr\">subtitle:</span></div><div class=\"line\"><span class=\"attr\">description:</span></div><div class=\"line\"><span class=\"attr\">author:</span> MaxieLj</div><div class=\"line\"><span class=\"attr\">language:</span></div><div class=\"line\"><span class=\"attr\">timezone:</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># URL</span></div><div class=\"line\"><span class=\"comment\">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></div><div class=\"line\"><span class=\"attr\">url:</span> http://yoursite.com</div><div class=\"line\"><span class=\"attr\">root:</span> /</div><div class=\"line\"><span class=\"attr\">permalink:</span> :year/:month/:day/:title/</div><div class=\"line\"><span class=\"attr\">permalink_defaults:</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Directory</span></div><div class=\"line\"><span class=\"attr\">source_dir:</span> source</div><div class=\"line\"><span class=\"attr\">public_dir:</span> public</div><div class=\"line\"><span class=\"attr\">tag_dir:</span> tags</div><div class=\"line\"><span class=\"attr\">archive_dir:</span> archives</div><div class=\"line\"><span class=\"attr\">category_dir:</span> categories</div><div class=\"line\"><span class=\"attr\">code_dir:</span> downloads/code</div><div class=\"line\"><span class=\"attr\">i18n_dir:</span> :lang</div><div class=\"line\"><span class=\"attr\">skip_render:</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Writing</span></div><div class=\"line\"><span class=\"attr\">new_post_name:</span> :title.md <span class=\"comment\"># File name of new posts</span></div><div class=\"line\"><span class=\"attr\">default_layout:</span> post</div><div class=\"line\"><span class=\"attr\">titlecase:</span> <span class=\"literal\">false</span> <span class=\"comment\"># Transform title into titlecase</span></div><div class=\"line\"><span class=\"attr\">external_link:</span> <span class=\"literal\">true</span> <span class=\"comment\"># Open external links in new tab</span></div><div class=\"line\"><span class=\"attr\">filename_case:</span> <span class=\"number\">0</span></div><div class=\"line\"><span class=\"attr\">render_drafts:</span> <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"attr\">post_asset_folder:</span> <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"attr\">relative_link:</span> <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"attr\">future:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"attr\">highlight:</span></div><div class=\"line\"><span class=\"attr\">  enable:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"attr\">  line_number:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"attr\">  auto_detect:</span> <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"attr\">  tab_replace:</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Category &amp; Tag</span></div><div class=\"line\"><span class=\"attr\">default_category:</span> uncategorized</div><div class=\"line\"><span class=\"attr\">category_map:</span></div><div class=\"line\"><span class=\"attr\">tag_map:</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Date / Time format</span></div><div class=\"line\"><span class=\"comment\">## Hexo uses Moment.js to parse and display date</span></div><div class=\"line\"><span class=\"comment\">## You can customize the date format as defined in</span></div><div class=\"line\"><span class=\"comment\">## http://momentjs.com/docs/#/displaying/format/</span></div><div class=\"line\"><span class=\"attr\">date_format:</span> YYYY-MM-DD</div><div class=\"line\"><span class=\"attr\">time_format:</span> HH:mm:ss</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Pagination</span></div><div class=\"line\"><span class=\"comment\">## Set per_page to 0 to disable pagination</span></div><div class=\"line\"><span class=\"attr\">per_page:</span> <span class=\"number\">10</span></div><div class=\"line\"><span class=\"attr\">pagination_dir:</span> page</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Extensions</span></div><div class=\"line\"><span class=\"comment\">## Plugins: https://hexo.io/plugins/</span></div><div class=\"line\"><span class=\"comment\">## Themes: https://hexo.io/themes/</span></div><div class=\"line\"><span class=\"attr\">theme:</span> yilia</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Deployment</span></div><div class=\"line\"><span class=\"comment\">## Docs: https://hexo.io/docs/deployment.html</span></div><div class=\"line\"><span class=\"attr\">deploy:</span></div><div class=\"line\"><span class=\"attr\">  type:</span> git</div><div class=\"line\"><span class=\"attr\">  repository:</span> https://github.com/MaxieLj/MaxieLj.github.io.git</div><div class=\"line\"><span class=\"attr\">  branch:</span> master</div><div class=\"line\"></div><div class=\"line\"><span class=\"attr\">jsonContent:</span></div><div class=\"line\"><span class=\"attr\">  meta:</span> <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"attr\">  pages:</span> <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"attr\">  posts:</span></div><div class=\"line\"><span class=\"attr\">    title:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"attr\">    date:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"attr\">    path:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"attr\">    text:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"attr\">    raw:</span> <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"attr\">    content:</span> <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"attr\">    slug:</span> <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"attr\">    updated:</span> <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"attr\">    comments:</span> <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"attr\">    link:</span> <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"attr\">    permalink:</span> <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"attr\">    excerpt:</span> <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"attr\">    categories:</span> <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"attr\">    tags:</span> <span class=\"literal\">true</span></div></pre></td></tr></table></figure>\n<p>我们只需要在尾部添加：<br><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">deploy</span>:</div><div class=\"line\">  <span class=\"attribute\">type</span>: git</div><div class=\"line\">  <span class=\"attribute\">repository</span>: <span class=\"attribute\">https</span>:<span class=\"comment\">//github.com/MaxieLj/MaxieLj.github.io.git</span></div><div class=\"line\">  <span class=\"attribute\">branch</span>: master</div></pre></td></tr></table></figure></p>\n<p>然后我们运行</p>\n<pre><code>$ hexo g\n</code></pre><p>生成静态文件<br>然后推送到github</p>\n<pre><code>$ hexo d\n</code></pre><p>然后访问youname.github.io就可以看到生成的静态页面了<br>当然我们一般是在本地调试好再用 hexo d推送到github</p>\n"},{"layout":"dratf","title":"http各个状态码含义","date":"2017-02-12T09:07:24.000Z","toc":true,"_content":"\n## 简介\n- 200请求成功\n- 301资源被转移\n- 404请求资源不存在\n- 500内部服务错误\n## 分类\n\n| 状态码 | 含义|\n|-------|-----|\n|1xx|信息交换，指服务器收到请求，需要请求者继续操作，常见于ws协议|\n|2xx|操作成功并且被处理，很常见|\n|3xx|资源被转移|\n|4xx|客户端错误，包含语法错误以及无法完成的请求|\n|5xx|服务器错误，指服务器在处理过程中发生错误|\n\n## 详细介绍\n\n| 状态码| 含义 |\n|------|------|\n|100|继续，客户端应该继续请求|\n|101|切换协议，服务端根据客户端的请求切换协议。但是只能切换到更高的协议，例如切换到http新版协议|\n|-|-|\n|**200**|请求成功|\n|201|已创建。请求成功，并创建了资源|\n|202|已接收。已接收请求，但是处理仍未完成|\n|203|非授权信息。请求成功，但是返回的meta信息不在原始的服务器，而是一个副本|\n|204|无内容。服务器成功处理，但未返回内容。|\n|205|充值内容。服务器处理成功，用户应该充值文档视图。可通过此返回码清楚浏览器的表单域|\n|206|部分内容。服务器成功处理了部分get请求|\n|-|-|\n|300|多种选择。请求的资源可包括多个位置，相应可返回一个资源特征与地址的列表的列表用于用户终端选择|\n|**301**|资源被永久移动。请求的资源已被永久的移动到新的URI，返回的信息包括新的URI，浏览器会自动定到新的URI。今后任何新的请求都应使用新的URI代替|\n|**302**|临时移动。与301类似，但是资源资源只是被临时移动。客户端应继续使用URI|\n|303|查看其它地址，与301类似。|\n|**304**|未修改。所请求的资源未修改，不返回任何资源。这种请求一般发生在终端缓存请求数据状况下发生，请求时头信息会指出客户端希望返回指定日期修改之后的资源。如果返回304终端一般会加载本地缓存资源|\n|305|使用代理。所请求的资源必须通过代理访问|\n|-|-|\n|400|客户端请求语法错误，一般参数校验错误返回此状态码|\n|401|要求请求用户进行身份校验|\n|402|保留状态码|\n|403|接受到客户端的请求，但是无法执行。一般指用户权限不够|\n|404|服务器无法找到客户端所请求资源|\n|405|客户端锁清秋的方法被禁止|\n|406|服务器无法根据客户端请求的内容特性完成请求|\n|407|请求要求代理身份认证，与401类似，单请求者应当使用代理进行授权|\n|408|服务端等待客户端发送的请求时间过长，超时|\n|414|请求的URI过长，服务器无法处理|\n|415|服务端无法处理附带的媒体格式|\n|-|-|\n|**500**|服务器内部错误，无法完成请求|\n|501|服务器不支持请求功能，无法完成请求|\n|**502**|作为网关或者代理工作的服务器尝试执行请求时，从远程服务器接收到了一个无效的响应|\n|503|服务器超载或系统维护，暂时无法处理客户端的请求。延时的长度可包含在服务器的Retry-after头信息中|\n|**504**|充当网关的服务器，无法及时从远端服务器获取请求|\n|**505**|服务器不支持当前请求的HTTP协议，无法完成处理|","source":"_posts/http各个状态码含义.md","raw":"---\nlayout: dratf\ntitle: http各个状态码含义\ndate: 2017-02-12 17:07:24\ntags: http\ntoc: true\ncategories: http\n---\n\n## 简介\n- 200请求成功\n- 301资源被转移\n- 404请求资源不存在\n- 500内部服务错误\n## 分类\n\n| 状态码 | 含义|\n|-------|-----|\n|1xx|信息交换，指服务器收到请求，需要请求者继续操作，常见于ws协议|\n|2xx|操作成功并且被处理，很常见|\n|3xx|资源被转移|\n|4xx|客户端错误，包含语法错误以及无法完成的请求|\n|5xx|服务器错误，指服务器在处理过程中发生错误|\n\n## 详细介绍\n\n| 状态码| 含义 |\n|------|------|\n|100|继续，客户端应该继续请求|\n|101|切换协议，服务端根据客户端的请求切换协议。但是只能切换到更高的协议，例如切换到http新版协议|\n|-|-|\n|**200**|请求成功|\n|201|已创建。请求成功，并创建了资源|\n|202|已接收。已接收请求，但是处理仍未完成|\n|203|非授权信息。请求成功，但是返回的meta信息不在原始的服务器，而是一个副本|\n|204|无内容。服务器成功处理，但未返回内容。|\n|205|充值内容。服务器处理成功，用户应该充值文档视图。可通过此返回码清楚浏览器的表单域|\n|206|部分内容。服务器成功处理了部分get请求|\n|-|-|\n|300|多种选择。请求的资源可包括多个位置，相应可返回一个资源特征与地址的列表的列表用于用户终端选择|\n|**301**|资源被永久移动。请求的资源已被永久的移动到新的URI，返回的信息包括新的URI，浏览器会自动定到新的URI。今后任何新的请求都应使用新的URI代替|\n|**302**|临时移动。与301类似，但是资源资源只是被临时移动。客户端应继续使用URI|\n|303|查看其它地址，与301类似。|\n|**304**|未修改。所请求的资源未修改，不返回任何资源。这种请求一般发生在终端缓存请求数据状况下发生，请求时头信息会指出客户端希望返回指定日期修改之后的资源。如果返回304终端一般会加载本地缓存资源|\n|305|使用代理。所请求的资源必须通过代理访问|\n|-|-|\n|400|客户端请求语法错误，一般参数校验错误返回此状态码|\n|401|要求请求用户进行身份校验|\n|402|保留状态码|\n|403|接受到客户端的请求，但是无法执行。一般指用户权限不够|\n|404|服务器无法找到客户端所请求资源|\n|405|客户端锁清秋的方法被禁止|\n|406|服务器无法根据客户端请求的内容特性完成请求|\n|407|请求要求代理身份认证，与401类似，单请求者应当使用代理进行授权|\n|408|服务端等待客户端发送的请求时间过长，超时|\n|414|请求的URI过长，服务器无法处理|\n|415|服务端无法处理附带的媒体格式|\n|-|-|\n|**500**|服务器内部错误，无法完成请求|\n|501|服务器不支持请求功能，无法完成请求|\n|**502**|作为网关或者代理工作的服务器尝试执行请求时，从远程服务器接收到了一个无效的响应|\n|503|服务器超载或系统维护，暂时无法处理客户端的请求。延时的长度可包含在服务器的Retry-after头信息中|\n|**504**|充当网关的服务器，无法及时从远端服务器获取请求|\n|**505**|服务器不支持当前请求的HTTP协议，无法完成处理|","slug":"http各个状态码含义","published":1,"updated":"2019-02-21T03:49:34.707Z","comments":1,"photos":[],"link":"","_id":"cjswwkdpg0018g7wwub01434s","content":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><ul>\n<li>200请求成功</li>\n<li>301资源被转移</li>\n<li>404请求资源不存在</li>\n<li>500内部服务错误<h2 id=\"分类\"><a href=\"#分类\" class=\"headerlink\" title=\"分类\"></a>分类</h2></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>状态码</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1xx</td>\n<td>信息交换，指服务器收到请求，需要请求者继续操作，常见于ws协议</td>\n</tr>\n<tr>\n<td>2xx</td>\n<td>操作成功并且被处理，很常见</td>\n</tr>\n<tr>\n<td>3xx</td>\n<td>资源被转移</td>\n</tr>\n<tr>\n<td>4xx</td>\n<td>客户端错误，包含语法错误以及无法完成的请求</td>\n</tr>\n<tr>\n<td>5xx</td>\n<td>服务器错误，指服务器在处理过程中发生错误</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"详细介绍\"><a href=\"#详细介绍\" class=\"headerlink\" title=\"详细介绍\"></a>详细介绍</h2><table>\n<thead>\n<tr>\n<th>状态码</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>100</td>\n<td>继续，客户端应该继续请求</td>\n</tr>\n<tr>\n<td>101</td>\n<td>切换协议，服务端根据客户端的请求切换协议。但是只能切换到更高的协议，例如切换到http新版协议</td>\n</tr>\n<tr>\n<td>-</td>\n<td>-</td>\n</tr>\n<tr>\n<td><strong>200</strong></td>\n<td>请求成功</td>\n</tr>\n<tr>\n<td>201</td>\n<td>已创建。请求成功，并创建了资源</td>\n</tr>\n<tr>\n<td>202</td>\n<td>已接收。已接收请求，但是处理仍未完成</td>\n</tr>\n<tr>\n<td>203</td>\n<td>非授权信息。请求成功，但是返回的meta信息不在原始的服务器，而是一个副本</td>\n</tr>\n<tr>\n<td>204</td>\n<td>无内容。服务器成功处理，但未返回内容。</td>\n</tr>\n<tr>\n<td>205</td>\n<td>充值内容。服务器处理成功，用户应该充值文档视图。可通过此返回码清楚浏览器的表单域</td>\n</tr>\n<tr>\n<td>206</td>\n<td>部分内容。服务器成功处理了部分get请求</td>\n</tr>\n<tr>\n<td>-</td>\n<td>-</td>\n</tr>\n<tr>\n<td>300</td>\n<td>多种选择。请求的资源可包括多个位置，相应可返回一个资源特征与地址的列表的列表用于用户终端选择</td>\n</tr>\n<tr>\n<td><strong>301</strong></td>\n<td>资源被永久移动。请求的资源已被永久的移动到新的URI，返回的信息包括新的URI，浏览器会自动定到新的URI。今后任何新的请求都应使用新的URI代替</td>\n</tr>\n<tr>\n<td><strong>302</strong></td>\n<td>临时移动。与301类似，但是资源资源只是被临时移动。客户端应继续使用URI</td>\n</tr>\n<tr>\n<td>303</td>\n<td>查看其它地址，与301类似。</td>\n</tr>\n<tr>\n<td><strong>304</strong></td>\n<td>未修改。所请求的资源未修改，不返回任何资源。这种请求一般发生在终端缓存请求数据状况下发生，请求时头信息会指出客户端希望返回指定日期修改之后的资源。如果返回304终端一般会加载本地缓存资源</td>\n</tr>\n<tr>\n<td>305</td>\n<td>使用代理。所请求的资源必须通过代理访问</td>\n</tr>\n<tr>\n<td>-</td>\n<td>-</td>\n</tr>\n<tr>\n<td>400</td>\n<td>客户端请求语法错误，一般参数校验错误返回此状态码</td>\n</tr>\n<tr>\n<td>401</td>\n<td>要求请求用户进行身份校验</td>\n</tr>\n<tr>\n<td>402</td>\n<td>保留状态码</td>\n</tr>\n<tr>\n<td>403</td>\n<td>接受到客户端的请求，但是无法执行。一般指用户权限不够</td>\n</tr>\n<tr>\n<td>404</td>\n<td>服务器无法找到客户端所请求资源</td>\n</tr>\n<tr>\n<td>405</td>\n<td>客户端锁清秋的方法被禁止</td>\n</tr>\n<tr>\n<td>406</td>\n<td>服务器无法根据客户端请求的内容特性完成请求</td>\n</tr>\n<tr>\n<td>407</td>\n<td>请求要求代理身份认证，与401类似，单请求者应当使用代理进行授权</td>\n</tr>\n<tr>\n<td>408</td>\n<td>服务端等待客户端发送的请求时间过长，超时</td>\n</tr>\n<tr>\n<td>414</td>\n<td>请求的URI过长，服务器无法处理</td>\n</tr>\n<tr>\n<td>415</td>\n<td>服务端无法处理附带的媒体格式</td>\n</tr>\n<tr>\n<td>-</td>\n<td>-</td>\n</tr>\n<tr>\n<td><strong>500</strong></td>\n<td>服务器内部错误，无法完成请求</td>\n</tr>\n<tr>\n<td>501</td>\n<td>服务器不支持请求功能，无法完成请求</td>\n</tr>\n<tr>\n<td><strong>502</strong></td>\n<td>作为网关或者代理工作的服务器尝试执行请求时，从远程服务器接收到了一个无效的响应</td>\n</tr>\n<tr>\n<td>503</td>\n<td>服务器超载或系统维护，暂时无法处理客户端的请求。延时的长度可包含在服务器的Retry-after头信息中</td>\n</tr>\n<tr>\n<td><strong>504</strong></td>\n<td>充当网关的服务器，无法及时从远端服务器获取请求</td>\n</tr>\n<tr>\n<td><strong>505</strong></td>\n<td>服务器不支持当前请求的HTTP协议，无法完成处理</td>\n</tr>\n</tbody>\n</table>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><ul>\n<li>200请求成功</li>\n<li>301资源被转移</li>\n<li>404请求资源不存在</li>\n<li>500内部服务错误<h2 id=\"分类\"><a href=\"#分类\" class=\"headerlink\" title=\"分类\"></a>分类</h2></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>状态码</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1xx</td>\n<td>信息交换，指服务器收到请求，需要请求者继续操作，常见于ws协议</td>\n</tr>\n<tr>\n<td>2xx</td>\n<td>操作成功并且被处理，很常见</td>\n</tr>\n<tr>\n<td>3xx</td>\n<td>资源被转移</td>\n</tr>\n<tr>\n<td>4xx</td>\n<td>客户端错误，包含语法错误以及无法完成的请求</td>\n</tr>\n<tr>\n<td>5xx</td>\n<td>服务器错误，指服务器在处理过程中发生错误</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"详细介绍\"><a href=\"#详细介绍\" class=\"headerlink\" title=\"详细介绍\"></a>详细介绍</h2><table>\n<thead>\n<tr>\n<th>状态码</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>100</td>\n<td>继续，客户端应该继续请求</td>\n</tr>\n<tr>\n<td>101</td>\n<td>切换协议，服务端根据客户端的请求切换协议。但是只能切换到更高的协议，例如切换到http新版协议</td>\n</tr>\n<tr>\n<td>-</td>\n<td>-</td>\n</tr>\n<tr>\n<td><strong>200</strong></td>\n<td>请求成功</td>\n</tr>\n<tr>\n<td>201</td>\n<td>已创建。请求成功，并创建了资源</td>\n</tr>\n<tr>\n<td>202</td>\n<td>已接收。已接收请求，但是处理仍未完成</td>\n</tr>\n<tr>\n<td>203</td>\n<td>非授权信息。请求成功，但是返回的meta信息不在原始的服务器，而是一个副本</td>\n</tr>\n<tr>\n<td>204</td>\n<td>无内容。服务器成功处理，但未返回内容。</td>\n</tr>\n<tr>\n<td>205</td>\n<td>充值内容。服务器处理成功，用户应该充值文档视图。可通过此返回码清楚浏览器的表单域</td>\n</tr>\n<tr>\n<td>206</td>\n<td>部分内容。服务器成功处理了部分get请求</td>\n</tr>\n<tr>\n<td>-</td>\n<td>-</td>\n</tr>\n<tr>\n<td>300</td>\n<td>多种选择。请求的资源可包括多个位置，相应可返回一个资源特征与地址的列表的列表用于用户终端选择</td>\n</tr>\n<tr>\n<td><strong>301</strong></td>\n<td>资源被永久移动。请求的资源已被永久的移动到新的URI，返回的信息包括新的URI，浏览器会自动定到新的URI。今后任何新的请求都应使用新的URI代替</td>\n</tr>\n<tr>\n<td><strong>302</strong></td>\n<td>临时移动。与301类似，但是资源资源只是被临时移动。客户端应继续使用URI</td>\n</tr>\n<tr>\n<td>303</td>\n<td>查看其它地址，与301类似。</td>\n</tr>\n<tr>\n<td><strong>304</strong></td>\n<td>未修改。所请求的资源未修改，不返回任何资源。这种请求一般发生在终端缓存请求数据状况下发生，请求时头信息会指出客户端希望返回指定日期修改之后的资源。如果返回304终端一般会加载本地缓存资源</td>\n</tr>\n<tr>\n<td>305</td>\n<td>使用代理。所请求的资源必须通过代理访问</td>\n</tr>\n<tr>\n<td>-</td>\n<td>-</td>\n</tr>\n<tr>\n<td>400</td>\n<td>客户端请求语法错误，一般参数校验错误返回此状态码</td>\n</tr>\n<tr>\n<td>401</td>\n<td>要求请求用户进行身份校验</td>\n</tr>\n<tr>\n<td>402</td>\n<td>保留状态码</td>\n</tr>\n<tr>\n<td>403</td>\n<td>接受到客户端的请求，但是无法执行。一般指用户权限不够</td>\n</tr>\n<tr>\n<td>404</td>\n<td>服务器无法找到客户端所请求资源</td>\n</tr>\n<tr>\n<td>405</td>\n<td>客户端锁清秋的方法被禁止</td>\n</tr>\n<tr>\n<td>406</td>\n<td>服务器无法根据客户端请求的内容特性完成请求</td>\n</tr>\n<tr>\n<td>407</td>\n<td>请求要求代理身份认证，与401类似，单请求者应当使用代理进行授权</td>\n</tr>\n<tr>\n<td>408</td>\n<td>服务端等待客户端发送的请求时间过长，超时</td>\n</tr>\n<tr>\n<td>414</td>\n<td>请求的URI过长，服务器无法处理</td>\n</tr>\n<tr>\n<td>415</td>\n<td>服务端无法处理附带的媒体格式</td>\n</tr>\n<tr>\n<td>-</td>\n<td>-</td>\n</tr>\n<tr>\n<td><strong>500</strong></td>\n<td>服务器内部错误，无法完成请求</td>\n</tr>\n<tr>\n<td>501</td>\n<td>服务器不支持请求功能，无法完成请求</td>\n</tr>\n<tr>\n<td><strong>502</strong></td>\n<td>作为网关或者代理工作的服务器尝试执行请求时，从远程服务器接收到了一个无效的响应</td>\n</tr>\n<tr>\n<td>503</td>\n<td>服务器超载或系统维护，暂时无法处理客户端的请求。延时的长度可包含在服务器的Retry-after头信息中</td>\n</tr>\n<tr>\n<td><strong>504</strong></td>\n<td>充当网关的服务器，无法及时从远端服务器获取请求</td>\n</tr>\n<tr>\n<td><strong>505</strong></td>\n<td>服务器不支持当前请求的HTTP协议，无法完成处理</td>\n</tr>\n</tbody>\n</table>\n"},{"title":"php垃圾回收","date":"2018-09-12T13:28:00.000Z","toc":true,"_content":"\nphp是如何实现内存管理的?内存管理包括内存分配、内存回收、以及内存使用优化。\n\n- 内存使用的优化\n- 垃圾回收机制\n- 底层内存分配\n\n\n## 内存使用的优化\n\n### 引用计数\n\nphp的引用中有个引用结构体\n\n\n```c\nstruct _zend_reference {\n    zend_refcondted_h gc;\n    zval              val;  指向原来的value.\n};\n```\n\n其中`zend_refcondted_h` 便是gc便是当前变量被引用的次数,这个参数会在变量回收的时候用到。\n\n\n`zend_refcondted_h` :\n\n```c\ntypedef struct _zend_refcounted_h {\n\tuint32_t         refcount;\t\t\t/* reference counter 32-bit */\n\tunion {\n\t\tstruct {\n\t\t\tZEND_ENDIAN_LOHI_3(\n\t\t\t\tzend_uchar    type,\n\t\t\t\tzend_uchar    flags,    /* used for strings & objects */\n\t\t\t\tuint16_t      gc_info)  /* keeps GC root number (or 0) and color */\n\t\t} v;\n\t\tuint32_t type_info;\n\t} u;\n} zend_refcounted_h;\n```\n\n在实际中这个结构体到底是什么样的? 具体可以举例来看。\n\n```php\n$a = 'this is string'; // zend_array (refcount = 1)  只有$a引用了zend_array\n$b = &$a; //   zend_array (refcount = 2)  $a、$b引用了zend_array\n$c = $b; // zend_array (refcount = 3)  $a、$b、$c引用了zend_array\nunset($b); // zend_array (refcount = 2)  $a、$c引用了zend_array\n```\n\n> 并不是所有的变量类型都会使用引用计数, 例如 `整形`、`浮点型`、`布尔型`、`NUll`(在php中这是一个变量类型)等采用了深拷贝,\n即只要这几种变量赋值, 就会申请一款一块内存写入一个新的变量结构（注意这里不是引用结构）,当然这些类型不会公用value。\n\n\n\n### 写时复制\n\n当然只有引用计数是不够的, 因为变量会发生赋值的情况。所以在更改某一个变量时, 会对原来的变量进行拷贝并赋值。\n\n举个栗子:\n\n```\n$foo = time();\n$bar = &$b;\n$si = $a;\n\n$c = '123';\n```\n\n具体数据结构的引用计数情况如下图:\n\n\n\n![image](/photo/img/php内存管理/写时复制.png)\n\n## 内存回收\n\n### 自动gc\n在zend数据接口中有一个gc.refount,他是自动gc的关键。\n\n在自动gc机制中,如果zval不在指向value且当前value的gc.refount为0时,会直接释放value。这种情况多发生于函数返回时（销毁所有局部变量）、变量修改时、以及unset操作的时候。\n\n\n### 垃圾回收\n\n除了自动gc,还有一种是自动gc无法处理的垃圾, 这种情况称为`循环引用`。顾名思义也就是自身内部变量引用了自身, 这种情况常出现与object和array。当我该变量zval被销毁是, 与其对应的value gc.refcount -1,\n但是因为有自身变量指向自身, 所以就陷入了一个循环:如果不销毁自身变量 value gc.refcount就无法自动gc, 只有自动gc才会销毁value。\n\n```php\n\n$a = [1];\n$a[] = &$a;\nunset($a);\n\n```\n\n![image](/photo/img/php内存管理/自身引用.png)\n\n`unset($a)`执行以后\n\n![image](/photo/img/php内存管理/释放.png)\n\n由于\b上述情况导致无法自动gc,所以需要引入另外一钟垃圾回收机制-垃圾回收器。\n现在会存在两种情况的数据需要回收：\n- 当value的gc.refcount =0 是需要回收。\n- 当value的gc.refcount 减少不等于0，但是存在循环引用时。\n\n### 回收机制\n\n当发生value gc.refcount减少时，垃圾回收机制会把可能是垃圾的value存起来， 当可能是垃圾的value到达一定数量的时候启动垃圾鉴别程序，统一处理垃圾。当然这里的value类型只有object和array。\n\n垃圾兼备程序：\n其实垃圾鉴别程序很简单，递归遍历自身value，查看是否存在指向自身的即可。\n\ncode:\ngc 初始化\n```php\nZEND_API void gc_init(void)\n{\n\tif (GC_G(buf) == NULL && GC_G(gc_enabled)) {\n\t\t//初始化buf\b内存区域，大小为sizeof(gc_root_buffer) * //GC_ROOT_BUFFER_MAX_ENTRIES\n\t\tGC_G(buf) = (gc_root_buffer*) malloc(sizeof(gc_root_buffer) * GC_ROOT_BUFFER_MAX_ENTRIES);\n\t\t//设置_zend_gc_globals.last_unused为\b\bbug入口位置\n\t\tGC_G(last_unused) = &GC_G(buf)[GC_ROOT_BUFFER_MAX_ENTRIES];\n\t\t//初始化_zend_gc_globals的参数\n\t\tgc_reset();\n\t}\n}\n```\n垃圾回收及其依赖 `_zend_gc_globals`\n\n`_zend_gc_globals`\n```c\ntypedef struct _zend_gc_globals {\n\tzend_bool         gc_enabled;\n\tzend_bool         gc_active;\n\tzend_bool         gc_full;\n\n\tgc_root_buffer   *buf;\t\t\t\t/* preallocated arrays of buffers   */\n\tgc_root_buffer    roots;\t\t\t/* list of possible roots of cycles */\n\tgc_root_buffer   *unused;\t\t\t/* list of unused buffers           */\n\tgc_root_buffer   *first_unused;\t\t/* pointer to first unused buffer   */\n\tgc_root_buffer   *last_unused;\t\t/* pointer to last unused buffer    */\n\n\tgc_root_buffer    to_free;\t\t\t/* list to free                     */\n\tgc_root_buffer   *next_to_free;\n\n\tuint32_t gc_runs;\n\tuint32_t collected;\n\n#if GC_BENCH\n\tuint32_t root_buf_length;\n\tuint32_t root_buf_peak;\n\tuint32_t zval_possible_root;\n\tuint32_t zval_buffered;\n\tuint32_t zval_remove_from_buffer;\n\tuint32_t zval_marked_grey;\n#endif\n\n\tgc_additional_buffer *additional_buffer;\n\n} zend_gc_globals;\n```\n\n- `gc_enabled` 是否使使用gc\n- `gc_active`  是否在垃圾检查的过程中\n- `gc_full` buf缓冲区是否已满\n- `*buf` 与分配用于保存可能为垃圾的value\n- `roots` 指向buf最新加入的一个可能垃圾\n- `unused` 指向第未使用的buffer\n- `*first_unused` 指向第一个没用使用buffer\n- `*last_unused` 指向buffer的尾部\n- `to_free` 等待释放的buffer\n- `gc_runs`  统计gc运行的次数\n- `collected`  统计已经释放的垃圾数\n\n\nphp垃圾回收中几个重要的颜色写在zeng_gc的备注中。\n```C\n * BLACK  (GC_BLACK)   - In use or free.\n * GREY   (GC_GREY)    - Possible member of cycle.\n * WHITE  (GC_WHITE)   - Member of garbage cycle.\n * PURPLE (GC_PURPLE)  - Possible root of cycle.\n```\n- GC_WHITE 白色表示垃圾\n- GC_PURPLE 紫色表示已放入缓冲区\n- GC_GREY 灰色表示已经进行了一次refcount的减一操作\n- GC_BLACK 黑色是默认颜色，正常\n\n\ngc过程中主要处理功能的函数`zend_gc_collect_cycles`\n\n```c\nZEND_API void ZEND_FASTCALL gc_possible_root(zend_refcounted *ref)\n{\n\tgc_root_buffer *newRoot;\n\n\tif (UNEXPECTED(CG(unclean_shutdown)) || UNEXPECTED(GC_G(gc_active))) {\n\t\treturn;\n\t}\n\n\tZEND_ASSERT(GC_TYPE(ref) == IS_ARRAY || GC_TYPE(ref) == IS_OBJECT);\n\tZEND_ASSERT(EXPECTED(GC_REF_GET_COLOR(ref) == GC_BLACK));\n\tZEND_ASSERT(!GC_ADDRESS(GC_INFO(ref)));\n\n\tGC_BENCH_INC(zval_possible_root);\n\n\tnewRoot = GC_G(unused);\n\tif (newRoot) {\n\t\tGC_G(unused) = newRoot->prev;\n\t} else if (GC_G(first_unused) != GC_G(last_unused)) {\n\t\tnewRoot = GC_G(first_unused);\n\t\tGC_G(first_unused)++;\n\t} else {\n\t\t//垃圾处理，当缓冲区满时，程序调用gc_collect_cycles函数，执行垃圾回收操作。 其中最关键的几步就是\n\t\t//如果当前处于可以gc的状态\n\t\tif (!GC_G(gc_enabled)) {\n\t\t\treturn;\n\t\t}\n\t\tGC_REFCOUNT(ref)++;\n\t\t//垃圾回收\n\t\tgc_collect_cycles();\n\t\tGC_REFCOUNT(ref)--;\n\t\tif (UNEXPECTED(GC_REFCOUNT(ref)) == 0) {\n\t\t\tzval_dtor_func(ref);\n\t\t\treturn;\n\t\t}\n\t\tif (UNEXPECTED(GC_INFO(ref))) {\n\t\t\treturn;\n\t\t}\n\t\tnewRoot = GC_G(unused);\n\t\tif (!newRoot) {\n\t\t\treturn;\n\t\t}\n\t\tGC_G(unused) = newRoot->prev;\n\t}\n\n\tGC_TRACE_SET_COLOR(ref, GC_PURPLE);\n\tGC_INFO(ref) = (newRoot - GC_G(buf)) | GC_PURPLE;\n\tnewRoot->ref = ref;\n\n\tnewRoot->next = GC_G(roots).next;\n\tnewRoot->prev = &GC_G(roots);\n\tGC_G(roots).next->prev = newRoot;\n\tGC_G(roots).next = newRoot;\n\n\tGC_BENCH_INC(zval_buffered);\n\tGC_BENCH_INC(root_buf_length);\n\tGC_BENCH_PEAK(root_buf_peak, root_buf_length);\n}\n```\n\n1. \b深度优先对对象或者数据的每一个元素的`refcount--`并将其标记为灰色\n2. 深度遍历root的每个每个变量，如果此时变量的`refcount`为0，则代表着改变量为垃圾，将其标记为垃圾，如果不为0，则将其标记为黑色（正常）。\n3. 检查roots清除标记为白色的垃圾。\n\n//TODO 垃圾回收抽出来出来写。\n\n具体代码：\n```php\nZEND_API int zend_gc_collect_cycles(void)\n{\n\tint count = 0;\n\n\tif (GC_G(roots).next != &GC_G(roots)) {\n\t\tgc_root_buffer *current, *next, *orig_next_to_free;\n\t\tzend_refcounted *p;\n\t\tgc_root_buffer to_free;\n\t\tuint32_t gc_flags = 0;\n\t\tgc_additional_buffer *additional_buffer_snapshot;\n\n\n\t\tif (GC_G(gc_active)) {\n\t\t\treturn 0;\n\t\t}\n\n\t\tGC_TRACE(\"Collecting cycles\");\n\t\t//标识gc运行了多少次\n\t\tGC_G(gc_runs)++;\n\t\t//标识当前正在gc\n\t\tGC_G(gc_active) = 1;\n\n\t\tGC_TRACE(\"Marking roots\");\n\t\t//重点\n\t\tgc_mark_roots();\n\t\tGC_TRACE(\"Scanning roots\");\n\t\t//重点\n\t\tgc_scan_roots();\n\n\n\n\t\tGC_TRACE(\"Collecting roots\");\n\t\tadditional_buffer_snapshot = GC_G(additional_buffer);\n\t\tcount = gc_collect_roots(&gc_flags);\n\n\t\tGC_G(gc_active) = 0;\n\n\t\tif (GC_G(to_free).next == &GC_G(to_free)) {\n\t\t\t/* nothing to free */\n\t\t\tGC_TRACE(\"Nothing to free\");\n\t\t\treturn 0;\n\t\t}\n\n\t\t/* Copy global to_free list into local list */\n\t\tto_free.next = GC_G(to_free).next;\n\t\tto_free.prev = GC_G(to_free).prev;\n\t\tto_free.next->prev = &to_free;\n\t\tto_free.prev->next = &to_free;\n\n\t\t/* Free global list */\n\t\tGC_G(to_free).next = &GC_G(to_free);\n\t\tGC_G(to_free).prev = &GC_G(to_free);\n\n\t\torig_next_to_free = GC_G(next_to_free);\n\n\n\t\tif (gc_flags & GC_HAS_DESTRUCTORS) {\n\t\t\tGC_TRACE(\"Calling destructors\");\n\n\t\t\t/* Remember reference counters before calling destructors */\n\t\t\tcurrent = to_free.next;\n\t\t\twhile (current != &to_free) {\n\t\t\t\tcurrent->refcount = GC_REFCOUNT(current->ref);\n\t\t\t\tcurrent = current->next;\n\t\t\t}\n\n\t\t\t/* Call destructors */\n\t\t\tcurrent = to_free.next;\n\t\t\twhile (current != &to_free) {\n\t\t\t\tp = current->ref;\n\t\t\t\tGC_G(next_to_free) = current->next;\n\t\t\t\tif (GC_TYPE(p) == IS_OBJECT) {\n\t\t\t\t\tzend_object *obj = (zend_object*)p;\n\n\t\t\t\t\tif (!(GC_FLAGS(obj) & IS_OBJ_DESTRUCTOR_CALLED)) {\n\t\t\t\t\t\tGC_TRACE_REF(obj, \"calling destructor\");\n\t\t\t\t\t\tGC_FLAGS(obj) |= IS_OBJ_DESTRUCTOR_CALLED;\n\t\t\t\t\t\tif (obj->handlers->dtor_obj\n\t\t\t\t\t\t && (obj->handlers->dtor_obj != zend_objects_destroy_object\n\t\t\t\t\t\t  || obj->ce->destructor)) {\n\t\t\t\t\t\t\tGC_REFCOUNT(obj)++;\n\t\t\t\t\t\t\tobj->handlers->dtor_obj(obj);\n\t\t\t\t\t\t\tGC_REFCOUNT(obj)--;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tcurrent = GC_G(next_to_free);\n\t\t\t}\n\n\t\t\t/* Remove values captured in destructors */\n\t\t\tcurrent = to_free.next;\n\t\t\twhile (current != &to_free) {\n\t\t\t\tGC_G(next_to_free) = current->next;\n\t\t\t\tif (GC_REFCOUNT(current->ref) > current->refcount) {\n\t\t\t\t\tgc_remove_nested_data_from_buffer(current->ref, current);\n\t\t\t\t}\n\t\t\t\tcurrent = GC_G(next_to_free);\n\t\t\t}\n\t\t}\n\n\t\t/* Destroy zvals */\n\t\tGC_TRACE(\"Destroying zvals\");\n\t\tGC_G(gc_active) = 1;\n\t\tcurrent = to_free.next;\n\t\twhile (current != &to_free) {\n\t\t\tp = current->ref;\n\t\t\tGC_G(next_to_free) = current->next;\n\t\t\tGC_TRACE_REF(p, \"destroying\");\n\t\t\tif (GC_TYPE(p) == IS_OBJECT) {\n\t\t\t\tzend_object *obj = (zend_object*)p;\n\n\t\t\t\tEG(objects_store).object_buckets[obj->handle] = SET_OBJ_INVALID(obj);\n\t\t\t\tGC_TYPE(obj) = IS_NULL;\n\t\t\t\tif (!(GC_FLAGS(obj) & IS_OBJ_FREE_CALLED)) {\n\t\t\t\t\tGC_FLAGS(obj) |= IS_OBJ_FREE_CALLED;\n\t\t\t\t\tif (obj->handlers->free_obj) {\n\t\t\t\t\t\tGC_REFCOUNT(obj)++;\n\t\t\t\t\t\tobj->handlers->free_obj(obj);\n\t\t\t\t\t\tGC_REFCOUNT(obj)--;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tSET_OBJ_BUCKET_NUMBER(EG(objects_store).object_buckets[obj->handle], EG(objects_store).free_list_head);\n\t\t\t\tEG(objects_store).free_list_head = obj->handle;\n\t\t\t\tp = current->ref = (zend_refcounted*)(((char*)obj) - obj->handlers->offset);\n\t\t\t} else if (GC_TYPE(p) == IS_ARRAY) {\n\t\t\t\tzend_array *arr = (zend_array*)p;\n\n\t\t\t\tGC_TYPE(arr) = IS_NULL;\n\n\t\t\t\t/* GC may destroy arrays with rc>1. This is valid and safe. */\n\t\t\t\tHT_ALLOW_COW_VIOLATION(arr);\n\n\t\t\t\tzend_hash_destroy(arr);\n\t\t\t}\n\t\t\tcurrent = GC_G(next_to_free);\n\t\t}\n\n\t\t/* Free objects */\n\t\tcurrent = to_free.next;\n\t\twhile (current != &to_free) {\n\t\t\tnext = current->next;\n\t\t\tp = current->ref;\n\t\t\tif (EXPECTED(current >= GC_G(buf) && current < GC_G(buf) + GC_ROOT_BUFFER_MAX_ENTRIES)) {\n\t\t\t\tcurrent->prev = GC_G(unused);\n\t\t\t\tGC_G(unused) = current;\n\t\t\t}\n\t\t\tefree(p);\n\t\t\tcurrent = next;\n\t\t}\n\n\t\twhile (GC_G(additional_buffer) != additional_buffer_snapshot) {\n\t\t\tgc_additional_buffer *next = GC_G(additional_buffer)->next;\n\t\t\tefree(GC_G(additional_buffer));\n\t\t\tGC_G(additional_buffer) = next;\n\t\t}\n\n\t\tGC_TRACE(\"Collection finished\");\n\t\tGC_G(collected) += count;\n\t\tGC_G(next_to_free) = orig_next_to_free;\n\t\tGC_G(gc_active) = 0;\n\t}\n\n\treturn count;\n}\n```\n\n\n```c\nstatic void gc_mark_roots(void)\n{\n\tgc_root_buffer *current = GC_G(roots).next;\n\n\twhile (current != &GC_G(roots)) {\n\t\t//GC_PURPLE 标识在缓冲区\n\t\tif (GC_REF_GET_COLOR(current->ref) == GC_PURPLE) {\n\t\t\tgc_mark_grey(current->ref);\n\t\t}\n\t\tcurrent = current->next;\n\t}\n}\n```\n\n```c\nstatic void gc_mark_grey(zend_refcounted *ref)\n{\n    HashTable *ht;\n\tBucket *p, *end;\n\tzval *zv;\n\ntail_call:\n\tif (GC_REF_GET_COLOR(ref) != GC_GREY) {\n\t\tht = NULL;\n\t\tGC_BENCH_INC(zval_marked_grey);\n\t\tGC_REF_SET_COLOR(ref, GC_GREY);\n\n\t\tif (GC_TYPE(ref) == IS_OBJECT) {\n\t\t\tzend_object_get_gc_t get_gc;\n\t\t\tzend_object *obj = (zend_object*)ref;\n\n\t\t\tif (EXPECTED(!(GC_FLAGS(ref) & IS_OBJ_FREE_CALLED) &&\n\t\t                 (get_gc = obj->handlers->get_gc) != NULL)) {\n\t\t\t\tint n;\n\t\t\t\tzval *zv, *end;\n\t\t\t\tzval tmp;\n\n\t\t\t\tZVAL_OBJ(&tmp, obj);\n\t\t\t\tht = get_gc(&tmp, &zv, &n);\n\t\t\t\tend = zv + n;\n\t\t\t\tif (EXPECTED(!ht)) {\n\t\t\t\t\tif (!n) return;\n\t\t\t\t\twhile (!Z_REFCOUNTED_P(--end)) {\n\t\t\t\t\t\t//表明当前object size为0\n\t\t\t\t\t\tif (zv == end) return;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\twhile (zv != end) {\n\t\t\t\t\t//循环对每个元素进行--\n\t\t\t\t\tif (Z_REFCOUNTED_P(zv)) {\n\t\t\t\t\t\tref = Z_COUNTED_P(zv);\n\t\t\t\t\t\tGC_REFCOUNT(ref)--;\n\t\t\t\t\t\t//refcount已经减过，标记为灰色\n\t\t\t\t\t\tgc_mark_grey(ref);\n\t\t\t\t\t}\n\t\t\t\t\tzv++;\n\t\t\t\t}\n\t\t\t\tif (EXPECTED(!ht)) {\n\t\t\t\t\tref = Z_COUNTED_P(zv);\n\t\t\t\t\tGC_REFCOUNT(ref)--;\n\t\t\t\t\tgoto tail_call;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn;\n\t\t\t}\n\t\t} else if (GC_TYPE(ref) == IS_ARRAY) {\n\t\t\tif (((zend_array*)ref) == &EG(symbol_table)) {\n\t\t\t\t//标识是正常非垃圾\n\t\t\t\tGC_REF_SET_BLACK(ref);\n\t\t\t\treturn;\n\t\t\t} else {\n\t\t\t\tht = (zend_array*)ref;\n\t\t\t}\n\t\t} else if (GC_TYPE(ref) == IS_REFERENCE) {\n\t\t\tif (Z_REFCOUNTED(((zend_reference*)ref)->val)) {\n\t\t\t\tref = Z_COUNTED(((zend_reference*)ref)->val);\n\t\t\t\tGC_REFCOUNT(ref)--;\n\t\t\t\tgoto tail_call;\n\t\t\t}\n\t\t\treturn;\n\t\t} else {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!ht->nNumUsed) return;\n\t\tp = ht->arData;\n\t\tend = p + ht->nNumUsed;\n\t\twhile (1) {\n\t\t\tend--;\n\t\t\tzv = &end->val;\n\t\t\tif (Z_TYPE_P(zv) == IS_INDIRECT) {\n\t\t\t\tzv = Z_INDIRECT_P(zv);\n\t\t\t}\n\t\t\tif (Z_REFCOUNTED_P(zv)) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (p == end) return;\n\t\t}\n\t\twhile (p != end) {\n\t\t\tzv = &p->val;\n\t\t\tif (Z_TYPE_P(zv) == IS_INDIRECT) {\n\t\t\t\tzv = Z_INDIRECT_P(zv);\n\t\t\t}\n\t\t\tif (Z_REFCOUNTED_P(zv)) {\n\t\t\t\tref = Z_COUNTED_P(zv);\n\t\t\t\tGC_REFCOUNT(ref)--;\n\t\t\t\tgc_mark_grey(ref);\n\t\t\t}\n\t\t\tp++;\n\t\t}\n\t\tzv = &p->val;\n\t\tif (Z_TYPE_P(zv) == IS_INDIRECT) {\n\t\t\tzv = Z_INDIRECT_P(zv);\n\t\t}\n\t\tref = Z_COUNTED_P(zv);\n\t\tGC_REFCOUNT(ref)--;\n\t\tgoto tail_call;\n\t}\n}\n```\n\n```c\nstatic void gc_scan(zend_refcounted *ref)\n{\n    HashTable *ht;\n\tBucket *p, *end;\n\tzval *zv;\n\ntail_call:\n\tif (GC_REF_GET_COLOR(ref) == GC_GREY) {\n\t\tif (GC_REFCOUNT(ref) > 0) {\n\t\t\t//所有refount--以后如果还>0，说明非垃圾\n\t\t\tgc_scan_black(ref);\n\t\t} else {\n\t\t\t//否则则为垃圾\n\t\t\tGC_REF_SET_COLOR(ref, GC_WHITE);\n\t\t\tif (GC_TYPE(ref) == IS_OBJECT) {\n\t\t\t\tzend_object_get_gc_t get_gc;\n\t\t\t\tzend_object *obj = (zend_object*)ref;\n\n\t\t\t\tif (EXPECTED(!(GC_FLAGS(ref) & IS_OBJ_FREE_CALLED) &&\n\t\t\t\t             (get_gc = obj->handlers->get_gc) != NULL)) {\n\t\t\t\t\tint n;\n\t\t\t\t\tzval *zv, *end;\n\t\t\t\t\tzval tmp;\n\n\t\t\t\t\tZVAL_OBJ(&tmp, obj);\n\t\t\t\t\tht = get_gc(&tmp, &zv, &n);\n\t\t\t\t\tend = zv + n;\n\t\t\t\t\tif (EXPECTED(!ht)) {\n\t\t\t\t\t\tif (!n) return;\n\t\t\t\t\t\twhile (!Z_REFCOUNTED_P(--end)) {\n\t\t\t\t\t\t\tif (zv == end) return;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\twhile (zv != end) {\n\t\t\t\t\t\tif (Z_REFCOUNTED_P(zv)) {\n\t\t\t\t\t\t\tref = Z_COUNTED_P(zv);\n\t\t\t\t\t\t\tgc_scan(ref);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tzv++;\n\t\t\t\t\t}\n\t\t\t\t\tif (EXPECTED(!ht)) {\n\t\t\t\t\t\tref = Z_COUNTED_P(zv);\n\t\t\t\t\t\tgoto tail_call;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} else if (GC_TYPE(ref) == IS_ARRAY) {\n\t\t\t\tif ((zend_array*)ref == &EG(symbol_table)) {\n\t\t\t\t\tGC_REF_SET_BLACK(ref);\n\t\t\t\t\treturn;\n\t\t\t\t} else {\n\t\t\t\t\tht = (zend_array*)ref;\n\t\t\t\t}\n\t\t\t} else if (GC_TYPE(ref) == IS_REFERENCE) {\n\t\t\t\tif (Z_REFCOUNTED(((zend_reference*)ref)->val)) {\n\t\t\t\t\tref = Z_COUNTED(((zend_reference*)ref)->val);\n\t\t\t\t\tgoto tail_call;\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t} else {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!ht->nNumUsed) return;\n\t\t\tp = ht->arData;\n\t\t\tend = p + ht->nNumUsed;\n\t\t\twhile (1) {\n\t\t\t\tend--;\n\t\t\t\tzv = &end->val;\n\t\t\t\tif (Z_TYPE_P(zv) == IS_INDIRECT) {\n\t\t\t\t\tzv = Z_INDIRECT_P(zv);\n\t\t\t\t}\n\t\t\t\tif (Z_REFCOUNTED_P(zv)) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (p == end) return;\n\t\t\t}\n\t\t\twhile (p != end) {\n\t\t\t\tzv = &p->val;\n\t\t\t\tif (Z_TYPE_P(zv) == IS_INDIRECT) {\n\t\t\t\t\tzv = Z_INDIRECT_P(zv);\n\t\t\t\t}\n\t\t\t\tif (Z_REFCOUNTED_P(zv)) {\n\t\t\t\t\tref = Z_COUNTED_P(zv);\n\t\t\t\t\tgc_scan(ref);\n\t\t\t\t}\n\t\t\t\tp++;\n\t\t\t}\n\t\t\tzv = &p->val;\n\t\t\tif (Z_TYPE_P(zv) == IS_INDIRECT) {\n\t\t\t\tzv = Z_INDIRECT_P(zv);\n\t\t\t}\n\t\t\tref = Z_COUNTED_P(zv);\n\t\t\tgoto tail_call;\n\t\t}\n\t}\n}\n```\n主要为三个函数：\n- `gc_mark_roots`队规遍历，对object、array所有元素的refcount--并将其标记为灰色\n- `gc_scan_roots`这个函数对节点信息的链表再次进行深度优先遍历，如果发现zval的refcount大于等于1，则对该zval和其包含的zval的refcount加1操作，这个是对非垃圾的一个信息还原，然后将这些zval颜色属性去掉(设置成black)。如果发现zval的refcount等于0，则就标记成白色，这些是后面将要清理掉的垃圾。\n- `gc_collect_roots` 遍历节点信息链表,将前面一个步骤中标记为白色的节点信息放到GC_G(zval_to_free)为入口的链表中，这个链表用来存放将要释放的垃圾。 然后释放掉全部的节点信息，缓冲区被清空。分析结束后将重新收集节点信息。\n\n","source":"_posts/php垃圾回收.md","raw":"---\ntitle: php垃圾回收\ndate: 2018-09-12 21:28:00\ntags: php源码\ncategories: php源码学习\ntoc: true\n---\n\nphp是如何实现内存管理的?内存管理包括内存分配、内存回收、以及内存使用优化。\n\n- 内存使用的优化\n- 垃圾回收机制\n- 底层内存分配\n\n\n## 内存使用的优化\n\n### 引用计数\n\nphp的引用中有个引用结构体\n\n\n```c\nstruct _zend_reference {\n    zend_refcondted_h gc;\n    zval              val;  指向原来的value.\n};\n```\n\n其中`zend_refcondted_h` 便是gc便是当前变量被引用的次数,这个参数会在变量回收的时候用到。\n\n\n`zend_refcondted_h` :\n\n```c\ntypedef struct _zend_refcounted_h {\n\tuint32_t         refcount;\t\t\t/* reference counter 32-bit */\n\tunion {\n\t\tstruct {\n\t\t\tZEND_ENDIAN_LOHI_3(\n\t\t\t\tzend_uchar    type,\n\t\t\t\tzend_uchar    flags,    /* used for strings & objects */\n\t\t\t\tuint16_t      gc_info)  /* keeps GC root number (or 0) and color */\n\t\t} v;\n\t\tuint32_t type_info;\n\t} u;\n} zend_refcounted_h;\n```\n\n在实际中这个结构体到底是什么样的? 具体可以举例来看。\n\n```php\n$a = 'this is string'; // zend_array (refcount = 1)  只有$a引用了zend_array\n$b = &$a; //   zend_array (refcount = 2)  $a、$b引用了zend_array\n$c = $b; // zend_array (refcount = 3)  $a、$b、$c引用了zend_array\nunset($b); // zend_array (refcount = 2)  $a、$c引用了zend_array\n```\n\n> 并不是所有的变量类型都会使用引用计数, 例如 `整形`、`浮点型`、`布尔型`、`NUll`(在php中这是一个变量类型)等采用了深拷贝,\n即只要这几种变量赋值, 就会申请一款一块内存写入一个新的变量结构（注意这里不是引用结构）,当然这些类型不会公用value。\n\n\n\n### 写时复制\n\n当然只有引用计数是不够的, 因为变量会发生赋值的情况。所以在更改某一个变量时, 会对原来的变量进行拷贝并赋值。\n\n举个栗子:\n\n```\n$foo = time();\n$bar = &$b;\n$si = $a;\n\n$c = '123';\n```\n\n具体数据结构的引用计数情况如下图:\n\n\n\n![image](/photo/img/php内存管理/写时复制.png)\n\n## 内存回收\n\n### 自动gc\n在zend数据接口中有一个gc.refount,他是自动gc的关键。\n\n在自动gc机制中,如果zval不在指向value且当前value的gc.refount为0时,会直接释放value。这种情况多发生于函数返回时（销毁所有局部变量）、变量修改时、以及unset操作的时候。\n\n\n### 垃圾回收\n\n除了自动gc,还有一种是自动gc无法处理的垃圾, 这种情况称为`循环引用`。顾名思义也就是自身内部变量引用了自身, 这种情况常出现与object和array。当我该变量zval被销毁是, 与其对应的value gc.refcount -1,\n但是因为有自身变量指向自身, 所以就陷入了一个循环:如果不销毁自身变量 value gc.refcount就无法自动gc, 只有自动gc才会销毁value。\n\n```php\n\n$a = [1];\n$a[] = &$a;\nunset($a);\n\n```\n\n![image](/photo/img/php内存管理/自身引用.png)\n\n`unset($a)`执行以后\n\n![image](/photo/img/php内存管理/释放.png)\n\n由于\b上述情况导致无法自动gc,所以需要引入另外一钟垃圾回收机制-垃圾回收器。\n现在会存在两种情况的数据需要回收：\n- 当value的gc.refcount =0 是需要回收。\n- 当value的gc.refcount 减少不等于0，但是存在循环引用时。\n\n### 回收机制\n\n当发生value gc.refcount减少时，垃圾回收机制会把可能是垃圾的value存起来， 当可能是垃圾的value到达一定数量的时候启动垃圾鉴别程序，统一处理垃圾。当然这里的value类型只有object和array。\n\n垃圾兼备程序：\n其实垃圾鉴别程序很简单，递归遍历自身value，查看是否存在指向自身的即可。\n\ncode:\ngc 初始化\n```php\nZEND_API void gc_init(void)\n{\n\tif (GC_G(buf) == NULL && GC_G(gc_enabled)) {\n\t\t//初始化buf\b内存区域，大小为sizeof(gc_root_buffer) * //GC_ROOT_BUFFER_MAX_ENTRIES\n\t\tGC_G(buf) = (gc_root_buffer*) malloc(sizeof(gc_root_buffer) * GC_ROOT_BUFFER_MAX_ENTRIES);\n\t\t//设置_zend_gc_globals.last_unused为\b\bbug入口位置\n\t\tGC_G(last_unused) = &GC_G(buf)[GC_ROOT_BUFFER_MAX_ENTRIES];\n\t\t//初始化_zend_gc_globals的参数\n\t\tgc_reset();\n\t}\n}\n```\n垃圾回收及其依赖 `_zend_gc_globals`\n\n`_zend_gc_globals`\n```c\ntypedef struct _zend_gc_globals {\n\tzend_bool         gc_enabled;\n\tzend_bool         gc_active;\n\tzend_bool         gc_full;\n\n\tgc_root_buffer   *buf;\t\t\t\t/* preallocated arrays of buffers   */\n\tgc_root_buffer    roots;\t\t\t/* list of possible roots of cycles */\n\tgc_root_buffer   *unused;\t\t\t/* list of unused buffers           */\n\tgc_root_buffer   *first_unused;\t\t/* pointer to first unused buffer   */\n\tgc_root_buffer   *last_unused;\t\t/* pointer to last unused buffer    */\n\n\tgc_root_buffer    to_free;\t\t\t/* list to free                     */\n\tgc_root_buffer   *next_to_free;\n\n\tuint32_t gc_runs;\n\tuint32_t collected;\n\n#if GC_BENCH\n\tuint32_t root_buf_length;\n\tuint32_t root_buf_peak;\n\tuint32_t zval_possible_root;\n\tuint32_t zval_buffered;\n\tuint32_t zval_remove_from_buffer;\n\tuint32_t zval_marked_grey;\n#endif\n\n\tgc_additional_buffer *additional_buffer;\n\n} zend_gc_globals;\n```\n\n- `gc_enabled` 是否使使用gc\n- `gc_active`  是否在垃圾检查的过程中\n- `gc_full` buf缓冲区是否已满\n- `*buf` 与分配用于保存可能为垃圾的value\n- `roots` 指向buf最新加入的一个可能垃圾\n- `unused` 指向第未使用的buffer\n- `*first_unused` 指向第一个没用使用buffer\n- `*last_unused` 指向buffer的尾部\n- `to_free` 等待释放的buffer\n- `gc_runs`  统计gc运行的次数\n- `collected`  统计已经释放的垃圾数\n\n\nphp垃圾回收中几个重要的颜色写在zeng_gc的备注中。\n```C\n * BLACK  (GC_BLACK)   - In use or free.\n * GREY   (GC_GREY)    - Possible member of cycle.\n * WHITE  (GC_WHITE)   - Member of garbage cycle.\n * PURPLE (GC_PURPLE)  - Possible root of cycle.\n```\n- GC_WHITE 白色表示垃圾\n- GC_PURPLE 紫色表示已放入缓冲区\n- GC_GREY 灰色表示已经进行了一次refcount的减一操作\n- GC_BLACK 黑色是默认颜色，正常\n\n\ngc过程中主要处理功能的函数`zend_gc_collect_cycles`\n\n```c\nZEND_API void ZEND_FASTCALL gc_possible_root(zend_refcounted *ref)\n{\n\tgc_root_buffer *newRoot;\n\n\tif (UNEXPECTED(CG(unclean_shutdown)) || UNEXPECTED(GC_G(gc_active))) {\n\t\treturn;\n\t}\n\n\tZEND_ASSERT(GC_TYPE(ref) == IS_ARRAY || GC_TYPE(ref) == IS_OBJECT);\n\tZEND_ASSERT(EXPECTED(GC_REF_GET_COLOR(ref) == GC_BLACK));\n\tZEND_ASSERT(!GC_ADDRESS(GC_INFO(ref)));\n\n\tGC_BENCH_INC(zval_possible_root);\n\n\tnewRoot = GC_G(unused);\n\tif (newRoot) {\n\t\tGC_G(unused) = newRoot->prev;\n\t} else if (GC_G(first_unused) != GC_G(last_unused)) {\n\t\tnewRoot = GC_G(first_unused);\n\t\tGC_G(first_unused)++;\n\t} else {\n\t\t//垃圾处理，当缓冲区满时，程序调用gc_collect_cycles函数，执行垃圾回收操作。 其中最关键的几步就是\n\t\t//如果当前处于可以gc的状态\n\t\tif (!GC_G(gc_enabled)) {\n\t\t\treturn;\n\t\t}\n\t\tGC_REFCOUNT(ref)++;\n\t\t//垃圾回收\n\t\tgc_collect_cycles();\n\t\tGC_REFCOUNT(ref)--;\n\t\tif (UNEXPECTED(GC_REFCOUNT(ref)) == 0) {\n\t\t\tzval_dtor_func(ref);\n\t\t\treturn;\n\t\t}\n\t\tif (UNEXPECTED(GC_INFO(ref))) {\n\t\t\treturn;\n\t\t}\n\t\tnewRoot = GC_G(unused);\n\t\tif (!newRoot) {\n\t\t\treturn;\n\t\t}\n\t\tGC_G(unused) = newRoot->prev;\n\t}\n\n\tGC_TRACE_SET_COLOR(ref, GC_PURPLE);\n\tGC_INFO(ref) = (newRoot - GC_G(buf)) | GC_PURPLE;\n\tnewRoot->ref = ref;\n\n\tnewRoot->next = GC_G(roots).next;\n\tnewRoot->prev = &GC_G(roots);\n\tGC_G(roots).next->prev = newRoot;\n\tGC_G(roots).next = newRoot;\n\n\tGC_BENCH_INC(zval_buffered);\n\tGC_BENCH_INC(root_buf_length);\n\tGC_BENCH_PEAK(root_buf_peak, root_buf_length);\n}\n```\n\n1. \b深度优先对对象或者数据的每一个元素的`refcount--`并将其标记为灰色\n2. 深度遍历root的每个每个变量，如果此时变量的`refcount`为0，则代表着改变量为垃圾，将其标记为垃圾，如果不为0，则将其标记为黑色（正常）。\n3. 检查roots清除标记为白色的垃圾。\n\n//TODO 垃圾回收抽出来出来写。\n\n具体代码：\n```php\nZEND_API int zend_gc_collect_cycles(void)\n{\n\tint count = 0;\n\n\tif (GC_G(roots).next != &GC_G(roots)) {\n\t\tgc_root_buffer *current, *next, *orig_next_to_free;\n\t\tzend_refcounted *p;\n\t\tgc_root_buffer to_free;\n\t\tuint32_t gc_flags = 0;\n\t\tgc_additional_buffer *additional_buffer_snapshot;\n\n\n\t\tif (GC_G(gc_active)) {\n\t\t\treturn 0;\n\t\t}\n\n\t\tGC_TRACE(\"Collecting cycles\");\n\t\t//标识gc运行了多少次\n\t\tGC_G(gc_runs)++;\n\t\t//标识当前正在gc\n\t\tGC_G(gc_active) = 1;\n\n\t\tGC_TRACE(\"Marking roots\");\n\t\t//重点\n\t\tgc_mark_roots();\n\t\tGC_TRACE(\"Scanning roots\");\n\t\t//重点\n\t\tgc_scan_roots();\n\n\n\n\t\tGC_TRACE(\"Collecting roots\");\n\t\tadditional_buffer_snapshot = GC_G(additional_buffer);\n\t\tcount = gc_collect_roots(&gc_flags);\n\n\t\tGC_G(gc_active) = 0;\n\n\t\tif (GC_G(to_free).next == &GC_G(to_free)) {\n\t\t\t/* nothing to free */\n\t\t\tGC_TRACE(\"Nothing to free\");\n\t\t\treturn 0;\n\t\t}\n\n\t\t/* Copy global to_free list into local list */\n\t\tto_free.next = GC_G(to_free).next;\n\t\tto_free.prev = GC_G(to_free).prev;\n\t\tto_free.next->prev = &to_free;\n\t\tto_free.prev->next = &to_free;\n\n\t\t/* Free global list */\n\t\tGC_G(to_free).next = &GC_G(to_free);\n\t\tGC_G(to_free).prev = &GC_G(to_free);\n\n\t\torig_next_to_free = GC_G(next_to_free);\n\n\n\t\tif (gc_flags & GC_HAS_DESTRUCTORS) {\n\t\t\tGC_TRACE(\"Calling destructors\");\n\n\t\t\t/* Remember reference counters before calling destructors */\n\t\t\tcurrent = to_free.next;\n\t\t\twhile (current != &to_free) {\n\t\t\t\tcurrent->refcount = GC_REFCOUNT(current->ref);\n\t\t\t\tcurrent = current->next;\n\t\t\t}\n\n\t\t\t/* Call destructors */\n\t\t\tcurrent = to_free.next;\n\t\t\twhile (current != &to_free) {\n\t\t\t\tp = current->ref;\n\t\t\t\tGC_G(next_to_free) = current->next;\n\t\t\t\tif (GC_TYPE(p) == IS_OBJECT) {\n\t\t\t\t\tzend_object *obj = (zend_object*)p;\n\n\t\t\t\t\tif (!(GC_FLAGS(obj) & IS_OBJ_DESTRUCTOR_CALLED)) {\n\t\t\t\t\t\tGC_TRACE_REF(obj, \"calling destructor\");\n\t\t\t\t\t\tGC_FLAGS(obj) |= IS_OBJ_DESTRUCTOR_CALLED;\n\t\t\t\t\t\tif (obj->handlers->dtor_obj\n\t\t\t\t\t\t && (obj->handlers->dtor_obj != zend_objects_destroy_object\n\t\t\t\t\t\t  || obj->ce->destructor)) {\n\t\t\t\t\t\t\tGC_REFCOUNT(obj)++;\n\t\t\t\t\t\t\tobj->handlers->dtor_obj(obj);\n\t\t\t\t\t\t\tGC_REFCOUNT(obj)--;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tcurrent = GC_G(next_to_free);\n\t\t\t}\n\n\t\t\t/* Remove values captured in destructors */\n\t\t\tcurrent = to_free.next;\n\t\t\twhile (current != &to_free) {\n\t\t\t\tGC_G(next_to_free) = current->next;\n\t\t\t\tif (GC_REFCOUNT(current->ref) > current->refcount) {\n\t\t\t\t\tgc_remove_nested_data_from_buffer(current->ref, current);\n\t\t\t\t}\n\t\t\t\tcurrent = GC_G(next_to_free);\n\t\t\t}\n\t\t}\n\n\t\t/* Destroy zvals */\n\t\tGC_TRACE(\"Destroying zvals\");\n\t\tGC_G(gc_active) = 1;\n\t\tcurrent = to_free.next;\n\t\twhile (current != &to_free) {\n\t\t\tp = current->ref;\n\t\t\tGC_G(next_to_free) = current->next;\n\t\t\tGC_TRACE_REF(p, \"destroying\");\n\t\t\tif (GC_TYPE(p) == IS_OBJECT) {\n\t\t\t\tzend_object *obj = (zend_object*)p;\n\n\t\t\t\tEG(objects_store).object_buckets[obj->handle] = SET_OBJ_INVALID(obj);\n\t\t\t\tGC_TYPE(obj) = IS_NULL;\n\t\t\t\tif (!(GC_FLAGS(obj) & IS_OBJ_FREE_CALLED)) {\n\t\t\t\t\tGC_FLAGS(obj) |= IS_OBJ_FREE_CALLED;\n\t\t\t\t\tif (obj->handlers->free_obj) {\n\t\t\t\t\t\tGC_REFCOUNT(obj)++;\n\t\t\t\t\t\tobj->handlers->free_obj(obj);\n\t\t\t\t\t\tGC_REFCOUNT(obj)--;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tSET_OBJ_BUCKET_NUMBER(EG(objects_store).object_buckets[obj->handle], EG(objects_store).free_list_head);\n\t\t\t\tEG(objects_store).free_list_head = obj->handle;\n\t\t\t\tp = current->ref = (zend_refcounted*)(((char*)obj) - obj->handlers->offset);\n\t\t\t} else if (GC_TYPE(p) == IS_ARRAY) {\n\t\t\t\tzend_array *arr = (zend_array*)p;\n\n\t\t\t\tGC_TYPE(arr) = IS_NULL;\n\n\t\t\t\t/* GC may destroy arrays with rc>1. This is valid and safe. */\n\t\t\t\tHT_ALLOW_COW_VIOLATION(arr);\n\n\t\t\t\tzend_hash_destroy(arr);\n\t\t\t}\n\t\t\tcurrent = GC_G(next_to_free);\n\t\t}\n\n\t\t/* Free objects */\n\t\tcurrent = to_free.next;\n\t\twhile (current != &to_free) {\n\t\t\tnext = current->next;\n\t\t\tp = current->ref;\n\t\t\tif (EXPECTED(current >= GC_G(buf) && current < GC_G(buf) + GC_ROOT_BUFFER_MAX_ENTRIES)) {\n\t\t\t\tcurrent->prev = GC_G(unused);\n\t\t\t\tGC_G(unused) = current;\n\t\t\t}\n\t\t\tefree(p);\n\t\t\tcurrent = next;\n\t\t}\n\n\t\twhile (GC_G(additional_buffer) != additional_buffer_snapshot) {\n\t\t\tgc_additional_buffer *next = GC_G(additional_buffer)->next;\n\t\t\tefree(GC_G(additional_buffer));\n\t\t\tGC_G(additional_buffer) = next;\n\t\t}\n\n\t\tGC_TRACE(\"Collection finished\");\n\t\tGC_G(collected) += count;\n\t\tGC_G(next_to_free) = orig_next_to_free;\n\t\tGC_G(gc_active) = 0;\n\t}\n\n\treturn count;\n}\n```\n\n\n```c\nstatic void gc_mark_roots(void)\n{\n\tgc_root_buffer *current = GC_G(roots).next;\n\n\twhile (current != &GC_G(roots)) {\n\t\t//GC_PURPLE 标识在缓冲区\n\t\tif (GC_REF_GET_COLOR(current->ref) == GC_PURPLE) {\n\t\t\tgc_mark_grey(current->ref);\n\t\t}\n\t\tcurrent = current->next;\n\t}\n}\n```\n\n```c\nstatic void gc_mark_grey(zend_refcounted *ref)\n{\n    HashTable *ht;\n\tBucket *p, *end;\n\tzval *zv;\n\ntail_call:\n\tif (GC_REF_GET_COLOR(ref) != GC_GREY) {\n\t\tht = NULL;\n\t\tGC_BENCH_INC(zval_marked_grey);\n\t\tGC_REF_SET_COLOR(ref, GC_GREY);\n\n\t\tif (GC_TYPE(ref) == IS_OBJECT) {\n\t\t\tzend_object_get_gc_t get_gc;\n\t\t\tzend_object *obj = (zend_object*)ref;\n\n\t\t\tif (EXPECTED(!(GC_FLAGS(ref) & IS_OBJ_FREE_CALLED) &&\n\t\t                 (get_gc = obj->handlers->get_gc) != NULL)) {\n\t\t\t\tint n;\n\t\t\t\tzval *zv, *end;\n\t\t\t\tzval tmp;\n\n\t\t\t\tZVAL_OBJ(&tmp, obj);\n\t\t\t\tht = get_gc(&tmp, &zv, &n);\n\t\t\t\tend = zv + n;\n\t\t\t\tif (EXPECTED(!ht)) {\n\t\t\t\t\tif (!n) return;\n\t\t\t\t\twhile (!Z_REFCOUNTED_P(--end)) {\n\t\t\t\t\t\t//表明当前object size为0\n\t\t\t\t\t\tif (zv == end) return;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\twhile (zv != end) {\n\t\t\t\t\t//循环对每个元素进行--\n\t\t\t\t\tif (Z_REFCOUNTED_P(zv)) {\n\t\t\t\t\t\tref = Z_COUNTED_P(zv);\n\t\t\t\t\t\tGC_REFCOUNT(ref)--;\n\t\t\t\t\t\t//refcount已经减过，标记为灰色\n\t\t\t\t\t\tgc_mark_grey(ref);\n\t\t\t\t\t}\n\t\t\t\t\tzv++;\n\t\t\t\t}\n\t\t\t\tif (EXPECTED(!ht)) {\n\t\t\t\t\tref = Z_COUNTED_P(zv);\n\t\t\t\t\tGC_REFCOUNT(ref)--;\n\t\t\t\t\tgoto tail_call;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn;\n\t\t\t}\n\t\t} else if (GC_TYPE(ref) == IS_ARRAY) {\n\t\t\tif (((zend_array*)ref) == &EG(symbol_table)) {\n\t\t\t\t//标识是正常非垃圾\n\t\t\t\tGC_REF_SET_BLACK(ref);\n\t\t\t\treturn;\n\t\t\t} else {\n\t\t\t\tht = (zend_array*)ref;\n\t\t\t}\n\t\t} else if (GC_TYPE(ref) == IS_REFERENCE) {\n\t\t\tif (Z_REFCOUNTED(((zend_reference*)ref)->val)) {\n\t\t\t\tref = Z_COUNTED(((zend_reference*)ref)->val);\n\t\t\t\tGC_REFCOUNT(ref)--;\n\t\t\t\tgoto tail_call;\n\t\t\t}\n\t\t\treturn;\n\t\t} else {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!ht->nNumUsed) return;\n\t\tp = ht->arData;\n\t\tend = p + ht->nNumUsed;\n\t\twhile (1) {\n\t\t\tend--;\n\t\t\tzv = &end->val;\n\t\t\tif (Z_TYPE_P(zv) == IS_INDIRECT) {\n\t\t\t\tzv = Z_INDIRECT_P(zv);\n\t\t\t}\n\t\t\tif (Z_REFCOUNTED_P(zv)) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (p == end) return;\n\t\t}\n\t\twhile (p != end) {\n\t\t\tzv = &p->val;\n\t\t\tif (Z_TYPE_P(zv) == IS_INDIRECT) {\n\t\t\t\tzv = Z_INDIRECT_P(zv);\n\t\t\t}\n\t\t\tif (Z_REFCOUNTED_P(zv)) {\n\t\t\t\tref = Z_COUNTED_P(zv);\n\t\t\t\tGC_REFCOUNT(ref)--;\n\t\t\t\tgc_mark_grey(ref);\n\t\t\t}\n\t\t\tp++;\n\t\t}\n\t\tzv = &p->val;\n\t\tif (Z_TYPE_P(zv) == IS_INDIRECT) {\n\t\t\tzv = Z_INDIRECT_P(zv);\n\t\t}\n\t\tref = Z_COUNTED_P(zv);\n\t\tGC_REFCOUNT(ref)--;\n\t\tgoto tail_call;\n\t}\n}\n```\n\n```c\nstatic void gc_scan(zend_refcounted *ref)\n{\n    HashTable *ht;\n\tBucket *p, *end;\n\tzval *zv;\n\ntail_call:\n\tif (GC_REF_GET_COLOR(ref) == GC_GREY) {\n\t\tif (GC_REFCOUNT(ref) > 0) {\n\t\t\t//所有refount--以后如果还>0，说明非垃圾\n\t\t\tgc_scan_black(ref);\n\t\t} else {\n\t\t\t//否则则为垃圾\n\t\t\tGC_REF_SET_COLOR(ref, GC_WHITE);\n\t\t\tif (GC_TYPE(ref) == IS_OBJECT) {\n\t\t\t\tzend_object_get_gc_t get_gc;\n\t\t\t\tzend_object *obj = (zend_object*)ref;\n\n\t\t\t\tif (EXPECTED(!(GC_FLAGS(ref) & IS_OBJ_FREE_CALLED) &&\n\t\t\t\t             (get_gc = obj->handlers->get_gc) != NULL)) {\n\t\t\t\t\tint n;\n\t\t\t\t\tzval *zv, *end;\n\t\t\t\t\tzval tmp;\n\n\t\t\t\t\tZVAL_OBJ(&tmp, obj);\n\t\t\t\t\tht = get_gc(&tmp, &zv, &n);\n\t\t\t\t\tend = zv + n;\n\t\t\t\t\tif (EXPECTED(!ht)) {\n\t\t\t\t\t\tif (!n) return;\n\t\t\t\t\t\twhile (!Z_REFCOUNTED_P(--end)) {\n\t\t\t\t\t\t\tif (zv == end) return;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\twhile (zv != end) {\n\t\t\t\t\t\tif (Z_REFCOUNTED_P(zv)) {\n\t\t\t\t\t\t\tref = Z_COUNTED_P(zv);\n\t\t\t\t\t\t\tgc_scan(ref);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tzv++;\n\t\t\t\t\t}\n\t\t\t\t\tif (EXPECTED(!ht)) {\n\t\t\t\t\t\tref = Z_COUNTED_P(zv);\n\t\t\t\t\t\tgoto tail_call;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} else if (GC_TYPE(ref) == IS_ARRAY) {\n\t\t\t\tif ((zend_array*)ref == &EG(symbol_table)) {\n\t\t\t\t\tGC_REF_SET_BLACK(ref);\n\t\t\t\t\treturn;\n\t\t\t\t} else {\n\t\t\t\t\tht = (zend_array*)ref;\n\t\t\t\t}\n\t\t\t} else if (GC_TYPE(ref) == IS_REFERENCE) {\n\t\t\t\tif (Z_REFCOUNTED(((zend_reference*)ref)->val)) {\n\t\t\t\t\tref = Z_COUNTED(((zend_reference*)ref)->val);\n\t\t\t\t\tgoto tail_call;\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t} else {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!ht->nNumUsed) return;\n\t\t\tp = ht->arData;\n\t\t\tend = p + ht->nNumUsed;\n\t\t\twhile (1) {\n\t\t\t\tend--;\n\t\t\t\tzv = &end->val;\n\t\t\t\tif (Z_TYPE_P(zv) == IS_INDIRECT) {\n\t\t\t\t\tzv = Z_INDIRECT_P(zv);\n\t\t\t\t}\n\t\t\t\tif (Z_REFCOUNTED_P(zv)) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (p == end) return;\n\t\t\t}\n\t\t\twhile (p != end) {\n\t\t\t\tzv = &p->val;\n\t\t\t\tif (Z_TYPE_P(zv) == IS_INDIRECT) {\n\t\t\t\t\tzv = Z_INDIRECT_P(zv);\n\t\t\t\t}\n\t\t\t\tif (Z_REFCOUNTED_P(zv)) {\n\t\t\t\t\tref = Z_COUNTED_P(zv);\n\t\t\t\t\tgc_scan(ref);\n\t\t\t\t}\n\t\t\t\tp++;\n\t\t\t}\n\t\t\tzv = &p->val;\n\t\t\tif (Z_TYPE_P(zv) == IS_INDIRECT) {\n\t\t\t\tzv = Z_INDIRECT_P(zv);\n\t\t\t}\n\t\t\tref = Z_COUNTED_P(zv);\n\t\t\tgoto tail_call;\n\t\t}\n\t}\n}\n```\n主要为三个函数：\n- `gc_mark_roots`队规遍历，对object、array所有元素的refcount--并将其标记为灰色\n- `gc_scan_roots`这个函数对节点信息的链表再次进行深度优先遍历，如果发现zval的refcount大于等于1，则对该zval和其包含的zval的refcount加1操作，这个是对非垃圾的一个信息还原，然后将这些zval颜色属性去掉(设置成black)。如果发现zval的refcount等于0，则就标记成白色，这些是后面将要清理掉的垃圾。\n- `gc_collect_roots` 遍历节点信息链表,将前面一个步骤中标记为白色的节点信息放到GC_G(zval_to_free)为入口的链表中，这个链表用来存放将要释放的垃圾。 然后释放掉全部的节点信息，缓冲区被清空。分析结束后将重新收集节点信息。\n\n","slug":"php垃圾回收","published":1,"updated":"2019-02-21T03:49:34.710Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjswwkdpi0019g7wwke1hr58g","content":"<p>php是如何实现内存管理的?内存管理包括内存分配、内存回收、以及内存使用优化。</p>\n<ul>\n<li>内存使用的优化</li>\n<li>垃圾回收机制</li>\n<li>底层内存分配</li>\n</ul>\n<h2 id=\"内存使用的优化\"><a href=\"#内存使用的优化\" class=\"headerlink\" title=\"内存使用的优化\"></a>内存使用的优化</h2><h3 id=\"引用计数\"><a href=\"#引用计数\" class=\"headerlink\" title=\"引用计数\"></a>引用计数</h3><p>php的引用中有个引用结构体</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">struct</span> _zend_reference &#123;</div><div class=\"line\">    zend_refcondted_h gc;</div><div class=\"line\">    zval              val;  指向原来的value.</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>其中<code>zend_refcondted_h</code> 便是gc便是当前变量被引用的次数,这个参数会在变量回收的时候用到。</p>\n<p><code>zend_refcondted_h</code> :</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> _zend_refcounted_h &#123;</div><div class=\"line\">\t<span class=\"keyword\">uint32_t</span>         refcount;\t\t\t<span class=\"comment\">/* reference counter 32-bit */</span></div><div class=\"line\">\t<span class=\"keyword\">union</span> &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">\t\t\tZEND_ENDIAN_LOHI_3(</div><div class=\"line\">\t\t\t\tzend_uchar    type,</div><div class=\"line\">\t\t\t\tzend_uchar    flags,    <span class=\"comment\">/* used for strings &amp; objects */</span></div><div class=\"line\">\t\t\t\t<span class=\"keyword\">uint16_t</span>      gc_info)  <span class=\"comment\">/* keeps GC root number (or 0) and color */</span></div><div class=\"line\">\t\t&#125; v;</div><div class=\"line\">\t\t<span class=\"keyword\">uint32_t</span> type_info;</div><div class=\"line\">\t&#125; u;</div><div class=\"line\">&#125; zend_refcounted_h;</div></pre></td></tr></table></figure>\n<p>在实际中这个结构体到底是什么样的? 具体可以举例来看。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$a = <span class=\"string\">'this is string'</span>; <span class=\"comment\">// zend_array (refcount = 1)  只有$a引用了zend_array</span></div><div class=\"line\">$b = &amp;$a; <span class=\"comment\">//   zend_array (refcount = 2)  $a、$b引用了zend_array</span></div><div class=\"line\">$c = $b; <span class=\"comment\">// zend_array (refcount = 3)  $a、$b、$c引用了zend_array</span></div><div class=\"line\"><span class=\"keyword\">unset</span>($b); <span class=\"comment\">// zend_array (refcount = 2)  $a、$c引用了zend_array</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>并不是所有的变量类型都会使用引用计数, 例如 <code>整形</code>、<code>浮点型</code>、<code>布尔型</code>、<code>NUll</code>(在php中这是一个变量类型)等采用了深拷贝,<br>即只要这几种变量赋值, 就会申请一款一块内存写入一个新的变量结构（注意这里不是引用结构）,当然这些类型不会公用value。</p>\n</blockquote>\n<h3 id=\"写时复制\"><a href=\"#写时复制\" class=\"headerlink\" title=\"写时复制\"></a>写时复制</h3><p>当然只有引用计数是不够的, 因为变量会发生赋值的情况。所以在更改某一个变量时, 会对原来的变量进行拷贝并赋值。</p>\n<p>举个栗子:</p>\n<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$foo</span> = time();</span></div><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$bar</span> = &amp;$b;</span></div><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$si</span> = $a;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$c</span> = '123';</span></div></pre></td></tr></table></figure>\n<p>具体数据结构的引用计数情况如下图:</p>\n<p><img src=\"/photo/img/php内存管理/写时复制.png\" alt=\"image\"></p>\n<h2 id=\"内存回收\"><a href=\"#内存回收\" class=\"headerlink\" title=\"内存回收\"></a>内存回收</h2><h3 id=\"自动gc\"><a href=\"#自动gc\" class=\"headerlink\" title=\"自动gc\"></a>自动gc</h3><p>在zend数据接口中有一个gc.refount,他是自动gc的关键。</p>\n<p>在自动gc机制中,如果zval不在指向value且当前value的gc.refount为0时,会直接释放value。这种情况多发生于函数返回时（销毁所有局部变量）、变量修改时、以及unset操作的时候。</p>\n<h3 id=\"垃圾回收\"><a href=\"#垃圾回收\" class=\"headerlink\" title=\"垃圾回收\"></a>垃圾回收</h3><p>除了自动gc,还有一种是自动gc无法处理的垃圾, 这种情况称为<code>循环引用</code>。顾名思义也就是自身内部变量引用了自身, 这种情况常出现与object和array。当我该变量zval被销毁是, 与其对应的value gc.refcount -1,<br>但是因为有自身变量指向自身, 所以就陷入了一个循环:如果不销毁自身变量 value gc.refcount就无法自动gc, 只有自动gc才会销毁value。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">$a = [<span class=\"number\">1</span>];</div><div class=\"line\">$a[] = &amp;$a;</div><div class=\"line\"><span class=\"keyword\">unset</span>($a);</div></pre></td></tr></table></figure>\n<p><img src=\"/photo/img/php内存管理/自身引用.png\" alt=\"image\"></p>\n<p><code>unset($a)</code>执行以后</p>\n<p><img src=\"/photo/img/php内存管理/释放.png\" alt=\"image\"></p>\n<p>由于\b上述情况导致无法自动gc,所以需要引入另外一钟垃圾回收机制-垃圾回收器。<br>现在会存在两种情况的数据需要回收：</p>\n<ul>\n<li>当value的gc.refcount =0 是需要回收。</li>\n<li>当value的gc.refcount 减少不等于0，但是存在循环引用时。</li>\n</ul>\n<h3 id=\"回收机制\"><a href=\"#回收机制\" class=\"headerlink\" title=\"回收机制\"></a>回收机制</h3><p>当发生value gc.refcount减少时，垃圾回收机制会把可能是垃圾的value存起来， 当可能是垃圾的value到达一定数量的时候启动垃圾鉴别程序，统一处理垃圾。当然这里的value类型只有object和array。</p>\n<p>垃圾兼备程序：<br>其实垃圾鉴别程序很简单，递归遍历自身value，查看是否存在指向自身的即可。</p>\n<p>code:<br>gc 初始化<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">ZEND_API void gc_init(void)</div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (GC_G(buf) == <span class=\"keyword\">NULL</span> &amp;&amp; GC_G(gc_enabled)) &#123;</div><div class=\"line\">\t\t<span class=\"comment\">//初始化buf\b内存区域，大小为sizeof(gc_root_buffer) * //GC_ROOT_BUFFER_MAX_ENTRIES</span></div><div class=\"line\">\t\tGC_G(buf) = (gc_root_buffer*) malloc(sizeof(gc_root_buffer) * GC_ROOT_BUFFER_MAX_ENTRIES);</div><div class=\"line\">\t\t<span class=\"comment\">//设置_zend_gc_globals.last_unused为\b\bbug入口位置</span></div><div class=\"line\">\t\tGC_G(last_unused) = &amp;GC_G(buf)[GC_ROOT_BUFFER_MAX_ENTRIES];</div><div class=\"line\">\t\t<span class=\"comment\">//初始化_zend_gc_globals的参数</span></div><div class=\"line\">\t\tgc_reset();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>垃圾回收及其依赖 <code>_zend_gc_globals</code></p>\n<p><code>_zend_gc_globals</code><br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> _zend_gc_globals &#123;</div><div class=\"line\">\tzend_bool         gc_enabled;</div><div class=\"line\">\tzend_bool         gc_active;</div><div class=\"line\">\tzend_bool         gc_full;</div><div class=\"line\"></div><div class=\"line\">\tgc_root_buffer   *buf;\t\t\t\t<span class=\"comment\">/* preallocated arrays of buffers   */</span></div><div class=\"line\">\tgc_root_buffer    roots;\t\t\t<span class=\"comment\">/* list of possible roots of cycles */</span></div><div class=\"line\">\tgc_root_buffer   *unused;\t\t\t<span class=\"comment\">/* list of unused buffers           */</span></div><div class=\"line\">\tgc_root_buffer   *first_unused;\t\t<span class=\"comment\">/* pointer to first unused buffer   */</span></div><div class=\"line\">\tgc_root_buffer   *last_unused;\t\t<span class=\"comment\">/* pointer to last unused buffer    */</span></div><div class=\"line\"></div><div class=\"line\">\tgc_root_buffer    to_free;\t\t\t<span class=\"comment\">/* list to free                     */</span></div><div class=\"line\">\tgc_root_buffer   *next_to_free;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">uint32_t</span> gc_runs;</div><div class=\"line\">\t<span class=\"keyword\">uint32_t</span> collected;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> GC_BENCH</span></div><div class=\"line\">\t<span class=\"keyword\">uint32_t</span> root_buf_length;</div><div class=\"line\">\t<span class=\"keyword\">uint32_t</span> root_buf_peak;</div><div class=\"line\">\t<span class=\"keyword\">uint32_t</span> zval_possible_root;</div><div class=\"line\">\t<span class=\"keyword\">uint32_t</span> zval_buffered;</div><div class=\"line\">\t<span class=\"keyword\">uint32_t</span> zval_remove_from_buffer;</div><div class=\"line\">\t<span class=\"keyword\">uint32_t</span> zval_marked_grey;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\"></div><div class=\"line\">\tgc_additional_buffer *additional_buffer;</div><div class=\"line\"></div><div class=\"line\">&#125; zend_gc_globals;</div></pre></td></tr></table></figure></p>\n<ul>\n<li><code>gc_enabled</code> 是否使使用gc</li>\n<li><code>gc_active</code>  是否在垃圾检查的过程中</li>\n<li><code>gc_full</code> buf缓冲区是否已满</li>\n<li><code>*buf</code> 与分配用于保存可能为垃圾的value</li>\n<li><code>roots</code> 指向buf最新加入的一个可能垃圾</li>\n<li><code>unused</code> 指向第未使用的buffer</li>\n<li><code>*first_unused</code> 指向第一个没用使用buffer</li>\n<li><code>*last_unused</code> 指向buffer的尾部</li>\n<li><code>to_free</code> 等待释放的buffer</li>\n<li><code>gc_runs</code>  统计gc运行的次数</li>\n<li><code>collected</code>  统计已经释放的垃圾数</li>\n</ul>\n<p>php垃圾回收中几个重要的颜色写在zeng_gc的备注中。<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">* BLACK  (GC_BLACK)   - In use or <span class=\"built_in\">free</span>.</div><div class=\"line\">* GREY   (GC_GREY)    - Possible member of cycle.</div><div class=\"line\">* WHITE  (GC_WHITE)   - Member of garbage cycle.</div><div class=\"line\">* PURPLE (GC_PURPLE)  - Possible root of cycle.</div></pre></td></tr></table></figure></p>\n<ul>\n<li>GC_WHITE 白色表示垃圾</li>\n<li>GC_PURPLE 紫色表示已放入缓冲区</li>\n<li>GC_GREY 灰色表示已经进行了一次refcount的减一操作</li>\n<li>GC_BLACK 黑色是默认颜色，正常</li>\n</ul>\n<p>gc过程中主要处理功能的函数<code>zend_gc_collect_cycles</code></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\">ZEND_API <span class=\"keyword\">void</span> ZEND_FASTCALL <span class=\"title\">gc_possible_root</span><span class=\"params\">(zend_refcounted *ref)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\tgc_root_buffer *newRoot;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> (UNEXPECTED(CG(unclean_shutdown)) || UNEXPECTED(GC_G(gc_active))) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tZEND_ASSERT(GC_TYPE(ref) == IS_ARRAY || GC_TYPE(ref) == IS_OBJECT);</div><div class=\"line\">\tZEND_ASSERT(EXPECTED(GC_REF_GET_COLOR(ref) == GC_BLACK));</div><div class=\"line\">\tZEND_ASSERT(!GC_ADDRESS(GC_INFO(ref)));</div><div class=\"line\"></div><div class=\"line\">\tGC_BENCH_INC(zval_possible_root);</div><div class=\"line\"></div><div class=\"line\">\tnewRoot = GC_G(unused);</div><div class=\"line\">\t<span class=\"keyword\">if</span> (newRoot) &#123;</div><div class=\"line\">\t\tGC_G(unused) = newRoot-&gt;prev;</div><div class=\"line\">\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (GC_G(first_unused) != GC_G(last_unused)) &#123;</div><div class=\"line\">\t\tnewRoot = GC_G(first_unused);</div><div class=\"line\">\t\tGC_G(first_unused)++;</div><div class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t<span class=\"comment\">//垃圾处理，当缓冲区满时，程序调用gc_collect_cycles函数，执行垃圾回收操作。 其中最关键的几步就是</span></div><div class=\"line\">\t\t<span class=\"comment\">//如果当前处于可以gc的状态</span></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (!GC_G(gc_enabled)) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tGC_REFCOUNT(ref)++;</div><div class=\"line\">\t\t<span class=\"comment\">//垃圾回收</span></div><div class=\"line\">\t\tgc_collect_cycles();</div><div class=\"line\">\t\tGC_REFCOUNT(ref)--;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (UNEXPECTED(GC_REFCOUNT(ref)) == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">\t\t\tzval_dtor_func(ref);</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (UNEXPECTED(GC_INFO(ref))) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tnewRoot = GC_G(unused);</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (!newRoot) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tGC_G(unused) = newRoot-&gt;prev;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tGC_TRACE_SET_COLOR(ref, GC_PURPLE);</div><div class=\"line\">\tGC_INFO(ref) = (newRoot - GC_G(buf)) | GC_PURPLE;</div><div class=\"line\">\tnewRoot-&gt;ref = ref;</div><div class=\"line\"></div><div class=\"line\">\tnewRoot-&gt;next = GC_G(roots).next;</div><div class=\"line\">\tnewRoot-&gt;prev = &amp;GC_G(roots);</div><div class=\"line\">\tGC_G(roots).next-&gt;prev = newRoot;</div><div class=\"line\">\tGC_G(roots).next = newRoot;</div><div class=\"line\"></div><div class=\"line\">\tGC_BENCH_INC(zval_buffered);</div><div class=\"line\">\tGC_BENCH_INC(root_buf_length);</div><div class=\"line\">\tGC_BENCH_PEAK(root_buf_peak, root_buf_length);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol>\n<li>\b深度优先对对象或者数据的每一个元素的<code>refcount--</code>并将其标记为灰色</li>\n<li>深度遍历root的每个每个变量，如果此时变量的<code>refcount</code>为0，则代表着改变量为垃圾，将其标记为垃圾，如果不为0，则将其标记为黑色（正常）。</li>\n<li>检查roots清除标记为白色的垃圾。</li>\n</ol>\n<p>//TODO 垃圾回收抽出来出来写。</p>\n<p>具体代码：<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div></pre></td><td class=\"code\"><pre><div class=\"line\">ZEND_API int zend_gc_collect_cycles(void)</div><div class=\"line\">&#123;</div><div class=\"line\">\tint count = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> (GC_G(roots).next != &amp;GC_G(roots)) &#123;</div><div class=\"line\">\t\tgc_root_buffer *current, *next, *orig_next_to_free;</div><div class=\"line\">\t\tzend_refcounted *p;</div><div class=\"line\">\t\tgc_root_buffer to_free;</div><div class=\"line\">\t\tuint32_t gc_flags = <span class=\"number\">0</span>;</div><div class=\"line\">\t\tgc_additional_buffer *additional_buffer_snapshot;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (GC_G(gc_active)) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\tGC_TRACE(<span class=\"string\">\"Collecting cycles\"</span>);</div><div class=\"line\">\t\t<span class=\"comment\">//标识gc运行了多少次</span></div><div class=\"line\">\t\tGC_G(gc_runs)++;</div><div class=\"line\">\t\t<span class=\"comment\">//标识当前正在gc</span></div><div class=\"line\">\t\tGC_G(gc_active) = <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\">\t\tGC_TRACE(<span class=\"string\">\"Marking roots\"</span>);</div><div class=\"line\">\t\t<span class=\"comment\">//重点</span></div><div class=\"line\">\t\tgc_mark_roots();</div><div class=\"line\">\t\tGC_TRACE(<span class=\"string\">\"Scanning roots\"</span>);</div><div class=\"line\">\t\t<span class=\"comment\">//重点</span></div><div class=\"line\">\t\tgc_scan_roots();</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">\t\tGC_TRACE(<span class=\"string\">\"Collecting roots\"</span>);</div><div class=\"line\">\t\tadditional_buffer_snapshot = GC_G(additional_buffer);</div><div class=\"line\">\t\tcount = gc_collect_roots(&amp;gc_flags);</div><div class=\"line\"></div><div class=\"line\">\t\tGC_G(gc_active) = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (GC_G(to_free).next == &amp;GC_G(to_free)) &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">/* nothing to free */</span></div><div class=\"line\">\t\t\tGC_TRACE(<span class=\"string\">\"Nothing to free\"</span>);</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"comment\">/* Copy global to_free list into local list */</span></div><div class=\"line\">\t\tto_free.next = GC_G(to_free).next;</div><div class=\"line\">\t\tto_free.prev = GC_G(to_free).prev;</div><div class=\"line\">\t\tto_free.next-&gt;prev = &amp;to_free;</div><div class=\"line\">\t\tto_free.prev-&gt;next = &amp;to_free;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"comment\">/* Free global list */</span></div><div class=\"line\">\t\tGC_G(to_free).next = &amp;GC_G(to_free);</div><div class=\"line\">\t\tGC_G(to_free).prev = &amp;GC_G(to_free);</div><div class=\"line\"></div><div class=\"line\">\t\torig_next_to_free = GC_G(next_to_free);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (gc_flags &amp; GC_HAS_DESTRUCTORS) &#123;</div><div class=\"line\">\t\t\tGC_TRACE(<span class=\"string\">\"Calling destructors\"</span>);</div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"comment\">/* Remember reference counters before calling destructors */</span></div><div class=\"line\">\t\t\tcurrent = to_free.next;</div><div class=\"line\">\t\t\t<span class=\"keyword\">while</span> (current != &amp;to_free) &#123;</div><div class=\"line\">\t\t\t\tcurrent-&gt;refcount = GC_REFCOUNT(current-&gt;ref);</div><div class=\"line\">\t\t\t\tcurrent = current-&gt;next;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"comment\">/* Call destructors */</span></div><div class=\"line\">\t\t\tcurrent = to_free.next;</div><div class=\"line\">\t\t\t<span class=\"keyword\">while</span> (current != &amp;to_free) &#123;</div><div class=\"line\">\t\t\t\tp = current-&gt;ref;</div><div class=\"line\">\t\t\t\tGC_G(next_to_free) = current-&gt;next;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (GC_TYPE(p) == IS_OBJECT) &#123;</div><div class=\"line\">\t\t\t\t\tzend_object *obj = (zend_object*)p;</div><div class=\"line\"></div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (!(GC_FLAGS(obj) &amp; IS_OBJ_DESTRUCTOR_CALLED)) &#123;</div><div class=\"line\">\t\t\t\t\t\tGC_TRACE_REF(obj, <span class=\"string\">\"calling destructor\"</span>);</div><div class=\"line\">\t\t\t\t\t\tGC_FLAGS(obj) |= IS_OBJ_DESTRUCTOR_CALLED;</div><div class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">if</span> (obj-&gt;handlers-&gt;dtor_obj</div><div class=\"line\">\t\t\t\t\t\t &amp;&amp; (obj-&gt;handlers-&gt;dtor_obj != zend_objects_destroy_object</div><div class=\"line\">\t\t\t\t\t\t  || obj-&gt;ce-&gt;destructor)) &#123;</div><div class=\"line\">\t\t\t\t\t\t\tGC_REFCOUNT(obj)++;</div><div class=\"line\">\t\t\t\t\t\t\tobj-&gt;handlers-&gt;dtor_obj(obj);</div><div class=\"line\">\t\t\t\t\t\t\tGC_REFCOUNT(obj)--;</div><div class=\"line\">\t\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\tcurrent = GC_G(next_to_free);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"comment\">/* Remove values captured in destructors */</span></div><div class=\"line\">\t\t\tcurrent = to_free.next;</div><div class=\"line\">\t\t\t<span class=\"keyword\">while</span> (current != &amp;to_free) &#123;</div><div class=\"line\">\t\t\t\tGC_G(next_to_free) = current-&gt;next;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (GC_REFCOUNT(current-&gt;ref) &gt; current-&gt;refcount) &#123;</div><div class=\"line\">\t\t\t\t\tgc_remove_nested_data_from_buffer(current-&gt;ref, current);</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\tcurrent = GC_G(next_to_free);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"comment\">/* Destroy zvals */</span></div><div class=\"line\">\t\tGC_TRACE(<span class=\"string\">\"Destroying zvals\"</span>);</div><div class=\"line\">\t\tGC_G(gc_active) = <span class=\"number\">1</span>;</div><div class=\"line\">\t\tcurrent = to_free.next;</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (current != &amp;to_free) &#123;</div><div class=\"line\">\t\t\tp = current-&gt;ref;</div><div class=\"line\">\t\t\tGC_G(next_to_free) = current-&gt;next;</div><div class=\"line\">\t\t\tGC_TRACE_REF(p, <span class=\"string\">\"destroying\"</span>);</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (GC_TYPE(p) == IS_OBJECT) &#123;</div><div class=\"line\">\t\t\t\tzend_object *obj = (zend_object*)p;</div><div class=\"line\"></div><div class=\"line\">\t\t\t\tEG(objects_store).object_buckets[obj-&gt;handle] = SET_OBJ_INVALID(obj);</div><div class=\"line\">\t\t\t\tGC_TYPE(obj) = IS_NULL;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (!(GC_FLAGS(obj) &amp; IS_OBJ_FREE_CALLED)) &#123;</div><div class=\"line\">\t\t\t\t\tGC_FLAGS(obj) |= IS_OBJ_FREE_CALLED;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (obj-&gt;handlers-&gt;free_obj) &#123;</div><div class=\"line\">\t\t\t\t\t\tGC_REFCOUNT(obj)++;</div><div class=\"line\">\t\t\t\t\t\tobj-&gt;handlers-&gt;free_obj(obj);</div><div class=\"line\">\t\t\t\t\t\tGC_REFCOUNT(obj)--;</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\tSET_OBJ_BUCKET_NUMBER(EG(objects_store).object_buckets[obj-&gt;handle], EG(objects_store).free_list_head);</div><div class=\"line\">\t\t\t\tEG(objects_store).free_list_head = obj-&gt;handle;</div><div class=\"line\">\t\t\t\tp = current-&gt;ref = (zend_refcounted*)(((char*)obj) - obj-&gt;handlers-&gt;offset);</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (GC_TYPE(p) == IS_ARRAY) &#123;</div><div class=\"line\">\t\t\t\tzend_array *arr = (zend_array*)p;</div><div class=\"line\"></div><div class=\"line\">\t\t\t\tGC_TYPE(arr) = IS_NULL;</div><div class=\"line\"></div><div class=\"line\">\t\t\t\t<span class=\"comment\">/* GC may destroy arrays with rc&gt;1. This is valid and safe. */</span></div><div class=\"line\">\t\t\t\tHT_ALLOW_COW_VIOLATION(arr);</div><div class=\"line\"></div><div class=\"line\">\t\t\t\tzend_hash_destroy(arr);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\tcurrent = GC_G(next_to_free);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"comment\">/* Free objects */</span></div><div class=\"line\">\t\tcurrent = to_free.next;</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (current != &amp;to_free) &#123;</div><div class=\"line\">\t\t\tnext = current-&gt;next;</div><div class=\"line\">\t\t\tp = current-&gt;ref;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (EXPECTED(current &gt;= GC_G(buf) &amp;&amp; current &lt; GC_G(buf) + GC_ROOT_BUFFER_MAX_ENTRIES)) &#123;</div><div class=\"line\">\t\t\t\tcurrent-&gt;prev = GC_G(unused);</div><div class=\"line\">\t\t\t\tGC_G(unused) = current;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\tefree(p);</div><div class=\"line\">\t\t\tcurrent = next;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (GC_G(additional_buffer) != additional_buffer_snapshot) &#123;</div><div class=\"line\">\t\t\tgc_additional_buffer *next = GC_G(additional_buffer)-&gt;next;</div><div class=\"line\">\t\t\tefree(GC_G(additional_buffer));</div><div class=\"line\">\t\t\tGC_G(additional_buffer) = next;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\tGC_TRACE(<span class=\"string\">\"Collection finished\"</span>);</div><div class=\"line\">\t\tGC_G(collected) += count;</div><div class=\"line\">\t\tGC_G(next_to_free) = orig_next_to_free;</div><div class=\"line\">\t\tGC_G(gc_active) = <span class=\"number\">0</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">return</span> count;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">gc_mark_roots</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\tgc_root_buffer *current = GC_G(roots).next;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">while</span> (current != &amp;GC_G(roots)) &#123;</div><div class=\"line\">\t\t<span class=\"comment\">//GC_PURPLE 标识在缓冲区</span></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (GC_REF_GET_COLOR(current-&gt;ref) == GC_PURPLE) &#123;</div><div class=\"line\">\t\t\tgc_mark_grey(current-&gt;ref);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tcurrent = current-&gt;next;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">gc_mark_grey</span><span class=\"params\">(zend_refcounted *ref)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    HashTable *ht;</div><div class=\"line\">\tBucket *p, *end;</div><div class=\"line\">\tzval *zv;</div><div class=\"line\"></div><div class=\"line\">tail_call:</div><div class=\"line\">\t<span class=\"keyword\">if</span> (GC_REF_GET_COLOR(ref) != GC_GREY) &#123;</div><div class=\"line\">\t\tht = <span class=\"literal\">NULL</span>;</div><div class=\"line\">\t\tGC_BENCH_INC(zval_marked_grey);</div><div class=\"line\">\t\tGC_REF_SET_COLOR(ref, GC_GREY);</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (GC_TYPE(ref) == IS_OBJECT) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">zend_object_get_gc_t</span> get_gc;</div><div class=\"line\">\t\t\tzend_object *obj = (zend_object*)ref;</div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (EXPECTED(!(GC_FLAGS(ref) &amp; IS_OBJ_FREE_CALLED) &amp;&amp;</div><div class=\"line\">\t\t                 (get_gc = obj-&gt;handlers-&gt;get_gc) != <span class=\"literal\">NULL</span>)) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> n;</div><div class=\"line\">\t\t\t\tzval *zv, *end;</div><div class=\"line\">\t\t\t\tzval tmp;</div><div class=\"line\"></div><div class=\"line\">\t\t\t\tZVAL_OBJ(&amp;tmp, obj);</div><div class=\"line\">\t\t\t\tht = get_gc(&amp;tmp, &amp;zv, &amp;n);</div><div class=\"line\">\t\t\t\tend = zv + n;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (EXPECTED(!ht)) &#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (!n) <span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">while</span> (!Z_REFCOUNTED_P(--end)) &#123;</div><div class=\"line\">\t\t\t\t\t\t<span class=\"comment\">//表明当前object size为0</span></div><div class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">if</span> (zv == end) <span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">while</span> (zv != end) &#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"comment\">//循环对每个元素进行--</span></div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (Z_REFCOUNTED_P(zv)) &#123;</div><div class=\"line\">\t\t\t\t\t\tref = Z_COUNTED_P(zv);</div><div class=\"line\">\t\t\t\t\t\tGC_REFCOUNT(ref)--;</div><div class=\"line\">\t\t\t\t\t\t<span class=\"comment\">//refcount已经减过，标记为灰色</span></div><div class=\"line\">\t\t\t\t\t\tgc_mark_grey(ref);</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t\tzv++;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (EXPECTED(!ht)) &#123;</div><div class=\"line\">\t\t\t\t\tref = Z_COUNTED_P(zv);</div><div class=\"line\">\t\t\t\t\tGC_REFCOUNT(ref)--;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">goto</span> tail_call;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (GC_TYPE(ref) == IS_ARRAY) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (((zend_array*)ref) == &amp;EG(symbol_table)) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"comment\">//标识是正常非垃圾</span></div><div class=\"line\">\t\t\t\tGC_REF_SET_BLACK(ref);</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t\tht = (zend_array*)ref;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (GC_TYPE(ref) == IS_REFERENCE) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (Z_REFCOUNTED(((zend_reference*)ref)-&gt;val)) &#123;</div><div class=\"line\">\t\t\t\tref = Z_COUNTED(((zend_reference*)ref)-&gt;val);</div><div class=\"line\">\t\t\t\tGC_REFCOUNT(ref)--;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">goto</span> tail_call;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (!ht-&gt;nNumUsed) <span class=\"keyword\">return</span>;</div><div class=\"line\">\t\tp = ht-&gt;arData;</div><div class=\"line\">\t\tend = p + ht-&gt;nNumUsed;</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (<span class=\"number\">1</span>) &#123;</div><div class=\"line\">\t\t\tend--;</div><div class=\"line\">\t\t\tzv = &amp;end-&gt;val;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (Z_TYPE_P(zv) == IS_INDIRECT) &#123;</div><div class=\"line\">\t\t\t\tzv = Z_INDIRECT_P(zv);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (Z_REFCOUNTED_P(zv)) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (p == end) <span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (p != end) &#123;</div><div class=\"line\">\t\t\tzv = &amp;p-&gt;val;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (Z_TYPE_P(zv) == IS_INDIRECT) &#123;</div><div class=\"line\">\t\t\t\tzv = Z_INDIRECT_P(zv);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (Z_REFCOUNTED_P(zv)) &#123;</div><div class=\"line\">\t\t\t\tref = Z_COUNTED_P(zv);</div><div class=\"line\">\t\t\t\tGC_REFCOUNT(ref)--;</div><div class=\"line\">\t\t\t\tgc_mark_grey(ref);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\tp++;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tzv = &amp;p-&gt;val;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (Z_TYPE_P(zv) == IS_INDIRECT) &#123;</div><div class=\"line\">\t\t\tzv = Z_INDIRECT_P(zv);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tref = Z_COUNTED_P(zv);</div><div class=\"line\">\t\tGC_REFCOUNT(ref)--;</div><div class=\"line\">\t\t<span class=\"keyword\">goto</span> tail_call;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">gc_scan</span><span class=\"params\">(zend_refcounted *ref)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    HashTable *ht;</div><div class=\"line\">\tBucket *p, *end;</div><div class=\"line\">\tzval *zv;</div><div class=\"line\"></div><div class=\"line\">tail_call:</div><div class=\"line\">\t<span class=\"keyword\">if</span> (GC_REF_GET_COLOR(ref) == GC_GREY) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (GC_REFCOUNT(ref) &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">//所有refount--以后如果还&gt;0，说明非垃圾</span></div><div class=\"line\">\t\t\tgc_scan_black(ref);</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">//否则则为垃圾</span></div><div class=\"line\">\t\t\tGC_REF_SET_COLOR(ref, GC_WHITE);</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (GC_TYPE(ref) == IS_OBJECT) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">zend_object_get_gc_t</span> get_gc;</div><div class=\"line\">\t\t\t\tzend_object *obj = (zend_object*)ref;</div><div class=\"line\"></div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (EXPECTED(!(GC_FLAGS(ref) &amp; IS_OBJ_FREE_CALLED) &amp;&amp;</div><div class=\"line\">\t\t\t\t             (get_gc = obj-&gt;handlers-&gt;get_gc) != <span class=\"literal\">NULL</span>)) &#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">int</span> n;</div><div class=\"line\">\t\t\t\t\tzval *zv, *end;</div><div class=\"line\">\t\t\t\t\tzval tmp;</div><div class=\"line\"></div><div class=\"line\">\t\t\t\t\tZVAL_OBJ(&amp;tmp, obj);</div><div class=\"line\">\t\t\t\t\tht = get_gc(&amp;tmp, &amp;zv, &amp;n);</div><div class=\"line\">\t\t\t\t\tend = zv + n;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (EXPECTED(!ht)) &#123;</div><div class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">if</span> (!n) <span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">while</span> (!Z_REFCOUNTED_P(--end)) &#123;</div><div class=\"line\">\t\t\t\t\t\t\t<span class=\"keyword\">if</span> (zv == end) <span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">while</span> (zv != end) &#123;</div><div class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">if</span> (Z_REFCOUNTED_P(zv)) &#123;</div><div class=\"line\">\t\t\t\t\t\t\tref = Z_COUNTED_P(zv);</div><div class=\"line\">\t\t\t\t\t\t\tgc_scan(ref);</div><div class=\"line\">\t\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t\t\tzv++;</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (EXPECTED(!ht)) &#123;</div><div class=\"line\">\t\t\t\t\t\tref = Z_COUNTED_P(zv);</div><div class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">goto</span> tail_call;</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (GC_TYPE(ref) == IS_ARRAY) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> ((zend_array*)ref == &amp;EG(symbol_table)) &#123;</div><div class=\"line\">\t\t\t\t\tGC_REF_SET_BLACK(ref);</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t\t\tht = (zend_array*)ref;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (GC_TYPE(ref) == IS_REFERENCE) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (Z_REFCOUNTED(((zend_reference*)ref)-&gt;val)) &#123;</div><div class=\"line\">\t\t\t\t\tref = Z_COUNTED(((zend_reference*)ref)-&gt;val);</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">goto</span> tail_call;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!ht-&gt;nNumUsed) <span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t\tp = ht-&gt;arData;</div><div class=\"line\">\t\t\tend = p + ht-&gt;nNumUsed;</div><div class=\"line\">\t\t\t<span class=\"keyword\">while</span> (<span class=\"number\">1</span>) &#123;</div><div class=\"line\">\t\t\t\tend--;</div><div class=\"line\">\t\t\t\tzv = &amp;end-&gt;val;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (Z_TYPE_P(zv) == IS_INDIRECT) &#123;</div><div class=\"line\">\t\t\t\t\tzv = Z_INDIRECT_P(zv);</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (Z_REFCOUNTED_P(zv)) &#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (p == end) <span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">while</span> (p != end) &#123;</div><div class=\"line\">\t\t\t\tzv = &amp;p-&gt;val;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (Z_TYPE_P(zv) == IS_INDIRECT) &#123;</div><div class=\"line\">\t\t\t\t\tzv = Z_INDIRECT_P(zv);</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (Z_REFCOUNTED_P(zv)) &#123;</div><div class=\"line\">\t\t\t\t\tref = Z_COUNTED_P(zv);</div><div class=\"line\">\t\t\t\t\tgc_scan(ref);</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\tp++;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\tzv = &amp;p-&gt;val;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (Z_TYPE_P(zv) == IS_INDIRECT) &#123;</div><div class=\"line\">\t\t\t\tzv = Z_INDIRECT_P(zv);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\tref = Z_COUNTED_P(zv);</div><div class=\"line\">\t\t\t<span class=\"keyword\">goto</span> tail_call;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>主要为三个函数：</p>\n<ul>\n<li><code>gc_mark_roots</code>队规遍历，对object、array所有元素的refcount–并将其标记为灰色</li>\n<li><code>gc_scan_roots</code>这个函数对节点信息的链表再次进行深度优先遍历，如果发现zval的refcount大于等于1，则对该zval和其包含的zval的refcount加1操作，这个是对非垃圾的一个信息还原，然后将这些zval颜色属性去掉(设置成black)。如果发现zval的refcount等于0，则就标记成白色，这些是后面将要清理掉的垃圾。</li>\n<li><code>gc_collect_roots</code> 遍历节点信息链表,将前面一个步骤中标记为白色的节点信息放到GC_G(zval_to_free)为入口的链表中，这个链表用来存放将要释放的垃圾。 然后释放掉全部的节点信息，缓冲区被清空。分析结束后将重新收集节点信息。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>php是如何实现内存管理的?内存管理包括内存分配、内存回收、以及内存使用优化。</p>\n<ul>\n<li>内存使用的优化</li>\n<li>垃圾回收机制</li>\n<li>底层内存分配</li>\n</ul>\n<h2 id=\"内存使用的优化\"><a href=\"#内存使用的优化\" class=\"headerlink\" title=\"内存使用的优化\"></a>内存使用的优化</h2><h3 id=\"引用计数\"><a href=\"#引用计数\" class=\"headerlink\" title=\"引用计数\"></a>引用计数</h3><p>php的引用中有个引用结构体</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">struct</span> _zend_reference &#123;</div><div class=\"line\">    zend_refcondted_h gc;</div><div class=\"line\">    zval              val;  指向原来的value.</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>其中<code>zend_refcondted_h</code> 便是gc便是当前变量被引用的次数,这个参数会在变量回收的时候用到。</p>\n<p><code>zend_refcondted_h</code> :</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> _zend_refcounted_h &#123;</div><div class=\"line\">\t<span class=\"keyword\">uint32_t</span>         refcount;\t\t\t<span class=\"comment\">/* reference counter 32-bit */</span></div><div class=\"line\">\t<span class=\"keyword\">union</span> &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">\t\t\tZEND_ENDIAN_LOHI_3(</div><div class=\"line\">\t\t\t\tzend_uchar    type,</div><div class=\"line\">\t\t\t\tzend_uchar    flags,    <span class=\"comment\">/* used for strings &amp; objects */</span></div><div class=\"line\">\t\t\t\t<span class=\"keyword\">uint16_t</span>      gc_info)  <span class=\"comment\">/* keeps GC root number (or 0) and color */</span></div><div class=\"line\">\t\t&#125; v;</div><div class=\"line\">\t\t<span class=\"keyword\">uint32_t</span> type_info;</div><div class=\"line\">\t&#125; u;</div><div class=\"line\">&#125; zend_refcounted_h;</div></pre></td></tr></table></figure>\n<p>在实际中这个结构体到底是什么样的? 具体可以举例来看。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$a = <span class=\"string\">'this is string'</span>; <span class=\"comment\">// zend_array (refcount = 1)  只有$a引用了zend_array</span></div><div class=\"line\">$b = &amp;$a; <span class=\"comment\">//   zend_array (refcount = 2)  $a、$b引用了zend_array</span></div><div class=\"line\">$c = $b; <span class=\"comment\">// zend_array (refcount = 3)  $a、$b、$c引用了zend_array</span></div><div class=\"line\"><span class=\"keyword\">unset</span>($b); <span class=\"comment\">// zend_array (refcount = 2)  $a、$c引用了zend_array</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>并不是所有的变量类型都会使用引用计数, 例如 <code>整形</code>、<code>浮点型</code>、<code>布尔型</code>、<code>NUll</code>(在php中这是一个变量类型)等采用了深拷贝,<br>即只要这几种变量赋值, 就会申请一款一块内存写入一个新的变量结构（注意这里不是引用结构）,当然这些类型不会公用value。</p>\n</blockquote>\n<h3 id=\"写时复制\"><a href=\"#写时复制\" class=\"headerlink\" title=\"写时复制\"></a>写时复制</h3><p>当然只有引用计数是不够的, 因为变量会发生赋值的情况。所以在更改某一个变量时, 会对原来的变量进行拷贝并赋值。</p>\n<p>举个栗子:</p>\n<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$foo</span> = time();</span></div><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$bar</span> = &amp;$b;</span></div><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$si</span> = $a;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$c</span> = '123';</span></div></pre></td></tr></table></figure>\n<p>具体数据结构的引用计数情况如下图:</p>\n<p><img src=\"/photo/img/php内存管理/写时复制.png\" alt=\"image\"></p>\n<h2 id=\"内存回收\"><a href=\"#内存回收\" class=\"headerlink\" title=\"内存回收\"></a>内存回收</h2><h3 id=\"自动gc\"><a href=\"#自动gc\" class=\"headerlink\" title=\"自动gc\"></a>自动gc</h3><p>在zend数据接口中有一个gc.refount,他是自动gc的关键。</p>\n<p>在自动gc机制中,如果zval不在指向value且当前value的gc.refount为0时,会直接释放value。这种情况多发生于函数返回时（销毁所有局部变量）、变量修改时、以及unset操作的时候。</p>\n<h3 id=\"垃圾回收\"><a href=\"#垃圾回收\" class=\"headerlink\" title=\"垃圾回收\"></a>垃圾回收</h3><p>除了自动gc,还有一种是自动gc无法处理的垃圾, 这种情况称为<code>循环引用</code>。顾名思义也就是自身内部变量引用了自身, 这种情况常出现与object和array。当我该变量zval被销毁是, 与其对应的value gc.refcount -1,<br>但是因为有自身变量指向自身, 所以就陷入了一个循环:如果不销毁自身变量 value gc.refcount就无法自动gc, 只有自动gc才会销毁value。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">$a = [<span class=\"number\">1</span>];</div><div class=\"line\">$a[] = &amp;$a;</div><div class=\"line\"><span class=\"keyword\">unset</span>($a);</div></pre></td></tr></table></figure>\n<p><img src=\"/photo/img/php内存管理/自身引用.png\" alt=\"image\"></p>\n<p><code>unset($a)</code>执行以后</p>\n<p><img src=\"/photo/img/php内存管理/释放.png\" alt=\"image\"></p>\n<p>由于\b上述情况导致无法自动gc,所以需要引入另外一钟垃圾回收机制-垃圾回收器。<br>现在会存在两种情况的数据需要回收：</p>\n<ul>\n<li>当value的gc.refcount =0 是需要回收。</li>\n<li>当value的gc.refcount 减少不等于0，但是存在循环引用时。</li>\n</ul>\n<h3 id=\"回收机制\"><a href=\"#回收机制\" class=\"headerlink\" title=\"回收机制\"></a>回收机制</h3><p>当发生value gc.refcount减少时，垃圾回收机制会把可能是垃圾的value存起来， 当可能是垃圾的value到达一定数量的时候启动垃圾鉴别程序，统一处理垃圾。当然这里的value类型只有object和array。</p>\n<p>垃圾兼备程序：<br>其实垃圾鉴别程序很简单，递归遍历自身value，查看是否存在指向自身的即可。</p>\n<p>code:<br>gc 初始化<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">ZEND_API void gc_init(void)</div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (GC_G(buf) == <span class=\"keyword\">NULL</span> &amp;&amp; GC_G(gc_enabled)) &#123;</div><div class=\"line\">\t\t<span class=\"comment\">//初始化buf\b内存区域，大小为sizeof(gc_root_buffer) * //GC_ROOT_BUFFER_MAX_ENTRIES</span></div><div class=\"line\">\t\tGC_G(buf) = (gc_root_buffer*) malloc(sizeof(gc_root_buffer) * GC_ROOT_BUFFER_MAX_ENTRIES);</div><div class=\"line\">\t\t<span class=\"comment\">//设置_zend_gc_globals.last_unused为\b\bbug入口位置</span></div><div class=\"line\">\t\tGC_G(last_unused) = &amp;GC_G(buf)[GC_ROOT_BUFFER_MAX_ENTRIES];</div><div class=\"line\">\t\t<span class=\"comment\">//初始化_zend_gc_globals的参数</span></div><div class=\"line\">\t\tgc_reset();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>垃圾回收及其依赖 <code>_zend_gc_globals</code></p>\n<p><code>_zend_gc_globals</code><br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> _zend_gc_globals &#123;</div><div class=\"line\">\tzend_bool         gc_enabled;</div><div class=\"line\">\tzend_bool         gc_active;</div><div class=\"line\">\tzend_bool         gc_full;</div><div class=\"line\"></div><div class=\"line\">\tgc_root_buffer   *buf;\t\t\t\t<span class=\"comment\">/* preallocated arrays of buffers   */</span></div><div class=\"line\">\tgc_root_buffer    roots;\t\t\t<span class=\"comment\">/* list of possible roots of cycles */</span></div><div class=\"line\">\tgc_root_buffer   *unused;\t\t\t<span class=\"comment\">/* list of unused buffers           */</span></div><div class=\"line\">\tgc_root_buffer   *first_unused;\t\t<span class=\"comment\">/* pointer to first unused buffer   */</span></div><div class=\"line\">\tgc_root_buffer   *last_unused;\t\t<span class=\"comment\">/* pointer to last unused buffer    */</span></div><div class=\"line\"></div><div class=\"line\">\tgc_root_buffer    to_free;\t\t\t<span class=\"comment\">/* list to free                     */</span></div><div class=\"line\">\tgc_root_buffer   *next_to_free;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">uint32_t</span> gc_runs;</div><div class=\"line\">\t<span class=\"keyword\">uint32_t</span> collected;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> GC_BENCH</span></div><div class=\"line\">\t<span class=\"keyword\">uint32_t</span> root_buf_length;</div><div class=\"line\">\t<span class=\"keyword\">uint32_t</span> root_buf_peak;</div><div class=\"line\">\t<span class=\"keyword\">uint32_t</span> zval_possible_root;</div><div class=\"line\">\t<span class=\"keyword\">uint32_t</span> zval_buffered;</div><div class=\"line\">\t<span class=\"keyword\">uint32_t</span> zval_remove_from_buffer;</div><div class=\"line\">\t<span class=\"keyword\">uint32_t</span> zval_marked_grey;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\"></div><div class=\"line\">\tgc_additional_buffer *additional_buffer;</div><div class=\"line\"></div><div class=\"line\">&#125; zend_gc_globals;</div></pre></td></tr></table></figure></p>\n<ul>\n<li><code>gc_enabled</code> 是否使使用gc</li>\n<li><code>gc_active</code>  是否在垃圾检查的过程中</li>\n<li><code>gc_full</code> buf缓冲区是否已满</li>\n<li><code>*buf</code> 与分配用于保存可能为垃圾的value</li>\n<li><code>roots</code> 指向buf最新加入的一个可能垃圾</li>\n<li><code>unused</code> 指向第未使用的buffer</li>\n<li><code>*first_unused</code> 指向第一个没用使用buffer</li>\n<li><code>*last_unused</code> 指向buffer的尾部</li>\n<li><code>to_free</code> 等待释放的buffer</li>\n<li><code>gc_runs</code>  统计gc运行的次数</li>\n<li><code>collected</code>  统计已经释放的垃圾数</li>\n</ul>\n<p>php垃圾回收中几个重要的颜色写在zeng_gc的备注中。<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">* BLACK  (GC_BLACK)   - In use or <span class=\"built_in\">free</span>.</div><div class=\"line\">* GREY   (GC_GREY)    - Possible member of cycle.</div><div class=\"line\">* WHITE  (GC_WHITE)   - Member of garbage cycle.</div><div class=\"line\">* PURPLE (GC_PURPLE)  - Possible root of cycle.</div></pre></td></tr></table></figure></p>\n<ul>\n<li>GC_WHITE 白色表示垃圾</li>\n<li>GC_PURPLE 紫色表示已放入缓冲区</li>\n<li>GC_GREY 灰色表示已经进行了一次refcount的减一操作</li>\n<li>GC_BLACK 黑色是默认颜色，正常</li>\n</ul>\n<p>gc过程中主要处理功能的函数<code>zend_gc_collect_cycles</code></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\">ZEND_API <span class=\"keyword\">void</span> ZEND_FASTCALL <span class=\"title\">gc_possible_root</span><span class=\"params\">(zend_refcounted *ref)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\tgc_root_buffer *newRoot;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> (UNEXPECTED(CG(unclean_shutdown)) || UNEXPECTED(GC_G(gc_active))) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tZEND_ASSERT(GC_TYPE(ref) == IS_ARRAY || GC_TYPE(ref) == IS_OBJECT);</div><div class=\"line\">\tZEND_ASSERT(EXPECTED(GC_REF_GET_COLOR(ref) == GC_BLACK));</div><div class=\"line\">\tZEND_ASSERT(!GC_ADDRESS(GC_INFO(ref)));</div><div class=\"line\"></div><div class=\"line\">\tGC_BENCH_INC(zval_possible_root);</div><div class=\"line\"></div><div class=\"line\">\tnewRoot = GC_G(unused);</div><div class=\"line\">\t<span class=\"keyword\">if</span> (newRoot) &#123;</div><div class=\"line\">\t\tGC_G(unused) = newRoot-&gt;prev;</div><div class=\"line\">\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (GC_G(first_unused) != GC_G(last_unused)) &#123;</div><div class=\"line\">\t\tnewRoot = GC_G(first_unused);</div><div class=\"line\">\t\tGC_G(first_unused)++;</div><div class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t<span class=\"comment\">//垃圾处理，当缓冲区满时，程序调用gc_collect_cycles函数，执行垃圾回收操作。 其中最关键的几步就是</span></div><div class=\"line\">\t\t<span class=\"comment\">//如果当前处于可以gc的状态</span></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (!GC_G(gc_enabled)) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tGC_REFCOUNT(ref)++;</div><div class=\"line\">\t\t<span class=\"comment\">//垃圾回收</span></div><div class=\"line\">\t\tgc_collect_cycles();</div><div class=\"line\">\t\tGC_REFCOUNT(ref)--;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (UNEXPECTED(GC_REFCOUNT(ref)) == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">\t\t\tzval_dtor_func(ref);</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (UNEXPECTED(GC_INFO(ref))) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tnewRoot = GC_G(unused);</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (!newRoot) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tGC_G(unused) = newRoot-&gt;prev;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tGC_TRACE_SET_COLOR(ref, GC_PURPLE);</div><div class=\"line\">\tGC_INFO(ref) = (newRoot - GC_G(buf)) | GC_PURPLE;</div><div class=\"line\">\tnewRoot-&gt;ref = ref;</div><div class=\"line\"></div><div class=\"line\">\tnewRoot-&gt;next = GC_G(roots).next;</div><div class=\"line\">\tnewRoot-&gt;prev = &amp;GC_G(roots);</div><div class=\"line\">\tGC_G(roots).next-&gt;prev = newRoot;</div><div class=\"line\">\tGC_G(roots).next = newRoot;</div><div class=\"line\"></div><div class=\"line\">\tGC_BENCH_INC(zval_buffered);</div><div class=\"line\">\tGC_BENCH_INC(root_buf_length);</div><div class=\"line\">\tGC_BENCH_PEAK(root_buf_peak, root_buf_length);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol>\n<li>\b深度优先对对象或者数据的每一个元素的<code>refcount--</code>并将其标记为灰色</li>\n<li>深度遍历root的每个每个变量，如果此时变量的<code>refcount</code>为0，则代表着改变量为垃圾，将其标记为垃圾，如果不为0，则将其标记为黑色（正常）。</li>\n<li>检查roots清除标记为白色的垃圾。</li>\n</ol>\n<p>//TODO 垃圾回收抽出来出来写。</p>\n<p>具体代码：<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div></pre></td><td class=\"code\"><pre><div class=\"line\">ZEND_API int zend_gc_collect_cycles(void)</div><div class=\"line\">&#123;</div><div class=\"line\">\tint count = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> (GC_G(roots).next != &amp;GC_G(roots)) &#123;</div><div class=\"line\">\t\tgc_root_buffer *current, *next, *orig_next_to_free;</div><div class=\"line\">\t\tzend_refcounted *p;</div><div class=\"line\">\t\tgc_root_buffer to_free;</div><div class=\"line\">\t\tuint32_t gc_flags = <span class=\"number\">0</span>;</div><div class=\"line\">\t\tgc_additional_buffer *additional_buffer_snapshot;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (GC_G(gc_active)) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\tGC_TRACE(<span class=\"string\">\"Collecting cycles\"</span>);</div><div class=\"line\">\t\t<span class=\"comment\">//标识gc运行了多少次</span></div><div class=\"line\">\t\tGC_G(gc_runs)++;</div><div class=\"line\">\t\t<span class=\"comment\">//标识当前正在gc</span></div><div class=\"line\">\t\tGC_G(gc_active) = <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\">\t\tGC_TRACE(<span class=\"string\">\"Marking roots\"</span>);</div><div class=\"line\">\t\t<span class=\"comment\">//重点</span></div><div class=\"line\">\t\tgc_mark_roots();</div><div class=\"line\">\t\tGC_TRACE(<span class=\"string\">\"Scanning roots\"</span>);</div><div class=\"line\">\t\t<span class=\"comment\">//重点</span></div><div class=\"line\">\t\tgc_scan_roots();</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">\t\tGC_TRACE(<span class=\"string\">\"Collecting roots\"</span>);</div><div class=\"line\">\t\tadditional_buffer_snapshot = GC_G(additional_buffer);</div><div class=\"line\">\t\tcount = gc_collect_roots(&amp;gc_flags);</div><div class=\"line\"></div><div class=\"line\">\t\tGC_G(gc_active) = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (GC_G(to_free).next == &amp;GC_G(to_free)) &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">/* nothing to free */</span></div><div class=\"line\">\t\t\tGC_TRACE(<span class=\"string\">\"Nothing to free\"</span>);</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"comment\">/* Copy global to_free list into local list */</span></div><div class=\"line\">\t\tto_free.next = GC_G(to_free).next;</div><div class=\"line\">\t\tto_free.prev = GC_G(to_free).prev;</div><div class=\"line\">\t\tto_free.next-&gt;prev = &amp;to_free;</div><div class=\"line\">\t\tto_free.prev-&gt;next = &amp;to_free;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"comment\">/* Free global list */</span></div><div class=\"line\">\t\tGC_G(to_free).next = &amp;GC_G(to_free);</div><div class=\"line\">\t\tGC_G(to_free).prev = &amp;GC_G(to_free);</div><div class=\"line\"></div><div class=\"line\">\t\torig_next_to_free = GC_G(next_to_free);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (gc_flags &amp; GC_HAS_DESTRUCTORS) &#123;</div><div class=\"line\">\t\t\tGC_TRACE(<span class=\"string\">\"Calling destructors\"</span>);</div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"comment\">/* Remember reference counters before calling destructors */</span></div><div class=\"line\">\t\t\tcurrent = to_free.next;</div><div class=\"line\">\t\t\t<span class=\"keyword\">while</span> (current != &amp;to_free) &#123;</div><div class=\"line\">\t\t\t\tcurrent-&gt;refcount = GC_REFCOUNT(current-&gt;ref);</div><div class=\"line\">\t\t\t\tcurrent = current-&gt;next;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"comment\">/* Call destructors */</span></div><div class=\"line\">\t\t\tcurrent = to_free.next;</div><div class=\"line\">\t\t\t<span class=\"keyword\">while</span> (current != &amp;to_free) &#123;</div><div class=\"line\">\t\t\t\tp = current-&gt;ref;</div><div class=\"line\">\t\t\t\tGC_G(next_to_free) = current-&gt;next;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (GC_TYPE(p) == IS_OBJECT) &#123;</div><div class=\"line\">\t\t\t\t\tzend_object *obj = (zend_object*)p;</div><div class=\"line\"></div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (!(GC_FLAGS(obj) &amp; IS_OBJ_DESTRUCTOR_CALLED)) &#123;</div><div class=\"line\">\t\t\t\t\t\tGC_TRACE_REF(obj, <span class=\"string\">\"calling destructor\"</span>);</div><div class=\"line\">\t\t\t\t\t\tGC_FLAGS(obj) |= IS_OBJ_DESTRUCTOR_CALLED;</div><div class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">if</span> (obj-&gt;handlers-&gt;dtor_obj</div><div class=\"line\">\t\t\t\t\t\t &amp;&amp; (obj-&gt;handlers-&gt;dtor_obj != zend_objects_destroy_object</div><div class=\"line\">\t\t\t\t\t\t  || obj-&gt;ce-&gt;destructor)) &#123;</div><div class=\"line\">\t\t\t\t\t\t\tGC_REFCOUNT(obj)++;</div><div class=\"line\">\t\t\t\t\t\t\tobj-&gt;handlers-&gt;dtor_obj(obj);</div><div class=\"line\">\t\t\t\t\t\t\tGC_REFCOUNT(obj)--;</div><div class=\"line\">\t\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\tcurrent = GC_G(next_to_free);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"comment\">/* Remove values captured in destructors */</span></div><div class=\"line\">\t\t\tcurrent = to_free.next;</div><div class=\"line\">\t\t\t<span class=\"keyword\">while</span> (current != &amp;to_free) &#123;</div><div class=\"line\">\t\t\t\tGC_G(next_to_free) = current-&gt;next;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (GC_REFCOUNT(current-&gt;ref) &gt; current-&gt;refcount) &#123;</div><div class=\"line\">\t\t\t\t\tgc_remove_nested_data_from_buffer(current-&gt;ref, current);</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\tcurrent = GC_G(next_to_free);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"comment\">/* Destroy zvals */</span></div><div class=\"line\">\t\tGC_TRACE(<span class=\"string\">\"Destroying zvals\"</span>);</div><div class=\"line\">\t\tGC_G(gc_active) = <span class=\"number\">1</span>;</div><div class=\"line\">\t\tcurrent = to_free.next;</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (current != &amp;to_free) &#123;</div><div class=\"line\">\t\t\tp = current-&gt;ref;</div><div class=\"line\">\t\t\tGC_G(next_to_free) = current-&gt;next;</div><div class=\"line\">\t\t\tGC_TRACE_REF(p, <span class=\"string\">\"destroying\"</span>);</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (GC_TYPE(p) == IS_OBJECT) &#123;</div><div class=\"line\">\t\t\t\tzend_object *obj = (zend_object*)p;</div><div class=\"line\"></div><div class=\"line\">\t\t\t\tEG(objects_store).object_buckets[obj-&gt;handle] = SET_OBJ_INVALID(obj);</div><div class=\"line\">\t\t\t\tGC_TYPE(obj) = IS_NULL;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (!(GC_FLAGS(obj) &amp; IS_OBJ_FREE_CALLED)) &#123;</div><div class=\"line\">\t\t\t\t\tGC_FLAGS(obj) |= IS_OBJ_FREE_CALLED;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (obj-&gt;handlers-&gt;free_obj) &#123;</div><div class=\"line\">\t\t\t\t\t\tGC_REFCOUNT(obj)++;</div><div class=\"line\">\t\t\t\t\t\tobj-&gt;handlers-&gt;free_obj(obj);</div><div class=\"line\">\t\t\t\t\t\tGC_REFCOUNT(obj)--;</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\tSET_OBJ_BUCKET_NUMBER(EG(objects_store).object_buckets[obj-&gt;handle], EG(objects_store).free_list_head);</div><div class=\"line\">\t\t\t\tEG(objects_store).free_list_head = obj-&gt;handle;</div><div class=\"line\">\t\t\t\tp = current-&gt;ref = (zend_refcounted*)(((char*)obj) - obj-&gt;handlers-&gt;offset);</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (GC_TYPE(p) == IS_ARRAY) &#123;</div><div class=\"line\">\t\t\t\tzend_array *arr = (zend_array*)p;</div><div class=\"line\"></div><div class=\"line\">\t\t\t\tGC_TYPE(arr) = IS_NULL;</div><div class=\"line\"></div><div class=\"line\">\t\t\t\t<span class=\"comment\">/* GC may destroy arrays with rc&gt;1. This is valid and safe. */</span></div><div class=\"line\">\t\t\t\tHT_ALLOW_COW_VIOLATION(arr);</div><div class=\"line\"></div><div class=\"line\">\t\t\t\tzend_hash_destroy(arr);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\tcurrent = GC_G(next_to_free);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"comment\">/* Free objects */</span></div><div class=\"line\">\t\tcurrent = to_free.next;</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (current != &amp;to_free) &#123;</div><div class=\"line\">\t\t\tnext = current-&gt;next;</div><div class=\"line\">\t\t\tp = current-&gt;ref;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (EXPECTED(current &gt;= GC_G(buf) &amp;&amp; current &lt; GC_G(buf) + GC_ROOT_BUFFER_MAX_ENTRIES)) &#123;</div><div class=\"line\">\t\t\t\tcurrent-&gt;prev = GC_G(unused);</div><div class=\"line\">\t\t\t\tGC_G(unused) = current;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\tefree(p);</div><div class=\"line\">\t\t\tcurrent = next;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (GC_G(additional_buffer) != additional_buffer_snapshot) &#123;</div><div class=\"line\">\t\t\tgc_additional_buffer *next = GC_G(additional_buffer)-&gt;next;</div><div class=\"line\">\t\t\tefree(GC_G(additional_buffer));</div><div class=\"line\">\t\t\tGC_G(additional_buffer) = next;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\tGC_TRACE(<span class=\"string\">\"Collection finished\"</span>);</div><div class=\"line\">\t\tGC_G(collected) += count;</div><div class=\"line\">\t\tGC_G(next_to_free) = orig_next_to_free;</div><div class=\"line\">\t\tGC_G(gc_active) = <span class=\"number\">0</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">return</span> count;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">gc_mark_roots</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\tgc_root_buffer *current = GC_G(roots).next;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">while</span> (current != &amp;GC_G(roots)) &#123;</div><div class=\"line\">\t\t<span class=\"comment\">//GC_PURPLE 标识在缓冲区</span></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (GC_REF_GET_COLOR(current-&gt;ref) == GC_PURPLE) &#123;</div><div class=\"line\">\t\t\tgc_mark_grey(current-&gt;ref);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tcurrent = current-&gt;next;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">gc_mark_grey</span><span class=\"params\">(zend_refcounted *ref)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    HashTable *ht;</div><div class=\"line\">\tBucket *p, *end;</div><div class=\"line\">\tzval *zv;</div><div class=\"line\"></div><div class=\"line\">tail_call:</div><div class=\"line\">\t<span class=\"keyword\">if</span> (GC_REF_GET_COLOR(ref) != GC_GREY) &#123;</div><div class=\"line\">\t\tht = <span class=\"literal\">NULL</span>;</div><div class=\"line\">\t\tGC_BENCH_INC(zval_marked_grey);</div><div class=\"line\">\t\tGC_REF_SET_COLOR(ref, GC_GREY);</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (GC_TYPE(ref) == IS_OBJECT) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">zend_object_get_gc_t</span> get_gc;</div><div class=\"line\">\t\t\tzend_object *obj = (zend_object*)ref;</div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (EXPECTED(!(GC_FLAGS(ref) &amp; IS_OBJ_FREE_CALLED) &amp;&amp;</div><div class=\"line\">\t\t                 (get_gc = obj-&gt;handlers-&gt;get_gc) != <span class=\"literal\">NULL</span>)) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> n;</div><div class=\"line\">\t\t\t\tzval *zv, *end;</div><div class=\"line\">\t\t\t\tzval tmp;</div><div class=\"line\"></div><div class=\"line\">\t\t\t\tZVAL_OBJ(&amp;tmp, obj);</div><div class=\"line\">\t\t\t\tht = get_gc(&amp;tmp, &amp;zv, &amp;n);</div><div class=\"line\">\t\t\t\tend = zv + n;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (EXPECTED(!ht)) &#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (!n) <span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">while</span> (!Z_REFCOUNTED_P(--end)) &#123;</div><div class=\"line\">\t\t\t\t\t\t<span class=\"comment\">//表明当前object size为0</span></div><div class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">if</span> (zv == end) <span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">while</span> (zv != end) &#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"comment\">//循环对每个元素进行--</span></div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (Z_REFCOUNTED_P(zv)) &#123;</div><div class=\"line\">\t\t\t\t\t\tref = Z_COUNTED_P(zv);</div><div class=\"line\">\t\t\t\t\t\tGC_REFCOUNT(ref)--;</div><div class=\"line\">\t\t\t\t\t\t<span class=\"comment\">//refcount已经减过，标记为灰色</span></div><div class=\"line\">\t\t\t\t\t\tgc_mark_grey(ref);</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t\tzv++;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (EXPECTED(!ht)) &#123;</div><div class=\"line\">\t\t\t\t\tref = Z_COUNTED_P(zv);</div><div class=\"line\">\t\t\t\t\tGC_REFCOUNT(ref)--;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">goto</span> tail_call;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (GC_TYPE(ref) == IS_ARRAY) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (((zend_array*)ref) == &amp;EG(symbol_table)) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"comment\">//标识是正常非垃圾</span></div><div class=\"line\">\t\t\t\tGC_REF_SET_BLACK(ref);</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t\tht = (zend_array*)ref;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (GC_TYPE(ref) == IS_REFERENCE) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (Z_REFCOUNTED(((zend_reference*)ref)-&gt;val)) &#123;</div><div class=\"line\">\t\t\t\tref = Z_COUNTED(((zend_reference*)ref)-&gt;val);</div><div class=\"line\">\t\t\t\tGC_REFCOUNT(ref)--;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">goto</span> tail_call;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (!ht-&gt;nNumUsed) <span class=\"keyword\">return</span>;</div><div class=\"line\">\t\tp = ht-&gt;arData;</div><div class=\"line\">\t\tend = p + ht-&gt;nNumUsed;</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (<span class=\"number\">1</span>) &#123;</div><div class=\"line\">\t\t\tend--;</div><div class=\"line\">\t\t\tzv = &amp;end-&gt;val;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (Z_TYPE_P(zv) == IS_INDIRECT) &#123;</div><div class=\"line\">\t\t\t\tzv = Z_INDIRECT_P(zv);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (Z_REFCOUNTED_P(zv)) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (p == end) <span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (p != end) &#123;</div><div class=\"line\">\t\t\tzv = &amp;p-&gt;val;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (Z_TYPE_P(zv) == IS_INDIRECT) &#123;</div><div class=\"line\">\t\t\t\tzv = Z_INDIRECT_P(zv);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (Z_REFCOUNTED_P(zv)) &#123;</div><div class=\"line\">\t\t\t\tref = Z_COUNTED_P(zv);</div><div class=\"line\">\t\t\t\tGC_REFCOUNT(ref)--;</div><div class=\"line\">\t\t\t\tgc_mark_grey(ref);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\tp++;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tzv = &amp;p-&gt;val;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (Z_TYPE_P(zv) == IS_INDIRECT) &#123;</div><div class=\"line\">\t\t\tzv = Z_INDIRECT_P(zv);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tref = Z_COUNTED_P(zv);</div><div class=\"line\">\t\tGC_REFCOUNT(ref)--;</div><div class=\"line\">\t\t<span class=\"keyword\">goto</span> tail_call;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">gc_scan</span><span class=\"params\">(zend_refcounted *ref)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    HashTable *ht;</div><div class=\"line\">\tBucket *p, *end;</div><div class=\"line\">\tzval *zv;</div><div class=\"line\"></div><div class=\"line\">tail_call:</div><div class=\"line\">\t<span class=\"keyword\">if</span> (GC_REF_GET_COLOR(ref) == GC_GREY) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (GC_REFCOUNT(ref) &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">//所有refount--以后如果还&gt;0，说明非垃圾</span></div><div class=\"line\">\t\t\tgc_scan_black(ref);</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">//否则则为垃圾</span></div><div class=\"line\">\t\t\tGC_REF_SET_COLOR(ref, GC_WHITE);</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (GC_TYPE(ref) == IS_OBJECT) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">zend_object_get_gc_t</span> get_gc;</div><div class=\"line\">\t\t\t\tzend_object *obj = (zend_object*)ref;</div><div class=\"line\"></div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (EXPECTED(!(GC_FLAGS(ref) &amp; IS_OBJ_FREE_CALLED) &amp;&amp;</div><div class=\"line\">\t\t\t\t             (get_gc = obj-&gt;handlers-&gt;get_gc) != <span class=\"literal\">NULL</span>)) &#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">int</span> n;</div><div class=\"line\">\t\t\t\t\tzval *zv, *end;</div><div class=\"line\">\t\t\t\t\tzval tmp;</div><div class=\"line\"></div><div class=\"line\">\t\t\t\t\tZVAL_OBJ(&amp;tmp, obj);</div><div class=\"line\">\t\t\t\t\tht = get_gc(&amp;tmp, &amp;zv, &amp;n);</div><div class=\"line\">\t\t\t\t\tend = zv + n;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (EXPECTED(!ht)) &#123;</div><div class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">if</span> (!n) <span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">while</span> (!Z_REFCOUNTED_P(--end)) &#123;</div><div class=\"line\">\t\t\t\t\t\t\t<span class=\"keyword\">if</span> (zv == end) <span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">while</span> (zv != end) &#123;</div><div class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">if</span> (Z_REFCOUNTED_P(zv)) &#123;</div><div class=\"line\">\t\t\t\t\t\t\tref = Z_COUNTED_P(zv);</div><div class=\"line\">\t\t\t\t\t\t\tgc_scan(ref);</div><div class=\"line\">\t\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t\t\tzv++;</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (EXPECTED(!ht)) &#123;</div><div class=\"line\">\t\t\t\t\t\tref = Z_COUNTED_P(zv);</div><div class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">goto</span> tail_call;</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (GC_TYPE(ref) == IS_ARRAY) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> ((zend_array*)ref == &amp;EG(symbol_table)) &#123;</div><div class=\"line\">\t\t\t\t\tGC_REF_SET_BLACK(ref);</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t\t\tht = (zend_array*)ref;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (GC_TYPE(ref) == IS_REFERENCE) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (Z_REFCOUNTED(((zend_reference*)ref)-&gt;val)) &#123;</div><div class=\"line\">\t\t\t\t\tref = Z_COUNTED(((zend_reference*)ref)-&gt;val);</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">goto</span> tail_call;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!ht-&gt;nNumUsed) <span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t\tp = ht-&gt;arData;</div><div class=\"line\">\t\t\tend = p + ht-&gt;nNumUsed;</div><div class=\"line\">\t\t\t<span class=\"keyword\">while</span> (<span class=\"number\">1</span>) &#123;</div><div class=\"line\">\t\t\t\tend--;</div><div class=\"line\">\t\t\t\tzv = &amp;end-&gt;val;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (Z_TYPE_P(zv) == IS_INDIRECT) &#123;</div><div class=\"line\">\t\t\t\t\tzv = Z_INDIRECT_P(zv);</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (Z_REFCOUNTED_P(zv)) &#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (p == end) <span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">while</span> (p != end) &#123;</div><div class=\"line\">\t\t\t\tzv = &amp;p-&gt;val;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (Z_TYPE_P(zv) == IS_INDIRECT) &#123;</div><div class=\"line\">\t\t\t\t\tzv = Z_INDIRECT_P(zv);</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (Z_REFCOUNTED_P(zv)) &#123;</div><div class=\"line\">\t\t\t\t\tref = Z_COUNTED_P(zv);</div><div class=\"line\">\t\t\t\t\tgc_scan(ref);</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\tp++;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\tzv = &amp;p-&gt;val;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (Z_TYPE_P(zv) == IS_INDIRECT) &#123;</div><div class=\"line\">\t\t\t\tzv = Z_INDIRECT_P(zv);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\tref = Z_COUNTED_P(zv);</div><div class=\"line\">\t\t\t<span class=\"keyword\">goto</span> tail_call;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>主要为三个函数：</p>\n<ul>\n<li><code>gc_mark_roots</code>队规遍历，对object、array所有元素的refcount–并将其标记为灰色</li>\n<li><code>gc_scan_roots</code>这个函数对节点信息的链表再次进行深度优先遍历，如果发现zval的refcount大于等于1，则对该zval和其包含的zval的refcount加1操作，这个是对非垃圾的一个信息还原，然后将这些zval颜色属性去掉(设置成black)。如果发现zval的refcount等于0，则就标记成白色，这些是后面将要清理掉的垃圾。</li>\n<li><code>gc_collect_roots</code> 遍历节点信息链表,将前面一个步骤中标记为白色的节点信息放到GC_G(zval_to_free)为入口的链表中，这个链表用来存放将要释放的垃圾。 然后释放掉全部的节点信息，缓冲区被清空。分析结束后将重新收集节点信息。</li>\n</ul>\n"},{"title":"php数据结构","date":"2018-08-19T12:30:34.000Z","toc":true,"_content":"\n## 变量\n   \nphp是如何统一实现各种变量类型的? 这和php变量类型的实现是密不可分的。\n一个变量主要有三个要素:`变量名``变量类型``变量值`,他们在php变量类型实现中主要对应 zval zend_value 和\nzend的各种数据类型。\nphp中用$去声明一个变量,在声明的时候可以进行初始化,当然也可以不声明直接使用。一般来说,一个变量的定义包含\n两步:变量定义和变量初始化,在php中只定义不初始化是可以的。\n\n## 变量结构体\n\n```c\n// php zval结构\nstruct _zval_struct {\n\tzend_value        value; 指向具体的value\t\t\t/* value */\n\tunion {\n\t\tstruct {\n\t\t\tZEND_ENDIAN_LOHI_4(\n\t\t\t\tzend_uchar    type,\t\t\t/* active type */\n\t\t\t\tzend_uchar    type_flags,\n\t\t\t\tzend_uchar    const_flags,\n\t\t\t\tzend_uchar    reserved)\t    /* call info for EX(This) */\n\t\t} v;\n\t\tuint32_t type_info;\n\t} u1;\n\tunion {\n\t\tuint32_t     var_flags;\n\t\tuint32_t     next;                 /* hash collision chain */\n\t\tuint32_t     cache_slot;           /* literal cache slot */\n\t\tuint32_t     lineno;               /* line number (for ast nodes) */\n\t\tuint32_t     num_args;             /* arguments number for EX(This) */\n\t\tuint32_t     fe_pos;               /* foreach position */\n\t\tuint32_t     fe_iter_idx;          /* foreach iterator index */\n\t} u2;\n};\n```\n\n\n## 变量类型\n其中type 表示当前变量的类型,例如string array int等,以下为php中全部变量类型。\n其中type 是一个无符号类型的char,他的定义是这样的\n```c\ntypedef unsigned char zend_uchar;\n```\n\n\n```c\ntypedef union _zend_value {\n    \tzend_long         lval;\t\t\t\t/* long value */\n    \tdouble            dval;\t\t\t\t/* double value */\n    \tzend_refcounted  *counted;\n    \tzend_string      *str;\n    \tzend_array       *arr;\n    \tzend_object      *obj;\n    \tzend_resource    *res;\n    \tzend_reference   *ref;\n    \tzend_ast_ref     *ast;\n    \tzval             *zv;\n    \tvoid             *ptr;\n    \tzend_class_entry *ce;\n    \tzend_function    *func;\n    \tstruct {\n    \t\tuint32_t w1;\n    \t\tuint32_t w2;\n    \t} ww;\n    } zend_value;\n```\n\n- 在这些类型里不存在boolean类型,因为在php7中已经将boolean拆分为true和false.直接保存在type中,也就是说\nboolean没有_zend_value结构,直接通过type字段就可以确定boolean的值。\n- 从上边的结构体可以看出来 `zend_long`、`double` 类型不是指针类型,也就是说整形和浮点型正能进行深拷贝,\n并不能和其他说句类型一样进行 `引用计数`和`写时复制`。因为有`引用计数`和`写时复制`在变量赋值且不做修改时\n才能大量节省内存。\n\n\n以string类型为例,它在php中的结构类型应该是这样的:\n\n![image](/photo/img/php数据结构/php数据结构.png)\n\n_zend_string:\n```c\nstruct _zend_string {\n\tzend_refcounted_h gc;\n\tzend_ulong        h;                /* hash value */\n\tsize_t            len;\n\tchar              val[1];          /*字符串起始地址*/\n};\n```\n\n- 其中`gc` 字段表示这个结构体被引用的次数,垃圾回收的时候会用到。\n- h 字符串通过Times33计算出来的hashcode\n- len 字符串长度\n- val 字符串内容\n\n我们在这里都会有疑问,为什么存储字符串内容的时候没有使用char*类型,而用了一个数组类型来存储。zend_string\n在申请内存的时候会会申请malloc(sizeof(zend_string)+字符串长度),且val[0]存的是字符串最后一个字符安“\\0”\n\nzend_string结构在内存中如下所示:\n\n\n![image](/photo/img/php数据结构/zend_stirng内存中结构.png)\n\n当时也在char val[1]的地方疑惑了很久,再往上找了很多文章,其中\nNikita Popov(nikic，PHP 官方开发组成员，柏林科技大学的学生) 这样解释\n\n```\n如果你对 C 语言了解的不是很深入的话，可能会觉得 val 的定义有些奇怪：这个声明只有一个元素，但是显然我们想存储的字符串长度肯定大于一个字符的长度。这里其实使用的是结构体的一个『黑』\b方法：在声明数组时只定义一个元素，但是实际创建 zend_string 时再分配足够的内存来存储整个字符串。这样我们还是可以通过 val 访问完整的字符串。\n```\n\n\n## 参考:\n\n- [Internal value representation in PHP 7 - Part 2 ](https://nikic.github.io/2015/06/19/Internal-value-representation-in-PHP-7-part-2.html)\n- [[译]变量在 PHP7 内部的实现（二）](https://0x1.im/blog/php/Internal-value-representation-in-PHP-7-part-2.html)\n- [php内核分析——2.1 变量的内部实现](https://www.kancloud.cn/nickbai/php7/363268)\n","source":"_posts/php数据结构.md","raw":"---\ntitle: php数据结构\ndate: 2018-08-19 20:30:34\ntags: php源码\ncategories: php源码学习\ntoc: true\n---\n\n## 变量\n   \nphp是如何统一实现各种变量类型的? 这和php变量类型的实现是密不可分的。\n一个变量主要有三个要素:`变量名``变量类型``变量值`,他们在php变量类型实现中主要对应 zval zend_value 和\nzend的各种数据类型。\nphp中用$去声明一个变量,在声明的时候可以进行初始化,当然也可以不声明直接使用。一般来说,一个变量的定义包含\n两步:变量定义和变量初始化,在php中只定义不初始化是可以的。\n\n## 变量结构体\n\n```c\n// php zval结构\nstruct _zval_struct {\n\tzend_value        value; 指向具体的value\t\t\t/* value */\n\tunion {\n\t\tstruct {\n\t\t\tZEND_ENDIAN_LOHI_4(\n\t\t\t\tzend_uchar    type,\t\t\t/* active type */\n\t\t\t\tzend_uchar    type_flags,\n\t\t\t\tzend_uchar    const_flags,\n\t\t\t\tzend_uchar    reserved)\t    /* call info for EX(This) */\n\t\t} v;\n\t\tuint32_t type_info;\n\t} u1;\n\tunion {\n\t\tuint32_t     var_flags;\n\t\tuint32_t     next;                 /* hash collision chain */\n\t\tuint32_t     cache_slot;           /* literal cache slot */\n\t\tuint32_t     lineno;               /* line number (for ast nodes) */\n\t\tuint32_t     num_args;             /* arguments number for EX(This) */\n\t\tuint32_t     fe_pos;               /* foreach position */\n\t\tuint32_t     fe_iter_idx;          /* foreach iterator index */\n\t} u2;\n};\n```\n\n\n## 变量类型\n其中type 表示当前变量的类型,例如string array int等,以下为php中全部变量类型。\n其中type 是一个无符号类型的char,他的定义是这样的\n```c\ntypedef unsigned char zend_uchar;\n```\n\n\n```c\ntypedef union _zend_value {\n    \tzend_long         lval;\t\t\t\t/* long value */\n    \tdouble            dval;\t\t\t\t/* double value */\n    \tzend_refcounted  *counted;\n    \tzend_string      *str;\n    \tzend_array       *arr;\n    \tzend_object      *obj;\n    \tzend_resource    *res;\n    \tzend_reference   *ref;\n    \tzend_ast_ref     *ast;\n    \tzval             *zv;\n    \tvoid             *ptr;\n    \tzend_class_entry *ce;\n    \tzend_function    *func;\n    \tstruct {\n    \t\tuint32_t w1;\n    \t\tuint32_t w2;\n    \t} ww;\n    } zend_value;\n```\n\n- 在这些类型里不存在boolean类型,因为在php7中已经将boolean拆分为true和false.直接保存在type中,也就是说\nboolean没有_zend_value结构,直接通过type字段就可以确定boolean的值。\n- 从上边的结构体可以看出来 `zend_long`、`double` 类型不是指针类型,也就是说整形和浮点型正能进行深拷贝,\n并不能和其他说句类型一样进行 `引用计数`和`写时复制`。因为有`引用计数`和`写时复制`在变量赋值且不做修改时\n才能大量节省内存。\n\n\n以string类型为例,它在php中的结构类型应该是这样的:\n\n![image](/photo/img/php数据结构/php数据结构.png)\n\n_zend_string:\n```c\nstruct _zend_string {\n\tzend_refcounted_h gc;\n\tzend_ulong        h;                /* hash value */\n\tsize_t            len;\n\tchar              val[1];          /*字符串起始地址*/\n};\n```\n\n- 其中`gc` 字段表示这个结构体被引用的次数,垃圾回收的时候会用到。\n- h 字符串通过Times33计算出来的hashcode\n- len 字符串长度\n- val 字符串内容\n\n我们在这里都会有疑问,为什么存储字符串内容的时候没有使用char*类型,而用了一个数组类型来存储。zend_string\n在申请内存的时候会会申请malloc(sizeof(zend_string)+字符串长度),且val[0]存的是字符串最后一个字符安“\\0”\n\nzend_string结构在内存中如下所示:\n\n\n![image](/photo/img/php数据结构/zend_stirng内存中结构.png)\n\n当时也在char val[1]的地方疑惑了很久,再往上找了很多文章,其中\nNikita Popov(nikic，PHP 官方开发组成员，柏林科技大学的学生) 这样解释\n\n```\n如果你对 C 语言了解的不是很深入的话，可能会觉得 val 的定义有些奇怪：这个声明只有一个元素，但是显然我们想存储的字符串长度肯定大于一个字符的长度。这里其实使用的是结构体的一个『黑』\b方法：在声明数组时只定义一个元素，但是实际创建 zend_string 时再分配足够的内存来存储整个字符串。这样我们还是可以通过 val 访问完整的字符串。\n```\n\n\n## 参考:\n\n- [Internal value representation in PHP 7 - Part 2 ](https://nikic.github.io/2015/06/19/Internal-value-representation-in-PHP-7-part-2.html)\n- [[译]变量在 PHP7 内部的实现（二）](https://0x1.im/blog/php/Internal-value-representation-in-PHP-7-part-2.html)\n- [php内核分析——2.1 变量的内部实现](https://www.kancloud.cn/nickbai/php7/363268)\n","slug":"php数据结构","published":1,"updated":"2019-01-08T10:55:19.888Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjswwkdpk001dg7ww2v8wymfq","content":"<h2 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h2><p>php是如何统一实现各种变量类型的? 这和php变量类型的实现是密不可分的。<br>一个变量主要有三个要素:<code>变量名``变量类型``变量值</code>,他们在php变量类型实现中主要对应 zval zend_value 和<br>zend的各种数据类型。<br>php中用$去声明一个变量,在声明的时候可以进行初始化,当然也可以不声明直接使用。一般来说,一个变量的定义包含<br>两步:变量定义和变量初始化,在php中只定义不初始化是可以的。</p>\n<h2 id=\"变量结构体\"><a href=\"#变量结构体\" class=\"headerlink\" title=\"变量结构体\"></a>变量结构体</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// php zval结构</span></div><div class=\"line\"><span class=\"keyword\">struct</span> _zval_struct &#123;</div><div class=\"line\">\tzend_value        value; 指向具体的value\t\t\t<span class=\"comment\">/* value */</span></div><div class=\"line\">\t<span class=\"keyword\">union</span> &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">\t\t\tZEND_ENDIAN_LOHI_4(</div><div class=\"line\">\t\t\t\tzend_uchar    type,\t\t\t<span class=\"comment\">/* active type */</span></div><div class=\"line\">\t\t\t\tzend_uchar    type_flags,</div><div class=\"line\">\t\t\t\tzend_uchar    const_flags,</div><div class=\"line\">\t\t\t\tzend_uchar    reserved)\t    <span class=\"comment\">/* call info for EX(This) */</span></div><div class=\"line\">\t\t&#125; v;</div><div class=\"line\">\t\t<span class=\"keyword\">uint32_t</span> type_info;</div><div class=\"line\">\t&#125; u1;</div><div class=\"line\">\t<span class=\"keyword\">union</span> &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">uint32_t</span>     var_flags;</div><div class=\"line\">\t\t<span class=\"keyword\">uint32_t</span>     next;                 <span class=\"comment\">/* hash collision chain */</span></div><div class=\"line\">\t\t<span class=\"keyword\">uint32_t</span>     cache_slot;           <span class=\"comment\">/* literal cache slot */</span></div><div class=\"line\">\t\t<span class=\"keyword\">uint32_t</span>     lineno;               <span class=\"comment\">/* line number (for ast nodes) */</span></div><div class=\"line\">\t\t<span class=\"keyword\">uint32_t</span>     num_args;             <span class=\"comment\">/* arguments number for EX(This) */</span></div><div class=\"line\">\t\t<span class=\"keyword\">uint32_t</span>     fe_pos;               <span class=\"comment\">/* foreach position */</span></div><div class=\"line\">\t\t<span class=\"keyword\">uint32_t</span>     fe_iter_idx;          <span class=\"comment\">/* foreach iterator index */</span></div><div class=\"line\">\t&#125; u2;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h2 id=\"变量类型\"><a href=\"#变量类型\" class=\"headerlink\" title=\"变量类型\"></a>变量类型</h2><p>其中type 表示当前变量的类型,例如string array int等,以下为php中全部变量类型。<br>其中type 是一个无符号类型的char,他的定义是这样的<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> zend_uchar;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">union</span> _zend_value &#123;</div><div class=\"line\">    \tzend_long         lval;\t\t\t\t<span class=\"comment\">/* long value */</span></div><div class=\"line\">    \t<span class=\"keyword\">double</span>            dval;\t\t\t\t<span class=\"comment\">/* double value */</span></div><div class=\"line\">    \tzend_refcounted  *counted;</div><div class=\"line\">    \tzend_string      *str;</div><div class=\"line\">    \tzend_array       *arr;</div><div class=\"line\">    \tzend_object      *obj;</div><div class=\"line\">    \tzend_resource    *res;</div><div class=\"line\">    \tzend_reference   *ref;</div><div class=\"line\">    \tzend_ast_ref     *ast;</div><div class=\"line\">    \tzval             *zv;</div><div class=\"line\">    \t<span class=\"keyword\">void</span>             *ptr;</div><div class=\"line\">    \tzend_class_entry *ce;</div><div class=\"line\">    \tzend_function    *func;</div><div class=\"line\">    \t<span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">    \t\t<span class=\"keyword\">uint32_t</span> w1;</div><div class=\"line\">    \t\t<span class=\"keyword\">uint32_t</span> w2;</div><div class=\"line\">    \t&#125; ww;</div><div class=\"line\">    &#125; zend_value;</div></pre></td></tr></table></figure>\n<ul>\n<li>在这些类型里不存在boolean类型,因为在php7中已经将boolean拆分为true和false.直接保存在type中,也就是说<br>boolean没有_zend_value结构,直接通过type字段就可以确定boolean的值。</li>\n<li>从上边的结构体可以看出来 <code>zend_long</code>、<code>double</code> 类型不是指针类型,也就是说整形和浮点型正能进行深拷贝,<br>并不能和其他说句类型一样进行 <code>引用计数</code>和<code>写时复制</code>。因为有<code>引用计数</code>和<code>写时复制</code>在变量赋值且不做修改时<br>才能大量节省内存。</li>\n</ul>\n<p>以string类型为例,它在php中的结构类型应该是这样的:</p>\n<p><img src=\"/photo/img/php数据结构/php数据结构.png\" alt=\"image\"></p>\n<p>_zend_string:<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">struct</span> _zend_string &#123;</div><div class=\"line\">\tzend_refcounted_h gc;</div><div class=\"line\">\tzend_ulong        h;                <span class=\"comment\">/* hash value */</span></div><div class=\"line\">\t<span class=\"keyword\">size_t</span>            len;</div><div class=\"line\">\t<span class=\"keyword\">char</span>              val[<span class=\"number\">1</span>];          <span class=\"comment\">/*字符串起始地址*/</span></div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<ul>\n<li>其中<code>gc</code> 字段表示这个结构体被引用的次数,垃圾回收的时候会用到。</li>\n<li>h 字符串通过Times33计算出来的hashcode</li>\n<li>len 字符串长度</li>\n<li>val 字符串内容</li>\n</ul>\n<p>我们在这里都会有疑问,为什么存储字符串内容的时候没有使用char*类型,而用了一个数组类型来存储。zend_string<br>在申请内存的时候会会申请malloc(sizeof(zend_string)+字符串长度),且val[0]存的是字符串最后一个字符安“\\0”</p>\n<p>zend_string结构在内存中如下所示:</p>\n<p><img src=\"/photo/img/php数据结构/zend_stirng内存中结构.png\" alt=\"image\"></p>\n<p>当时也在char val[1]的地方疑惑了很久,再往上找了很多文章,其中<br>Nikita Popov(nikic，PHP 官方开发组成员，柏林科技大学的学生) 这样解释</p>\n<figure class=\"highlight fsharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">如果你对 C 语言了解的不是很深入的话，可能会觉得 <span class=\"keyword\">val</span> 的定义有些奇怪：这个声明只有一个元素，但是显然我们想存储的字符串长度肯定大于一个字符的长度。这里其实使用的是结构体的一个『黑』\b方法：在声明数组时只定义一个元素，但是实际创建 zend_string 时再分配足够的内存来存储整个字符串。这样我们还是可以通过 <span class=\"keyword\">val</span> 访问完整的字符串。</div></pre></td></tr></table></figure>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考:\"></a>参考:</h2><ul>\n<li><a href=\"https://nikic.github.io/2015/06/19/Internal-value-representation-in-PHP-7-part-2.html\" target=\"_blank\" rel=\"noopener\">Internal value representation in PHP 7 - Part 2 </a></li>\n<li><a href=\"https://0x1.im/blog/php/Internal-value-representation-in-PHP-7-part-2.html\" target=\"_blank\" rel=\"noopener\">[译]变量在 PHP7 内部的实现（二）</a></li>\n<li><a href=\"https://www.kancloud.cn/nickbai/php7/363268\" target=\"_blank\" rel=\"noopener\">php内核分析——2.1 变量的内部实现</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h2><p>php是如何统一实现各种变量类型的? 这和php变量类型的实现是密不可分的。<br>一个变量主要有三个要素:<code>变量名``变量类型``变量值</code>,他们在php变量类型实现中主要对应 zval zend_value 和<br>zend的各种数据类型。<br>php中用$去声明一个变量,在声明的时候可以进行初始化,当然也可以不声明直接使用。一般来说,一个变量的定义包含<br>两步:变量定义和变量初始化,在php中只定义不初始化是可以的。</p>\n<h2 id=\"变量结构体\"><a href=\"#变量结构体\" class=\"headerlink\" title=\"变量结构体\"></a>变量结构体</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// php zval结构</span></div><div class=\"line\"><span class=\"keyword\">struct</span> _zval_struct &#123;</div><div class=\"line\">\tzend_value        value; 指向具体的value\t\t\t<span class=\"comment\">/* value */</span></div><div class=\"line\">\t<span class=\"keyword\">union</span> &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">\t\t\tZEND_ENDIAN_LOHI_4(</div><div class=\"line\">\t\t\t\tzend_uchar    type,\t\t\t<span class=\"comment\">/* active type */</span></div><div class=\"line\">\t\t\t\tzend_uchar    type_flags,</div><div class=\"line\">\t\t\t\tzend_uchar    const_flags,</div><div class=\"line\">\t\t\t\tzend_uchar    reserved)\t    <span class=\"comment\">/* call info for EX(This) */</span></div><div class=\"line\">\t\t&#125; v;</div><div class=\"line\">\t\t<span class=\"keyword\">uint32_t</span> type_info;</div><div class=\"line\">\t&#125; u1;</div><div class=\"line\">\t<span class=\"keyword\">union</span> &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">uint32_t</span>     var_flags;</div><div class=\"line\">\t\t<span class=\"keyword\">uint32_t</span>     next;                 <span class=\"comment\">/* hash collision chain */</span></div><div class=\"line\">\t\t<span class=\"keyword\">uint32_t</span>     cache_slot;           <span class=\"comment\">/* literal cache slot */</span></div><div class=\"line\">\t\t<span class=\"keyword\">uint32_t</span>     lineno;               <span class=\"comment\">/* line number (for ast nodes) */</span></div><div class=\"line\">\t\t<span class=\"keyword\">uint32_t</span>     num_args;             <span class=\"comment\">/* arguments number for EX(This) */</span></div><div class=\"line\">\t\t<span class=\"keyword\">uint32_t</span>     fe_pos;               <span class=\"comment\">/* foreach position */</span></div><div class=\"line\">\t\t<span class=\"keyword\">uint32_t</span>     fe_iter_idx;          <span class=\"comment\">/* foreach iterator index */</span></div><div class=\"line\">\t&#125; u2;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h2 id=\"变量类型\"><a href=\"#变量类型\" class=\"headerlink\" title=\"变量类型\"></a>变量类型</h2><p>其中type 表示当前变量的类型,例如string array int等,以下为php中全部变量类型。<br>其中type 是一个无符号类型的char,他的定义是这样的<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> zend_uchar;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">union</span> _zend_value &#123;</div><div class=\"line\">    \tzend_long         lval;\t\t\t\t<span class=\"comment\">/* long value */</span></div><div class=\"line\">    \t<span class=\"keyword\">double</span>            dval;\t\t\t\t<span class=\"comment\">/* double value */</span></div><div class=\"line\">    \tzend_refcounted  *counted;</div><div class=\"line\">    \tzend_string      *str;</div><div class=\"line\">    \tzend_array       *arr;</div><div class=\"line\">    \tzend_object      *obj;</div><div class=\"line\">    \tzend_resource    *res;</div><div class=\"line\">    \tzend_reference   *ref;</div><div class=\"line\">    \tzend_ast_ref     *ast;</div><div class=\"line\">    \tzval             *zv;</div><div class=\"line\">    \t<span class=\"keyword\">void</span>             *ptr;</div><div class=\"line\">    \tzend_class_entry *ce;</div><div class=\"line\">    \tzend_function    *func;</div><div class=\"line\">    \t<span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">    \t\t<span class=\"keyword\">uint32_t</span> w1;</div><div class=\"line\">    \t\t<span class=\"keyword\">uint32_t</span> w2;</div><div class=\"line\">    \t&#125; ww;</div><div class=\"line\">    &#125; zend_value;</div></pre></td></tr></table></figure>\n<ul>\n<li>在这些类型里不存在boolean类型,因为在php7中已经将boolean拆分为true和false.直接保存在type中,也就是说<br>boolean没有_zend_value结构,直接通过type字段就可以确定boolean的值。</li>\n<li>从上边的结构体可以看出来 <code>zend_long</code>、<code>double</code> 类型不是指针类型,也就是说整形和浮点型正能进行深拷贝,<br>并不能和其他说句类型一样进行 <code>引用计数</code>和<code>写时复制</code>。因为有<code>引用计数</code>和<code>写时复制</code>在变量赋值且不做修改时<br>才能大量节省内存。</li>\n</ul>\n<p>以string类型为例,它在php中的结构类型应该是这样的:</p>\n<p><img src=\"/photo/img/php数据结构/php数据结构.png\" alt=\"image\"></p>\n<p>_zend_string:<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">struct</span> _zend_string &#123;</div><div class=\"line\">\tzend_refcounted_h gc;</div><div class=\"line\">\tzend_ulong        h;                <span class=\"comment\">/* hash value */</span></div><div class=\"line\">\t<span class=\"keyword\">size_t</span>            len;</div><div class=\"line\">\t<span class=\"keyword\">char</span>              val[<span class=\"number\">1</span>];          <span class=\"comment\">/*字符串起始地址*/</span></div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<ul>\n<li>其中<code>gc</code> 字段表示这个结构体被引用的次数,垃圾回收的时候会用到。</li>\n<li>h 字符串通过Times33计算出来的hashcode</li>\n<li>len 字符串长度</li>\n<li>val 字符串内容</li>\n</ul>\n<p>我们在这里都会有疑问,为什么存储字符串内容的时候没有使用char*类型,而用了一个数组类型来存储。zend_string<br>在申请内存的时候会会申请malloc(sizeof(zend_string)+字符串长度),且val[0]存的是字符串最后一个字符安“\\0”</p>\n<p>zend_string结构在内存中如下所示:</p>\n<p><img src=\"/photo/img/php数据结构/zend_stirng内存中结构.png\" alt=\"image\"></p>\n<p>当时也在char val[1]的地方疑惑了很久,再往上找了很多文章,其中<br>Nikita Popov(nikic，PHP 官方开发组成员，柏林科技大学的学生) 这样解释</p>\n<figure class=\"highlight fsharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">如果你对 C 语言了解的不是很深入的话，可能会觉得 <span class=\"keyword\">val</span> 的定义有些奇怪：这个声明只有一个元素，但是显然我们想存储的字符串长度肯定大于一个字符的长度。这里其实使用的是结构体的一个『黑』\b方法：在声明数组时只定义一个元素，但是实际创建 zend_string 时再分配足够的内存来存储整个字符串。这样我们还是可以通过 <span class=\"keyword\">val</span> 访问完整的字符串。</div></pre></td></tr></table></figure>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考:\"></a>参考:</h2><ul>\n<li><a href=\"https://nikic.github.io/2015/06/19/Internal-value-representation-in-PHP-7-part-2.html\" target=\"_blank\" rel=\"noopener\">Internal value representation in PHP 7 - Part 2 </a></li>\n<li><a href=\"https://0x1.im/blog/php/Internal-value-representation-in-PHP-7-part-2.html\" target=\"_blank\" rel=\"noopener\">[译]变量在 PHP7 内部的实现（二）</a></li>\n<li><a href=\"https://www.kancloud.cn/nickbai/php7/363268\" target=\"_blank\" rel=\"noopener\">php内核分析——2.1 变量的内部实现</a></li>\n</ul>\n"},{"title":"php的引用","date":"2018-08-12T14:18:07.000Z","toc":true,"_content":"\n### &\n\n&是php中的引用,他并不一种独立的数据类型,而是指向其他数据类型的数据结构,和C语言的指针类似。\n\n具体作用为:当我们修改引用类型变量是,其修改的将作用于实际引用的变量上。\n\n如果当我们使用&符号生成一个引用变量时,首先会为&操作生成一个zend_reference结构,zend_reference就是引用\n类型的结构体,他内嵌一个zval,然后此结构的体zval的value指向原来zval的value上。然后将原来zval的变量\n类型变为IS_REFERENCE,原来zval的value执行新创建zend_reference结构。\n索引&的作用就是新生成zend_reference,然后将其指向原来的zval的value上,顺便把原来zval的变量类型变化为引用类型。\n\n```c\nstruct _zend_reference {\n    zend_refcondted_h gc;\n    zval              val;  指向原来的value.\n};\n```\n\n### 举个栗子\n\n```\n    $a = time(); //步骤1\n    $b = &$a;    //步骤2\n```\n\n**步骤1**\n\n现在`$a = time()`是他们的数据结构指向为:\n\n![image](/photo/img/php引用/未引用前.png)\n\n此时数据结构,一直指针指向是这个样子。\n\n**步骤2**\n\n![image](/photo/img/php引用/引用后.png)\n\n\n也就是说PHP的引用在使用后新生成一个引用类型机构,然后将引用类型结构指向越来的value,最后将原来zval的value\n指向新生成的结构体,并将其变量类型变为引用类型,IS_REFERENCE。当然随之改变的还有计数。\n","source":"_posts/php的&符号.md","raw":"---\ntitle: 'php的引用'\ndate: 2018-08-12 22:18:07\ntags: php源码\ncategories: php源码学习\ntoc: true\n---\n\n### &\n\n&是php中的引用,他并不一种独立的数据类型,而是指向其他数据类型的数据结构,和C语言的指针类似。\n\n具体作用为:当我们修改引用类型变量是,其修改的将作用于实际引用的变量上。\n\n如果当我们使用&符号生成一个引用变量时,首先会为&操作生成一个zend_reference结构,zend_reference就是引用\n类型的结构体,他内嵌一个zval,然后此结构的体zval的value指向原来zval的value上。然后将原来zval的变量\n类型变为IS_REFERENCE,原来zval的value执行新创建zend_reference结构。\n索引&的作用就是新生成zend_reference,然后将其指向原来的zval的value上,顺便把原来zval的变量类型变化为引用类型。\n\n```c\nstruct _zend_reference {\n    zend_refcondted_h gc;\n    zval              val;  指向原来的value.\n};\n```\n\n### 举个栗子\n\n```\n    $a = time(); //步骤1\n    $b = &$a;    //步骤2\n```\n\n**步骤1**\n\n现在`$a = time()`是他们的数据结构指向为:\n\n![image](/photo/img/php引用/未引用前.png)\n\n此时数据结构,一直指针指向是这个样子。\n\n**步骤2**\n\n![image](/photo/img/php引用/引用后.png)\n\n\n也就是说PHP的引用在使用后新生成一个引用类型机构,然后将引用类型结构指向越来的value,最后将原来zval的value\n指向新生成的结构体,并将其变量类型变为引用类型,IS_REFERENCE。当然随之改变的还有计数。\n","slug":"php的&符号","published":1,"updated":"2019-01-08T10:56:48.506Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjswwkdpl001fg7ww2krcorax","content":"<h3 id=\"amp\"><a href=\"#amp\" class=\"headerlink\" title=\"&amp;\"></a>&amp;</h3><p>&amp;是php中的引用,他并不一种独立的数据类型,而是指向其他数据类型的数据结构,和C语言的指针类似。</p>\n<p>具体作用为:当我们修改引用类型变量是,其修改的将作用于实际引用的变量上。</p>\n<p>如果当我们使用&amp;符号生成一个引用变量时,首先会为&amp;操作生成一个zend_reference结构,zend_reference就是引用<br>类型的结构体,他内嵌一个zval,然后此结构的体zval的value指向原来zval的value上。然后将原来zval的变量<br>类型变为IS_REFERENCE,原来zval的value执行新创建zend_reference结构。<br>索引&amp;的作用就是新生成zend_reference,然后将其指向原来的zval的value上,顺便把原来zval的变量类型变化为引用类型。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">struct</span> _zend_reference &#123;</div><div class=\"line\">    zend_refcondted_h gc;</div><div class=\"line\">    zval              val;  指向原来的value.</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h3 id=\"举个栗子\"><a href=\"#举个栗子\" class=\"headerlink\" title=\"举个栗子\"></a>举个栗子</h3><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$a</span> = time(); <span class=\"regexp\">//</span>步骤<span class=\"number\">1</span></div><div class=\"line\"><span class=\"variable\">$b</span> = &amp;<span class=\"variable\">$a</span>;    <span class=\"regexp\">//</span>步骤<span class=\"number\">2</span></div></pre></td></tr></table></figure>\n<p><strong>步骤1</strong></p>\n<p>现在<code>$a = time()</code>是他们的数据结构指向为:</p>\n<p><img src=\"/photo/img/php引用/未引用前.png\" alt=\"image\"></p>\n<p>此时数据结构,一直指针指向是这个样子。</p>\n<p><strong>步骤2</strong></p>\n<p><img src=\"/photo/img/php引用/引用后.png\" alt=\"image\"></p>\n<p>也就是说PHP的引用在使用后新生成一个引用类型机构,然后将引用类型结构指向越来的value,最后将原来zval的value<br>指向新生成的结构体,并将其变量类型变为引用类型,IS_REFERENCE。当然随之改变的还有计数。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"amp\"><a href=\"#amp\" class=\"headerlink\" title=\"&amp;\"></a>&amp;</h3><p>&amp;是php中的引用,他并不一种独立的数据类型,而是指向其他数据类型的数据结构,和C语言的指针类似。</p>\n<p>具体作用为:当我们修改引用类型变量是,其修改的将作用于实际引用的变量上。</p>\n<p>如果当我们使用&amp;符号生成一个引用变量时,首先会为&amp;操作生成一个zend_reference结构,zend_reference就是引用<br>类型的结构体,他内嵌一个zval,然后此结构的体zval的value指向原来zval的value上。然后将原来zval的变量<br>类型变为IS_REFERENCE,原来zval的value执行新创建zend_reference结构。<br>索引&amp;的作用就是新生成zend_reference,然后将其指向原来的zval的value上,顺便把原来zval的变量类型变化为引用类型。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">struct</span> _zend_reference &#123;</div><div class=\"line\">    zend_refcondted_h gc;</div><div class=\"line\">    zval              val;  指向原来的value.</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h3 id=\"举个栗子\"><a href=\"#举个栗子\" class=\"headerlink\" title=\"举个栗子\"></a>举个栗子</h3><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$a</span> = time(); <span class=\"regexp\">//</span>步骤<span class=\"number\">1</span></div><div class=\"line\"><span class=\"variable\">$b</span> = &amp;<span class=\"variable\">$a</span>;    <span class=\"regexp\">//</span>步骤<span class=\"number\">2</span></div></pre></td></tr></table></figure>\n<p><strong>步骤1</strong></p>\n<p>现在<code>$a = time()</code>是他们的数据结构指向为:</p>\n<p><img src=\"/photo/img/php引用/未引用前.png\" alt=\"image\"></p>\n<p>此时数据结构,一直指针指向是这个样子。</p>\n<p><strong>步骤2</strong></p>\n<p><img src=\"/photo/img/php引用/引用后.png\" alt=\"image\"></p>\n<p>也就是说PHP的引用在使用后新生成一个引用类型机构,然后将引用类型结构指向越来的value,最后将原来zval的value<br>指向新生成的结构体,并将其变量类型变为引用类型,IS_REFERENCE。当然随之改变的还有计数。</p>\n"},{"title":"php数组实现","date":"2018-08-20T12:00:08.000Z","toc":true,"_content":"\nphp的数组依赖于hashtable实现的。\n\nTimes33的算法很简单，就是不断的乘33,下边是times33算法:\n\n## Times33(hash)\n\n```php\n<?php\nfunction myHash($str) {\n    // hash(i) = hash(i-1) * 33 + str[i]\n    $hash = 5381;\n    $s    = md5($str); //相比其它版本，进行了md5加密\n    $seed = 5;\n    $len  = 32;//加密后长度32\n    for ($i = 0; $i < $len; $i++) {\n        // (hash << 5) + hash 相当于 hash * 33\n        //$hash = sprintf(\"%u\", $hash * 33) + ord($s{$i});\n        //$hash = ($hash * 33 + ord($s{$i})) & 0x7FFFFFFF;\n        $hash = ($hash << $seed) + $hash + ord($s{$i});\n    }\n \n    return $hash & 0x7FFFFFFF;\n}\n```\n\n其中`<<` 表示左移,每次左移表示x2例如:\n\n```php\n<?php\n$num = 2;\n\necho $num << 2;\n```\n\n所以($hash << $seed)表示 `$hash * 32` ,同时加上$hash,也就表示 `$hash * 33`了。ord()函数返回字符串的首个字符的 ASCII 值。\n最后`$hash & 0x7FFFFFFF` 表示与整形的最大值与操作(`0x7FFFF111FFF`二进制为`1111111111111111111111111111`),\n这个与操作会截取超过整形二进制部分,所以times33计算出来的值不会超过整形的最大值。\n\n## 为什么要用hashtable实现php数组?\n\n因为散列表是根据关键建码值直接进项访问的数据结构。在key和value之间有一个映射函数,可以根据key直接索引到对应的value值,它并\n不会使用一般的对比操作,而是直接使用`内存的起始位置和偏移位置`进行寻址,所以会比正常的寻址要快。\n\n\n## 散列表结构\n\n```c\nstruct _zend_array {\n\tzend_refcounted_h gc;\n\tunion {\n\t\tstruct {\n\t\t\tZEND_ENDIAN_LOHI_4(\n\t\t\t\tzend_uchar    flags,\n\t\t\t\tzend_uchar    nApplyCount,\n\t\t\t\tzend_uchar    nIteratorsCount,\n\t\t\t\tzend_uchar    reserve)\n\t\t} v;\n\t\tuint32_t flags;\n\t} u;\n\tuint32_t          nTableMask;\n\tBucket           *arData;\n\tuint32_t          nNumUsed;\n\tuint32_t          nNumOfElements;\n\tuint32_t          nTableSize;\n\tuint32_t          nInternalPointer;\n\tzend_long         nNextFreeElement;\n\tdtor_func_t       pDestructor;\n};\n```\n主要字段介绍:\n\n- gc 引用次数,垃圾回收时会用到。\n- union u 就不介绍了。\n- arData 存储元素的数组,内存是连续的,arData指向第一个元素。\n- nTableMask nTableSize的负数。\n- nTableSize 数组长度,为2的n此房。\n- nNumUsed 当前使用的Bucket数。\n- nNumOfElements 当前所有的Bucket数。\n- nNextFreeElement 下一个被使用的Bucket($a[] = '')\n- pDestructor 删除某个元素是会使用\n\n\n## Bucket结构\n```c\ntypedef struct _Bucket {\n\tzval              val;\n\tzend_ulong        h;                /* hash value (or numeric index)   */\n\tzend_string      *key;              /* string key or NULL for numerics */\n} Bucket;\n```\n\n- h hash出来的值(times33)\n- *key 存储元素的key\n- val 具体值,是个zval\n\n## 如何实现\n\nphp中实现散列表实现主要使用`存储元素数组`和 `映射函数`（也可以称作散列函数）和`映射表`\n\n\n#### 举个具体的栗子:\n 如果我们要在php代码中声明一个数组会发生什么?下边分析下php是如何实现数组的。\n ```php\n <?php\n $arr= [\n \t'a' => '111',\n \t'b' => '222',\n \t'c' => 'ccc'\n ];\n ```\n1. 首先肯定是初始化。\n2. 接下来将每个元素对应的值依照顺序拷贝到 Bucket里。\n3. 然后利用映射函数对求值,根据算出来的值将其对应的bucket的地址写到该值对应的映射这表里。\n\n具体操作如下图:\n![image](/photo/img/php数组实现/php数组具体实现.png)\n\n当然我们这里的映射是理想映射,因为在映射的计算过程中可能存在冲突,后续会介绍映射函数,以及如何解映射函数计算后的冲突。\n\n\n### 初始化\n\n```c\nZEND_API void ZEND_FASTCALL _zend_hash_init(HashTable *ht, uint32_t nSize, dtor_func_t pDestructor, zend_bool persistent ZEND_FILE_LINE_DC)\n{\n\tGC_REFCOUNT(ht) = 1; //设置引用次数\n\tGC_TYPE_INFO(ht) = IS_ARRAY; //设置数据类型\n\tht->u.flags = (persistent ? HASH_FLAG_PERSISTENT : 0) | HASH_FLAG_APPLY_PROTECTION | HASH_FLAG_STATIC_KEYS;\n\tht->nTableMask = HT_MIN_MASK;\n\tHT_SET_DATA_ADDR(ht, &uninitialized_bucket);\n\tht->nNumUsed = 0;\n\tht->nNumOfElements = 0;\n\tht->nInternalPointer = HT_INVALID_IDX;\n\tht->nNextFreeElement = 0;\n\tht->pDestructor = pDestructor;\n\tht->nTableSize = zend_hash_check_size(nSize);\n}\n```\n初始化的时候主要是对hashtable中各个成员的进行初始化设置,而且在这个时候不会给arData分配内存,只有在开始插入数据的时候才会\n为arData分配内存。\n\n\n\n## 映射函数\n\n映射函数其实就是一次`hash`操作和和一次`|`操作.\nhash操作就是上边锁提到得到times33操作,`|`操作是计算出来的hash值与nTableSize进行计算。\n```\nnIndex = ket->h | nTableMask;\n```\n因为nTableMask是nTableSize的负数,所以计算出来的nIndex值区间应该为[-1,nTableMask]。\n\n此处待补充 为什么会在[-1, nTableMask] 区间内。\n\n### 写入数据\n\n在初始化的时候并不会对arData分配内存,只有在写入的时候才会真正分配内存\n\n```c\nstatic void zend_always_inline zend_hash_real_init_ex(HashTable *ht, int packed)\n{\n\tHT_ASSERT(GC_REFCOUNT(ht) == 1);\n\tZEND_ASSERT(!((ht)->u.flags & HASH_FLAG_INITIALIZED));\n\tif (packed) {\n\t\tHT_SET_DATA_ADDR(ht, pemalloc(HT_SIZE(ht), (ht)->u.flags & HASH_FLAG_PERSISTENT));\n\t\t(ht)->u.flags |= HASH_FLAG_INITIALIZED | HASH_FLAG_PACKED;\n\t\tHT_HASH_RESET_PACKED(ht);\n\t} else {\n\t\t(ht)->nTableMask = -(ht)->nTableSize;\n\t\tHT_SET_DATA_ADDR(ht, pemalloc(HT_SIZE(ht), (ht)->u.flags & HASH_FLAG_PERSISTENT));\n\t\t(ht)->u.flags |= HASH_FLAG_INITIALIZED;\n\t\tif (EXPECTED(ht->nTableMask == -8)) {\n\t\t\tBucket *arData = ht->arData;\n\n\t\t\tHT_HASH_EX(arData, -8) = -1;\n\t\t\tHT_HASH_EX(arData, -7) = -1;\n\t\t\tHT_HASH_EX(arData, -6) = -1;\n\t\t\tHT_HASH_EX(arData, -5) = -1;\n\t\t\tHT_HASH_EX(arData, -4) = -1;\n\t\t\tHT_HASH_EX(arData, -3) = -1;\n\t\t\tHT_HASH_EX(arData, -2) = -1;\n\t\t\tHT_HASH_EX(arData, -1) = -1;\n\t\t} else {\n\t\t\tHT_HASH_RESET(ht);\n\t\t}\n\t}\n}\n```\n分配具体的内存\n\n```c\n#define HT_SIZE_EX(nTableSize, nTableMask) \\\n\t(HT_DATA_SIZE((nTableSize)) + HT_HASH_SIZE((nTableMask)))\n```\n\n```\n#define HT_HASH_SIZE(nTableMask) \\\n\t(((size_t)(uint32_t)-(int32_t)(nTableMask)) * sizeof(uint32_t))\n\n#define HT_DATA_SIZE(nTableSize) \\\n\t((size_t)(nTableSize) * sizeof(Bucket))\n```\n\n可以看到在分配具体分配内存的时候会分配 nTableSize*(Bucket+uint32_t)大小的内存。\n讲道理只需要分配nTableSize*Bucket大小内存就可以了,为什么会多余出来 nTableSize*uint32_t内存呢?\n因为nTableSize*uint32_t就是`映射表`所占内存大小。所以说Bucket会和映射表一次申请内存。\n写完成写入操作以后会将`*arData` 指向第一个Bucket。\n\n具体在内存里的结果如图所示:\n![image](/photo/img/php数组实现/hashtable.png)\n\n\n`映射表`在初始化的时候所有值都是-1,只有在被赋值时候会写入对应`Bucket`所在链表的偏移量。;\nht->arData 指向第一个`Bucket`的位置,在赋值的时候会按照列表顺序,将值写入`Bucket`的value里,然后会根据\n映射函数算出值当做偏移量找到对应`映射表`的元素,然后将当前`Bucket`写入此元素。\n\nps nTableSize 为2的次方倍。\n\n\n\n## 冲突\n\n如果`nIndex = ket->h | nTableMask` 算出来的值冲突了怎么办? 首先`映射表`的每个元素不是链表,所以导致无法存储多个元素。\n在php中是这样处理冲突的:\n首先`映射表`的所有元素初始化值为 -1 ,当前\n如果用冲突会将新算出来的值对应的`Bucket`覆盖原来旧的`Bucket`,然后将旧的`Bucket`迁移到新的`Bucket`,\n并将旧的`Bucket`的u2.next(默认为-1) 指向新`Bucket`。\n\n如图\n![image](/photo/img/php数组实现/链表冲突.png)\n\n \n## 查找\n\nphp再查找一个数组元素是,首先会根据其key 获取到计算后hash值'ket->h',然后根据映射函数算出当前元素在`映射表`中的偏移量,利用当前位置+偏移量找到`映射表`的元素,再根据其内的偏量找到对应`Bucket`链表的首个元素位置,最后遍历该链表核对key值,找到对应的值。\n\n具体实现函数:\n```c\nstatic zend_always_inline Bucket *zend_hash_find_bucket(const HashTable *ht, zend_string *key)\n{\n\tzend_ulong h;\n\tuint32_t nIndex;\n\tuint32_t idx;\n\tBucket *p, *arData;\n\n\th = zend_string_hash_val(key);\n\tarData = ht->arData;\n\tnIndex = h | ht->nTableMask;\n\tidx = HT_HASH_EX(arData, nIndex);\n\twhile (EXPECTED(idx != HT_INVALID_IDX)) {\n\t\tp = HT_HASH_TO_BUCKET_EX(arData, idx);\n\t\tif (EXPECTED(p->key == key)) { /* check for the same interned string */\n\t\t\treturn p;\n\t\t} else if (EXPECTED(p->h == h) &&\n\t\t     EXPECTED(p->key) &&\n\t\t     EXPECTED(ZSTR_LEN(p->key) == ZSTR_LEN(key)) &&\n\t\t     EXPECTED(memcmp(ZSTR_VAL(p->key), ZSTR_VAL(key), ZSTR_LEN(key)) == 0)) {\n\t\t\treturn p;\n\t\t}\n\t\tidx = Z_NEXT(p->val);\n\t}\n\treturn NULL;\n}\n```\n\n## 扩容\n\n数组的容量在初始化的时候已经确定了大小,就是nTableSize。当然映射函数也是根据 nTableMask 来计算的。\n所以我们扩容时候必须重新计算索引,也就是`映射表`里的值。\n具体扩容规则:\n首先当需要扩容时,会计算当前`Bucket`链表里删除元素数量占总表元素数量的比例,如果没有超过阈值则申请分配一个原来数组大小两倍的新素组,把元素复制到新数组上,然后重新建立索引。\n\n阈值判断:\n```c\nht->nNumUsed > ht->nNumOfElements + (ht->nNumOfElements >> 5\n```\n\n处理过程:\n```c\nstatic void ZEND_FASTCALL zend_hash_do_resize(HashTable *ht)\n{\n\n\tIS_CONSISTENT(ht);\n\tHT_ASSERT(GC_REFCOUNT(ht) == 1);\n\n\tif (ht->nNumUsed > ht->nNumOfElements + (ht->nNumOfElements >> 5)) { /* additional term is there to amortize the cost of compaction */\n\t\tHANDLE_BLOCK_INTERRUPTIONS();\n\t\tzend_hash_rehash(ht);\n\t\tHANDLE_UNBLOCK_INTERRUPTIONS();\n\t} else if (ht->nTableSize < HT_MAX_SIZE) {\t/* Let's double the table size */\n\t\tvoid *new_data, *old_data = HT_GET_DATA_ADDR(ht);\n\t\tuint32_t nSize = ht->nTableSize + ht->nTableSize;\n\t\tBucket *old_buckets = ht->arData;\n\n\t\tHANDLE_BLOCK_INTERRUPTIONS();\n\t\tnew_data = pemalloc(HT_SIZE_EX(nSize, -nSize), ht->u.flags & HASH_FLAG_PERSISTENT);\n\t\tht->nTableSize = nSize;\n\t\tht->nTableMask = -ht->nTableSize;\n\t\tHT_SET_DATA_ADDR(ht, new_data);\n\t\tmemcpy(ht->arData, old_buckets, sizeof(Bucket) * ht->nNumUsed);\n\t\tpefree(old_data, ht->u.flags & HASH_FLAG_PERSISTENT);\n\t\tzend_hash_rehash(ht);\n\t\tHANDLE_UNBLOCK_INTERRUPTIONS();\n\t} else {\n\t\tzend_error_noreturn(E_ERROR, \"Possible integer overflow in memory allocation (%zu * %zu + %zu)\", ht->nTableSize * 2, sizeof(Bucket) + sizeof(uint32_t), sizeof(Bucket));\n\t}\n}\n\n```\n在处理的过程中还会把已经删除的`Bucket`给删除。\n\n具体的操作在`zend_hash.c`文件里。\n如果超过阈值,则会把已经删除`Bucket`移除,然后把又有后边的元素往前移动,补上空缺的`Bucket`,当然索引也会重建。\n\n\n\n\n## 参考\n- [time33 ](https://www.cnblogs.com/52fhy/p/5007456.html)\n- [2.1 变量的内部实现](https://github.com/pangudashu/php7-internal/blob/master/2/zval.md)\n\n\n\n\n\n","source":"_posts/php数组实现.md","raw":"---\ntitle: php数组实现\ndate: 2018-08-20 20:00:08\ntags: php源码\ncategories: php源码学习\ntoc: true\n---\n\nphp的数组依赖于hashtable实现的。\n\nTimes33的算法很简单，就是不断的乘33,下边是times33算法:\n\n## Times33(hash)\n\n```php\n<?php\nfunction myHash($str) {\n    // hash(i) = hash(i-1) * 33 + str[i]\n    $hash = 5381;\n    $s    = md5($str); //相比其它版本，进行了md5加密\n    $seed = 5;\n    $len  = 32;//加密后长度32\n    for ($i = 0; $i < $len; $i++) {\n        // (hash << 5) + hash 相当于 hash * 33\n        //$hash = sprintf(\"%u\", $hash * 33) + ord($s{$i});\n        //$hash = ($hash * 33 + ord($s{$i})) & 0x7FFFFFFF;\n        $hash = ($hash << $seed) + $hash + ord($s{$i});\n    }\n \n    return $hash & 0x7FFFFFFF;\n}\n```\n\n其中`<<` 表示左移,每次左移表示x2例如:\n\n```php\n<?php\n$num = 2;\n\necho $num << 2;\n```\n\n所以($hash << $seed)表示 `$hash * 32` ,同时加上$hash,也就表示 `$hash * 33`了。ord()函数返回字符串的首个字符的 ASCII 值。\n最后`$hash & 0x7FFFFFFF` 表示与整形的最大值与操作(`0x7FFFF111FFF`二进制为`1111111111111111111111111111`),\n这个与操作会截取超过整形二进制部分,所以times33计算出来的值不会超过整形的最大值。\n\n## 为什么要用hashtable实现php数组?\n\n因为散列表是根据关键建码值直接进项访问的数据结构。在key和value之间有一个映射函数,可以根据key直接索引到对应的value值,它并\n不会使用一般的对比操作,而是直接使用`内存的起始位置和偏移位置`进行寻址,所以会比正常的寻址要快。\n\n\n## 散列表结构\n\n```c\nstruct _zend_array {\n\tzend_refcounted_h gc;\n\tunion {\n\t\tstruct {\n\t\t\tZEND_ENDIAN_LOHI_4(\n\t\t\t\tzend_uchar    flags,\n\t\t\t\tzend_uchar    nApplyCount,\n\t\t\t\tzend_uchar    nIteratorsCount,\n\t\t\t\tzend_uchar    reserve)\n\t\t} v;\n\t\tuint32_t flags;\n\t} u;\n\tuint32_t          nTableMask;\n\tBucket           *arData;\n\tuint32_t          nNumUsed;\n\tuint32_t          nNumOfElements;\n\tuint32_t          nTableSize;\n\tuint32_t          nInternalPointer;\n\tzend_long         nNextFreeElement;\n\tdtor_func_t       pDestructor;\n};\n```\n主要字段介绍:\n\n- gc 引用次数,垃圾回收时会用到。\n- union u 就不介绍了。\n- arData 存储元素的数组,内存是连续的,arData指向第一个元素。\n- nTableMask nTableSize的负数。\n- nTableSize 数组长度,为2的n此房。\n- nNumUsed 当前使用的Bucket数。\n- nNumOfElements 当前所有的Bucket数。\n- nNextFreeElement 下一个被使用的Bucket($a[] = '')\n- pDestructor 删除某个元素是会使用\n\n\n## Bucket结构\n```c\ntypedef struct _Bucket {\n\tzval              val;\n\tzend_ulong        h;                /* hash value (or numeric index)   */\n\tzend_string      *key;              /* string key or NULL for numerics */\n} Bucket;\n```\n\n- h hash出来的值(times33)\n- *key 存储元素的key\n- val 具体值,是个zval\n\n## 如何实现\n\nphp中实现散列表实现主要使用`存储元素数组`和 `映射函数`（也可以称作散列函数）和`映射表`\n\n\n#### 举个具体的栗子:\n 如果我们要在php代码中声明一个数组会发生什么?下边分析下php是如何实现数组的。\n ```php\n <?php\n $arr= [\n \t'a' => '111',\n \t'b' => '222',\n \t'c' => 'ccc'\n ];\n ```\n1. 首先肯定是初始化。\n2. 接下来将每个元素对应的值依照顺序拷贝到 Bucket里。\n3. 然后利用映射函数对求值,根据算出来的值将其对应的bucket的地址写到该值对应的映射这表里。\n\n具体操作如下图:\n![image](/photo/img/php数组实现/php数组具体实现.png)\n\n当然我们这里的映射是理想映射,因为在映射的计算过程中可能存在冲突,后续会介绍映射函数,以及如何解映射函数计算后的冲突。\n\n\n### 初始化\n\n```c\nZEND_API void ZEND_FASTCALL _zend_hash_init(HashTable *ht, uint32_t nSize, dtor_func_t pDestructor, zend_bool persistent ZEND_FILE_LINE_DC)\n{\n\tGC_REFCOUNT(ht) = 1; //设置引用次数\n\tGC_TYPE_INFO(ht) = IS_ARRAY; //设置数据类型\n\tht->u.flags = (persistent ? HASH_FLAG_PERSISTENT : 0) | HASH_FLAG_APPLY_PROTECTION | HASH_FLAG_STATIC_KEYS;\n\tht->nTableMask = HT_MIN_MASK;\n\tHT_SET_DATA_ADDR(ht, &uninitialized_bucket);\n\tht->nNumUsed = 0;\n\tht->nNumOfElements = 0;\n\tht->nInternalPointer = HT_INVALID_IDX;\n\tht->nNextFreeElement = 0;\n\tht->pDestructor = pDestructor;\n\tht->nTableSize = zend_hash_check_size(nSize);\n}\n```\n初始化的时候主要是对hashtable中各个成员的进行初始化设置,而且在这个时候不会给arData分配内存,只有在开始插入数据的时候才会\n为arData分配内存。\n\n\n\n## 映射函数\n\n映射函数其实就是一次`hash`操作和和一次`|`操作.\nhash操作就是上边锁提到得到times33操作,`|`操作是计算出来的hash值与nTableSize进行计算。\n```\nnIndex = ket->h | nTableMask;\n```\n因为nTableMask是nTableSize的负数,所以计算出来的nIndex值区间应该为[-1,nTableMask]。\n\n此处待补充 为什么会在[-1, nTableMask] 区间内。\n\n### 写入数据\n\n在初始化的时候并不会对arData分配内存,只有在写入的时候才会真正分配内存\n\n```c\nstatic void zend_always_inline zend_hash_real_init_ex(HashTable *ht, int packed)\n{\n\tHT_ASSERT(GC_REFCOUNT(ht) == 1);\n\tZEND_ASSERT(!((ht)->u.flags & HASH_FLAG_INITIALIZED));\n\tif (packed) {\n\t\tHT_SET_DATA_ADDR(ht, pemalloc(HT_SIZE(ht), (ht)->u.flags & HASH_FLAG_PERSISTENT));\n\t\t(ht)->u.flags |= HASH_FLAG_INITIALIZED | HASH_FLAG_PACKED;\n\t\tHT_HASH_RESET_PACKED(ht);\n\t} else {\n\t\t(ht)->nTableMask = -(ht)->nTableSize;\n\t\tHT_SET_DATA_ADDR(ht, pemalloc(HT_SIZE(ht), (ht)->u.flags & HASH_FLAG_PERSISTENT));\n\t\t(ht)->u.flags |= HASH_FLAG_INITIALIZED;\n\t\tif (EXPECTED(ht->nTableMask == -8)) {\n\t\t\tBucket *arData = ht->arData;\n\n\t\t\tHT_HASH_EX(arData, -8) = -1;\n\t\t\tHT_HASH_EX(arData, -7) = -1;\n\t\t\tHT_HASH_EX(arData, -6) = -1;\n\t\t\tHT_HASH_EX(arData, -5) = -1;\n\t\t\tHT_HASH_EX(arData, -4) = -1;\n\t\t\tHT_HASH_EX(arData, -3) = -1;\n\t\t\tHT_HASH_EX(arData, -2) = -1;\n\t\t\tHT_HASH_EX(arData, -1) = -1;\n\t\t} else {\n\t\t\tHT_HASH_RESET(ht);\n\t\t}\n\t}\n}\n```\n分配具体的内存\n\n```c\n#define HT_SIZE_EX(nTableSize, nTableMask) \\\n\t(HT_DATA_SIZE((nTableSize)) + HT_HASH_SIZE((nTableMask)))\n```\n\n```\n#define HT_HASH_SIZE(nTableMask) \\\n\t(((size_t)(uint32_t)-(int32_t)(nTableMask)) * sizeof(uint32_t))\n\n#define HT_DATA_SIZE(nTableSize) \\\n\t((size_t)(nTableSize) * sizeof(Bucket))\n```\n\n可以看到在分配具体分配内存的时候会分配 nTableSize*(Bucket+uint32_t)大小的内存。\n讲道理只需要分配nTableSize*Bucket大小内存就可以了,为什么会多余出来 nTableSize*uint32_t内存呢?\n因为nTableSize*uint32_t就是`映射表`所占内存大小。所以说Bucket会和映射表一次申请内存。\n写完成写入操作以后会将`*arData` 指向第一个Bucket。\n\n具体在内存里的结果如图所示:\n![image](/photo/img/php数组实现/hashtable.png)\n\n\n`映射表`在初始化的时候所有值都是-1,只有在被赋值时候会写入对应`Bucket`所在链表的偏移量。;\nht->arData 指向第一个`Bucket`的位置,在赋值的时候会按照列表顺序,将值写入`Bucket`的value里,然后会根据\n映射函数算出值当做偏移量找到对应`映射表`的元素,然后将当前`Bucket`写入此元素。\n\nps nTableSize 为2的次方倍。\n\n\n\n## 冲突\n\n如果`nIndex = ket->h | nTableMask` 算出来的值冲突了怎么办? 首先`映射表`的每个元素不是链表,所以导致无法存储多个元素。\n在php中是这样处理冲突的:\n首先`映射表`的所有元素初始化值为 -1 ,当前\n如果用冲突会将新算出来的值对应的`Bucket`覆盖原来旧的`Bucket`,然后将旧的`Bucket`迁移到新的`Bucket`,\n并将旧的`Bucket`的u2.next(默认为-1) 指向新`Bucket`。\n\n如图\n![image](/photo/img/php数组实现/链表冲突.png)\n\n \n## 查找\n\nphp再查找一个数组元素是,首先会根据其key 获取到计算后hash值'ket->h',然后根据映射函数算出当前元素在`映射表`中的偏移量,利用当前位置+偏移量找到`映射表`的元素,再根据其内的偏量找到对应`Bucket`链表的首个元素位置,最后遍历该链表核对key值,找到对应的值。\n\n具体实现函数:\n```c\nstatic zend_always_inline Bucket *zend_hash_find_bucket(const HashTable *ht, zend_string *key)\n{\n\tzend_ulong h;\n\tuint32_t nIndex;\n\tuint32_t idx;\n\tBucket *p, *arData;\n\n\th = zend_string_hash_val(key);\n\tarData = ht->arData;\n\tnIndex = h | ht->nTableMask;\n\tidx = HT_HASH_EX(arData, nIndex);\n\twhile (EXPECTED(idx != HT_INVALID_IDX)) {\n\t\tp = HT_HASH_TO_BUCKET_EX(arData, idx);\n\t\tif (EXPECTED(p->key == key)) { /* check for the same interned string */\n\t\t\treturn p;\n\t\t} else if (EXPECTED(p->h == h) &&\n\t\t     EXPECTED(p->key) &&\n\t\t     EXPECTED(ZSTR_LEN(p->key) == ZSTR_LEN(key)) &&\n\t\t     EXPECTED(memcmp(ZSTR_VAL(p->key), ZSTR_VAL(key), ZSTR_LEN(key)) == 0)) {\n\t\t\treturn p;\n\t\t}\n\t\tidx = Z_NEXT(p->val);\n\t}\n\treturn NULL;\n}\n```\n\n## 扩容\n\n数组的容量在初始化的时候已经确定了大小,就是nTableSize。当然映射函数也是根据 nTableMask 来计算的。\n所以我们扩容时候必须重新计算索引,也就是`映射表`里的值。\n具体扩容规则:\n首先当需要扩容时,会计算当前`Bucket`链表里删除元素数量占总表元素数量的比例,如果没有超过阈值则申请分配一个原来数组大小两倍的新素组,把元素复制到新数组上,然后重新建立索引。\n\n阈值判断:\n```c\nht->nNumUsed > ht->nNumOfElements + (ht->nNumOfElements >> 5\n```\n\n处理过程:\n```c\nstatic void ZEND_FASTCALL zend_hash_do_resize(HashTable *ht)\n{\n\n\tIS_CONSISTENT(ht);\n\tHT_ASSERT(GC_REFCOUNT(ht) == 1);\n\n\tif (ht->nNumUsed > ht->nNumOfElements + (ht->nNumOfElements >> 5)) { /* additional term is there to amortize the cost of compaction */\n\t\tHANDLE_BLOCK_INTERRUPTIONS();\n\t\tzend_hash_rehash(ht);\n\t\tHANDLE_UNBLOCK_INTERRUPTIONS();\n\t} else if (ht->nTableSize < HT_MAX_SIZE) {\t/* Let's double the table size */\n\t\tvoid *new_data, *old_data = HT_GET_DATA_ADDR(ht);\n\t\tuint32_t nSize = ht->nTableSize + ht->nTableSize;\n\t\tBucket *old_buckets = ht->arData;\n\n\t\tHANDLE_BLOCK_INTERRUPTIONS();\n\t\tnew_data = pemalloc(HT_SIZE_EX(nSize, -nSize), ht->u.flags & HASH_FLAG_PERSISTENT);\n\t\tht->nTableSize = nSize;\n\t\tht->nTableMask = -ht->nTableSize;\n\t\tHT_SET_DATA_ADDR(ht, new_data);\n\t\tmemcpy(ht->arData, old_buckets, sizeof(Bucket) * ht->nNumUsed);\n\t\tpefree(old_data, ht->u.flags & HASH_FLAG_PERSISTENT);\n\t\tzend_hash_rehash(ht);\n\t\tHANDLE_UNBLOCK_INTERRUPTIONS();\n\t} else {\n\t\tzend_error_noreturn(E_ERROR, \"Possible integer overflow in memory allocation (%zu * %zu + %zu)\", ht->nTableSize * 2, sizeof(Bucket) + sizeof(uint32_t), sizeof(Bucket));\n\t}\n}\n\n```\n在处理的过程中还会把已经删除的`Bucket`给删除。\n\n具体的操作在`zend_hash.c`文件里。\n如果超过阈值,则会把已经删除`Bucket`移除,然后把又有后边的元素往前移动,补上空缺的`Bucket`,当然索引也会重建。\n\n\n\n\n## 参考\n- [time33 ](https://www.cnblogs.com/52fhy/p/5007456.html)\n- [2.1 变量的内部实现](https://github.com/pangudashu/php7-internal/blob/master/2/zval.md)\n\n\n\n\n\n","slug":"php数组实现","published":1,"updated":"2019-02-20T16:48:36.067Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjswwkdpm001jg7wwm01bbtwr","content":"<p>php的数组依赖于hashtable实现的。</p>\n<p>Times33的算法很简单，就是不断的乘33,下边是times33算法:</p>\n<h2 id=\"Times33-hash\"><a href=\"#Times33-hash\" class=\"headerlink\" title=\"Times33(hash)\"></a>Times33(hash)</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myHash</span><span class=\"params\">($str)</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// hash(i) = hash(i-1) * 33 + str[i]</span></div><div class=\"line\">    $hash = <span class=\"number\">5381</span>;</div><div class=\"line\">    $s    = md5($str); <span class=\"comment\">//相比其它版本，进行了md5加密</span></div><div class=\"line\">    $seed = <span class=\"number\">5</span>;</div><div class=\"line\">    $len  = <span class=\"number\">32</span>;<span class=\"comment\">//加密后长度32</span></div><div class=\"line\">    <span class=\"keyword\">for</span> ($i = <span class=\"number\">0</span>; $i &lt; $len; $i++) &#123;</div><div class=\"line\">        <span class=\"comment\">// (hash &lt;&lt; 5) + hash 相当于 hash * 33</span></div><div class=\"line\">        <span class=\"comment\">//$hash = sprintf(\"%u\", $hash * 33) + ord($s&#123;$i&#125;);</span></div><div class=\"line\">        <span class=\"comment\">//$hash = ($hash * 33 + ord($s&#123;$i&#125;)) &amp; 0x7FFFFFFF;</span></div><div class=\"line\">        $hash = ($hash &lt;&lt; $seed) + $hash + ord($s&#123;$i&#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"keyword\">return</span> $hash &amp; <span class=\"number\">0x7FFFFFFF</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>其中<code>&lt;&lt;</code> 表示左移,每次左移表示x2例如:</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">$num = <span class=\"number\">2</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">echo</span> $num &lt;&lt; <span class=\"number\">2</span>;</div></pre></td></tr></table></figure>\n<p>所以($hash &lt;&lt; $seed)表示 <code>$hash * 32</code> ,同时加上$hash,也就表示 <code>$hash * 33</code>了。ord()函数返回字符串的首个字符的 ASCII 值。<br>最后<code>$hash &amp; 0x7FFFFFFF</code> 表示与整形的最大值与操作(<code>0x7FFFF111FFF</code>二进制为<code>1111111111111111111111111111</code>),<br>这个与操作会截取超过整形二进制部分,所以times33计算出来的值不会超过整形的最大值。</p>\n<h2 id=\"为什么要用hashtable实现php数组\"><a href=\"#为什么要用hashtable实现php数组\" class=\"headerlink\" title=\"为什么要用hashtable实现php数组?\"></a>为什么要用hashtable实现php数组?</h2><p>因为散列表是根据关键建码值直接进项访问的数据结构。在key和value之间有一个映射函数,可以根据key直接索引到对应的value值,它并<br>不会使用一般的对比操作,而是直接使用<code>内存的起始位置和偏移位置</code>进行寻址,所以会比正常的寻址要快。</p>\n<h2 id=\"散列表结构\"><a href=\"#散列表结构\" class=\"headerlink\" title=\"散列表结构\"></a>散列表结构</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">struct</span> _zend_array &#123;</div><div class=\"line\">\tzend_refcounted_h gc;</div><div class=\"line\">\t<span class=\"keyword\">union</span> &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">\t\t\tZEND_ENDIAN_LOHI_4(</div><div class=\"line\">\t\t\t\tzend_uchar    flags,</div><div class=\"line\">\t\t\t\tzend_uchar    nApplyCount,</div><div class=\"line\">\t\t\t\tzend_uchar    nIteratorsCount,</div><div class=\"line\">\t\t\t\tzend_uchar    reserve)</div><div class=\"line\">\t\t&#125; v;</div><div class=\"line\">\t\t<span class=\"keyword\">uint32_t</span> flags;</div><div class=\"line\">\t&#125; u;</div><div class=\"line\">\t<span class=\"keyword\">uint32_t</span>          nTableMask;</div><div class=\"line\">\tBucket           *arData;</div><div class=\"line\">\t<span class=\"keyword\">uint32_t</span>          nNumUsed;</div><div class=\"line\">\t<span class=\"keyword\">uint32_t</span>          nNumOfElements;</div><div class=\"line\">\t<span class=\"keyword\">uint32_t</span>          nTableSize;</div><div class=\"line\">\t<span class=\"keyword\">uint32_t</span>          nInternalPointer;</div><div class=\"line\">\tzend_long         nNextFreeElement;</div><div class=\"line\">\t<span class=\"keyword\">dtor_func_t</span>       pDestructor;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>主要字段介绍:</p>\n<ul>\n<li>gc 引用次数,垃圾回收时会用到。</li>\n<li>union u 就不介绍了。</li>\n<li>arData 存储元素的数组,内存是连续的,arData指向第一个元素。</li>\n<li>nTableMask nTableSize的负数。</li>\n<li>nTableSize 数组长度,为2的n此房。</li>\n<li>nNumUsed 当前使用的Bucket数。</li>\n<li>nNumOfElements 当前所有的Bucket数。</li>\n<li>nNextFreeElement 下一个被使用的Bucket($a[] = ‘’)</li>\n<li>pDestructor 删除某个元素是会使用</li>\n</ul>\n<h2 id=\"Bucket结构\"><a href=\"#Bucket结构\" class=\"headerlink\" title=\"Bucket结构\"></a>Bucket结构</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> _Bucket &#123;</div><div class=\"line\">\tzval              val;</div><div class=\"line\">\tzend_ulong        h;                <span class=\"comment\">/* hash value (or numeric index)   */</span></div><div class=\"line\">\tzend_string      *key;              <span class=\"comment\">/* string key or NULL for numerics */</span></div><div class=\"line\">&#125; Bucket;</div></pre></td></tr></table></figure>\n<ul>\n<li>h hash出来的值(times33)</li>\n<li>*key 存储元素的key</li>\n<li>val 具体值,是个zval</li>\n</ul>\n<h2 id=\"如何实现\"><a href=\"#如何实现\" class=\"headerlink\" title=\"如何实现\"></a>如何实现</h2><p>php中实现散列表实现主要使用<code>存储元素数组</code>和 <code>映射函数</code>（也可以称作散列函数）和<code>映射表</code></p>\n<h4 id=\"举个具体的栗子\"><a href=\"#举个具体的栗子\" class=\"headerlink\" title=\"举个具体的栗子:\"></a>举个具体的栗子:</h4><p> 如果我们要在php代码中声明一个数组会发生什么?下边分析下php是如何实现数组的。<br> <figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">$arr= [</div><div class=\"line\">\t<span class=\"string\">'a'</span> =&gt; <span class=\"string\">'111'</span>,</div><div class=\"line\">\t<span class=\"string\">'b'</span> =&gt; <span class=\"string\">'222'</span>,</div><div class=\"line\">\t<span class=\"string\">'c'</span> =&gt; <span class=\"string\">'ccc'</span></div><div class=\"line\">];</div></pre></td></tr></table></figure></p>\n<ol>\n<li>首先肯定是初始化。</li>\n<li>接下来将每个元素对应的值依照顺序拷贝到 Bucket里。</li>\n<li>然后利用映射函数对求值,根据算出来的值将其对应的bucket的地址写到该值对应的映射这表里。</li>\n</ol>\n<p>具体操作如下图:<br><img src=\"/photo/img/php数组实现/php数组具体实现.png\" alt=\"image\"></p>\n<p>当然我们这里的映射是理想映射,因为在映射的计算过程中可能存在冲突,后续会介绍映射函数,以及如何解映射函数计算后的冲突。</p>\n<h3 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">ZEND_API <span class=\"keyword\">void</span> ZEND_FASTCALL _zend_hash_init(HashTable *ht, <span class=\"keyword\">uint32_t</span> nSize, <span class=\"keyword\">dtor_func_t</span> pDestructor, zend_bool persistent ZEND_FILE_LINE_DC)</div><div class=\"line\">&#123;</div><div class=\"line\">\tGC_REFCOUNT(ht) = <span class=\"number\">1</span>; <span class=\"comment\">//设置引用次数</span></div><div class=\"line\">\tGC_TYPE_INFO(ht) = IS_ARRAY; <span class=\"comment\">//设置数据类型</span></div><div class=\"line\">\tht-&gt;u.flags = (persistent ? HASH_FLAG_PERSISTENT : <span class=\"number\">0</span>) | HASH_FLAG_APPLY_PROTECTION | HASH_FLAG_STATIC_KEYS;</div><div class=\"line\">\tht-&gt;nTableMask = HT_MIN_MASK;</div><div class=\"line\">\tHT_SET_DATA_ADDR(ht, &amp;uninitialized_bucket);</div><div class=\"line\">\tht-&gt;nNumUsed = <span class=\"number\">0</span>;</div><div class=\"line\">\tht-&gt;nNumOfElements = <span class=\"number\">0</span>;</div><div class=\"line\">\tht-&gt;nInternalPointer = HT_INVALID_IDX;</div><div class=\"line\">\tht-&gt;nNextFreeElement = <span class=\"number\">0</span>;</div><div class=\"line\">\tht-&gt;pDestructor = pDestructor;</div><div class=\"line\">\tht-&gt;nTableSize = zend_hash_check_size(nSize);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>初始化的时候主要是对hashtable中各个成员的进行初始化设置,而且在这个时候不会给arData分配内存,只有在开始插入数据的时候才会<br>为arData分配内存。</p>\n<h2 id=\"映射函数\"><a href=\"#映射函数\" class=\"headerlink\" title=\"映射函数\"></a>映射函数</h2><p>映射函数其实就是一次<code>hash</code>操作和和一次<code>|</code>操作.<br>hash操作就是上边锁提到得到times33操作,<code>|</code>操作是计算出来的hash值与nTableSize进行计算。<br><figure class=\"highlight coq\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">nIndex = ket-&gt;h | <span class=\"type\">nTableMask</span>;</div></pre></td></tr></table></figure></p>\n<p>因为nTableMask是nTableSize的负数,所以计算出来的nIndex值区间应该为[-1,nTableMask]。</p>\n<p>此处待补充 为什么会在[-1, nTableMask] 区间内。</p>\n<h3 id=\"写入数据\"><a href=\"#写入数据\" class=\"headerlink\" title=\"写入数据\"></a>写入数据</h3><p>在初始化的时候并不会对arData分配内存,只有在写入的时候才会真正分配内存</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> zend_always_inline <span class=\"title\">zend_hash_real_init_ex</span><span class=\"params\">(HashTable *ht, <span class=\"keyword\">int</span> packed)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\tHT_ASSERT(GC_REFCOUNT(ht) == <span class=\"number\">1</span>);</div><div class=\"line\">\tZEND_ASSERT(!((ht)-&gt;u.flags &amp; HASH_FLAG_INITIALIZED));</div><div class=\"line\">\t<span class=\"keyword\">if</span> (packed) &#123;</div><div class=\"line\">\t\tHT_SET_DATA_ADDR(ht, pemalloc(HT_SIZE(ht), (ht)-&gt;u.flags &amp; HASH_FLAG_PERSISTENT));</div><div class=\"line\">\t\t(ht)-&gt;u.flags |= HASH_FLAG_INITIALIZED | HASH_FLAG_PACKED;</div><div class=\"line\">\t\tHT_HASH_RESET_PACKED(ht);</div><div class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t(ht)-&gt;nTableMask = -(ht)-&gt;nTableSize;</div><div class=\"line\">\t\tHT_SET_DATA_ADDR(ht, pemalloc(HT_SIZE(ht), (ht)-&gt;u.flags &amp; HASH_FLAG_PERSISTENT));</div><div class=\"line\">\t\t(ht)-&gt;u.flags |= HASH_FLAG_INITIALIZED;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (EXPECTED(ht-&gt;nTableMask == <span class=\"number\">-8</span>)) &#123;</div><div class=\"line\">\t\t\tBucket *arData = ht-&gt;arData;</div><div class=\"line\"></div><div class=\"line\">\t\t\tHT_HASH_EX(arData, <span class=\"number\">-8</span>) = <span class=\"number\">-1</span>;</div><div class=\"line\">\t\t\tHT_HASH_EX(arData, <span class=\"number\">-7</span>) = <span class=\"number\">-1</span>;</div><div class=\"line\">\t\t\tHT_HASH_EX(arData, <span class=\"number\">-6</span>) = <span class=\"number\">-1</span>;</div><div class=\"line\">\t\t\tHT_HASH_EX(arData, <span class=\"number\">-5</span>) = <span class=\"number\">-1</span>;</div><div class=\"line\">\t\t\tHT_HASH_EX(arData, <span class=\"number\">-4</span>) = <span class=\"number\">-1</span>;</div><div class=\"line\">\t\t\tHT_HASH_EX(arData, <span class=\"number\">-3</span>) = <span class=\"number\">-1</span>;</div><div class=\"line\">\t\t\tHT_HASH_EX(arData, <span class=\"number\">-2</span>) = <span class=\"number\">-1</span>;</div><div class=\"line\">\t\t\tHT_HASH_EX(arData, <span class=\"number\">-1</span>) = <span class=\"number\">-1</span>;</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\tHT_HASH_RESET(ht);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>分配具体的内存</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> HT_SIZE_EX(nTableSize, nTableMask) \\</span></div><div class=\"line\">\t(HT_DATA_SIZE((nTableSize)) + HT_HASH_SIZE((nTableMask)))</div></pre></td></tr></table></figure>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> HT_HASH_SIZE(nTableMask) \\</span></div><div class=\"line\">\t(((size_t)(uint32_t)-(int32_t)(nTableMask)) * <span class=\"keyword\">sizeof</span>(uint32_t))</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> HT_DATA_SIZE(nTableSize) \\</span></div><div class=\"line\">\t((size_t)(nTableSize) * <span class=\"keyword\">sizeof</span>(Bucket))</div></pre></td></tr></table></figure>\n<p>可以看到在分配具体分配内存的时候会分配 nTableSize<em>(Bucket+uint32_t)大小的内存。<br>讲道理只需要分配nTableSize</em>Bucket大小内存就可以了,为什么会多余出来 nTableSize<em>uint32_t内存呢?<br>因为nTableSize</em>uint32_t就是<code>映射表</code>所占内存大小。所以说Bucket会和映射表一次申请内存。<br>写完成写入操作以后会将<code>*arData</code> 指向第一个Bucket。</p>\n<p>具体在内存里的结果如图所示:<br><img src=\"/photo/img/php数组实现/hashtable.png\" alt=\"image\"></p>\n<p><code>映射表</code>在初始化的时候所有值都是-1,只有在被赋值时候会写入对应<code>Bucket</code>所在链表的偏移量。;<br>ht-&gt;arData 指向第一个<code>Bucket</code>的位置,在赋值的时候会按照列表顺序,将值写入<code>Bucket</code>的value里,然后会根据<br>映射函数算出值当做偏移量找到对应<code>映射表</code>的元素,然后将当前<code>Bucket</code>写入此元素。</p>\n<p>ps nTableSize 为2的次方倍。</p>\n<h2 id=\"冲突\"><a href=\"#冲突\" class=\"headerlink\" title=\"冲突\"></a>冲突</h2><p>如果<code>nIndex = ket-&gt;h | nTableMask</code> 算出来的值冲突了怎么办? 首先<code>映射表</code>的每个元素不是链表,所以导致无法存储多个元素。<br>在php中是这样处理冲突的:<br>首先<code>映射表</code>的所有元素初始化值为 -1 ,当前<br>如果用冲突会将新算出来的值对应的<code>Bucket</code>覆盖原来旧的<code>Bucket</code>,然后将旧的<code>Bucket</code>迁移到新的<code>Bucket</code>,<br>并将旧的<code>Bucket</code>的u2.next(默认为-1) 指向新<code>Bucket</code>。</p>\n<p>如图<br><img src=\"/photo/img/php数组实现/链表冲突.png\" alt=\"image\"></p>\n<h2 id=\"查找\"><a href=\"#查找\" class=\"headerlink\" title=\"查找\"></a>查找</h2><p>php再查找一个数组元素是,首先会根据其key 获取到计算后hash值’ket-&gt;h’,然后根据映射函数算出当前元素在<code>映射表</code>中的偏移量,利用当前位置+偏移量找到<code>映射表</code>的元素,再根据其内的偏量找到对应<code>Bucket</code>链表的首个元素位置,最后遍历该链表核对key值,找到对应的值。</p>\n<p>具体实现函数:<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> zend_always_inline Bucket *<span class=\"title\">zend_hash_find_bucket</span><span class=\"params\">(<span class=\"keyword\">const</span> HashTable *ht, zend_string *key)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\tzend_ulong h;</div><div class=\"line\">\t<span class=\"keyword\">uint32_t</span> nIndex;</div><div class=\"line\">\t<span class=\"keyword\">uint32_t</span> idx;</div><div class=\"line\">\tBucket *p, *arData;</div><div class=\"line\"></div><div class=\"line\">\th = zend_string_hash_val(key);</div><div class=\"line\">\tarData = ht-&gt;arData;</div><div class=\"line\">\tnIndex = h | ht-&gt;nTableMask;</div><div class=\"line\">\tidx = HT_HASH_EX(arData, nIndex);</div><div class=\"line\">\t<span class=\"keyword\">while</span> (EXPECTED(idx != HT_INVALID_IDX)) &#123;</div><div class=\"line\">\t\tp = HT_HASH_TO_BUCKET_EX(arData, idx);</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (EXPECTED(p-&gt;key == key)) &#123; <span class=\"comment\">/* check for the same interned string */</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> p;</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (EXPECTED(p-&gt;h == h) &amp;&amp;</div><div class=\"line\">\t\t     EXPECTED(p-&gt;key) &amp;&amp;</div><div class=\"line\">\t\t     EXPECTED(ZSTR_LEN(p-&gt;key) == ZSTR_LEN(key)) &amp;&amp;</div><div class=\"line\">\t\t     EXPECTED(<span class=\"built_in\">memcmp</span>(ZSTR_VAL(p-&gt;key), ZSTR_VAL(key), ZSTR_LEN(key)) == <span class=\"number\">0</span>)) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> p;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tidx = Z_NEXT(p-&gt;val);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"扩容\"><a href=\"#扩容\" class=\"headerlink\" title=\"扩容\"></a>扩容</h2><p>数组的容量在初始化的时候已经确定了大小,就是nTableSize。当然映射函数也是根据 nTableMask 来计算的。<br>所以我们扩容时候必须重新计算索引,也就是<code>映射表</code>里的值。<br>具体扩容规则:<br>首先当需要扩容时,会计算当前<code>Bucket</code>链表里删除元素数量占总表元素数量的比例,如果没有超过阈值则申请分配一个原来数组大小两倍的新素组,把元素复制到新数组上,然后重新建立索引。</p>\n<p>阈值判断:<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ht-&gt;nNumUsed &gt; ht-&gt;nNumOfElements + (ht-&gt;nNumOfElements &gt;&gt; <span class=\"number\">5</span></div></pre></td></tr></table></figure></p>\n<p>处理过程:<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> ZEND_FASTCALL <span class=\"title\">zend_hash_do_resize</span><span class=\"params\">(HashTable *ht)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\"></div><div class=\"line\">\tIS_CONSISTENT(ht);</div><div class=\"line\">\tHT_ASSERT(GC_REFCOUNT(ht) == <span class=\"number\">1</span>);</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> (ht-&gt;nNumUsed &gt; ht-&gt;nNumOfElements + (ht-&gt;nNumOfElements &gt;&gt; <span class=\"number\">5</span>)) &#123; <span class=\"comment\">/* additional term is there to amortize the cost of compaction */</span></div><div class=\"line\">\t\tHANDLE_BLOCK_INTERRUPTIONS();</div><div class=\"line\">\t\tzend_hash_rehash(ht);</div><div class=\"line\">\t\tHANDLE_UNBLOCK_INTERRUPTIONS();</div><div class=\"line\">\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (ht-&gt;nTableSize &lt; HT_MAX_SIZE) &#123;\t<span class=\"comment\">/* Let's double the table size */</span></div><div class=\"line\">\t\t<span class=\"keyword\">void</span> *new_data, *old_data = HT_GET_DATA_ADDR(ht);</div><div class=\"line\">\t\t<span class=\"keyword\">uint32_t</span> nSize = ht-&gt;nTableSize + ht-&gt;nTableSize;</div><div class=\"line\">\t\tBucket *old_buckets = ht-&gt;arData;</div><div class=\"line\"></div><div class=\"line\">\t\tHANDLE_BLOCK_INTERRUPTIONS();</div><div class=\"line\">\t\tnew_data = pemalloc(HT_SIZE_EX(nSize, -nSize), ht-&gt;u.flags &amp; HASH_FLAG_PERSISTENT);</div><div class=\"line\">\t\tht-&gt;nTableSize = nSize;</div><div class=\"line\">\t\tht-&gt;nTableMask = -ht-&gt;nTableSize;</div><div class=\"line\">\t\tHT_SET_DATA_ADDR(ht, new_data);</div><div class=\"line\">\t\t<span class=\"built_in\">memcpy</span>(ht-&gt;arData, old_buckets, <span class=\"keyword\">sizeof</span>(Bucket) * ht-&gt;nNumUsed);</div><div class=\"line\">\t\tpefree(old_data, ht-&gt;u.flags &amp; HASH_FLAG_PERSISTENT);</div><div class=\"line\">\t\tzend_hash_rehash(ht);</div><div class=\"line\">\t\tHANDLE_UNBLOCK_INTERRUPTIONS();</div><div class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\tzend_error_noreturn(E_ERROR, <span class=\"string\">\"Possible integer overflow in memory allocation (%zu * %zu + %zu)\"</span>, ht-&gt;nTableSize * <span class=\"number\">2</span>, <span class=\"keyword\">sizeof</span>(Bucket) + <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">uint32_t</span>), <span class=\"keyword\">sizeof</span>(Bucket));</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在处理的过程中还会把已经删除的<code>Bucket</code>给删除。</p>\n<p>具体的操作在<code>zend_hash.c</code>文件里。<br>如果超过阈值,则会把已经删除<code>Bucket</code>移除,然后把又有后边的元素往前移动,补上空缺的<code>Bucket</code>,当然索引也会重建。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://www.cnblogs.com/52fhy/p/5007456.html\" target=\"_blank\" rel=\"noopener\">time33 </a></li>\n<li><a href=\"https://github.com/pangudashu/php7-internal/blob/master/2/zval.md\" target=\"_blank\" rel=\"noopener\">2.1 变量的内部实现</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>php的数组依赖于hashtable实现的。</p>\n<p>Times33的算法很简单，就是不断的乘33,下边是times33算法:</p>\n<h2 id=\"Times33-hash\"><a href=\"#Times33-hash\" class=\"headerlink\" title=\"Times33(hash)\"></a>Times33(hash)</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myHash</span><span class=\"params\">($str)</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// hash(i) = hash(i-1) * 33 + str[i]</span></div><div class=\"line\">    $hash = <span class=\"number\">5381</span>;</div><div class=\"line\">    $s    = md5($str); <span class=\"comment\">//相比其它版本，进行了md5加密</span></div><div class=\"line\">    $seed = <span class=\"number\">5</span>;</div><div class=\"line\">    $len  = <span class=\"number\">32</span>;<span class=\"comment\">//加密后长度32</span></div><div class=\"line\">    <span class=\"keyword\">for</span> ($i = <span class=\"number\">0</span>; $i &lt; $len; $i++) &#123;</div><div class=\"line\">        <span class=\"comment\">// (hash &lt;&lt; 5) + hash 相当于 hash * 33</span></div><div class=\"line\">        <span class=\"comment\">//$hash = sprintf(\"%u\", $hash * 33) + ord($s&#123;$i&#125;);</span></div><div class=\"line\">        <span class=\"comment\">//$hash = ($hash * 33 + ord($s&#123;$i&#125;)) &amp; 0x7FFFFFFF;</span></div><div class=\"line\">        $hash = ($hash &lt;&lt; $seed) + $hash + ord($s&#123;$i&#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"keyword\">return</span> $hash &amp; <span class=\"number\">0x7FFFFFFF</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>其中<code>&lt;&lt;</code> 表示左移,每次左移表示x2例如:</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">$num = <span class=\"number\">2</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">echo</span> $num &lt;&lt; <span class=\"number\">2</span>;</div></pre></td></tr></table></figure>\n<p>所以($hash &lt;&lt; $seed)表示 <code>$hash * 32</code> ,同时加上$hash,也就表示 <code>$hash * 33</code>了。ord()函数返回字符串的首个字符的 ASCII 值。<br>最后<code>$hash &amp; 0x7FFFFFFF</code> 表示与整形的最大值与操作(<code>0x7FFFF111FFF</code>二进制为<code>1111111111111111111111111111</code>),<br>这个与操作会截取超过整形二进制部分,所以times33计算出来的值不会超过整形的最大值。</p>\n<h2 id=\"为什么要用hashtable实现php数组\"><a href=\"#为什么要用hashtable实现php数组\" class=\"headerlink\" title=\"为什么要用hashtable实现php数组?\"></a>为什么要用hashtable实现php数组?</h2><p>因为散列表是根据关键建码值直接进项访问的数据结构。在key和value之间有一个映射函数,可以根据key直接索引到对应的value值,它并<br>不会使用一般的对比操作,而是直接使用<code>内存的起始位置和偏移位置</code>进行寻址,所以会比正常的寻址要快。</p>\n<h2 id=\"散列表结构\"><a href=\"#散列表结构\" class=\"headerlink\" title=\"散列表结构\"></a>散列表结构</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">struct</span> _zend_array &#123;</div><div class=\"line\">\tzend_refcounted_h gc;</div><div class=\"line\">\t<span class=\"keyword\">union</span> &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">\t\t\tZEND_ENDIAN_LOHI_4(</div><div class=\"line\">\t\t\t\tzend_uchar    flags,</div><div class=\"line\">\t\t\t\tzend_uchar    nApplyCount,</div><div class=\"line\">\t\t\t\tzend_uchar    nIteratorsCount,</div><div class=\"line\">\t\t\t\tzend_uchar    reserve)</div><div class=\"line\">\t\t&#125; v;</div><div class=\"line\">\t\t<span class=\"keyword\">uint32_t</span> flags;</div><div class=\"line\">\t&#125; u;</div><div class=\"line\">\t<span class=\"keyword\">uint32_t</span>          nTableMask;</div><div class=\"line\">\tBucket           *arData;</div><div class=\"line\">\t<span class=\"keyword\">uint32_t</span>          nNumUsed;</div><div class=\"line\">\t<span class=\"keyword\">uint32_t</span>          nNumOfElements;</div><div class=\"line\">\t<span class=\"keyword\">uint32_t</span>          nTableSize;</div><div class=\"line\">\t<span class=\"keyword\">uint32_t</span>          nInternalPointer;</div><div class=\"line\">\tzend_long         nNextFreeElement;</div><div class=\"line\">\t<span class=\"keyword\">dtor_func_t</span>       pDestructor;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>主要字段介绍:</p>\n<ul>\n<li>gc 引用次数,垃圾回收时会用到。</li>\n<li>union u 就不介绍了。</li>\n<li>arData 存储元素的数组,内存是连续的,arData指向第一个元素。</li>\n<li>nTableMask nTableSize的负数。</li>\n<li>nTableSize 数组长度,为2的n此房。</li>\n<li>nNumUsed 当前使用的Bucket数。</li>\n<li>nNumOfElements 当前所有的Bucket数。</li>\n<li>nNextFreeElement 下一个被使用的Bucket($a[] = ‘’)</li>\n<li>pDestructor 删除某个元素是会使用</li>\n</ul>\n<h2 id=\"Bucket结构\"><a href=\"#Bucket结构\" class=\"headerlink\" title=\"Bucket结构\"></a>Bucket结构</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> _Bucket &#123;</div><div class=\"line\">\tzval              val;</div><div class=\"line\">\tzend_ulong        h;                <span class=\"comment\">/* hash value (or numeric index)   */</span></div><div class=\"line\">\tzend_string      *key;              <span class=\"comment\">/* string key or NULL for numerics */</span></div><div class=\"line\">&#125; Bucket;</div></pre></td></tr></table></figure>\n<ul>\n<li>h hash出来的值(times33)</li>\n<li>*key 存储元素的key</li>\n<li>val 具体值,是个zval</li>\n</ul>\n<h2 id=\"如何实现\"><a href=\"#如何实现\" class=\"headerlink\" title=\"如何实现\"></a>如何实现</h2><p>php中实现散列表实现主要使用<code>存储元素数组</code>和 <code>映射函数</code>（也可以称作散列函数）和<code>映射表</code></p>\n<h4 id=\"举个具体的栗子\"><a href=\"#举个具体的栗子\" class=\"headerlink\" title=\"举个具体的栗子:\"></a>举个具体的栗子:</h4><p> 如果我们要在php代码中声明一个数组会发生什么?下边分析下php是如何实现数组的。<br> <figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">$arr= [</div><div class=\"line\">\t<span class=\"string\">'a'</span> =&gt; <span class=\"string\">'111'</span>,</div><div class=\"line\">\t<span class=\"string\">'b'</span> =&gt; <span class=\"string\">'222'</span>,</div><div class=\"line\">\t<span class=\"string\">'c'</span> =&gt; <span class=\"string\">'ccc'</span></div><div class=\"line\">];</div></pre></td></tr></table></figure></p>\n<ol>\n<li>首先肯定是初始化。</li>\n<li>接下来将每个元素对应的值依照顺序拷贝到 Bucket里。</li>\n<li>然后利用映射函数对求值,根据算出来的值将其对应的bucket的地址写到该值对应的映射这表里。</li>\n</ol>\n<p>具体操作如下图:<br><img src=\"/photo/img/php数组实现/php数组具体实现.png\" alt=\"image\"></p>\n<p>当然我们这里的映射是理想映射,因为在映射的计算过程中可能存在冲突,后续会介绍映射函数,以及如何解映射函数计算后的冲突。</p>\n<h3 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">ZEND_API <span class=\"keyword\">void</span> ZEND_FASTCALL _zend_hash_init(HashTable *ht, <span class=\"keyword\">uint32_t</span> nSize, <span class=\"keyword\">dtor_func_t</span> pDestructor, zend_bool persistent ZEND_FILE_LINE_DC)</div><div class=\"line\">&#123;</div><div class=\"line\">\tGC_REFCOUNT(ht) = <span class=\"number\">1</span>; <span class=\"comment\">//设置引用次数</span></div><div class=\"line\">\tGC_TYPE_INFO(ht) = IS_ARRAY; <span class=\"comment\">//设置数据类型</span></div><div class=\"line\">\tht-&gt;u.flags = (persistent ? HASH_FLAG_PERSISTENT : <span class=\"number\">0</span>) | HASH_FLAG_APPLY_PROTECTION | HASH_FLAG_STATIC_KEYS;</div><div class=\"line\">\tht-&gt;nTableMask = HT_MIN_MASK;</div><div class=\"line\">\tHT_SET_DATA_ADDR(ht, &amp;uninitialized_bucket);</div><div class=\"line\">\tht-&gt;nNumUsed = <span class=\"number\">0</span>;</div><div class=\"line\">\tht-&gt;nNumOfElements = <span class=\"number\">0</span>;</div><div class=\"line\">\tht-&gt;nInternalPointer = HT_INVALID_IDX;</div><div class=\"line\">\tht-&gt;nNextFreeElement = <span class=\"number\">0</span>;</div><div class=\"line\">\tht-&gt;pDestructor = pDestructor;</div><div class=\"line\">\tht-&gt;nTableSize = zend_hash_check_size(nSize);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>初始化的时候主要是对hashtable中各个成员的进行初始化设置,而且在这个时候不会给arData分配内存,只有在开始插入数据的时候才会<br>为arData分配内存。</p>\n<h2 id=\"映射函数\"><a href=\"#映射函数\" class=\"headerlink\" title=\"映射函数\"></a>映射函数</h2><p>映射函数其实就是一次<code>hash</code>操作和和一次<code>|</code>操作.<br>hash操作就是上边锁提到得到times33操作,<code>|</code>操作是计算出来的hash值与nTableSize进行计算。<br><figure class=\"highlight coq\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">nIndex = ket-&gt;h | <span class=\"type\">nTableMask</span>;</div></pre></td></tr></table></figure></p>\n<p>因为nTableMask是nTableSize的负数,所以计算出来的nIndex值区间应该为[-1,nTableMask]。</p>\n<p>此处待补充 为什么会在[-1, nTableMask] 区间内。</p>\n<h3 id=\"写入数据\"><a href=\"#写入数据\" class=\"headerlink\" title=\"写入数据\"></a>写入数据</h3><p>在初始化的时候并不会对arData分配内存,只有在写入的时候才会真正分配内存</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> zend_always_inline <span class=\"title\">zend_hash_real_init_ex</span><span class=\"params\">(HashTable *ht, <span class=\"keyword\">int</span> packed)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\tHT_ASSERT(GC_REFCOUNT(ht) == <span class=\"number\">1</span>);</div><div class=\"line\">\tZEND_ASSERT(!((ht)-&gt;u.flags &amp; HASH_FLAG_INITIALIZED));</div><div class=\"line\">\t<span class=\"keyword\">if</span> (packed) &#123;</div><div class=\"line\">\t\tHT_SET_DATA_ADDR(ht, pemalloc(HT_SIZE(ht), (ht)-&gt;u.flags &amp; HASH_FLAG_PERSISTENT));</div><div class=\"line\">\t\t(ht)-&gt;u.flags |= HASH_FLAG_INITIALIZED | HASH_FLAG_PACKED;</div><div class=\"line\">\t\tHT_HASH_RESET_PACKED(ht);</div><div class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t(ht)-&gt;nTableMask = -(ht)-&gt;nTableSize;</div><div class=\"line\">\t\tHT_SET_DATA_ADDR(ht, pemalloc(HT_SIZE(ht), (ht)-&gt;u.flags &amp; HASH_FLAG_PERSISTENT));</div><div class=\"line\">\t\t(ht)-&gt;u.flags |= HASH_FLAG_INITIALIZED;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (EXPECTED(ht-&gt;nTableMask == <span class=\"number\">-8</span>)) &#123;</div><div class=\"line\">\t\t\tBucket *arData = ht-&gt;arData;</div><div class=\"line\"></div><div class=\"line\">\t\t\tHT_HASH_EX(arData, <span class=\"number\">-8</span>) = <span class=\"number\">-1</span>;</div><div class=\"line\">\t\t\tHT_HASH_EX(arData, <span class=\"number\">-7</span>) = <span class=\"number\">-1</span>;</div><div class=\"line\">\t\t\tHT_HASH_EX(arData, <span class=\"number\">-6</span>) = <span class=\"number\">-1</span>;</div><div class=\"line\">\t\t\tHT_HASH_EX(arData, <span class=\"number\">-5</span>) = <span class=\"number\">-1</span>;</div><div class=\"line\">\t\t\tHT_HASH_EX(arData, <span class=\"number\">-4</span>) = <span class=\"number\">-1</span>;</div><div class=\"line\">\t\t\tHT_HASH_EX(arData, <span class=\"number\">-3</span>) = <span class=\"number\">-1</span>;</div><div class=\"line\">\t\t\tHT_HASH_EX(arData, <span class=\"number\">-2</span>) = <span class=\"number\">-1</span>;</div><div class=\"line\">\t\t\tHT_HASH_EX(arData, <span class=\"number\">-1</span>) = <span class=\"number\">-1</span>;</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\tHT_HASH_RESET(ht);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>分配具体的内存</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> HT_SIZE_EX(nTableSize, nTableMask) \\</span></div><div class=\"line\">\t(HT_DATA_SIZE((nTableSize)) + HT_HASH_SIZE((nTableMask)))</div></pre></td></tr></table></figure>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> HT_HASH_SIZE(nTableMask) \\</span></div><div class=\"line\">\t(((size_t)(uint32_t)-(int32_t)(nTableMask)) * <span class=\"keyword\">sizeof</span>(uint32_t))</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> HT_DATA_SIZE(nTableSize) \\</span></div><div class=\"line\">\t((size_t)(nTableSize) * <span class=\"keyword\">sizeof</span>(Bucket))</div></pre></td></tr></table></figure>\n<p>可以看到在分配具体分配内存的时候会分配 nTableSize<em>(Bucket+uint32_t)大小的内存。<br>讲道理只需要分配nTableSize</em>Bucket大小内存就可以了,为什么会多余出来 nTableSize<em>uint32_t内存呢?<br>因为nTableSize</em>uint32_t就是<code>映射表</code>所占内存大小。所以说Bucket会和映射表一次申请内存。<br>写完成写入操作以后会将<code>*arData</code> 指向第一个Bucket。</p>\n<p>具体在内存里的结果如图所示:<br><img src=\"/photo/img/php数组实现/hashtable.png\" alt=\"image\"></p>\n<p><code>映射表</code>在初始化的时候所有值都是-1,只有在被赋值时候会写入对应<code>Bucket</code>所在链表的偏移量。;<br>ht-&gt;arData 指向第一个<code>Bucket</code>的位置,在赋值的时候会按照列表顺序,将值写入<code>Bucket</code>的value里,然后会根据<br>映射函数算出值当做偏移量找到对应<code>映射表</code>的元素,然后将当前<code>Bucket</code>写入此元素。</p>\n<p>ps nTableSize 为2的次方倍。</p>\n<h2 id=\"冲突\"><a href=\"#冲突\" class=\"headerlink\" title=\"冲突\"></a>冲突</h2><p>如果<code>nIndex = ket-&gt;h | nTableMask</code> 算出来的值冲突了怎么办? 首先<code>映射表</code>的每个元素不是链表,所以导致无法存储多个元素。<br>在php中是这样处理冲突的:<br>首先<code>映射表</code>的所有元素初始化值为 -1 ,当前<br>如果用冲突会将新算出来的值对应的<code>Bucket</code>覆盖原来旧的<code>Bucket</code>,然后将旧的<code>Bucket</code>迁移到新的<code>Bucket</code>,<br>并将旧的<code>Bucket</code>的u2.next(默认为-1) 指向新<code>Bucket</code>。</p>\n<p>如图<br><img src=\"/photo/img/php数组实现/链表冲突.png\" alt=\"image\"></p>\n<h2 id=\"查找\"><a href=\"#查找\" class=\"headerlink\" title=\"查找\"></a>查找</h2><p>php再查找一个数组元素是,首先会根据其key 获取到计算后hash值’ket-&gt;h’,然后根据映射函数算出当前元素在<code>映射表</code>中的偏移量,利用当前位置+偏移量找到<code>映射表</code>的元素,再根据其内的偏量找到对应<code>Bucket</code>链表的首个元素位置,最后遍历该链表核对key值,找到对应的值。</p>\n<p>具体实现函数:<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> zend_always_inline Bucket *<span class=\"title\">zend_hash_find_bucket</span><span class=\"params\">(<span class=\"keyword\">const</span> HashTable *ht, zend_string *key)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\tzend_ulong h;</div><div class=\"line\">\t<span class=\"keyword\">uint32_t</span> nIndex;</div><div class=\"line\">\t<span class=\"keyword\">uint32_t</span> idx;</div><div class=\"line\">\tBucket *p, *arData;</div><div class=\"line\"></div><div class=\"line\">\th = zend_string_hash_val(key);</div><div class=\"line\">\tarData = ht-&gt;arData;</div><div class=\"line\">\tnIndex = h | ht-&gt;nTableMask;</div><div class=\"line\">\tidx = HT_HASH_EX(arData, nIndex);</div><div class=\"line\">\t<span class=\"keyword\">while</span> (EXPECTED(idx != HT_INVALID_IDX)) &#123;</div><div class=\"line\">\t\tp = HT_HASH_TO_BUCKET_EX(arData, idx);</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (EXPECTED(p-&gt;key == key)) &#123; <span class=\"comment\">/* check for the same interned string */</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> p;</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (EXPECTED(p-&gt;h == h) &amp;&amp;</div><div class=\"line\">\t\t     EXPECTED(p-&gt;key) &amp;&amp;</div><div class=\"line\">\t\t     EXPECTED(ZSTR_LEN(p-&gt;key) == ZSTR_LEN(key)) &amp;&amp;</div><div class=\"line\">\t\t     EXPECTED(<span class=\"built_in\">memcmp</span>(ZSTR_VAL(p-&gt;key), ZSTR_VAL(key), ZSTR_LEN(key)) == <span class=\"number\">0</span>)) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> p;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tidx = Z_NEXT(p-&gt;val);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"扩容\"><a href=\"#扩容\" class=\"headerlink\" title=\"扩容\"></a>扩容</h2><p>数组的容量在初始化的时候已经确定了大小,就是nTableSize。当然映射函数也是根据 nTableMask 来计算的。<br>所以我们扩容时候必须重新计算索引,也就是<code>映射表</code>里的值。<br>具体扩容规则:<br>首先当需要扩容时,会计算当前<code>Bucket</code>链表里删除元素数量占总表元素数量的比例,如果没有超过阈值则申请分配一个原来数组大小两倍的新素组,把元素复制到新数组上,然后重新建立索引。</p>\n<p>阈值判断:<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ht-&gt;nNumUsed &gt; ht-&gt;nNumOfElements + (ht-&gt;nNumOfElements &gt;&gt; <span class=\"number\">5</span></div></pre></td></tr></table></figure></p>\n<p>处理过程:<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> ZEND_FASTCALL <span class=\"title\">zend_hash_do_resize</span><span class=\"params\">(HashTable *ht)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\"></div><div class=\"line\">\tIS_CONSISTENT(ht);</div><div class=\"line\">\tHT_ASSERT(GC_REFCOUNT(ht) == <span class=\"number\">1</span>);</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> (ht-&gt;nNumUsed &gt; ht-&gt;nNumOfElements + (ht-&gt;nNumOfElements &gt;&gt; <span class=\"number\">5</span>)) &#123; <span class=\"comment\">/* additional term is there to amortize the cost of compaction */</span></div><div class=\"line\">\t\tHANDLE_BLOCK_INTERRUPTIONS();</div><div class=\"line\">\t\tzend_hash_rehash(ht);</div><div class=\"line\">\t\tHANDLE_UNBLOCK_INTERRUPTIONS();</div><div class=\"line\">\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (ht-&gt;nTableSize &lt; HT_MAX_SIZE) &#123;\t<span class=\"comment\">/* Let's double the table size */</span></div><div class=\"line\">\t\t<span class=\"keyword\">void</span> *new_data, *old_data = HT_GET_DATA_ADDR(ht);</div><div class=\"line\">\t\t<span class=\"keyword\">uint32_t</span> nSize = ht-&gt;nTableSize + ht-&gt;nTableSize;</div><div class=\"line\">\t\tBucket *old_buckets = ht-&gt;arData;</div><div class=\"line\"></div><div class=\"line\">\t\tHANDLE_BLOCK_INTERRUPTIONS();</div><div class=\"line\">\t\tnew_data = pemalloc(HT_SIZE_EX(nSize, -nSize), ht-&gt;u.flags &amp; HASH_FLAG_PERSISTENT);</div><div class=\"line\">\t\tht-&gt;nTableSize = nSize;</div><div class=\"line\">\t\tht-&gt;nTableMask = -ht-&gt;nTableSize;</div><div class=\"line\">\t\tHT_SET_DATA_ADDR(ht, new_data);</div><div class=\"line\">\t\t<span class=\"built_in\">memcpy</span>(ht-&gt;arData, old_buckets, <span class=\"keyword\">sizeof</span>(Bucket) * ht-&gt;nNumUsed);</div><div class=\"line\">\t\tpefree(old_data, ht-&gt;u.flags &amp; HASH_FLAG_PERSISTENT);</div><div class=\"line\">\t\tzend_hash_rehash(ht);</div><div class=\"line\">\t\tHANDLE_UNBLOCK_INTERRUPTIONS();</div><div class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\tzend_error_noreturn(E_ERROR, <span class=\"string\">\"Possible integer overflow in memory allocation (%zu * %zu + %zu)\"</span>, ht-&gt;nTableSize * <span class=\"number\">2</span>, <span class=\"keyword\">sizeof</span>(Bucket) + <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">uint32_t</span>), <span class=\"keyword\">sizeof</span>(Bucket));</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在处理的过程中还会把已经删除的<code>Bucket</code>给删除。</p>\n<p>具体的操作在<code>zend_hash.c</code>文件里。<br>如果超过阈值,则会把已经删除<code>Bucket</code>移除,然后把又有后边的元素往前移动,补上空缺的<code>Bucket</code>,当然索引也会重建。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://www.cnblogs.com/52fhy/p/5007456.html\" target=\"_blank\" rel=\"noopener\">time33 </a></li>\n<li><a href=\"https://github.com/pangudashu/php7-internal/blob/master/2/zval.md\" target=\"_blank\" rel=\"noopener\">2.1 变量的内部实现</a></li>\n</ul>\n"},{"title":"tcp三次握手与四次挥手","toc":true,"date":"2017-01-09T14:16:19.000Z","_content":"\n\n## 三次握手\n`三次握手` 是指tcp建立连接时候需要服务端和客户端发送三个网络包。\n三次握手的目的是链接与服务器端口，并建立tcp连接，并同步连接双方的序列号和确认号，并交换tcp窗口大小信息。\n\n![image](/photo/img/tcp三次握手与四次挥手/tcp握手.png)\n在tcp/ip协议中, tcp提供可靠的链接服务，采用三次握手建立一个链接，如上图所示。\n - 第一次握手：建立连接时，客户端发送SYN包到服务器，同时进入SYN_SEND状态，等待服务器B确认。\n - 第二次握手：服务器B收到SYN包，确认客户端的SYN(ACK+1),同时自己发送一个SYN包，此时服务器进入SYN_RECV状态。\n - 第三次握手： 客户端收到服务器的SYN+ACK包，向服务器发送确认包（ACK+1）,此包发送完毕，客户端和服务端进入RESTABLISHED状态，完成三次握手。\n## 四次挥手\ntcp断开连接需要发送四个包，所以称之为 `四次挥手`,客户端和服务端都可以发起`挥手`。\n\n![image](/photo/img/tcp三次握手与四次挥手/tcp四次挥手.png)\n\n由于TCP是全双工的，所以需要双向关闭。原则是当一方完成数据发送后就只能发送一个FIN来终止这个方向的链接。收到一个FIN只意味着这个一个方向没有数据发送，一个tcp链接收到一个FIN后仍然能发送数据。首先关闭的以防进行主动关闭，另外以防执行被动关闭。\n- 主动方发送一个FIN,用来告诉被动方我发送完毕，请求关闭链接。\n- 被动方收到主动方的FIN请求，会回发一个ACK(我知道了)，但是并没有统一关闭链接。\n- 当被动方也发送完数据了，会发送一个FIN包，高速主动方我也发送完了。\n- 主动方收到被动方的FIN包，回复ACK(确认收到)，此时tcp断开连接。","source":"_posts/tcp三次握手与四次挥手.md","raw":"---\ntitle: tcp三次握手与四次挥手\ntags: 网络\ncategories: 网络\ntoc: true\ndate: 2017-01-09 22:16:19\n---\n\n\n## 三次握手\n`三次握手` 是指tcp建立连接时候需要服务端和客户端发送三个网络包。\n三次握手的目的是链接与服务器端口，并建立tcp连接，并同步连接双方的序列号和确认号，并交换tcp窗口大小信息。\n\n![image](/photo/img/tcp三次握手与四次挥手/tcp握手.png)\n在tcp/ip协议中, tcp提供可靠的链接服务，采用三次握手建立一个链接，如上图所示。\n - 第一次握手：建立连接时，客户端发送SYN包到服务器，同时进入SYN_SEND状态，等待服务器B确认。\n - 第二次握手：服务器B收到SYN包，确认客户端的SYN(ACK+1),同时自己发送一个SYN包，此时服务器进入SYN_RECV状态。\n - 第三次握手： 客户端收到服务器的SYN+ACK包，向服务器发送确认包（ACK+1）,此包发送完毕，客户端和服务端进入RESTABLISHED状态，完成三次握手。\n## 四次挥手\ntcp断开连接需要发送四个包，所以称之为 `四次挥手`,客户端和服务端都可以发起`挥手`。\n\n![image](/photo/img/tcp三次握手与四次挥手/tcp四次挥手.png)\n\n由于TCP是全双工的，所以需要双向关闭。原则是当一方完成数据发送后就只能发送一个FIN来终止这个方向的链接。收到一个FIN只意味着这个一个方向没有数据发送，一个tcp链接收到一个FIN后仍然能发送数据。首先关闭的以防进行主动关闭，另外以防执行被动关闭。\n- 主动方发送一个FIN,用来告诉被动方我发送完毕，请求关闭链接。\n- 被动方收到主动方的FIN请求，会回发一个ACK(我知道了)，但是并没有统一关闭链接。\n- 当被动方也发送完数据了，会发送一个FIN包，高速主动方我也发送完了。\n- 主动方收到被动方的FIN包，回复ACK(确认收到)，此时tcp断开连接。","slug":"tcp三次握手与四次挥手","published":1,"updated":"2019-02-21T03:49:34.711Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjswwkdpn001lg7ww3bzrazwg","content":"<h2 id=\"三次握手\"><a href=\"#三次握手\" class=\"headerlink\" title=\"三次握手\"></a>三次握手</h2><p><code>三次握手</code> 是指tcp建立连接时候需要服务端和客户端发送三个网络包。<br>三次握手的目的是链接与服务器端口，并建立tcp连接，并同步连接双方的序列号和确认号，并交换tcp窗口大小信息。</p>\n<p><img src=\"/photo/img/tcp三次握手与四次挥手/tcp握手.png\" alt=\"image\"><br>在tcp/ip协议中, tcp提供可靠的链接服务，采用三次握手建立一个链接，如上图所示。</p>\n<ul>\n<li>第一次握手：建立连接时，客户端发送SYN包到服务器，同时进入SYN_SEND状态，等待服务器B确认。</li>\n<li>第二次握手：服务器B收到SYN包，确认客户端的SYN(ACK+1),同时自己发送一个SYN包，此时服务器进入SYN_RECV状态。</li>\n<li>第三次握手： 客户端收到服务器的SYN+ACK包，向服务器发送确认包（ACK+1）,此包发送完毕，客户端和服务端进入RESTABLISHED状态，完成三次握手。<h2 id=\"四次挥手\"><a href=\"#四次挥手\" class=\"headerlink\" title=\"四次挥手\"></a>四次挥手</h2>tcp断开连接需要发送四个包，所以称之为 <code>四次挥手</code>,客户端和服务端都可以发起<code>挥手</code>。</li>\n</ul>\n<p><img src=\"/photo/img/tcp三次握手与四次挥手/tcp四次挥手.png\" alt=\"image\"></p>\n<p>由于TCP是全双工的，所以需要双向关闭。原则是当一方完成数据发送后就只能发送一个FIN来终止这个方向的链接。收到一个FIN只意味着这个一个方向没有数据发送，一个tcp链接收到一个FIN后仍然能发送数据。首先关闭的以防进行主动关闭，另外以防执行被动关闭。</p>\n<ul>\n<li>主动方发送一个FIN,用来告诉被动方我发送完毕，请求关闭链接。</li>\n<li>被动方收到主动方的FIN请求，会回发一个ACK(我知道了)，但是并没有统一关闭链接。</li>\n<li>当被动方也发送完数据了，会发送一个FIN包，高速主动方我也发送完了。</li>\n<li>主动方收到被动方的FIN包，回复ACK(确认收到)，此时tcp断开连接。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"三次握手\"><a href=\"#三次握手\" class=\"headerlink\" title=\"三次握手\"></a>三次握手</h2><p><code>三次握手</code> 是指tcp建立连接时候需要服务端和客户端发送三个网络包。<br>三次握手的目的是链接与服务器端口，并建立tcp连接，并同步连接双方的序列号和确认号，并交换tcp窗口大小信息。</p>\n<p><img src=\"/photo/img/tcp三次握手与四次挥手/tcp握手.png\" alt=\"image\"><br>在tcp/ip协议中, tcp提供可靠的链接服务，采用三次握手建立一个链接，如上图所示。</p>\n<ul>\n<li>第一次握手：建立连接时，客户端发送SYN包到服务器，同时进入SYN_SEND状态，等待服务器B确认。</li>\n<li>第二次握手：服务器B收到SYN包，确认客户端的SYN(ACK+1),同时自己发送一个SYN包，此时服务器进入SYN_RECV状态。</li>\n<li>第三次握手： 客户端收到服务器的SYN+ACK包，向服务器发送确认包（ACK+1）,此包发送完毕，客户端和服务端进入RESTABLISHED状态，完成三次握手。<h2 id=\"四次挥手\"><a href=\"#四次挥手\" class=\"headerlink\" title=\"四次挥手\"></a>四次挥手</h2>tcp断开连接需要发送四个包，所以称之为 <code>四次挥手</code>,客户端和服务端都可以发起<code>挥手</code>。</li>\n</ul>\n<p><img src=\"/photo/img/tcp三次握手与四次挥手/tcp四次挥手.png\" alt=\"image\"></p>\n<p>由于TCP是全双工的，所以需要双向关闭。原则是当一方完成数据发送后就只能发送一个FIN来终止这个方向的链接。收到一个FIN只意味着这个一个方向没有数据发送，一个tcp链接收到一个FIN后仍然能发送数据。首先关闭的以防进行主动关闭，另外以防执行被动关闭。</p>\n<ul>\n<li>主动方发送一个FIN,用来告诉被动方我发送完毕，请求关闭链接。</li>\n<li>被动方收到主动方的FIN请求，会回发一个ACK(我知道了)，但是并没有统一关闭链接。</li>\n<li>当被动方也发送完数据了，会发送一个FIN包，高速主动方我也发送完了。</li>\n<li>主动方收到被动方的FIN包，回复ACK(确认收到)，此时tcp断开连接。</li>\n</ul>\n"},{"title":"websocket订阅火币成交记录","date":"2018-06-19T10:15:57.000Z","toc":true,"_content":"# python3\n## 单线程：\n### 文件一：\n```python\n# -*- coding: utf-8 -*-\n#author: maxie_lj\nimport _thread\nfrom websocket import create_connection\nfrom mysqlOpertion import connect_mysql\nimport gzip\nimport time\nimport json\n\n# 链接\ndef connect():\n    while(1):\n        try:\n            print('')\n            # 挂代理\n            ws = create_connection(\"wss://www.huobi.br.com/-/s/pro/ws\")\n            #print('链接成功')\n            return ws\n            break\n        except Exception as err:\n            #print(err)\n            #print('connect ws error,retry...')\n            time.sleep(1)\n\n\ndef getsubconfig():\n    # 统计参数\n    tradeStr=[\n              \"\"\"{\"sub\": \"market.elfusdt.trade.detail\",\"id\": \"id1\"}\"\"\",\n              \"\"\"{\"sub\": \"market.btcusdt.trade.detail\",\"id\": \"id2\"}\"\"\",\n              \"\"\"{\"sub\": \"market.htusdt.trade.detail\",\"id\": \"id3\"}\"\"\",\n              \"\"\"{\"sub\": \"market.swftcbtc.trade.detail\",\"id\": \"id4\"}\"\"\",\n              \"\"\"{\"sub\": \"market.topcbtc.trade.detail\",\"id\": \"id6\"}\"\"\",\n              \"\"\"{\"sub\": \"market.bchusdt.trade.detail\",\"id\": \"id7\"}\"\"\",\n              \"\"\"{\"sub\": \"market.ethusdt.trade.detail\",\"id\": \"id8\"}\"\"\",\n              \"\"\"{\"sub\": \"market.etcusdt.trade.detail\",\"id\": \"id9\"}\"\"\",\n              \"\"\"{\"sub\": \"market.eosusdt.trade.detail\",\"id\": \"id9\"}\"\"\",\n              \"\"\"{\"sub\": \"market.ltcusdt.trade.detail\",\"id\": \"id9\"}\"\"\"\n              ]\n    return tradeStr\n\n# 订阅\ndef sub(ws,tradeStr):\n    ws.send(tradeStr)\n\n# 获取返回\ndef getResponse(ws,tradeStr):\n    db = connect_mysql.connect()\n    while 1 :\n        try :\n            compressData=ws.recv()\n        except Exception :\n            #print('链接异常')\n            run(tradeStr,1)\n        try :\n            result=gzip.decompress(compressData).decode('utf-8')\n        except:\n            #print('丢包解析异常')\n            continue\n        if result[:7] == '{\"ping\"':\n            ts=result[8:21]\n            #print('心跳包',ts)\n            pong='{\"pong\":'+ts+'}'\n            ws.send(pong)\n        else:\n            if result[:5] == '{\"ch\"':\n                result = json.loads(result)\n                #print(result)\n                #print('------------------------------------------------------')\n                n = 0\n                while n < len(result['tick']['data']) :\n                    connect_mysql.commit('%s' % result['ch'].split('.')[1],result['tick']['data'][n]['price'],result['tick']['data'][n]['amount'],\"'%s'\" % result[\"tick\"][\"data\"][n][\"direction\"], \"'%s'\" % result['ch'].split('.')[1],db);\n                    n += 1\n\ndef subCoin(tradeStr):\n    ws=connect()\n    sub(ws,tradeStr)\n    getResponse(ws,tradeStr)\n\ndef run(tradeStr,test):\n    subCoin(tradeStr)\n\ndef main():\n    tradeStr=getsubconfig()\n    try :\n        tradeStr = getsubconfig()\n        i = 0\n        while i < len(tradeStr) :\n            _thread.start_new_thread( run, (tradeStr[i],i) )\n            i += 1\n    except Exception as err :\n        print(err)\n    while 1:\n        pass\n\n\nif __name__ == '__main__':\n    main()\n```\n\n# 多线程版本：\n## 文件一：\n\n```python\n# -*- coding: utf-8 -*-\n#author: maxie_lj\nimport _thread\nfrom websocket import create_connection\nfrom test1 import connect_mysql\nimport gzip\nimport time\nimport json\n\n# 链接数据库\ndef connect():\n    while(1):\n        try:\n            ws = create_connection(\"wss://www.huobi.br.com/-/s/pro/ws\")\n            # print('链接成功')\n            return ws\n            break\n        except Exception as err:\n            print(err)\n            #print('connect ws error,retry...')\n            time.sleep(1)\n\n\ndef getsubconfig():\n    # 统计参数\n    tradeStr=[\n              \"\"\"{\"sub\": \"market.elfusdt.trade.detail\"}\"\"\",\n              \"\"\"{\"sub\": \"market.btcusdt.trade.detail\"}\"\"\",\n              \"\"\"{\"sub\": \"market.htusdt.trade.detail\"}\"\"\",\n              \"\"\"{\"sub\": \"market.swftcbtc.trade.detail\"}\"\"\",\n              \"\"\"{\"sub\": \"market.topcbtc.trade.detail\"}\"\"\",\n              \"\"\"{\"sub\": \"market.bchusdt.trade.detail\"}\"\"\",\n              \"\"\"{\"sub\": \"market.ethusdt.trade.detail\"}\"\"\",\n              \"\"\"{\"sub\": \"market.etcusdt.trade.detail\"}\"\"\",\n              \"\"\"{\"sub\": \"market.eosusdt.trade.detail\"}\"\"\",\n              \"\"\"{\"sub\": \"market.ltcusdt.trade.detail\"}\"\"\"\n              ]\n    return tradeStr\n\n# 订阅\ndef sub(ws,tradeStr):\n    ws.send(tradeStr)\n\n# 获取返回\ndef getResponse(ws):\n    db = connect_mysql.connect()\n    while 1 :\n        try :\n            compressData=ws.recv()\n        except Exception :\n            ws=connect()\n            subCoin(ws)\n            print('链接异常')\n        try :\n            result=gzip.decompress(compressData).decode('utf-8')\n        except:\n            print('丢包解析异常')\n            continue\n        if result[:7] == '{\"ping\"':\n            ts=result[8:21]\n            #print('心跳包',ts)\n            pong='{\"pong\":'+ts+'}'\n            ws.send(pong)\n        else:\n            if result[:5] == '{\"ch\"':\n                result = json.loads(result)\n                print(result)\n                #print('------------------------------------------------------')\n                n = 0\n                while n < len(result['tick']['data']) :\n                    connect_mysql.commit('%s' % result['ch'].split('.')[1],result['tick']['data'][n]['price'],result['tick']['data'][n]['amount'],\"'%s'\" % result[\"tick\"][\"data\"][n][\"direction\"], \"'%s'\" % result['ch'].split('.')[1],db);\n                    n += 1\n\n# 订阅\ndef subCoin(ws):\n    tradeStr=getsubconfig()\n    i = 0\n    while i < len(tradeStr) :\n            sub(ws,tradeStr[i])\n            i += 1\n# 主函数\ndef main():\n    ws=connect()\n    subCoin(ws)\n    getResponse(ws)\n\n\nif __name__ == '__main__':\n    main()\n```\n\n\n```\n### 文件二:\n\n```python\nimport json\nimport pymysql\nimport time\n\nclass connect_mysql():\n    db = ''\n    def connect() :\n            db = connect_mysql.db = pymysql.connect(\"localhost\", \"root\", \"root\", \"huobi\", charset='utf8' )\n            return db\n\n    def commit(table, price, amount, action, coin_type, db) :\n\n        try:\n            cursor = db.cursor()\n            sql = \"INSERT INTO %s_success_order(action,order_amount, price, coin_type)VALUES (%s, %.10f, %.10f,%s )\" % (table,action, amount, price,coin_type )\n            cursor.execute(sql)\n           # 提交到数据库执行\n            db.commit()\n        except Exception as e:\n            db = connect_mysql.db = pymysql.connect(\"localhost\", \"root\", \"root\", \"huobi\", charset='utf8' )\n            commit(table, price, amount, action, coin_type, db)\n        return\n\n\n    def connect_close() :\n        connect_mysql.db.close()\n```\n\n\n文件二是单线程和多线程版的公用文件\n\n\n\n\n\n\n# shell 脚本\n```shell\n#!/bin/bash\ntotal=1\navaliable=`ps -ef | grep -w huobi.py | grep -v grep | wc -l`\ndiff=`expr $total - $avaliable`\n#echo $diff >> /home/script/diff.text\n#echo $total >> /home/script/diff.text\n#echo $avaliable >> /home/script/diff.text\nif [ $diff -gt 0 ];then\n        for((i=0;i<$diff;i++));do\n                 /usr/local/bin/python3 /home/script/huobi.py >> /home/script/huobi.out\n        done\nfi\n```\n\n# crontab 配置\n```powershell\nMAILTO=\"\"\n\n* * * * * sudo /bin/bash /home/script/huobi.sh\n```\n\n**注意事项**：\n在写shell脚本时，尽量用绝对路径。\n","source":"_posts/websocket订阅火币成交记录.md","raw":"---\ntitle: websocket订阅火币成交记录\ndate: 2018-06-19 18:15:57\ntags: 折腾\ncategories: 折腾\ntoc: true\n---\n# python3\n## 单线程：\n### 文件一：\n```python\n# -*- coding: utf-8 -*-\n#author: maxie_lj\nimport _thread\nfrom websocket import create_connection\nfrom mysqlOpertion import connect_mysql\nimport gzip\nimport time\nimport json\n\n# 链接\ndef connect():\n    while(1):\n        try:\n            print('')\n            # 挂代理\n            ws = create_connection(\"wss://www.huobi.br.com/-/s/pro/ws\")\n            #print('链接成功')\n            return ws\n            break\n        except Exception as err:\n            #print(err)\n            #print('connect ws error,retry...')\n            time.sleep(1)\n\n\ndef getsubconfig():\n    # 统计参数\n    tradeStr=[\n              \"\"\"{\"sub\": \"market.elfusdt.trade.detail\",\"id\": \"id1\"}\"\"\",\n              \"\"\"{\"sub\": \"market.btcusdt.trade.detail\",\"id\": \"id2\"}\"\"\",\n              \"\"\"{\"sub\": \"market.htusdt.trade.detail\",\"id\": \"id3\"}\"\"\",\n              \"\"\"{\"sub\": \"market.swftcbtc.trade.detail\",\"id\": \"id4\"}\"\"\",\n              \"\"\"{\"sub\": \"market.topcbtc.trade.detail\",\"id\": \"id6\"}\"\"\",\n              \"\"\"{\"sub\": \"market.bchusdt.trade.detail\",\"id\": \"id7\"}\"\"\",\n              \"\"\"{\"sub\": \"market.ethusdt.trade.detail\",\"id\": \"id8\"}\"\"\",\n              \"\"\"{\"sub\": \"market.etcusdt.trade.detail\",\"id\": \"id9\"}\"\"\",\n              \"\"\"{\"sub\": \"market.eosusdt.trade.detail\",\"id\": \"id9\"}\"\"\",\n              \"\"\"{\"sub\": \"market.ltcusdt.trade.detail\",\"id\": \"id9\"}\"\"\"\n              ]\n    return tradeStr\n\n# 订阅\ndef sub(ws,tradeStr):\n    ws.send(tradeStr)\n\n# 获取返回\ndef getResponse(ws,tradeStr):\n    db = connect_mysql.connect()\n    while 1 :\n        try :\n            compressData=ws.recv()\n        except Exception :\n            #print('链接异常')\n            run(tradeStr,1)\n        try :\n            result=gzip.decompress(compressData).decode('utf-8')\n        except:\n            #print('丢包解析异常')\n            continue\n        if result[:7] == '{\"ping\"':\n            ts=result[8:21]\n            #print('心跳包',ts)\n            pong='{\"pong\":'+ts+'}'\n            ws.send(pong)\n        else:\n            if result[:5] == '{\"ch\"':\n                result = json.loads(result)\n                #print(result)\n                #print('------------------------------------------------------')\n                n = 0\n                while n < len(result['tick']['data']) :\n                    connect_mysql.commit('%s' % result['ch'].split('.')[1],result['tick']['data'][n]['price'],result['tick']['data'][n]['amount'],\"'%s'\" % result[\"tick\"][\"data\"][n][\"direction\"], \"'%s'\" % result['ch'].split('.')[1],db);\n                    n += 1\n\ndef subCoin(tradeStr):\n    ws=connect()\n    sub(ws,tradeStr)\n    getResponse(ws,tradeStr)\n\ndef run(tradeStr,test):\n    subCoin(tradeStr)\n\ndef main():\n    tradeStr=getsubconfig()\n    try :\n        tradeStr = getsubconfig()\n        i = 0\n        while i < len(tradeStr) :\n            _thread.start_new_thread( run, (tradeStr[i],i) )\n            i += 1\n    except Exception as err :\n        print(err)\n    while 1:\n        pass\n\n\nif __name__ == '__main__':\n    main()\n```\n\n# 多线程版本：\n## 文件一：\n\n```python\n# -*- coding: utf-8 -*-\n#author: maxie_lj\nimport _thread\nfrom websocket import create_connection\nfrom test1 import connect_mysql\nimport gzip\nimport time\nimport json\n\n# 链接数据库\ndef connect():\n    while(1):\n        try:\n            ws = create_connection(\"wss://www.huobi.br.com/-/s/pro/ws\")\n            # print('链接成功')\n            return ws\n            break\n        except Exception as err:\n            print(err)\n            #print('connect ws error,retry...')\n            time.sleep(1)\n\n\ndef getsubconfig():\n    # 统计参数\n    tradeStr=[\n              \"\"\"{\"sub\": \"market.elfusdt.trade.detail\"}\"\"\",\n              \"\"\"{\"sub\": \"market.btcusdt.trade.detail\"}\"\"\",\n              \"\"\"{\"sub\": \"market.htusdt.trade.detail\"}\"\"\",\n              \"\"\"{\"sub\": \"market.swftcbtc.trade.detail\"}\"\"\",\n              \"\"\"{\"sub\": \"market.topcbtc.trade.detail\"}\"\"\",\n              \"\"\"{\"sub\": \"market.bchusdt.trade.detail\"}\"\"\",\n              \"\"\"{\"sub\": \"market.ethusdt.trade.detail\"}\"\"\",\n              \"\"\"{\"sub\": \"market.etcusdt.trade.detail\"}\"\"\",\n              \"\"\"{\"sub\": \"market.eosusdt.trade.detail\"}\"\"\",\n              \"\"\"{\"sub\": \"market.ltcusdt.trade.detail\"}\"\"\"\n              ]\n    return tradeStr\n\n# 订阅\ndef sub(ws,tradeStr):\n    ws.send(tradeStr)\n\n# 获取返回\ndef getResponse(ws):\n    db = connect_mysql.connect()\n    while 1 :\n        try :\n            compressData=ws.recv()\n        except Exception :\n            ws=connect()\n            subCoin(ws)\n            print('链接异常')\n        try :\n            result=gzip.decompress(compressData).decode('utf-8')\n        except:\n            print('丢包解析异常')\n            continue\n        if result[:7] == '{\"ping\"':\n            ts=result[8:21]\n            #print('心跳包',ts)\n            pong='{\"pong\":'+ts+'}'\n            ws.send(pong)\n        else:\n            if result[:5] == '{\"ch\"':\n                result = json.loads(result)\n                print(result)\n                #print('------------------------------------------------------')\n                n = 0\n                while n < len(result['tick']['data']) :\n                    connect_mysql.commit('%s' % result['ch'].split('.')[1],result['tick']['data'][n]['price'],result['tick']['data'][n]['amount'],\"'%s'\" % result[\"tick\"][\"data\"][n][\"direction\"], \"'%s'\" % result['ch'].split('.')[1],db);\n                    n += 1\n\n# 订阅\ndef subCoin(ws):\n    tradeStr=getsubconfig()\n    i = 0\n    while i < len(tradeStr) :\n            sub(ws,tradeStr[i])\n            i += 1\n# 主函数\ndef main():\n    ws=connect()\n    subCoin(ws)\n    getResponse(ws)\n\n\nif __name__ == '__main__':\n    main()\n```\n\n\n```\n### 文件二:\n\n```python\nimport json\nimport pymysql\nimport time\n\nclass connect_mysql():\n    db = ''\n    def connect() :\n            db = connect_mysql.db = pymysql.connect(\"localhost\", \"root\", \"root\", \"huobi\", charset='utf8' )\n            return db\n\n    def commit(table, price, amount, action, coin_type, db) :\n\n        try:\n            cursor = db.cursor()\n            sql = \"INSERT INTO %s_success_order(action,order_amount, price, coin_type)VALUES (%s, %.10f, %.10f,%s )\" % (table,action, amount, price,coin_type )\n            cursor.execute(sql)\n           # 提交到数据库执行\n            db.commit()\n        except Exception as e:\n            db = connect_mysql.db = pymysql.connect(\"localhost\", \"root\", \"root\", \"huobi\", charset='utf8' )\n            commit(table, price, amount, action, coin_type, db)\n        return\n\n\n    def connect_close() :\n        connect_mysql.db.close()\n```\n\n\n文件二是单线程和多线程版的公用文件\n\n\n\n\n\n\n# shell 脚本\n```shell\n#!/bin/bash\ntotal=1\navaliable=`ps -ef | grep -w huobi.py | grep -v grep | wc -l`\ndiff=`expr $total - $avaliable`\n#echo $diff >> /home/script/diff.text\n#echo $total >> /home/script/diff.text\n#echo $avaliable >> /home/script/diff.text\nif [ $diff -gt 0 ];then\n        for((i=0;i<$diff;i++));do\n                 /usr/local/bin/python3 /home/script/huobi.py >> /home/script/huobi.out\n        done\nfi\n```\n\n# crontab 配置\n```powershell\nMAILTO=\"\"\n\n* * * * * sudo /bin/bash /home/script/huobi.sh\n```\n\n**注意事项**：\n在写shell脚本时，尽量用绝对路径。\n","slug":"websocket订阅火币成交记录","published":1,"updated":"2019-02-20T16:25:46.459Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjswwkdpp001pg7wwyi0d6uax","content":"<h1 id=\"python3\"><a href=\"#python3\" class=\"headerlink\" title=\"python3\"></a>python3</h1><h2 id=\"单线程：\"><a href=\"#单线程：\" class=\"headerlink\" title=\"单线程：\"></a>单线程：</h2><h3 id=\"文件一：\"><a href=\"#文件一：\" class=\"headerlink\" title=\"文件一：\"></a>文件一：</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></div><div class=\"line\"><span class=\"comment\">#author: maxie_lj</span></div><div class=\"line\"><span class=\"keyword\">import</span> _thread</div><div class=\"line\"><span class=\"keyword\">from</span> websocket <span class=\"keyword\">import</span> create_connection</div><div class=\"line\"><span class=\"keyword\">from</span> mysqlOpertion <span class=\"keyword\">import</span> connect_mysql</div><div class=\"line\"><span class=\"keyword\">import</span> gzip</div><div class=\"line\"><span class=\"keyword\">import</span> time</div><div class=\"line\"><span class=\"keyword\">import</span> json</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 链接</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">connect</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"number\">1</span>):</div><div class=\"line\">        <span class=\"keyword\">try</span>:</div><div class=\"line\">            print(<span class=\"string\">''</span>)</div><div class=\"line\">            <span class=\"comment\"># 挂代理</span></div><div class=\"line\">            ws = create_connection(<span class=\"string\">\"wss://www.huobi.br.com/-/s/pro/ws\"</span>)</div><div class=\"line\">            <span class=\"comment\">#print('链接成功')</span></div><div class=\"line\">            <span class=\"keyword\">return</span> ws</div><div class=\"line\">            <span class=\"keyword\">break</span></div><div class=\"line\">        <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> err:</div><div class=\"line\">            <span class=\"comment\">#print(err)</span></div><div class=\"line\">            <span class=\"comment\">#print('connect ws error,retry...')</span></div><div class=\"line\">            time.sleep(<span class=\"number\">1</span>)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getsubconfig</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"comment\"># 统计参数</span></div><div class=\"line\">    tradeStr=[</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.elfusdt.trade.detail\",\"id\": \"id1\"&#125;\"\"\"</span>,</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.btcusdt.trade.detail\",\"id\": \"id2\"&#125;\"\"\"</span>,</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.htusdt.trade.detail\",\"id\": \"id3\"&#125;\"\"\"</span>,</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.swftcbtc.trade.detail\",\"id\": \"id4\"&#125;\"\"\"</span>,</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.topcbtc.trade.detail\",\"id\": \"id6\"&#125;\"\"\"</span>,</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.bchusdt.trade.detail\",\"id\": \"id7\"&#125;\"\"\"</span>,</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.ethusdt.trade.detail\",\"id\": \"id8\"&#125;\"\"\"</span>,</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.etcusdt.trade.detail\",\"id\": \"id9\"&#125;\"\"\"</span>,</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.eosusdt.trade.detail\",\"id\": \"id9\"&#125;\"\"\"</span>,</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.ltcusdt.trade.detail\",\"id\": \"id9\"&#125;\"\"\"</span></div><div class=\"line\">              ]</div><div class=\"line\">    <span class=\"keyword\">return</span> tradeStr</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 订阅</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sub</span><span class=\"params\">(ws,tradeStr)</span>:</span></div><div class=\"line\">    ws.send(tradeStr)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 获取返回</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getResponse</span><span class=\"params\">(ws,tradeStr)</span>:</span></div><div class=\"line\">    db = connect_mysql.connect()</div><div class=\"line\">    <span class=\"keyword\">while</span> <span class=\"number\">1</span> :</div><div class=\"line\">        <span class=\"keyword\">try</span> :</div><div class=\"line\">            compressData=ws.recv()</div><div class=\"line\">        <span class=\"keyword\">except</span> Exception :</div><div class=\"line\">            <span class=\"comment\">#print('链接异常')</span></div><div class=\"line\">            run(tradeStr,<span class=\"number\">1</span>)</div><div class=\"line\">        <span class=\"keyword\">try</span> :</div><div class=\"line\">            result=gzip.decompress(compressData).decode(<span class=\"string\">'utf-8'</span>)</div><div class=\"line\">        <span class=\"keyword\">except</span>:</div><div class=\"line\">            <span class=\"comment\">#print('丢包解析异常')</span></div><div class=\"line\">            <span class=\"keyword\">continue</span></div><div class=\"line\">        <span class=\"keyword\">if</span> result[:<span class=\"number\">7</span>] == <span class=\"string\">'&#123;\"ping\"'</span>:</div><div class=\"line\">            ts=result[<span class=\"number\">8</span>:<span class=\"number\">21</span>]</div><div class=\"line\">            <span class=\"comment\">#print('心跳包',ts)</span></div><div class=\"line\">            pong=<span class=\"string\">'&#123;\"pong\":'</span>+ts+<span class=\"string\">'&#125;'</span></div><div class=\"line\">            ws.send(pong)</div><div class=\"line\">        <span class=\"keyword\">else</span>:</div><div class=\"line\">            <span class=\"keyword\">if</span> result[:<span class=\"number\">5</span>] == <span class=\"string\">'&#123;\"ch\"'</span>:</div><div class=\"line\">                result = json.loads(result)</div><div class=\"line\">                <span class=\"comment\">#print(result)</span></div><div class=\"line\">                <span class=\"comment\">#print('------------------------------------------------------')</span></div><div class=\"line\">                n = <span class=\"number\">0</span></div><div class=\"line\">                <span class=\"keyword\">while</span> n &lt; len(result[<span class=\"string\">'tick'</span>][<span class=\"string\">'data'</span>]) :</div><div class=\"line\">                    connect_mysql.commit(<span class=\"string\">'%s'</span> % result[<span class=\"string\">'ch'</span>].split(<span class=\"string\">'.'</span>)[<span class=\"number\">1</span>],result[<span class=\"string\">'tick'</span>][<span class=\"string\">'data'</span>][n][<span class=\"string\">'price'</span>],result[<span class=\"string\">'tick'</span>][<span class=\"string\">'data'</span>][n][<span class=\"string\">'amount'</span>],<span class=\"string\">\"'%s'\"</span> % result[<span class=\"string\">\"tick\"</span>][<span class=\"string\">\"data\"</span>][n][<span class=\"string\">\"direction\"</span>], <span class=\"string\">\"'%s'\"</span> % result[<span class=\"string\">'ch'</span>].split(<span class=\"string\">'.'</span>)[<span class=\"number\">1</span>],db);</div><div class=\"line\">                    n += <span class=\"number\">1</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">subCoin</span><span class=\"params\">(tradeStr)</span>:</span></div><div class=\"line\">    ws=connect()</div><div class=\"line\">    sub(ws,tradeStr)</div><div class=\"line\">    getResponse(ws,tradeStr)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span><span class=\"params\">(tradeStr,test)</span>:</span></div><div class=\"line\">    subCoin(tradeStr)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    tradeStr=getsubconfig()</div><div class=\"line\">    <span class=\"keyword\">try</span> :</div><div class=\"line\">        tradeStr = getsubconfig()</div><div class=\"line\">        i = <span class=\"number\">0</span></div><div class=\"line\">        <span class=\"keyword\">while</span> i &lt; len(tradeStr) :</div><div class=\"line\">            _thread.start_new_thread( run, (tradeStr[i],i) )</div><div class=\"line\">            i += <span class=\"number\">1</span></div><div class=\"line\">    <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> err :</div><div class=\"line\">        print(err)</div><div class=\"line\">    <span class=\"keyword\">while</span> <span class=\"number\">1</span>:</div><div class=\"line\">        <span class=\"keyword\">pass</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    main()</div></pre></td></tr></table></figure>\n<h1 id=\"多线程版本：\"><a href=\"#多线程版本：\" class=\"headerlink\" title=\"多线程版本：\"></a>多线程版本：</h1><h2 id=\"文件一：-1\"><a href=\"#文件一：-1\" class=\"headerlink\" title=\"文件一：\"></a>文件一：</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></div><div class=\"line\"><span class=\"comment\">#author: maxie_lj</span></div><div class=\"line\"><span class=\"keyword\">import</span> _thread</div><div class=\"line\"><span class=\"keyword\">from</span> websocket <span class=\"keyword\">import</span> create_connection</div><div class=\"line\"><span class=\"keyword\">from</span> test1 <span class=\"keyword\">import</span> connect_mysql</div><div class=\"line\"><span class=\"keyword\">import</span> gzip</div><div class=\"line\"><span class=\"keyword\">import</span> time</div><div class=\"line\"><span class=\"keyword\">import</span> json</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 链接数据库</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">connect</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"number\">1</span>):</div><div class=\"line\">        <span class=\"keyword\">try</span>:</div><div class=\"line\">            ws = create_connection(<span class=\"string\">\"wss://www.huobi.br.com/-/s/pro/ws\"</span>)</div><div class=\"line\">            <span class=\"comment\"># print('链接成功')</span></div><div class=\"line\">            <span class=\"keyword\">return</span> ws</div><div class=\"line\">            <span class=\"keyword\">break</span></div><div class=\"line\">        <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> err:</div><div class=\"line\">            print(err)</div><div class=\"line\">            <span class=\"comment\">#print('connect ws error,retry...')</span></div><div class=\"line\">            time.sleep(<span class=\"number\">1</span>)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getsubconfig</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"comment\"># 统计参数</span></div><div class=\"line\">    tradeStr=[</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.elfusdt.trade.detail\"&#125;\"\"\"</span>,</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.btcusdt.trade.detail\"&#125;\"\"\"</span>,</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.htusdt.trade.detail\"&#125;\"\"\"</span>,</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.swftcbtc.trade.detail\"&#125;\"\"\"</span>,</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.topcbtc.trade.detail\"&#125;\"\"\"</span>,</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.bchusdt.trade.detail\"&#125;\"\"\"</span>,</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.ethusdt.trade.detail\"&#125;\"\"\"</span>,</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.etcusdt.trade.detail\"&#125;\"\"\"</span>,</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.eosusdt.trade.detail\"&#125;\"\"\"</span>,</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.ltcusdt.trade.detail\"&#125;\"\"\"</span></div><div class=\"line\">              ]</div><div class=\"line\">    <span class=\"keyword\">return</span> tradeStr</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 订阅</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sub</span><span class=\"params\">(ws,tradeStr)</span>:</span></div><div class=\"line\">    ws.send(tradeStr)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 获取返回</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getResponse</span><span class=\"params\">(ws)</span>:</span></div><div class=\"line\">    db = connect_mysql.connect()</div><div class=\"line\">    <span class=\"keyword\">while</span> <span class=\"number\">1</span> :</div><div class=\"line\">        <span class=\"keyword\">try</span> :</div><div class=\"line\">            compressData=ws.recv()</div><div class=\"line\">        <span class=\"keyword\">except</span> Exception :</div><div class=\"line\">            ws=connect()</div><div class=\"line\">            subCoin(ws)</div><div class=\"line\">            print(<span class=\"string\">'链接异常'</span>)</div><div class=\"line\">        <span class=\"keyword\">try</span> :</div><div class=\"line\">            result=gzip.decompress(compressData).decode(<span class=\"string\">'utf-8'</span>)</div><div class=\"line\">        <span class=\"keyword\">except</span>:</div><div class=\"line\">            print(<span class=\"string\">'丢包解析异常'</span>)</div><div class=\"line\">            <span class=\"keyword\">continue</span></div><div class=\"line\">        <span class=\"keyword\">if</span> result[:<span class=\"number\">7</span>] == <span class=\"string\">'&#123;\"ping\"'</span>:</div><div class=\"line\">            ts=result[<span class=\"number\">8</span>:<span class=\"number\">21</span>]</div><div class=\"line\">            <span class=\"comment\">#print('心跳包',ts)</span></div><div class=\"line\">            pong=<span class=\"string\">'&#123;\"pong\":'</span>+ts+<span class=\"string\">'&#125;'</span></div><div class=\"line\">            ws.send(pong)</div><div class=\"line\">        <span class=\"keyword\">else</span>:</div><div class=\"line\">            <span class=\"keyword\">if</span> result[:<span class=\"number\">5</span>] == <span class=\"string\">'&#123;\"ch\"'</span>:</div><div class=\"line\">                result = json.loads(result)</div><div class=\"line\">                print(result)</div><div class=\"line\">                <span class=\"comment\">#print('------------------------------------------------------')</span></div><div class=\"line\">                n = <span class=\"number\">0</span></div><div class=\"line\">                <span class=\"keyword\">while</span> n &lt; len(result[<span class=\"string\">'tick'</span>][<span class=\"string\">'data'</span>]) :</div><div class=\"line\">                    connect_mysql.commit(<span class=\"string\">'%s'</span> % result[<span class=\"string\">'ch'</span>].split(<span class=\"string\">'.'</span>)[<span class=\"number\">1</span>],result[<span class=\"string\">'tick'</span>][<span class=\"string\">'data'</span>][n][<span class=\"string\">'price'</span>],result[<span class=\"string\">'tick'</span>][<span class=\"string\">'data'</span>][n][<span class=\"string\">'amount'</span>],<span class=\"string\">\"'%s'\"</span> % result[<span class=\"string\">\"tick\"</span>][<span class=\"string\">\"data\"</span>][n][<span class=\"string\">\"direction\"</span>], <span class=\"string\">\"'%s'\"</span> % result[<span class=\"string\">'ch'</span>].split(<span class=\"string\">'.'</span>)[<span class=\"number\">1</span>],db);</div><div class=\"line\">                    n += <span class=\"number\">1</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 订阅</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">subCoin</span><span class=\"params\">(ws)</span>:</span></div><div class=\"line\">    tradeStr=getsubconfig()</div><div class=\"line\">    i = <span class=\"number\">0</span></div><div class=\"line\">    <span class=\"keyword\">while</span> i &lt; len(tradeStr) :</div><div class=\"line\">            sub(ws,tradeStr[i])</div><div class=\"line\">            i += <span class=\"number\">1</span></div><div class=\"line\"><span class=\"comment\"># 主函数</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    ws=connect()</div><div class=\"line\">    subCoin(ws)</div><div class=\"line\">    getResponse(ws)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    main()</div></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">### 文件二:</span></div><div class=\"line\"></div><div class=\"line\">```python</div><div class=\"line\"><span class=\"keyword\">import</span> json</div><div class=\"line\"><span class=\"keyword\">import</span> pymysql</div><div class=\"line\"><span class=\"keyword\">import</span> time</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">connect_mysql</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    db = <span class=\"string\">''</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">connect</span><span class=\"params\">()</span> :</span></div><div class=\"line\">            db = connect_mysql.db = pymysql.connect(<span class=\"string\">\"localhost\"</span>, <span class=\"string\">\"root\"</span>, <span class=\"string\">\"root\"</span>, <span class=\"string\">\"huobi\"</span>, charset=<span class=\"string\">'utf8'</span> )</div><div class=\"line\">            <span class=\"keyword\">return</span> db</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">commit</span><span class=\"params\">(table, price, amount, action, coin_type, db)</span> :</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">try</span>:</div><div class=\"line\">            cursor = db.cursor()</div><div class=\"line\">            sql = <span class=\"string\">\"INSERT INTO %s_success_order(action,order_amount, price, coin_type)VALUES (%s, %.10f, %.10f,%s )\"</span> % (table,action, amount, price,coin_type )</div><div class=\"line\">            cursor.execute(sql)</div><div class=\"line\">           <span class=\"comment\"># 提交到数据库执行</span></div><div class=\"line\">            db.commit()</div><div class=\"line\">        <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</div><div class=\"line\">            db = connect_mysql.db = pymysql.connect(<span class=\"string\">\"localhost\"</span>, <span class=\"string\">\"root\"</span>, <span class=\"string\">\"root\"</span>, <span class=\"string\">\"huobi\"</span>, charset=<span class=\"string\">'utf8'</span> )</div><div class=\"line\">            commit(table, price, amount, action, coin_type, db)</div><div class=\"line\">        <span class=\"keyword\">return</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">connect_close</span><span class=\"params\">()</span> :</span></div><div class=\"line\">        connect_mysql.db.close()</div></pre></td></tr></table></figure>\n<p>文件二是单线程和多线程版的公用文件</p>\n<h1 id=\"shell-脚本\"><a href=\"#shell-脚本\" class=\"headerlink\" title=\"shell 脚本\"></a>shell 脚本</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">#!/bin/bash</div><div class=\"line\">total=1</div><div class=\"line\">avaliable=`ps -ef | grep -w huobi.py | grep -v grep | wc -l`</div><div class=\"line\">diff=`expr $total - $avaliable`</div><div class=\"line\">#echo $diff &gt;&gt; /home/script/diff.text</div><div class=\"line\">#echo $total &gt;&gt; /home/script/diff.text</div><div class=\"line\">#echo $avaliable &gt;&gt; /home/script/diff.text</div><div class=\"line\">if [ $diff -gt 0 ];then</div><div class=\"line\">        for((i=0;i&lt;$diff;i++));do</div><div class=\"line\">                 /usr/local/bin/python3 /home/script/huobi.py &gt;&gt; /home/script/huobi.out</div><div class=\"line\">        done</div><div class=\"line\">fi</div></pre></td></tr></table></figure>\n<h1 id=\"crontab-配置\"><a href=\"#crontab-配置\" class=\"headerlink\" title=\"crontab 配置\"></a>crontab 配置</h1><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">MAILTO=<span class=\"string\">\"\"</span></div><div class=\"line\"></div><div class=\"line\">* * * * * sudo /bin/bash /home/script/huobi.sh</div></pre></td></tr></table></figure>\n<p><strong>注意事项</strong>：<br>在写shell脚本时，尽量用绝对路径。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"python3\"><a href=\"#python3\" class=\"headerlink\" title=\"python3\"></a>python3</h1><h2 id=\"单线程：\"><a href=\"#单线程：\" class=\"headerlink\" title=\"单线程：\"></a>单线程：</h2><h3 id=\"文件一：\"><a href=\"#文件一：\" class=\"headerlink\" title=\"文件一：\"></a>文件一：</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></div><div class=\"line\"><span class=\"comment\">#author: maxie_lj</span></div><div class=\"line\"><span class=\"keyword\">import</span> _thread</div><div class=\"line\"><span class=\"keyword\">from</span> websocket <span class=\"keyword\">import</span> create_connection</div><div class=\"line\"><span class=\"keyword\">from</span> mysqlOpertion <span class=\"keyword\">import</span> connect_mysql</div><div class=\"line\"><span class=\"keyword\">import</span> gzip</div><div class=\"line\"><span class=\"keyword\">import</span> time</div><div class=\"line\"><span class=\"keyword\">import</span> json</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 链接</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">connect</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"number\">1</span>):</div><div class=\"line\">        <span class=\"keyword\">try</span>:</div><div class=\"line\">            print(<span class=\"string\">''</span>)</div><div class=\"line\">            <span class=\"comment\"># 挂代理</span></div><div class=\"line\">            ws = create_connection(<span class=\"string\">\"wss://www.huobi.br.com/-/s/pro/ws\"</span>)</div><div class=\"line\">            <span class=\"comment\">#print('链接成功')</span></div><div class=\"line\">            <span class=\"keyword\">return</span> ws</div><div class=\"line\">            <span class=\"keyword\">break</span></div><div class=\"line\">        <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> err:</div><div class=\"line\">            <span class=\"comment\">#print(err)</span></div><div class=\"line\">            <span class=\"comment\">#print('connect ws error,retry...')</span></div><div class=\"line\">            time.sleep(<span class=\"number\">1</span>)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getsubconfig</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"comment\"># 统计参数</span></div><div class=\"line\">    tradeStr=[</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.elfusdt.trade.detail\",\"id\": \"id1\"&#125;\"\"\"</span>,</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.btcusdt.trade.detail\",\"id\": \"id2\"&#125;\"\"\"</span>,</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.htusdt.trade.detail\",\"id\": \"id3\"&#125;\"\"\"</span>,</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.swftcbtc.trade.detail\",\"id\": \"id4\"&#125;\"\"\"</span>,</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.topcbtc.trade.detail\",\"id\": \"id6\"&#125;\"\"\"</span>,</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.bchusdt.trade.detail\",\"id\": \"id7\"&#125;\"\"\"</span>,</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.ethusdt.trade.detail\",\"id\": \"id8\"&#125;\"\"\"</span>,</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.etcusdt.trade.detail\",\"id\": \"id9\"&#125;\"\"\"</span>,</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.eosusdt.trade.detail\",\"id\": \"id9\"&#125;\"\"\"</span>,</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.ltcusdt.trade.detail\",\"id\": \"id9\"&#125;\"\"\"</span></div><div class=\"line\">              ]</div><div class=\"line\">    <span class=\"keyword\">return</span> tradeStr</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 订阅</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sub</span><span class=\"params\">(ws,tradeStr)</span>:</span></div><div class=\"line\">    ws.send(tradeStr)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 获取返回</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getResponse</span><span class=\"params\">(ws,tradeStr)</span>:</span></div><div class=\"line\">    db = connect_mysql.connect()</div><div class=\"line\">    <span class=\"keyword\">while</span> <span class=\"number\">1</span> :</div><div class=\"line\">        <span class=\"keyword\">try</span> :</div><div class=\"line\">            compressData=ws.recv()</div><div class=\"line\">        <span class=\"keyword\">except</span> Exception :</div><div class=\"line\">            <span class=\"comment\">#print('链接异常')</span></div><div class=\"line\">            run(tradeStr,<span class=\"number\">1</span>)</div><div class=\"line\">        <span class=\"keyword\">try</span> :</div><div class=\"line\">            result=gzip.decompress(compressData).decode(<span class=\"string\">'utf-8'</span>)</div><div class=\"line\">        <span class=\"keyword\">except</span>:</div><div class=\"line\">            <span class=\"comment\">#print('丢包解析异常')</span></div><div class=\"line\">            <span class=\"keyword\">continue</span></div><div class=\"line\">        <span class=\"keyword\">if</span> result[:<span class=\"number\">7</span>] == <span class=\"string\">'&#123;\"ping\"'</span>:</div><div class=\"line\">            ts=result[<span class=\"number\">8</span>:<span class=\"number\">21</span>]</div><div class=\"line\">            <span class=\"comment\">#print('心跳包',ts)</span></div><div class=\"line\">            pong=<span class=\"string\">'&#123;\"pong\":'</span>+ts+<span class=\"string\">'&#125;'</span></div><div class=\"line\">            ws.send(pong)</div><div class=\"line\">        <span class=\"keyword\">else</span>:</div><div class=\"line\">            <span class=\"keyword\">if</span> result[:<span class=\"number\">5</span>] == <span class=\"string\">'&#123;\"ch\"'</span>:</div><div class=\"line\">                result = json.loads(result)</div><div class=\"line\">                <span class=\"comment\">#print(result)</span></div><div class=\"line\">                <span class=\"comment\">#print('------------------------------------------------------')</span></div><div class=\"line\">                n = <span class=\"number\">0</span></div><div class=\"line\">                <span class=\"keyword\">while</span> n &lt; len(result[<span class=\"string\">'tick'</span>][<span class=\"string\">'data'</span>]) :</div><div class=\"line\">                    connect_mysql.commit(<span class=\"string\">'%s'</span> % result[<span class=\"string\">'ch'</span>].split(<span class=\"string\">'.'</span>)[<span class=\"number\">1</span>],result[<span class=\"string\">'tick'</span>][<span class=\"string\">'data'</span>][n][<span class=\"string\">'price'</span>],result[<span class=\"string\">'tick'</span>][<span class=\"string\">'data'</span>][n][<span class=\"string\">'amount'</span>],<span class=\"string\">\"'%s'\"</span> % result[<span class=\"string\">\"tick\"</span>][<span class=\"string\">\"data\"</span>][n][<span class=\"string\">\"direction\"</span>], <span class=\"string\">\"'%s'\"</span> % result[<span class=\"string\">'ch'</span>].split(<span class=\"string\">'.'</span>)[<span class=\"number\">1</span>],db);</div><div class=\"line\">                    n += <span class=\"number\">1</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">subCoin</span><span class=\"params\">(tradeStr)</span>:</span></div><div class=\"line\">    ws=connect()</div><div class=\"line\">    sub(ws,tradeStr)</div><div class=\"line\">    getResponse(ws,tradeStr)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span><span class=\"params\">(tradeStr,test)</span>:</span></div><div class=\"line\">    subCoin(tradeStr)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    tradeStr=getsubconfig()</div><div class=\"line\">    <span class=\"keyword\">try</span> :</div><div class=\"line\">        tradeStr = getsubconfig()</div><div class=\"line\">        i = <span class=\"number\">0</span></div><div class=\"line\">        <span class=\"keyword\">while</span> i &lt; len(tradeStr) :</div><div class=\"line\">            _thread.start_new_thread( run, (tradeStr[i],i) )</div><div class=\"line\">            i += <span class=\"number\">1</span></div><div class=\"line\">    <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> err :</div><div class=\"line\">        print(err)</div><div class=\"line\">    <span class=\"keyword\">while</span> <span class=\"number\">1</span>:</div><div class=\"line\">        <span class=\"keyword\">pass</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    main()</div></pre></td></tr></table></figure>\n<h1 id=\"多线程版本：\"><a href=\"#多线程版本：\" class=\"headerlink\" title=\"多线程版本：\"></a>多线程版本：</h1><h2 id=\"文件一：-1\"><a href=\"#文件一：-1\" class=\"headerlink\" title=\"文件一：\"></a>文件一：</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></div><div class=\"line\"><span class=\"comment\">#author: maxie_lj</span></div><div class=\"line\"><span class=\"keyword\">import</span> _thread</div><div class=\"line\"><span class=\"keyword\">from</span> websocket <span class=\"keyword\">import</span> create_connection</div><div class=\"line\"><span class=\"keyword\">from</span> test1 <span class=\"keyword\">import</span> connect_mysql</div><div class=\"line\"><span class=\"keyword\">import</span> gzip</div><div class=\"line\"><span class=\"keyword\">import</span> time</div><div class=\"line\"><span class=\"keyword\">import</span> json</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 链接数据库</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">connect</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"number\">1</span>):</div><div class=\"line\">        <span class=\"keyword\">try</span>:</div><div class=\"line\">            ws = create_connection(<span class=\"string\">\"wss://www.huobi.br.com/-/s/pro/ws\"</span>)</div><div class=\"line\">            <span class=\"comment\"># print('链接成功')</span></div><div class=\"line\">            <span class=\"keyword\">return</span> ws</div><div class=\"line\">            <span class=\"keyword\">break</span></div><div class=\"line\">        <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> err:</div><div class=\"line\">            print(err)</div><div class=\"line\">            <span class=\"comment\">#print('connect ws error,retry...')</span></div><div class=\"line\">            time.sleep(<span class=\"number\">1</span>)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getsubconfig</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"comment\"># 统计参数</span></div><div class=\"line\">    tradeStr=[</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.elfusdt.trade.detail\"&#125;\"\"\"</span>,</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.btcusdt.trade.detail\"&#125;\"\"\"</span>,</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.htusdt.trade.detail\"&#125;\"\"\"</span>,</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.swftcbtc.trade.detail\"&#125;\"\"\"</span>,</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.topcbtc.trade.detail\"&#125;\"\"\"</span>,</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.bchusdt.trade.detail\"&#125;\"\"\"</span>,</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.ethusdt.trade.detail\"&#125;\"\"\"</span>,</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.etcusdt.trade.detail\"&#125;\"\"\"</span>,</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.eosusdt.trade.detail\"&#125;\"\"\"</span>,</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.ltcusdt.trade.detail\"&#125;\"\"\"</span></div><div class=\"line\">              ]</div><div class=\"line\">    <span class=\"keyword\">return</span> tradeStr</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 订阅</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sub</span><span class=\"params\">(ws,tradeStr)</span>:</span></div><div class=\"line\">    ws.send(tradeStr)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 获取返回</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getResponse</span><span class=\"params\">(ws)</span>:</span></div><div class=\"line\">    db = connect_mysql.connect()</div><div class=\"line\">    <span class=\"keyword\">while</span> <span class=\"number\">1</span> :</div><div class=\"line\">        <span class=\"keyword\">try</span> :</div><div class=\"line\">            compressData=ws.recv()</div><div class=\"line\">        <span class=\"keyword\">except</span> Exception :</div><div class=\"line\">            ws=connect()</div><div class=\"line\">            subCoin(ws)</div><div class=\"line\">            print(<span class=\"string\">'链接异常'</span>)</div><div class=\"line\">        <span class=\"keyword\">try</span> :</div><div class=\"line\">            result=gzip.decompress(compressData).decode(<span class=\"string\">'utf-8'</span>)</div><div class=\"line\">        <span class=\"keyword\">except</span>:</div><div class=\"line\">            print(<span class=\"string\">'丢包解析异常'</span>)</div><div class=\"line\">            <span class=\"keyword\">continue</span></div><div class=\"line\">        <span class=\"keyword\">if</span> result[:<span class=\"number\">7</span>] == <span class=\"string\">'&#123;\"ping\"'</span>:</div><div class=\"line\">            ts=result[<span class=\"number\">8</span>:<span class=\"number\">21</span>]</div><div class=\"line\">            <span class=\"comment\">#print('心跳包',ts)</span></div><div class=\"line\">            pong=<span class=\"string\">'&#123;\"pong\":'</span>+ts+<span class=\"string\">'&#125;'</span></div><div class=\"line\">            ws.send(pong)</div><div class=\"line\">        <span class=\"keyword\">else</span>:</div><div class=\"line\">            <span class=\"keyword\">if</span> result[:<span class=\"number\">5</span>] == <span class=\"string\">'&#123;\"ch\"'</span>:</div><div class=\"line\">                result = json.loads(result)</div><div class=\"line\">                print(result)</div><div class=\"line\">                <span class=\"comment\">#print('------------------------------------------------------')</span></div><div class=\"line\">                n = <span class=\"number\">0</span></div><div class=\"line\">                <span class=\"keyword\">while</span> n &lt; len(result[<span class=\"string\">'tick'</span>][<span class=\"string\">'data'</span>]) :</div><div class=\"line\">                    connect_mysql.commit(<span class=\"string\">'%s'</span> % result[<span class=\"string\">'ch'</span>].split(<span class=\"string\">'.'</span>)[<span class=\"number\">1</span>],result[<span class=\"string\">'tick'</span>][<span class=\"string\">'data'</span>][n][<span class=\"string\">'price'</span>],result[<span class=\"string\">'tick'</span>][<span class=\"string\">'data'</span>][n][<span class=\"string\">'amount'</span>],<span class=\"string\">\"'%s'\"</span> % result[<span class=\"string\">\"tick\"</span>][<span class=\"string\">\"data\"</span>][n][<span class=\"string\">\"direction\"</span>], <span class=\"string\">\"'%s'\"</span> % result[<span class=\"string\">'ch'</span>].split(<span class=\"string\">'.'</span>)[<span class=\"number\">1</span>],db);</div><div class=\"line\">                    n += <span class=\"number\">1</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 订阅</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">subCoin</span><span class=\"params\">(ws)</span>:</span></div><div class=\"line\">    tradeStr=getsubconfig()</div><div class=\"line\">    i = <span class=\"number\">0</span></div><div class=\"line\">    <span class=\"keyword\">while</span> i &lt; len(tradeStr) :</div><div class=\"line\">            sub(ws,tradeStr[i])</div><div class=\"line\">            i += <span class=\"number\">1</span></div><div class=\"line\"><span class=\"comment\"># 主函数</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    ws=connect()</div><div class=\"line\">    subCoin(ws)</div><div class=\"line\">    getResponse(ws)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    main()</div></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">### 文件二:</span></div><div class=\"line\"></div><div class=\"line\">```python</div><div class=\"line\"><span class=\"keyword\">import</span> json</div><div class=\"line\"><span class=\"keyword\">import</span> pymysql</div><div class=\"line\"><span class=\"keyword\">import</span> time</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">connect_mysql</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    db = <span class=\"string\">''</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">connect</span><span class=\"params\">()</span> :</span></div><div class=\"line\">            db = connect_mysql.db = pymysql.connect(<span class=\"string\">\"localhost\"</span>, <span class=\"string\">\"root\"</span>, <span class=\"string\">\"root\"</span>, <span class=\"string\">\"huobi\"</span>, charset=<span class=\"string\">'utf8'</span> )</div><div class=\"line\">            <span class=\"keyword\">return</span> db</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">commit</span><span class=\"params\">(table, price, amount, action, coin_type, db)</span> :</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">try</span>:</div><div class=\"line\">            cursor = db.cursor()</div><div class=\"line\">            sql = <span class=\"string\">\"INSERT INTO %s_success_order(action,order_amount, price, coin_type)VALUES (%s, %.10f, %.10f,%s )\"</span> % (table,action, amount, price,coin_type )</div><div class=\"line\">            cursor.execute(sql)</div><div class=\"line\">           <span class=\"comment\"># 提交到数据库执行</span></div><div class=\"line\">            db.commit()</div><div class=\"line\">        <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</div><div class=\"line\">            db = connect_mysql.db = pymysql.connect(<span class=\"string\">\"localhost\"</span>, <span class=\"string\">\"root\"</span>, <span class=\"string\">\"root\"</span>, <span class=\"string\">\"huobi\"</span>, charset=<span class=\"string\">'utf8'</span> )</div><div class=\"line\">            commit(table, price, amount, action, coin_type, db)</div><div class=\"line\">        <span class=\"keyword\">return</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">connect_close</span><span class=\"params\">()</span> :</span></div><div class=\"line\">        connect_mysql.db.close()</div></pre></td></tr></table></figure>\n<p>文件二是单线程和多线程版的公用文件</p>\n<h1 id=\"shell-脚本\"><a href=\"#shell-脚本\" class=\"headerlink\" title=\"shell 脚本\"></a>shell 脚本</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">#!/bin/bash</div><div class=\"line\">total=1</div><div class=\"line\">avaliable=`ps -ef | grep -w huobi.py | grep -v grep | wc -l`</div><div class=\"line\">diff=`expr $total - $avaliable`</div><div class=\"line\">#echo $diff &gt;&gt; /home/script/diff.text</div><div class=\"line\">#echo $total &gt;&gt; /home/script/diff.text</div><div class=\"line\">#echo $avaliable &gt;&gt; /home/script/diff.text</div><div class=\"line\">if [ $diff -gt 0 ];then</div><div class=\"line\">        for((i=0;i&lt;$diff;i++));do</div><div class=\"line\">                 /usr/local/bin/python3 /home/script/huobi.py &gt;&gt; /home/script/huobi.out</div><div class=\"line\">        done</div><div class=\"line\">fi</div></pre></td></tr></table></figure>\n<h1 id=\"crontab-配置\"><a href=\"#crontab-配置\" class=\"headerlink\" title=\"crontab 配置\"></a>crontab 配置</h1><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">MAILTO=<span class=\"string\">\"\"</span></div><div class=\"line\"></div><div class=\"line\">* * * * * sudo /bin/bash /home/script/huobi.sh</div></pre></td></tr></table></figure>\n<p><strong>注意事项</strong>：<br>在写shell脚本时，尽量用绝对路径。</p>\n"},{"title":"如何建立一个composer私有包","date":"2017-09-28T09:11:00.000Z","toc":true,"_content":"\n\n最近发现分布式锁在很多项目都有所用到,所以想把之前完成的代码封装成pear包,供大家使用。\n但是发现自己对composer并不是很熟悉,所以学习一番,在此记录以防自己忘记。\n\n\n\n## 新建仓库\n\n$ git clone git@gitlab.renrenche.com:web/jugg.git\n$ cd jugg\n\n\n## conmposer 初始化\n\ncomposer init \n\n```\n//包名\nPackage name (<vendor>/<name>) [lijian/test_composer]: jugg/jugg\n//描述\nDescription []: 基于redis的分布式锁\n//作者\nAuthor [, n to skip]: Maxie lj <xiaolijian110@163.com>\n//最小稳定版本\nMinimum Stability []: dev\n//遵循协议\nLicense []: MIT\n\n//依赖\nWould you like to define your dependencies (require) interactively [yes]? yes\n\nSearch for a package: php\n\nEnter the version constraint to require (or leave blank to use the latest version):\nUsing version ^7.0 for php\n```\n\n\n生成composer.json文件\n\n```\n{\n    \"name\": \"jugg/jugg\",\n    \"description\": \"基于redis的分布式锁\",\n    \"type\": \"library\",\n    \"require\": {\n        \"php\": \"^7.0\"\n    },\n    \"require-dev\": {\n        \"php\": \"7\"\n    },\n    \"license\": \"MIT\",\n    \"authors\": [\n        {\n            \"name\": \"Maxie lj\",\n            \"email\": \"xiaolijian110@163.com\"\n        }\n    ],\n    \"minimum-stability\": \"dev\"\n}\n```\n\n## 生成自动加载（psr-4）\n\n在composer.json 文件里添加\n```\n{\n    \"name\": \"jugg/jugg\",\n    \"description\": \"基于redis的分布式锁\",\n    \"type\": \"library\",\n    \"license\": \"MIT\",\n    \"authors\": [\n        {\n            \"name\": \"Maxie lj\",\n            \"email\": \"xiaolijian110@163.com\"\n        }\n    ],\n    \"autoload\": {\n    \"psr-4\": {\n      \"Jugg\\\\\": \"jugg\"\n    }\n    },\n    \"minimum-stability\": \"dev\"\n}\n\n```\n执行`composer install`\n\n就会生成一个自动加载文件\n\n![image](/photo/img/创建一个composer包/自动加载目录.png)\n\n然后我们就可以按照psr-4规范开发我们pear包了。\n\n\n\n## 测试\n\n我们可以在测试文件里引入autoload.php文件,这样就实现了自动加载。\n\n```php\nrequire './vendor/autoload.php';\n```\n\n这样就可以正常的测试了\n\n\n## 上传代码到gitlab或者github\n\n当我们开完的时候,需要将我们的代码上传到远程代码库。\n\n需要注意的事 一定不要讲.git文件上传。\n\n\n## 其他项目引入\n\n因为没有上传到pagelist,所以我们暂时是公司私有包。\n\n如果需要再项目里引入私有包,需要在项目的composer.json文件里添加。\n\n```\n\"jugg\": {\n        \"type\":\"package\",\n        \"package\": {\n          \"name\": \"jugg\",\n          \"version\": \"v1.1\",\n          \"source\": {\n            \"type\": \"git\",\n            \"url\": \"git@gitlab.renrenche.com:web/jugg.git\",\n            \"reference\": \"master\"\n          },\n          \"autoload\": {\n            \"psr-4\": {\n              \"Jugg\\\\\": \"jugg\"\n            }\n          }\n        }\n      }\n```\n\n完整文件:\n\n```\n{\n    \"name\": \"laravel/lumen\",\n    \"description\": \"The Laravel Lumen Framework.\",\n    \"keywords\": [\n        \"framework\",\n        \"laravel\",\n        \"lumen\"\n    ],\n    \"license\": \"MIT\",\n    \"type\": \"project\",\n    \"repositories\": {\n      \"packagist\": {\n        \"type\": \"composer\",\n        \"url\": \"https://packagist.phpcomposer.com\"\n      },\n        \"0\": {\n            \"type\": \"package\",\n            \"package\": {\n                \"name\": \"sdk/clusterproxy\",\n                \"version\": \"1.0.3\",\n                \"source\": {\n                    \"type\": \"git\",\n                    \"url\": \"git@gitlab.renrenche.com:sdk/clusterproxy.git\",\n                    \"reference\": \"master\"\n                },\n                \"autoload\": {\n                    \"psr-4\": {\n                        \"Cluster\\\\\": \"src/Cluster\"\n                    }\n                }\n            }\n        },\n      \"1\": {\n        \"type\": \"package\",\n        \"package\": {\n          \"name\": \"sdk/dingtalk-alarm-php-sdk\",\n          \"version\": \"1.0\",\n          \"source\": {\n            \"type\": \"git\",\n            \"url\": \"git@gitlab.renrenche.com:sdk/dingtalk-alarm-php-sdk.git\",\n            \"reference\": \"master\"\n          },\n          \"autoload\": {\n            \"psr-4\": {\n              \"Rrc\\\\\": \"src/Rrc/\"\n            }\n          }\n        }\n      },\n      \"2\": {\n        \"type\":\"package\",\n        \"package\": {\n          \"name\": \"sdk/prometheus-php-sdk\",\n          \"version\": \"1.0\",\n          \"source\": {\n            \"type\": \"git\",\n            \"url\": \"git@gitlab.renrenche.com:sdk/prometheus-php-sdk.git\",\n            \"reference\": \"master\"\n          },\n          \"autoload\": {\n            \"psr-4\": {\n              \"Rrc\\\\\": \"src/Rrc/\"\n            }\n          }\n        }\n      },\n      \"jugg\": {\n        \"type\":\"package\",\n        \"package\": {\n          \"name\": \"jugg\",\n          \"version\": \"v1.1\",\n          \"source\": {\n            \"type\": \"git\",\n            \"url\": \"git@gitlab.renrenche.com:web/jugg.git\",\n            \"reference\": \"master\"\n          },\n          \"autoload\": {\n            \"psr-4\": {\n              \"Jugg\\\\\": \"jugg\"\n            }\n          }\n        }\n      }\n    },\n    \"require\": {\n        \"php\": \">=7.0\",\n        \"laravel/lumen-framework\": \"5.5.*\",\n        \"vlucas/phpdotenv\": \"~2.2\",\n        \"guzzlehttp/guzzle\": \"^6.2\",\n        \"sdk/clusterproxy\": \"^1.0\",\n        \"illuminate/redis\": \"^5.3\",\n        \"peixinchen/mns\": \"^1.0\",\n        \"mockery/mockery\": \"^0.9.5\",\n        \"firebase/php-jwt\": \"^4.0\",\n        \"sdk/dingtalk-alarm-php-sdk\": \"^1.0\",\n        \"sdk/prometheus-php-sdk\": \"^1.0\",\n        \"predis/predis\": \"^1.1\",\n        \"solarium/solarium\": \"^3.8\",\n        \"mongodb/mongodb\": \"^1.3\",\n        \"jugg\": \"^1.0\"\n    },\n    \"require-dev\": {\n        \"fzaninotto/faker\": \"~1.4\",\n        \"phpunit/phpunit\": \"~6.0\",\n        \"mockery/mockery\": \"~0.9\",\n        \"phpstan/phpstan\": \"^0.9.2\"\n    },\n    \"autoload\": {\n        \"psr-4\": {\n            \"Rrc\\\\\": \"./\"\n        }\n    },\n    \"autoload-dev\": {\n        \"classmap\": [\n            \"tests/\",\n            \"database/\"\n        ]\n    },\n    \"scripts\": {\n        \"post-root-package-install\": [\n            \"php -r \\\"copy('.env.example', '.env');\\\"\"\n        ]\n    },\n    \"minimum-stability\": \"dev\",\n    \"prefer-stable\": true,\n    \"config\": {\n        \"optimize-autoloader\": true\n    }\n}\n\n```\n\n\n然后执行`composer require jugg<包名>` 就可以引入到项目里了。 ","source":"_posts/如何建立一个composer私有包.md","raw":"---\ntitle: 如何建立一个composer私有包\ndate: 2017-09-28 17:11:00\ntags: composer\ncategories: 工具\ntoc: true\n---\n\n\n最近发现分布式锁在很多项目都有所用到,所以想把之前完成的代码封装成pear包,供大家使用。\n但是发现自己对composer并不是很熟悉,所以学习一番,在此记录以防自己忘记。\n\n\n\n## 新建仓库\n\n$ git clone git@gitlab.renrenche.com:web/jugg.git\n$ cd jugg\n\n\n## conmposer 初始化\n\ncomposer init \n\n```\n//包名\nPackage name (<vendor>/<name>) [lijian/test_composer]: jugg/jugg\n//描述\nDescription []: 基于redis的分布式锁\n//作者\nAuthor [, n to skip]: Maxie lj <xiaolijian110@163.com>\n//最小稳定版本\nMinimum Stability []: dev\n//遵循协议\nLicense []: MIT\n\n//依赖\nWould you like to define your dependencies (require) interactively [yes]? yes\n\nSearch for a package: php\n\nEnter the version constraint to require (or leave blank to use the latest version):\nUsing version ^7.0 for php\n```\n\n\n生成composer.json文件\n\n```\n{\n    \"name\": \"jugg/jugg\",\n    \"description\": \"基于redis的分布式锁\",\n    \"type\": \"library\",\n    \"require\": {\n        \"php\": \"^7.0\"\n    },\n    \"require-dev\": {\n        \"php\": \"7\"\n    },\n    \"license\": \"MIT\",\n    \"authors\": [\n        {\n            \"name\": \"Maxie lj\",\n            \"email\": \"xiaolijian110@163.com\"\n        }\n    ],\n    \"minimum-stability\": \"dev\"\n}\n```\n\n## 生成自动加载（psr-4）\n\n在composer.json 文件里添加\n```\n{\n    \"name\": \"jugg/jugg\",\n    \"description\": \"基于redis的分布式锁\",\n    \"type\": \"library\",\n    \"license\": \"MIT\",\n    \"authors\": [\n        {\n            \"name\": \"Maxie lj\",\n            \"email\": \"xiaolijian110@163.com\"\n        }\n    ],\n    \"autoload\": {\n    \"psr-4\": {\n      \"Jugg\\\\\": \"jugg\"\n    }\n    },\n    \"minimum-stability\": \"dev\"\n}\n\n```\n执行`composer install`\n\n就会生成一个自动加载文件\n\n![image](/photo/img/创建一个composer包/自动加载目录.png)\n\n然后我们就可以按照psr-4规范开发我们pear包了。\n\n\n\n## 测试\n\n我们可以在测试文件里引入autoload.php文件,这样就实现了自动加载。\n\n```php\nrequire './vendor/autoload.php';\n```\n\n这样就可以正常的测试了\n\n\n## 上传代码到gitlab或者github\n\n当我们开完的时候,需要将我们的代码上传到远程代码库。\n\n需要注意的事 一定不要讲.git文件上传。\n\n\n## 其他项目引入\n\n因为没有上传到pagelist,所以我们暂时是公司私有包。\n\n如果需要再项目里引入私有包,需要在项目的composer.json文件里添加。\n\n```\n\"jugg\": {\n        \"type\":\"package\",\n        \"package\": {\n          \"name\": \"jugg\",\n          \"version\": \"v1.1\",\n          \"source\": {\n            \"type\": \"git\",\n            \"url\": \"git@gitlab.renrenche.com:web/jugg.git\",\n            \"reference\": \"master\"\n          },\n          \"autoload\": {\n            \"psr-4\": {\n              \"Jugg\\\\\": \"jugg\"\n            }\n          }\n        }\n      }\n```\n\n完整文件:\n\n```\n{\n    \"name\": \"laravel/lumen\",\n    \"description\": \"The Laravel Lumen Framework.\",\n    \"keywords\": [\n        \"framework\",\n        \"laravel\",\n        \"lumen\"\n    ],\n    \"license\": \"MIT\",\n    \"type\": \"project\",\n    \"repositories\": {\n      \"packagist\": {\n        \"type\": \"composer\",\n        \"url\": \"https://packagist.phpcomposer.com\"\n      },\n        \"0\": {\n            \"type\": \"package\",\n            \"package\": {\n                \"name\": \"sdk/clusterproxy\",\n                \"version\": \"1.0.3\",\n                \"source\": {\n                    \"type\": \"git\",\n                    \"url\": \"git@gitlab.renrenche.com:sdk/clusterproxy.git\",\n                    \"reference\": \"master\"\n                },\n                \"autoload\": {\n                    \"psr-4\": {\n                        \"Cluster\\\\\": \"src/Cluster\"\n                    }\n                }\n            }\n        },\n      \"1\": {\n        \"type\": \"package\",\n        \"package\": {\n          \"name\": \"sdk/dingtalk-alarm-php-sdk\",\n          \"version\": \"1.0\",\n          \"source\": {\n            \"type\": \"git\",\n            \"url\": \"git@gitlab.renrenche.com:sdk/dingtalk-alarm-php-sdk.git\",\n            \"reference\": \"master\"\n          },\n          \"autoload\": {\n            \"psr-4\": {\n              \"Rrc\\\\\": \"src/Rrc/\"\n            }\n          }\n        }\n      },\n      \"2\": {\n        \"type\":\"package\",\n        \"package\": {\n          \"name\": \"sdk/prometheus-php-sdk\",\n          \"version\": \"1.0\",\n          \"source\": {\n            \"type\": \"git\",\n            \"url\": \"git@gitlab.renrenche.com:sdk/prometheus-php-sdk.git\",\n            \"reference\": \"master\"\n          },\n          \"autoload\": {\n            \"psr-4\": {\n              \"Rrc\\\\\": \"src/Rrc/\"\n            }\n          }\n        }\n      },\n      \"jugg\": {\n        \"type\":\"package\",\n        \"package\": {\n          \"name\": \"jugg\",\n          \"version\": \"v1.1\",\n          \"source\": {\n            \"type\": \"git\",\n            \"url\": \"git@gitlab.renrenche.com:web/jugg.git\",\n            \"reference\": \"master\"\n          },\n          \"autoload\": {\n            \"psr-4\": {\n              \"Jugg\\\\\": \"jugg\"\n            }\n          }\n        }\n      }\n    },\n    \"require\": {\n        \"php\": \">=7.0\",\n        \"laravel/lumen-framework\": \"5.5.*\",\n        \"vlucas/phpdotenv\": \"~2.2\",\n        \"guzzlehttp/guzzle\": \"^6.2\",\n        \"sdk/clusterproxy\": \"^1.0\",\n        \"illuminate/redis\": \"^5.3\",\n        \"peixinchen/mns\": \"^1.0\",\n        \"mockery/mockery\": \"^0.9.5\",\n        \"firebase/php-jwt\": \"^4.0\",\n        \"sdk/dingtalk-alarm-php-sdk\": \"^1.0\",\n        \"sdk/prometheus-php-sdk\": \"^1.0\",\n        \"predis/predis\": \"^1.1\",\n        \"solarium/solarium\": \"^3.8\",\n        \"mongodb/mongodb\": \"^1.3\",\n        \"jugg\": \"^1.0\"\n    },\n    \"require-dev\": {\n        \"fzaninotto/faker\": \"~1.4\",\n        \"phpunit/phpunit\": \"~6.0\",\n        \"mockery/mockery\": \"~0.9\",\n        \"phpstan/phpstan\": \"^0.9.2\"\n    },\n    \"autoload\": {\n        \"psr-4\": {\n            \"Rrc\\\\\": \"./\"\n        }\n    },\n    \"autoload-dev\": {\n        \"classmap\": [\n            \"tests/\",\n            \"database/\"\n        ]\n    },\n    \"scripts\": {\n        \"post-root-package-install\": [\n            \"php -r \\\"copy('.env.example', '.env');\\\"\"\n        ]\n    },\n    \"minimum-stability\": \"dev\",\n    \"prefer-stable\": true,\n    \"config\": {\n        \"optimize-autoloader\": true\n    }\n}\n\n```\n\n\n然后执行`composer require jugg<包名>` 就可以引入到项目里了。 ","slug":"如何建立一个composer私有包","published":1,"updated":"2019-02-21T03:49:34.711Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjswwkdpq001rg7ww5s8mt2t7","content":"<p>最近发现分布式锁在很多项目都有所用到,所以想把之前完成的代码封装成pear包,供大家使用。<br>但是发现自己对composer并不是很熟悉,所以学习一番,在此记录以防自己忘记。</p>\n<h2 id=\"新建仓库\"><a href=\"#新建仓库\" class=\"headerlink\" title=\"新建仓库\"></a>新建仓库</h2><p>$ git clone git@gitlab.renrenche.com:web/jugg.git<br>$ cd jugg</p>\n<h2 id=\"conmposer-初始化\"><a href=\"#conmposer-初始化\" class=\"headerlink\" title=\"conmposer 初始化\"></a>conmposer 初始化</h2><p>composer init </p>\n<figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">//包名</div><div class=\"line\">Package name (&lt;vendor&gt;/&lt;name&gt;) [lijian/test_composer]: jugg/jugg<span class=\"comment\"></span></div><div class=\"line\">//描述</div><div class=\"line\">Description []: 基于redis的分布式锁<span class=\"comment\"></span></div><div class=\"line\">//作者</div><div class=\"line\">Author [, n <span class=\"built_in\">to</span> skip]: Maxie lj &lt;xiaolijian110@<span class=\"number\">163.</span>com&gt;<span class=\"comment\"></span></div><div class=\"line\">//最小稳定版本</div><div class=\"line\">Minimum Stability []: dev<span class=\"comment\"></span></div><div class=\"line\">//遵循协议</div><div class=\"line\">License []: MIT</div><div class=\"line\"><span class=\"comment\"></span></div><div class=\"line\">//依赖</div><div class=\"line\">Would you like <span class=\"built_in\">to</span> define your dependencies (<span class=\"built_in\">require</span>) interactively [yes]? yes</div><div class=\"line\"></div><div class=\"line\">Search <span class=\"keyword\">for</span> <span class=\"keyword\">a</span> package: php</div><div class=\"line\"></div><div class=\"line\">Enter <span class=\"keyword\">the</span> <span class=\"built_in\">version</span> constraint <span class=\"built_in\">to</span> <span class=\"built_in\">require</span> (<span class=\"keyword\">or</span> leave blank <span class=\"built_in\">to</span> use <span class=\"keyword\">the</span> latest <span class=\"built_in\">version</span>):</div><div class=\"line\">Using <span class=\"built_in\">version</span> ^<span class=\"number\">7.0</span> <span class=\"keyword\">for</span> php</div></pre></td></tr></table></figure>\n<p>生成composer.json文件</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"jugg/jugg\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"基于redis的分布式锁\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"library\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"require\"</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">\"php\"</span>: <span class=\"string\">\"^7.0\"</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">\"require-dev\"</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">\"php\"</span>: <span class=\"string\">\"7\"</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">\"license\"</span>: <span class=\"string\">\"MIT\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"authors\"</span>: [</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Maxie lj\"</span>,</div><div class=\"line\">            <span class=\"attr\">\"email\"</span>: <span class=\"string\">\"xiaolijian110@163.com\"</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    ],</div><div class=\"line\">    <span class=\"attr\">\"minimum-stability\"</span>: <span class=\"string\">\"dev\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"生成自动加载（psr-4）\"><a href=\"#生成自动加载（psr-4）\" class=\"headerlink\" title=\"生成自动加载（psr-4）\"></a>生成自动加载（psr-4）</h2><p>在composer.json 文件里添加<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"jugg/jugg\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"基于redis的分布式锁\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"library\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"license\"</span>: <span class=\"string\">\"MIT\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"authors\"</span>: [</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Maxie lj\"</span>,</div><div class=\"line\">            <span class=\"attr\">\"email\"</span>: <span class=\"string\">\"xiaolijian110@163.com\"</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    ],</div><div class=\"line\">    <span class=\"attr\">\"autoload\"</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">\"psr-4\"</span>: &#123;</div><div class=\"line\">      <span class=\"attr\">\"Jugg\\\\\"</span>: <span class=\"string\">\"jugg\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">\"minimum-stability\"</span>: <span class=\"string\">\"dev\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>执行<code>composer install</code></p>\n<p>就会生成一个自动加载文件</p>\n<p><img src=\"/photo/img/创建一个composer包/自动加载目录.png\" alt=\"image\"></p>\n<p>然后我们就可以按照psr-4规范开发我们pear包了。</p>\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><p>我们可以在测试文件里引入autoload.php文件,这样就实现了自动加载。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">require</span> <span class=\"string\">'./vendor/autoload.php'</span>;</div></pre></td></tr></table></figure>\n<p>这样就可以正常的测试了</p>\n<h2 id=\"上传代码到gitlab或者github\"><a href=\"#上传代码到gitlab或者github\" class=\"headerlink\" title=\"上传代码到gitlab或者github\"></a>上传代码到gitlab或者github</h2><p>当我们开完的时候,需要将我们的代码上传到远程代码库。</p>\n<p>需要注意的事 一定不要讲.git文件上传。</p>\n<h2 id=\"其他项目引入\"><a href=\"#其他项目引入\" class=\"headerlink\" title=\"其他项目引入\"></a>其他项目引入</h2><p>因为没有上传到pagelist,所以我们暂时是公司私有包。</p>\n<p>如果需要再项目里引入私有包,需要在项目的composer.json文件里添加。</p>\n<figure class=\"highlight xquery\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">\"jugg\"</span>: &#123;</div><div class=\"line\">        <span class=\"string\">\"type\"</span>:<span class=\"string\">\"package\"</span>,</div><div class=\"line\">        <span class=\"string\">\"package\"</span>: &#123;</div><div class=\"line\">          <span class=\"string\">\"name\"</span>: <span class=\"string\">\"jugg\"</span>,</div><div class=\"line\">          <span class=\"string\">\"version\"</span>: <span class=\"string\">\"v1.1\"</span>,</div><div class=\"line\">          <span class=\"string\">\"source\"</span>: &#123;</div><div class=\"line\">            <span class=\"string\">\"type\"</span>: <span class=\"string\">\"git\"</span>,</div><div class=\"line\">            <span class=\"string\">\"url\"</span>: <span class=\"string\">\"git@gitlab.renrenche.com:web/jugg.git\"</span>,</div><div class=\"line\">            <span class=\"string\">\"reference\"</span>: <span class=\"string\">\"master\"</span></div><div class=\"line\">          &#125;,</div><div class=\"line\">          <span class=\"string\">\"autoload\"</span>: &#123;</div><div class=\"line\">            <span class=\"string\">\"psr-4\"</span>: &#123;</div><div class=\"line\">              <span class=\"string\">\"Jugg\\\\\"</span>: <span class=\"string\">\"jugg\"</span></div><div class=\"line\">            &#125;</div><div class=\"line\">          &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div></pre></td></tr></table></figure>\n<p>完整文件:</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"laravel/lumen\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"The Laravel Lumen Framework.\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"keywords\"</span>: [</div><div class=\"line\">        <span class=\"string\">\"framework\"</span>,</div><div class=\"line\">        <span class=\"string\">\"laravel\"</span>,</div><div class=\"line\">        <span class=\"string\">\"lumen\"</span></div><div class=\"line\">    ],</div><div class=\"line\">    <span class=\"attr\">\"license\"</span>: <span class=\"string\">\"MIT\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"project\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"repositories\"</span>: &#123;</div><div class=\"line\">      <span class=\"attr\">\"packagist\"</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"composer\"</span>,</div><div class=\"line\">        <span class=\"attr\">\"url\"</span>: <span class=\"string\">\"https://packagist.phpcomposer.com\"</span></div><div class=\"line\">      &#125;,</div><div class=\"line\">        <span class=\"attr\">\"0\"</span>: &#123;</div><div class=\"line\">            <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"package\"</span>,</div><div class=\"line\">            <span class=\"attr\">\"package\"</span>: &#123;</div><div class=\"line\">                <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"sdk/clusterproxy\"</span>,</div><div class=\"line\">                <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"1.0.3\"</span>,</div><div class=\"line\">                <span class=\"attr\">\"source\"</span>: &#123;</div><div class=\"line\">                    <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"git\"</span>,</div><div class=\"line\">                    <span class=\"attr\">\"url\"</span>: <span class=\"string\">\"git@gitlab.renrenche.com:sdk/clusterproxy.git\"</span>,</div><div class=\"line\">                    <span class=\"attr\">\"reference\"</span>: <span class=\"string\">\"master\"</span></div><div class=\"line\">                &#125;,</div><div class=\"line\">                <span class=\"attr\">\"autoload\"</span>: &#123;</div><div class=\"line\">                    <span class=\"attr\">\"psr-4\"</span>: &#123;</div><div class=\"line\">                        <span class=\"attr\">\"Cluster\\\\\"</span>: <span class=\"string\">\"src/Cluster\"</span></div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;,</div><div class=\"line\">      <span class=\"attr\">\"1\"</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"package\"</span>,</div><div class=\"line\">        <span class=\"attr\">\"package\"</span>: &#123;</div><div class=\"line\">          <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"sdk/dingtalk-alarm-php-sdk\"</span>,</div><div class=\"line\">          <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"1.0\"</span>,</div><div class=\"line\">          <span class=\"attr\">\"source\"</span>: &#123;</div><div class=\"line\">            <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"git\"</span>,</div><div class=\"line\">            <span class=\"attr\">\"url\"</span>: <span class=\"string\">\"git@gitlab.renrenche.com:sdk/dingtalk-alarm-php-sdk.git\"</span>,</div><div class=\"line\">            <span class=\"attr\">\"reference\"</span>: <span class=\"string\">\"master\"</span></div><div class=\"line\">          &#125;,</div><div class=\"line\">          <span class=\"attr\">\"autoload\"</span>: &#123;</div><div class=\"line\">            <span class=\"attr\">\"psr-4\"</span>: &#123;</div><div class=\"line\">              <span class=\"attr\">\"Rrc\\\\\"</span>: <span class=\"string\">\"src/Rrc/\"</span></div><div class=\"line\">            &#125;</div><div class=\"line\">          &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;,</div><div class=\"line\">      <span class=\"attr\">\"2\"</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">\"type\"</span>:<span class=\"string\">\"package\"</span>,</div><div class=\"line\">        <span class=\"attr\">\"package\"</span>: &#123;</div><div class=\"line\">          <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"sdk/prometheus-php-sdk\"</span>,</div><div class=\"line\">          <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"1.0\"</span>,</div><div class=\"line\">          <span class=\"attr\">\"source\"</span>: &#123;</div><div class=\"line\">            <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"git\"</span>,</div><div class=\"line\">            <span class=\"attr\">\"url\"</span>: <span class=\"string\">\"git@gitlab.renrenche.com:sdk/prometheus-php-sdk.git\"</span>,</div><div class=\"line\">            <span class=\"attr\">\"reference\"</span>: <span class=\"string\">\"master\"</span></div><div class=\"line\">          &#125;,</div><div class=\"line\">          <span class=\"attr\">\"autoload\"</span>: &#123;</div><div class=\"line\">            <span class=\"attr\">\"psr-4\"</span>: &#123;</div><div class=\"line\">              <span class=\"attr\">\"Rrc\\\\\"</span>: <span class=\"string\">\"src/Rrc/\"</span></div><div class=\"line\">            &#125;</div><div class=\"line\">          &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;,</div><div class=\"line\">      <span class=\"attr\">\"jugg\"</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">\"type\"</span>:<span class=\"string\">\"package\"</span>,</div><div class=\"line\">        <span class=\"attr\">\"package\"</span>: &#123;</div><div class=\"line\">          <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"jugg\"</span>,</div><div class=\"line\">          <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"v1.1\"</span>,</div><div class=\"line\">          <span class=\"attr\">\"source\"</span>: &#123;</div><div class=\"line\">            <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"git\"</span>,</div><div class=\"line\">            <span class=\"attr\">\"url\"</span>: <span class=\"string\">\"git@gitlab.renrenche.com:web/jugg.git\"</span>,</div><div class=\"line\">            <span class=\"attr\">\"reference\"</span>: <span class=\"string\">\"master\"</span></div><div class=\"line\">          &#125;,</div><div class=\"line\">          <span class=\"attr\">\"autoload\"</span>: &#123;</div><div class=\"line\">            <span class=\"attr\">\"psr-4\"</span>: &#123;</div><div class=\"line\">              <span class=\"attr\">\"Jugg\\\\\"</span>: <span class=\"string\">\"jugg\"</span></div><div class=\"line\">            &#125;</div><div class=\"line\">          &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">\"require\"</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">\"php\"</span>: <span class=\"string\">\"&gt;=7.0\"</span>,</div><div class=\"line\">        <span class=\"attr\">\"laravel/lumen-framework\"</span>: <span class=\"string\">\"5.5.*\"</span>,</div><div class=\"line\">        <span class=\"attr\">\"vlucas/phpdotenv\"</span>: <span class=\"string\">\"~2.2\"</span>,</div><div class=\"line\">        <span class=\"attr\">\"guzzlehttp/guzzle\"</span>: <span class=\"string\">\"^6.2\"</span>,</div><div class=\"line\">        <span class=\"attr\">\"sdk/clusterproxy\"</span>: <span class=\"string\">\"^1.0\"</span>,</div><div class=\"line\">        <span class=\"attr\">\"illuminate/redis\"</span>: <span class=\"string\">\"^5.3\"</span>,</div><div class=\"line\">        <span class=\"attr\">\"peixinchen/mns\"</span>: <span class=\"string\">\"^1.0\"</span>,</div><div class=\"line\">        <span class=\"attr\">\"mockery/mockery\"</span>: <span class=\"string\">\"^0.9.5\"</span>,</div><div class=\"line\">        <span class=\"attr\">\"firebase/php-jwt\"</span>: <span class=\"string\">\"^4.0\"</span>,</div><div class=\"line\">        <span class=\"attr\">\"sdk/dingtalk-alarm-php-sdk\"</span>: <span class=\"string\">\"^1.0\"</span>,</div><div class=\"line\">        <span class=\"attr\">\"sdk/prometheus-php-sdk\"</span>: <span class=\"string\">\"^1.0\"</span>,</div><div class=\"line\">        <span class=\"attr\">\"predis/predis\"</span>: <span class=\"string\">\"^1.1\"</span>,</div><div class=\"line\">        <span class=\"attr\">\"solarium/solarium\"</span>: <span class=\"string\">\"^3.8\"</span>,</div><div class=\"line\">        <span class=\"attr\">\"mongodb/mongodb\"</span>: <span class=\"string\">\"^1.3\"</span>,</div><div class=\"line\">        <span class=\"attr\">\"jugg\"</span>: <span class=\"string\">\"^1.0\"</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">\"require-dev\"</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">\"fzaninotto/faker\"</span>: <span class=\"string\">\"~1.4\"</span>,</div><div class=\"line\">        <span class=\"attr\">\"phpunit/phpunit\"</span>: <span class=\"string\">\"~6.0\"</span>,</div><div class=\"line\">        <span class=\"attr\">\"mockery/mockery\"</span>: <span class=\"string\">\"~0.9\"</span>,</div><div class=\"line\">        <span class=\"attr\">\"phpstan/phpstan\"</span>: <span class=\"string\">\"^0.9.2\"</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">\"autoload\"</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">\"psr-4\"</span>: &#123;</div><div class=\"line\">            <span class=\"attr\">\"Rrc\\\\\"</span>: <span class=\"string\">\"./\"</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">\"autoload-dev\"</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">\"classmap\"</span>: [</div><div class=\"line\">            <span class=\"string\">\"tests/\"</span>,</div><div class=\"line\">            <span class=\"string\">\"database/\"</span></div><div class=\"line\">        ]</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">\"scripts\"</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">\"post-root-package-install\"</span>: [</div><div class=\"line\">            <span class=\"string\">\"php -r \\\"copy('.env.example', '.env');\\\"\"</span></div><div class=\"line\">        ]</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">\"minimum-stability\"</span>: <span class=\"string\">\"dev\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"prefer-stable\"</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">    <span class=\"attr\">\"config\"</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">\"optimize-autoloader\"</span>: <span class=\"literal\">true</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>然后执行<code>composer require jugg&lt;包名&gt;</code> 就可以引入到项目里了。 </p>\n","site":{"data":{}},"excerpt":"","more":"<p>最近发现分布式锁在很多项目都有所用到,所以想把之前完成的代码封装成pear包,供大家使用。<br>但是发现自己对composer并不是很熟悉,所以学习一番,在此记录以防自己忘记。</p>\n<h2 id=\"新建仓库\"><a href=\"#新建仓库\" class=\"headerlink\" title=\"新建仓库\"></a>新建仓库</h2><p>$ git clone git@gitlab.renrenche.com:web/jugg.git<br>$ cd jugg</p>\n<h2 id=\"conmposer-初始化\"><a href=\"#conmposer-初始化\" class=\"headerlink\" title=\"conmposer 初始化\"></a>conmposer 初始化</h2><p>composer init </p>\n<figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">//包名</div><div class=\"line\">Package name (&lt;vendor&gt;/&lt;name&gt;) [lijian/test_composer]: jugg/jugg<span class=\"comment\"></span></div><div class=\"line\">//描述</div><div class=\"line\">Description []: 基于redis的分布式锁<span class=\"comment\"></span></div><div class=\"line\">//作者</div><div class=\"line\">Author [, n <span class=\"built_in\">to</span> skip]: Maxie lj &lt;xiaolijian110@<span class=\"number\">163.</span>com&gt;<span class=\"comment\"></span></div><div class=\"line\">//最小稳定版本</div><div class=\"line\">Minimum Stability []: dev<span class=\"comment\"></span></div><div class=\"line\">//遵循协议</div><div class=\"line\">License []: MIT</div><div class=\"line\"><span class=\"comment\"></span></div><div class=\"line\">//依赖</div><div class=\"line\">Would you like <span class=\"built_in\">to</span> define your dependencies (<span class=\"built_in\">require</span>) interactively [yes]? yes</div><div class=\"line\"></div><div class=\"line\">Search <span class=\"keyword\">for</span> <span class=\"keyword\">a</span> package: php</div><div class=\"line\"></div><div class=\"line\">Enter <span class=\"keyword\">the</span> <span class=\"built_in\">version</span> constraint <span class=\"built_in\">to</span> <span class=\"built_in\">require</span> (<span class=\"keyword\">or</span> leave blank <span class=\"built_in\">to</span> use <span class=\"keyword\">the</span> latest <span class=\"built_in\">version</span>):</div><div class=\"line\">Using <span class=\"built_in\">version</span> ^<span class=\"number\">7.0</span> <span class=\"keyword\">for</span> php</div></pre></td></tr></table></figure>\n<p>生成composer.json文件</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"jugg/jugg\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"基于redis的分布式锁\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"library\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"require\"</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">\"php\"</span>: <span class=\"string\">\"^7.0\"</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">\"require-dev\"</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">\"php\"</span>: <span class=\"string\">\"7\"</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">\"license\"</span>: <span class=\"string\">\"MIT\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"authors\"</span>: [</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Maxie lj\"</span>,</div><div class=\"line\">            <span class=\"attr\">\"email\"</span>: <span class=\"string\">\"xiaolijian110@163.com\"</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    ],</div><div class=\"line\">    <span class=\"attr\">\"minimum-stability\"</span>: <span class=\"string\">\"dev\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"生成自动加载（psr-4）\"><a href=\"#生成自动加载（psr-4）\" class=\"headerlink\" title=\"生成自动加载（psr-4）\"></a>生成自动加载（psr-4）</h2><p>在composer.json 文件里添加<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"jugg/jugg\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"基于redis的分布式锁\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"library\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"license\"</span>: <span class=\"string\">\"MIT\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"authors\"</span>: [</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Maxie lj\"</span>,</div><div class=\"line\">            <span class=\"attr\">\"email\"</span>: <span class=\"string\">\"xiaolijian110@163.com\"</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    ],</div><div class=\"line\">    <span class=\"attr\">\"autoload\"</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">\"psr-4\"</span>: &#123;</div><div class=\"line\">      <span class=\"attr\">\"Jugg\\\\\"</span>: <span class=\"string\">\"jugg\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">\"minimum-stability\"</span>: <span class=\"string\">\"dev\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>执行<code>composer install</code></p>\n<p>就会生成一个自动加载文件</p>\n<p><img src=\"/photo/img/创建一个composer包/自动加载目录.png\" alt=\"image\"></p>\n<p>然后我们就可以按照psr-4规范开发我们pear包了。</p>\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><p>我们可以在测试文件里引入autoload.php文件,这样就实现了自动加载。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">require</span> <span class=\"string\">'./vendor/autoload.php'</span>;</div></pre></td></tr></table></figure>\n<p>这样就可以正常的测试了</p>\n<h2 id=\"上传代码到gitlab或者github\"><a href=\"#上传代码到gitlab或者github\" class=\"headerlink\" title=\"上传代码到gitlab或者github\"></a>上传代码到gitlab或者github</h2><p>当我们开完的时候,需要将我们的代码上传到远程代码库。</p>\n<p>需要注意的事 一定不要讲.git文件上传。</p>\n<h2 id=\"其他项目引入\"><a href=\"#其他项目引入\" class=\"headerlink\" title=\"其他项目引入\"></a>其他项目引入</h2><p>因为没有上传到pagelist,所以我们暂时是公司私有包。</p>\n<p>如果需要再项目里引入私有包,需要在项目的composer.json文件里添加。</p>\n<figure class=\"highlight xquery\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">\"jugg\"</span>: &#123;</div><div class=\"line\">        <span class=\"string\">\"type\"</span>:<span class=\"string\">\"package\"</span>,</div><div class=\"line\">        <span class=\"string\">\"package\"</span>: &#123;</div><div class=\"line\">          <span class=\"string\">\"name\"</span>: <span class=\"string\">\"jugg\"</span>,</div><div class=\"line\">          <span class=\"string\">\"version\"</span>: <span class=\"string\">\"v1.1\"</span>,</div><div class=\"line\">          <span class=\"string\">\"source\"</span>: &#123;</div><div class=\"line\">            <span class=\"string\">\"type\"</span>: <span class=\"string\">\"git\"</span>,</div><div class=\"line\">            <span class=\"string\">\"url\"</span>: <span class=\"string\">\"git@gitlab.renrenche.com:web/jugg.git\"</span>,</div><div class=\"line\">            <span class=\"string\">\"reference\"</span>: <span class=\"string\">\"master\"</span></div><div class=\"line\">          &#125;,</div><div class=\"line\">          <span class=\"string\">\"autoload\"</span>: &#123;</div><div class=\"line\">            <span class=\"string\">\"psr-4\"</span>: &#123;</div><div class=\"line\">              <span class=\"string\">\"Jugg\\\\\"</span>: <span class=\"string\">\"jugg\"</span></div><div class=\"line\">            &#125;</div><div class=\"line\">          &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div></pre></td></tr></table></figure>\n<p>完整文件:</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"laravel/lumen\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"The Laravel Lumen Framework.\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"keywords\"</span>: [</div><div class=\"line\">        <span class=\"string\">\"framework\"</span>,</div><div class=\"line\">        <span class=\"string\">\"laravel\"</span>,</div><div class=\"line\">        <span class=\"string\">\"lumen\"</span></div><div class=\"line\">    ],</div><div class=\"line\">    <span class=\"attr\">\"license\"</span>: <span class=\"string\">\"MIT\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"project\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"repositories\"</span>: &#123;</div><div class=\"line\">      <span class=\"attr\">\"packagist\"</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"composer\"</span>,</div><div class=\"line\">        <span class=\"attr\">\"url\"</span>: <span class=\"string\">\"https://packagist.phpcomposer.com\"</span></div><div class=\"line\">      &#125;,</div><div class=\"line\">        <span class=\"attr\">\"0\"</span>: &#123;</div><div class=\"line\">            <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"package\"</span>,</div><div class=\"line\">            <span class=\"attr\">\"package\"</span>: &#123;</div><div class=\"line\">                <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"sdk/clusterproxy\"</span>,</div><div class=\"line\">                <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"1.0.3\"</span>,</div><div class=\"line\">                <span class=\"attr\">\"source\"</span>: &#123;</div><div class=\"line\">                    <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"git\"</span>,</div><div class=\"line\">                    <span class=\"attr\">\"url\"</span>: <span class=\"string\">\"git@gitlab.renrenche.com:sdk/clusterproxy.git\"</span>,</div><div class=\"line\">                    <span class=\"attr\">\"reference\"</span>: <span class=\"string\">\"master\"</span></div><div class=\"line\">                &#125;,</div><div class=\"line\">                <span class=\"attr\">\"autoload\"</span>: &#123;</div><div class=\"line\">                    <span class=\"attr\">\"psr-4\"</span>: &#123;</div><div class=\"line\">                        <span class=\"attr\">\"Cluster\\\\\"</span>: <span class=\"string\">\"src/Cluster\"</span></div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;,</div><div class=\"line\">      <span class=\"attr\">\"1\"</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"package\"</span>,</div><div class=\"line\">        <span class=\"attr\">\"package\"</span>: &#123;</div><div class=\"line\">          <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"sdk/dingtalk-alarm-php-sdk\"</span>,</div><div class=\"line\">          <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"1.0\"</span>,</div><div class=\"line\">          <span class=\"attr\">\"source\"</span>: &#123;</div><div class=\"line\">            <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"git\"</span>,</div><div class=\"line\">            <span class=\"attr\">\"url\"</span>: <span class=\"string\">\"git@gitlab.renrenche.com:sdk/dingtalk-alarm-php-sdk.git\"</span>,</div><div class=\"line\">            <span class=\"attr\">\"reference\"</span>: <span class=\"string\">\"master\"</span></div><div class=\"line\">          &#125;,</div><div class=\"line\">          <span class=\"attr\">\"autoload\"</span>: &#123;</div><div class=\"line\">            <span class=\"attr\">\"psr-4\"</span>: &#123;</div><div class=\"line\">              <span class=\"attr\">\"Rrc\\\\\"</span>: <span class=\"string\">\"src/Rrc/\"</span></div><div class=\"line\">            &#125;</div><div class=\"line\">          &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;,</div><div class=\"line\">      <span class=\"attr\">\"2\"</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">\"type\"</span>:<span class=\"string\">\"package\"</span>,</div><div class=\"line\">        <span class=\"attr\">\"package\"</span>: &#123;</div><div class=\"line\">          <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"sdk/prometheus-php-sdk\"</span>,</div><div class=\"line\">          <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"1.0\"</span>,</div><div class=\"line\">          <span class=\"attr\">\"source\"</span>: &#123;</div><div class=\"line\">            <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"git\"</span>,</div><div class=\"line\">            <span class=\"attr\">\"url\"</span>: <span class=\"string\">\"git@gitlab.renrenche.com:sdk/prometheus-php-sdk.git\"</span>,</div><div class=\"line\">            <span class=\"attr\">\"reference\"</span>: <span class=\"string\">\"master\"</span></div><div class=\"line\">          &#125;,</div><div class=\"line\">          <span class=\"attr\">\"autoload\"</span>: &#123;</div><div class=\"line\">            <span class=\"attr\">\"psr-4\"</span>: &#123;</div><div class=\"line\">              <span class=\"attr\">\"Rrc\\\\\"</span>: <span class=\"string\">\"src/Rrc/\"</span></div><div class=\"line\">            &#125;</div><div class=\"line\">          &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;,</div><div class=\"line\">      <span class=\"attr\">\"jugg\"</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">\"type\"</span>:<span class=\"string\">\"package\"</span>,</div><div class=\"line\">        <span class=\"attr\">\"package\"</span>: &#123;</div><div class=\"line\">          <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"jugg\"</span>,</div><div class=\"line\">          <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"v1.1\"</span>,</div><div class=\"line\">          <span class=\"attr\">\"source\"</span>: &#123;</div><div class=\"line\">            <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"git\"</span>,</div><div class=\"line\">            <span class=\"attr\">\"url\"</span>: <span class=\"string\">\"git@gitlab.renrenche.com:web/jugg.git\"</span>,</div><div class=\"line\">            <span class=\"attr\">\"reference\"</span>: <span class=\"string\">\"master\"</span></div><div class=\"line\">          &#125;,</div><div class=\"line\">          <span class=\"attr\">\"autoload\"</span>: &#123;</div><div class=\"line\">            <span class=\"attr\">\"psr-4\"</span>: &#123;</div><div class=\"line\">              <span class=\"attr\">\"Jugg\\\\\"</span>: <span class=\"string\">\"jugg\"</span></div><div class=\"line\">            &#125;</div><div class=\"line\">          &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">\"require\"</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">\"php\"</span>: <span class=\"string\">\"&gt;=7.0\"</span>,</div><div class=\"line\">        <span class=\"attr\">\"laravel/lumen-framework\"</span>: <span class=\"string\">\"5.5.*\"</span>,</div><div class=\"line\">        <span class=\"attr\">\"vlucas/phpdotenv\"</span>: <span class=\"string\">\"~2.2\"</span>,</div><div class=\"line\">        <span class=\"attr\">\"guzzlehttp/guzzle\"</span>: <span class=\"string\">\"^6.2\"</span>,</div><div class=\"line\">        <span class=\"attr\">\"sdk/clusterproxy\"</span>: <span class=\"string\">\"^1.0\"</span>,</div><div class=\"line\">        <span class=\"attr\">\"illuminate/redis\"</span>: <span class=\"string\">\"^5.3\"</span>,</div><div class=\"line\">        <span class=\"attr\">\"peixinchen/mns\"</span>: <span class=\"string\">\"^1.0\"</span>,</div><div class=\"line\">        <span class=\"attr\">\"mockery/mockery\"</span>: <span class=\"string\">\"^0.9.5\"</span>,</div><div class=\"line\">        <span class=\"attr\">\"firebase/php-jwt\"</span>: <span class=\"string\">\"^4.0\"</span>,</div><div class=\"line\">        <span class=\"attr\">\"sdk/dingtalk-alarm-php-sdk\"</span>: <span class=\"string\">\"^1.0\"</span>,</div><div class=\"line\">        <span class=\"attr\">\"sdk/prometheus-php-sdk\"</span>: <span class=\"string\">\"^1.0\"</span>,</div><div class=\"line\">        <span class=\"attr\">\"predis/predis\"</span>: <span class=\"string\">\"^1.1\"</span>,</div><div class=\"line\">        <span class=\"attr\">\"solarium/solarium\"</span>: <span class=\"string\">\"^3.8\"</span>,</div><div class=\"line\">        <span class=\"attr\">\"mongodb/mongodb\"</span>: <span class=\"string\">\"^1.3\"</span>,</div><div class=\"line\">        <span class=\"attr\">\"jugg\"</span>: <span class=\"string\">\"^1.0\"</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">\"require-dev\"</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">\"fzaninotto/faker\"</span>: <span class=\"string\">\"~1.4\"</span>,</div><div class=\"line\">        <span class=\"attr\">\"phpunit/phpunit\"</span>: <span class=\"string\">\"~6.0\"</span>,</div><div class=\"line\">        <span class=\"attr\">\"mockery/mockery\"</span>: <span class=\"string\">\"~0.9\"</span>,</div><div class=\"line\">        <span class=\"attr\">\"phpstan/phpstan\"</span>: <span class=\"string\">\"^0.9.2\"</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">\"autoload\"</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">\"psr-4\"</span>: &#123;</div><div class=\"line\">            <span class=\"attr\">\"Rrc\\\\\"</span>: <span class=\"string\">\"./\"</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">\"autoload-dev\"</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">\"classmap\"</span>: [</div><div class=\"line\">            <span class=\"string\">\"tests/\"</span>,</div><div class=\"line\">            <span class=\"string\">\"database/\"</span></div><div class=\"line\">        ]</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">\"scripts\"</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">\"post-root-package-install\"</span>: [</div><div class=\"line\">            <span class=\"string\">\"php -r \\\"copy('.env.example', '.env');\\\"\"</span></div><div class=\"line\">        ]</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">\"minimum-stability\"</span>: <span class=\"string\">\"dev\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"prefer-stable\"</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">    <span class=\"attr\">\"config\"</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">\"optimize-autoloader\"</span>: <span class=\"literal\">true</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>然后执行<code>composer require jugg&lt;包名&gt;</code> 就可以引入到项目里了。 </p>\n"},{"title":"数据库-索引的使用优化","toc":true,"date":"2018-06-15T07:10:57.000Z","_content":"\n\n数据库索引使用的优化\n\n\n## 索引的选择\n\n### B-tree\n\n特点：\n- `B-tree`索引用`B+tree`实现，\n- 适合范围查找\n- 适合精确查找\n\n#### 使用注意\n创建索引（user_name,user_num,city）。\n- 全值匹配，查询条件包括user_name、user_num、city全部条件。\n- **最左匹配**，有限匹配最左索引列，上述所以可以匹配（user_name）、（user_name,user_num）、（user_name,user_num，city）这样的查询条件，但是如果我们使用（user_num,city）则无法使用用索引。如果使用(user_name,city)查询条件，则只会使用user_name索引，这就是最左匹配原则。\n- 可匹配列前缀，例如：user_name like 'li%'.\n- 可用作范围查询，例如(user_name= 'li' and user_num > 20)\n- **联合索引**，建立索引时，经常使用的列优先，辨识度高的索引放前边，长度小的优先。\n- **如果可以使用联合索引**，可以减少磁盘io\n- **不要建立过多的索引**，这样会影响mysql的写入和更新，尽量扩展建立联合索引，不要增加索引。\n- 如何可以使用前缀索引。\n\n#### 无法使用索引的情况\n- 无最左匹配列的情况，例如(user_num,city)这样的查询条件。\n- 使用列列后缀匹配，例如user_name like  '%jian'\n- 如果某一列使用范围查询，则后续列无法继续使用索引。例如 user_name = 'lijian' and user_num > 20 and city = '郑州'，city 列是无法使用索引的。\n- 查询时，不要对索引使用函数 例如:`SELECT * FROM user_test WHERE user_name = concat(user_name, 'fei')`\n- 索引不参与计算，如果索引列参与计算不走索引\n- 字符串与数字比较不走索引。\n\n\n\n## mysql不支持hash索引\n\n贴上一份官方文档：\n[mysql官方介绍inndb](https://dev.mysql.com/doc/refman/5.7/en/innodb-introduction.html)\n\n![image](/photo/img/数据库索引使用优化/picture1.png)\n\n很明显，mysql是不支持hash索引的。innodb内部会根据表的使用支持自适应hash索引优化，所以无法认为建立。\n当然建表语句还是有的，如下。\n查看一下表的建表语句：\n![image](/photo/img/数据库索引使用优化/picture2.png)\n这个时候可以发现，建立语句里还是有hash的。\n\n但是执行`show index from cm_deposit_order`可以返现其实使用hash的索引还是Btree.\n\n![image](/photo/img/数据库索引使用优化/picture3.png)\n\n","source":"_posts/数据库-索引使用优化.md","raw":"---\ntitle: 数据库-索引的使用优化\ntags: 数据库\ncategories: 数据库\ntoc: true\ndate: 2018-06-15 15:10:57\n---\n\n\n数据库索引使用的优化\n\n\n## 索引的选择\n\n### B-tree\n\n特点：\n- `B-tree`索引用`B+tree`实现，\n- 适合范围查找\n- 适合精确查找\n\n#### 使用注意\n创建索引（user_name,user_num,city）。\n- 全值匹配，查询条件包括user_name、user_num、city全部条件。\n- **最左匹配**，有限匹配最左索引列，上述所以可以匹配（user_name）、（user_name,user_num）、（user_name,user_num，city）这样的查询条件，但是如果我们使用（user_num,city）则无法使用用索引。如果使用(user_name,city)查询条件，则只会使用user_name索引，这就是最左匹配原则。\n- 可匹配列前缀，例如：user_name like 'li%'.\n- 可用作范围查询，例如(user_name= 'li' and user_num > 20)\n- **联合索引**，建立索引时，经常使用的列优先，辨识度高的索引放前边，长度小的优先。\n- **如果可以使用联合索引**，可以减少磁盘io\n- **不要建立过多的索引**，这样会影响mysql的写入和更新，尽量扩展建立联合索引，不要增加索引。\n- 如何可以使用前缀索引。\n\n#### 无法使用索引的情况\n- 无最左匹配列的情况，例如(user_num,city)这样的查询条件。\n- 使用列列后缀匹配，例如user_name like  '%jian'\n- 如果某一列使用范围查询，则后续列无法继续使用索引。例如 user_name = 'lijian' and user_num > 20 and city = '郑州'，city 列是无法使用索引的。\n- 查询时，不要对索引使用函数 例如:`SELECT * FROM user_test WHERE user_name = concat(user_name, 'fei')`\n- 索引不参与计算，如果索引列参与计算不走索引\n- 字符串与数字比较不走索引。\n\n\n\n## mysql不支持hash索引\n\n贴上一份官方文档：\n[mysql官方介绍inndb](https://dev.mysql.com/doc/refman/5.7/en/innodb-introduction.html)\n\n![image](/photo/img/数据库索引使用优化/picture1.png)\n\n很明显，mysql是不支持hash索引的。innodb内部会根据表的使用支持自适应hash索引优化，所以无法认为建立。\n当然建表语句还是有的，如下。\n查看一下表的建表语句：\n![image](/photo/img/数据库索引使用优化/picture2.png)\n这个时候可以发现，建立语句里还是有hash的。\n\n但是执行`show index from cm_deposit_order`可以返现其实使用hash的索引还是Btree.\n\n![image](/photo/img/数据库索引使用优化/picture3.png)\n\n","slug":"数据库-索引使用优化","published":1,"updated":"2019-02-21T03:49:34.713Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjswwkdpr001ug7wwdovbd2jh","content":"<p>数据库索引使用的优化</p>\n<h2 id=\"索引的选择\"><a href=\"#索引的选择\" class=\"headerlink\" title=\"索引的选择\"></a>索引的选择</h2><h3 id=\"B-tree\"><a href=\"#B-tree\" class=\"headerlink\" title=\"B-tree\"></a>B-tree</h3><p>特点：</p>\n<ul>\n<li><code>B-tree</code>索引用<code>B+tree</code>实现，</li>\n<li>适合范围查找</li>\n<li>适合精确查找</li>\n</ul>\n<h4 id=\"使用注意\"><a href=\"#使用注意\" class=\"headerlink\" title=\"使用注意\"></a>使用注意</h4><p>创建索引（user_name,user_num,city）。</p>\n<ul>\n<li>全值匹配，查询条件包括user_name、user_num、city全部条件。</li>\n<li><strong>最左匹配</strong>，有限匹配最左索引列，上述所以可以匹配（user_name）、（user_name,user_num）、（user_name,user_num，city）这样的查询条件，但是如果我们使用（user_num,city）则无法使用用索引。如果使用(user_name,city)查询条件，则只会使用user_name索引，这就是最左匹配原则。</li>\n<li>可匹配列前缀，例如：user_name like ‘li%’.</li>\n<li>可用作范围查询，例如(user_name= ‘li’ and user_num &gt; 20)</li>\n<li><strong>联合索引</strong>，建立索引时，经常使用的列优先，辨识度高的索引放前边，长度小的优先。</li>\n<li><strong>如果可以使用联合索引</strong>，可以减少磁盘io</li>\n<li><strong>不要建立过多的索引</strong>，这样会影响mysql的写入和更新，尽量扩展建立联合索引，不要增加索引。</li>\n<li>如何可以使用前缀索引。</li>\n</ul>\n<h4 id=\"无法使用索引的情况\"><a href=\"#无法使用索引的情况\" class=\"headerlink\" title=\"无法使用索引的情况\"></a>无法使用索引的情况</h4><ul>\n<li>无最左匹配列的情况，例如(user_num,city)这样的查询条件。</li>\n<li>使用列列后缀匹配，例如user_name like  ‘%jian’</li>\n<li>如果某一列使用范围查询，则后续列无法继续使用索引。例如 user_name = ‘lijian’ and user_num &gt; 20 and city = ‘郑州’，city 列是无法使用索引的。</li>\n<li>查询时，不要对索引使用函数 例如:<code>SELECT * FROM user_test WHERE user_name = concat(user_name, &#39;fei&#39;)</code></li>\n<li>索引不参与计算，如果索引列参与计算不走索引</li>\n<li>字符串与数字比较不走索引。</li>\n</ul>\n<h2 id=\"mysql不支持hash索引\"><a href=\"#mysql不支持hash索引\" class=\"headerlink\" title=\"mysql不支持hash索引\"></a>mysql不支持hash索引</h2><p>贴上一份官方文档：<br><a href=\"https://dev.mysql.com/doc/refman/5.7/en/innodb-introduction.html\" target=\"_blank\" rel=\"noopener\">mysql官方介绍inndb</a></p>\n<p><img src=\"/photo/img/数据库索引使用优化/picture1.png\" alt=\"image\"></p>\n<p>很明显，mysql是不支持hash索引的。innodb内部会根据表的使用支持自适应hash索引优化，所以无法认为建立。<br>当然建表语句还是有的，如下。<br>查看一下表的建表语句：<br><img src=\"/photo/img/数据库索引使用优化/picture2.png\" alt=\"image\"><br>这个时候可以发现，建立语句里还是有hash的。</p>\n<p>但是执行<code>show index from cm_deposit_order</code>可以返现其实使用hash的索引还是Btree.</p>\n<p><img src=\"/photo/img/数据库索引使用优化/picture3.png\" alt=\"image\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>数据库索引使用的优化</p>\n<h2 id=\"索引的选择\"><a href=\"#索引的选择\" class=\"headerlink\" title=\"索引的选择\"></a>索引的选择</h2><h3 id=\"B-tree\"><a href=\"#B-tree\" class=\"headerlink\" title=\"B-tree\"></a>B-tree</h3><p>特点：</p>\n<ul>\n<li><code>B-tree</code>索引用<code>B+tree</code>实现，</li>\n<li>适合范围查找</li>\n<li>适合精确查找</li>\n</ul>\n<h4 id=\"使用注意\"><a href=\"#使用注意\" class=\"headerlink\" title=\"使用注意\"></a>使用注意</h4><p>创建索引（user_name,user_num,city）。</p>\n<ul>\n<li>全值匹配，查询条件包括user_name、user_num、city全部条件。</li>\n<li><strong>最左匹配</strong>，有限匹配最左索引列，上述所以可以匹配（user_name）、（user_name,user_num）、（user_name,user_num，city）这样的查询条件，但是如果我们使用（user_num,city）则无法使用用索引。如果使用(user_name,city)查询条件，则只会使用user_name索引，这就是最左匹配原则。</li>\n<li>可匹配列前缀，例如：user_name like ‘li%’.</li>\n<li>可用作范围查询，例如(user_name= ‘li’ and user_num &gt; 20)</li>\n<li><strong>联合索引</strong>，建立索引时，经常使用的列优先，辨识度高的索引放前边，长度小的优先。</li>\n<li><strong>如果可以使用联合索引</strong>，可以减少磁盘io</li>\n<li><strong>不要建立过多的索引</strong>，这样会影响mysql的写入和更新，尽量扩展建立联合索引，不要增加索引。</li>\n<li>如何可以使用前缀索引。</li>\n</ul>\n<h4 id=\"无法使用索引的情况\"><a href=\"#无法使用索引的情况\" class=\"headerlink\" title=\"无法使用索引的情况\"></a>无法使用索引的情况</h4><ul>\n<li>无最左匹配列的情况，例如(user_num,city)这样的查询条件。</li>\n<li>使用列列后缀匹配，例如user_name like  ‘%jian’</li>\n<li>如果某一列使用范围查询，则后续列无法继续使用索引。例如 user_name = ‘lijian’ and user_num &gt; 20 and city = ‘郑州’，city 列是无法使用索引的。</li>\n<li>查询时，不要对索引使用函数 例如:<code>SELECT * FROM user_test WHERE user_name = concat(user_name, &#39;fei&#39;)</code></li>\n<li>索引不参与计算，如果索引列参与计算不走索引</li>\n<li>字符串与数字比较不走索引。</li>\n</ul>\n<h2 id=\"mysql不支持hash索引\"><a href=\"#mysql不支持hash索引\" class=\"headerlink\" title=\"mysql不支持hash索引\"></a>mysql不支持hash索引</h2><p>贴上一份官方文档：<br><a href=\"https://dev.mysql.com/doc/refman/5.7/en/innodb-introduction.html\" target=\"_blank\" rel=\"noopener\">mysql官方介绍inndb</a></p>\n<p><img src=\"/photo/img/数据库索引使用优化/picture1.png\" alt=\"image\"></p>\n<p>很明显，mysql是不支持hash索引的。innodb内部会根据表的使用支持自适应hash索引优化，所以无法认为建立。<br>当然建表语句还是有的，如下。<br>查看一下表的建表语句：<br><img src=\"/photo/img/数据库索引使用优化/picture2.png\" alt=\"image\"><br>这个时候可以发现，建立语句里还是有hash的。</p>\n<p>但是执行<code>show index from cm_deposit_order</code>可以返现其实使用hash的索引还是Btree.</p>\n<p><img src=\"/photo/img/数据库索引使用优化/picture3.png\" alt=\"image\"></p>\n"},{"title":"数据库-explain","date":"2018-05-29T07:18:29.000Z","toc":true,"_content":"\n## 官方文档\n使用`explain`可以分析sql的执行情况，定位慢sql的问题，从而可优化查询语句。\n`explain的官方文档`\n[explain的官方文档](https://dev.mysql.com/doc/refman/5.5/en/explain-output.html)\n\n## 使用方法\n使用方法，在select前加上**explain**即可。\n\n```\nexplain select * from cm_car_dealer where car_dealer id > 56\n```\n结果如图，会涉及到多个字段。\n\n![执行结果](/photo/img/数据库-explain/explain1.png)\n\n| 参数        | 结果   |  含义  |\n| --------   | -----:  | :----:  |\n| id     | 1 |   第几个执行的语句     |\n| select_type |   SIMPLE   |   查询类型）|\n| table        |    cm_car_dealer    |  表示从哪张表获取的数据  |\n| type        |    range    |  区间索引  |\n| possible_keys        |    PRIMARY    |  表示mysql可以使用哪些索引来查到这条记录  |\n| key        |    PRIMARY    |   实际使用到的索引。如果为NULL，则没有使用索引  |\n| key_len        |    4    |  主键是int型，所以为4.一般来说这个越小越好  |\n| ref        |        |  表示mysql可以使用哪些索引来查到这条记录  |\n| rows        |    159    |  表示需要遍历多少行才能找到当前数据 |\n| Extra        |    Using where    |  执行状态说明  |\n\n\n### id查询的序号\n表示当前查询的序号，其值为数字，表示sql执行的次序。\n\n#### id相同\n当id相同时，执行顺序是自上而下的。\n\n```\nexplain select * from cm_users,cm_car_dealer_certification where cm_users.id = cm_car_dealer_certification.car_dealer_id\n```\n![执行结果](/photo/img/数据库-explain/explain2.png)\n\n\n#### id不同\n当id不同时，id序号递增，id越大的越先被执行。\n\n```\nexplain select * from (select * from cm_users where id >14585) as a  where id = 23213\n```\n\n![执行结果](/photo/img/数据库-explain/explain3.png)\n\n#### 既有id相同，也有id不同的\n\n如果既有id相同，也有id不同的。首先按照id由大到小次序执行，如果id相同则执行顺序为由上到下。\n\n```\nexplain select d1.id,(select id from cm_users where id = 14585) as d2  from (select * from cm_users where id >1 and id < 200) as d1 ,cm_car_dealer_certification as d3 where d1.id =  d3.car_dealer_id\n```\n![执行结果](/photo/img/数据库-explain/explain4.png)\n\n### select_type\nselect_type表示查询的类型，主要有普通查询、联合查询、子查询和复杂查询。\n\n1.simple: 为建单的select查询，查询中不包含子查询或者union\n2.primary: 查询中包含任何复杂的子部分，最外层查询被标记为primary\n3.subquert: 在select或者where列表中包含了子查询\n4.derived: 在from列表中包含的子查询被标记为derived(衍生)，mysql或递归执行这些子查询，把结果放在临时表里\n5.union:若第二个select出现在union之后，责备标记为union;若union包含在from子句的查询中，外城select将被标记为derived\n6.union result :union的结果\n\n单独解释下第六项，如下。\n![执行结果](/photo/img/数据库-explain/explain5.png)\n\n### type\n\n官方全称为`type join`意思为**链接类型**，从字面意思很容易误解为两个表的链接，其实并不是这样的。这里更应该理解为数据库引擎查找表的一种方式。《高性能mysql》称呼它为访问类型。是sql查询优化中的一个很重要的指标。\n\nmysql5.7中type的类型达到了14种之多，这里只对常见的类型进行排序，结果有好到坏顺序为：\nsystem > count > eq_ref > ref > fulltext >ref_or_null > index_merge > unique_subquery > index_subquery > range > index > ALL\n\n好sql的标准是：至少达到range,最好达到ref。从最坏的一一开始介绍。\n\n#### ALL\n\n这既是传说的**扫全表**，例如 `select * from cm_users where 'name' = \"张三\"`，在`cm_users` 里`name`未建立索引，因为`name`不是唯一的，所以即使mysql找到了名为张三的记录，也不会停下来，因为无法确定时候还有叫张三的。这样就会扫全表全量的数据，并且不是走索引的扫全表。\n这种情况如果是为了展示全量的数据还好，如果是普通查询查出现了**all**,说明有很大优化空间。\n\n#### index\n\n通过索引**扫全表**，和上边比，半斤八俩，但是通过索引读取的数据有序。\n\n#### range\n\nrange指的是，通过索引有范围的扫描,mysqls在找到范围的开始结束节点时，会通过索引链表扫描指定范围的数据。\n\n#### ref\n\n指的是非唯一性索引扫描，扫描当前所选择索引的全量数据，找到满足条件的所有数据，这里是所有数据，因为索引是非唯一，所以mysql需要扫描全量的索引。\n\n例如\n```sql\nselect * from cm_users where created_at = '2019-01-29 00:00:00';\n```\n\n#### eq_ref\n\n唯一性索引查找，对于每个索引，表中只有一条记录与之匹配。常见于主键或唯一索引。\n\n```sql\nexplain select * from cm_users where ucid = 1083396207893549056\nexplain select * from cm_users where created_at='2019-01-11 00:12:39'\n```\n![执行结果](/photo/img/数据库-explain/explain6.png)\n![执行结果](/photo/img/数据库-explain/explain7.png)\n\n#### const  \n\neg:\n```sql\nexplain select * from cm_users where id  = 423358\n```\n\n![执行结果](/photo/img/数据库-explain/explain8.png)\n\n#### system\n\n当表里只有一条数据，或者子查询和父查询条件重复时会发生，一般不会出现。\n\neg:\n```sql\nexplain select * from (select * from cm_users where id = 14585) as a  where id = 14585\n```\n![执行结果](/photo/img/数据库-explain/explain9.png)\n\n### possible_keys\n查询涉及到的到的字段上如果有索引，则该索引将会被列出来，但不一定被查询实际使用。\n\n### key\n实际使用的索引，如果没有使用索引则为NULL。\n\n### key_len\n表示索引中使用的字节数，查询中使用的索引的长度（最大可能长度），并非实际使用长度，理论上长度越短越好。\n\n### ref \n显示索引的哪一列被使用了，有时候会是一个常量：表示哪些列或常量被用于用于查找索引列上的值\n\n![执行结果](/photo/img/数据库-explain/explain10.png)\n\n### row\n表示此次查询需要读取的行数。\n\n### extra \n\n#### Using filesort\n\n如果使用非索引列进行排序，则`extra`会展示`Using filesort`\neg:\n\n```sql\nexplain select * from cm_users where created_at < '2019-01-11 00:12:39' order by  `name` limit 5\n```\n\n![执行结果](/photo/img/数据库-explain/explain11.png)\n\n#### Using temporary\n\n如果mysql 使用临时表保存中间结果，\n\neg:\n```sql\nexplain select * from cm_users where created_at < '2019-01-11 00:12:39' group by  `name` limit 5\n```\n![执行结果](/photo/img/数据库-explain/explain12.png)\n\n#### Using index\n\n表次此次查询使用了覆盖索引，没有直接访问表的数据行，效率高。如果同时出现了 using where,表明索引用来执行索引键值的查找。如果没有出现using where 表明索引只是用来读取数据。\n\n> 覆盖索引：当前查询的数据在索引内都存在，则不需要访问数据表即可获取数据。如果要使用覆盖索引不可使用 `select *`,如果给所字段建立索引则会降低数据库写入更新速度。\n\n#### Using where\n使用了where过滤\n\n#### Using join buffer\n使用了链接缓存\n\n#### Impossible WHERE\nwhere永远为不可成立的条件时出现\n\n#### distinct\n优化distinct操作，在找到第一个匹配的数据时，停止对同样的值寻找。\n\n","source":"_posts/数据库-explain执行计划.md","raw":"---\ntitle: 数据库-explain\ndate: 2018-05-29 15:18:29\ntags: 数据库\ncategories: 算法\ntoc: true\n---\n\n## 官方文档\n使用`explain`可以分析sql的执行情况，定位慢sql的问题，从而可优化查询语句。\n`explain的官方文档`\n[explain的官方文档](https://dev.mysql.com/doc/refman/5.5/en/explain-output.html)\n\n## 使用方法\n使用方法，在select前加上**explain**即可。\n\n```\nexplain select * from cm_car_dealer where car_dealer id > 56\n```\n结果如图，会涉及到多个字段。\n\n![执行结果](/photo/img/数据库-explain/explain1.png)\n\n| 参数        | 结果   |  含义  |\n| --------   | -----:  | :----:  |\n| id     | 1 |   第几个执行的语句     |\n| select_type |   SIMPLE   |   查询类型）|\n| table        |    cm_car_dealer    |  表示从哪张表获取的数据  |\n| type        |    range    |  区间索引  |\n| possible_keys        |    PRIMARY    |  表示mysql可以使用哪些索引来查到这条记录  |\n| key        |    PRIMARY    |   实际使用到的索引。如果为NULL，则没有使用索引  |\n| key_len        |    4    |  主键是int型，所以为4.一般来说这个越小越好  |\n| ref        |        |  表示mysql可以使用哪些索引来查到这条记录  |\n| rows        |    159    |  表示需要遍历多少行才能找到当前数据 |\n| Extra        |    Using where    |  执行状态说明  |\n\n\n### id查询的序号\n表示当前查询的序号，其值为数字，表示sql执行的次序。\n\n#### id相同\n当id相同时，执行顺序是自上而下的。\n\n```\nexplain select * from cm_users,cm_car_dealer_certification where cm_users.id = cm_car_dealer_certification.car_dealer_id\n```\n![执行结果](/photo/img/数据库-explain/explain2.png)\n\n\n#### id不同\n当id不同时，id序号递增，id越大的越先被执行。\n\n```\nexplain select * from (select * from cm_users where id >14585) as a  where id = 23213\n```\n\n![执行结果](/photo/img/数据库-explain/explain3.png)\n\n#### 既有id相同，也有id不同的\n\n如果既有id相同，也有id不同的。首先按照id由大到小次序执行，如果id相同则执行顺序为由上到下。\n\n```\nexplain select d1.id,(select id from cm_users where id = 14585) as d2  from (select * from cm_users where id >1 and id < 200) as d1 ,cm_car_dealer_certification as d3 where d1.id =  d3.car_dealer_id\n```\n![执行结果](/photo/img/数据库-explain/explain4.png)\n\n### select_type\nselect_type表示查询的类型，主要有普通查询、联合查询、子查询和复杂查询。\n\n1.simple: 为建单的select查询，查询中不包含子查询或者union\n2.primary: 查询中包含任何复杂的子部分，最外层查询被标记为primary\n3.subquert: 在select或者where列表中包含了子查询\n4.derived: 在from列表中包含的子查询被标记为derived(衍生)，mysql或递归执行这些子查询，把结果放在临时表里\n5.union:若第二个select出现在union之后，责备标记为union;若union包含在from子句的查询中，外城select将被标记为derived\n6.union result :union的结果\n\n单独解释下第六项，如下。\n![执行结果](/photo/img/数据库-explain/explain5.png)\n\n### type\n\n官方全称为`type join`意思为**链接类型**，从字面意思很容易误解为两个表的链接，其实并不是这样的。这里更应该理解为数据库引擎查找表的一种方式。《高性能mysql》称呼它为访问类型。是sql查询优化中的一个很重要的指标。\n\nmysql5.7中type的类型达到了14种之多，这里只对常见的类型进行排序，结果有好到坏顺序为：\nsystem > count > eq_ref > ref > fulltext >ref_or_null > index_merge > unique_subquery > index_subquery > range > index > ALL\n\n好sql的标准是：至少达到range,最好达到ref。从最坏的一一开始介绍。\n\n#### ALL\n\n这既是传说的**扫全表**，例如 `select * from cm_users where 'name' = \"张三\"`，在`cm_users` 里`name`未建立索引，因为`name`不是唯一的，所以即使mysql找到了名为张三的记录，也不会停下来，因为无法确定时候还有叫张三的。这样就会扫全表全量的数据，并且不是走索引的扫全表。\n这种情况如果是为了展示全量的数据还好，如果是普通查询查出现了**all**,说明有很大优化空间。\n\n#### index\n\n通过索引**扫全表**，和上边比，半斤八俩，但是通过索引读取的数据有序。\n\n#### range\n\nrange指的是，通过索引有范围的扫描,mysqls在找到范围的开始结束节点时，会通过索引链表扫描指定范围的数据。\n\n#### ref\n\n指的是非唯一性索引扫描，扫描当前所选择索引的全量数据，找到满足条件的所有数据，这里是所有数据，因为索引是非唯一，所以mysql需要扫描全量的索引。\n\n例如\n```sql\nselect * from cm_users where created_at = '2019-01-29 00:00:00';\n```\n\n#### eq_ref\n\n唯一性索引查找，对于每个索引，表中只有一条记录与之匹配。常见于主键或唯一索引。\n\n```sql\nexplain select * from cm_users where ucid = 1083396207893549056\nexplain select * from cm_users where created_at='2019-01-11 00:12:39'\n```\n![执行结果](/photo/img/数据库-explain/explain6.png)\n![执行结果](/photo/img/数据库-explain/explain7.png)\n\n#### const  \n\neg:\n```sql\nexplain select * from cm_users where id  = 423358\n```\n\n![执行结果](/photo/img/数据库-explain/explain8.png)\n\n#### system\n\n当表里只有一条数据，或者子查询和父查询条件重复时会发生，一般不会出现。\n\neg:\n```sql\nexplain select * from (select * from cm_users where id = 14585) as a  where id = 14585\n```\n![执行结果](/photo/img/数据库-explain/explain9.png)\n\n### possible_keys\n查询涉及到的到的字段上如果有索引，则该索引将会被列出来，但不一定被查询实际使用。\n\n### key\n实际使用的索引，如果没有使用索引则为NULL。\n\n### key_len\n表示索引中使用的字节数，查询中使用的索引的长度（最大可能长度），并非实际使用长度，理论上长度越短越好。\n\n### ref \n显示索引的哪一列被使用了，有时候会是一个常量：表示哪些列或常量被用于用于查找索引列上的值\n\n![执行结果](/photo/img/数据库-explain/explain10.png)\n\n### row\n表示此次查询需要读取的行数。\n\n### extra \n\n#### Using filesort\n\n如果使用非索引列进行排序，则`extra`会展示`Using filesort`\neg:\n\n```sql\nexplain select * from cm_users where created_at < '2019-01-11 00:12:39' order by  `name` limit 5\n```\n\n![执行结果](/photo/img/数据库-explain/explain11.png)\n\n#### Using temporary\n\n如果mysql 使用临时表保存中间结果，\n\neg:\n```sql\nexplain select * from cm_users where created_at < '2019-01-11 00:12:39' group by  `name` limit 5\n```\n![执行结果](/photo/img/数据库-explain/explain12.png)\n\n#### Using index\n\n表次此次查询使用了覆盖索引，没有直接访问表的数据行，效率高。如果同时出现了 using where,表明索引用来执行索引键值的查找。如果没有出现using where 表明索引只是用来读取数据。\n\n> 覆盖索引：当前查询的数据在索引内都存在，则不需要访问数据表即可获取数据。如果要使用覆盖索引不可使用 `select *`,如果给所字段建立索引则会降低数据库写入更新速度。\n\n#### Using where\n使用了where过滤\n\n#### Using join buffer\n使用了链接缓存\n\n#### Impossible WHERE\nwhere永远为不可成立的条件时出现\n\n#### distinct\n优化distinct操作，在找到第一个匹配的数据时，停止对同样的值寻找。\n\n","slug":"数据库-explain执行计划","published":1,"updated":"2019-02-21T03:49:34.712Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjswwkdpt001zg7wwebujtktm","content":"<h2 id=\"官方文档\"><a href=\"#官方文档\" class=\"headerlink\" title=\"官方文档\"></a>官方文档</h2><p>使用<code>explain</code>可以分析sql的执行情况，定位慢sql的问题，从而可优化查询语句。<br><code>explain的官方文档</code><br><a href=\"https://dev.mysql.com/doc/refman/5.5/en/explain-output.html\" target=\"_blank\" rel=\"noopener\">explain的官方文档</a></p>\n<h2 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h2><p>使用方法，在select前加上<strong>explain</strong>即可。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">explain</span> <span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> cm_car_dealer <span class=\"keyword\">where</span> car_dealer <span class=\"keyword\">id</span> &gt; <span class=\"number\">56</span></div></pre></td></tr></table></figure>\n<p>结果如图，会涉及到多个字段。</p>\n<p><img src=\"/photo/img/数据库-explain/explain1.png\" alt=\"执行结果\"></p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th style=\"text-align:right\">结果</th>\n<th style=\"text-align:center\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>id</td>\n<td style=\"text-align:right\">1</td>\n<td style=\"text-align:center\">第几个执行的语句</td>\n</tr>\n<tr>\n<td>select_type</td>\n<td style=\"text-align:right\">SIMPLE</td>\n<td style=\"text-align:center\">查询类型）</td>\n</tr>\n<tr>\n<td>table</td>\n<td style=\"text-align:right\">cm_car_dealer</td>\n<td style=\"text-align:center\">表示从哪张表获取的数据</td>\n</tr>\n<tr>\n<td>type</td>\n<td style=\"text-align:right\">range</td>\n<td style=\"text-align:center\">区间索引</td>\n</tr>\n<tr>\n<td>possible_keys</td>\n<td style=\"text-align:right\">PRIMARY</td>\n<td style=\"text-align:center\">表示mysql可以使用哪些索引来查到这条记录</td>\n</tr>\n<tr>\n<td>key</td>\n<td style=\"text-align:right\">PRIMARY</td>\n<td style=\"text-align:center\">实际使用到的索引。如果为NULL，则没有使用索引</td>\n</tr>\n<tr>\n<td>key_len</td>\n<td style=\"text-align:right\">4</td>\n<td style=\"text-align:center\">主键是int型，所以为4.一般来说这个越小越好</td>\n</tr>\n<tr>\n<td>ref</td>\n<td style=\"text-align:right\"></td>\n<td style=\"text-align:center\">表示mysql可以使用哪些索引来查到这条记录</td>\n</tr>\n<tr>\n<td>rows</td>\n<td style=\"text-align:right\">159</td>\n<td style=\"text-align:center\">表示需要遍历多少行才能找到当前数据</td>\n</tr>\n<tr>\n<td>Extra</td>\n<td style=\"text-align:right\">Using where</td>\n<td style=\"text-align:center\">执行状态说明</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"id查询的序号\"><a href=\"#id查询的序号\" class=\"headerlink\" title=\"id查询的序号\"></a>id查询的序号</h3><p>表示当前查询的序号，其值为数字，表示sql执行的次序。</p>\n<h4 id=\"id相同\"><a href=\"#id相同\" class=\"headerlink\" title=\"id相同\"></a>id相同</h4><p>当id相同时，执行顺序是自上而下的。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">explain</span> <span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> cm_users,cm_car_dealer_certification <span class=\"keyword\">where</span> cm_users.id = cm_car_dealer_certification.car_dealer_id</div></pre></td></tr></table></figure>\n<p><img src=\"/photo/img/数据库-explain/explain2.png\" alt=\"执行结果\"></p>\n<h4 id=\"id不同\"><a href=\"#id不同\" class=\"headerlink\" title=\"id不同\"></a>id不同</h4><p>当id不同时，id序号递增，id越大的越先被执行。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">explain</span> <span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> (<span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> cm_users <span class=\"keyword\">where</span> <span class=\"keyword\">id</span> &gt;<span class=\"number\">14585</span>) <span class=\"keyword\">as</span> a  <span class=\"keyword\">where</span> <span class=\"keyword\">id</span> = <span class=\"number\">23213</span></div></pre></td></tr></table></figure>\n<p><img src=\"/photo/img/数据库-explain/explain3.png\" alt=\"执行结果\"></p>\n<h4 id=\"既有id相同，也有id不同的\"><a href=\"#既有id相同，也有id不同的\" class=\"headerlink\" title=\"既有id相同，也有id不同的\"></a>既有id相同，也有id不同的</h4><p>如果既有id相同，也有id不同的。首先按照id由大到小次序执行，如果id相同则执行顺序为由上到下。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">explain</span> <span class=\"keyword\">select</span> d1.id,(<span class=\"keyword\">select</span> <span class=\"keyword\">id</span> <span class=\"keyword\">from</span> cm_users <span class=\"keyword\">where</span> <span class=\"keyword\">id</span> = <span class=\"number\">14585</span>) <span class=\"keyword\">as</span> d2  <span class=\"keyword\">from</span> (<span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> cm_users <span class=\"keyword\">where</span> <span class=\"keyword\">id</span> &gt;<span class=\"number\">1</span> <span class=\"keyword\">and</span> <span class=\"keyword\">id</span> &lt; <span class=\"number\">200</span>) <span class=\"keyword\">as</span> d1 ,cm_car_dealer_certification <span class=\"keyword\">as</span> d3 <span class=\"keyword\">where</span> d1.id =  d3.car_dealer_id</div></pre></td></tr></table></figure>\n<p><img src=\"/photo/img/数据库-explain/explain4.png\" alt=\"执行结果\"></p>\n<h3 id=\"select-type\"><a href=\"#select-type\" class=\"headerlink\" title=\"select_type\"></a>select_type</h3><p>select_type表示查询的类型，主要有普通查询、联合查询、子查询和复杂查询。</p>\n<p>1.simple: 为建单的select查询，查询中不包含子查询或者union<br>2.primary: 查询中包含任何复杂的子部分，最外层查询被标记为primary<br>3.subquert: 在select或者where列表中包含了子查询<br>4.derived: 在from列表中包含的子查询被标记为derived(衍生)，mysql或递归执行这些子查询，把结果放在临时表里<br>5.union:若第二个select出现在union之后，责备标记为union;若union包含在from子句的查询中，外城select将被标记为derived<br>6.union result :union的结果</p>\n<p>单独解释下第六项，如下。<br><img src=\"/photo/img/数据库-explain/explain5.png\" alt=\"执行结果\"></p>\n<h3 id=\"type\"><a href=\"#type\" class=\"headerlink\" title=\"type\"></a>type</h3><p>官方全称为<code>type join</code>意思为<strong>链接类型</strong>，从字面意思很容易误解为两个表的链接，其实并不是这样的。这里更应该理解为数据库引擎查找表的一种方式。《高性能mysql》称呼它为访问类型。是sql查询优化中的一个很重要的指标。</p>\n<p>mysql5.7中type的类型达到了14种之多，这里只对常见的类型进行排序，结果有好到坏顺序为：<br>system &gt; count &gt; eq_ref &gt; ref &gt; fulltext &gt;ref_or_null &gt; index_merge &gt; unique_subquery &gt; index_subquery &gt; range &gt; index &gt; ALL</p>\n<p>好sql的标准是：至少达到range,最好达到ref。从最坏的一一开始介绍。</p>\n<h4 id=\"ALL\"><a href=\"#ALL\" class=\"headerlink\" title=\"ALL\"></a>ALL</h4><p>这既是传说的<strong>扫全表</strong>，例如 <code>select * from cm_users where &#39;name&#39; = &quot;张三&quot;</code>，在<code>cm_users</code> 里<code>name</code>未建立索引，因为<code>name</code>不是唯一的，所以即使mysql找到了名为张三的记录，也不会停下来，因为无法确定时候还有叫张三的。这样就会扫全表全量的数据，并且不是走索引的扫全表。<br>这种情况如果是为了展示全量的数据还好，如果是普通查询查出现了<strong>all</strong>,说明有很大优化空间。</p>\n<h4 id=\"index\"><a href=\"#index\" class=\"headerlink\" title=\"index\"></a>index</h4><p>通过索引<strong>扫全表</strong>，和上边比，半斤八俩，但是通过索引读取的数据有序。</p>\n<h4 id=\"range\"><a href=\"#range\" class=\"headerlink\" title=\"range\"></a>range</h4><p>range指的是，通过索引有范围的扫描,mysqls在找到范围的开始结束节点时，会通过索引链表扫描指定范围的数据。</p>\n<h4 id=\"ref\"><a href=\"#ref\" class=\"headerlink\" title=\"ref\"></a>ref</h4><p>指的是非唯一性索引扫描，扫描当前所选择索引的全量数据，找到满足条件的所有数据，这里是所有数据，因为索引是非唯一，所以mysql需要扫描全量的索引。</p>\n<p>例如<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> cm_users <span class=\"keyword\">where</span> created_at = <span class=\"string\">'2019-01-29 00:00:00'</span>;</div></pre></td></tr></table></figure></p>\n<h4 id=\"eq-ref\"><a href=\"#eq-ref\" class=\"headerlink\" title=\"eq_ref\"></a>eq_ref</h4><p>唯一性索引查找，对于每个索引，表中只有一条记录与之匹配。常见于主键或唯一索引。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">explain</span> <span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> cm_users <span class=\"keyword\">where</span> ucid = <span class=\"number\">1083396207893549056</span></div><div class=\"line\"><span class=\"keyword\">explain</span> <span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> cm_users <span class=\"keyword\">where</span> created_at=<span class=\"string\">'2019-01-11 00:12:39'</span></div></pre></td></tr></table></figure>\n<p><img src=\"/photo/img/数据库-explain/explain6.png\" alt=\"执行结果\"><br><img src=\"/photo/img/数据库-explain/explain7.png\" alt=\"执行结果\"></p>\n<h4 id=\"const\"><a href=\"#const\" class=\"headerlink\" title=\"const\"></a>const</h4><p>eg:<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">explain</span> <span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> cm_users <span class=\"keyword\">where</span> <span class=\"keyword\">id</span>  = <span class=\"number\">423358</span></div></pre></td></tr></table></figure></p>\n<p><img src=\"/photo/img/数据库-explain/explain8.png\" alt=\"执行结果\"></p>\n<h4 id=\"system\"><a href=\"#system\" class=\"headerlink\" title=\"system\"></a>system</h4><p>当表里只有一条数据，或者子查询和父查询条件重复时会发生，一般不会出现。</p>\n<p>eg:<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">explain</span> <span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> (<span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> cm_users <span class=\"keyword\">where</span> <span class=\"keyword\">id</span> = <span class=\"number\">14585</span>) <span class=\"keyword\">as</span> a  <span class=\"keyword\">where</span> <span class=\"keyword\">id</span> = <span class=\"number\">14585</span></div></pre></td></tr></table></figure></p>\n<p><img src=\"/photo/img/数据库-explain/explain9.png\" alt=\"执行结果\"></p>\n<h3 id=\"possible-keys\"><a href=\"#possible-keys\" class=\"headerlink\" title=\"possible_keys\"></a>possible_keys</h3><p>查询涉及到的到的字段上如果有索引，则该索引将会被列出来，但不一定被查询实际使用。</p>\n<h3 id=\"key\"><a href=\"#key\" class=\"headerlink\" title=\"key\"></a>key</h3><p>实际使用的索引，如果没有使用索引则为NULL。</p>\n<h3 id=\"key-len\"><a href=\"#key-len\" class=\"headerlink\" title=\"key_len\"></a>key_len</h3><p>表示索引中使用的字节数，查询中使用的索引的长度（最大可能长度），并非实际使用长度，理论上长度越短越好。</p>\n<h3 id=\"ref-1\"><a href=\"#ref-1\" class=\"headerlink\" title=\"ref\"></a>ref</h3><p>显示索引的哪一列被使用了，有时候会是一个常量：表示哪些列或常量被用于用于查找索引列上的值</p>\n<p><img src=\"/photo/img/数据库-explain/explain10.png\" alt=\"执行结果\"></p>\n<h3 id=\"row\"><a href=\"#row\" class=\"headerlink\" title=\"row\"></a>row</h3><p>表示此次查询需要读取的行数。</p>\n<h3 id=\"extra\"><a href=\"#extra\" class=\"headerlink\" title=\"extra\"></a>extra</h3><h4 id=\"Using-filesort\"><a href=\"#Using-filesort\" class=\"headerlink\" title=\"Using filesort\"></a>Using filesort</h4><p>如果使用非索引列进行排序，则<code>extra</code>会展示<code>Using filesort</code><br>eg:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">explain</span> <span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> cm_users <span class=\"keyword\">where</span> created_at &lt; <span class=\"string\">'2019-01-11 00:12:39'</span> <span class=\"keyword\">order</span> <span class=\"keyword\">by</span>  <span class=\"string\">`name`</span> <span class=\"keyword\">limit</span> <span class=\"number\">5</span></div></pre></td></tr></table></figure>\n<p><img src=\"/photo/img/数据库-explain/explain11.png\" alt=\"执行结果\"></p>\n<h4 id=\"Using-temporary\"><a href=\"#Using-temporary\" class=\"headerlink\" title=\"Using temporary\"></a>Using temporary</h4><p>如果mysql 使用临时表保存中间结果，</p>\n<p>eg:<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">explain</span> <span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> cm_users <span class=\"keyword\">where</span> created_at &lt; <span class=\"string\">'2019-01-11 00:12:39'</span> <span class=\"keyword\">group</span> <span class=\"keyword\">by</span>  <span class=\"string\">`name`</span> <span class=\"keyword\">limit</span> <span class=\"number\">5</span></div></pre></td></tr></table></figure></p>\n<p><img src=\"/photo/img/数据库-explain/explain12.png\" alt=\"执行结果\"></p>\n<h4 id=\"Using-index\"><a href=\"#Using-index\" class=\"headerlink\" title=\"Using index\"></a>Using index</h4><p>表次此次查询使用了覆盖索引，没有直接访问表的数据行，效率高。如果同时出现了 using where,表明索引用来执行索引键值的查找。如果没有出现using where 表明索引只是用来读取数据。</p>\n<blockquote>\n<p>覆盖索引：当前查询的数据在索引内都存在，则不需要访问数据表即可获取数据。如果要使用覆盖索引不可使用 <code>select *</code>,如果给所字段建立索引则会降低数据库写入更新速度。</p>\n</blockquote>\n<h4 id=\"Using-where\"><a href=\"#Using-where\" class=\"headerlink\" title=\"Using where\"></a>Using where</h4><p>使用了where过滤</p>\n<h4 id=\"Using-join-buffer\"><a href=\"#Using-join-buffer\" class=\"headerlink\" title=\"Using join buffer\"></a>Using join buffer</h4><p>使用了链接缓存</p>\n<h4 id=\"Impossible-WHERE\"><a href=\"#Impossible-WHERE\" class=\"headerlink\" title=\"Impossible WHERE\"></a>Impossible WHERE</h4><p>where永远为不可成立的条件时出现</p>\n<h4 id=\"distinct\"><a href=\"#distinct\" class=\"headerlink\" title=\"distinct\"></a>distinct</h4><p>优化distinct操作，在找到第一个匹配的数据时，停止对同样的值寻找。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"官方文档\"><a href=\"#官方文档\" class=\"headerlink\" title=\"官方文档\"></a>官方文档</h2><p>使用<code>explain</code>可以分析sql的执行情况，定位慢sql的问题，从而可优化查询语句。<br><code>explain的官方文档</code><br><a href=\"https://dev.mysql.com/doc/refman/5.5/en/explain-output.html\" target=\"_blank\" rel=\"noopener\">explain的官方文档</a></p>\n<h2 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h2><p>使用方法，在select前加上<strong>explain</strong>即可。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">explain</span> <span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> cm_car_dealer <span class=\"keyword\">where</span> car_dealer <span class=\"keyword\">id</span> &gt; <span class=\"number\">56</span></div></pre></td></tr></table></figure>\n<p>结果如图，会涉及到多个字段。</p>\n<p><img src=\"/photo/img/数据库-explain/explain1.png\" alt=\"执行结果\"></p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th style=\"text-align:right\">结果</th>\n<th style=\"text-align:center\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>id</td>\n<td style=\"text-align:right\">1</td>\n<td style=\"text-align:center\">第几个执行的语句</td>\n</tr>\n<tr>\n<td>select_type</td>\n<td style=\"text-align:right\">SIMPLE</td>\n<td style=\"text-align:center\">查询类型）</td>\n</tr>\n<tr>\n<td>table</td>\n<td style=\"text-align:right\">cm_car_dealer</td>\n<td style=\"text-align:center\">表示从哪张表获取的数据</td>\n</tr>\n<tr>\n<td>type</td>\n<td style=\"text-align:right\">range</td>\n<td style=\"text-align:center\">区间索引</td>\n</tr>\n<tr>\n<td>possible_keys</td>\n<td style=\"text-align:right\">PRIMARY</td>\n<td style=\"text-align:center\">表示mysql可以使用哪些索引来查到这条记录</td>\n</tr>\n<tr>\n<td>key</td>\n<td style=\"text-align:right\">PRIMARY</td>\n<td style=\"text-align:center\">实际使用到的索引。如果为NULL，则没有使用索引</td>\n</tr>\n<tr>\n<td>key_len</td>\n<td style=\"text-align:right\">4</td>\n<td style=\"text-align:center\">主键是int型，所以为4.一般来说这个越小越好</td>\n</tr>\n<tr>\n<td>ref</td>\n<td style=\"text-align:right\"></td>\n<td style=\"text-align:center\">表示mysql可以使用哪些索引来查到这条记录</td>\n</tr>\n<tr>\n<td>rows</td>\n<td style=\"text-align:right\">159</td>\n<td style=\"text-align:center\">表示需要遍历多少行才能找到当前数据</td>\n</tr>\n<tr>\n<td>Extra</td>\n<td style=\"text-align:right\">Using where</td>\n<td style=\"text-align:center\">执行状态说明</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"id查询的序号\"><a href=\"#id查询的序号\" class=\"headerlink\" title=\"id查询的序号\"></a>id查询的序号</h3><p>表示当前查询的序号，其值为数字，表示sql执行的次序。</p>\n<h4 id=\"id相同\"><a href=\"#id相同\" class=\"headerlink\" title=\"id相同\"></a>id相同</h4><p>当id相同时，执行顺序是自上而下的。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">explain</span> <span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> cm_users,cm_car_dealer_certification <span class=\"keyword\">where</span> cm_users.id = cm_car_dealer_certification.car_dealer_id</div></pre></td></tr></table></figure>\n<p><img src=\"/photo/img/数据库-explain/explain2.png\" alt=\"执行结果\"></p>\n<h4 id=\"id不同\"><a href=\"#id不同\" class=\"headerlink\" title=\"id不同\"></a>id不同</h4><p>当id不同时，id序号递增，id越大的越先被执行。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">explain</span> <span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> (<span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> cm_users <span class=\"keyword\">where</span> <span class=\"keyword\">id</span> &gt;<span class=\"number\">14585</span>) <span class=\"keyword\">as</span> a  <span class=\"keyword\">where</span> <span class=\"keyword\">id</span> = <span class=\"number\">23213</span></div></pre></td></tr></table></figure>\n<p><img src=\"/photo/img/数据库-explain/explain3.png\" alt=\"执行结果\"></p>\n<h4 id=\"既有id相同，也有id不同的\"><a href=\"#既有id相同，也有id不同的\" class=\"headerlink\" title=\"既有id相同，也有id不同的\"></a>既有id相同，也有id不同的</h4><p>如果既有id相同，也有id不同的。首先按照id由大到小次序执行，如果id相同则执行顺序为由上到下。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">explain</span> <span class=\"keyword\">select</span> d1.id,(<span class=\"keyword\">select</span> <span class=\"keyword\">id</span> <span class=\"keyword\">from</span> cm_users <span class=\"keyword\">where</span> <span class=\"keyword\">id</span> = <span class=\"number\">14585</span>) <span class=\"keyword\">as</span> d2  <span class=\"keyword\">from</span> (<span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> cm_users <span class=\"keyword\">where</span> <span class=\"keyword\">id</span> &gt;<span class=\"number\">1</span> <span class=\"keyword\">and</span> <span class=\"keyword\">id</span> &lt; <span class=\"number\">200</span>) <span class=\"keyword\">as</span> d1 ,cm_car_dealer_certification <span class=\"keyword\">as</span> d3 <span class=\"keyword\">where</span> d1.id =  d3.car_dealer_id</div></pre></td></tr></table></figure>\n<p><img src=\"/photo/img/数据库-explain/explain4.png\" alt=\"执行结果\"></p>\n<h3 id=\"select-type\"><a href=\"#select-type\" class=\"headerlink\" title=\"select_type\"></a>select_type</h3><p>select_type表示查询的类型，主要有普通查询、联合查询、子查询和复杂查询。</p>\n<p>1.simple: 为建单的select查询，查询中不包含子查询或者union<br>2.primary: 查询中包含任何复杂的子部分，最外层查询被标记为primary<br>3.subquert: 在select或者where列表中包含了子查询<br>4.derived: 在from列表中包含的子查询被标记为derived(衍生)，mysql或递归执行这些子查询，把结果放在临时表里<br>5.union:若第二个select出现在union之后，责备标记为union;若union包含在from子句的查询中，外城select将被标记为derived<br>6.union result :union的结果</p>\n<p>单独解释下第六项，如下。<br><img src=\"/photo/img/数据库-explain/explain5.png\" alt=\"执行结果\"></p>\n<h3 id=\"type\"><a href=\"#type\" class=\"headerlink\" title=\"type\"></a>type</h3><p>官方全称为<code>type join</code>意思为<strong>链接类型</strong>，从字面意思很容易误解为两个表的链接，其实并不是这样的。这里更应该理解为数据库引擎查找表的一种方式。《高性能mysql》称呼它为访问类型。是sql查询优化中的一个很重要的指标。</p>\n<p>mysql5.7中type的类型达到了14种之多，这里只对常见的类型进行排序，结果有好到坏顺序为：<br>system &gt; count &gt; eq_ref &gt; ref &gt; fulltext &gt;ref_or_null &gt; index_merge &gt; unique_subquery &gt; index_subquery &gt; range &gt; index &gt; ALL</p>\n<p>好sql的标准是：至少达到range,最好达到ref。从最坏的一一开始介绍。</p>\n<h4 id=\"ALL\"><a href=\"#ALL\" class=\"headerlink\" title=\"ALL\"></a>ALL</h4><p>这既是传说的<strong>扫全表</strong>，例如 <code>select * from cm_users where &#39;name&#39; = &quot;张三&quot;</code>，在<code>cm_users</code> 里<code>name</code>未建立索引，因为<code>name</code>不是唯一的，所以即使mysql找到了名为张三的记录，也不会停下来，因为无法确定时候还有叫张三的。这样就会扫全表全量的数据，并且不是走索引的扫全表。<br>这种情况如果是为了展示全量的数据还好，如果是普通查询查出现了<strong>all</strong>,说明有很大优化空间。</p>\n<h4 id=\"index\"><a href=\"#index\" class=\"headerlink\" title=\"index\"></a>index</h4><p>通过索引<strong>扫全表</strong>，和上边比，半斤八俩，但是通过索引读取的数据有序。</p>\n<h4 id=\"range\"><a href=\"#range\" class=\"headerlink\" title=\"range\"></a>range</h4><p>range指的是，通过索引有范围的扫描,mysqls在找到范围的开始结束节点时，会通过索引链表扫描指定范围的数据。</p>\n<h4 id=\"ref\"><a href=\"#ref\" class=\"headerlink\" title=\"ref\"></a>ref</h4><p>指的是非唯一性索引扫描，扫描当前所选择索引的全量数据，找到满足条件的所有数据，这里是所有数据，因为索引是非唯一，所以mysql需要扫描全量的索引。</p>\n<p>例如<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> cm_users <span class=\"keyword\">where</span> created_at = <span class=\"string\">'2019-01-29 00:00:00'</span>;</div></pre></td></tr></table></figure></p>\n<h4 id=\"eq-ref\"><a href=\"#eq-ref\" class=\"headerlink\" title=\"eq_ref\"></a>eq_ref</h4><p>唯一性索引查找，对于每个索引，表中只有一条记录与之匹配。常见于主键或唯一索引。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">explain</span> <span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> cm_users <span class=\"keyword\">where</span> ucid = <span class=\"number\">1083396207893549056</span></div><div class=\"line\"><span class=\"keyword\">explain</span> <span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> cm_users <span class=\"keyword\">where</span> created_at=<span class=\"string\">'2019-01-11 00:12:39'</span></div></pre></td></tr></table></figure>\n<p><img src=\"/photo/img/数据库-explain/explain6.png\" alt=\"执行结果\"><br><img src=\"/photo/img/数据库-explain/explain7.png\" alt=\"执行结果\"></p>\n<h4 id=\"const\"><a href=\"#const\" class=\"headerlink\" title=\"const\"></a>const</h4><p>eg:<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">explain</span> <span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> cm_users <span class=\"keyword\">where</span> <span class=\"keyword\">id</span>  = <span class=\"number\">423358</span></div></pre></td></tr></table></figure></p>\n<p><img src=\"/photo/img/数据库-explain/explain8.png\" alt=\"执行结果\"></p>\n<h4 id=\"system\"><a href=\"#system\" class=\"headerlink\" title=\"system\"></a>system</h4><p>当表里只有一条数据，或者子查询和父查询条件重复时会发生，一般不会出现。</p>\n<p>eg:<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">explain</span> <span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> (<span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> cm_users <span class=\"keyword\">where</span> <span class=\"keyword\">id</span> = <span class=\"number\">14585</span>) <span class=\"keyword\">as</span> a  <span class=\"keyword\">where</span> <span class=\"keyword\">id</span> = <span class=\"number\">14585</span></div></pre></td></tr></table></figure></p>\n<p><img src=\"/photo/img/数据库-explain/explain9.png\" alt=\"执行结果\"></p>\n<h3 id=\"possible-keys\"><a href=\"#possible-keys\" class=\"headerlink\" title=\"possible_keys\"></a>possible_keys</h3><p>查询涉及到的到的字段上如果有索引，则该索引将会被列出来，但不一定被查询实际使用。</p>\n<h3 id=\"key\"><a href=\"#key\" class=\"headerlink\" title=\"key\"></a>key</h3><p>实际使用的索引，如果没有使用索引则为NULL。</p>\n<h3 id=\"key-len\"><a href=\"#key-len\" class=\"headerlink\" title=\"key_len\"></a>key_len</h3><p>表示索引中使用的字节数，查询中使用的索引的长度（最大可能长度），并非实际使用长度，理论上长度越短越好。</p>\n<h3 id=\"ref-1\"><a href=\"#ref-1\" class=\"headerlink\" title=\"ref\"></a>ref</h3><p>显示索引的哪一列被使用了，有时候会是一个常量：表示哪些列或常量被用于用于查找索引列上的值</p>\n<p><img src=\"/photo/img/数据库-explain/explain10.png\" alt=\"执行结果\"></p>\n<h3 id=\"row\"><a href=\"#row\" class=\"headerlink\" title=\"row\"></a>row</h3><p>表示此次查询需要读取的行数。</p>\n<h3 id=\"extra\"><a href=\"#extra\" class=\"headerlink\" title=\"extra\"></a>extra</h3><h4 id=\"Using-filesort\"><a href=\"#Using-filesort\" class=\"headerlink\" title=\"Using filesort\"></a>Using filesort</h4><p>如果使用非索引列进行排序，则<code>extra</code>会展示<code>Using filesort</code><br>eg:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">explain</span> <span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> cm_users <span class=\"keyword\">where</span> created_at &lt; <span class=\"string\">'2019-01-11 00:12:39'</span> <span class=\"keyword\">order</span> <span class=\"keyword\">by</span>  <span class=\"string\">`name`</span> <span class=\"keyword\">limit</span> <span class=\"number\">5</span></div></pre></td></tr></table></figure>\n<p><img src=\"/photo/img/数据库-explain/explain11.png\" alt=\"执行结果\"></p>\n<h4 id=\"Using-temporary\"><a href=\"#Using-temporary\" class=\"headerlink\" title=\"Using temporary\"></a>Using temporary</h4><p>如果mysql 使用临时表保存中间结果，</p>\n<p>eg:<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">explain</span> <span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> cm_users <span class=\"keyword\">where</span> created_at &lt; <span class=\"string\">'2019-01-11 00:12:39'</span> <span class=\"keyword\">group</span> <span class=\"keyword\">by</span>  <span class=\"string\">`name`</span> <span class=\"keyword\">limit</span> <span class=\"number\">5</span></div></pre></td></tr></table></figure></p>\n<p><img src=\"/photo/img/数据库-explain/explain12.png\" alt=\"执行结果\"></p>\n<h4 id=\"Using-index\"><a href=\"#Using-index\" class=\"headerlink\" title=\"Using index\"></a>Using index</h4><p>表次此次查询使用了覆盖索引，没有直接访问表的数据行，效率高。如果同时出现了 using where,表明索引用来执行索引键值的查找。如果没有出现using where 表明索引只是用来读取数据。</p>\n<blockquote>\n<p>覆盖索引：当前查询的数据在索引内都存在，则不需要访问数据表即可获取数据。如果要使用覆盖索引不可使用 <code>select *</code>,如果给所字段建立索引则会降低数据库写入更新速度。</p>\n</blockquote>\n<h4 id=\"Using-where\"><a href=\"#Using-where\" class=\"headerlink\" title=\"Using where\"></a>Using where</h4><p>使用了where过滤</p>\n<h4 id=\"Using-join-buffer\"><a href=\"#Using-join-buffer\" class=\"headerlink\" title=\"Using join buffer\"></a>Using join buffer</h4><p>使用了链接缓存</p>\n<h4 id=\"Impossible-WHERE\"><a href=\"#Impossible-WHERE\" class=\"headerlink\" title=\"Impossible WHERE\"></a>Impossible WHERE</h4><p>where永远为不可成立的条件时出现</p>\n<h4 id=\"distinct\"><a href=\"#distinct\" class=\"headerlink\" title=\"distinct\"></a>distinct</h4><p>优化distinct操作，在找到第一个匹配的数据时，停止对同样的值寻找。</p>\n"},{"title":"数据库-mysql索引简介","toc":true,"date":"2018-04-29T03:10:15.000Z","_content":"\n\n## 摘要\n因为各个数据库的索引机制不尽相同，在此涉及到mysql的两种索引`b-tree`、`hash`。\n\n> 这里所指的所有数据库都是指mysql.\n\n## 索引的本质\n\nmysql官方文档对索引的描述：`索引`是帮助mysql高效获取数据的数据结构。so 索引的本质是`数据结构`。涉及到查找的时候肯定避不开查找算法，例如`顺序查找`、`二分查找`。随着人们对查找性能要求的越来越高就延伸出来了基于树的查找，例如`二叉树的查找`。当然即使是`二叉树的查找`也无法满足现在程序对于查找性能的要求，进而出现了基于`b-tree`、`hash`的查找。可以分析下查找的演变过程，所有的查找都是基于一定的数据结构，例如最开始`顺序查找`基于链表、`二分查找`基于有序链表、`二叉树查找`基于树。这种为了满足这种**高效小的查询效率**所衍伸出来的数据结构就是**索引**。\n\n## 索引的选择\n\n基于树的查找效率由树的深度决定，所以二叉树是无法满足查询速度的要求，mysql的索引主要使用 `b+tree`。\n\n### b-tree\n\n`b-树`（由b-tree翻译过来）也就是b树，是一种路自平衡搜索树。如果我们以一个二元组来表示索引的内容的话（[key,val]）,key表示键值，val表示数据（地址或者主键），则`b-树`有以下特点。\n\n> 树的度的定义：每个节点包含子树的个数。\n#### 特点\n- 所有的键值分布在整个树种（包括叶子节点和非叶子节点）\n- 任何**key**只会出现一次\n- 所有的叶子节点必须在同一层次，也就是他们具有相同的深度。\n- 每个节点里的关键字是有序的（一个结点中的key从左至右非递减排列），当前节点的左右两个指针指向的节点，左指针指向的节点的key小于当前节点，右指针指向的节点的key大于当前节点。\n- d>=2,每个节点有n-1个`key` 和n个指针，d<=n<=2d。\n\n假设b-tree的度为d,高为h，其索引个数为N。则`h=logd((n+1)/2)`，查找一条数据的渐进复杂度为`logdn`。由于索引数量n和其高度h程对数关系（实际使用中d一般会大于100），所以即使是key很大，查询效率也会很快，分析可以的出b-tree查找一个最多需要**h-1**次磁盘io。\n举个栗子一个度为1001，高度为2（不包含根节点）的b-tree可以存储超高10亿的数据，且每个节点如果使用二分查找的话，只需要三次查找就可以查询到所需的数据。\n\n#### 结构图\n![image](/photo/img/数据库索引/b-tree.png)\n\n### b+tree\n\nb+tree是是b-tree的升级版，所有的data值存在叶子节点。\n\n#### 特点\n- b+tree树只有叶子节点包含data，非叶子节点只存key与指针\n- 所有的叶子节点为一个链表\n\n#### 结构图\n![image](/photo/img/数据库索引/b+tree.png)\n\n## 索引原理\n\n- 聚簇索引 ：索引和文件为同一个文件。\n- 非聚簇索引： 索引和数据文件分开的索引。\n\nMyISAM 和 InnoDb都使用`b+tree`索引结构，但是底层确实不一样的，MyISAM采用的事非聚簇索引，而innoDB采用的是聚簇索引。\n\n### MyISAM\nMyISAM索引原理 : 采用的费聚簇索引 My-ISAM myi索引文件和myd数据文件分离，索引文件值保存数据记录和指针地址。叶子节点data存执指向数据记录的地址。\n\n![image](/photo/img/数据库索引/MyISAM.png)\n\n### InnoDB\n\n#### 结构\n\nInnoDB物理存储文件结构说明：\nInnoDB以表空间Tablespace(idb文件)结构进行组织，每个Tablespace包含多个Segment段（Segment 分为为叶子节点和飞叶子节点Segment），一个Segment段包含多个Extent,一个Extent占用1M空间且包含64page,innoDB b+tree一个逻辑节点就分配一个屋里Page,一个节点一次io操作。一个page里包含d个Row行数据，行数据包\n每一个索引是一个b+tree，一个节点是=一个page(16k)。数据会按照16kb切片为page并编号，标号可以通过偏移量（16k*n）找到文件存储地址。且叶子节点为双向链表，数据按主键索引聚簇索，二级索引叶子节点存储主键值，除了覆盖索引其他二级索引都通过主键查找数据。\n\n![image](/photo/img/数据库索引/InnoDB.png)\n\n#### 原理\n\nInnoDB采用聚簇索引，存储于idb文件里，表数据本身就是主索引，相邻的索引临近存储。叶节点data域保存了完整的数据记录（data(除主键外所有数据）+key(主键)）。也是由于这种方式InnoDB必须建指定主键，如通过没有指定主键则mysql自动选择一个可以唯一表示数据记录的列作为主键。如果这样的列不存在，mysql自动为表生成一个隐含字段（6个字节长整型）作为主键。\n\n> mysql所有的辅助索引data存储皆为主键值\n\n结构图\n![image](/photo/img/数据库索引/InnoDB2.png)\n\n#### 查询流程\n\n1.索引精确查找\n确定定位条件, 找到根节点Page No, 根节点读到内存, 逐层向下查找, 读取叶子节点Page,通过 二分查找找到记录或未命中。（select * from user_info where id = 23）\n\n![image](/photo/img/数据库索引/精确查找.png)\n\n2.索引范围查找\n读取根节点至内存, 确定索引定位条件id=18, 找到满足条件第一个叶节点\n, 顺序扫描所有结果, 直到终止条件满足id >=22 （select * from user_info where id >= 18 and id < 22）\n![image](/photo/img/数据库索引/范围查找.png)\n\n3.全表扫描\n直接读取叶节点头结点， 顺序扫描， 返回符合条件记录， 到最终节点结束\n（select * from user_info where name = 'abc'）\n\n![image](/photo/img/数据库索引/扫全表.png)\n\n4.二级索引查找 \n建立索引\nCreate table table_x(int id primary key, varchar(64) name,key sec_index(name) )\n\n如果执行`select * from table_x where name = 'xxxx'`\n\n![image](/photo/img/数据库索引/二级索引查找.png)\n\n## 总结\n### mysql为什么选择b+tree\n\n内存读取和存盘读取不在一个数量级，所以一般内存读取相较于与磁盘io可以忽略不计。一般来说，索引的大小是无法全部存在ram里的so衡量一个索引的优劣可以以磁盘io次数来衡量。这里就可以排除h黑大的红黑树。\n`b-tree`和`b+tree`一次检索最多需要查询**h-1**个节点,但是`b+tree`不存data数据，索引可以存的key更多，这样查询的节点数也就也少，磁盘io也就越少。\n\n\n> 详解：Mysql设计利用了磁盘预读原理，将一个B+Tree节点大小设为一个页大小，在新建节点时直接申请一个页的空间，这样就能保证一个节点物理上存储在一个页里，加之计算机存储分配都是按页对齐的，这样就实现了每个Node节点只需要一次I/O操作。(一个物理Page16K)\n\n一般一个key的大小为8b指针的大小也为8b,这样一个page可以存储(16k/16b=1000)条记录，n层数据可以存储k的n次方跳数据，一亿条数据也不过3层而已，可谓非常高效。\n### 为什么要建立索引\n\n如`全表扫描`扫描那样，我们不能保证每次查询都能在前几个page里查询到所需的数据，目标数据越往后，查询效率就越慢，如果有1亿跳数据，数据查询将会慢的恐怕。\n\n### 是否索引越多越好\n\n每一个索引都是一个树，每次插入和删除都可能破坏原有的树，当树破坏是mysql需要重新把树平衡，这会消耗资源，所以索引不宜过多。","source":"_posts/数据库-索引简介.md","raw":"---\ntitle: 数据库-mysql索引简介\ntags: 数据库\ncategories: 数据库\ntoc: true\ndate: 2018-04-29 11:10:15\n---\n\n\n## 摘要\n因为各个数据库的索引机制不尽相同，在此涉及到mysql的两种索引`b-tree`、`hash`。\n\n> 这里所指的所有数据库都是指mysql.\n\n## 索引的本质\n\nmysql官方文档对索引的描述：`索引`是帮助mysql高效获取数据的数据结构。so 索引的本质是`数据结构`。涉及到查找的时候肯定避不开查找算法，例如`顺序查找`、`二分查找`。随着人们对查找性能要求的越来越高就延伸出来了基于树的查找，例如`二叉树的查找`。当然即使是`二叉树的查找`也无法满足现在程序对于查找性能的要求，进而出现了基于`b-tree`、`hash`的查找。可以分析下查找的演变过程，所有的查找都是基于一定的数据结构，例如最开始`顺序查找`基于链表、`二分查找`基于有序链表、`二叉树查找`基于树。这种为了满足这种**高效小的查询效率**所衍伸出来的数据结构就是**索引**。\n\n## 索引的选择\n\n基于树的查找效率由树的深度决定，所以二叉树是无法满足查询速度的要求，mysql的索引主要使用 `b+tree`。\n\n### b-tree\n\n`b-树`（由b-tree翻译过来）也就是b树，是一种路自平衡搜索树。如果我们以一个二元组来表示索引的内容的话（[key,val]）,key表示键值，val表示数据（地址或者主键），则`b-树`有以下特点。\n\n> 树的度的定义：每个节点包含子树的个数。\n#### 特点\n- 所有的键值分布在整个树种（包括叶子节点和非叶子节点）\n- 任何**key**只会出现一次\n- 所有的叶子节点必须在同一层次，也就是他们具有相同的深度。\n- 每个节点里的关键字是有序的（一个结点中的key从左至右非递减排列），当前节点的左右两个指针指向的节点，左指针指向的节点的key小于当前节点，右指针指向的节点的key大于当前节点。\n- d>=2,每个节点有n-1个`key` 和n个指针，d<=n<=2d。\n\n假设b-tree的度为d,高为h，其索引个数为N。则`h=logd((n+1)/2)`，查找一条数据的渐进复杂度为`logdn`。由于索引数量n和其高度h程对数关系（实际使用中d一般会大于100），所以即使是key很大，查询效率也会很快，分析可以的出b-tree查找一个最多需要**h-1**次磁盘io。\n举个栗子一个度为1001，高度为2（不包含根节点）的b-tree可以存储超高10亿的数据，且每个节点如果使用二分查找的话，只需要三次查找就可以查询到所需的数据。\n\n#### 结构图\n![image](/photo/img/数据库索引/b-tree.png)\n\n### b+tree\n\nb+tree是是b-tree的升级版，所有的data值存在叶子节点。\n\n#### 特点\n- b+tree树只有叶子节点包含data，非叶子节点只存key与指针\n- 所有的叶子节点为一个链表\n\n#### 结构图\n![image](/photo/img/数据库索引/b+tree.png)\n\n## 索引原理\n\n- 聚簇索引 ：索引和文件为同一个文件。\n- 非聚簇索引： 索引和数据文件分开的索引。\n\nMyISAM 和 InnoDb都使用`b+tree`索引结构，但是底层确实不一样的，MyISAM采用的事非聚簇索引，而innoDB采用的是聚簇索引。\n\n### MyISAM\nMyISAM索引原理 : 采用的费聚簇索引 My-ISAM myi索引文件和myd数据文件分离，索引文件值保存数据记录和指针地址。叶子节点data存执指向数据记录的地址。\n\n![image](/photo/img/数据库索引/MyISAM.png)\n\n### InnoDB\n\n#### 结构\n\nInnoDB物理存储文件结构说明：\nInnoDB以表空间Tablespace(idb文件)结构进行组织，每个Tablespace包含多个Segment段（Segment 分为为叶子节点和飞叶子节点Segment），一个Segment段包含多个Extent,一个Extent占用1M空间且包含64page,innoDB b+tree一个逻辑节点就分配一个屋里Page,一个节点一次io操作。一个page里包含d个Row行数据，行数据包\n每一个索引是一个b+tree，一个节点是=一个page(16k)。数据会按照16kb切片为page并编号，标号可以通过偏移量（16k*n）找到文件存储地址。且叶子节点为双向链表，数据按主键索引聚簇索，二级索引叶子节点存储主键值，除了覆盖索引其他二级索引都通过主键查找数据。\n\n![image](/photo/img/数据库索引/InnoDB.png)\n\n#### 原理\n\nInnoDB采用聚簇索引，存储于idb文件里，表数据本身就是主索引，相邻的索引临近存储。叶节点data域保存了完整的数据记录（data(除主键外所有数据）+key(主键)）。也是由于这种方式InnoDB必须建指定主键，如通过没有指定主键则mysql自动选择一个可以唯一表示数据记录的列作为主键。如果这样的列不存在，mysql自动为表生成一个隐含字段（6个字节长整型）作为主键。\n\n> mysql所有的辅助索引data存储皆为主键值\n\n结构图\n![image](/photo/img/数据库索引/InnoDB2.png)\n\n#### 查询流程\n\n1.索引精确查找\n确定定位条件, 找到根节点Page No, 根节点读到内存, 逐层向下查找, 读取叶子节点Page,通过 二分查找找到记录或未命中。（select * from user_info where id = 23）\n\n![image](/photo/img/数据库索引/精确查找.png)\n\n2.索引范围查找\n读取根节点至内存, 确定索引定位条件id=18, 找到满足条件第一个叶节点\n, 顺序扫描所有结果, 直到终止条件满足id >=22 （select * from user_info where id >= 18 and id < 22）\n![image](/photo/img/数据库索引/范围查找.png)\n\n3.全表扫描\n直接读取叶节点头结点， 顺序扫描， 返回符合条件记录， 到最终节点结束\n（select * from user_info where name = 'abc'）\n\n![image](/photo/img/数据库索引/扫全表.png)\n\n4.二级索引查找 \n建立索引\nCreate table table_x(int id primary key, varchar(64) name,key sec_index(name) )\n\n如果执行`select * from table_x where name = 'xxxx'`\n\n![image](/photo/img/数据库索引/二级索引查找.png)\n\n## 总结\n### mysql为什么选择b+tree\n\n内存读取和存盘读取不在一个数量级，所以一般内存读取相较于与磁盘io可以忽略不计。一般来说，索引的大小是无法全部存在ram里的so衡量一个索引的优劣可以以磁盘io次数来衡量。这里就可以排除h黑大的红黑树。\n`b-tree`和`b+tree`一次检索最多需要查询**h-1**个节点,但是`b+tree`不存data数据，索引可以存的key更多，这样查询的节点数也就也少，磁盘io也就越少。\n\n\n> 详解：Mysql设计利用了磁盘预读原理，将一个B+Tree节点大小设为一个页大小，在新建节点时直接申请一个页的空间，这样就能保证一个节点物理上存储在一个页里，加之计算机存储分配都是按页对齐的，这样就实现了每个Node节点只需要一次I/O操作。(一个物理Page16K)\n\n一般一个key的大小为8b指针的大小也为8b,这样一个page可以存储(16k/16b=1000)条记录，n层数据可以存储k的n次方跳数据，一亿条数据也不过3层而已，可谓非常高效。\n### 为什么要建立索引\n\n如`全表扫描`扫描那样，我们不能保证每次查询都能在前几个page里查询到所需的数据，目标数据越往后，查询效率就越慢，如果有1亿跳数据，数据查询将会慢的恐怕。\n\n### 是否索引越多越好\n\n每一个索引都是一个树，每次插入和删除都可能破坏原有的树，当树破坏是mysql需要重新把树平衡，这会消耗资源，所以索引不宜过多。","slug":"数据库-索引简介","published":1,"updated":"2019-02-21T03:49:34.714Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjswwkdpw0020g7wwazawjgv7","content":"<h2 id=\"摘要\"><a href=\"#摘要\" class=\"headerlink\" title=\"摘要\"></a>摘要</h2><p>因为各个数据库的索引机制不尽相同，在此涉及到mysql的两种索引<code>b-tree</code>、<code>hash</code>。</p>\n<blockquote>\n<p>这里所指的所有数据库都是指mysql.</p>\n</blockquote>\n<h2 id=\"索引的本质\"><a href=\"#索引的本质\" class=\"headerlink\" title=\"索引的本质\"></a>索引的本质</h2><p>mysql官方文档对索引的描述：<code>索引</code>是帮助mysql高效获取数据的数据结构。so 索引的本质是<code>数据结构</code>。涉及到查找的时候肯定避不开查找算法，例如<code>顺序查找</code>、<code>二分查找</code>。随着人们对查找性能要求的越来越高就延伸出来了基于树的查找，例如<code>二叉树的查找</code>。当然即使是<code>二叉树的查找</code>也无法满足现在程序对于查找性能的要求，进而出现了基于<code>b-tree</code>、<code>hash</code>的查找。可以分析下查找的演变过程，所有的查找都是基于一定的数据结构，例如最开始<code>顺序查找</code>基于链表、<code>二分查找</code>基于有序链表、<code>二叉树查找</code>基于树。这种为了满足这种<strong>高效小的查询效率</strong>所衍伸出来的数据结构就是<strong>索引</strong>。</p>\n<h2 id=\"索引的选择\"><a href=\"#索引的选择\" class=\"headerlink\" title=\"索引的选择\"></a>索引的选择</h2><p>基于树的查找效率由树的深度决定，所以二叉树是无法满足查询速度的要求，mysql的索引主要使用 <code>b+tree</code>。</p>\n<h3 id=\"b-tree\"><a href=\"#b-tree\" class=\"headerlink\" title=\"b-tree\"></a>b-tree</h3><p><code>b-树</code>（由b-tree翻译过来）也就是b树，是一种路自平衡搜索树。如果我们以一个二元组来表示索引的内容的话（[key,val]）,key表示键值，val表示数据（地址或者主键），则<code>b-树</code>有以下特点。</p>\n<blockquote>\n<p>树的度的定义：每个节点包含子树的个数。</p>\n<h4 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h4><ul>\n<li>所有的键值分布在整个树种（包括叶子节点和非叶子节点）</li>\n<li>任何<strong>key</strong>只会出现一次</li>\n<li>所有的叶子节点必须在同一层次，也就是他们具有相同的深度。</li>\n<li>每个节点里的关键字是有序的（一个结点中的key从左至右非递减排列），当前节点的左右两个指针指向的节点，左指针指向的节点的key小于当前节点，右指针指向的节点的key大于当前节点。</li>\n<li>d&gt;=2,每个节点有n-1个<code>key</code> 和n个指针，d&lt;=n&lt;=2d。</li>\n</ul>\n</blockquote>\n<p>假设b-tree的度为d,高为h，其索引个数为N。则<code>h=logd((n+1)/2)</code>，查找一条数据的渐进复杂度为<code>logdn</code>。由于索引数量n和其高度h程对数关系（实际使用中d一般会大于100），所以即使是key很大，查询效率也会很快，分析可以的出b-tree查找一个最多需要<strong>h-1</strong>次磁盘io。<br>举个栗子一个度为1001，高度为2（不包含根节点）的b-tree可以存储超高10亿的数据，且每个节点如果使用二分查找的话，只需要三次查找就可以查询到所需的数据。</p>\n<h4 id=\"结构图\"><a href=\"#结构图\" class=\"headerlink\" title=\"结构图\"></a>结构图</h4><p><img src=\"/photo/img/数据库索引/b-tree.png\" alt=\"image\"></p>\n<h3 id=\"b-tree-1\"><a href=\"#b-tree-1\" class=\"headerlink\" title=\"b+tree\"></a>b+tree</h3><p>b+tree是是b-tree的升级版，所有的data值存在叶子节点。</p>\n<h4 id=\"特点-1\"><a href=\"#特点-1\" class=\"headerlink\" title=\"特点\"></a>特点</h4><ul>\n<li>b+tree树只有叶子节点包含data，非叶子节点只存key与指针</li>\n<li>所有的叶子节点为一个链表</li>\n</ul>\n<h4 id=\"结构图-1\"><a href=\"#结构图-1\" class=\"headerlink\" title=\"结构图\"></a>结构图</h4><p><img src=\"/photo/img/数据库索引/b+tree.png\" alt=\"image\"></p>\n<h2 id=\"索引原理\"><a href=\"#索引原理\" class=\"headerlink\" title=\"索引原理\"></a>索引原理</h2><ul>\n<li>聚簇索引 ：索引和文件为同一个文件。</li>\n<li>非聚簇索引： 索引和数据文件分开的索引。</li>\n</ul>\n<p>MyISAM 和 InnoDb都使用<code>b+tree</code>索引结构，但是底层确实不一样的，MyISAM采用的事非聚簇索引，而innoDB采用的是聚簇索引。</p>\n<h3 id=\"MyISAM\"><a href=\"#MyISAM\" class=\"headerlink\" title=\"MyISAM\"></a>MyISAM</h3><p>MyISAM索引原理 : 采用的费聚簇索引 My-ISAM myi索引文件和myd数据文件分离，索引文件值保存数据记录和指针地址。叶子节点data存执指向数据记录的地址。</p>\n<p><img src=\"/photo/img/数据库索引/MyISAM.png\" alt=\"image\"></p>\n<h3 id=\"InnoDB\"><a href=\"#InnoDB\" class=\"headerlink\" title=\"InnoDB\"></a>InnoDB</h3><h4 id=\"结构\"><a href=\"#结构\" class=\"headerlink\" title=\"结构\"></a>结构</h4><p>InnoDB物理存储文件结构说明：<br>InnoDB以表空间Tablespace(idb文件)结构进行组织，每个Tablespace包含多个Segment段（Segment 分为为叶子节点和飞叶子节点Segment），一个Segment段包含多个Extent,一个Extent占用1M空间且包含64page,innoDB b+tree一个逻辑节点就分配一个屋里Page,一个节点一次io操作。一个page里包含d个Row行数据，行数据包<br>每一个索引是一个b+tree，一个节点是=一个page(16k)。数据会按照16kb切片为page并编号，标号可以通过偏移量（16k*n）找到文件存储地址。且叶子节点为双向链表，数据按主键索引聚簇索，二级索引叶子节点存储主键值，除了覆盖索引其他二级索引都通过主键查找数据。</p>\n<p><img src=\"/photo/img/数据库索引/InnoDB.png\" alt=\"image\"></p>\n<h4 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h4><p>InnoDB采用聚簇索引，存储于idb文件里，表数据本身就是主索引，相邻的索引临近存储。叶节点data域保存了完整的数据记录（data(除主键外所有数据）+key(主键)）。也是由于这种方式InnoDB必须建指定主键，如通过没有指定主键则mysql自动选择一个可以唯一表示数据记录的列作为主键。如果这样的列不存在，mysql自动为表生成一个隐含字段（6个字节长整型）作为主键。</p>\n<blockquote>\n<p>mysql所有的辅助索引data存储皆为主键值</p>\n</blockquote>\n<p>结构图<br><img src=\"/photo/img/数据库索引/InnoDB2.png\" alt=\"image\"></p>\n<h4 id=\"查询流程\"><a href=\"#查询流程\" class=\"headerlink\" title=\"查询流程\"></a>查询流程</h4><p>1.索引精确查找<br>确定定位条件, 找到根节点Page No, 根节点读到内存, 逐层向下查找, 读取叶子节点Page,通过 二分查找找到记录或未命中。（select * from user_info where id = 23）</p>\n<p><img src=\"/photo/img/数据库索引/精确查找.png\" alt=\"image\"></p>\n<p>2.索引范围查找<br>读取根节点至内存, 确定索引定位条件id=18, 找到满足条件第一个叶节点<br>, 顺序扫描所有结果, 直到终止条件满足id &gt;=22 （select * from user_info where id &gt;= 18 and id &lt; 22）<br><img src=\"/photo/img/数据库索引/范围查找.png\" alt=\"image\"></p>\n<p>3.全表扫描<br>直接读取叶节点头结点， 顺序扫描， 返回符合条件记录， 到最终节点结束<br>（select * from user_info where name = ‘abc’）</p>\n<p><img src=\"/photo/img/数据库索引/扫全表.png\" alt=\"image\"></p>\n<p>4.二级索引查找<br>建立索引<br>Create table table_x(int id primary key, varchar(64) name,key sec_index(name) )</p>\n<p>如果执行<code>select * from table_x where name = &#39;xxxx&#39;</code></p>\n<p><img src=\"/photo/img/数据库索引/二级索引查找.png\" alt=\"image\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><h3 id=\"mysql为什么选择b-tree\"><a href=\"#mysql为什么选择b-tree\" class=\"headerlink\" title=\"mysql为什么选择b+tree\"></a>mysql为什么选择b+tree</h3><p>内存读取和存盘读取不在一个数量级，所以一般内存读取相较于与磁盘io可以忽略不计。一般来说，索引的大小是无法全部存在ram里的so衡量一个索引的优劣可以以磁盘io次数来衡量。这里就可以排除h黑大的红黑树。<br><code>b-tree</code>和<code>b+tree</code>一次检索最多需要查询<strong>h-1</strong>个节点,但是<code>b+tree</code>不存data数据，索引可以存的key更多，这样查询的节点数也就也少，磁盘io也就越少。</p>\n<blockquote>\n<p>详解：Mysql设计利用了磁盘预读原理，将一个B+Tree节点大小设为一个页大小，在新建节点时直接申请一个页的空间，这样就能保证一个节点物理上存储在一个页里，加之计算机存储分配都是按页对齐的，这样就实现了每个Node节点只需要一次I/O操作。(一个物理Page16K)</p>\n</blockquote>\n<p>一般一个key的大小为8b指针的大小也为8b,这样一个page可以存储(16k/16b=1000)条记录，n层数据可以存储k的n次方跳数据，一亿条数据也不过3层而已，可谓非常高效。</p>\n<h3 id=\"为什么要建立索引\"><a href=\"#为什么要建立索引\" class=\"headerlink\" title=\"为什么要建立索引\"></a>为什么要建立索引</h3><p>如<code>全表扫描</code>扫描那样，我们不能保证每次查询都能在前几个page里查询到所需的数据，目标数据越往后，查询效率就越慢，如果有1亿跳数据，数据查询将会慢的恐怕。</p>\n<h3 id=\"是否索引越多越好\"><a href=\"#是否索引越多越好\" class=\"headerlink\" title=\"是否索引越多越好\"></a>是否索引越多越好</h3><p>每一个索引都是一个树，每次插入和删除都可能破坏原有的树，当树破坏是mysql需要重新把树平衡，这会消耗资源，所以索引不宜过多。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"摘要\"><a href=\"#摘要\" class=\"headerlink\" title=\"摘要\"></a>摘要</h2><p>因为各个数据库的索引机制不尽相同，在此涉及到mysql的两种索引<code>b-tree</code>、<code>hash</code>。</p>\n<blockquote>\n<p>这里所指的所有数据库都是指mysql.</p>\n</blockquote>\n<h2 id=\"索引的本质\"><a href=\"#索引的本质\" class=\"headerlink\" title=\"索引的本质\"></a>索引的本质</h2><p>mysql官方文档对索引的描述：<code>索引</code>是帮助mysql高效获取数据的数据结构。so 索引的本质是<code>数据结构</code>。涉及到查找的时候肯定避不开查找算法，例如<code>顺序查找</code>、<code>二分查找</code>。随着人们对查找性能要求的越来越高就延伸出来了基于树的查找，例如<code>二叉树的查找</code>。当然即使是<code>二叉树的查找</code>也无法满足现在程序对于查找性能的要求，进而出现了基于<code>b-tree</code>、<code>hash</code>的查找。可以分析下查找的演变过程，所有的查找都是基于一定的数据结构，例如最开始<code>顺序查找</code>基于链表、<code>二分查找</code>基于有序链表、<code>二叉树查找</code>基于树。这种为了满足这种<strong>高效小的查询效率</strong>所衍伸出来的数据结构就是<strong>索引</strong>。</p>\n<h2 id=\"索引的选择\"><a href=\"#索引的选择\" class=\"headerlink\" title=\"索引的选择\"></a>索引的选择</h2><p>基于树的查找效率由树的深度决定，所以二叉树是无法满足查询速度的要求，mysql的索引主要使用 <code>b+tree</code>。</p>\n<h3 id=\"b-tree\"><a href=\"#b-tree\" class=\"headerlink\" title=\"b-tree\"></a>b-tree</h3><p><code>b-树</code>（由b-tree翻译过来）也就是b树，是一种路自平衡搜索树。如果我们以一个二元组来表示索引的内容的话（[key,val]）,key表示键值，val表示数据（地址或者主键），则<code>b-树</code>有以下特点。</p>\n<blockquote>\n<p>树的度的定义：每个节点包含子树的个数。</p>\n<h4 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h4><ul>\n<li>所有的键值分布在整个树种（包括叶子节点和非叶子节点）</li>\n<li>任何<strong>key</strong>只会出现一次</li>\n<li>所有的叶子节点必须在同一层次，也就是他们具有相同的深度。</li>\n<li>每个节点里的关键字是有序的（一个结点中的key从左至右非递减排列），当前节点的左右两个指针指向的节点，左指针指向的节点的key小于当前节点，右指针指向的节点的key大于当前节点。</li>\n<li>d&gt;=2,每个节点有n-1个<code>key</code> 和n个指针，d&lt;=n&lt;=2d。</li>\n</ul>\n</blockquote>\n<p>假设b-tree的度为d,高为h，其索引个数为N。则<code>h=logd((n+1)/2)</code>，查找一条数据的渐进复杂度为<code>logdn</code>。由于索引数量n和其高度h程对数关系（实际使用中d一般会大于100），所以即使是key很大，查询效率也会很快，分析可以的出b-tree查找一个最多需要<strong>h-1</strong>次磁盘io。<br>举个栗子一个度为1001，高度为2（不包含根节点）的b-tree可以存储超高10亿的数据，且每个节点如果使用二分查找的话，只需要三次查找就可以查询到所需的数据。</p>\n<h4 id=\"结构图\"><a href=\"#结构图\" class=\"headerlink\" title=\"结构图\"></a>结构图</h4><p><img src=\"/photo/img/数据库索引/b-tree.png\" alt=\"image\"></p>\n<h3 id=\"b-tree-1\"><a href=\"#b-tree-1\" class=\"headerlink\" title=\"b+tree\"></a>b+tree</h3><p>b+tree是是b-tree的升级版，所有的data值存在叶子节点。</p>\n<h4 id=\"特点-1\"><a href=\"#特点-1\" class=\"headerlink\" title=\"特点\"></a>特点</h4><ul>\n<li>b+tree树只有叶子节点包含data，非叶子节点只存key与指针</li>\n<li>所有的叶子节点为一个链表</li>\n</ul>\n<h4 id=\"结构图-1\"><a href=\"#结构图-1\" class=\"headerlink\" title=\"结构图\"></a>结构图</h4><p><img src=\"/photo/img/数据库索引/b+tree.png\" alt=\"image\"></p>\n<h2 id=\"索引原理\"><a href=\"#索引原理\" class=\"headerlink\" title=\"索引原理\"></a>索引原理</h2><ul>\n<li>聚簇索引 ：索引和文件为同一个文件。</li>\n<li>非聚簇索引： 索引和数据文件分开的索引。</li>\n</ul>\n<p>MyISAM 和 InnoDb都使用<code>b+tree</code>索引结构，但是底层确实不一样的，MyISAM采用的事非聚簇索引，而innoDB采用的是聚簇索引。</p>\n<h3 id=\"MyISAM\"><a href=\"#MyISAM\" class=\"headerlink\" title=\"MyISAM\"></a>MyISAM</h3><p>MyISAM索引原理 : 采用的费聚簇索引 My-ISAM myi索引文件和myd数据文件分离，索引文件值保存数据记录和指针地址。叶子节点data存执指向数据记录的地址。</p>\n<p><img src=\"/photo/img/数据库索引/MyISAM.png\" alt=\"image\"></p>\n<h3 id=\"InnoDB\"><a href=\"#InnoDB\" class=\"headerlink\" title=\"InnoDB\"></a>InnoDB</h3><h4 id=\"结构\"><a href=\"#结构\" class=\"headerlink\" title=\"结构\"></a>结构</h4><p>InnoDB物理存储文件结构说明：<br>InnoDB以表空间Tablespace(idb文件)结构进行组织，每个Tablespace包含多个Segment段（Segment 分为为叶子节点和飞叶子节点Segment），一个Segment段包含多个Extent,一个Extent占用1M空间且包含64page,innoDB b+tree一个逻辑节点就分配一个屋里Page,一个节点一次io操作。一个page里包含d个Row行数据，行数据包<br>每一个索引是一个b+tree，一个节点是=一个page(16k)。数据会按照16kb切片为page并编号，标号可以通过偏移量（16k*n）找到文件存储地址。且叶子节点为双向链表，数据按主键索引聚簇索，二级索引叶子节点存储主键值，除了覆盖索引其他二级索引都通过主键查找数据。</p>\n<p><img src=\"/photo/img/数据库索引/InnoDB.png\" alt=\"image\"></p>\n<h4 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h4><p>InnoDB采用聚簇索引，存储于idb文件里，表数据本身就是主索引，相邻的索引临近存储。叶节点data域保存了完整的数据记录（data(除主键外所有数据）+key(主键)）。也是由于这种方式InnoDB必须建指定主键，如通过没有指定主键则mysql自动选择一个可以唯一表示数据记录的列作为主键。如果这样的列不存在，mysql自动为表生成一个隐含字段（6个字节长整型）作为主键。</p>\n<blockquote>\n<p>mysql所有的辅助索引data存储皆为主键值</p>\n</blockquote>\n<p>结构图<br><img src=\"/photo/img/数据库索引/InnoDB2.png\" alt=\"image\"></p>\n<h4 id=\"查询流程\"><a href=\"#查询流程\" class=\"headerlink\" title=\"查询流程\"></a>查询流程</h4><p>1.索引精确查找<br>确定定位条件, 找到根节点Page No, 根节点读到内存, 逐层向下查找, 读取叶子节点Page,通过 二分查找找到记录或未命中。（select * from user_info where id = 23）</p>\n<p><img src=\"/photo/img/数据库索引/精确查找.png\" alt=\"image\"></p>\n<p>2.索引范围查找<br>读取根节点至内存, 确定索引定位条件id=18, 找到满足条件第一个叶节点<br>, 顺序扫描所有结果, 直到终止条件满足id &gt;=22 （select * from user_info where id &gt;= 18 and id &lt; 22）<br><img src=\"/photo/img/数据库索引/范围查找.png\" alt=\"image\"></p>\n<p>3.全表扫描<br>直接读取叶节点头结点， 顺序扫描， 返回符合条件记录， 到最终节点结束<br>（select * from user_info where name = ‘abc’）</p>\n<p><img src=\"/photo/img/数据库索引/扫全表.png\" alt=\"image\"></p>\n<p>4.二级索引查找<br>建立索引<br>Create table table_x(int id primary key, varchar(64) name,key sec_index(name) )</p>\n<p>如果执行<code>select * from table_x where name = &#39;xxxx&#39;</code></p>\n<p><img src=\"/photo/img/数据库索引/二级索引查找.png\" alt=\"image\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><h3 id=\"mysql为什么选择b-tree\"><a href=\"#mysql为什么选择b-tree\" class=\"headerlink\" title=\"mysql为什么选择b+tree\"></a>mysql为什么选择b+tree</h3><p>内存读取和存盘读取不在一个数量级，所以一般内存读取相较于与磁盘io可以忽略不计。一般来说，索引的大小是无法全部存在ram里的so衡量一个索引的优劣可以以磁盘io次数来衡量。这里就可以排除h黑大的红黑树。<br><code>b-tree</code>和<code>b+tree</code>一次检索最多需要查询<strong>h-1</strong>个节点,但是<code>b+tree</code>不存data数据，索引可以存的key更多，这样查询的节点数也就也少，磁盘io也就越少。</p>\n<blockquote>\n<p>详解：Mysql设计利用了磁盘预读原理，将一个B+Tree节点大小设为一个页大小，在新建节点时直接申请一个页的空间，这样就能保证一个节点物理上存储在一个页里，加之计算机存储分配都是按页对齐的，这样就实现了每个Node节点只需要一次I/O操作。(一个物理Page16K)</p>\n</blockquote>\n<p>一般一个key的大小为8b指针的大小也为8b,这样一个page可以存储(16k/16b=1000)条记录，n层数据可以存储k的n次方跳数据，一亿条数据也不过3层而已，可谓非常高效。</p>\n<h3 id=\"为什么要建立索引\"><a href=\"#为什么要建立索引\" class=\"headerlink\" title=\"为什么要建立索引\"></a>为什么要建立索引</h3><p>如<code>全表扫描</code>扫描那样，我们不能保证每次查询都能在前几个page里查询到所需的数据，目标数据越往后，查询效率就越慢，如果有1亿跳数据，数据查询将会慢的恐怕。</p>\n<h3 id=\"是否索引越多越好\"><a href=\"#是否索引越多越好\" class=\"headerlink\" title=\"是否索引越多越好\"></a>是否索引越多越好</h3><p>每一个索引都是一个树，每次插入和删除都可能破坏原有的树，当树破坏是mysql需要重新把树平衡，这会消耗资源，所以索引不宜过多。</p>\n"},{"title":"C语言多维数组传参问题","date":"2017-02-12T07:18:35.000Z","toc":true,"_content":"\n刷题遇到个问题，需要传递一个二维数组作为实参。函数如下\n\n```\nint* spiralOrder(int** matrix, int matrixRowSize, int matrixColSize) {\n}\n```\n\n遇到的问题是如果我直接`int matrix[3][3]`声明，然后传递参数，在`spiralOrder`无法用matrix[3][3]的形式调用。代码如下\n\n```c\nint* spiralOrder(int** matrix, int matrixRowSize, int matrixColSize) {\n    int* ret;\n    printf(\"matrix:%d\\n\",*(*(matrix+0)+2));\n    printf(\"matrix:%d\\n\", matrix[2][2]);\n    return  ret;\n}\n\nint main(){\n    int c[3][3] = { {1,2,3} , {4,5,6}, {7,8,9}};\n\n    spiralOrder((int**)c, 3, 3);\n}\n```\n在`spiralOrder`打印的时候报错如下：\n\n![image](/photo/img/c语言多维数组传参问题/bug1.png)\n当然c primer也明确指出，数组当做实参传递时，当做指针处理。所以说上述问题在于把数组当成二重指针处理当然没法处理了。以为数组可以当做指针，其实二维数组也是可以当做指针。\n那么二维数组如何作为实参传递呢？\n## 方法一\n> 多维数组以指向 0 号元素的指针方式传递。多维数组的 元素本身就是数组。除了第一维以外的所有维的长度都是元素类型的一部分，必须明确指定.---C++ Primer\n\n### 代码\n```\nvoid spiralOrder1(int matrix[][3], int matrixRowSize, int matrixColSize) {\n    printf(\"matrix:%d\\n\", matrix[0][0]);\n    printf(\"matrix:%d\\n\", matrix[1][1]);\n    printf(\"matrix:%d\\n\", matrix[2][2]);\n    return ;\n}\nint main(){\n    int c[3][3] = { {1,2,3} , {4,5,6}, {7,8,9}};\n    spiralOrder1(c, 3, 3);\n}\n```\n因为形参是`(int matrix[][3]`所以编译器知道它按照二维数组的方式寻址。\n\n### 返回结果\n![image](/photo/img/c语言多维数组传参问题/result2.png)\n\n## 方法二——指针的形式\n\n```c\nvoid spiralOrder1(int* matrix, int matrixRowSize, int matrixColSize) {\n    printf(\"matrix:%d\\n\", matrix[0]);\n    return ;\n}\n\nint main(){\n    int c[3][3] = { {1,2,3} , {4,5,6}, {7,8,9}};\n    spiralOrder1((int*)c, 3, 3);\n}\n```\n![image](/photo/img/c语言多维数组传参问题/result1.png)\n\n所以当形参是`int*`的情况下，二维数组可以通过[i]的形式访问，也可以通过*(i*j+j)(规整的二维数组)的方式访问，其中i、j可以通过传参的形式传入。\n**原因是直接定义的数组是在程序的堆栈区，数据占用连续的空间，所以可以使用上述方式寻址。**\n\n\n## 方法三\n如果上述都不满足需求的话，还有一种方式——通过二级指针的形式。\n\n### 代码\n```\nint* spiralOrder(int** matrix, int matrixRowSize, int matrixColSize) {\n    int* ret;\n    printf(\"matrix:%d\\n\",*(*(matrix+0)+2));\n    printf(\"matrix:%d\\n\", matrix[2][2]);\n    return  ret;\n}\nint main(){\n    int** a = (int**)malloc(sizeof(int*)*9);\n    int** current = a;\n    for(int i = 0; i < 3; i++)\n    {\n        int *tmp = (int*)malloc(sizeof(int)*3);\n        *a = tmp;\n        a++;\n        for(int j = 0; j < 3; j++)\n        {\n            (*tmp) = j+i;\n            tmp++;\n        }\n    }\n    spiralOrder(current, 3, 3);\n}\n```\n\n### 返回结果\n\n![image](/photo/img/c语言多维数组传参问题/result3.png)\n返回结果\n如果形参是二级指针的形式，可以通过`[][]`的形式访问数组，当然这里必须要控制二维数组范围。也可以通过`*(*(matrix+0)+2))`方式访问。是否可以像上一个方法中提到的 \b通过连续的内存地址 去访问？\n\n### 代码\n\n```c\nint* spiralOrder(int** matrix, int matrixRowSize, int matrixColSize) {\n    int* ret;\n    printf(\"matrix:%d\\n\", *(*(matrix+2)));\n    printf(\"matrix:%d\\n\", *(*(matrix+4)));\n    printf(\"matrix:%d\\n\", matrix[0]);\n    return  ret;\n}\nint main(){\n    int** a = (int**)malloc(sizeof(int*)*9);\n    int** current = a;\n    for(int i = 0; i < 3; i++)\n    {\n        int *tmp = (int*)malloc(sizeof(int)*3);\n        *a = tmp;\n        a++;\n        for(int j = 0; j < 3; j++)\n        {\n            (*tmp) = j+i;\n            tmp++;\n        }\n    }\n    spiralOrder(current, 3, 3);\n}\n```\n\n返回结果\n![image](/photo/img/c语言多维数组传参问题/result4.png)\n\n首先它是一个二维数组以一维数组的形式访问打印出来是一个内存地址。为什么`*(*(matrix+2))`打印出来是对的数值，而`*(*(matrix+4))`却是内存地址呢？ 因为**malloc动态申请出来的数组是在系统的远堆上（far heap）,元素不是连续的，导致无法按照连续内存访问**\n\n## 最后一个问题\n\n那么二维数组和二级指针是什么关系呢？？？\n\n首先声明一个二维数组和一个二维指针，我们把它打印出来\n### 代码\n```c\nint main(){\n    int c[3][3] = { {1,2,3} , {4,5,6}, {7,8,9}};\n    int** a = (int**)malloc(sizeof(int*)*9);\n    int** current = a;\n    for(int i = 0; i < 3; i++)\n    {\n        int *tmp = (int*)malloc(sizeof(int)*3);\n        *a = tmp;\n        a++;\n        for(int j = 0; j < 3; j++)\n        {\n            (*tmp) = j+i;\n            tmp++;\n        }\n    }\n    printf(\"current%p\\n\", current);\n    printf(\"current0%p\\n\", current[0]);\n    printf(\"c:%p\\n\", c);\n    printf(\"c:%p\\n\", c+1);\n    printf(\"c0:%p\\n\", c[0]);\n    printf(\"c0:%p\\n\", c[0]+1);\n    printf(\"c00:%d\\n\", c[0][0]);\n    printf(\"c00:%p\\n\", &c[0][0]);\n}\n```\n### 返回结果\n\n![image](/photo/img/c语言多维数组传参问题/result5.png)\n\n首先数组`c`存储的是一个占用两个int大小对象的地址。`c[0]`存储的是一个占用一个int大小对象的地址。因为`c`与`c[0]`存储的都是数组元素的首地址所以所以`c`与`c[0]`所存地址相同，但是他们所存储对象的大小不同。从输出的**c+1**和**c[0]+1**就可以看出来（这里的+1是指按照一个对象长度寻址）\n\n再看看malloc申请出来的二级指针，压根`current` 与`current[0]`所存储的地址不一样，所以肯定无法像直接申请数组按照连续内存寻址找到所需数值。","source":"_posts/C语言多维数组传参问题.md","raw":"---\ntitle: C语言多维数组传参问题\ndate: 2017-02-12 15:18:35\ntags: c语言\ncategories: c语言\ntoc: true\n---\n\n刷题遇到个问题，需要传递一个二维数组作为实参。函数如下\n\n```\nint* spiralOrder(int** matrix, int matrixRowSize, int matrixColSize) {\n}\n```\n\n遇到的问题是如果我直接`int matrix[3][3]`声明，然后传递参数，在`spiralOrder`无法用matrix[3][3]的形式调用。代码如下\n\n```c\nint* spiralOrder(int** matrix, int matrixRowSize, int matrixColSize) {\n    int* ret;\n    printf(\"matrix:%d\\n\",*(*(matrix+0)+2));\n    printf(\"matrix:%d\\n\", matrix[2][2]);\n    return  ret;\n}\n\nint main(){\n    int c[3][3] = { {1,2,3} , {4,5,6}, {7,8,9}};\n\n    spiralOrder((int**)c, 3, 3);\n}\n```\n在`spiralOrder`打印的时候报错如下：\n\n![image](/photo/img/c语言多维数组传参问题/bug1.png)\n当然c primer也明确指出，数组当做实参传递时，当做指针处理。所以说上述问题在于把数组当成二重指针处理当然没法处理了。以为数组可以当做指针，其实二维数组也是可以当做指针。\n那么二维数组如何作为实参传递呢？\n## 方法一\n> 多维数组以指向 0 号元素的指针方式传递。多维数组的 元素本身就是数组。除了第一维以外的所有维的长度都是元素类型的一部分，必须明确指定.---C++ Primer\n\n### 代码\n```\nvoid spiralOrder1(int matrix[][3], int matrixRowSize, int matrixColSize) {\n    printf(\"matrix:%d\\n\", matrix[0][0]);\n    printf(\"matrix:%d\\n\", matrix[1][1]);\n    printf(\"matrix:%d\\n\", matrix[2][2]);\n    return ;\n}\nint main(){\n    int c[3][3] = { {1,2,3} , {4,5,6}, {7,8,9}};\n    spiralOrder1(c, 3, 3);\n}\n```\n因为形参是`(int matrix[][3]`所以编译器知道它按照二维数组的方式寻址。\n\n### 返回结果\n![image](/photo/img/c语言多维数组传参问题/result2.png)\n\n## 方法二——指针的形式\n\n```c\nvoid spiralOrder1(int* matrix, int matrixRowSize, int matrixColSize) {\n    printf(\"matrix:%d\\n\", matrix[0]);\n    return ;\n}\n\nint main(){\n    int c[3][3] = { {1,2,3} , {4,5,6}, {7,8,9}};\n    spiralOrder1((int*)c, 3, 3);\n}\n```\n![image](/photo/img/c语言多维数组传参问题/result1.png)\n\n所以当形参是`int*`的情况下，二维数组可以通过[i]的形式访问，也可以通过*(i*j+j)(规整的二维数组)的方式访问，其中i、j可以通过传参的形式传入。\n**原因是直接定义的数组是在程序的堆栈区，数据占用连续的空间，所以可以使用上述方式寻址。**\n\n\n## 方法三\n如果上述都不满足需求的话，还有一种方式——通过二级指针的形式。\n\n### 代码\n```\nint* spiralOrder(int** matrix, int matrixRowSize, int matrixColSize) {\n    int* ret;\n    printf(\"matrix:%d\\n\",*(*(matrix+0)+2));\n    printf(\"matrix:%d\\n\", matrix[2][2]);\n    return  ret;\n}\nint main(){\n    int** a = (int**)malloc(sizeof(int*)*9);\n    int** current = a;\n    for(int i = 0; i < 3; i++)\n    {\n        int *tmp = (int*)malloc(sizeof(int)*3);\n        *a = tmp;\n        a++;\n        for(int j = 0; j < 3; j++)\n        {\n            (*tmp) = j+i;\n            tmp++;\n        }\n    }\n    spiralOrder(current, 3, 3);\n}\n```\n\n### 返回结果\n\n![image](/photo/img/c语言多维数组传参问题/result3.png)\n返回结果\n如果形参是二级指针的形式，可以通过`[][]`的形式访问数组，当然这里必须要控制二维数组范围。也可以通过`*(*(matrix+0)+2))`方式访问。是否可以像上一个方法中提到的 \b通过连续的内存地址 去访问？\n\n### 代码\n\n```c\nint* spiralOrder(int** matrix, int matrixRowSize, int matrixColSize) {\n    int* ret;\n    printf(\"matrix:%d\\n\", *(*(matrix+2)));\n    printf(\"matrix:%d\\n\", *(*(matrix+4)));\n    printf(\"matrix:%d\\n\", matrix[0]);\n    return  ret;\n}\nint main(){\n    int** a = (int**)malloc(sizeof(int*)*9);\n    int** current = a;\n    for(int i = 0; i < 3; i++)\n    {\n        int *tmp = (int*)malloc(sizeof(int)*3);\n        *a = tmp;\n        a++;\n        for(int j = 0; j < 3; j++)\n        {\n            (*tmp) = j+i;\n            tmp++;\n        }\n    }\n    spiralOrder(current, 3, 3);\n}\n```\n\n返回结果\n![image](/photo/img/c语言多维数组传参问题/result4.png)\n\n首先它是一个二维数组以一维数组的形式访问打印出来是一个内存地址。为什么`*(*(matrix+2))`打印出来是对的数值，而`*(*(matrix+4))`却是内存地址呢？ 因为**malloc动态申请出来的数组是在系统的远堆上（far heap）,元素不是连续的，导致无法按照连续内存访问**\n\n## 最后一个问题\n\n那么二维数组和二级指针是什么关系呢？？？\n\n首先声明一个二维数组和一个二维指针，我们把它打印出来\n### 代码\n```c\nint main(){\n    int c[3][3] = { {1,2,3} , {4,5,6}, {7,8,9}};\n    int** a = (int**)malloc(sizeof(int*)*9);\n    int** current = a;\n    for(int i = 0; i < 3; i++)\n    {\n        int *tmp = (int*)malloc(sizeof(int)*3);\n        *a = tmp;\n        a++;\n        for(int j = 0; j < 3; j++)\n        {\n            (*tmp) = j+i;\n            tmp++;\n        }\n    }\n    printf(\"current%p\\n\", current);\n    printf(\"current0%p\\n\", current[0]);\n    printf(\"c:%p\\n\", c);\n    printf(\"c:%p\\n\", c+1);\n    printf(\"c0:%p\\n\", c[0]);\n    printf(\"c0:%p\\n\", c[0]+1);\n    printf(\"c00:%d\\n\", c[0][0]);\n    printf(\"c00:%p\\n\", &c[0][0]);\n}\n```\n### 返回结果\n\n![image](/photo/img/c语言多维数组传参问题/result5.png)\n\n首先数组`c`存储的是一个占用两个int大小对象的地址。`c[0]`存储的是一个占用一个int大小对象的地址。因为`c`与`c[0]`存储的都是数组元素的首地址所以所以`c`与`c[0]`所存地址相同，但是他们所存储对象的大小不同。从输出的**c+1**和**c[0]+1**就可以看出来（这里的+1是指按照一个对象长度寻址）\n\n再看看malloc申请出来的二级指针，压根`current` 与`current[0]`所存储的地址不一样，所以肯定无法像直接申请数组按照连续内存寻址找到所需数值。","slug":"C语言多维数组传参问题","published":1,"updated":"2019-02-21T03:49:34.704Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjswwkdpy0024g7wwvyl6udtv","content":"<p>刷题遇到个问题，需要传递一个二维数组作为实参。函数如下</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span>* <span class=\"title\">spiralOrder</span><span class=\"params\">(<span class=\"keyword\">int</span>** matrix, <span class=\"keyword\">int</span> matrixRowSize, <span class=\"keyword\">int</span> matrixColSize)</span> </span>&#123;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>遇到的问题是如果我直接<code>int matrix[3][3]</code>声明，然后传递参数，在<code>spiralOrder</code>无法用matrix[3][3]的形式调用。代码如下</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span>* <span class=\"title\">spiralOrder</span><span class=\"params\">(<span class=\"keyword\">int</span>** matrix, <span class=\"keyword\">int</span> matrixRowSize, <span class=\"keyword\">int</span> matrixColSize)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span>* ret;</div><div class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"matrix:%d\\n\"</span>,*(*(matrix+<span class=\"number\">0</span>)+<span class=\"number\">2</span>));</div><div class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"matrix:%d\\n\"</span>, matrix[<span class=\"number\">2</span>][<span class=\"number\">2</span>]);</div><div class=\"line\">    <span class=\"keyword\">return</span>  ret;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> c[<span class=\"number\">3</span>][<span class=\"number\">3</span>] = &#123; &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125; , &#123;<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>&#125;, &#123;<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>&#125;&#125;;</div><div class=\"line\"></div><div class=\"line\">    spiralOrder((<span class=\"keyword\">int</span>**)c, <span class=\"number\">3</span>, <span class=\"number\">3</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在<code>spiralOrder</code>打印的时候报错如下：</p>\n<p><img src=\"/photo/img/c语言多维数组传参问题/bug1.png\" alt=\"image\"><br>当然c primer也明确指出，数组当做实参传递时，当做指针处理。所以说上述问题在于把数组当成二重指针处理当然没法处理了。以为数组可以当做指针，其实二维数组也是可以当做指针。<br>那么二维数组如何作为实参传递呢？</p>\n<h2 id=\"方法一\"><a href=\"#方法一\" class=\"headerlink\" title=\"方法一\"></a>方法一</h2><blockquote>\n<p>多维数组以指向 0 号元素的指针方式传递。多维数组的 元素本身就是数组。除了第一维以外的所有维的长度都是元素类型的一部分，必须明确指定.—C++ Primer</p>\n</blockquote>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">void spiralOrder1(int matrix[][<span class=\"number\">3</span>], int matrixRowSize, int matrixColSize) &#123;</div><div class=\"line\">    printf(<span class=\"string\">\"matrix:%d<span class=\"subst\">\\n</span>\"</span>, matrix[<span class=\"number\">0</span>][<span class=\"number\">0</span>]);</div><div class=\"line\">    printf(<span class=\"string\">\"matrix:%d<span class=\"subst\">\\n</span>\"</span>, matrix[<span class=\"number\">1</span>][<span class=\"number\">1</span>]);</div><div class=\"line\">    printf(<span class=\"string\">\"matrix:%d<span class=\"subst\">\\n</span>\"</span>, matrix[<span class=\"number\">2</span>][<span class=\"number\">2</span>]);</div><div class=\"line\">    return ;</div><div class=\"line\">&#125;</div><div class=\"line\">int main()&#123;</div><div class=\"line\">    int c[<span class=\"number\">3</span>][<span class=\"number\">3</span>] = &#123; &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125; , &#123;<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>&#125;, &#123;<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>&#125;&#125;;</div><div class=\"line\">    spiralOrder1(c, <span class=\"number\">3</span>, <span class=\"number\">3</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>因为形参是<code>(int matrix[][3]</code>所以编译器知道它按照二维数组的方式寻址。</p>\n<h3 id=\"返回结果\"><a href=\"#返回结果\" class=\"headerlink\" title=\"返回结果\"></a>返回结果</h3><p><img src=\"/photo/img/c语言多维数组传参问题/result2.png\" alt=\"image\"></p>\n<h2 id=\"方法二——指针的形式\"><a href=\"#方法二——指针的形式\" class=\"headerlink\" title=\"方法二——指针的形式\"></a>方法二——指针的形式</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">spiralOrder1</span><span class=\"params\">(<span class=\"keyword\">int</span>* matrix, <span class=\"keyword\">int</span> matrixRowSize, <span class=\"keyword\">int</span> matrixColSize)</span> </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"matrix:%d\\n\"</span>, matrix[<span class=\"number\">0</span>]);</div><div class=\"line\">    <span class=\"keyword\">return</span> ;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> c[<span class=\"number\">3</span>][<span class=\"number\">3</span>] = &#123; &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125; , &#123;<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>&#125;, &#123;<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>&#125;&#125;;</div><div class=\"line\">    spiralOrder1((<span class=\"keyword\">int</span>*)c, <span class=\"number\">3</span>, <span class=\"number\">3</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><img src=\"/photo/img/c语言多维数组传参问题/result1.png\" alt=\"image\"></p>\n<p>所以当形参是<code>int*</code>的情况下，二维数组可以通过[i]的形式访问，也可以通过<em>(i</em>j+j)(规整的二维数组)的方式访问，其中i、j可以通过传参的形式传入。<br><strong>原因是直接定义的数组是在程序的堆栈区，数据占用连续的空间，所以可以使用上述方式寻址。</strong></p>\n<h2 id=\"方法三\"><a href=\"#方法三\" class=\"headerlink\" title=\"方法三\"></a>方法三</h2><p>如果上述都不满足需求的话，还有一种方式——通过二级指针的形式。</p>\n<h3 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span>* <span class=\"title\">spiralOrder</span><span class=\"params\">(<span class=\"keyword\">int</span>** matrix, <span class=\"keyword\">int</span> matrixRowSize, <span class=\"keyword\">int</span> matrixColSize)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span>* ret;</div><div class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"matrix:%d\\n\"</span>,*(*(matrix+<span class=\"number\">0</span>)+<span class=\"number\">2</span>));</div><div class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"matrix:%d\\n\"</span>, matrix[<span class=\"number\">2</span>][<span class=\"number\">2</span>]);</div><div class=\"line\">    <span class=\"keyword\">return</span>  ret;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span>** a = (<span class=\"keyword\">int</span>**)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>*)*<span class=\"number\">9</span>);</div><div class=\"line\">    <span class=\"keyword\">int</span>** current = a;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> *tmp = (<span class=\"keyword\">int</span>*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>)*<span class=\"number\">3</span>);</div><div class=\"line\">        *a = tmp;</div><div class=\"line\">        a++;</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">3</span>; j++)</div><div class=\"line\">        &#123;</div><div class=\"line\">            (*tmp) = j+i;</div><div class=\"line\">            tmp++;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    spiralOrder(current, <span class=\"number\">3</span>, <span class=\"number\">3</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"返回结果-1\"><a href=\"#返回结果-1\" class=\"headerlink\" title=\"返回结果\"></a>返回结果</h3><p><img src=\"/photo/img/c语言多维数组传参问题/result3.png\" alt=\"image\"><br>返回结果<br>如果形参是二级指针的形式，可以通过<code>[][]</code>的形式访问数组，当然这里必须要控制二维数组范围。也可以通过<code>*(*(matrix+0)+2))</code>方式访问。是否可以像上一个方法中提到的 \b通过连续的内存地址 去访问？</p>\n<h3 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span>* <span class=\"title\">spiralOrder</span><span class=\"params\">(<span class=\"keyword\">int</span>** matrix, <span class=\"keyword\">int</span> matrixRowSize, <span class=\"keyword\">int</span> matrixColSize)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span>* ret;</div><div class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"matrix:%d\\n\"</span>, *(*(matrix+<span class=\"number\">2</span>)));</div><div class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"matrix:%d\\n\"</span>, *(*(matrix+<span class=\"number\">4</span>)));</div><div class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"matrix:%d\\n\"</span>, matrix[<span class=\"number\">0</span>]);</div><div class=\"line\">    <span class=\"keyword\">return</span>  ret;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span>** a = (<span class=\"keyword\">int</span>**)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>*)*<span class=\"number\">9</span>);</div><div class=\"line\">    <span class=\"keyword\">int</span>** current = a;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> *tmp = (<span class=\"keyword\">int</span>*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>)*<span class=\"number\">3</span>);</div><div class=\"line\">        *a = tmp;</div><div class=\"line\">        a++;</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">3</span>; j++)</div><div class=\"line\">        &#123;</div><div class=\"line\">            (*tmp) = j+i;</div><div class=\"line\">            tmp++;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    spiralOrder(current, <span class=\"number\">3</span>, <span class=\"number\">3</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>返回结果<br><img src=\"/photo/img/c语言多维数组传参问题/result4.png\" alt=\"image\"></p>\n<p>首先它是一个二维数组以一维数组的形式访问打印出来是一个内存地址。为什么<code>*(*(matrix+2))</code>打印出来是对的数值，而<code>*(*(matrix+4))</code>却是内存地址呢？ 因为<strong>malloc动态申请出来的数组是在系统的远堆上（far heap）,元素不是连续的，导致无法按照连续内存访问</strong></p>\n<h2 id=\"最后一个问题\"><a href=\"#最后一个问题\" class=\"headerlink\" title=\"最后一个问题\"></a>最后一个问题</h2><p>那么二维数组和二级指针是什么关系呢？？？</p>\n<p>首先声明一个二维数组和一个二维指针，我们把它打印出来</p>\n<h3 id=\"代码-3\"><a href=\"#代码-3\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> c[<span class=\"number\">3</span>][<span class=\"number\">3</span>] = &#123; &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125; , &#123;<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>&#125;, &#123;<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>&#125;&#125;;</div><div class=\"line\">    <span class=\"keyword\">int</span>** a = (<span class=\"keyword\">int</span>**)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>*)*<span class=\"number\">9</span>);</div><div class=\"line\">    <span class=\"keyword\">int</span>** current = a;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> *tmp = (<span class=\"keyword\">int</span>*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>)*<span class=\"number\">3</span>);</div><div class=\"line\">        *a = tmp;</div><div class=\"line\">        a++;</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">3</span>; j++)</div><div class=\"line\">        &#123;</div><div class=\"line\">            (*tmp) = j+i;</div><div class=\"line\">            tmp++;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"current%p\\n\"</span>, current);</div><div class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"current0%p\\n\"</span>, current[<span class=\"number\">0</span>]);</div><div class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"c:%p\\n\"</span>, c);</div><div class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"c:%p\\n\"</span>, c+<span class=\"number\">1</span>);</div><div class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"c0:%p\\n\"</span>, c[<span class=\"number\">0</span>]);</div><div class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"c0:%p\\n\"</span>, c[<span class=\"number\">0</span>]+<span class=\"number\">1</span>);</div><div class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"c00:%d\\n\"</span>, c[<span class=\"number\">0</span>][<span class=\"number\">0</span>]);</div><div class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"c00:%p\\n\"</span>, &amp;c[<span class=\"number\">0</span>][<span class=\"number\">0</span>]);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"返回结果-2\"><a href=\"#返回结果-2\" class=\"headerlink\" title=\"返回结果\"></a>返回结果</h3><p><img src=\"/photo/img/c语言多维数组传参问题/result5.png\" alt=\"image\"></p>\n<p>首先数组<code>c</code>存储的是一个占用两个int大小对象的地址。<code>c[0]</code>存储的是一个占用一个int大小对象的地址。因为<code>c</code>与<code>c[0]</code>存储的都是数组元素的首地址所以所以<code>c</code>与<code>c[0]</code>所存地址相同，但是他们所存储对象的大小不同。从输出的<strong>c+1</strong>和<strong>c[0]+1</strong>就可以看出来（这里的+1是指按照一个对象长度寻址）</p>\n<p>再看看malloc申请出来的二级指针，压根<code>current</code> 与<code>current[0]</code>所存储的地址不一样，所以肯定无法像直接申请数组按照连续内存寻址找到所需数值。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>刷题遇到个问题，需要传递一个二维数组作为实参。函数如下</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span>* <span class=\"title\">spiralOrder</span><span class=\"params\">(<span class=\"keyword\">int</span>** matrix, <span class=\"keyword\">int</span> matrixRowSize, <span class=\"keyword\">int</span> matrixColSize)</span> </span>&#123;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>遇到的问题是如果我直接<code>int matrix[3][3]</code>声明，然后传递参数，在<code>spiralOrder</code>无法用matrix[3][3]的形式调用。代码如下</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span>* <span class=\"title\">spiralOrder</span><span class=\"params\">(<span class=\"keyword\">int</span>** matrix, <span class=\"keyword\">int</span> matrixRowSize, <span class=\"keyword\">int</span> matrixColSize)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span>* ret;</div><div class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"matrix:%d\\n\"</span>,*(*(matrix+<span class=\"number\">0</span>)+<span class=\"number\">2</span>));</div><div class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"matrix:%d\\n\"</span>, matrix[<span class=\"number\">2</span>][<span class=\"number\">2</span>]);</div><div class=\"line\">    <span class=\"keyword\">return</span>  ret;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> c[<span class=\"number\">3</span>][<span class=\"number\">3</span>] = &#123; &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125; , &#123;<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>&#125;, &#123;<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>&#125;&#125;;</div><div class=\"line\"></div><div class=\"line\">    spiralOrder((<span class=\"keyword\">int</span>**)c, <span class=\"number\">3</span>, <span class=\"number\">3</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在<code>spiralOrder</code>打印的时候报错如下：</p>\n<p><img src=\"/photo/img/c语言多维数组传参问题/bug1.png\" alt=\"image\"><br>当然c primer也明确指出，数组当做实参传递时，当做指针处理。所以说上述问题在于把数组当成二重指针处理当然没法处理了。以为数组可以当做指针，其实二维数组也是可以当做指针。<br>那么二维数组如何作为实参传递呢？</p>\n<h2 id=\"方法一\"><a href=\"#方法一\" class=\"headerlink\" title=\"方法一\"></a>方法一</h2><blockquote>\n<p>多维数组以指向 0 号元素的指针方式传递。多维数组的 元素本身就是数组。除了第一维以外的所有维的长度都是元素类型的一部分，必须明确指定.—C++ Primer</p>\n</blockquote>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">void spiralOrder1(int matrix[][<span class=\"number\">3</span>], int matrixRowSize, int matrixColSize) &#123;</div><div class=\"line\">    printf(<span class=\"string\">\"matrix:%d<span class=\"subst\">\\n</span>\"</span>, matrix[<span class=\"number\">0</span>][<span class=\"number\">0</span>]);</div><div class=\"line\">    printf(<span class=\"string\">\"matrix:%d<span class=\"subst\">\\n</span>\"</span>, matrix[<span class=\"number\">1</span>][<span class=\"number\">1</span>]);</div><div class=\"line\">    printf(<span class=\"string\">\"matrix:%d<span class=\"subst\">\\n</span>\"</span>, matrix[<span class=\"number\">2</span>][<span class=\"number\">2</span>]);</div><div class=\"line\">    return ;</div><div class=\"line\">&#125;</div><div class=\"line\">int main()&#123;</div><div class=\"line\">    int c[<span class=\"number\">3</span>][<span class=\"number\">3</span>] = &#123; &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125; , &#123;<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>&#125;, &#123;<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>&#125;&#125;;</div><div class=\"line\">    spiralOrder1(c, <span class=\"number\">3</span>, <span class=\"number\">3</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>因为形参是<code>(int matrix[][3]</code>所以编译器知道它按照二维数组的方式寻址。</p>\n<h3 id=\"返回结果\"><a href=\"#返回结果\" class=\"headerlink\" title=\"返回结果\"></a>返回结果</h3><p><img src=\"/photo/img/c语言多维数组传参问题/result2.png\" alt=\"image\"></p>\n<h2 id=\"方法二——指针的形式\"><a href=\"#方法二——指针的形式\" class=\"headerlink\" title=\"方法二——指针的形式\"></a>方法二——指针的形式</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">spiralOrder1</span><span class=\"params\">(<span class=\"keyword\">int</span>* matrix, <span class=\"keyword\">int</span> matrixRowSize, <span class=\"keyword\">int</span> matrixColSize)</span> </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"matrix:%d\\n\"</span>, matrix[<span class=\"number\">0</span>]);</div><div class=\"line\">    <span class=\"keyword\">return</span> ;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> c[<span class=\"number\">3</span>][<span class=\"number\">3</span>] = &#123; &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125; , &#123;<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>&#125;, &#123;<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>&#125;&#125;;</div><div class=\"line\">    spiralOrder1((<span class=\"keyword\">int</span>*)c, <span class=\"number\">3</span>, <span class=\"number\">3</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><img src=\"/photo/img/c语言多维数组传参问题/result1.png\" alt=\"image\"></p>\n<p>所以当形参是<code>int*</code>的情况下，二维数组可以通过[i]的形式访问，也可以通过<em>(i</em>j+j)(规整的二维数组)的方式访问，其中i、j可以通过传参的形式传入。<br><strong>原因是直接定义的数组是在程序的堆栈区，数据占用连续的空间，所以可以使用上述方式寻址。</strong></p>\n<h2 id=\"方法三\"><a href=\"#方法三\" class=\"headerlink\" title=\"方法三\"></a>方法三</h2><p>如果上述都不满足需求的话，还有一种方式——通过二级指针的形式。</p>\n<h3 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span>* <span class=\"title\">spiralOrder</span><span class=\"params\">(<span class=\"keyword\">int</span>** matrix, <span class=\"keyword\">int</span> matrixRowSize, <span class=\"keyword\">int</span> matrixColSize)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span>* ret;</div><div class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"matrix:%d\\n\"</span>,*(*(matrix+<span class=\"number\">0</span>)+<span class=\"number\">2</span>));</div><div class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"matrix:%d\\n\"</span>, matrix[<span class=\"number\">2</span>][<span class=\"number\">2</span>]);</div><div class=\"line\">    <span class=\"keyword\">return</span>  ret;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span>** a = (<span class=\"keyword\">int</span>**)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>*)*<span class=\"number\">9</span>);</div><div class=\"line\">    <span class=\"keyword\">int</span>** current = a;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> *tmp = (<span class=\"keyword\">int</span>*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>)*<span class=\"number\">3</span>);</div><div class=\"line\">        *a = tmp;</div><div class=\"line\">        a++;</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">3</span>; j++)</div><div class=\"line\">        &#123;</div><div class=\"line\">            (*tmp) = j+i;</div><div class=\"line\">            tmp++;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    spiralOrder(current, <span class=\"number\">3</span>, <span class=\"number\">3</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"返回结果-1\"><a href=\"#返回结果-1\" class=\"headerlink\" title=\"返回结果\"></a>返回结果</h3><p><img src=\"/photo/img/c语言多维数组传参问题/result3.png\" alt=\"image\"><br>返回结果<br>如果形参是二级指针的形式，可以通过<code>[][]</code>的形式访问数组，当然这里必须要控制二维数组范围。也可以通过<code>*(*(matrix+0)+2))</code>方式访问。是否可以像上一个方法中提到的 \b通过连续的内存地址 去访问？</p>\n<h3 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span>* <span class=\"title\">spiralOrder</span><span class=\"params\">(<span class=\"keyword\">int</span>** matrix, <span class=\"keyword\">int</span> matrixRowSize, <span class=\"keyword\">int</span> matrixColSize)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span>* ret;</div><div class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"matrix:%d\\n\"</span>, *(*(matrix+<span class=\"number\">2</span>)));</div><div class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"matrix:%d\\n\"</span>, *(*(matrix+<span class=\"number\">4</span>)));</div><div class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"matrix:%d\\n\"</span>, matrix[<span class=\"number\">0</span>]);</div><div class=\"line\">    <span class=\"keyword\">return</span>  ret;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span>** a = (<span class=\"keyword\">int</span>**)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>*)*<span class=\"number\">9</span>);</div><div class=\"line\">    <span class=\"keyword\">int</span>** current = a;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> *tmp = (<span class=\"keyword\">int</span>*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>)*<span class=\"number\">3</span>);</div><div class=\"line\">        *a = tmp;</div><div class=\"line\">        a++;</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">3</span>; j++)</div><div class=\"line\">        &#123;</div><div class=\"line\">            (*tmp) = j+i;</div><div class=\"line\">            tmp++;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    spiralOrder(current, <span class=\"number\">3</span>, <span class=\"number\">3</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>返回结果<br><img src=\"/photo/img/c语言多维数组传参问题/result4.png\" alt=\"image\"></p>\n<p>首先它是一个二维数组以一维数组的形式访问打印出来是一个内存地址。为什么<code>*(*(matrix+2))</code>打印出来是对的数值，而<code>*(*(matrix+4))</code>却是内存地址呢？ 因为<strong>malloc动态申请出来的数组是在系统的远堆上（far heap）,元素不是连续的，导致无法按照连续内存访问</strong></p>\n<h2 id=\"最后一个问题\"><a href=\"#最后一个问题\" class=\"headerlink\" title=\"最后一个问题\"></a>最后一个问题</h2><p>那么二维数组和二级指针是什么关系呢？？？</p>\n<p>首先声明一个二维数组和一个二维指针，我们把它打印出来</p>\n<h3 id=\"代码-3\"><a href=\"#代码-3\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> c[<span class=\"number\">3</span>][<span class=\"number\">3</span>] = &#123; &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125; , &#123;<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>&#125;, &#123;<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>&#125;&#125;;</div><div class=\"line\">    <span class=\"keyword\">int</span>** a = (<span class=\"keyword\">int</span>**)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>*)*<span class=\"number\">9</span>);</div><div class=\"line\">    <span class=\"keyword\">int</span>** current = a;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> *tmp = (<span class=\"keyword\">int</span>*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>)*<span class=\"number\">3</span>);</div><div class=\"line\">        *a = tmp;</div><div class=\"line\">        a++;</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">3</span>; j++)</div><div class=\"line\">        &#123;</div><div class=\"line\">            (*tmp) = j+i;</div><div class=\"line\">            tmp++;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"current%p\\n\"</span>, current);</div><div class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"current0%p\\n\"</span>, current[<span class=\"number\">0</span>]);</div><div class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"c:%p\\n\"</span>, c);</div><div class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"c:%p\\n\"</span>, c+<span class=\"number\">1</span>);</div><div class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"c0:%p\\n\"</span>, c[<span class=\"number\">0</span>]);</div><div class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"c0:%p\\n\"</span>, c[<span class=\"number\">0</span>]+<span class=\"number\">1</span>);</div><div class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"c00:%d\\n\"</span>, c[<span class=\"number\">0</span>][<span class=\"number\">0</span>]);</div><div class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"c00:%p\\n\"</span>, &amp;c[<span class=\"number\">0</span>][<span class=\"number\">0</span>]);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"返回结果-2\"><a href=\"#返回结果-2\" class=\"headerlink\" title=\"返回结果\"></a>返回结果</h3><p><img src=\"/photo/img/c语言多维数组传参问题/result5.png\" alt=\"image\"></p>\n<p>首先数组<code>c</code>存储的是一个占用两个int大小对象的地址。<code>c[0]</code>存储的是一个占用一个int大小对象的地址。因为<code>c</code>与<code>c[0]</code>存储的都是数组元素的首地址所以所以<code>c</code>与<code>c[0]</code>所存地址相同，但是他们所存储对象的大小不同。从输出的<strong>c+1</strong>和<strong>c[0]+1</strong>就可以看出来（这里的+1是指按照一个对象长度寻址）</p>\n<p>再看看malloc申请出来的二级指针，压根<code>current</code> 与<code>current[0]</code>所存储的地址不一样，所以肯定无法像直接申请数组按照连续内存寻址找到所需数值。</p>\n"},{"title":"算法-三角形最小路径和","date":"2018-01-15T08:51:56.000Z","toc":true,"_content":"\n## 题目\n\n## 思路\n\n## 代码\n```c\nchar* getPermutation(int n, int k) {\n    char* result = (char*)malloc((n + 1) * sizeof(char));\n    bool* flag = (bool*)calloc(n, sizeof(bool));\n    int temp[10] = { 0 };\n    temp[n] = 1;\n    temp[n - 1] = 1;\n    int i = 0, t = 0, idx = 0, j = 0;\n    for(i = n - 2; i > 0; i--)\n        temp[i] = temp[i + 1] * (n - i);\n    for(i = 1; i <= n; i++) {\n        t = (k - 1) / temp[i];\n        idx = t;\n        for(j = 1; j <= n; j++) {\n            //取当前最小的未使用的数值\n            if(!flag[j]) {\n                t--;\n                if(t == -1)\n                    break;\n            }\n        }\n        result[i - 1] = '0' + j;\n        flag[j] = true;\n        k -= idx * temp[i];\n    }\n    result[n] = '\\0';\n    free(flag);\n    return result;\n}\n```","source":"_posts/算法-三角形最小路径和.md","raw":"---\ntitle: 算法-三角形最小路径和\ndate: 2018-01-15 16:51:56\ntags: 算法\ncategories: 算法\ntoc: true\n---\n\n## 题目\n\n## 思路\n\n## 代码\n```c\nchar* getPermutation(int n, int k) {\n    char* result = (char*)malloc((n + 1) * sizeof(char));\n    bool* flag = (bool*)calloc(n, sizeof(bool));\n    int temp[10] = { 0 };\n    temp[n] = 1;\n    temp[n - 1] = 1;\n    int i = 0, t = 0, idx = 0, j = 0;\n    for(i = n - 2; i > 0; i--)\n        temp[i] = temp[i + 1] * (n - i);\n    for(i = 1; i <= n; i++) {\n        t = (k - 1) / temp[i];\n        idx = t;\n        for(j = 1; j <= n; j++) {\n            //取当前最小的未使用的数值\n            if(!flag[j]) {\n                t--;\n                if(t == -1)\n                    break;\n            }\n        }\n        result[i - 1] = '0' + j;\n        flag[j] = true;\n        k -= idx * temp[i];\n    }\n    result[n] = '\\0';\n    free(flag);\n    return result;\n}\n```","slug":"算法-三角形最小路径和","published":1,"updated":"2019-02-21T03:49:34.717Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjswwkdqo0033g7wwnloia3bd","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">char</span>* <span class=\"title\">getPermutation</span><span class=\"params\">(<span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> k)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">char</span>* result = (<span class=\"keyword\">char</span>*)<span class=\"built_in\">malloc</span>((n + <span class=\"number\">1</span>) * <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">char</span>));</div><div class=\"line\">    <span class=\"keyword\">bool</span>* flag = (<span class=\"keyword\">bool</span>*)<span class=\"built_in\">calloc</span>(n, <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">bool</span>));</div><div class=\"line\">    <span class=\"keyword\">int</span> temp[<span class=\"number\">10</span>] = &#123; <span class=\"number\">0</span> &#125;;</div><div class=\"line\">    temp[n] = <span class=\"number\">1</span>;</div><div class=\"line\">    temp[n - <span class=\"number\">1</span>] = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>, t = <span class=\"number\">0</span>, idx = <span class=\"number\">0</span>, j = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span>(i = n - <span class=\"number\">2</span>; i &gt; <span class=\"number\">0</span>; i--)</div><div class=\"line\">        temp[i] = temp[i + <span class=\"number\">1</span>] * (n - i);</div><div class=\"line\">    <span class=\"keyword\">for</span>(i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</div><div class=\"line\">        t = (k - <span class=\"number\">1</span>) / temp[i];</div><div class=\"line\">        idx = t;</div><div class=\"line\">        <span class=\"keyword\">for</span>(j = <span class=\"number\">1</span>; j &lt;= n; j++) &#123;</div><div class=\"line\">            <span class=\"comment\">//取当前最小的未使用的数值</span></div><div class=\"line\">            <span class=\"keyword\">if</span>(!flag[j]) &#123;</div><div class=\"line\">                t--;</div><div class=\"line\">                <span class=\"keyword\">if</span>(t == <span class=\"number\">-1</span>)</div><div class=\"line\">                    <span class=\"keyword\">break</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        result[i - <span class=\"number\">1</span>] = <span class=\"string\">'0'</span> + j;</div><div class=\"line\">        flag[j] = <span class=\"literal\">true</span>;</div><div class=\"line\">        k -= idx * temp[i];</div><div class=\"line\">    &#125;</div><div class=\"line\">    result[n] = <span class=\"string\">'\\0'</span>;</div><div class=\"line\">    <span class=\"built_in\">free</span>(flag);</div><div class=\"line\">    <span class=\"keyword\">return</span> result;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">char</span>* <span class=\"title\">getPermutation</span><span class=\"params\">(<span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> k)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">char</span>* result = (<span class=\"keyword\">char</span>*)<span class=\"built_in\">malloc</span>((n + <span class=\"number\">1</span>) * <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">char</span>));</div><div class=\"line\">    <span class=\"keyword\">bool</span>* flag = (<span class=\"keyword\">bool</span>*)<span class=\"built_in\">calloc</span>(n, <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">bool</span>));</div><div class=\"line\">    <span class=\"keyword\">int</span> temp[<span class=\"number\">10</span>] = &#123; <span class=\"number\">0</span> &#125;;</div><div class=\"line\">    temp[n] = <span class=\"number\">1</span>;</div><div class=\"line\">    temp[n - <span class=\"number\">1</span>] = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>, t = <span class=\"number\">0</span>, idx = <span class=\"number\">0</span>, j = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span>(i = n - <span class=\"number\">2</span>; i &gt; <span class=\"number\">0</span>; i--)</div><div class=\"line\">        temp[i] = temp[i + <span class=\"number\">1</span>] * (n - i);</div><div class=\"line\">    <span class=\"keyword\">for</span>(i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</div><div class=\"line\">        t = (k - <span class=\"number\">1</span>) / temp[i];</div><div class=\"line\">        idx = t;</div><div class=\"line\">        <span class=\"keyword\">for</span>(j = <span class=\"number\">1</span>; j &lt;= n; j++) &#123;</div><div class=\"line\">            <span class=\"comment\">//取当前最小的未使用的数值</span></div><div class=\"line\">            <span class=\"keyword\">if</span>(!flag[j]) &#123;</div><div class=\"line\">                t--;</div><div class=\"line\">                <span class=\"keyword\">if</span>(t == <span class=\"number\">-1</span>)</div><div class=\"line\">                    <span class=\"keyword\">break</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        result[i - <span class=\"number\">1</span>] = <span class=\"string\">'0'</span> + j;</div><div class=\"line\">        flag[j] = <span class=\"literal\">true</span>;</div><div class=\"line\">        k -= idx * temp[i];</div><div class=\"line\">    &#125;</div><div class=\"line\">    result[n] = <span class=\"string\">'\\0'</span>;</div><div class=\"line\">    <span class=\"built_in\">free</span>(flag);</div><div class=\"line\">    <span class=\"keyword\">return</span> result;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"数据库隔离级别","date":"2018-04-23T12:34:25.000Z","toc":true,"_content":"\nSQL标准规范中定义了四种数据库隔离级别。每种隔离级别带来的系统开销是不一样的。通常较低的隔离级别的系统开销会更低，可以执行更高的并发。\n\n## READ COMMITTED(未提交读)\n顾名思义，未提交读隔离级别中，事物的修改即使没有提交，对其他事务也是可见的。事务可以读取为未提交的数据，也成为`脏读`。READ COMMITED 性能上不会有跟很大的优势，但是却会导致很多的问题，在实际应用中很少使用。\n\neg:\n业务场景支付扣款。当用户统一时刻发生一笔充值500，和一笔扣款200业务时。 扣款读到是未执行的充值事务金额，账户余额500元，但是充值事务回滚了，这种情况下数据出现问题，所以未提交读是一种不可靠的事务。\n\n\n## READ COMMITED(提交读)\n多数数据库的隔离级是提交读(比如Sql Server , Oracle)，但是mysql不是。\n提交读的含义是：一个事务只能看到已经提交的事务所做的修改。也就是说事务和事务之前在提交前是相互不可见的。这个级别又称为不可重复读，因为每次读取的结果可能是不一样的。\n\neg:\n当我们拿着银行卡去消费时候，查询到卡里还有2000元，这时准备消费。与此同时这张卡的钱被老婆转账了（已经转出去2000元），当我们在扣款你的时候会提示余额不足。\n提交读避免了`脏读`，但是却产生了`不可重复读`（同一事务内）。\n\n## Repeatable read （重复读）\n\n重复读，保证了在同一个事务内读取同一条数据是不变的，但是却无法保证我们读取（同一事务内）同一表里的数据量是一致的。但是却会产生幻读（幻行）。\n\n例如消费记录表，我们在打印信用卡的消费记录时查询出来只有一条消费记录80（这是另外一个事务无法改变的），但是在我们打印的时候，老婆又消费了1000元（另外一个事务，但是没有对原来的80元进行修改），我们打印出来的结果是两条记录 80 +1000，这就是幻行。\n\n\n\n## Serializable （序列化）\nSerializable 通过强制事务串行执行避免了欢读。但是Serializable在执行的时候会对每一样的数据都加上锁，会导致大量的超时和锁竞争。只有在数据一致性非常重要，且并发不是很大情况选，可以选用这种隔离级别。\n\n\n## 几个名词\n\n### 脏读\n指的是在A事务内，多次读取同一一个数据。与此同时还有另外一个B事务对同一数据进行了修改，但是未提交。这时就会产生事务A两次读取的数据不一致，一个是事务B未执行前的数据，一个是读取事务B未提交的数据。\n\n### 不可重复读。\n指的是同一事务内，无法对同一个数据多次读取，因为两次读取可能是不一致的（因为没有对 数据写 加锁）。\n\n### 幻读\n\n幻读是在`可重复读`的隔离级别下产生的问题。`可重复读`虽然对数据加写锁，但是却没对表加锁，造成每次读取表的数据量是不一致的，所以又称`幻行`。\n","source":"_posts/数据库隔离级别.md","raw":"---\ntitle: 数据库隔离级别\ndate: 2018-04-23 20:34:25\ntags: 数据库\ntoc: true\ncategories: 数据库\n---\n\nSQL标准规范中定义了四种数据库隔离级别。每种隔离级别带来的系统开销是不一样的。通常较低的隔离级别的系统开销会更低，可以执行更高的并发。\n\n## READ COMMITTED(未提交读)\n顾名思义，未提交读隔离级别中，事物的修改即使没有提交，对其他事务也是可见的。事务可以读取为未提交的数据，也成为`脏读`。READ COMMITED 性能上不会有跟很大的优势，但是却会导致很多的问题，在实际应用中很少使用。\n\neg:\n业务场景支付扣款。当用户统一时刻发生一笔充值500，和一笔扣款200业务时。 扣款读到是未执行的充值事务金额，账户余额500元，但是充值事务回滚了，这种情况下数据出现问题，所以未提交读是一种不可靠的事务。\n\n\n## READ COMMITED(提交读)\n多数数据库的隔离级是提交读(比如Sql Server , Oracle)，但是mysql不是。\n提交读的含义是：一个事务只能看到已经提交的事务所做的修改。也就是说事务和事务之前在提交前是相互不可见的。这个级别又称为不可重复读，因为每次读取的结果可能是不一样的。\n\neg:\n当我们拿着银行卡去消费时候，查询到卡里还有2000元，这时准备消费。与此同时这张卡的钱被老婆转账了（已经转出去2000元），当我们在扣款你的时候会提示余额不足。\n提交读避免了`脏读`，但是却产生了`不可重复读`（同一事务内）。\n\n## Repeatable read （重复读）\n\n重复读，保证了在同一个事务内读取同一条数据是不变的，但是却无法保证我们读取（同一事务内）同一表里的数据量是一致的。但是却会产生幻读（幻行）。\n\n例如消费记录表，我们在打印信用卡的消费记录时查询出来只有一条消费记录80（这是另外一个事务无法改变的），但是在我们打印的时候，老婆又消费了1000元（另外一个事务，但是没有对原来的80元进行修改），我们打印出来的结果是两条记录 80 +1000，这就是幻行。\n\n\n\n## Serializable （序列化）\nSerializable 通过强制事务串行执行避免了欢读。但是Serializable在执行的时候会对每一样的数据都加上锁，会导致大量的超时和锁竞争。只有在数据一致性非常重要，且并发不是很大情况选，可以选用这种隔离级别。\n\n\n## 几个名词\n\n### 脏读\n指的是在A事务内，多次读取同一一个数据。与此同时还有另外一个B事务对同一数据进行了修改，但是未提交。这时就会产生事务A两次读取的数据不一致，一个是事务B未执行前的数据，一个是读取事务B未提交的数据。\n\n### 不可重复读。\n指的是同一事务内，无法对同一个数据多次读取，因为两次读取可能是不一致的（因为没有对 数据写 加锁）。\n\n### 幻读\n\n幻读是在`可重复读`的隔离级别下产生的问题。`可重复读`虽然对数据加写锁，但是却没对表加锁，造成每次读取表的数据量是不一致的，所以又称`幻行`。\n","slug":"数据库隔离级别","published":1,"updated":"2019-02-21T03:49:34.715Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjswwkdqq0035g7ww8bg5xe1d","content":"<p>SQL标准规范中定义了四种数据库隔离级别。每种隔离级别带来的系统开销是不一样的。通常较低的隔离级别的系统开销会更低，可以执行更高的并发。</p>\n<h2 id=\"READ-COMMITTED-未提交读\"><a href=\"#READ-COMMITTED-未提交读\" class=\"headerlink\" title=\"READ COMMITTED(未提交读)\"></a>READ COMMITTED(未提交读)</h2><p>顾名思义，未提交读隔离级别中，事物的修改即使没有提交，对其他事务也是可见的。事务可以读取为未提交的数据，也成为<code>脏读</code>。READ COMMITED 性能上不会有跟很大的优势，但是却会导致很多的问题，在实际应用中很少使用。</p>\n<p>eg:<br>业务场景支付扣款。当用户统一时刻发生一笔充值500，和一笔扣款200业务时。 扣款读到是未执行的充值事务金额，账户余额500元，但是充值事务回滚了，这种情况下数据出现问题，所以未提交读是一种不可靠的事务。</p>\n<h2 id=\"READ-COMMITED-提交读\"><a href=\"#READ-COMMITED-提交读\" class=\"headerlink\" title=\"READ COMMITED(提交读)\"></a>READ COMMITED(提交读)</h2><p>多数数据库的隔离级是提交读(比如Sql Server , Oracle)，但是mysql不是。<br>提交读的含义是：一个事务只能看到已经提交的事务所做的修改。也就是说事务和事务之前在提交前是相互不可见的。这个级别又称为不可重复读，因为每次读取的结果可能是不一样的。</p>\n<p>eg:<br>当我们拿着银行卡去消费时候，查询到卡里还有2000元，这时准备消费。与此同时这张卡的钱被老婆转账了（已经转出去2000元），当我们在扣款你的时候会提示余额不足。<br>提交读避免了<code>脏读</code>，但是却产生了<code>不可重复读</code>（同一事务内）。</p>\n<h2 id=\"Repeatable-read-（重复读）\"><a href=\"#Repeatable-read-（重复读）\" class=\"headerlink\" title=\"Repeatable read （重复读）\"></a>Repeatable read （重复读）</h2><p>重复读，保证了在同一个事务内读取同一条数据是不变的，但是却无法保证我们读取（同一事务内）同一表里的数据量是一致的。但是却会产生幻读（幻行）。</p>\n<p>例如消费记录表，我们在打印信用卡的消费记录时查询出来只有一条消费记录80（这是另外一个事务无法改变的），但是在我们打印的时候，老婆又消费了1000元（另外一个事务，但是没有对原来的80元进行修改），我们打印出来的结果是两条记录 80 +1000，这就是幻行。</p>\n<h2 id=\"Serializable-（序列化）\"><a href=\"#Serializable-（序列化）\" class=\"headerlink\" title=\"Serializable （序列化）\"></a>Serializable （序列化）</h2><p>Serializable 通过强制事务串行执行避免了欢读。但是Serializable在执行的时候会对每一样的数据都加上锁，会导致大量的超时和锁竞争。只有在数据一致性非常重要，且并发不是很大情况选，可以选用这种隔离级别。</p>\n<h2 id=\"几个名词\"><a href=\"#几个名词\" class=\"headerlink\" title=\"几个名词\"></a>几个名词</h2><h3 id=\"脏读\"><a href=\"#脏读\" class=\"headerlink\" title=\"脏读\"></a>脏读</h3><p>指的是在A事务内，多次读取同一一个数据。与此同时还有另外一个B事务对同一数据进行了修改，但是未提交。这时就会产生事务A两次读取的数据不一致，一个是事务B未执行前的数据，一个是读取事务B未提交的数据。</p>\n<h3 id=\"不可重复读。\"><a href=\"#不可重复读。\" class=\"headerlink\" title=\"不可重复读。\"></a>不可重复读。</h3><p>指的是同一事务内，无法对同一个数据多次读取，因为两次读取可能是不一致的（因为没有对 数据写 加锁）。</p>\n<h3 id=\"幻读\"><a href=\"#幻读\" class=\"headerlink\" title=\"幻读\"></a>幻读</h3><p>幻读是在<code>可重复读</code>的隔离级别下产生的问题。<code>可重复读</code>虽然对数据加写锁，但是却没对表加锁，造成每次读取表的数据量是不一致的，所以又称<code>幻行</code>。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>SQL标准规范中定义了四种数据库隔离级别。每种隔离级别带来的系统开销是不一样的。通常较低的隔离级别的系统开销会更低，可以执行更高的并发。</p>\n<h2 id=\"READ-COMMITTED-未提交读\"><a href=\"#READ-COMMITTED-未提交读\" class=\"headerlink\" title=\"READ COMMITTED(未提交读)\"></a>READ COMMITTED(未提交读)</h2><p>顾名思义，未提交读隔离级别中，事物的修改即使没有提交，对其他事务也是可见的。事务可以读取为未提交的数据，也成为<code>脏读</code>。READ COMMITED 性能上不会有跟很大的优势，但是却会导致很多的问题，在实际应用中很少使用。</p>\n<p>eg:<br>业务场景支付扣款。当用户统一时刻发生一笔充值500，和一笔扣款200业务时。 扣款读到是未执行的充值事务金额，账户余额500元，但是充值事务回滚了，这种情况下数据出现问题，所以未提交读是一种不可靠的事务。</p>\n<h2 id=\"READ-COMMITED-提交读\"><a href=\"#READ-COMMITED-提交读\" class=\"headerlink\" title=\"READ COMMITED(提交读)\"></a>READ COMMITED(提交读)</h2><p>多数数据库的隔离级是提交读(比如Sql Server , Oracle)，但是mysql不是。<br>提交读的含义是：一个事务只能看到已经提交的事务所做的修改。也就是说事务和事务之前在提交前是相互不可见的。这个级别又称为不可重复读，因为每次读取的结果可能是不一样的。</p>\n<p>eg:<br>当我们拿着银行卡去消费时候，查询到卡里还有2000元，这时准备消费。与此同时这张卡的钱被老婆转账了（已经转出去2000元），当我们在扣款你的时候会提示余额不足。<br>提交读避免了<code>脏读</code>，但是却产生了<code>不可重复读</code>（同一事务内）。</p>\n<h2 id=\"Repeatable-read-（重复读）\"><a href=\"#Repeatable-read-（重复读）\" class=\"headerlink\" title=\"Repeatable read （重复读）\"></a>Repeatable read （重复读）</h2><p>重复读，保证了在同一个事务内读取同一条数据是不变的，但是却无法保证我们读取（同一事务内）同一表里的数据量是一致的。但是却会产生幻读（幻行）。</p>\n<p>例如消费记录表，我们在打印信用卡的消费记录时查询出来只有一条消费记录80（这是另外一个事务无法改变的），但是在我们打印的时候，老婆又消费了1000元（另外一个事务，但是没有对原来的80元进行修改），我们打印出来的结果是两条记录 80 +1000，这就是幻行。</p>\n<h2 id=\"Serializable-（序列化）\"><a href=\"#Serializable-（序列化）\" class=\"headerlink\" title=\"Serializable （序列化）\"></a>Serializable （序列化）</h2><p>Serializable 通过强制事务串行执行避免了欢读。但是Serializable在执行的时候会对每一样的数据都加上锁，会导致大量的超时和锁竞争。只有在数据一致性非常重要，且并发不是很大情况选，可以选用这种隔离级别。</p>\n<h2 id=\"几个名词\"><a href=\"#几个名词\" class=\"headerlink\" title=\"几个名词\"></a>几个名词</h2><h3 id=\"脏读\"><a href=\"#脏读\" class=\"headerlink\" title=\"脏读\"></a>脏读</h3><p>指的是在A事务内，多次读取同一一个数据。与此同时还有另外一个B事务对同一数据进行了修改，但是未提交。这时就会产生事务A两次读取的数据不一致，一个是事务B未执行前的数据，一个是读取事务B未提交的数据。</p>\n<h3 id=\"不可重复读。\"><a href=\"#不可重复读。\" class=\"headerlink\" title=\"不可重复读。\"></a>不可重复读。</h3><p>指的是同一事务内，无法对同一个数据多次读取，因为两次读取可能是不一致的（因为没有对 数据写 加锁）。</p>\n<h3 id=\"幻读\"><a href=\"#幻读\" class=\"headerlink\" title=\"幻读\"></a>幻读</h3><p>幻读是在<code>可重复读</code>的隔离级别下产生的问题。<code>可重复读</code>虽然对数据加写锁，但是却没对表加锁，造成每次读取表的数据量是不一致的，所以又称<code>幻行</code>。</p>\n"},{"title":"算法-三数之和","date":"2018-01-28T04:23:30.000Z","toc":true,"_content":"## 题目\n### 英文\nGiven an array nums of n integers, are there elements a, b, c in nums such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.\n\nNote:\n\nThe solution set must not contain duplicate triplets.\n\nExample:\n\nGiven array nums = [-1, 0, 1, 2, -1, -4],\n\n```\nA solution set is:\n[\n  [-1, 0, 1],\n  [-1, -1, 2]\n]\n```\n\n### 中文\n给定一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，使得 a + b + c = 0 ？找出所有满足条件且不重复的三元组。\n\n注意：答案中不可以包含重复的三元组。\n\n例如, 给定数组 nums = [-1, 0, 1, 2, -1, -4]，\n\n满足要求的三元组集合为：\n\n```\n[\n  [-1, 0, 1],\n  [-1, -1, 2]\n]\n```\n## 思路\n- 对数据进行排序（将三数之和转化为两数之和，减少时间复杂度）\n- 遍历,取`当前节点`以及`当前节点右边非重复两个值`（这里利用双指针），比对三个值的和是否等于0。\n- 因为比对的结果是0，且除当前节点外的两个节点都大于当前节点，所以如果当前节点大于0，则停止遍历\n### 原思路\n暴力循环寻找最优解，但是时间复杂度变成n^3,会超时。\n### 优化思路\n- 首先对数组进行排序（最好快排）\n- 循环数组，当前节点为i\n- 定义两个指针 `j (j=i+1)`、 `k (k=numssize-1)`,依据条件（nums[j] + nums[j] + nums[k] == 0）遍历寻找最优解。\n- 如果最小节点i > 0，则无需继续循环。\n优化后代码时间复杂度由原来的n^3变为n^2\n\n## 代码\n\n```c\nvoid bubbleSort(int *nums, int lenNums) {\n    int i, j;\n    int tmp;\n    int flag = 1;\n    for (i = 0; i < lenNums; i++) {\n        for (j = 0; j < lenNums - 1; ++j) {\n            if (nums[j + 1] < nums[j]) {\n                tmp = nums[j + 1];\n                nums[j + 1] = nums[j];\n                nums[j] = tmp;\n                flag = 0;\n            }\n        }\n        if (flag == 1) {\n            break;\n        }\n    }\n}\n\n/**\n * Return an array of arrays of size *returnSize.\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint **threeSum(int *nums, int numsSize, int *returnSize) {\n    int i, j, k, m;\n    int **ret = malloc(sizeof(int ) * (numsSize*(numsSize-1)*(numsSize-2))/6);\n    *returnSize = 0;\n    bubbleSort(nums, numsSize);\n\n    for (i = 0; i < numsSize; i++) {\n        if (i > 0 && nums[i - 1] == nums[i]) {\n            continue;\n        }\n        if(nums[i] > 0)\n        {\n            break;\n        }\n        j = i + 1;\n        k = numsSize - 1;\n        while (k > j) {\n\n            if (nums[j] + nums[k] + nums[i]== 0) {\n                ret[*returnSize] = (int *) malloc(sizeof(int) * 3);\n                ret[*returnSize][0] = nums[i];\n                ret[*returnSize][1] = nums[j];\n                ret[*returnSize][2] = nums[k];\n                j++;\n                k--;\n                (*returnSize)++;\n                while (j < k && nums[j] == nums[j - 1]) {\n                    j++;\n                }\n                while (j < k && nums[k] == nums[k + 1]) {\n                    k--;\n                }\n                continue;\n            }\n            if (nums[j] + nums[k] + nums[i] > 0) {\n                k--;\n                continue;\n            }\n            if (nums[j] + nums[k] + nums[i] < 0) {\n                j++;\n                continue;\n            }\n\n        }\n    }\n    return ret;\n}\n```","source":"_posts/算法-三数之和.md","raw":"---\ntitle: 算法-三数之和\ndate: 2018-01-28 12:23:30\ntags: 算法\ncategories: 算法\ntoc: true\n---\n## 题目\n### 英文\nGiven an array nums of n integers, are there elements a, b, c in nums such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.\n\nNote:\n\nThe solution set must not contain duplicate triplets.\n\nExample:\n\nGiven array nums = [-1, 0, 1, 2, -1, -4],\n\n```\nA solution set is:\n[\n  [-1, 0, 1],\n  [-1, -1, 2]\n]\n```\n\n### 中文\n给定一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，使得 a + b + c = 0 ？找出所有满足条件且不重复的三元组。\n\n注意：答案中不可以包含重复的三元组。\n\n例如, 给定数组 nums = [-1, 0, 1, 2, -1, -4]，\n\n满足要求的三元组集合为：\n\n```\n[\n  [-1, 0, 1],\n  [-1, -1, 2]\n]\n```\n## 思路\n- 对数据进行排序（将三数之和转化为两数之和，减少时间复杂度）\n- 遍历,取`当前节点`以及`当前节点右边非重复两个值`（这里利用双指针），比对三个值的和是否等于0。\n- 因为比对的结果是0，且除当前节点外的两个节点都大于当前节点，所以如果当前节点大于0，则停止遍历\n### 原思路\n暴力循环寻找最优解，但是时间复杂度变成n^3,会超时。\n### 优化思路\n- 首先对数组进行排序（最好快排）\n- 循环数组，当前节点为i\n- 定义两个指针 `j (j=i+1)`、 `k (k=numssize-1)`,依据条件（nums[j] + nums[j] + nums[k] == 0）遍历寻找最优解。\n- 如果最小节点i > 0，则无需继续循环。\n优化后代码时间复杂度由原来的n^3变为n^2\n\n## 代码\n\n```c\nvoid bubbleSort(int *nums, int lenNums) {\n    int i, j;\n    int tmp;\n    int flag = 1;\n    for (i = 0; i < lenNums; i++) {\n        for (j = 0; j < lenNums - 1; ++j) {\n            if (nums[j + 1] < nums[j]) {\n                tmp = nums[j + 1];\n                nums[j + 1] = nums[j];\n                nums[j] = tmp;\n                flag = 0;\n            }\n        }\n        if (flag == 1) {\n            break;\n        }\n    }\n}\n\n/**\n * Return an array of arrays of size *returnSize.\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint **threeSum(int *nums, int numsSize, int *returnSize) {\n    int i, j, k, m;\n    int **ret = malloc(sizeof(int ) * (numsSize*(numsSize-1)*(numsSize-2))/6);\n    *returnSize = 0;\n    bubbleSort(nums, numsSize);\n\n    for (i = 0; i < numsSize; i++) {\n        if (i > 0 && nums[i - 1] == nums[i]) {\n            continue;\n        }\n        if(nums[i] > 0)\n        {\n            break;\n        }\n        j = i + 1;\n        k = numsSize - 1;\n        while (k > j) {\n\n            if (nums[j] + nums[k] + nums[i]== 0) {\n                ret[*returnSize] = (int *) malloc(sizeof(int) * 3);\n                ret[*returnSize][0] = nums[i];\n                ret[*returnSize][1] = nums[j];\n                ret[*returnSize][2] = nums[k];\n                j++;\n                k--;\n                (*returnSize)++;\n                while (j < k && nums[j] == nums[j - 1]) {\n                    j++;\n                }\n                while (j < k && nums[k] == nums[k + 1]) {\n                    k--;\n                }\n                continue;\n            }\n            if (nums[j] + nums[k] + nums[i] > 0) {\n                k--;\n                continue;\n            }\n            if (nums[j] + nums[k] + nums[i] < 0) {\n                j++;\n                continue;\n            }\n\n        }\n    }\n    return ret;\n}\n```","slug":"算法-三数之和","published":1,"updated":"2019-02-21T03:49:34.716Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjswwkdqr0038g7wwxw87qou9","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><h3 id=\"英文\"><a href=\"#英文\" class=\"headerlink\" title=\"英文\"></a>英文</h3><p>Given an array nums of n integers, are there elements a, b, c in nums such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.</p>\n<p>Note:</p>\n<p>The solution set must not contain duplicate triplets.</p>\n<p>Example:</p>\n<p>Given array nums = [-1, 0, 1, 2, -1, -4],</p>\n<figure class=\"highlight inform7\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">A solution set <span class=\"keyword\">is</span>:</div><div class=\"line\"><span class=\"comment\">[</span></div><div class=\"line\">  <span class=\"comment\">[-1, 0, 1]</span>,</div><div class=\"line\">  <span class=\"comment\">[-1, -1, 2]</span></div><div class=\"line\">]</div></pre></td></tr></table></figure>\n<h3 id=\"中文\"><a href=\"#中文\" class=\"headerlink\" title=\"中文\"></a>中文</h3><p>给定一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，使得 a + b + c = 0 ？找出所有满足条件且不重复的三元组。</p>\n<p>注意：答案中不可以包含重复的三元组。</p>\n<p>例如, 给定数组 nums = [-1, 0, 1, 2, -1, -4]，</p>\n<p>满足要求的三元组集合为：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">[</div><div class=\"line\">  [<span class=\"number\">-1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>],</div><div class=\"line\">  [<span class=\"number\">-1</span>, <span class=\"number\">-1</span>, <span class=\"number\">2</span>]</div><div class=\"line\">]</div></pre></td></tr></table></figure>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><ul>\n<li>对数据进行排序（将三数之和转化为两数之和，减少时间复杂度）</li>\n<li>遍历,取<code>当前节点</code>以及<code>当前节点右边非重复两个值</code>（这里利用双指针），比对三个值的和是否等于0。</li>\n<li>因为比对的结果是0，且除当前节点外的两个节点都大于当前节点，所以如果当前节点大于0，则停止遍历<h3 id=\"原思路\"><a href=\"#原思路\" class=\"headerlink\" title=\"原思路\"></a>原思路</h3>暴力循环寻找最优解，但是时间复杂度变成n^3,会超时。<h3 id=\"优化思路\"><a href=\"#优化思路\" class=\"headerlink\" title=\"优化思路\"></a>优化思路</h3></li>\n<li>首先对数组进行排序（最好快排）</li>\n<li>循环数组，当前节点为i</li>\n<li>定义两个指针 <code>j (j=i+1)</code>、 <code>k (k=numssize-1)</code>,依据条件（nums[j] + nums[j] + nums[k] == 0）遍历寻找最优解。</li>\n<li>如果最小节点i &gt; 0，则无需继续循环。<br>优化后代码时间复杂度由原来的n^3变为n^2</li>\n</ul>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">bubbleSort</span><span class=\"params\">(<span class=\"keyword\">int</span> *nums, <span class=\"keyword\">int</span> lenNums)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> i, j;</div><div class=\"line\">    <span class=\"keyword\">int</span> tmp;</div><div class=\"line\">    <span class=\"keyword\">int</span> flag = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; lenNums; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (j = <span class=\"number\">0</span>; j &lt; lenNums - <span class=\"number\">1</span>; ++j) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (nums[j + <span class=\"number\">1</span>] &lt; nums[j]) &#123;</div><div class=\"line\">                tmp = nums[j + <span class=\"number\">1</span>];</div><div class=\"line\">                nums[j + <span class=\"number\">1</span>] = nums[j];</div><div class=\"line\">                nums[j] = tmp;</div><div class=\"line\">                flag = <span class=\"number\">0</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (flag == <span class=\"number\">1</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Return an array of arrays of size *returnSize.</div><div class=\"line\"> * Note: The returned array must be malloced, assume caller calls free().</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> **<span class=\"title\">threeSum</span><span class=\"params\">(<span class=\"keyword\">int</span> *nums, <span class=\"keyword\">int</span> numsSize, <span class=\"keyword\">int</span> *returnSize)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> i, j, k, m;</div><div class=\"line\">    <span class=\"keyword\">int</span> **ret = <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span> ) * (numsSize*(numsSize<span class=\"number\">-1</span>)*(numsSize<span class=\"number\">-2</span>))/<span class=\"number\">6</span>);</div><div class=\"line\">    *returnSize = <span class=\"number\">0</span>;</div><div class=\"line\">    bubbleSort(nums, numsSize);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; numsSize; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (i &gt; <span class=\"number\">0</span> &amp;&amp; nums[i - <span class=\"number\">1</span>] == nums[i]) &#123;</div><div class=\"line\">            <span class=\"keyword\">continue</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span>(nums[i] &gt; <span class=\"number\">0</span>)</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        j = i + <span class=\"number\">1</span>;</div><div class=\"line\">        k = numsSize - <span class=\"number\">1</span>;</div><div class=\"line\">        <span class=\"keyword\">while</span> (k &gt; j) &#123;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">if</span> (nums[j] + nums[k] + nums[i]== <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                ret[*returnSize] = (<span class=\"keyword\">int</span> *) <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>) * <span class=\"number\">3</span>);</div><div class=\"line\">                ret[*returnSize][<span class=\"number\">0</span>] = nums[i];</div><div class=\"line\">                ret[*returnSize][<span class=\"number\">1</span>] = nums[j];</div><div class=\"line\">                ret[*returnSize][<span class=\"number\">2</span>] = nums[k];</div><div class=\"line\">                j++;</div><div class=\"line\">                k--;</div><div class=\"line\">                (*returnSize)++;</div><div class=\"line\">                <span class=\"keyword\">while</span> (j &lt; k &amp;&amp; nums[j] == nums[j - <span class=\"number\">1</span>]) &#123;</div><div class=\"line\">                    j++;</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">while</span> (j &lt; k &amp;&amp; nums[k] == nums[k + <span class=\"number\">1</span>]) &#123;</div><div class=\"line\">                    k--;</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">continue</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">if</span> (nums[j] + nums[k] + nums[i] &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                k--;</div><div class=\"line\">                <span class=\"keyword\">continue</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">if</span> (nums[j] + nums[k] + nums[i] &lt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                j++;</div><div class=\"line\">                <span class=\"keyword\">continue</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> ret;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><h3 id=\"英文\"><a href=\"#英文\" class=\"headerlink\" title=\"英文\"></a>英文</h3><p>Given an array nums of n integers, are there elements a, b, c in nums such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.</p>\n<p>Note:</p>\n<p>The solution set must not contain duplicate triplets.</p>\n<p>Example:</p>\n<p>Given array nums = [-1, 0, 1, 2, -1, -4],</p>\n<figure class=\"highlight inform7\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">A solution set <span class=\"keyword\">is</span>:</div><div class=\"line\"><span class=\"comment\">[</span></div><div class=\"line\">  <span class=\"comment\">[-1, 0, 1]</span>,</div><div class=\"line\">  <span class=\"comment\">[-1, -1, 2]</span></div><div class=\"line\">]</div></pre></td></tr></table></figure>\n<h3 id=\"中文\"><a href=\"#中文\" class=\"headerlink\" title=\"中文\"></a>中文</h3><p>给定一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，使得 a + b + c = 0 ？找出所有满足条件且不重复的三元组。</p>\n<p>注意：答案中不可以包含重复的三元组。</p>\n<p>例如, 给定数组 nums = [-1, 0, 1, 2, -1, -4]，</p>\n<p>满足要求的三元组集合为：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">[</div><div class=\"line\">  [<span class=\"number\">-1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>],</div><div class=\"line\">  [<span class=\"number\">-1</span>, <span class=\"number\">-1</span>, <span class=\"number\">2</span>]</div><div class=\"line\">]</div></pre></td></tr></table></figure>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><ul>\n<li>对数据进行排序（将三数之和转化为两数之和，减少时间复杂度）</li>\n<li>遍历,取<code>当前节点</code>以及<code>当前节点右边非重复两个值</code>（这里利用双指针），比对三个值的和是否等于0。</li>\n<li>因为比对的结果是0，且除当前节点外的两个节点都大于当前节点，所以如果当前节点大于0，则停止遍历<h3 id=\"原思路\"><a href=\"#原思路\" class=\"headerlink\" title=\"原思路\"></a>原思路</h3>暴力循环寻找最优解，但是时间复杂度变成n^3,会超时。<h3 id=\"优化思路\"><a href=\"#优化思路\" class=\"headerlink\" title=\"优化思路\"></a>优化思路</h3></li>\n<li>首先对数组进行排序（最好快排）</li>\n<li>循环数组，当前节点为i</li>\n<li>定义两个指针 <code>j (j=i+1)</code>、 <code>k (k=numssize-1)</code>,依据条件（nums[j] + nums[j] + nums[k] == 0）遍历寻找最优解。</li>\n<li>如果最小节点i &gt; 0，则无需继续循环。<br>优化后代码时间复杂度由原来的n^3变为n^2</li>\n</ul>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">bubbleSort</span><span class=\"params\">(<span class=\"keyword\">int</span> *nums, <span class=\"keyword\">int</span> lenNums)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> i, j;</div><div class=\"line\">    <span class=\"keyword\">int</span> tmp;</div><div class=\"line\">    <span class=\"keyword\">int</span> flag = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; lenNums; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (j = <span class=\"number\">0</span>; j &lt; lenNums - <span class=\"number\">1</span>; ++j) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (nums[j + <span class=\"number\">1</span>] &lt; nums[j]) &#123;</div><div class=\"line\">                tmp = nums[j + <span class=\"number\">1</span>];</div><div class=\"line\">                nums[j + <span class=\"number\">1</span>] = nums[j];</div><div class=\"line\">                nums[j] = tmp;</div><div class=\"line\">                flag = <span class=\"number\">0</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (flag == <span class=\"number\">1</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Return an array of arrays of size *returnSize.</div><div class=\"line\"> * Note: The returned array must be malloced, assume caller calls free().</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> **<span class=\"title\">threeSum</span><span class=\"params\">(<span class=\"keyword\">int</span> *nums, <span class=\"keyword\">int</span> numsSize, <span class=\"keyword\">int</span> *returnSize)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> i, j, k, m;</div><div class=\"line\">    <span class=\"keyword\">int</span> **ret = <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span> ) * (numsSize*(numsSize<span class=\"number\">-1</span>)*(numsSize<span class=\"number\">-2</span>))/<span class=\"number\">6</span>);</div><div class=\"line\">    *returnSize = <span class=\"number\">0</span>;</div><div class=\"line\">    bubbleSort(nums, numsSize);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; numsSize; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (i &gt; <span class=\"number\">0</span> &amp;&amp; nums[i - <span class=\"number\">1</span>] == nums[i]) &#123;</div><div class=\"line\">            <span class=\"keyword\">continue</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span>(nums[i] &gt; <span class=\"number\">0</span>)</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        j = i + <span class=\"number\">1</span>;</div><div class=\"line\">        k = numsSize - <span class=\"number\">1</span>;</div><div class=\"line\">        <span class=\"keyword\">while</span> (k &gt; j) &#123;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">if</span> (nums[j] + nums[k] + nums[i]== <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                ret[*returnSize] = (<span class=\"keyword\">int</span> *) <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>) * <span class=\"number\">3</span>);</div><div class=\"line\">                ret[*returnSize][<span class=\"number\">0</span>] = nums[i];</div><div class=\"line\">                ret[*returnSize][<span class=\"number\">1</span>] = nums[j];</div><div class=\"line\">                ret[*returnSize][<span class=\"number\">2</span>] = nums[k];</div><div class=\"line\">                j++;</div><div class=\"line\">                k--;</div><div class=\"line\">                (*returnSize)++;</div><div class=\"line\">                <span class=\"keyword\">while</span> (j &lt; k &amp;&amp; nums[j] == nums[j - <span class=\"number\">1</span>]) &#123;</div><div class=\"line\">                    j++;</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">while</span> (j &lt; k &amp;&amp; nums[k] == nums[k + <span class=\"number\">1</span>]) &#123;</div><div class=\"line\">                    k--;</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">continue</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">if</span> (nums[j] + nums[k] + nums[i] &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                k--;</div><div class=\"line\">                <span class=\"keyword\">continue</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">if</span> (nums[j] + nums[k] + nums[i] &lt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                j++;</div><div class=\"line\">                <span class=\"keyword\">continue</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> ret;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"二叉树最近公共祖先","date":"2018-01-10T14:59:11.000Z","toc":true,"_content":"## 题目\n给定一个二叉树, 找到该树中两个指定节点的最近公共祖先。\n\n百度百科中最近公共祖先的定义为：“对于有根树 T 的两个结点 p、q，最近公共祖先表示为一个结点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（一个节点也可以是它自己的祖先）。”\n\n例如，给定如下二叉树:  root = [3,5,1,6,2,0,8,null,null,7,4]\n\n\n## 思路\n\n### 原有思路\n- 查询有两个子节点有两个目标节点的节点。\n- 然后查询当前节点的左右子节点，如果有一个子节点的子节点只包含一个目标节点，则他的父节点则为最近公共祖先。\n\n## 改良后思路\n- 目标节点一定存在于当前树。\n- 中序遍历所有节点，如果当前接电接点或者其子节点匹配到了目标节点，则返回当前节点。\n- 如果当前节点的左右节点分别匹配到了一个目标节点（root == null || p || q 直接返回root），则当前节点是最近公共祖先。\n## 代码\n\n`原版代码`\n\n```c\nint leftFist(struct TreeNode* root, struct TreeNode* p, struct TreeNode*  q) {\n    int ret = 0;\n    if(root->left) {\n        ret =  ret + leftFist(root->left, p, q);\n    } \n    \n    if(root->right){\n        ret = ret+ leftFist(root->right, p, q);\n    }\n    if(root == p) {\n        ret +=1;\n    }\n    if(root == q) {\n        ret +=1;\n    }\n    return ret;\n}\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\nstruct TreeNode* lowestCommonAncestor(struct TreeNode* root, struct TreeNode* p, struct TreeNode* q) {\n    struct TreeNode* retRoot = NULL ;\n    int retSum =  leftFist(root, p, q);\n    \n    if(retSum ==  2) {\n        int retSumleft = NULL;\n        if(root->left) {\n            retSumleft = leftFist(root->left, p, q);\n        }\n        if(0 < retSumleft &&  retSumleft < 2) {\n            // printf(\"retSumleft:%d,\", root->left->val);\n            return root;\n        }\n        \n        int retSumright = NULL;\n        if(root->right) {\n            retSumright = leftFist(root->right, p, q);\n        }\n        if(0 < retSumright && retSumright< 2) {\n            // printf(\"retSumright:%d\", root->right->val);\n            return root;\n        }\n    }\n    if(root->left) {\n        retRoot =  lowestCommonAncestor(root->left, p, q);\n        if(retRoot) {\n            return retRoot;\n        }\n    } \n    \n    if(root->right){\n        retRoot =  lowestCommonAncestor(root->right, p, q);\n        if(retRoot) {\n            return retRoot;\n        }\n    }\n    return retRoot;\n}\n\n```\nc语言让我跑了1888ms。。\n\n### 优化解\n\n```c\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\nstruct TreeNode* lowestCommonAncestor(struct TreeNode* root, struct TreeNode* p, struct TreeNode* q) {\n   if(root == NULL || root == p || root == q) {\n       return root;\n   }\n    struct TreeNode* left = lowestCommonAncestor(root->left, p ,q);\n    struct TreeNode* right = lowestCommonAncestor(root->right, p ,q);\n    \n    if(left == NULL && right == NULL) return NULL;\n    if(left != NULL && right != NULL) return root;\n    return (left == NULL ? right : left);\n}\n\n```\n\n`12ms`","source":"_posts/算法-二叉树最近公共祖先.md","raw":"---\ntitle: 二叉树最近公共祖先\ndate: 2018-01-10 22:59:11\ntags: 算法\ncategories: 算法\ntoc: true\n---\n## 题目\n给定一个二叉树, 找到该树中两个指定节点的最近公共祖先。\n\n百度百科中最近公共祖先的定义为：“对于有根树 T 的两个结点 p、q，最近公共祖先表示为一个结点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（一个节点也可以是它自己的祖先）。”\n\n例如，给定如下二叉树:  root = [3,5,1,6,2,0,8,null,null,7,4]\n\n\n## 思路\n\n### 原有思路\n- 查询有两个子节点有两个目标节点的节点。\n- 然后查询当前节点的左右子节点，如果有一个子节点的子节点只包含一个目标节点，则他的父节点则为最近公共祖先。\n\n## 改良后思路\n- 目标节点一定存在于当前树。\n- 中序遍历所有节点，如果当前接电接点或者其子节点匹配到了目标节点，则返回当前节点。\n- 如果当前节点的左右节点分别匹配到了一个目标节点（root == null || p || q 直接返回root），则当前节点是最近公共祖先。\n## 代码\n\n`原版代码`\n\n```c\nint leftFist(struct TreeNode* root, struct TreeNode* p, struct TreeNode*  q) {\n    int ret = 0;\n    if(root->left) {\n        ret =  ret + leftFist(root->left, p, q);\n    } \n    \n    if(root->right){\n        ret = ret+ leftFist(root->right, p, q);\n    }\n    if(root == p) {\n        ret +=1;\n    }\n    if(root == q) {\n        ret +=1;\n    }\n    return ret;\n}\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\nstruct TreeNode* lowestCommonAncestor(struct TreeNode* root, struct TreeNode* p, struct TreeNode* q) {\n    struct TreeNode* retRoot = NULL ;\n    int retSum =  leftFist(root, p, q);\n    \n    if(retSum ==  2) {\n        int retSumleft = NULL;\n        if(root->left) {\n            retSumleft = leftFist(root->left, p, q);\n        }\n        if(0 < retSumleft &&  retSumleft < 2) {\n            // printf(\"retSumleft:%d,\", root->left->val);\n            return root;\n        }\n        \n        int retSumright = NULL;\n        if(root->right) {\n            retSumright = leftFist(root->right, p, q);\n        }\n        if(0 < retSumright && retSumright< 2) {\n            // printf(\"retSumright:%d\", root->right->val);\n            return root;\n        }\n    }\n    if(root->left) {\n        retRoot =  lowestCommonAncestor(root->left, p, q);\n        if(retRoot) {\n            return retRoot;\n        }\n    } \n    \n    if(root->right){\n        retRoot =  lowestCommonAncestor(root->right, p, q);\n        if(retRoot) {\n            return retRoot;\n        }\n    }\n    return retRoot;\n}\n\n```\nc语言让我跑了1888ms。。\n\n### 优化解\n\n```c\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\nstruct TreeNode* lowestCommonAncestor(struct TreeNode* root, struct TreeNode* p, struct TreeNode* q) {\n   if(root == NULL || root == p || root == q) {\n       return root;\n   }\n    struct TreeNode* left = lowestCommonAncestor(root->left, p ,q);\n    struct TreeNode* right = lowestCommonAncestor(root->right, p ,q);\n    \n    if(left == NULL && right == NULL) return NULL;\n    if(left != NULL && right != NULL) return root;\n    return (left == NULL ? right : left);\n}\n\n```\n\n`12ms`","slug":"算法-二叉树最近公共祖先","published":1,"updated":"2019-02-21T03:49:34.717Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjswwkdqt003bg7wwzeyjezgs","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>给定一个二叉树, 找到该树中两个指定节点的最近公共祖先。</p>\n<p>百度百科中最近公共祖先的定义为：“对于有根树 T 的两个结点 p、q，最近公共祖先表示为一个结点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（一个节点也可以是它自己的祖先）。”</p>\n<p>例如，给定如下二叉树:  root = [3,5,1,6,2,0,8,null,null,7,4]</p>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><h3 id=\"原有思路\"><a href=\"#原有思路\" class=\"headerlink\" title=\"原有思路\"></a>原有思路</h3><ul>\n<li>查询有两个子节点有两个目标节点的节点。</li>\n<li>然后查询当前节点的左右子节点，如果有一个子节点的子节点只包含一个目标节点，则他的父节点则为最近公共祖先。</li>\n</ul>\n<h2 id=\"改良后思路\"><a href=\"#改良后思路\" class=\"headerlink\" title=\"改良后思路\"></a>改良后思路</h2><ul>\n<li>目标节点一定存在于当前树。</li>\n<li>中序遍历所有节点，如果当前接电接点或者其子节点匹配到了目标节点，则返回当前节点。</li>\n<li>如果当前节点的左右节点分别匹配到了一个目标节点（root == null || p || q 直接返回root），则当前节点是最近公共祖先。<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2></li>\n</ul>\n<p><code>原版代码</code></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">leftFist</span><span class=\"params\">(<span class=\"keyword\">struct</span> TreeNode* root, <span class=\"keyword\">struct</span> TreeNode* p, <span class=\"keyword\">struct</span> TreeNode*  q)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> ret = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span>(root-&gt;left) &#123;</div><div class=\"line\">        ret =  ret + leftFist(root-&gt;left, p, q);</div><div class=\"line\">    &#125; </div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">if</span>(root-&gt;right)&#123;</div><div class=\"line\">        ret = ret+ leftFist(root-&gt;right, p, q);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span>(root == p) &#123;</div><div class=\"line\">        ret +=<span class=\"number\">1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span>(root == q) &#123;</div><div class=\"line\">        ret +=<span class=\"number\">1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> ret;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Definition for a binary tree node.</div><div class=\"line\"> * struct TreeNode &#123;</div><div class=\"line\"> *     int val;</div><div class=\"line\"> *     struct TreeNode *left;</div><div class=\"line\"> *     struct TreeNode *right;</div><div class=\"line\"> * &#125;;</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">struct</span> TreeNode* <span class=\"title\">lowestCommonAncestor</span><span class=\"params\">(<span class=\"keyword\">struct</span> TreeNode* root, <span class=\"keyword\">struct</span> TreeNode* p, <span class=\"keyword\">struct</span> TreeNode* q)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">struct</span> TreeNode* retRoot = <span class=\"literal\">NULL</span> ;</div><div class=\"line\">    <span class=\"keyword\">int</span> retSum =  leftFist(root, p, q);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">if</span>(retSum ==  <span class=\"number\">2</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> retSumleft = <span class=\"literal\">NULL</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span>(root-&gt;left) &#123;</div><div class=\"line\">            retSumleft = leftFist(root-&gt;left, p, q);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"number\">0</span> &lt; retSumleft &amp;&amp;  retSumleft &lt; <span class=\"number\">2</span>) &#123;</div><div class=\"line\">            <span class=\"comment\">// printf(\"retSumleft:%d,\", root-&gt;left-&gt;val);</span></div><div class=\"line\">            <span class=\"keyword\">return</span> root;</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">int</span> retSumright = <span class=\"literal\">NULL</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span>(root-&gt;right) &#123;</div><div class=\"line\">            retSumright = leftFist(root-&gt;right, p, q);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"number\">0</span> &lt; retSumright &amp;&amp; retSumright&lt; <span class=\"number\">2</span>) &#123;</div><div class=\"line\">            <span class=\"comment\">// printf(\"retSumright:%d\", root-&gt;right-&gt;val);</span></div><div class=\"line\">            <span class=\"keyword\">return</span> root;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span>(root-&gt;left) &#123;</div><div class=\"line\">        retRoot =  lowestCommonAncestor(root-&gt;left, p, q);</div><div class=\"line\">        <span class=\"keyword\">if</span>(retRoot) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> retRoot;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125; </div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">if</span>(root-&gt;right)&#123;</div><div class=\"line\">        retRoot =  lowestCommonAncestor(root-&gt;right, p, q);</div><div class=\"line\">        <span class=\"keyword\">if</span>(retRoot) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> retRoot;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> retRoot;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>c语言让我跑了1888ms。。</p>\n<h3 id=\"优化解\"><a href=\"#优化解\" class=\"headerlink\" title=\"优化解\"></a>优化解</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Definition for a binary tree node.</div><div class=\"line\"> * struct TreeNode &#123;</div><div class=\"line\"> *     int val;</div><div class=\"line\"> *     struct TreeNode *left;</div><div class=\"line\"> *     struct TreeNode *right;</div><div class=\"line\"> * &#125;;</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">struct</span> TreeNode* <span class=\"title\">lowestCommonAncestor</span><span class=\"params\">(<span class=\"keyword\">struct</span> TreeNode* root, <span class=\"keyword\">struct</span> TreeNode* p, <span class=\"keyword\">struct</span> TreeNode* q)</span> </span>&#123;</div><div class=\"line\">   <span class=\"keyword\">if</span>(root == <span class=\"literal\">NULL</span> || root == p || root == q) &#123;</div><div class=\"line\">       <span class=\"keyword\">return</span> root;</div><div class=\"line\">   &#125;</div><div class=\"line\">    <span class=\"keyword\">struct</span> TreeNode* left = lowestCommonAncestor(root-&gt;left, p ,q);</div><div class=\"line\">    <span class=\"keyword\">struct</span> TreeNode* right = lowestCommonAncestor(root-&gt;right, p ,q);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">if</span>(left == <span class=\"literal\">NULL</span> &amp;&amp; right == <span class=\"literal\">NULL</span>) <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span>(left != <span class=\"literal\">NULL</span> &amp;&amp; right != <span class=\"literal\">NULL</span>) <span class=\"keyword\">return</span> root;</div><div class=\"line\">    <span class=\"keyword\">return</span> (left == <span class=\"literal\">NULL</span> ? right : left);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><code>12ms</code></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>给定一个二叉树, 找到该树中两个指定节点的最近公共祖先。</p>\n<p>百度百科中最近公共祖先的定义为：“对于有根树 T 的两个结点 p、q，最近公共祖先表示为一个结点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（一个节点也可以是它自己的祖先）。”</p>\n<p>例如，给定如下二叉树:  root = [3,5,1,6,2,0,8,null,null,7,4]</p>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><h3 id=\"原有思路\"><a href=\"#原有思路\" class=\"headerlink\" title=\"原有思路\"></a>原有思路</h3><ul>\n<li>查询有两个子节点有两个目标节点的节点。</li>\n<li>然后查询当前节点的左右子节点，如果有一个子节点的子节点只包含一个目标节点，则他的父节点则为最近公共祖先。</li>\n</ul>\n<h2 id=\"改良后思路\"><a href=\"#改良后思路\" class=\"headerlink\" title=\"改良后思路\"></a>改良后思路</h2><ul>\n<li>目标节点一定存在于当前树。</li>\n<li>中序遍历所有节点，如果当前接电接点或者其子节点匹配到了目标节点，则返回当前节点。</li>\n<li>如果当前节点的左右节点分别匹配到了一个目标节点（root == null || p || q 直接返回root），则当前节点是最近公共祖先。<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2></li>\n</ul>\n<p><code>原版代码</code></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">leftFist</span><span class=\"params\">(<span class=\"keyword\">struct</span> TreeNode* root, <span class=\"keyword\">struct</span> TreeNode* p, <span class=\"keyword\">struct</span> TreeNode*  q)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> ret = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span>(root-&gt;left) &#123;</div><div class=\"line\">        ret =  ret + leftFist(root-&gt;left, p, q);</div><div class=\"line\">    &#125; </div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">if</span>(root-&gt;right)&#123;</div><div class=\"line\">        ret = ret+ leftFist(root-&gt;right, p, q);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span>(root == p) &#123;</div><div class=\"line\">        ret +=<span class=\"number\">1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span>(root == q) &#123;</div><div class=\"line\">        ret +=<span class=\"number\">1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> ret;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Definition for a binary tree node.</div><div class=\"line\"> * struct TreeNode &#123;</div><div class=\"line\"> *     int val;</div><div class=\"line\"> *     struct TreeNode *left;</div><div class=\"line\"> *     struct TreeNode *right;</div><div class=\"line\"> * &#125;;</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">struct</span> TreeNode* <span class=\"title\">lowestCommonAncestor</span><span class=\"params\">(<span class=\"keyword\">struct</span> TreeNode* root, <span class=\"keyword\">struct</span> TreeNode* p, <span class=\"keyword\">struct</span> TreeNode* q)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">struct</span> TreeNode* retRoot = <span class=\"literal\">NULL</span> ;</div><div class=\"line\">    <span class=\"keyword\">int</span> retSum =  leftFist(root, p, q);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">if</span>(retSum ==  <span class=\"number\">2</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> retSumleft = <span class=\"literal\">NULL</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span>(root-&gt;left) &#123;</div><div class=\"line\">            retSumleft = leftFist(root-&gt;left, p, q);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"number\">0</span> &lt; retSumleft &amp;&amp;  retSumleft &lt; <span class=\"number\">2</span>) &#123;</div><div class=\"line\">            <span class=\"comment\">// printf(\"retSumleft:%d,\", root-&gt;left-&gt;val);</span></div><div class=\"line\">            <span class=\"keyword\">return</span> root;</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">int</span> retSumright = <span class=\"literal\">NULL</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span>(root-&gt;right) &#123;</div><div class=\"line\">            retSumright = leftFist(root-&gt;right, p, q);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"number\">0</span> &lt; retSumright &amp;&amp; retSumright&lt; <span class=\"number\">2</span>) &#123;</div><div class=\"line\">            <span class=\"comment\">// printf(\"retSumright:%d\", root-&gt;right-&gt;val);</span></div><div class=\"line\">            <span class=\"keyword\">return</span> root;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span>(root-&gt;left) &#123;</div><div class=\"line\">        retRoot =  lowestCommonAncestor(root-&gt;left, p, q);</div><div class=\"line\">        <span class=\"keyword\">if</span>(retRoot) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> retRoot;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125; </div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">if</span>(root-&gt;right)&#123;</div><div class=\"line\">        retRoot =  lowestCommonAncestor(root-&gt;right, p, q);</div><div class=\"line\">        <span class=\"keyword\">if</span>(retRoot) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> retRoot;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> retRoot;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>c语言让我跑了1888ms。。</p>\n<h3 id=\"优化解\"><a href=\"#优化解\" class=\"headerlink\" title=\"优化解\"></a>优化解</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Definition for a binary tree node.</div><div class=\"line\"> * struct TreeNode &#123;</div><div class=\"line\"> *     int val;</div><div class=\"line\"> *     struct TreeNode *left;</div><div class=\"line\"> *     struct TreeNode *right;</div><div class=\"line\"> * &#125;;</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">struct</span> TreeNode* <span class=\"title\">lowestCommonAncestor</span><span class=\"params\">(<span class=\"keyword\">struct</span> TreeNode* root, <span class=\"keyword\">struct</span> TreeNode* p, <span class=\"keyword\">struct</span> TreeNode* q)</span> </span>&#123;</div><div class=\"line\">   <span class=\"keyword\">if</span>(root == <span class=\"literal\">NULL</span> || root == p || root == q) &#123;</div><div class=\"line\">       <span class=\"keyword\">return</span> root;</div><div class=\"line\">   &#125;</div><div class=\"line\">    <span class=\"keyword\">struct</span> TreeNode* left = lowestCommonAncestor(root-&gt;left, p ,q);</div><div class=\"line\">    <span class=\"keyword\">struct</span> TreeNode* right = lowestCommonAncestor(root-&gt;right, p ,q);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">if</span>(left == <span class=\"literal\">NULL</span> &amp;&amp; right == <span class=\"literal\">NULL</span>) <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span>(left != <span class=\"literal\">NULL</span> &amp;&amp; right != <span class=\"literal\">NULL</span>) <span class=\"keyword\">return</span> root;</div><div class=\"line\">    <span class=\"keyword\">return</span> (left == <span class=\"literal\">NULL</span> ? right : left);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><code>12ms</code></p>\n"},{"title":"算法-全排列-46","date":"2018-01-29T07:18:56.000Z","toc":true,"_content":"\n## 题目\n\n### 英文\nGiven a collection of distinct integers, return all possible permutations.\n\nExample:\n\nInput: [1,2,3]\nOutput:\n[\n  [1,2,3],\n  [1,3,2],\n  [2,1,3],\n  [2,3,1],\n  [3,1,2],\n  [3,2,1]\n]\n### 中文\n给定一个没有重复数字的序列，返回其所有可能的全排列。\n\n示例:\n\n输入: [1,2,3]\n输出:\n[\n  [1,2,3],\n  [1,3,2],\n  [2,1,3],\n  [2,3,1],\n  [3,1,2],\n  [3,2,1]\n]\n## 思路\n### 思路1\n- 借鉴之前做的第k个排序\n- 把所有的排序塞进一个二维数组里\n\n### 思路2\n思路一打败了百分之56的人，我觉得还有其他建单的思路。\n## 代码\n\n```c\n/**\n * Return an array of arrays of size *returnSize.\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint jiecheng(int n)\n{\n    int ret = 1;\n    while(n > 0)\n    {\n        ret = ret *n;\n        n--;\n    }\n    return ret;\n}\n\nint** permute(int* nums, int numsSize, int* returnSize) {\n    *returnSize = jiecheng(numsSize);\n    //返回的二维数组\n    int** ret = (int**)malloc((sizeof(int*)*(*returnSize)));\n    //记录头指针\n    int** current = ret;\n    //标识进位\n    int* tmp = (int*)malloc(sizeof(int)*numsSize);\n    tmp[numsSize-1] = 1;\n    for(int i = numsSize-2; i>=0; i--)\n    {\n        tmp[i] = tmp[i+1]*(numsSize-1-i);\n    }\n    //标识是否使用\n    int *flag = (int*)malloc(sizeof(int)*numsSize);\n    //初始化所有都为0；\n    int idx = 0, t = 0, k =0, m = 0;\n    memset(flag, 0, sizeof(int)*numsSize);\n    //输出每一个组合\n    for(int i = 1; i <= (*returnSize); i++)\n    {\n        int* tmp1 = (int*)malloc(sizeof(int)*numsSize); \n        //初始化\n        idx = 0, t = 0; k = i , m=0;\n        memset(flag, 0, sizeof(int)*numsSize);\n        for(int j = 0; j < numsSize; j++)\n        {\n            //取当前应取数字所在位\n            t = (k-1)/tmp[j];\n            //保留数坐在位置\n            idx =t;\n            for( m  = 0; m < numsSize;m++)\n            {\n                //寻找最左未使用的数\n                if(!flag[m])\n                {\n                    t--;\n                    if(t == -1)\n                    {\n                        break;\n                    }\n                }\n            }\n            tmp1[j] = nums[m];\n            // printf(\"m:%d,\",m);\n            // printf(\"j:%d,\",j);\n            // printf(\"%d,\",tmp1[j]);\n            flag[m] = 1;\n            k -= (idx*tmp[j]);\n        }\n\n        (*current) = tmp1;\n\n        current++;\n    }\n    return ret;\n}\n\n```","source":"_posts/算法-全排列-46.md","raw":"---\ntitle: 算法-全排列-46\ndate: 2018-01-29 15:18:56\ntags: 算法\ncategories: 算法\ntoc: true\n---\n\n## 题目\n\n### 英文\nGiven a collection of distinct integers, return all possible permutations.\n\nExample:\n\nInput: [1,2,3]\nOutput:\n[\n  [1,2,3],\n  [1,3,2],\n  [2,1,3],\n  [2,3,1],\n  [3,1,2],\n  [3,2,1]\n]\n### 中文\n给定一个没有重复数字的序列，返回其所有可能的全排列。\n\n示例:\n\n输入: [1,2,3]\n输出:\n[\n  [1,2,3],\n  [1,3,2],\n  [2,1,3],\n  [2,3,1],\n  [3,1,2],\n  [3,2,1]\n]\n## 思路\n### 思路1\n- 借鉴之前做的第k个排序\n- 把所有的排序塞进一个二维数组里\n\n### 思路2\n思路一打败了百分之56的人，我觉得还有其他建单的思路。\n## 代码\n\n```c\n/**\n * Return an array of arrays of size *returnSize.\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint jiecheng(int n)\n{\n    int ret = 1;\n    while(n > 0)\n    {\n        ret = ret *n;\n        n--;\n    }\n    return ret;\n}\n\nint** permute(int* nums, int numsSize, int* returnSize) {\n    *returnSize = jiecheng(numsSize);\n    //返回的二维数组\n    int** ret = (int**)malloc((sizeof(int*)*(*returnSize)));\n    //记录头指针\n    int** current = ret;\n    //标识进位\n    int* tmp = (int*)malloc(sizeof(int)*numsSize);\n    tmp[numsSize-1] = 1;\n    for(int i = numsSize-2; i>=0; i--)\n    {\n        tmp[i] = tmp[i+1]*(numsSize-1-i);\n    }\n    //标识是否使用\n    int *flag = (int*)malloc(sizeof(int)*numsSize);\n    //初始化所有都为0；\n    int idx = 0, t = 0, k =0, m = 0;\n    memset(flag, 0, sizeof(int)*numsSize);\n    //输出每一个组合\n    for(int i = 1; i <= (*returnSize); i++)\n    {\n        int* tmp1 = (int*)malloc(sizeof(int)*numsSize); \n        //初始化\n        idx = 0, t = 0; k = i , m=0;\n        memset(flag, 0, sizeof(int)*numsSize);\n        for(int j = 0; j < numsSize; j++)\n        {\n            //取当前应取数字所在位\n            t = (k-1)/tmp[j];\n            //保留数坐在位置\n            idx =t;\n            for( m  = 0; m < numsSize;m++)\n            {\n                //寻找最左未使用的数\n                if(!flag[m])\n                {\n                    t--;\n                    if(t == -1)\n                    {\n                        break;\n                    }\n                }\n            }\n            tmp1[j] = nums[m];\n            // printf(\"m:%d,\",m);\n            // printf(\"j:%d,\",j);\n            // printf(\"%d,\",tmp1[j]);\n            flag[m] = 1;\n            k -= (idx*tmp[j]);\n        }\n\n        (*current) = tmp1;\n\n        current++;\n    }\n    return ret;\n}\n\n```","slug":"算法-全排列-46","published":1,"updated":"2019-02-26T09:18:45.236Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjswwkdqv003fg7wwo1u22ikn","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><h3 id=\"英文\"><a href=\"#英文\" class=\"headerlink\" title=\"英文\"></a>英文</h3><p>Given a collection of distinct integers, return all possible permutations.</p>\n<p>Example:</p>\n<p>Input: [1,2,3]<br>Output:<br>[<br>  [1,2,3],<br>  [1,3,2],<br>  [2,1,3],<br>  [2,3,1],<br>  [3,1,2],<br>  [3,2,1]<br>]</p>\n<h3 id=\"中文\"><a href=\"#中文\" class=\"headerlink\" title=\"中文\"></a>中文</h3><p>给定一个没有重复数字的序列，返回其所有可能的全排列。</p>\n<p>示例:</p>\n<p>输入: [1,2,3]<br>输出:<br>[<br>  [1,2,3],<br>  [1,3,2],<br>  [2,1,3],<br>  [2,3,1],<br>  [3,1,2],<br>  [3,2,1]<br>]</p>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><h3 id=\"思路1\"><a href=\"#思路1\" class=\"headerlink\" title=\"思路1\"></a>思路1</h3><ul>\n<li>借鉴之前做的第k个排序</li>\n<li>把所有的排序塞进一个二维数组里</li>\n</ul>\n<h3 id=\"思路2\"><a href=\"#思路2\" class=\"headerlink\" title=\"思路2\"></a>思路2</h3><p>思路一打败了百分之56的人，我觉得还有其他建单的思路。</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Return an array of arrays of size *returnSize.</div><div class=\"line\"> * Note: The returned array must be malloced, assume caller calls free().</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">jiecheng</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> ret = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">while</span>(n &gt; <span class=\"number\">0</span>)</div><div class=\"line\">    &#123;</div><div class=\"line\">        ret = ret *n;</div><div class=\"line\">        n--;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> ret;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span>** <span class=\"title\">permute</span><span class=\"params\">(<span class=\"keyword\">int</span>* nums, <span class=\"keyword\">int</span> numsSize, <span class=\"keyword\">int</span>* returnSize)</span> </span>&#123;</div><div class=\"line\">    *returnSize = jiecheng(numsSize);</div><div class=\"line\">    <span class=\"comment\">//返回的二维数组</span></div><div class=\"line\">    <span class=\"keyword\">int</span>** ret = (<span class=\"keyword\">int</span>**)<span class=\"built_in\">malloc</span>((<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>*)*(*returnSize)));</div><div class=\"line\">    <span class=\"comment\">//记录头指针</span></div><div class=\"line\">    <span class=\"keyword\">int</span>** current = ret;</div><div class=\"line\">    <span class=\"comment\">//标识进位</span></div><div class=\"line\">    <span class=\"keyword\">int</span>* tmp = (<span class=\"keyword\">int</span>*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>)*numsSize);</div><div class=\"line\">    tmp[numsSize<span class=\"number\">-1</span>] = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = numsSize<span class=\"number\">-2</span>; i&gt;=<span class=\"number\">0</span>; i--)</div><div class=\"line\">    &#123;</div><div class=\"line\">        tmp[i] = tmp[i+<span class=\"number\">1</span>]*(numsSize<span class=\"number\">-1</span>-i);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//标识是否使用</span></div><div class=\"line\">    <span class=\"keyword\">int</span> *flag = (<span class=\"keyword\">int</span>*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>)*numsSize);</div><div class=\"line\">    <span class=\"comment\">//初始化所有都为0；</span></div><div class=\"line\">    <span class=\"keyword\">int</span> idx = <span class=\"number\">0</span>, t = <span class=\"number\">0</span>, k =<span class=\"number\">0</span>, m = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"built_in\">memset</span>(flag, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>)*numsSize);</div><div class=\"line\">    <span class=\"comment\">//输出每一个组合</span></div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= (*returnSize); i++)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span>* tmp1 = (<span class=\"keyword\">int</span>*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>)*numsSize); </div><div class=\"line\">        <span class=\"comment\">//初始化</span></div><div class=\"line\">        idx = <span class=\"number\">0</span>, t = <span class=\"number\">0</span>; k = i , m=<span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"built_in\">memset</span>(flag, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>)*numsSize);</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; numsSize; j++)</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"comment\">//取当前应取数字所在位</span></div><div class=\"line\">            t = (k<span class=\"number\">-1</span>)/tmp[j];</div><div class=\"line\">            <span class=\"comment\">//保留数坐在位置</span></div><div class=\"line\">            idx =t;</div><div class=\"line\">            <span class=\"keyword\">for</span>( m  = <span class=\"number\">0</span>; m &lt; numsSize;m++)</div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"comment\">//寻找最左未使用的数</span></div><div class=\"line\">                <span class=\"keyword\">if</span>(!flag[m])</div><div class=\"line\">                &#123;</div><div class=\"line\">                    t--;</div><div class=\"line\">                    <span class=\"keyword\">if</span>(t == <span class=\"number\">-1</span>)</div><div class=\"line\">                    &#123;</div><div class=\"line\">                        <span class=\"keyword\">break</span>;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            tmp1[j] = nums[m];</div><div class=\"line\">            <span class=\"comment\">// printf(\"m:%d,\",m);</span></div><div class=\"line\">            <span class=\"comment\">// printf(\"j:%d,\",j);</span></div><div class=\"line\">            <span class=\"comment\">// printf(\"%d,\",tmp1[j]);</span></div><div class=\"line\">            flag[m] = <span class=\"number\">1</span>;</div><div class=\"line\">            k -= (idx*tmp[j]);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        (*current) = tmp1;</div><div class=\"line\"></div><div class=\"line\">        current++;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> ret;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><h3 id=\"英文\"><a href=\"#英文\" class=\"headerlink\" title=\"英文\"></a>英文</h3><p>Given a collection of distinct integers, return all possible permutations.</p>\n<p>Example:</p>\n<p>Input: [1,2,3]<br>Output:<br>[<br>  [1,2,3],<br>  [1,3,2],<br>  [2,1,3],<br>  [2,3,1],<br>  [3,1,2],<br>  [3,2,1]<br>]</p>\n<h3 id=\"中文\"><a href=\"#中文\" class=\"headerlink\" title=\"中文\"></a>中文</h3><p>给定一个没有重复数字的序列，返回其所有可能的全排列。</p>\n<p>示例:</p>\n<p>输入: [1,2,3]<br>输出:<br>[<br>  [1,2,3],<br>  [1,3,2],<br>  [2,1,3],<br>  [2,3,1],<br>  [3,1,2],<br>  [3,2,1]<br>]</p>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><h3 id=\"思路1\"><a href=\"#思路1\" class=\"headerlink\" title=\"思路1\"></a>思路1</h3><ul>\n<li>借鉴之前做的第k个排序</li>\n<li>把所有的排序塞进一个二维数组里</li>\n</ul>\n<h3 id=\"思路2\"><a href=\"#思路2\" class=\"headerlink\" title=\"思路2\"></a>思路2</h3><p>思路一打败了百分之56的人，我觉得还有其他建单的思路。</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Return an array of arrays of size *returnSize.</div><div class=\"line\"> * Note: The returned array must be malloced, assume caller calls free().</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">jiecheng</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> ret = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">while</span>(n &gt; <span class=\"number\">0</span>)</div><div class=\"line\">    &#123;</div><div class=\"line\">        ret = ret *n;</div><div class=\"line\">        n--;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> ret;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span>** <span class=\"title\">permute</span><span class=\"params\">(<span class=\"keyword\">int</span>* nums, <span class=\"keyword\">int</span> numsSize, <span class=\"keyword\">int</span>* returnSize)</span> </span>&#123;</div><div class=\"line\">    *returnSize = jiecheng(numsSize);</div><div class=\"line\">    <span class=\"comment\">//返回的二维数组</span></div><div class=\"line\">    <span class=\"keyword\">int</span>** ret = (<span class=\"keyword\">int</span>**)<span class=\"built_in\">malloc</span>((<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>*)*(*returnSize)));</div><div class=\"line\">    <span class=\"comment\">//记录头指针</span></div><div class=\"line\">    <span class=\"keyword\">int</span>** current = ret;</div><div class=\"line\">    <span class=\"comment\">//标识进位</span></div><div class=\"line\">    <span class=\"keyword\">int</span>* tmp = (<span class=\"keyword\">int</span>*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>)*numsSize);</div><div class=\"line\">    tmp[numsSize<span class=\"number\">-1</span>] = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = numsSize<span class=\"number\">-2</span>; i&gt;=<span class=\"number\">0</span>; i--)</div><div class=\"line\">    &#123;</div><div class=\"line\">        tmp[i] = tmp[i+<span class=\"number\">1</span>]*(numsSize<span class=\"number\">-1</span>-i);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//标识是否使用</span></div><div class=\"line\">    <span class=\"keyword\">int</span> *flag = (<span class=\"keyword\">int</span>*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>)*numsSize);</div><div class=\"line\">    <span class=\"comment\">//初始化所有都为0；</span></div><div class=\"line\">    <span class=\"keyword\">int</span> idx = <span class=\"number\">0</span>, t = <span class=\"number\">0</span>, k =<span class=\"number\">0</span>, m = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"built_in\">memset</span>(flag, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>)*numsSize);</div><div class=\"line\">    <span class=\"comment\">//输出每一个组合</span></div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= (*returnSize); i++)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span>* tmp1 = (<span class=\"keyword\">int</span>*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>)*numsSize); </div><div class=\"line\">        <span class=\"comment\">//初始化</span></div><div class=\"line\">        idx = <span class=\"number\">0</span>, t = <span class=\"number\">0</span>; k = i , m=<span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"built_in\">memset</span>(flag, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>)*numsSize);</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; numsSize; j++)</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"comment\">//取当前应取数字所在位</span></div><div class=\"line\">            t = (k<span class=\"number\">-1</span>)/tmp[j];</div><div class=\"line\">            <span class=\"comment\">//保留数坐在位置</span></div><div class=\"line\">            idx =t;</div><div class=\"line\">            <span class=\"keyword\">for</span>( m  = <span class=\"number\">0</span>; m &lt; numsSize;m++)</div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"comment\">//寻找最左未使用的数</span></div><div class=\"line\">                <span class=\"keyword\">if</span>(!flag[m])</div><div class=\"line\">                &#123;</div><div class=\"line\">                    t--;</div><div class=\"line\">                    <span class=\"keyword\">if</span>(t == <span class=\"number\">-1</span>)</div><div class=\"line\">                    &#123;</div><div class=\"line\">                        <span class=\"keyword\">break</span>;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            tmp1[j] = nums[m];</div><div class=\"line\">            <span class=\"comment\">// printf(\"m:%d,\",m);</span></div><div class=\"line\">            <span class=\"comment\">// printf(\"j:%d,\",j);</span></div><div class=\"line\">            <span class=\"comment\">// printf(\"%d,\",tmp1[j]);</span></div><div class=\"line\">            flag[m] = <span class=\"number\">1</span>;</div><div class=\"line\">            k -= (idx*tmp[j]);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        (*current) = tmp1;</div><div class=\"line\"></div><div class=\"line\">        current++;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> ret;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"算法-几种排序算法的实现","toc":true,"date":"2018-07-30T06:47:03.000Z","_content":"\n\n## 快速排序（快拍）\n快速排序的思想是分治，平均时间复杂度O(nlogn)，当然快速排序的时间复杂度并不是稳定的，最大时间复杂度是n^2。当然在用C语言实现的快速排序中，快速排序是原地排序，所有排序中空间复杂最低。\n### 代码\n\n`基于数组的快速排序（递归）` \n\n```c\nvoid qSort(int *a, int low, int high){\n    if(low > high) return;\n    int first = low;\n    int last = high;\n    int key = a[first];\n    while(first < last){\n        while(first < last && a[last] >= key) --last;\n        if(first < last) a[first] = a[last]; //这个地方是精髓啊\n        while(first < last && a[first] <= key) ++first;\n        if(first < last) a[last] = a[first];\n        }\n    a[first] = key;\n    Qsort(a, low, first-1);\n    Qsort(a, first+1, high);\n}\n```\n\n\n`这个版本可能便于理解`\n\n```c\nvoid swap(int *x, int *y) {\n    int t = *x;\n    *x = *y;\n    *y = t;\n}\nvoid quick_sort_recursive(int arr[], int start, int end) {\n    if (start >= end)\n        return;\n    int mid = arr[end];\n    int left = start, right = end - 1;\n    while (left < right) {\n        while (arr[left] < mid && left < right)\n            left++;\n        while (arr[right] >= mid && left < right)\n            right--;\n        swap(&arr[left], &arr[right]);\n    }\n    if (arr[left] >= arr[end])\n        swap(&arr[left], &arr[end]);\n    else\n        left++;\n    if (left)\n        quick_sort_recursive(arr, start, left - 1);\n    quick_sort_recursive(arr, left + 1, end);\n}\nvoid quick_sort(int arr[], int len) {\n    quick_sort_recursive(arr, 0, len - 1);\n}\n```\n`php的快速排序` \n```php\nfunction qSort(&$envelopes, $start, $end )\n{\n        if($end <= $start)\n        {\n            return;\n        }\n        $i = $start;\n        $j = $end;\n        while($i < $j)\n        {\n            while($i < $end && $envelopes[$i] <= $envelopes[$start])\n            {\n                $i++;\n            }\n            while($j > $start && $envelopes[$j] >  $envelopes[$start])\n            {\n                $j--;\n            }\n            if($i < $j)\n            {\n                $tmp = $envelopes[$i];\n                $envelopes[$i] = $envelopes[$j];\n                $envelopes[$j] = $tmp;\n            }\n        }\n        //或者当i= 8 j = 10 i--j++（处理当j==i ）指向9事无法交换情况。\n        if($envelopes[$i] < $envelopes[$start]) {\n            $tmp = $envelopes[$start];\n            $envelopes[$start] = $envelopes[$j];\n            $envelopes[$i] = $tmp;\n        }\n        qSort($envelopes, $start, $i-1);\n        qSort($envelopes, $i+1, $end);\n}\n```\n\n\n`基于链表的快速排序`\n```c\nstruct Node   \n{  \n    int key;  \n    Node* next;  \n};  \n  \nvoid swap(int* a, int* b)\n{\n    int tmp = *a ;\n    *a = *b;\n    *b = tmp;\n}  \nNode* GetPartion(Node* pBegin, Node* pEnd)  \n{  \n    int key = pBegin->key;  \n    Node* p = pBegin;  \n    Node* q = p->next;  \n  \n    while(q != pEnd)  \n    {  \n        if(q->key < key)  \n        {  \n            p = p->next;  \n            swap(p->key,q->key);  \n        }  \n  \n        q = q->next;  \n    }  \n    swap(&p->key,&pBegin->key);  \n    return p;  \n}  \n  \nvoid QuickSort(Node* pBeign, Node* pEnd)  \n{  \n    if(pBeign != pEnd)  \n    {  \n        Node* partion = GetPartion(pBeign,pEnd);  \n        QuickSort(pBeign,partion);  \n        QuickSort(partion->next,pEnd);  \n    }  \n}  \n```\n\n## 并归排序\n并归排序的思想是分治的思想，时间复杂度 O(nlogn)。\n- 如果一个链表（数组）只有一个元素或者为空直接返回。\n- 如果链表（数组）可以分成尽可能相等两部分，将其分成尽可能相等两部分。\n- 对于两个被分开的两个部分进行整个归并排序\n- 把两个拍好序的链表（数组）进行合并。\n与快拍的区别是：`快排是先处理完再递归` 而归并排序是`先递归在处理`\n\n基于链表的并归排序。\n\n### 代码\n```c\n struct ListNode * merge(struct ListNode *l1,struct ListNode *l2)\n {\n     if(l1 == NULL) return l2;\n     if(l2 == NULL) return l1;\n     if( (l1==NULL) &&(l2==NULL) ) return NULL;\n     \n     struct ListNode *head=NULL;\n     if(l1->val < l2->val)\n    {\n        head=l1;\n        l1=l1->next;\n    }\n     else \n     {\n         head=l2;\n         l2=l2->next;\n     }\n     \n     struct ListNode *p=head;\n     while(l1 != NULL && l2 != NULL)\n     {\n         if(l1->val < l2->val)\n         {\n             p->next=l1;\n             l1=l1->next;\n         }\n         else\n         {\n             p->next=l2;\n             l2=l2->next;\n         }\n         p=p->next;\n     }\n     \n     if(l1 != NULL) p->next=l1;\n     if(l2 != NULL) p->next=l2;\n     return head;\n }\n \nstruct ListNode* sortList(struct ListNode* head) {\n    if(head == NULL || head->next == NULL) return head;\n    struct ListNode *slow=head;\n    struct ListNode *fast=head;\n    struct ListNode *pre=NULL;\n    \n    // 切成两半\n    while(fast!= NULL && fast->next != NULL)\n    {\n        pre=slow;\n        slow=slow->next;\n        fast=fast->next->next;\n    }\n    pre->next=NULL;\n    \n    //两半分别归并\n    struct ListNode *l1=sortList(head);\n    struct ListNode *l2=sortList(slow);\n    \n    //调用merge\n    return merge(l1,l2);\n}\n```\n\n`基于数组的并归排序(递归)`\n```java\nvoid merge_sort_recursive(int arr[], int reg[], int start, int end) {\n    if (start >= end)\n        return;\n    int len = end - start, mid = (len >> 1) + start;\n    int start1 = start, end1 = mid;\n    int start2 = mid + 1, end2 = end;\n    merge_sort_recursive(arr, reg, start1, end1);\n    merge_sort_recursive(arr, reg, start2, end2);\n    int k = start;\n    while (start1 <= end1 && start2 <= end2)\n        reg[k++] = arr[start1] < arr[start2] ? arr[start1++] : arr[start2++];\n    while (start1 <= end1)\n        reg[k++] = arr[start1++];\n    while (start2 <= end2)\n        reg[k++] = arr[start2++];\n    for (k = start; k <= end; k++)\n        arr[k] = reg[k];\n}\nvoid merge_sort(int arr[], const int len) {\n    int reg[len];\n    merge_sort_recursive(arr, reg, 0, len - 1);\n}\n```\n\n`基于数组的并归排序（迭代）`\n\n```c\nint min(int x, int y) {\n    return x < y ? x : y;\n}\nvoid merge_sort(int arr[], int len) {\n    int* a = arr;\n    int* b = (int*) malloc(len * sizeof(int));\n    int seg, start;\n    for (seg = 1; seg < len; seg += seg) {\n        for (start = 0; start < len; start += seg + seg) {\n            int low = start, mid = min(start + seg, len), high = min(start + seg + seg, len);\n            int k = low;\n            int start1 = low, end1 = mid;\n            int start2 = mid, end2 = high;\n            while (start1 < end1 && start2 < end2)\n                b[k++] = a[start1] < a[start2] ? a[start1++] : a[start2++];\n            while (start1 < end1)\n                b[k++] = a[start1++];\n            while (start2 < end2)\n                b[k++] = a[start2++];\n        }\n        int* temp = a;\n        a = b;\n        b = temp;\n    }\n    if (a != arr) {\n        int i;\n        for (i = 0; i < len; i++)\n            b[i] = a[i];\n        b = a;\n    }\n    free(b);\n}\n```\n\n## 冒泡排序\n\n### 时间复杂度与空间复杂度\n时间复杂度O(n^2)\n### 代码\n`c语言冒泡排序`\n\n```c\nvoid bubbleSort(int *nums, int lenNums) {\nint i,j;\nint flag = 1;\nfor(i = 0; i < lenNums; i++)\n{\n    flag = 0;\n    for(j=0; j< lenNums - i -1; j++)\n    {\n        //比较并交换\n        if(nums[j] > nums[j+1])\n        {\n            nums[j] = nums[j+1] + nums[j];\n            nums[j+1] = nums[j] - nums[j+1];\n            nums[j] = nums[j] - nums[j+1];\n            flag = 0;\n        }\n    }\n    if(flag == 1) \n    {\n        break;\n    }\n}\n}\n```\n\n\n## 插入排序\n\n### 时间复杂度与空间复杂度\n时间复杂度O(n^2),空间复杂度O(1)\n\n### 代码\n\n```c\nvoid insertSort(int *nums, int numsLen)\n{\n    int tmp;\n    for(int i = 1; i< numsLen; i++)\n    {\n        tmp = nums[i];\n        for(int j = i; j>0 && nums[j] < nums[j-1]; j--)\n        {\n            nums[j] = nums[j-1];\n        }\n        nums[j] = tmp;\n    } \n}\n```\n\n## 基数排序\n\n基数排序是将 `需要排序的所有数字统一为固定位数的数字`（如果位数不足向前补0），然后按照位数切割，分别对每一个位数进行比较。从最低位开始，依次进行一次排序。这样排完以后就会变成一个有序序列。\n### 时间复杂度与空间复杂度\n\n### 代码 \n\n```php\nfunction radixsort($nums)\n{\n    $maxNum = max($nums);\n    $wei = 0;\n    for($exp =1 ; intval(($maxNum/$exp ))> 0; $exp*=10 )\n    {\n    \t$nums = countSort($nums,$exp);\n    \tvar_dump($nums);\n    }\n}\n\nfunction countSort($nums,$exp)\n{\n\n\tfor ($i=0; $i < 10; $i++) { \n\t\t$count[$i] = 0;\n\t}\n    for($i = 0; $i< count($nums); $i++)\n    {\n    \t$key = intval(($nums[$i]/$exp)%10);\n    \t$count[intval(($nums[$i]/$exp)%10)]++;\n    }\n    for($i = 1; $i < 10; $i++)\n    {\n    \t$count[$i] += $count[$i - 1];\n    }\n    for($i = count($nums)-1; $i >= 0; $i--)\n    {\n    \t$output[$count[intval(($nums[$i]/$exp)%10) ] -1] = $nums[$i];\n    \t$count[intval((($nums[$i]/$exp)%10))]--;\n    }\n\n    for ($i=0; $i < count($nums) ; $i++) { \n    \t$nums[$i] = $output[$i];\n    }\n    return $nums;\n}\n\n$a = [1,3,4,5,12,412,534,122];\n\nradixsort($a);\n```\n\n## 堆排序\n\n以最大堆为例，最大堆就是一个特殊二叉树，父节点大于子节点。\n当前算法是以层序遍历，将二叉树存入数组中。\n- 堆排序每次把处于堆顶的最大值取出\n- 然后对堆进行排序\n- 一次循环，直至堆变为0\n\n\n```php\n<?php\n// echo number_format(100000.5).\"\\n\";\n// echo number_format(\"100000.5\",2).\"\\n\";\n// echo number_format(100000.5,1,\".\",\"\");\n\nfunction heapSort($nums)\n{\n    //将数组划转为堆(依赖数组实现的堆)\n    $n = count($nums);\n    for($i = intval($n/2) -1 ; $i >= 0; $i--)\n    {\n        heapify($nums, $n, $i);\n    }\n\n    for($i = $n-1; $i >= 0; $i--)\n    {\n    \t$tmp = $nums[0];\n    \t$nums[0] = $nums[$i] ;\n    \t$nums[$i] = $tmp;\n    \theapify($nums, $i, 0);\n    }\n\n    var_dump($nums);\n\n}\n\nfunction heapify(&$nums, $n, $i)\n{\n    $largest = $i;\n    $l = $i * 2 +1;\n    $r = $i * 2 +2;\n\n    if($l < $n && $nums[$largest] < $nums[$l])\n    {\n    \t$largest = $l;\n    }\n    if($r < $n && $nums[$largest] < $nums[$r])\n    {\n    \t$largest = $r;\n    }\n\n    if($largest != $i)\n    {\n    \t$tmp = $nums[$i];\n    \t$nums[$i] = $nums[$largest];\n    \t$nums[$largest] = $tmp;\n\n    \theapify($nums, $n, $largest);\n    }\n}\n\n$a = [1,3,4,5,12,412,534,122,534,0,77,88,99,78,56,35,34,1];\n\nheapSort($a);\n\n}\n```\n\n## 桶排序\n\n```php\n \n```\n","source":"_posts/算法-几种排序算法的实现.md","raw":"---\ntitle: 算法-几种排序算法的实现\ntags: 算法\ncategories: 算法\ntoc: true\ndate: 2018-07-30 14:47:03\n---\n\n\n## 快速排序（快拍）\n快速排序的思想是分治，平均时间复杂度O(nlogn)，当然快速排序的时间复杂度并不是稳定的，最大时间复杂度是n^2。当然在用C语言实现的快速排序中，快速排序是原地排序，所有排序中空间复杂最低。\n### 代码\n\n`基于数组的快速排序（递归）` \n\n```c\nvoid qSort(int *a, int low, int high){\n    if(low > high) return;\n    int first = low;\n    int last = high;\n    int key = a[first];\n    while(first < last){\n        while(first < last && a[last] >= key) --last;\n        if(first < last) a[first] = a[last]; //这个地方是精髓啊\n        while(first < last && a[first] <= key) ++first;\n        if(first < last) a[last] = a[first];\n        }\n    a[first] = key;\n    Qsort(a, low, first-1);\n    Qsort(a, first+1, high);\n}\n```\n\n\n`这个版本可能便于理解`\n\n```c\nvoid swap(int *x, int *y) {\n    int t = *x;\n    *x = *y;\n    *y = t;\n}\nvoid quick_sort_recursive(int arr[], int start, int end) {\n    if (start >= end)\n        return;\n    int mid = arr[end];\n    int left = start, right = end - 1;\n    while (left < right) {\n        while (arr[left] < mid && left < right)\n            left++;\n        while (arr[right] >= mid && left < right)\n            right--;\n        swap(&arr[left], &arr[right]);\n    }\n    if (arr[left] >= arr[end])\n        swap(&arr[left], &arr[end]);\n    else\n        left++;\n    if (left)\n        quick_sort_recursive(arr, start, left - 1);\n    quick_sort_recursive(arr, left + 1, end);\n}\nvoid quick_sort(int arr[], int len) {\n    quick_sort_recursive(arr, 0, len - 1);\n}\n```\n`php的快速排序` \n```php\nfunction qSort(&$envelopes, $start, $end )\n{\n        if($end <= $start)\n        {\n            return;\n        }\n        $i = $start;\n        $j = $end;\n        while($i < $j)\n        {\n            while($i < $end && $envelopes[$i] <= $envelopes[$start])\n            {\n                $i++;\n            }\n            while($j > $start && $envelopes[$j] >  $envelopes[$start])\n            {\n                $j--;\n            }\n            if($i < $j)\n            {\n                $tmp = $envelopes[$i];\n                $envelopes[$i] = $envelopes[$j];\n                $envelopes[$j] = $tmp;\n            }\n        }\n        //或者当i= 8 j = 10 i--j++（处理当j==i ）指向9事无法交换情况。\n        if($envelopes[$i] < $envelopes[$start]) {\n            $tmp = $envelopes[$start];\n            $envelopes[$start] = $envelopes[$j];\n            $envelopes[$i] = $tmp;\n        }\n        qSort($envelopes, $start, $i-1);\n        qSort($envelopes, $i+1, $end);\n}\n```\n\n\n`基于链表的快速排序`\n```c\nstruct Node   \n{  \n    int key;  \n    Node* next;  \n};  \n  \nvoid swap(int* a, int* b)\n{\n    int tmp = *a ;\n    *a = *b;\n    *b = tmp;\n}  \nNode* GetPartion(Node* pBegin, Node* pEnd)  \n{  \n    int key = pBegin->key;  \n    Node* p = pBegin;  \n    Node* q = p->next;  \n  \n    while(q != pEnd)  \n    {  \n        if(q->key < key)  \n        {  \n            p = p->next;  \n            swap(p->key,q->key);  \n        }  \n  \n        q = q->next;  \n    }  \n    swap(&p->key,&pBegin->key);  \n    return p;  \n}  \n  \nvoid QuickSort(Node* pBeign, Node* pEnd)  \n{  \n    if(pBeign != pEnd)  \n    {  \n        Node* partion = GetPartion(pBeign,pEnd);  \n        QuickSort(pBeign,partion);  \n        QuickSort(partion->next,pEnd);  \n    }  \n}  \n```\n\n## 并归排序\n并归排序的思想是分治的思想，时间复杂度 O(nlogn)。\n- 如果一个链表（数组）只有一个元素或者为空直接返回。\n- 如果链表（数组）可以分成尽可能相等两部分，将其分成尽可能相等两部分。\n- 对于两个被分开的两个部分进行整个归并排序\n- 把两个拍好序的链表（数组）进行合并。\n与快拍的区别是：`快排是先处理完再递归` 而归并排序是`先递归在处理`\n\n基于链表的并归排序。\n\n### 代码\n```c\n struct ListNode * merge(struct ListNode *l1,struct ListNode *l2)\n {\n     if(l1 == NULL) return l2;\n     if(l2 == NULL) return l1;\n     if( (l1==NULL) &&(l2==NULL) ) return NULL;\n     \n     struct ListNode *head=NULL;\n     if(l1->val < l2->val)\n    {\n        head=l1;\n        l1=l1->next;\n    }\n     else \n     {\n         head=l2;\n         l2=l2->next;\n     }\n     \n     struct ListNode *p=head;\n     while(l1 != NULL && l2 != NULL)\n     {\n         if(l1->val < l2->val)\n         {\n             p->next=l1;\n             l1=l1->next;\n         }\n         else\n         {\n             p->next=l2;\n             l2=l2->next;\n         }\n         p=p->next;\n     }\n     \n     if(l1 != NULL) p->next=l1;\n     if(l2 != NULL) p->next=l2;\n     return head;\n }\n \nstruct ListNode* sortList(struct ListNode* head) {\n    if(head == NULL || head->next == NULL) return head;\n    struct ListNode *slow=head;\n    struct ListNode *fast=head;\n    struct ListNode *pre=NULL;\n    \n    // 切成两半\n    while(fast!= NULL && fast->next != NULL)\n    {\n        pre=slow;\n        slow=slow->next;\n        fast=fast->next->next;\n    }\n    pre->next=NULL;\n    \n    //两半分别归并\n    struct ListNode *l1=sortList(head);\n    struct ListNode *l2=sortList(slow);\n    \n    //调用merge\n    return merge(l1,l2);\n}\n```\n\n`基于数组的并归排序(递归)`\n```java\nvoid merge_sort_recursive(int arr[], int reg[], int start, int end) {\n    if (start >= end)\n        return;\n    int len = end - start, mid = (len >> 1) + start;\n    int start1 = start, end1 = mid;\n    int start2 = mid + 1, end2 = end;\n    merge_sort_recursive(arr, reg, start1, end1);\n    merge_sort_recursive(arr, reg, start2, end2);\n    int k = start;\n    while (start1 <= end1 && start2 <= end2)\n        reg[k++] = arr[start1] < arr[start2] ? arr[start1++] : arr[start2++];\n    while (start1 <= end1)\n        reg[k++] = arr[start1++];\n    while (start2 <= end2)\n        reg[k++] = arr[start2++];\n    for (k = start; k <= end; k++)\n        arr[k] = reg[k];\n}\nvoid merge_sort(int arr[], const int len) {\n    int reg[len];\n    merge_sort_recursive(arr, reg, 0, len - 1);\n}\n```\n\n`基于数组的并归排序（迭代）`\n\n```c\nint min(int x, int y) {\n    return x < y ? x : y;\n}\nvoid merge_sort(int arr[], int len) {\n    int* a = arr;\n    int* b = (int*) malloc(len * sizeof(int));\n    int seg, start;\n    for (seg = 1; seg < len; seg += seg) {\n        for (start = 0; start < len; start += seg + seg) {\n            int low = start, mid = min(start + seg, len), high = min(start + seg + seg, len);\n            int k = low;\n            int start1 = low, end1 = mid;\n            int start2 = mid, end2 = high;\n            while (start1 < end1 && start2 < end2)\n                b[k++] = a[start1] < a[start2] ? a[start1++] : a[start2++];\n            while (start1 < end1)\n                b[k++] = a[start1++];\n            while (start2 < end2)\n                b[k++] = a[start2++];\n        }\n        int* temp = a;\n        a = b;\n        b = temp;\n    }\n    if (a != arr) {\n        int i;\n        for (i = 0; i < len; i++)\n            b[i] = a[i];\n        b = a;\n    }\n    free(b);\n}\n```\n\n## 冒泡排序\n\n### 时间复杂度与空间复杂度\n时间复杂度O(n^2)\n### 代码\n`c语言冒泡排序`\n\n```c\nvoid bubbleSort(int *nums, int lenNums) {\nint i,j;\nint flag = 1;\nfor(i = 0; i < lenNums; i++)\n{\n    flag = 0;\n    for(j=0; j< lenNums - i -1; j++)\n    {\n        //比较并交换\n        if(nums[j] > nums[j+1])\n        {\n            nums[j] = nums[j+1] + nums[j];\n            nums[j+1] = nums[j] - nums[j+1];\n            nums[j] = nums[j] - nums[j+1];\n            flag = 0;\n        }\n    }\n    if(flag == 1) \n    {\n        break;\n    }\n}\n}\n```\n\n\n## 插入排序\n\n### 时间复杂度与空间复杂度\n时间复杂度O(n^2),空间复杂度O(1)\n\n### 代码\n\n```c\nvoid insertSort(int *nums, int numsLen)\n{\n    int tmp;\n    for(int i = 1; i< numsLen; i++)\n    {\n        tmp = nums[i];\n        for(int j = i; j>0 && nums[j] < nums[j-1]; j--)\n        {\n            nums[j] = nums[j-1];\n        }\n        nums[j] = tmp;\n    } \n}\n```\n\n## 基数排序\n\n基数排序是将 `需要排序的所有数字统一为固定位数的数字`（如果位数不足向前补0），然后按照位数切割，分别对每一个位数进行比较。从最低位开始，依次进行一次排序。这样排完以后就会变成一个有序序列。\n### 时间复杂度与空间复杂度\n\n### 代码 \n\n```php\nfunction radixsort($nums)\n{\n    $maxNum = max($nums);\n    $wei = 0;\n    for($exp =1 ; intval(($maxNum/$exp ))> 0; $exp*=10 )\n    {\n    \t$nums = countSort($nums,$exp);\n    \tvar_dump($nums);\n    }\n}\n\nfunction countSort($nums,$exp)\n{\n\n\tfor ($i=0; $i < 10; $i++) { \n\t\t$count[$i] = 0;\n\t}\n    for($i = 0; $i< count($nums); $i++)\n    {\n    \t$key = intval(($nums[$i]/$exp)%10);\n    \t$count[intval(($nums[$i]/$exp)%10)]++;\n    }\n    for($i = 1; $i < 10; $i++)\n    {\n    \t$count[$i] += $count[$i - 1];\n    }\n    for($i = count($nums)-1; $i >= 0; $i--)\n    {\n    \t$output[$count[intval(($nums[$i]/$exp)%10) ] -1] = $nums[$i];\n    \t$count[intval((($nums[$i]/$exp)%10))]--;\n    }\n\n    for ($i=0; $i < count($nums) ; $i++) { \n    \t$nums[$i] = $output[$i];\n    }\n    return $nums;\n}\n\n$a = [1,3,4,5,12,412,534,122];\n\nradixsort($a);\n```\n\n## 堆排序\n\n以最大堆为例，最大堆就是一个特殊二叉树，父节点大于子节点。\n当前算法是以层序遍历，将二叉树存入数组中。\n- 堆排序每次把处于堆顶的最大值取出\n- 然后对堆进行排序\n- 一次循环，直至堆变为0\n\n\n```php\n<?php\n// echo number_format(100000.5).\"\\n\";\n// echo number_format(\"100000.5\",2).\"\\n\";\n// echo number_format(100000.5,1,\".\",\"\");\n\nfunction heapSort($nums)\n{\n    //将数组划转为堆(依赖数组实现的堆)\n    $n = count($nums);\n    for($i = intval($n/2) -1 ; $i >= 0; $i--)\n    {\n        heapify($nums, $n, $i);\n    }\n\n    for($i = $n-1; $i >= 0; $i--)\n    {\n    \t$tmp = $nums[0];\n    \t$nums[0] = $nums[$i] ;\n    \t$nums[$i] = $tmp;\n    \theapify($nums, $i, 0);\n    }\n\n    var_dump($nums);\n\n}\n\nfunction heapify(&$nums, $n, $i)\n{\n    $largest = $i;\n    $l = $i * 2 +1;\n    $r = $i * 2 +2;\n\n    if($l < $n && $nums[$largest] < $nums[$l])\n    {\n    \t$largest = $l;\n    }\n    if($r < $n && $nums[$largest] < $nums[$r])\n    {\n    \t$largest = $r;\n    }\n\n    if($largest != $i)\n    {\n    \t$tmp = $nums[$i];\n    \t$nums[$i] = $nums[$largest];\n    \t$nums[$largest] = $tmp;\n\n    \theapify($nums, $n, $largest);\n    }\n}\n\n$a = [1,3,4,5,12,412,534,122,534,0,77,88,99,78,56,35,34,1];\n\nheapSort($a);\n\n}\n```\n\n## 桶排序\n\n```php\n \n```\n","slug":"算法-几种排序算法的实现","published":1,"updated":"2019-02-28T06:20:34.549Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjswwkdqw003jg7www6lvhvev","content":"<h2 id=\"快速排序（快拍）\"><a href=\"#快速排序（快拍）\" class=\"headerlink\" title=\"快速排序（快拍）\"></a>快速排序（快拍）</h2><p>快速排序的思想是分治，平均时间复杂度O(nlogn)，当然快速排序的时间复杂度并不是稳定的，最大时间复杂度是n^2。当然在用C语言实现的快速排序中，快速排序是原地排序，所有排序中空间复杂最低。</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><p><code>基于数组的快速排序（递归）</code> </p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">qSort</span><span class=\"params\">(<span class=\"keyword\">int</span> *a, <span class=\"keyword\">int</span> low, <span class=\"keyword\">int</span> high)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(low &gt; high) <span class=\"keyword\">return</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> first = low;</div><div class=\"line\">    <span class=\"keyword\">int</span> last = high;</div><div class=\"line\">    <span class=\"keyword\">int</span> key = a[first];</div><div class=\"line\">    <span class=\"keyword\">while</span>(first &lt; last)&#123;</div><div class=\"line\">        <span class=\"keyword\">while</span>(first &lt; last &amp;&amp; a[last] &gt;= key) --last;</div><div class=\"line\">        <span class=\"keyword\">if</span>(first &lt; last) a[first] = a[last]; <span class=\"comment\">//这个地方是精髓啊</span></div><div class=\"line\">        <span class=\"keyword\">while</span>(first &lt; last &amp;&amp; a[first] &lt;= key) ++first;</div><div class=\"line\">        <span class=\"keyword\">if</span>(first &lt; last) a[last] = a[first];</div><div class=\"line\">        &#125;</div><div class=\"line\">    a[first] = key;</div><div class=\"line\">    Qsort(a, low, first<span class=\"number\">-1</span>);</div><div class=\"line\">    Qsort(a, first+<span class=\"number\">1</span>, high);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><code>这个版本可能便于理解</code></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(<span class=\"keyword\">int</span> *x, <span class=\"keyword\">int</span> *y)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> t = *x;</div><div class=\"line\">    *x = *y;</div><div class=\"line\">    *y = t;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">quick_sort_recursive</span><span class=\"params\">(<span class=\"keyword\">int</span> arr[], <span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> end)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (start &gt;= end)</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> mid = arr[end];</div><div class=\"line\">    <span class=\"keyword\">int</span> left = start, right = end - <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">while</span> (left &lt; right) &#123;</div><div class=\"line\">        <span class=\"keyword\">while</span> (arr[left] &lt; mid &amp;&amp; left &lt; right)</div><div class=\"line\">            left++;</div><div class=\"line\">        <span class=\"keyword\">while</span> (arr[right] &gt;= mid &amp;&amp; left &lt; right)</div><div class=\"line\">            right--;</div><div class=\"line\">        swap(&amp;arr[left], &amp;arr[right]);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (arr[left] &gt;= arr[end])</div><div class=\"line\">        swap(&amp;arr[left], &amp;arr[end]);</div><div class=\"line\">    <span class=\"keyword\">else</span></div><div class=\"line\">        left++;</div><div class=\"line\">    <span class=\"keyword\">if</span> (left)</div><div class=\"line\">        quick_sort_recursive(arr, start, left - <span class=\"number\">1</span>);</div><div class=\"line\">    quick_sort_recursive(arr, left + <span class=\"number\">1</span>, end);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">quick_sort</span><span class=\"params\">(<span class=\"keyword\">int</span> arr[], <span class=\"keyword\">int</span> len)</span> </span>&#123;</div><div class=\"line\">    quick_sort_recursive(arr, <span class=\"number\">0</span>, len - <span class=\"number\">1</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><code>php的快速排序</code><br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">qSort</span><span class=\"params\">(&amp;$envelopes, $start, $end )</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>($end &lt;= $start)</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        $i = $start;</div><div class=\"line\">        $j = $end;</div><div class=\"line\">        <span class=\"keyword\">while</span>($i &lt; $j)</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">while</span>($i &lt; $end &amp;&amp; $envelopes[$i] &lt;= $envelopes[$start])</div><div class=\"line\">            &#123;</div><div class=\"line\">                $i++;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">while</span>($j &gt; $start &amp;&amp; $envelopes[$j] &gt;  $envelopes[$start])</div><div class=\"line\">            &#123;</div><div class=\"line\">                $j--;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">if</span>($i &lt; $j)</div><div class=\"line\">            &#123;</div><div class=\"line\">                $tmp = $envelopes[$i];</div><div class=\"line\">                $envelopes[$i] = $envelopes[$j];</div><div class=\"line\">                $envelopes[$j] = $tmp;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">//或者当i= 8 j = 10 i--j++（处理当j==i ）指向9事无法交换情况。</span></div><div class=\"line\">        <span class=\"keyword\">if</span>($envelopes[$i] &lt; $envelopes[$start]) &#123;</div><div class=\"line\">            $tmp = $envelopes[$start];</div><div class=\"line\">            $envelopes[$start] = $envelopes[$j];</div><div class=\"line\">            $envelopes[$i] = $tmp;</div><div class=\"line\">        &#125;</div><div class=\"line\">        qSort($envelopes, $start, $i<span class=\"number\">-1</span>);</div><div class=\"line\">        qSort($envelopes, $i+<span class=\"number\">1</span>, $end);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><code>基于链表的快速排序</code><br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">struct</span> Node   </div><div class=\"line\">&#123;  </div><div class=\"line\">    <span class=\"keyword\">int</span> key;  </div><div class=\"line\">    Node* next;  </div><div class=\"line\">&#125;;  </div><div class=\"line\">  </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(<span class=\"keyword\">int</span>* a, <span class=\"keyword\">int</span>* b)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> tmp = *a ;</div><div class=\"line\">    *a = *b;</div><div class=\"line\">    *b = tmp;</div><div class=\"line\">&#125;  </div><div class=\"line\"><span class=\"function\">Node* <span class=\"title\">GetPartion</span><span class=\"params\">(Node* pBegin, Node* pEnd)</span>  </span></div><div class=\"line\">&#123;  </div><div class=\"line\">    <span class=\"keyword\">int</span> key = pBegin-&gt;key;  </div><div class=\"line\">    Node* p = pBegin;  </div><div class=\"line\">    Node* q = p-&gt;next;  </div><div class=\"line\">  </div><div class=\"line\">    <span class=\"keyword\">while</span>(q != pEnd)  </div><div class=\"line\">    &#123;  </div><div class=\"line\">        <span class=\"keyword\">if</span>(q-&gt;key &lt; key)  </div><div class=\"line\">        &#123;  </div><div class=\"line\">            p = p-&gt;next;  </div><div class=\"line\">            swap(p-&gt;key,q-&gt;key);  </div><div class=\"line\">        &#125;  </div><div class=\"line\">  </div><div class=\"line\">        q = q-&gt;next;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    swap(&amp;p-&gt;key,&amp;pBegin-&gt;key);  </div><div class=\"line\">    <span class=\"keyword\">return</span> p;  </div><div class=\"line\">&#125;  </div><div class=\"line\">  </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">QuickSort</span><span class=\"params\">(Node* pBeign, Node* pEnd)</span>  </span></div><div class=\"line\">&#123;  </div><div class=\"line\">    <span class=\"keyword\">if</span>(pBeign != pEnd)  </div><div class=\"line\">    &#123;  </div><div class=\"line\">        Node* partion = GetPartion(pBeign,pEnd);  </div><div class=\"line\">        QuickSort(pBeign,partion);  </div><div class=\"line\">        QuickSort(partion-&gt;next,pEnd);  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"并归排序\"><a href=\"#并归排序\" class=\"headerlink\" title=\"并归排序\"></a>并归排序</h2><p>并归排序的思想是分治的思想，时间复杂度 O(nlogn)。</p>\n<ul>\n<li>如果一个链表（数组）只有一个元素或者为空直接返回。</li>\n<li>如果链表（数组）可以分成尽可能相等两部分，将其分成尽可能相等两部分。</li>\n<li>对于两个被分开的两个部分进行整个归并排序</li>\n<li>把两个拍好序的链表（数组）进行合并。<br>与快拍的区别是：<code>快排是先处理完再递归</code> 而归并排序是<code>先递归在处理</code></li>\n</ul>\n<p>基于链表的并归排序。</p>\n<h3 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">struct</span> ListNode * <span class=\"title\">merge</span><span class=\"params\">(<span class=\"keyword\">struct</span> ListNode *l1,<span class=\"keyword\">struct</span> ListNode *l2)</span></span></div><div class=\"line\"> &#123;</div><div class=\"line\">     <span class=\"keyword\">if</span>(l1 == <span class=\"literal\">NULL</span>) <span class=\"keyword\">return</span> l2;</div><div class=\"line\">     <span class=\"keyword\">if</span>(l2 == <span class=\"literal\">NULL</span>) <span class=\"keyword\">return</span> l1;</div><div class=\"line\">     <span class=\"keyword\">if</span>( (l1==<span class=\"literal\">NULL</span>) &amp;&amp;(l2==<span class=\"literal\">NULL</span>) ) <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</div><div class=\"line\">     </div><div class=\"line\">     <span class=\"keyword\">struct</span> ListNode *head=<span class=\"literal\">NULL</span>;</div><div class=\"line\">     <span class=\"keyword\">if</span>(l1-&gt;val &lt; l2-&gt;val)</div><div class=\"line\">    &#123;</div><div class=\"line\">        head=l1;</div><div class=\"line\">        l1=l1-&gt;next;</div><div class=\"line\">    &#125;</div><div class=\"line\">     <span class=\"keyword\">else</span> </div><div class=\"line\">     &#123;</div><div class=\"line\">         head=l2;</div><div class=\"line\">         l2=l2-&gt;next;</div><div class=\"line\">     &#125;</div><div class=\"line\">     </div><div class=\"line\">     <span class=\"keyword\">struct</span> ListNode *p=head;</div><div class=\"line\">     <span class=\"keyword\">while</span>(l1 != <span class=\"literal\">NULL</span> &amp;&amp; l2 != <span class=\"literal\">NULL</span>)</div><div class=\"line\">     &#123;</div><div class=\"line\">         <span class=\"keyword\">if</span>(l1-&gt;val &lt; l2-&gt;val)</div><div class=\"line\">         &#123;</div><div class=\"line\">             p-&gt;next=l1;</div><div class=\"line\">             l1=l1-&gt;next;</div><div class=\"line\">         &#125;</div><div class=\"line\">         <span class=\"keyword\">else</span></div><div class=\"line\">         &#123;</div><div class=\"line\">             p-&gt;next=l2;</div><div class=\"line\">             l2=l2-&gt;next;</div><div class=\"line\">         &#125;</div><div class=\"line\">         p=p-&gt;next;</div><div class=\"line\">     &#125;</div><div class=\"line\">     </div><div class=\"line\">     <span class=\"keyword\">if</span>(l1 != <span class=\"literal\">NULL</span>) p-&gt;next=l1;</div><div class=\"line\">     <span class=\"keyword\">if</span>(l2 != <span class=\"literal\">NULL</span>) p-&gt;next=l2;</div><div class=\"line\">     <span class=\"keyword\">return</span> head;</div><div class=\"line\"> &#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">struct</span> ListNode* <span class=\"title\">sortList</span><span class=\"params\">(<span class=\"keyword\">struct</span> ListNode* head)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(head == <span class=\"literal\">NULL</span> || head-&gt;next == <span class=\"literal\">NULL</span>) <span class=\"keyword\">return</span> head;</div><div class=\"line\">    <span class=\"keyword\">struct</span> ListNode *slow=head;</div><div class=\"line\">    <span class=\"keyword\">struct</span> ListNode *fast=head;</div><div class=\"line\">    <span class=\"keyword\">struct</span> ListNode *pre=<span class=\"literal\">NULL</span>;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// 切成两半</span></div><div class=\"line\">    <span class=\"keyword\">while</span>(fast!= <span class=\"literal\">NULL</span> &amp;&amp; fast-&gt;next != <span class=\"literal\">NULL</span>)</div><div class=\"line\">    &#123;</div><div class=\"line\">        pre=slow;</div><div class=\"line\">        slow=slow-&gt;next;</div><div class=\"line\">        fast=fast-&gt;next-&gt;next;</div><div class=\"line\">    &#125;</div><div class=\"line\">    pre-&gt;next=<span class=\"literal\">NULL</span>;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//两半分别归并</span></div><div class=\"line\">    <span class=\"keyword\">struct</span> ListNode *l1=sortList(head);</div><div class=\"line\">    <span class=\"keyword\">struct</span> ListNode *l2=sortList(slow);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//调用merge</span></div><div class=\"line\">    <span class=\"keyword\">return</span> merge(l1,l2);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><code>基于数组的并归排序(递归)</code><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">merge_sort_recursive</span><span class=\"params\">(<span class=\"keyword\">int</span> arr[], <span class=\"keyword\">int</span> reg[], <span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> end)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (start &gt;= end)</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> len = end - start, mid = (len &gt;&gt; <span class=\"number\">1</span>) + start;</div><div class=\"line\">    <span class=\"keyword\">int</span> start1 = start, end1 = mid;</div><div class=\"line\">    <span class=\"keyword\">int</span> start2 = mid + <span class=\"number\">1</span>, end2 = end;</div><div class=\"line\">    merge_sort_recursive(arr, reg, start1, end1);</div><div class=\"line\">    merge_sort_recursive(arr, reg, start2, end2);</div><div class=\"line\">    <span class=\"keyword\">int</span> k = start;</div><div class=\"line\">    <span class=\"keyword\">while</span> (start1 &lt;= end1 &amp;&amp; start2 &lt;= end2)</div><div class=\"line\">        reg[k++] = arr[start1] &lt; arr[start2] ? arr[start1++] : arr[start2++];</div><div class=\"line\">    <span class=\"keyword\">while</span> (start1 &lt;= end1)</div><div class=\"line\">        reg[k++] = arr[start1++];</div><div class=\"line\">    <span class=\"keyword\">while</span> (start2 &lt;= end2)</div><div class=\"line\">        reg[k++] = arr[start2++];</div><div class=\"line\">    <span class=\"keyword\">for</span> (k = start; k &lt;= end; k++)</div><div class=\"line\">        arr[k] = reg[k];</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">merge_sort</span><span class=\"params\">(<span class=\"keyword\">int</span> arr[], <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> len)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> reg[len];</div><div class=\"line\">    merge_sort_recursive(arr, reg, <span class=\"number\">0</span>, len - <span class=\"number\">1</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><code>基于数组的并归排序（迭代）</code></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">min</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> x &lt; y ? x : y;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">merge_sort</span><span class=\"params\">(<span class=\"keyword\">int</span> arr[], <span class=\"keyword\">int</span> len)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span>* a = arr;</div><div class=\"line\">    <span class=\"keyword\">int</span>* b = (<span class=\"keyword\">int</span>*) <span class=\"built_in\">malloc</span>(len * <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>));</div><div class=\"line\">    <span class=\"keyword\">int</span> seg, start;</div><div class=\"line\">    <span class=\"keyword\">for</span> (seg = <span class=\"number\">1</span>; seg &lt; len; seg += seg) &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (start = <span class=\"number\">0</span>; start &lt; len; start += seg + seg) &#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> low = start, mid = min(start + seg, len), high = min(start + seg + seg, len);</div><div class=\"line\">            <span class=\"keyword\">int</span> k = low;</div><div class=\"line\">            <span class=\"keyword\">int</span> start1 = low, end1 = mid;</div><div class=\"line\">            <span class=\"keyword\">int</span> start2 = mid, end2 = high;</div><div class=\"line\">            <span class=\"keyword\">while</span> (start1 &lt; end1 &amp;&amp; start2 &lt; end2)</div><div class=\"line\">                b[k++] = a[start1] &lt; a[start2] ? a[start1++] : a[start2++];</div><div class=\"line\">            <span class=\"keyword\">while</span> (start1 &lt; end1)</div><div class=\"line\">                b[k++] = a[start1++];</div><div class=\"line\">            <span class=\"keyword\">while</span> (start2 &lt; end2)</div><div class=\"line\">                b[k++] = a[start2++];</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">int</span>* temp = a;</div><div class=\"line\">        a = b;</div><div class=\"line\">        b = temp;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (a != arr) &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> i;</div><div class=\"line\">        <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; len; i++)</div><div class=\"line\">            b[i] = a[i];</div><div class=\"line\">        b = a;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">free</span>(b);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h2><h3 id=\"时间复杂度与空间复杂度\"><a href=\"#时间复杂度与空间复杂度\" class=\"headerlink\" title=\"时间复杂度与空间复杂度\"></a>时间复杂度与空间复杂度</h3><p>时间复杂度O(n^2)</p>\n<h3 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a>代码</h3><p><code>c语言冒泡排序</code></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">bubbleSort</span><span class=\"params\">(<span class=\"keyword\">int</span> *nums, <span class=\"keyword\">int</span> lenNums)</span> </span>&#123;</div><div class=\"line\"><span class=\"keyword\">int</span> i,j;</div><div class=\"line\"><span class=\"keyword\">int</span> flag = <span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>; i &lt; lenNums; i++)</div><div class=\"line\">&#123;</div><div class=\"line\">    flag = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span>(j=<span class=\"number\">0</span>; j&lt; lenNums - i <span class=\"number\">-1</span>; j++)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"comment\">//比较并交换</span></div><div class=\"line\">        <span class=\"keyword\">if</span>(nums[j] &gt; nums[j+<span class=\"number\">1</span>])</div><div class=\"line\">        &#123;</div><div class=\"line\">            nums[j] = nums[j+<span class=\"number\">1</span>] + nums[j];</div><div class=\"line\">            nums[j+<span class=\"number\">1</span>] = nums[j] - nums[j+<span class=\"number\">1</span>];</div><div class=\"line\">            nums[j] = nums[j] - nums[j+<span class=\"number\">1</span>];</div><div class=\"line\">            flag = <span class=\"number\">0</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span>(flag == <span class=\"number\">1</span>) </div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">break</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"插入排序\"><a href=\"#插入排序\" class=\"headerlink\" title=\"插入排序\"></a>插入排序</h2><h3 id=\"时间复杂度与空间复杂度-1\"><a href=\"#时间复杂度与空间复杂度-1\" class=\"headerlink\" title=\"时间复杂度与空间复杂度\"></a>时间复杂度与空间复杂度</h3><p>时间复杂度O(n^2),空间复杂度O(1)</p>\n<h3 id=\"代码-3\"><a href=\"#代码-3\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">insertSort</span><span class=\"params\">(<span class=\"keyword\">int</span> *nums, <span class=\"keyword\">int</span> numsLen)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> tmp;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i&lt; numsLen; i++)</div><div class=\"line\">    &#123;</div><div class=\"line\">        tmp = nums[i];</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = i; j&gt;<span class=\"number\">0</span> &amp;&amp; nums[j] &lt; nums[j<span class=\"number\">-1</span>]; j--)</div><div class=\"line\">        &#123;</div><div class=\"line\">            nums[j] = nums[j<span class=\"number\">-1</span>];</div><div class=\"line\">        &#125;</div><div class=\"line\">        nums[j] = tmp;</div><div class=\"line\">    &#125; </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"基数排序\"><a href=\"#基数排序\" class=\"headerlink\" title=\"基数排序\"></a>基数排序</h2><p>基数排序是将 <code>需要排序的所有数字统一为固定位数的数字</code>（如果位数不足向前补0），然后按照位数切割，分别对每一个位数进行比较。从最低位开始，依次进行一次排序。这样排完以后就会变成一个有序序列。</p>\n<h3 id=\"时间复杂度与空间复杂度-2\"><a href=\"#时间复杂度与空间复杂度-2\" class=\"headerlink\" title=\"时间复杂度与空间复杂度\"></a>时间复杂度与空间复杂度</h3><h3 id=\"代码-4\"><a href=\"#代码-4\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">radixsort</span><span class=\"params\">($nums)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    $maxNum = max($nums);</div><div class=\"line\">    $wei = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span>($exp =<span class=\"number\">1</span> ; intval(($maxNum/$exp ))&gt; <span class=\"number\">0</span>; $exp*=<span class=\"number\">10</span> )</div><div class=\"line\">    &#123;</div><div class=\"line\">    \t$nums = countSort($nums,$exp);</div><div class=\"line\">    \tvar_dump($nums);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">countSort</span><span class=\"params\">($nums,$exp)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">for</span> ($i=<span class=\"number\">0</span>; $i &lt; <span class=\"number\">10</span>; $i++) &#123; </div><div class=\"line\">\t\t$count[$i] = <span class=\"number\">0</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">    <span class=\"keyword\">for</span>($i = <span class=\"number\">0</span>; $i&lt; count($nums); $i++)</div><div class=\"line\">    &#123;</div><div class=\"line\">    \t$key = intval(($nums[$i]/$exp)%<span class=\"number\">10</span>);</div><div class=\"line\">    \t$count[intval(($nums[$i]/$exp)%<span class=\"number\">10</span>)]++;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">for</span>($i = <span class=\"number\">1</span>; $i &lt; <span class=\"number\">10</span>; $i++)</div><div class=\"line\">    &#123;</div><div class=\"line\">    \t$count[$i] += $count[$i - <span class=\"number\">1</span>];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">for</span>($i = count($nums)<span class=\"number\">-1</span>; $i &gt;= <span class=\"number\">0</span>; $i--)</div><div class=\"line\">    &#123;</div><div class=\"line\">    \t$output[$count[intval(($nums[$i]/$exp)%<span class=\"number\">10</span>) ] <span class=\"number\">-1</span>] = $nums[$i];</div><div class=\"line\">    \t$count[intval((($nums[$i]/$exp)%<span class=\"number\">10</span>))]--;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> ($i=<span class=\"number\">0</span>; $i &lt; count($nums) ; $i++) &#123; </div><div class=\"line\">    \t$nums[$i] = $output[$i];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> $nums;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">$a = [<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">12</span>,<span class=\"number\">412</span>,<span class=\"number\">534</span>,<span class=\"number\">122</span>];</div><div class=\"line\"></div><div class=\"line\">radixsort($a);</div></pre></td></tr></table></figure>\n<h2 id=\"堆排序\"><a href=\"#堆排序\" class=\"headerlink\" title=\"堆排序\"></a>堆排序</h2><p>以最大堆为例，最大堆就是一个特殊二叉树，父节点大于子节点。<br>当前算法是以层序遍历，将二叉树存入数组中。</p>\n<ul>\n<li>堆排序每次把处于堆顶的最大值取出</li>\n<li>然后对堆进行排序</li>\n<li>一次循环，直至堆变为0</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"><span class=\"comment\">// echo number_format(100000.5).\"\\n\";</span></div><div class=\"line\"><span class=\"comment\">// echo number_format(\"100000.5\",2).\"\\n\";</span></div><div class=\"line\"><span class=\"comment\">// echo number_format(100000.5,1,\".\",\"\");</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">heapSort</span><span class=\"params\">($nums)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">//将数组划转为堆(依赖数组实现的堆)</span></div><div class=\"line\">    $n = count($nums);</div><div class=\"line\">    <span class=\"keyword\">for</span>($i = intval($n/<span class=\"number\">2</span>) <span class=\"number\">-1</span> ; $i &gt;= <span class=\"number\">0</span>; $i--)</div><div class=\"line\">    &#123;</div><div class=\"line\">        heapify($nums, $n, $i);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span>($i = $n<span class=\"number\">-1</span>; $i &gt;= <span class=\"number\">0</span>; $i--)</div><div class=\"line\">    &#123;</div><div class=\"line\">    \t$tmp = $nums[<span class=\"number\">0</span>];</div><div class=\"line\">    \t$nums[<span class=\"number\">0</span>] = $nums[$i] ;</div><div class=\"line\">    \t$nums[$i] = $tmp;</div><div class=\"line\">    \theapify($nums, $i, <span class=\"number\">0</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    var_dump($nums);</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">heapify</span><span class=\"params\">(&amp;$nums, $n, $i)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    $largest = $i;</div><div class=\"line\">    $l = $i * <span class=\"number\">2</span> +<span class=\"number\">1</span>;</div><div class=\"line\">    $r = $i * <span class=\"number\">2</span> +<span class=\"number\">2</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span>($l &lt; $n &amp;&amp; $nums[$largest] &lt; $nums[$l])</div><div class=\"line\">    &#123;</div><div class=\"line\">    \t$largest = $l;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span>($r &lt; $n &amp;&amp; $nums[$largest] &lt; $nums[$r])</div><div class=\"line\">    &#123;</div><div class=\"line\">    \t$largest = $r;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span>($largest != $i)</div><div class=\"line\">    &#123;</div><div class=\"line\">    \t$tmp = $nums[$i];</div><div class=\"line\">    \t$nums[$i] = $nums[$largest];</div><div class=\"line\">    \t$nums[$largest] = $tmp;</div><div class=\"line\"></div><div class=\"line\">    \theapify($nums, $n, $largest);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">$a = [<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">12</span>,<span class=\"number\">412</span>,<span class=\"number\">534</span>,<span class=\"number\">122</span>,<span class=\"number\">534</span>,<span class=\"number\">0</span>,<span class=\"number\">77</span>,<span class=\"number\">88</span>,<span class=\"number\">99</span>,<span class=\"number\">78</span>,<span class=\"number\">56</span>,<span class=\"number\">35</span>,<span class=\"number\">34</span>,<span class=\"number\">1</span>];</div><div class=\"line\"></div><div class=\"line\">heapSort($a);</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"桶排序\"><a href=\"#桶排序\" class=\"headerlink\" title=\"桶排序\"></a>桶排序</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"> </div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"快速排序（快拍）\"><a href=\"#快速排序（快拍）\" class=\"headerlink\" title=\"快速排序（快拍）\"></a>快速排序（快拍）</h2><p>快速排序的思想是分治，平均时间复杂度O(nlogn)，当然快速排序的时间复杂度并不是稳定的，最大时间复杂度是n^2。当然在用C语言实现的快速排序中，快速排序是原地排序，所有排序中空间复杂最低。</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><p><code>基于数组的快速排序（递归）</code> </p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">qSort</span><span class=\"params\">(<span class=\"keyword\">int</span> *a, <span class=\"keyword\">int</span> low, <span class=\"keyword\">int</span> high)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(low &gt; high) <span class=\"keyword\">return</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> first = low;</div><div class=\"line\">    <span class=\"keyword\">int</span> last = high;</div><div class=\"line\">    <span class=\"keyword\">int</span> key = a[first];</div><div class=\"line\">    <span class=\"keyword\">while</span>(first &lt; last)&#123;</div><div class=\"line\">        <span class=\"keyword\">while</span>(first &lt; last &amp;&amp; a[last] &gt;= key) --last;</div><div class=\"line\">        <span class=\"keyword\">if</span>(first &lt; last) a[first] = a[last]; <span class=\"comment\">//这个地方是精髓啊</span></div><div class=\"line\">        <span class=\"keyword\">while</span>(first &lt; last &amp;&amp; a[first] &lt;= key) ++first;</div><div class=\"line\">        <span class=\"keyword\">if</span>(first &lt; last) a[last] = a[first];</div><div class=\"line\">        &#125;</div><div class=\"line\">    a[first] = key;</div><div class=\"line\">    Qsort(a, low, first<span class=\"number\">-1</span>);</div><div class=\"line\">    Qsort(a, first+<span class=\"number\">1</span>, high);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><code>这个版本可能便于理解</code></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(<span class=\"keyword\">int</span> *x, <span class=\"keyword\">int</span> *y)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> t = *x;</div><div class=\"line\">    *x = *y;</div><div class=\"line\">    *y = t;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">quick_sort_recursive</span><span class=\"params\">(<span class=\"keyword\">int</span> arr[], <span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> end)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (start &gt;= end)</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> mid = arr[end];</div><div class=\"line\">    <span class=\"keyword\">int</span> left = start, right = end - <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">while</span> (left &lt; right) &#123;</div><div class=\"line\">        <span class=\"keyword\">while</span> (arr[left] &lt; mid &amp;&amp; left &lt; right)</div><div class=\"line\">            left++;</div><div class=\"line\">        <span class=\"keyword\">while</span> (arr[right] &gt;= mid &amp;&amp; left &lt; right)</div><div class=\"line\">            right--;</div><div class=\"line\">        swap(&amp;arr[left], &amp;arr[right]);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (arr[left] &gt;= arr[end])</div><div class=\"line\">        swap(&amp;arr[left], &amp;arr[end]);</div><div class=\"line\">    <span class=\"keyword\">else</span></div><div class=\"line\">        left++;</div><div class=\"line\">    <span class=\"keyword\">if</span> (left)</div><div class=\"line\">        quick_sort_recursive(arr, start, left - <span class=\"number\">1</span>);</div><div class=\"line\">    quick_sort_recursive(arr, left + <span class=\"number\">1</span>, end);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">quick_sort</span><span class=\"params\">(<span class=\"keyword\">int</span> arr[], <span class=\"keyword\">int</span> len)</span> </span>&#123;</div><div class=\"line\">    quick_sort_recursive(arr, <span class=\"number\">0</span>, len - <span class=\"number\">1</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><code>php的快速排序</code><br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">qSort</span><span class=\"params\">(&amp;$envelopes, $start, $end )</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>($end &lt;= $start)</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        $i = $start;</div><div class=\"line\">        $j = $end;</div><div class=\"line\">        <span class=\"keyword\">while</span>($i &lt; $j)</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">while</span>($i &lt; $end &amp;&amp; $envelopes[$i] &lt;= $envelopes[$start])</div><div class=\"line\">            &#123;</div><div class=\"line\">                $i++;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">while</span>($j &gt; $start &amp;&amp; $envelopes[$j] &gt;  $envelopes[$start])</div><div class=\"line\">            &#123;</div><div class=\"line\">                $j--;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">if</span>($i &lt; $j)</div><div class=\"line\">            &#123;</div><div class=\"line\">                $tmp = $envelopes[$i];</div><div class=\"line\">                $envelopes[$i] = $envelopes[$j];</div><div class=\"line\">                $envelopes[$j] = $tmp;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">//或者当i= 8 j = 10 i--j++（处理当j==i ）指向9事无法交换情况。</span></div><div class=\"line\">        <span class=\"keyword\">if</span>($envelopes[$i] &lt; $envelopes[$start]) &#123;</div><div class=\"line\">            $tmp = $envelopes[$start];</div><div class=\"line\">            $envelopes[$start] = $envelopes[$j];</div><div class=\"line\">            $envelopes[$i] = $tmp;</div><div class=\"line\">        &#125;</div><div class=\"line\">        qSort($envelopes, $start, $i<span class=\"number\">-1</span>);</div><div class=\"line\">        qSort($envelopes, $i+<span class=\"number\">1</span>, $end);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><code>基于链表的快速排序</code><br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">struct</span> Node   </div><div class=\"line\">&#123;  </div><div class=\"line\">    <span class=\"keyword\">int</span> key;  </div><div class=\"line\">    Node* next;  </div><div class=\"line\">&#125;;  </div><div class=\"line\">  </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(<span class=\"keyword\">int</span>* a, <span class=\"keyword\">int</span>* b)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> tmp = *a ;</div><div class=\"line\">    *a = *b;</div><div class=\"line\">    *b = tmp;</div><div class=\"line\">&#125;  </div><div class=\"line\"><span class=\"function\">Node* <span class=\"title\">GetPartion</span><span class=\"params\">(Node* pBegin, Node* pEnd)</span>  </span></div><div class=\"line\">&#123;  </div><div class=\"line\">    <span class=\"keyword\">int</span> key = pBegin-&gt;key;  </div><div class=\"line\">    Node* p = pBegin;  </div><div class=\"line\">    Node* q = p-&gt;next;  </div><div class=\"line\">  </div><div class=\"line\">    <span class=\"keyword\">while</span>(q != pEnd)  </div><div class=\"line\">    &#123;  </div><div class=\"line\">        <span class=\"keyword\">if</span>(q-&gt;key &lt; key)  </div><div class=\"line\">        &#123;  </div><div class=\"line\">            p = p-&gt;next;  </div><div class=\"line\">            swap(p-&gt;key,q-&gt;key);  </div><div class=\"line\">        &#125;  </div><div class=\"line\">  </div><div class=\"line\">        q = q-&gt;next;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    swap(&amp;p-&gt;key,&amp;pBegin-&gt;key);  </div><div class=\"line\">    <span class=\"keyword\">return</span> p;  </div><div class=\"line\">&#125;  </div><div class=\"line\">  </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">QuickSort</span><span class=\"params\">(Node* pBeign, Node* pEnd)</span>  </span></div><div class=\"line\">&#123;  </div><div class=\"line\">    <span class=\"keyword\">if</span>(pBeign != pEnd)  </div><div class=\"line\">    &#123;  </div><div class=\"line\">        Node* partion = GetPartion(pBeign,pEnd);  </div><div class=\"line\">        QuickSort(pBeign,partion);  </div><div class=\"line\">        QuickSort(partion-&gt;next,pEnd);  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"并归排序\"><a href=\"#并归排序\" class=\"headerlink\" title=\"并归排序\"></a>并归排序</h2><p>并归排序的思想是分治的思想，时间复杂度 O(nlogn)。</p>\n<ul>\n<li>如果一个链表（数组）只有一个元素或者为空直接返回。</li>\n<li>如果链表（数组）可以分成尽可能相等两部分，将其分成尽可能相等两部分。</li>\n<li>对于两个被分开的两个部分进行整个归并排序</li>\n<li>把两个拍好序的链表（数组）进行合并。<br>与快拍的区别是：<code>快排是先处理完再递归</code> 而归并排序是<code>先递归在处理</code></li>\n</ul>\n<p>基于链表的并归排序。</p>\n<h3 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">struct</span> ListNode * <span class=\"title\">merge</span><span class=\"params\">(<span class=\"keyword\">struct</span> ListNode *l1,<span class=\"keyword\">struct</span> ListNode *l2)</span></span></div><div class=\"line\"> &#123;</div><div class=\"line\">     <span class=\"keyword\">if</span>(l1 == <span class=\"literal\">NULL</span>) <span class=\"keyword\">return</span> l2;</div><div class=\"line\">     <span class=\"keyword\">if</span>(l2 == <span class=\"literal\">NULL</span>) <span class=\"keyword\">return</span> l1;</div><div class=\"line\">     <span class=\"keyword\">if</span>( (l1==<span class=\"literal\">NULL</span>) &amp;&amp;(l2==<span class=\"literal\">NULL</span>) ) <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</div><div class=\"line\">     </div><div class=\"line\">     <span class=\"keyword\">struct</span> ListNode *head=<span class=\"literal\">NULL</span>;</div><div class=\"line\">     <span class=\"keyword\">if</span>(l1-&gt;val &lt; l2-&gt;val)</div><div class=\"line\">    &#123;</div><div class=\"line\">        head=l1;</div><div class=\"line\">        l1=l1-&gt;next;</div><div class=\"line\">    &#125;</div><div class=\"line\">     <span class=\"keyword\">else</span> </div><div class=\"line\">     &#123;</div><div class=\"line\">         head=l2;</div><div class=\"line\">         l2=l2-&gt;next;</div><div class=\"line\">     &#125;</div><div class=\"line\">     </div><div class=\"line\">     <span class=\"keyword\">struct</span> ListNode *p=head;</div><div class=\"line\">     <span class=\"keyword\">while</span>(l1 != <span class=\"literal\">NULL</span> &amp;&amp; l2 != <span class=\"literal\">NULL</span>)</div><div class=\"line\">     &#123;</div><div class=\"line\">         <span class=\"keyword\">if</span>(l1-&gt;val &lt; l2-&gt;val)</div><div class=\"line\">         &#123;</div><div class=\"line\">             p-&gt;next=l1;</div><div class=\"line\">             l1=l1-&gt;next;</div><div class=\"line\">         &#125;</div><div class=\"line\">         <span class=\"keyword\">else</span></div><div class=\"line\">         &#123;</div><div class=\"line\">             p-&gt;next=l2;</div><div class=\"line\">             l2=l2-&gt;next;</div><div class=\"line\">         &#125;</div><div class=\"line\">         p=p-&gt;next;</div><div class=\"line\">     &#125;</div><div class=\"line\">     </div><div class=\"line\">     <span class=\"keyword\">if</span>(l1 != <span class=\"literal\">NULL</span>) p-&gt;next=l1;</div><div class=\"line\">     <span class=\"keyword\">if</span>(l2 != <span class=\"literal\">NULL</span>) p-&gt;next=l2;</div><div class=\"line\">     <span class=\"keyword\">return</span> head;</div><div class=\"line\"> &#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">struct</span> ListNode* <span class=\"title\">sortList</span><span class=\"params\">(<span class=\"keyword\">struct</span> ListNode* head)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(head == <span class=\"literal\">NULL</span> || head-&gt;next == <span class=\"literal\">NULL</span>) <span class=\"keyword\">return</span> head;</div><div class=\"line\">    <span class=\"keyword\">struct</span> ListNode *slow=head;</div><div class=\"line\">    <span class=\"keyword\">struct</span> ListNode *fast=head;</div><div class=\"line\">    <span class=\"keyword\">struct</span> ListNode *pre=<span class=\"literal\">NULL</span>;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// 切成两半</span></div><div class=\"line\">    <span class=\"keyword\">while</span>(fast!= <span class=\"literal\">NULL</span> &amp;&amp; fast-&gt;next != <span class=\"literal\">NULL</span>)</div><div class=\"line\">    &#123;</div><div class=\"line\">        pre=slow;</div><div class=\"line\">        slow=slow-&gt;next;</div><div class=\"line\">        fast=fast-&gt;next-&gt;next;</div><div class=\"line\">    &#125;</div><div class=\"line\">    pre-&gt;next=<span class=\"literal\">NULL</span>;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//两半分别归并</span></div><div class=\"line\">    <span class=\"keyword\">struct</span> ListNode *l1=sortList(head);</div><div class=\"line\">    <span class=\"keyword\">struct</span> ListNode *l2=sortList(slow);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//调用merge</span></div><div class=\"line\">    <span class=\"keyword\">return</span> merge(l1,l2);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><code>基于数组的并归排序(递归)</code><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">merge_sort_recursive</span><span class=\"params\">(<span class=\"keyword\">int</span> arr[], <span class=\"keyword\">int</span> reg[], <span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> end)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (start &gt;= end)</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> len = end - start, mid = (len &gt;&gt; <span class=\"number\">1</span>) + start;</div><div class=\"line\">    <span class=\"keyword\">int</span> start1 = start, end1 = mid;</div><div class=\"line\">    <span class=\"keyword\">int</span> start2 = mid + <span class=\"number\">1</span>, end2 = end;</div><div class=\"line\">    merge_sort_recursive(arr, reg, start1, end1);</div><div class=\"line\">    merge_sort_recursive(arr, reg, start2, end2);</div><div class=\"line\">    <span class=\"keyword\">int</span> k = start;</div><div class=\"line\">    <span class=\"keyword\">while</span> (start1 &lt;= end1 &amp;&amp; start2 &lt;= end2)</div><div class=\"line\">        reg[k++] = arr[start1] &lt; arr[start2] ? arr[start1++] : arr[start2++];</div><div class=\"line\">    <span class=\"keyword\">while</span> (start1 &lt;= end1)</div><div class=\"line\">        reg[k++] = arr[start1++];</div><div class=\"line\">    <span class=\"keyword\">while</span> (start2 &lt;= end2)</div><div class=\"line\">        reg[k++] = arr[start2++];</div><div class=\"line\">    <span class=\"keyword\">for</span> (k = start; k &lt;= end; k++)</div><div class=\"line\">        arr[k] = reg[k];</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">merge_sort</span><span class=\"params\">(<span class=\"keyword\">int</span> arr[], <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> len)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> reg[len];</div><div class=\"line\">    merge_sort_recursive(arr, reg, <span class=\"number\">0</span>, len - <span class=\"number\">1</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><code>基于数组的并归排序（迭代）</code></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">min</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> x &lt; y ? x : y;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">merge_sort</span><span class=\"params\">(<span class=\"keyword\">int</span> arr[], <span class=\"keyword\">int</span> len)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span>* a = arr;</div><div class=\"line\">    <span class=\"keyword\">int</span>* b = (<span class=\"keyword\">int</span>*) <span class=\"built_in\">malloc</span>(len * <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>));</div><div class=\"line\">    <span class=\"keyword\">int</span> seg, start;</div><div class=\"line\">    <span class=\"keyword\">for</span> (seg = <span class=\"number\">1</span>; seg &lt; len; seg += seg) &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (start = <span class=\"number\">0</span>; start &lt; len; start += seg + seg) &#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> low = start, mid = min(start + seg, len), high = min(start + seg + seg, len);</div><div class=\"line\">            <span class=\"keyword\">int</span> k = low;</div><div class=\"line\">            <span class=\"keyword\">int</span> start1 = low, end1 = mid;</div><div class=\"line\">            <span class=\"keyword\">int</span> start2 = mid, end2 = high;</div><div class=\"line\">            <span class=\"keyword\">while</span> (start1 &lt; end1 &amp;&amp; start2 &lt; end2)</div><div class=\"line\">                b[k++] = a[start1] &lt; a[start2] ? a[start1++] : a[start2++];</div><div class=\"line\">            <span class=\"keyword\">while</span> (start1 &lt; end1)</div><div class=\"line\">                b[k++] = a[start1++];</div><div class=\"line\">            <span class=\"keyword\">while</span> (start2 &lt; end2)</div><div class=\"line\">                b[k++] = a[start2++];</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">int</span>* temp = a;</div><div class=\"line\">        a = b;</div><div class=\"line\">        b = temp;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (a != arr) &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> i;</div><div class=\"line\">        <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; len; i++)</div><div class=\"line\">            b[i] = a[i];</div><div class=\"line\">        b = a;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">free</span>(b);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h2><h3 id=\"时间复杂度与空间复杂度\"><a href=\"#时间复杂度与空间复杂度\" class=\"headerlink\" title=\"时间复杂度与空间复杂度\"></a>时间复杂度与空间复杂度</h3><p>时间复杂度O(n^2)</p>\n<h3 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a>代码</h3><p><code>c语言冒泡排序</code></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">bubbleSort</span><span class=\"params\">(<span class=\"keyword\">int</span> *nums, <span class=\"keyword\">int</span> lenNums)</span> </span>&#123;</div><div class=\"line\"><span class=\"keyword\">int</span> i,j;</div><div class=\"line\"><span class=\"keyword\">int</span> flag = <span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>; i &lt; lenNums; i++)</div><div class=\"line\">&#123;</div><div class=\"line\">    flag = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span>(j=<span class=\"number\">0</span>; j&lt; lenNums - i <span class=\"number\">-1</span>; j++)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"comment\">//比较并交换</span></div><div class=\"line\">        <span class=\"keyword\">if</span>(nums[j] &gt; nums[j+<span class=\"number\">1</span>])</div><div class=\"line\">        &#123;</div><div class=\"line\">            nums[j] = nums[j+<span class=\"number\">1</span>] + nums[j];</div><div class=\"line\">            nums[j+<span class=\"number\">1</span>] = nums[j] - nums[j+<span class=\"number\">1</span>];</div><div class=\"line\">            nums[j] = nums[j] - nums[j+<span class=\"number\">1</span>];</div><div class=\"line\">            flag = <span class=\"number\">0</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span>(flag == <span class=\"number\">1</span>) </div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">break</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"插入排序\"><a href=\"#插入排序\" class=\"headerlink\" title=\"插入排序\"></a>插入排序</h2><h3 id=\"时间复杂度与空间复杂度-1\"><a href=\"#时间复杂度与空间复杂度-1\" class=\"headerlink\" title=\"时间复杂度与空间复杂度\"></a>时间复杂度与空间复杂度</h3><p>时间复杂度O(n^2),空间复杂度O(1)</p>\n<h3 id=\"代码-3\"><a href=\"#代码-3\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">insertSort</span><span class=\"params\">(<span class=\"keyword\">int</span> *nums, <span class=\"keyword\">int</span> numsLen)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> tmp;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i&lt; numsLen; i++)</div><div class=\"line\">    &#123;</div><div class=\"line\">        tmp = nums[i];</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = i; j&gt;<span class=\"number\">0</span> &amp;&amp; nums[j] &lt; nums[j<span class=\"number\">-1</span>]; j--)</div><div class=\"line\">        &#123;</div><div class=\"line\">            nums[j] = nums[j<span class=\"number\">-1</span>];</div><div class=\"line\">        &#125;</div><div class=\"line\">        nums[j] = tmp;</div><div class=\"line\">    &#125; </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"基数排序\"><a href=\"#基数排序\" class=\"headerlink\" title=\"基数排序\"></a>基数排序</h2><p>基数排序是将 <code>需要排序的所有数字统一为固定位数的数字</code>（如果位数不足向前补0），然后按照位数切割，分别对每一个位数进行比较。从最低位开始，依次进行一次排序。这样排完以后就会变成一个有序序列。</p>\n<h3 id=\"时间复杂度与空间复杂度-2\"><a href=\"#时间复杂度与空间复杂度-2\" class=\"headerlink\" title=\"时间复杂度与空间复杂度\"></a>时间复杂度与空间复杂度</h3><h3 id=\"代码-4\"><a href=\"#代码-4\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">radixsort</span><span class=\"params\">($nums)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    $maxNum = max($nums);</div><div class=\"line\">    $wei = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span>($exp =<span class=\"number\">1</span> ; intval(($maxNum/$exp ))&gt; <span class=\"number\">0</span>; $exp*=<span class=\"number\">10</span> )</div><div class=\"line\">    &#123;</div><div class=\"line\">    \t$nums = countSort($nums,$exp);</div><div class=\"line\">    \tvar_dump($nums);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">countSort</span><span class=\"params\">($nums,$exp)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">for</span> ($i=<span class=\"number\">0</span>; $i &lt; <span class=\"number\">10</span>; $i++) &#123; </div><div class=\"line\">\t\t$count[$i] = <span class=\"number\">0</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">    <span class=\"keyword\">for</span>($i = <span class=\"number\">0</span>; $i&lt; count($nums); $i++)</div><div class=\"line\">    &#123;</div><div class=\"line\">    \t$key = intval(($nums[$i]/$exp)%<span class=\"number\">10</span>);</div><div class=\"line\">    \t$count[intval(($nums[$i]/$exp)%<span class=\"number\">10</span>)]++;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">for</span>($i = <span class=\"number\">1</span>; $i &lt; <span class=\"number\">10</span>; $i++)</div><div class=\"line\">    &#123;</div><div class=\"line\">    \t$count[$i] += $count[$i - <span class=\"number\">1</span>];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">for</span>($i = count($nums)<span class=\"number\">-1</span>; $i &gt;= <span class=\"number\">0</span>; $i--)</div><div class=\"line\">    &#123;</div><div class=\"line\">    \t$output[$count[intval(($nums[$i]/$exp)%<span class=\"number\">10</span>) ] <span class=\"number\">-1</span>] = $nums[$i];</div><div class=\"line\">    \t$count[intval((($nums[$i]/$exp)%<span class=\"number\">10</span>))]--;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> ($i=<span class=\"number\">0</span>; $i &lt; count($nums) ; $i++) &#123; </div><div class=\"line\">    \t$nums[$i] = $output[$i];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> $nums;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">$a = [<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">12</span>,<span class=\"number\">412</span>,<span class=\"number\">534</span>,<span class=\"number\">122</span>];</div><div class=\"line\"></div><div class=\"line\">radixsort($a);</div></pre></td></tr></table></figure>\n<h2 id=\"堆排序\"><a href=\"#堆排序\" class=\"headerlink\" title=\"堆排序\"></a>堆排序</h2><p>以最大堆为例，最大堆就是一个特殊二叉树，父节点大于子节点。<br>当前算法是以层序遍历，将二叉树存入数组中。</p>\n<ul>\n<li>堆排序每次把处于堆顶的最大值取出</li>\n<li>然后对堆进行排序</li>\n<li>一次循环，直至堆变为0</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"><span class=\"comment\">// echo number_format(100000.5).\"\\n\";</span></div><div class=\"line\"><span class=\"comment\">// echo number_format(\"100000.5\",2).\"\\n\";</span></div><div class=\"line\"><span class=\"comment\">// echo number_format(100000.5,1,\".\",\"\");</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">heapSort</span><span class=\"params\">($nums)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">//将数组划转为堆(依赖数组实现的堆)</span></div><div class=\"line\">    $n = count($nums);</div><div class=\"line\">    <span class=\"keyword\">for</span>($i = intval($n/<span class=\"number\">2</span>) <span class=\"number\">-1</span> ; $i &gt;= <span class=\"number\">0</span>; $i--)</div><div class=\"line\">    &#123;</div><div class=\"line\">        heapify($nums, $n, $i);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span>($i = $n<span class=\"number\">-1</span>; $i &gt;= <span class=\"number\">0</span>; $i--)</div><div class=\"line\">    &#123;</div><div class=\"line\">    \t$tmp = $nums[<span class=\"number\">0</span>];</div><div class=\"line\">    \t$nums[<span class=\"number\">0</span>] = $nums[$i] ;</div><div class=\"line\">    \t$nums[$i] = $tmp;</div><div class=\"line\">    \theapify($nums, $i, <span class=\"number\">0</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    var_dump($nums);</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">heapify</span><span class=\"params\">(&amp;$nums, $n, $i)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    $largest = $i;</div><div class=\"line\">    $l = $i * <span class=\"number\">2</span> +<span class=\"number\">1</span>;</div><div class=\"line\">    $r = $i * <span class=\"number\">2</span> +<span class=\"number\">2</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span>($l &lt; $n &amp;&amp; $nums[$largest] &lt; $nums[$l])</div><div class=\"line\">    &#123;</div><div class=\"line\">    \t$largest = $l;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span>($r &lt; $n &amp;&amp; $nums[$largest] &lt; $nums[$r])</div><div class=\"line\">    &#123;</div><div class=\"line\">    \t$largest = $r;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span>($largest != $i)</div><div class=\"line\">    &#123;</div><div class=\"line\">    \t$tmp = $nums[$i];</div><div class=\"line\">    \t$nums[$i] = $nums[$largest];</div><div class=\"line\">    \t$nums[$largest] = $tmp;</div><div class=\"line\"></div><div class=\"line\">    \theapify($nums, $n, $largest);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">$a = [<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">12</span>,<span class=\"number\">412</span>,<span class=\"number\">534</span>,<span class=\"number\">122</span>,<span class=\"number\">534</span>,<span class=\"number\">0</span>,<span class=\"number\">77</span>,<span class=\"number\">88</span>,<span class=\"number\">99</span>,<span class=\"number\">78</span>,<span class=\"number\">56</span>,<span class=\"number\">35</span>,<span class=\"number\">34</span>,<span class=\"number\">1</span>];</div><div class=\"line\"></div><div class=\"line\">heapSort($a);</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"桶排序\"><a href=\"#桶排序\" class=\"headerlink\" title=\"桶排序\"></a>桶排序</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"> </div></pre></td></tr></table></figure>\n"},{"title":"算法-俄罗斯套娃问题","date":"2018-01-17T03:14:20.000Z","toc":true,"_content":"\n## 题目\n### 英文\nYou have a number of envelopes with widths and heights given as a pair of integers (w, h). One envelope can fit into another if and only if both the width and height of one envelope is greater than the width and height of the other envelope.\n\nWhat is the maximum number of envelopes can you Russian doll? (put one inside other)\n\nNote:\nRotation is not allowed.\n\nExample:\n\nInput: [[5,4],[6,4],[6,7],[2,3]]\nOutput: 3 \nExplanation: The maximum number of envelopes you can Russian doll is 3 ([2,3] => [5,4] => [6,7]).\n\n### 中文\n\n给定一些标记了宽度和高度的信封，宽度和高度以整数对形式 (w, h) 出现。当另一个信封的宽度和高度都比这个信封大的时候，这个信封就可以放进另一个信封里，如同俄罗斯套娃一样。\n\n请计算最多能有多少个信封能组成一组“俄罗斯套娃”信封（即可以把一个信封放到另一个信封里面）。\n\n说明:\n不允许旋转信封。\n\n## 思路\n- 首先对数组进行基数排序（如果不排序，直接计算每个节点的套娃数会消耗大量时间）\n- 遍历每个节点，计算每个节点最大套娃数\n- 返回最大套娃数。\n\n## 代码\n\n```php\nclass Solution {\n    function maxEnvelopes($envelopes) {\n        $nums = count($envelopes);\n        if($nums < 1) {\n            return 0;\n        }\n        //实现基数排序\n        sort($envelopes);\n        // var_dump($envelopes);\n        $nums = count($envelopes);\n\n        $dp[0] = 1;\n        for($i = 1; $i < $nums; $i++)\n        {\n            $dp[$i] = 1;\n            for($j = 0; $j< $i; $j ++){\n                if($envelopes[$i][0] > $envelopes[$j][0] && $envelopes[$i][1] > $envelopes[$j][1])\n                {\n                    $tmp = $dp[$j] +1;\n                    $dp[$i]  = max($dp[$i], $tmp); \n                }\n            }\n        }\n        return max($dp);\n    }\n}\n```\n## 延伸\n\nphp下的`sort`是如何实现？ 如何实现`基数排序`？","source":"_posts/算法-俄罗斯套娃问题.md","raw":"---\ntitle: 算法-俄罗斯套娃问题\ndate: 2018-01-17 11:14:20\ntags: 算法\ncategories: 算法\ntoc: true \n---\n\n## 题目\n### 英文\nYou have a number of envelopes with widths and heights given as a pair of integers (w, h). One envelope can fit into another if and only if both the width and height of one envelope is greater than the width and height of the other envelope.\n\nWhat is the maximum number of envelopes can you Russian doll? (put one inside other)\n\nNote:\nRotation is not allowed.\n\nExample:\n\nInput: [[5,4],[6,4],[6,7],[2,3]]\nOutput: 3 \nExplanation: The maximum number of envelopes you can Russian doll is 3 ([2,3] => [5,4] => [6,7]).\n\n### 中文\n\n给定一些标记了宽度和高度的信封，宽度和高度以整数对形式 (w, h) 出现。当另一个信封的宽度和高度都比这个信封大的时候，这个信封就可以放进另一个信封里，如同俄罗斯套娃一样。\n\n请计算最多能有多少个信封能组成一组“俄罗斯套娃”信封（即可以把一个信封放到另一个信封里面）。\n\n说明:\n不允许旋转信封。\n\n## 思路\n- 首先对数组进行基数排序（如果不排序，直接计算每个节点的套娃数会消耗大量时间）\n- 遍历每个节点，计算每个节点最大套娃数\n- 返回最大套娃数。\n\n## 代码\n\n```php\nclass Solution {\n    function maxEnvelopes($envelopes) {\n        $nums = count($envelopes);\n        if($nums < 1) {\n            return 0;\n        }\n        //实现基数排序\n        sort($envelopes);\n        // var_dump($envelopes);\n        $nums = count($envelopes);\n\n        $dp[0] = 1;\n        for($i = 1; $i < $nums; $i++)\n        {\n            $dp[$i] = 1;\n            for($j = 0; $j< $i; $j ++){\n                if($envelopes[$i][0] > $envelopes[$j][0] && $envelopes[$i][1] > $envelopes[$j][1])\n                {\n                    $tmp = $dp[$j] +1;\n                    $dp[$i]  = max($dp[$i], $tmp); \n                }\n            }\n        }\n        return max($dp);\n    }\n}\n```\n## 延伸\n\nphp下的`sort`是如何实现？ 如何实现`基数排序`？","slug":"算法-俄罗斯套娃问题","published":1,"updated":"2019-02-21T03:49:34.718Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjswwkdqx003mg7wwadyz440d","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><h3 id=\"英文\"><a href=\"#英文\" class=\"headerlink\" title=\"英文\"></a>英文</h3><p>You have a number of envelopes with widths and heights given as a pair of integers (w, h). One envelope can fit into another if and only if both the width and height of one envelope is greater than the width and height of the other envelope.</p>\n<p>What is the maximum number of envelopes can you Russian doll? (put one inside other)</p>\n<p>Note:<br>Rotation is not allowed.</p>\n<p>Example:</p>\n<p>Input: [[5,4],[6,4],[6,7],[2,3]]<br>Output: 3<br>Explanation: The maximum number of envelopes you can Russian doll is 3 ([2,3] =&gt; [5,4] =&gt; [6,7]).</p>\n<h3 id=\"中文\"><a href=\"#中文\" class=\"headerlink\" title=\"中文\"></a>中文</h3><p>给定一些标记了宽度和高度的信封，宽度和高度以整数对形式 (w, h) 出现。当另一个信封的宽度和高度都比这个信封大的时候，这个信封就可以放进另一个信封里，如同俄罗斯套娃一样。</p>\n<p>请计算最多能有多少个信封能组成一组“俄罗斯套娃”信封（即可以把一个信封放到另一个信封里面）。</p>\n<p>说明:<br>不允许旋转信封。</p>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><ul>\n<li>首先对数组进行基数排序（如果不排序，直接计算每个节点的套娃数会消耗大量时间）</li>\n<li>遍历每个节点，计算每个节点最大套娃数</li>\n<li>返回最大套娃数。</li>\n</ul>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">maxEnvelopes</span><span class=\"params\">($envelopes)</span> </span>&#123;</div><div class=\"line\">        $nums = count($envelopes);</div><div class=\"line\">        <span class=\"keyword\">if</span>($nums &lt; <span class=\"number\">1</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">//实现基数排序</span></div><div class=\"line\">        sort($envelopes);</div><div class=\"line\">        <span class=\"comment\">// var_dump($envelopes);</span></div><div class=\"line\">        $nums = count($envelopes);</div><div class=\"line\"></div><div class=\"line\">        $dp[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span>($i = <span class=\"number\">1</span>; $i &lt; $nums; $i++)</div><div class=\"line\">        &#123;</div><div class=\"line\">            $dp[$i] = <span class=\"number\">1</span>;</div><div class=\"line\">            <span class=\"keyword\">for</span>($j = <span class=\"number\">0</span>; $j&lt; $i; $j ++)&#123;</div><div class=\"line\">                <span class=\"keyword\">if</span>($envelopes[$i][<span class=\"number\">0</span>] &gt; $envelopes[$j][<span class=\"number\">0</span>] &amp;&amp; $envelopes[$i][<span class=\"number\">1</span>] &gt; $envelopes[$j][<span class=\"number\">1</span>])</div><div class=\"line\">                &#123;</div><div class=\"line\">                    $tmp = $dp[$j] +<span class=\"number\">1</span>;</div><div class=\"line\">                    $dp[$i]  = max($dp[$i], $tmp); </div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> max($dp);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"延伸\"><a href=\"#延伸\" class=\"headerlink\" title=\"延伸\"></a>延伸</h2><p>php下的<code>sort</code>是如何实现？ 如何实现<code>基数排序</code>？</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><h3 id=\"英文\"><a href=\"#英文\" class=\"headerlink\" title=\"英文\"></a>英文</h3><p>You have a number of envelopes with widths and heights given as a pair of integers (w, h). One envelope can fit into another if and only if both the width and height of one envelope is greater than the width and height of the other envelope.</p>\n<p>What is the maximum number of envelopes can you Russian doll? (put one inside other)</p>\n<p>Note:<br>Rotation is not allowed.</p>\n<p>Example:</p>\n<p>Input: [[5,4],[6,4],[6,7],[2,3]]<br>Output: 3<br>Explanation: The maximum number of envelopes you can Russian doll is 3 ([2,3] =&gt; [5,4] =&gt; [6,7]).</p>\n<h3 id=\"中文\"><a href=\"#中文\" class=\"headerlink\" title=\"中文\"></a>中文</h3><p>给定一些标记了宽度和高度的信封，宽度和高度以整数对形式 (w, h) 出现。当另一个信封的宽度和高度都比这个信封大的时候，这个信封就可以放进另一个信封里，如同俄罗斯套娃一样。</p>\n<p>请计算最多能有多少个信封能组成一组“俄罗斯套娃”信封（即可以把一个信封放到另一个信封里面）。</p>\n<p>说明:<br>不允许旋转信封。</p>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><ul>\n<li>首先对数组进行基数排序（如果不排序，直接计算每个节点的套娃数会消耗大量时间）</li>\n<li>遍历每个节点，计算每个节点最大套娃数</li>\n<li>返回最大套娃数。</li>\n</ul>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">maxEnvelopes</span><span class=\"params\">($envelopes)</span> </span>&#123;</div><div class=\"line\">        $nums = count($envelopes);</div><div class=\"line\">        <span class=\"keyword\">if</span>($nums &lt; <span class=\"number\">1</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">//实现基数排序</span></div><div class=\"line\">        sort($envelopes);</div><div class=\"line\">        <span class=\"comment\">// var_dump($envelopes);</span></div><div class=\"line\">        $nums = count($envelopes);</div><div class=\"line\"></div><div class=\"line\">        $dp[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span>($i = <span class=\"number\">1</span>; $i &lt; $nums; $i++)</div><div class=\"line\">        &#123;</div><div class=\"line\">            $dp[$i] = <span class=\"number\">1</span>;</div><div class=\"line\">            <span class=\"keyword\">for</span>($j = <span class=\"number\">0</span>; $j&lt; $i; $j ++)&#123;</div><div class=\"line\">                <span class=\"keyword\">if</span>($envelopes[$i][<span class=\"number\">0</span>] &gt; $envelopes[$j][<span class=\"number\">0</span>] &amp;&amp; $envelopes[$i][<span class=\"number\">1</span>] &gt; $envelopes[$j][<span class=\"number\">1</span>])</div><div class=\"line\">                &#123;</div><div class=\"line\">                    $tmp = $dp[$j] +<span class=\"number\">1</span>;</div><div class=\"line\">                    $dp[$i]  = max($dp[$i], $tmp); </div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> max($dp);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"延伸\"><a href=\"#延伸\" class=\"headerlink\" title=\"延伸\"></a>延伸</h2><p>php下的<code>sort</code>是如何实现？ 如何实现<code>基数排序</code>？</p>\n"},{"title":"算法-求两个有序链表的中位数","date":"2018-01-27T12:34:22.000Z","toc":true,"_content":"\n## 题目\n### 英文\n`4. Median of Two Sorted Arrays`\nThere are two sorted arrays nums1 and nums2 of size m and n respectively.\n\nFind the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).\n\nYou may assume nums1 and nums2 cannot be both empty.\n\nExample 1:\n\nnums1 = [1, 3]\nnums2 = [2]\n\nThe median is 2.0\nExample 2:\n\nnums1 = [1, 2]\nnums2 = [3, 4]\n\nThe median is (2 + 3)/2 = 2.5\n\n### 中文\n`4. 寻找两个有序数组的中位数`\n给定两个大小为 m 和 n 的有序数组 nums1 和 nums2。\n\n请你找出这两个有序数组的中位数，并且要求算法的时间复杂度为 O(log(m + n))。\n\n你可以假设 nums1 和 nums2 不会同时为空。\n\n示例 1:\n\nnums1 = [1, 3]\nnums2 = [2]\n\n则中位数是 2.0\n示例 2:\n\nnums1 = [1, 2]\nnums2 = [3, 4]\n\n则中位数是 (2 + 3)/2 = 2.5\n## 思路\n一下午，还是没解出来尴尬。\n\n\n## 代码\n官方解题思路\n\n```php\nclass Solution {\n    function findMedianSortedArrays($nums1, $nums2) {\n        $count1 = count($nums1);\n        $count2 = count($nums2);\n        \n        //交换$nums1为大一点数组\n        if($count2 > $count1)\n        {\n            $count1 = $count1 + $count2;\n            $count2 = $count1 - $count2;\n            $count1 = $count1 - $count2;\n            $tmp = $nums1;\n            $nums1 = $nums2;\n            $nums2= $tmp;\n        }\n    \n        $iMin = 0;\n        $iMax = $count2;\n        $halfLen = intval((($count1 + $count2 +1)/2)) ;\n        while($iMin <= $iMax)\n        {\n            $i = intval((($iMax+$iMin) /2));\n            $j = $halfLen -$i;\n            if($i < $iMax && $nums1[$j-1] > $nums2[$i])\n            {\n                $iMin = $i + 1;\n            }\n            else if($i > $iMin && $nums2[$i-1] > $nums1[$j])\n            {\n                $iMax = $i-1;\n            }\n            else {\n                $maxLeft = 0;\n                if($i == 0){$maxLeft = $nums1[$j-1];}\n                elseif($j == 0){$maxLeft =  $nums2[$i-1];}\n                else{$maxLeft = max($nums2[$i-1],$nums1[$j-1]);}\n                if((($count1 + $count2)%2) == 1) {return $maxLeft;}\n                $minRight = 0;\n                if($i == $count2){$minRight = $nums1[$j];}\n                else if($j == $count1){$minRight = $nums2[$i];}\n                else{$minRight = min($nums1[$j], $nums2[$i]);}\n                \n                return ($maxLeft + $minRight)/2;\n            }\n        }\n        return 0.0;\n    }\n    \n}\n```\n\n思路清晰\n```java\nclass Solution {\n    public double findMedianSortedArrays(int[] nums1, int[] nums2) {\n        /**\n        如果两个数组的中位数 mid1 < mid2, 则说明合并后的中位数位于 num1.right + num2之间\n        否则合并后的中位数位于 nums2.right + nums1 之间 (right 是相对于 mid 而言的) \n        getKth 函数负责找到两个数组合并(假设)后有序的数组中的第 k 个元素, k 从 1 开始计算\n        **/   \n        if(nums1.length == 0 && nums2.length == 0) return 0.0;\n        int m = nums1.length, n = nums2.length;\n        // l: 合并后数组的左半部分的最后一个数 r: 合并后数组的右半部分的第一个数\n        int l = (m+n+1) / 2; \n        int r = (m+n+2) / 2;\n        // 如果 m+n 是奇数 getKth 的返回值是相同的, 是偶数则是合并后数组的中间两个数\n        if(l == r) return getKth(nums1, 0, nums2, 0, l);\n        return (getKth(nums1, 0, nums2, 0, l) + getKth(nums1, 0, nums2, 0, r)) / 2.0;\n    }\n    \n    private double getKth(int[] nums1, int st1, int[] nums2, int st2, int k) {\n        // 边界情况, 如果 nums1数组已经穷尽了, 则只能返回 nums2 中的第 k 个元素\n        if(st1 > nums1.length-1) return nums2[st2 + k - 1];\n        if(st2 > nums2.length-1) return nums1[st1 + k - 1];\n        // 边界情况, k = 1 则返回两个数组中最小的那个\n        if(k == 1) return Math.min(nums1[st1], nums2[st2]);\n        // 在 nums1 和 nums2 当前范围内找出 mid1 和 mid2 判断舍弃哪半部分\n        int mid1 = Integer.MAX_VALUE;\n        int mid2 = Integer.MAX_VALUE;\n        if(st1 + k/2 - 1 < nums1.length) mid1 = nums1[st1 + k/2 - 1];\n        if(st2 + k/2 - 1 < nums2.length) mid2 = nums2[st2 + k/2 - 1];\n        // mid1 < mid2 在 nums1.right 和 nums2 之间搜索, 丢掉 k/2 个数.\n        if(mid1 < mid2)\n            return getKth(nums1, st1 + k/2, nums2, st2, k - k/2);\n        else\n            return getKth(nums1, st1, nums2, st2 + k/2, k - k/2);\n    }\n}\n```\n\n\n\n自己思路\n```php\nclass Solution {\n    function findMedianSortedArrays($nums1, $nums2) {\n        $count1 = count($nums1);\n        $count2 = count($nums2);\n        //第一个数组为0情况\n        if($count1 == 0 ) {\n            if($count2%2 ==0) {\n                return ($nums2[$count2/2-1] + $nums2[($count2/2)])/2;\n            } else {\n                return $nums2[ceil($count2/2)-1];\n            }\n        }\n        //第二个数组为0情况\n        if($count2 == 0 ) {\n            if($count1%2 ==0) {\n                return ($nums1[$count1/2 -1] + $nums1[($count1/2)])/2;\n            } else {\n                return $nums1[ceil($count1/2) -1];\n            }\n        }\n        //中位数在两个数组合并以后的位置（从0开始）\n        $halfLen = ($count1 + $count2)%2 == 0 ? ($count1 + $count2)/2 -1 :intval(($count1 + $count2)/2) ;\n        //交换$nums1为大一点数组\n        if($count2 > $count1)\n        {\n            $count1 = $count1 + $count2;\n            $count2 = $count1 - $count2;\n            $count1 = $count1 - $count2;\n            $tmp = $nums1;\n            $nums1 = $nums2;\n            $nums2= $tmp;\n        }\n        $ret = $this->Bsearch($nums1, $nums2, 0,$count2-1, $halfLen);\n        return $ret;\n    }\n    \n    //递归查找\n    function Bsearch($nums1,$nums2,$start,$end,$halfLen)\n    {\n        \n        //向下取整中位数\n        $mid = intval(($start+$end)/2);\n        $poision = $halfLen - $mid-1;\n        //这里临界值判断\n        if($start == $end) {\n            //偶数个\n            if((count($nums1)+count($nums2))%2==0)\n            {\n                if($start == 0 ) \n                {\n                    if($nums1[$poision] < $nums2[$mid]){\n                        echo 1;\n                        return ($nums1[$poision] +(isset($nums1[$poision+1]) ? min($nums1[$poision+1], $nums2[$mid]) : $nums2[$mid]))/2; \n                    } \n                    if($nums1[$poision] > $nums2[$mid])\n                    {\n                        echo 2;\n                        return (($nums1[$poision] + (isset($nums1[$poision-1]) ? max($nums1[$poision-1], $nums2[$mid]) : $nums2[$mid]) )/2); \n                    }\n                } \n                if($start == (count($nums2) -1)) {\n                    //都是临界值时\n                    if($nums1[$poision] > $nums2[$mid])\n                    {\n                        echo 3;\n                        return (($nums1[$poision] + (isset($nums1[$poision-1]) ? max($nums1[$poision-1], $nums2[$mid]) : $nums2[$mid]) )/2); \n                    }\n                    if($nums1[$poision] < $nums2[$mid])\n                    {\n                        echo 9;\n                        return ($nums1[$poision] +(isset($nums1[$poision+1]) ? min($nums1[$poision+1], $nums2[$mid]) : $nums2[$mid]))/2;\n                    }\n                }\n                echo 5;\n                return ((isset($nums1[$poision+1]) ? min($nums2[$mid], $nums1[$poision+1]) : $nums2[$mid])  + $nums1[$poision])/2;\n            } else {\n                //基数个\n                if($start == 0 ) \n                {\n                    if($nums1[$poision] > $nums2[$mid]){\n                        echo 6;\n                        return $nums2[$mid];\n                    }\n                    echo 11;\n                    return $nums1[$poision];\n                }\n                if($start == count($count2)-1)\n                {\n                    if($start == $halfLen && $nums1[$poision] < $nums2[$mid])\n                    {\n                        echo 7;\n                        return $nums1[$poision];\n                    }\n                    echo 8;\n                    return $nums1[$poision];\n                }\n                echo 10;\n                echo $poision.\"\\n\";\n                echo $mid.\"\\n\";\n                return $nums1[$poision];\n            }\n        }\n        //比对中位数\n        if($nums2[$mid] < $nums1[$poision])\n        {\n            $ret = $this->Bsearch($nums1, $nums2,  (($mid+1 > $end) ? $end : $mid+1), $end, $halfLen);\n        } elseif($nums2[$mid] > $nums1[$poision])\n        {\n            $ret = $this->Bsearch($nums1,$nums2,$start ,(($mid-1 < $start) ? $start : $mid-1), $halfLen);\n        }elseif($nums2[$mid] == $nums1[$poision])\n        {\n            $ret = $nums2[$mid];\n        }\n        return $ret;\n    }\n    \n}\n```\n","source":"_posts/算法-求两个有序链表的中位数.md","raw":"---\ntitle: 算法-求两个有序链表的中位数\ndate: 2018-01-27 20:34:22\ntags: 算法\ncategories: 算法\ntoc: true\n---\n\n## 题目\n### 英文\n`4. Median of Two Sorted Arrays`\nThere are two sorted arrays nums1 and nums2 of size m and n respectively.\n\nFind the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).\n\nYou may assume nums1 and nums2 cannot be both empty.\n\nExample 1:\n\nnums1 = [1, 3]\nnums2 = [2]\n\nThe median is 2.0\nExample 2:\n\nnums1 = [1, 2]\nnums2 = [3, 4]\n\nThe median is (2 + 3)/2 = 2.5\n\n### 中文\n`4. 寻找两个有序数组的中位数`\n给定两个大小为 m 和 n 的有序数组 nums1 和 nums2。\n\n请你找出这两个有序数组的中位数，并且要求算法的时间复杂度为 O(log(m + n))。\n\n你可以假设 nums1 和 nums2 不会同时为空。\n\n示例 1:\n\nnums1 = [1, 3]\nnums2 = [2]\n\n则中位数是 2.0\n示例 2:\n\nnums1 = [1, 2]\nnums2 = [3, 4]\n\n则中位数是 (2 + 3)/2 = 2.5\n## 思路\n一下午，还是没解出来尴尬。\n\n\n## 代码\n官方解题思路\n\n```php\nclass Solution {\n    function findMedianSortedArrays($nums1, $nums2) {\n        $count1 = count($nums1);\n        $count2 = count($nums2);\n        \n        //交换$nums1为大一点数组\n        if($count2 > $count1)\n        {\n            $count1 = $count1 + $count2;\n            $count2 = $count1 - $count2;\n            $count1 = $count1 - $count2;\n            $tmp = $nums1;\n            $nums1 = $nums2;\n            $nums2= $tmp;\n        }\n    \n        $iMin = 0;\n        $iMax = $count2;\n        $halfLen = intval((($count1 + $count2 +1)/2)) ;\n        while($iMin <= $iMax)\n        {\n            $i = intval((($iMax+$iMin) /2));\n            $j = $halfLen -$i;\n            if($i < $iMax && $nums1[$j-1] > $nums2[$i])\n            {\n                $iMin = $i + 1;\n            }\n            else if($i > $iMin && $nums2[$i-1] > $nums1[$j])\n            {\n                $iMax = $i-1;\n            }\n            else {\n                $maxLeft = 0;\n                if($i == 0){$maxLeft = $nums1[$j-1];}\n                elseif($j == 0){$maxLeft =  $nums2[$i-1];}\n                else{$maxLeft = max($nums2[$i-1],$nums1[$j-1]);}\n                if((($count1 + $count2)%2) == 1) {return $maxLeft;}\n                $minRight = 0;\n                if($i == $count2){$minRight = $nums1[$j];}\n                else if($j == $count1){$minRight = $nums2[$i];}\n                else{$minRight = min($nums1[$j], $nums2[$i]);}\n                \n                return ($maxLeft + $minRight)/2;\n            }\n        }\n        return 0.0;\n    }\n    \n}\n```\n\n思路清晰\n```java\nclass Solution {\n    public double findMedianSortedArrays(int[] nums1, int[] nums2) {\n        /**\n        如果两个数组的中位数 mid1 < mid2, 则说明合并后的中位数位于 num1.right + num2之间\n        否则合并后的中位数位于 nums2.right + nums1 之间 (right 是相对于 mid 而言的) \n        getKth 函数负责找到两个数组合并(假设)后有序的数组中的第 k 个元素, k 从 1 开始计算\n        **/   \n        if(nums1.length == 0 && nums2.length == 0) return 0.0;\n        int m = nums1.length, n = nums2.length;\n        // l: 合并后数组的左半部分的最后一个数 r: 合并后数组的右半部分的第一个数\n        int l = (m+n+1) / 2; \n        int r = (m+n+2) / 2;\n        // 如果 m+n 是奇数 getKth 的返回值是相同的, 是偶数则是合并后数组的中间两个数\n        if(l == r) return getKth(nums1, 0, nums2, 0, l);\n        return (getKth(nums1, 0, nums2, 0, l) + getKth(nums1, 0, nums2, 0, r)) / 2.0;\n    }\n    \n    private double getKth(int[] nums1, int st1, int[] nums2, int st2, int k) {\n        // 边界情况, 如果 nums1数组已经穷尽了, 则只能返回 nums2 中的第 k 个元素\n        if(st1 > nums1.length-1) return nums2[st2 + k - 1];\n        if(st2 > nums2.length-1) return nums1[st1 + k - 1];\n        // 边界情况, k = 1 则返回两个数组中最小的那个\n        if(k == 1) return Math.min(nums1[st1], nums2[st2]);\n        // 在 nums1 和 nums2 当前范围内找出 mid1 和 mid2 判断舍弃哪半部分\n        int mid1 = Integer.MAX_VALUE;\n        int mid2 = Integer.MAX_VALUE;\n        if(st1 + k/2 - 1 < nums1.length) mid1 = nums1[st1 + k/2 - 1];\n        if(st2 + k/2 - 1 < nums2.length) mid2 = nums2[st2 + k/2 - 1];\n        // mid1 < mid2 在 nums1.right 和 nums2 之间搜索, 丢掉 k/2 个数.\n        if(mid1 < mid2)\n            return getKth(nums1, st1 + k/2, nums2, st2, k - k/2);\n        else\n            return getKth(nums1, st1, nums2, st2 + k/2, k - k/2);\n    }\n}\n```\n\n\n\n自己思路\n```php\nclass Solution {\n    function findMedianSortedArrays($nums1, $nums2) {\n        $count1 = count($nums1);\n        $count2 = count($nums2);\n        //第一个数组为0情况\n        if($count1 == 0 ) {\n            if($count2%2 ==0) {\n                return ($nums2[$count2/2-1] + $nums2[($count2/2)])/2;\n            } else {\n                return $nums2[ceil($count2/2)-1];\n            }\n        }\n        //第二个数组为0情况\n        if($count2 == 0 ) {\n            if($count1%2 ==0) {\n                return ($nums1[$count1/2 -1] + $nums1[($count1/2)])/2;\n            } else {\n                return $nums1[ceil($count1/2) -1];\n            }\n        }\n        //中位数在两个数组合并以后的位置（从0开始）\n        $halfLen = ($count1 + $count2)%2 == 0 ? ($count1 + $count2)/2 -1 :intval(($count1 + $count2)/2) ;\n        //交换$nums1为大一点数组\n        if($count2 > $count1)\n        {\n            $count1 = $count1 + $count2;\n            $count2 = $count1 - $count2;\n            $count1 = $count1 - $count2;\n            $tmp = $nums1;\n            $nums1 = $nums2;\n            $nums2= $tmp;\n        }\n        $ret = $this->Bsearch($nums1, $nums2, 0,$count2-1, $halfLen);\n        return $ret;\n    }\n    \n    //递归查找\n    function Bsearch($nums1,$nums2,$start,$end,$halfLen)\n    {\n        \n        //向下取整中位数\n        $mid = intval(($start+$end)/2);\n        $poision = $halfLen - $mid-1;\n        //这里临界值判断\n        if($start == $end) {\n            //偶数个\n            if((count($nums1)+count($nums2))%2==0)\n            {\n                if($start == 0 ) \n                {\n                    if($nums1[$poision] < $nums2[$mid]){\n                        echo 1;\n                        return ($nums1[$poision] +(isset($nums1[$poision+1]) ? min($nums1[$poision+1], $nums2[$mid]) : $nums2[$mid]))/2; \n                    } \n                    if($nums1[$poision] > $nums2[$mid])\n                    {\n                        echo 2;\n                        return (($nums1[$poision] + (isset($nums1[$poision-1]) ? max($nums1[$poision-1], $nums2[$mid]) : $nums2[$mid]) )/2); \n                    }\n                } \n                if($start == (count($nums2) -1)) {\n                    //都是临界值时\n                    if($nums1[$poision] > $nums2[$mid])\n                    {\n                        echo 3;\n                        return (($nums1[$poision] + (isset($nums1[$poision-1]) ? max($nums1[$poision-1], $nums2[$mid]) : $nums2[$mid]) )/2); \n                    }\n                    if($nums1[$poision] < $nums2[$mid])\n                    {\n                        echo 9;\n                        return ($nums1[$poision] +(isset($nums1[$poision+1]) ? min($nums1[$poision+1], $nums2[$mid]) : $nums2[$mid]))/2;\n                    }\n                }\n                echo 5;\n                return ((isset($nums1[$poision+1]) ? min($nums2[$mid], $nums1[$poision+1]) : $nums2[$mid])  + $nums1[$poision])/2;\n            } else {\n                //基数个\n                if($start == 0 ) \n                {\n                    if($nums1[$poision] > $nums2[$mid]){\n                        echo 6;\n                        return $nums2[$mid];\n                    }\n                    echo 11;\n                    return $nums1[$poision];\n                }\n                if($start == count($count2)-1)\n                {\n                    if($start == $halfLen && $nums1[$poision] < $nums2[$mid])\n                    {\n                        echo 7;\n                        return $nums1[$poision];\n                    }\n                    echo 8;\n                    return $nums1[$poision];\n                }\n                echo 10;\n                echo $poision.\"\\n\";\n                echo $mid.\"\\n\";\n                return $nums1[$poision];\n            }\n        }\n        //比对中位数\n        if($nums2[$mid] < $nums1[$poision])\n        {\n            $ret = $this->Bsearch($nums1, $nums2,  (($mid+1 > $end) ? $end : $mid+1), $end, $halfLen);\n        } elseif($nums2[$mid] > $nums1[$poision])\n        {\n            $ret = $this->Bsearch($nums1,$nums2,$start ,(($mid-1 < $start) ? $start : $mid-1), $halfLen);\n        }elseif($nums2[$mid] == $nums1[$poision])\n        {\n            $ret = $nums2[$mid];\n        }\n        return $ret;\n    }\n    \n}\n```\n","slug":"算法-求两个有序链表的中位数","published":1,"updated":"2019-02-21T03:49:34.724Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjswwkdqz003pg7wwpv84v23u","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><h3 id=\"英文\"><a href=\"#英文\" class=\"headerlink\" title=\"英文\"></a>英文</h3><p><code>4. Median of Two Sorted Arrays</code><br>There are two sorted arrays nums1 and nums2 of size m and n respectively.</p>\n<p>Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).</p>\n<p>You may assume nums1 and nums2 cannot be both empty.</p>\n<p>Example 1:</p>\n<p>nums1 = [1, 3]<br>nums2 = [2]</p>\n<p>The median is 2.0<br>Example 2:</p>\n<p>nums1 = [1, 2]<br>nums2 = [3, 4]</p>\n<p>The median is (2 + 3)/2 = 2.5</p>\n<h3 id=\"中文\"><a href=\"#中文\" class=\"headerlink\" title=\"中文\"></a>中文</h3><p><code>4. 寻找两个有序数组的中位数</code><br>给定两个大小为 m 和 n 的有序数组 nums1 和 nums2。</p>\n<p>请你找出这两个有序数组的中位数，并且要求算法的时间复杂度为 O(log(m + n))。</p>\n<p>你可以假设 nums1 和 nums2 不会同时为空。</p>\n<p>示例 1:</p>\n<p>nums1 = [1, 3]<br>nums2 = [2]</p>\n<p>则中位数是 2.0<br>示例 2:</p>\n<p>nums1 = [1, 2]<br>nums2 = [3, 4]</p>\n<p>则中位数是 (2 + 3)/2 = 2.5</p>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>一下午，还是没解出来尴尬。</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><p>官方解题思路</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">findMedianSortedArrays</span><span class=\"params\">($nums1, $nums2)</span> </span>&#123;</div><div class=\"line\">        $count1 = count($nums1);</div><div class=\"line\">        $count2 = count($nums2);</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\">//交换$nums1为大一点数组</span></div><div class=\"line\">        <span class=\"keyword\">if</span>($count2 &gt; $count1)</div><div class=\"line\">        &#123;</div><div class=\"line\">            $count1 = $count1 + $count2;</div><div class=\"line\">            $count2 = $count1 - $count2;</div><div class=\"line\">            $count1 = $count1 - $count2;</div><div class=\"line\">            $tmp = $nums1;</div><div class=\"line\">            $nums1 = $nums2;</div><div class=\"line\">            $nums2= $tmp;</div><div class=\"line\">        &#125;</div><div class=\"line\">    </div><div class=\"line\">        $iMin = <span class=\"number\">0</span>;</div><div class=\"line\">        $iMax = $count2;</div><div class=\"line\">        $halfLen = intval((($count1 + $count2 +<span class=\"number\">1</span>)/<span class=\"number\">2</span>)) ;</div><div class=\"line\">        <span class=\"keyword\">while</span>($iMin &lt;= $iMax)</div><div class=\"line\">        &#123;</div><div class=\"line\">            $i = intval((($iMax+$iMin) /<span class=\"number\">2</span>));</div><div class=\"line\">            $j = $halfLen -$i;</div><div class=\"line\">            <span class=\"keyword\">if</span>($i &lt; $iMax &amp;&amp; $nums1[$j<span class=\"number\">-1</span>] &gt; $nums2[$i])</div><div class=\"line\">            &#123;</div><div class=\"line\">                $iMin = $i + <span class=\"number\">1</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>($i &gt; $iMin &amp;&amp; $nums2[$i<span class=\"number\">-1</span>] &gt; $nums1[$j])</div><div class=\"line\">            &#123;</div><div class=\"line\">                $iMax = $i<span class=\"number\">-1</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                $maxLeft = <span class=\"number\">0</span>;</div><div class=\"line\">                <span class=\"keyword\">if</span>($i == <span class=\"number\">0</span>)&#123;$maxLeft = $nums1[$j<span class=\"number\">-1</span>];&#125;</div><div class=\"line\">                <span class=\"keyword\">elseif</span>($j == <span class=\"number\">0</span>)&#123;$maxLeft =  $nums2[$i<span class=\"number\">-1</span>];&#125;</div><div class=\"line\">                <span class=\"keyword\">else</span>&#123;$maxLeft = max($nums2[$i<span class=\"number\">-1</span>],$nums1[$j<span class=\"number\">-1</span>]);&#125;</div><div class=\"line\">                <span class=\"keyword\">if</span>((($count1 + $count2)%<span class=\"number\">2</span>) == <span class=\"number\">1</span>) &#123;<span class=\"keyword\">return</span> $maxLeft;&#125;</div><div class=\"line\">                $minRight = <span class=\"number\">0</span>;</div><div class=\"line\">                <span class=\"keyword\">if</span>($i == $count2)&#123;$minRight = $nums1[$j];&#125;</div><div class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>($j == $count1)&#123;$minRight = $nums2[$i];&#125;</div><div class=\"line\">                <span class=\"keyword\">else</span>&#123;$minRight = min($nums1[$j], $nums2[$i]);&#125;</div><div class=\"line\">                </div><div class=\"line\">                <span class=\"keyword\">return</span> ($maxLeft + $minRight)/<span class=\"number\">2</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0.0</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>思路清晰<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">findMedianSortedArrays</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums1, <span class=\"keyword\">int</span>[] nums2)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">/**</span></div><div class=\"line\">        如果两个数组的中位数 mid1 &lt; mid2, 则说明合并后的中位数位于 num1.right + num2之间</div><div class=\"line\">        否则合并后的中位数位于 nums2.right + nums1 之间 (right 是相对于 mid 而言的) </div><div class=\"line\">        getKth 函数负责找到两个数组合并(假设)后有序的数组中的第 k 个元素, k 从 1 开始计算</div><div class=\"line\">        **/   </div><div class=\"line\">        <span class=\"keyword\">if</span>(nums1.length == <span class=\"number\">0</span> &amp;&amp; nums2.length == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0.0</span>;</div><div class=\"line\">        <span class=\"keyword\">int</span> m = nums1.length, n = nums2.length;</div><div class=\"line\">        <span class=\"comment\">// l: 合并后数组的左半部分的最后一个数 r: 合并后数组的右半部分的第一个数</span></div><div class=\"line\">        <span class=\"keyword\">int</span> l = (m+n+<span class=\"number\">1</span>) / <span class=\"number\">2</span>; </div><div class=\"line\">        <span class=\"keyword\">int</span> r = (m+n+<span class=\"number\">2</span>) / <span class=\"number\">2</span>;</div><div class=\"line\">        <span class=\"comment\">// 如果 m+n 是奇数 getKth 的返回值是相同的, 是偶数则是合并后数组的中间两个数</span></div><div class=\"line\">        <span class=\"keyword\">if</span>(l == r) <span class=\"keyword\">return</span> getKth(nums1, <span class=\"number\">0</span>, nums2, <span class=\"number\">0</span>, l);</div><div class=\"line\">        <span class=\"keyword\">return</span> (getKth(nums1, <span class=\"number\">0</span>, nums2, <span class=\"number\">0</span>, l) + getKth(nums1, <span class=\"number\">0</span>, nums2, <span class=\"number\">0</span>, r)) / <span class=\"number\">2.0</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">double</span> <span class=\"title\">getKth</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums1, <span class=\"keyword\">int</span> st1, <span class=\"keyword\">int</span>[] nums2, <span class=\"keyword\">int</span> st2, <span class=\"keyword\">int</span> k)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// 边界情况, 如果 nums1数组已经穷尽了, 则只能返回 nums2 中的第 k 个元素</span></div><div class=\"line\">        <span class=\"keyword\">if</span>(st1 &gt; nums1.length-<span class=\"number\">1</span>) <span class=\"keyword\">return</span> nums2[st2 + k - <span class=\"number\">1</span>];</div><div class=\"line\">        <span class=\"keyword\">if</span>(st2 &gt; nums2.length-<span class=\"number\">1</span>) <span class=\"keyword\">return</span> nums1[st1 + k - <span class=\"number\">1</span>];</div><div class=\"line\">        <span class=\"comment\">// 边界情况, k = 1 则返回两个数组中最小的那个</span></div><div class=\"line\">        <span class=\"keyword\">if</span>(k == <span class=\"number\">1</span>) <span class=\"keyword\">return</span> Math.min(nums1[st1], nums2[st2]);</div><div class=\"line\">        <span class=\"comment\">// 在 nums1 和 nums2 当前范围内找出 mid1 和 mid2 判断舍弃哪半部分</span></div><div class=\"line\">        <span class=\"keyword\">int</span> mid1 = Integer.MAX_VALUE;</div><div class=\"line\">        <span class=\"keyword\">int</span> mid2 = Integer.MAX_VALUE;</div><div class=\"line\">        <span class=\"keyword\">if</span>(st1 + k/<span class=\"number\">2</span> - <span class=\"number\">1</span> &lt; nums1.length) mid1 = nums1[st1 + k/<span class=\"number\">2</span> - <span class=\"number\">1</span>];</div><div class=\"line\">        <span class=\"keyword\">if</span>(st2 + k/<span class=\"number\">2</span> - <span class=\"number\">1</span> &lt; nums2.length) mid2 = nums2[st2 + k/<span class=\"number\">2</span> - <span class=\"number\">1</span>];</div><div class=\"line\">        <span class=\"comment\">// mid1 &lt; mid2 在 nums1.right 和 nums2 之间搜索, 丢掉 k/2 个数.</span></div><div class=\"line\">        <span class=\"keyword\">if</span>(mid1 &lt; mid2)</div><div class=\"line\">            <span class=\"keyword\">return</span> getKth(nums1, st1 + k/<span class=\"number\">2</span>, nums2, st2, k - k/<span class=\"number\">2</span>);</div><div class=\"line\">        <span class=\"keyword\">else</span></div><div class=\"line\">            <span class=\"keyword\">return</span> getKth(nums1, st1, nums2, st2 + k/<span class=\"number\">2</span>, k - k/<span class=\"number\">2</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>自己思路<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">findMedianSortedArrays</span><span class=\"params\">($nums1, $nums2)</span> </span>&#123;</div><div class=\"line\">        $count1 = count($nums1);</div><div class=\"line\">        $count2 = count($nums2);</div><div class=\"line\">        <span class=\"comment\">//第一个数组为0情况</span></div><div class=\"line\">        <span class=\"keyword\">if</span>($count1 == <span class=\"number\">0</span> ) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>($count2%<span class=\"number\">2</span> ==<span class=\"number\">0</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> ($nums2[$count2/<span class=\"number\">2</span><span class=\"number\">-1</span>] + $nums2[($count2/<span class=\"number\">2</span>)])/<span class=\"number\">2</span>;</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> $nums2[ceil($count2/<span class=\"number\">2</span>)<span class=\"number\">-1</span>];</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">//第二个数组为0情况</span></div><div class=\"line\">        <span class=\"keyword\">if</span>($count2 == <span class=\"number\">0</span> ) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>($count1%<span class=\"number\">2</span> ==<span class=\"number\">0</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> ($nums1[$count1/<span class=\"number\">2</span> <span class=\"number\">-1</span>] + $nums1[($count1/<span class=\"number\">2</span>)])/<span class=\"number\">2</span>;</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> $nums1[ceil($count1/<span class=\"number\">2</span>) <span class=\"number\">-1</span>];</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">//中位数在两个数组合并以后的位置（从0开始）</span></div><div class=\"line\">        $halfLen = ($count1 + $count2)%<span class=\"number\">2</span> == <span class=\"number\">0</span> ? ($count1 + $count2)/<span class=\"number\">2</span> <span class=\"number\">-1</span> :intval(($count1 + $count2)/<span class=\"number\">2</span>) ;</div><div class=\"line\">        <span class=\"comment\">//交换$nums1为大一点数组</span></div><div class=\"line\">        <span class=\"keyword\">if</span>($count2 &gt; $count1)</div><div class=\"line\">        &#123;</div><div class=\"line\">            $count1 = $count1 + $count2;</div><div class=\"line\">            $count2 = $count1 - $count2;</div><div class=\"line\">            $count1 = $count1 - $count2;</div><div class=\"line\">            $tmp = $nums1;</div><div class=\"line\">            $nums1 = $nums2;</div><div class=\"line\">            $nums2= $tmp;</div><div class=\"line\">        &#125;</div><div class=\"line\">        $ret = <span class=\"keyword\">$this</span>-&gt;Bsearch($nums1, $nums2, <span class=\"number\">0</span>,$count2<span class=\"number\">-1</span>, $halfLen);</div><div class=\"line\">        <span class=\"keyword\">return</span> $ret;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//递归查找</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Bsearch</span><span class=\"params\">($nums1,$nums2,$start,$end,$halfLen)</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\">//向下取整中位数</span></div><div class=\"line\">        $mid = intval(($start+$end)/<span class=\"number\">2</span>);</div><div class=\"line\">        $poision = $halfLen - $mid<span class=\"number\">-1</span>;</div><div class=\"line\">        <span class=\"comment\">//这里临界值判断</span></div><div class=\"line\">        <span class=\"keyword\">if</span>($start == $end) &#123;</div><div class=\"line\">            <span class=\"comment\">//偶数个</span></div><div class=\"line\">            <span class=\"keyword\">if</span>((count($nums1)+count($nums2))%<span class=\"number\">2</span>==<span class=\"number\">0</span>)</div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span>($start == <span class=\"number\">0</span> ) </div><div class=\"line\">                &#123;</div><div class=\"line\">                    <span class=\"keyword\">if</span>($nums1[$poision] &lt; $nums2[$mid])&#123;</div><div class=\"line\">                        <span class=\"keyword\">echo</span> <span class=\"number\">1</span>;</div><div class=\"line\">                        <span class=\"keyword\">return</span> ($nums1[$poision] +(<span class=\"keyword\">isset</span>($nums1[$poision+<span class=\"number\">1</span>]) ? min($nums1[$poision+<span class=\"number\">1</span>], $nums2[$mid]) : $nums2[$mid]))/<span class=\"number\">2</span>; </div><div class=\"line\">                    &#125; </div><div class=\"line\">                    <span class=\"keyword\">if</span>($nums1[$poision] &gt; $nums2[$mid])</div><div class=\"line\">                    &#123;</div><div class=\"line\">                        <span class=\"keyword\">echo</span> <span class=\"number\">2</span>;</div><div class=\"line\">                        <span class=\"keyword\">return</span> (($nums1[$poision] + (<span class=\"keyword\">isset</span>($nums1[$poision<span class=\"number\">-1</span>]) ? max($nums1[$poision<span class=\"number\">-1</span>], $nums2[$mid]) : $nums2[$mid]) )/<span class=\"number\">2</span>); </div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125; </div><div class=\"line\">                <span class=\"keyword\">if</span>($start == (count($nums2) <span class=\"number\">-1</span>)) &#123;</div><div class=\"line\">                    <span class=\"comment\">//都是临界值时</span></div><div class=\"line\">                    <span class=\"keyword\">if</span>($nums1[$poision] &gt; $nums2[$mid])</div><div class=\"line\">                    &#123;</div><div class=\"line\">                        <span class=\"keyword\">echo</span> <span class=\"number\">3</span>;</div><div class=\"line\">                        <span class=\"keyword\">return</span> (($nums1[$poision] + (<span class=\"keyword\">isset</span>($nums1[$poision<span class=\"number\">-1</span>]) ? max($nums1[$poision<span class=\"number\">-1</span>], $nums2[$mid]) : $nums2[$mid]) )/<span class=\"number\">2</span>); </div><div class=\"line\">                    &#125;</div><div class=\"line\">                    <span class=\"keyword\">if</span>($nums1[$poision] &lt; $nums2[$mid])</div><div class=\"line\">                    &#123;</div><div class=\"line\">                        <span class=\"keyword\">echo</span> <span class=\"number\">9</span>;</div><div class=\"line\">                        <span class=\"keyword\">return</span> ($nums1[$poision] +(<span class=\"keyword\">isset</span>($nums1[$poision+<span class=\"number\">1</span>]) ? min($nums1[$poision+<span class=\"number\">1</span>], $nums2[$mid]) : $nums2[$mid]))/<span class=\"number\">2</span>;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">echo</span> <span class=\"number\">5</span>;</div><div class=\"line\">                <span class=\"keyword\">return</span> ((<span class=\"keyword\">isset</span>($nums1[$poision+<span class=\"number\">1</span>]) ? min($nums2[$mid], $nums1[$poision+<span class=\"number\">1</span>]) : $nums2[$mid])  + $nums1[$poision])/<span class=\"number\">2</span>;</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                <span class=\"comment\">//基数个</span></div><div class=\"line\">                <span class=\"keyword\">if</span>($start == <span class=\"number\">0</span> ) </div><div class=\"line\">                &#123;</div><div class=\"line\">                    <span class=\"keyword\">if</span>($nums1[$poision] &gt; $nums2[$mid])&#123;</div><div class=\"line\">                        <span class=\"keyword\">echo</span> <span class=\"number\">6</span>;</div><div class=\"line\">                        <span class=\"keyword\">return</span> $nums2[$mid];</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    <span class=\"keyword\">echo</span> <span class=\"number\">11</span>;</div><div class=\"line\">                    <span class=\"keyword\">return</span> $nums1[$poision];</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">if</span>($start == count($count2)<span class=\"number\">-1</span>)</div><div class=\"line\">                &#123;</div><div class=\"line\">                    <span class=\"keyword\">if</span>($start == $halfLen &amp;&amp; $nums1[$poision] &lt; $nums2[$mid])</div><div class=\"line\">                    &#123;</div><div class=\"line\">                        <span class=\"keyword\">echo</span> <span class=\"number\">7</span>;</div><div class=\"line\">                        <span class=\"keyword\">return</span> $nums1[$poision];</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    <span class=\"keyword\">echo</span> <span class=\"number\">8</span>;</div><div class=\"line\">                    <span class=\"keyword\">return</span> $nums1[$poision];</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">echo</span> <span class=\"number\">10</span>;</div><div class=\"line\">                <span class=\"keyword\">echo</span> $poision.<span class=\"string\">\"\\n\"</span>;</div><div class=\"line\">                <span class=\"keyword\">echo</span> $mid.<span class=\"string\">\"\\n\"</span>;</div><div class=\"line\">                <span class=\"keyword\">return</span> $nums1[$poision];</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">//比对中位数</span></div><div class=\"line\">        <span class=\"keyword\">if</span>($nums2[$mid] &lt; $nums1[$poision])</div><div class=\"line\">        &#123;</div><div class=\"line\">            $ret = <span class=\"keyword\">$this</span>-&gt;Bsearch($nums1, $nums2,  (($mid+<span class=\"number\">1</span> &gt; $end) ? $end : $mid+<span class=\"number\">1</span>), $end, $halfLen);</div><div class=\"line\">        &#125; <span class=\"keyword\">elseif</span>($nums2[$mid] &gt; $nums1[$poision])</div><div class=\"line\">        &#123;</div><div class=\"line\">            $ret = <span class=\"keyword\">$this</span>-&gt;Bsearch($nums1,$nums2,$start ,(($mid<span class=\"number\">-1</span> &lt; $start) ? $start : $mid<span class=\"number\">-1</span>), $halfLen);</div><div class=\"line\">        &#125;<span class=\"keyword\">elseif</span>($nums2[$mid] == $nums1[$poision])</div><div class=\"line\">        &#123;</div><div class=\"line\">            $ret = $nums2[$mid];</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> $ret;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><h3 id=\"英文\"><a href=\"#英文\" class=\"headerlink\" title=\"英文\"></a>英文</h3><p><code>4. Median of Two Sorted Arrays</code><br>There are two sorted arrays nums1 and nums2 of size m and n respectively.</p>\n<p>Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).</p>\n<p>You may assume nums1 and nums2 cannot be both empty.</p>\n<p>Example 1:</p>\n<p>nums1 = [1, 3]<br>nums2 = [2]</p>\n<p>The median is 2.0<br>Example 2:</p>\n<p>nums1 = [1, 2]<br>nums2 = [3, 4]</p>\n<p>The median is (2 + 3)/2 = 2.5</p>\n<h3 id=\"中文\"><a href=\"#中文\" class=\"headerlink\" title=\"中文\"></a>中文</h3><p><code>4. 寻找两个有序数组的中位数</code><br>给定两个大小为 m 和 n 的有序数组 nums1 和 nums2。</p>\n<p>请你找出这两个有序数组的中位数，并且要求算法的时间复杂度为 O(log(m + n))。</p>\n<p>你可以假设 nums1 和 nums2 不会同时为空。</p>\n<p>示例 1:</p>\n<p>nums1 = [1, 3]<br>nums2 = [2]</p>\n<p>则中位数是 2.0<br>示例 2:</p>\n<p>nums1 = [1, 2]<br>nums2 = [3, 4]</p>\n<p>则中位数是 (2 + 3)/2 = 2.5</p>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>一下午，还是没解出来尴尬。</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><p>官方解题思路</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">findMedianSortedArrays</span><span class=\"params\">($nums1, $nums2)</span> </span>&#123;</div><div class=\"line\">        $count1 = count($nums1);</div><div class=\"line\">        $count2 = count($nums2);</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\">//交换$nums1为大一点数组</span></div><div class=\"line\">        <span class=\"keyword\">if</span>($count2 &gt; $count1)</div><div class=\"line\">        &#123;</div><div class=\"line\">            $count1 = $count1 + $count2;</div><div class=\"line\">            $count2 = $count1 - $count2;</div><div class=\"line\">            $count1 = $count1 - $count2;</div><div class=\"line\">            $tmp = $nums1;</div><div class=\"line\">            $nums1 = $nums2;</div><div class=\"line\">            $nums2= $tmp;</div><div class=\"line\">        &#125;</div><div class=\"line\">    </div><div class=\"line\">        $iMin = <span class=\"number\">0</span>;</div><div class=\"line\">        $iMax = $count2;</div><div class=\"line\">        $halfLen = intval((($count1 + $count2 +<span class=\"number\">1</span>)/<span class=\"number\">2</span>)) ;</div><div class=\"line\">        <span class=\"keyword\">while</span>($iMin &lt;= $iMax)</div><div class=\"line\">        &#123;</div><div class=\"line\">            $i = intval((($iMax+$iMin) /<span class=\"number\">2</span>));</div><div class=\"line\">            $j = $halfLen -$i;</div><div class=\"line\">            <span class=\"keyword\">if</span>($i &lt; $iMax &amp;&amp; $nums1[$j<span class=\"number\">-1</span>] &gt; $nums2[$i])</div><div class=\"line\">            &#123;</div><div class=\"line\">                $iMin = $i + <span class=\"number\">1</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>($i &gt; $iMin &amp;&amp; $nums2[$i<span class=\"number\">-1</span>] &gt; $nums1[$j])</div><div class=\"line\">            &#123;</div><div class=\"line\">                $iMax = $i<span class=\"number\">-1</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                $maxLeft = <span class=\"number\">0</span>;</div><div class=\"line\">                <span class=\"keyword\">if</span>($i == <span class=\"number\">0</span>)&#123;$maxLeft = $nums1[$j<span class=\"number\">-1</span>];&#125;</div><div class=\"line\">                <span class=\"keyword\">elseif</span>($j == <span class=\"number\">0</span>)&#123;$maxLeft =  $nums2[$i<span class=\"number\">-1</span>];&#125;</div><div class=\"line\">                <span class=\"keyword\">else</span>&#123;$maxLeft = max($nums2[$i<span class=\"number\">-1</span>],$nums1[$j<span class=\"number\">-1</span>]);&#125;</div><div class=\"line\">                <span class=\"keyword\">if</span>((($count1 + $count2)%<span class=\"number\">2</span>) == <span class=\"number\">1</span>) &#123;<span class=\"keyword\">return</span> $maxLeft;&#125;</div><div class=\"line\">                $minRight = <span class=\"number\">0</span>;</div><div class=\"line\">                <span class=\"keyword\">if</span>($i == $count2)&#123;$minRight = $nums1[$j];&#125;</div><div class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>($j == $count1)&#123;$minRight = $nums2[$i];&#125;</div><div class=\"line\">                <span class=\"keyword\">else</span>&#123;$minRight = min($nums1[$j], $nums2[$i]);&#125;</div><div class=\"line\">                </div><div class=\"line\">                <span class=\"keyword\">return</span> ($maxLeft + $minRight)/<span class=\"number\">2</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0.0</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>思路清晰<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">findMedianSortedArrays</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums1, <span class=\"keyword\">int</span>[] nums2)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">/**</span></div><div class=\"line\">        如果两个数组的中位数 mid1 &lt; mid2, 则说明合并后的中位数位于 num1.right + num2之间</div><div class=\"line\">        否则合并后的中位数位于 nums2.right + nums1 之间 (right 是相对于 mid 而言的) </div><div class=\"line\">        getKth 函数负责找到两个数组合并(假设)后有序的数组中的第 k 个元素, k 从 1 开始计算</div><div class=\"line\">        **/   </div><div class=\"line\">        <span class=\"keyword\">if</span>(nums1.length == <span class=\"number\">0</span> &amp;&amp; nums2.length == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0.0</span>;</div><div class=\"line\">        <span class=\"keyword\">int</span> m = nums1.length, n = nums2.length;</div><div class=\"line\">        <span class=\"comment\">// l: 合并后数组的左半部分的最后一个数 r: 合并后数组的右半部分的第一个数</span></div><div class=\"line\">        <span class=\"keyword\">int</span> l = (m+n+<span class=\"number\">1</span>) / <span class=\"number\">2</span>; </div><div class=\"line\">        <span class=\"keyword\">int</span> r = (m+n+<span class=\"number\">2</span>) / <span class=\"number\">2</span>;</div><div class=\"line\">        <span class=\"comment\">// 如果 m+n 是奇数 getKth 的返回值是相同的, 是偶数则是合并后数组的中间两个数</span></div><div class=\"line\">        <span class=\"keyword\">if</span>(l == r) <span class=\"keyword\">return</span> getKth(nums1, <span class=\"number\">0</span>, nums2, <span class=\"number\">0</span>, l);</div><div class=\"line\">        <span class=\"keyword\">return</span> (getKth(nums1, <span class=\"number\">0</span>, nums2, <span class=\"number\">0</span>, l) + getKth(nums1, <span class=\"number\">0</span>, nums2, <span class=\"number\">0</span>, r)) / <span class=\"number\">2.0</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">double</span> <span class=\"title\">getKth</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums1, <span class=\"keyword\">int</span> st1, <span class=\"keyword\">int</span>[] nums2, <span class=\"keyword\">int</span> st2, <span class=\"keyword\">int</span> k)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// 边界情况, 如果 nums1数组已经穷尽了, 则只能返回 nums2 中的第 k 个元素</span></div><div class=\"line\">        <span class=\"keyword\">if</span>(st1 &gt; nums1.length-<span class=\"number\">1</span>) <span class=\"keyword\">return</span> nums2[st2 + k - <span class=\"number\">1</span>];</div><div class=\"line\">        <span class=\"keyword\">if</span>(st2 &gt; nums2.length-<span class=\"number\">1</span>) <span class=\"keyword\">return</span> nums1[st1 + k - <span class=\"number\">1</span>];</div><div class=\"line\">        <span class=\"comment\">// 边界情况, k = 1 则返回两个数组中最小的那个</span></div><div class=\"line\">        <span class=\"keyword\">if</span>(k == <span class=\"number\">1</span>) <span class=\"keyword\">return</span> Math.min(nums1[st1], nums2[st2]);</div><div class=\"line\">        <span class=\"comment\">// 在 nums1 和 nums2 当前范围内找出 mid1 和 mid2 判断舍弃哪半部分</span></div><div class=\"line\">        <span class=\"keyword\">int</span> mid1 = Integer.MAX_VALUE;</div><div class=\"line\">        <span class=\"keyword\">int</span> mid2 = Integer.MAX_VALUE;</div><div class=\"line\">        <span class=\"keyword\">if</span>(st1 + k/<span class=\"number\">2</span> - <span class=\"number\">1</span> &lt; nums1.length) mid1 = nums1[st1 + k/<span class=\"number\">2</span> - <span class=\"number\">1</span>];</div><div class=\"line\">        <span class=\"keyword\">if</span>(st2 + k/<span class=\"number\">2</span> - <span class=\"number\">1</span> &lt; nums2.length) mid2 = nums2[st2 + k/<span class=\"number\">2</span> - <span class=\"number\">1</span>];</div><div class=\"line\">        <span class=\"comment\">// mid1 &lt; mid2 在 nums1.right 和 nums2 之间搜索, 丢掉 k/2 个数.</span></div><div class=\"line\">        <span class=\"keyword\">if</span>(mid1 &lt; mid2)</div><div class=\"line\">            <span class=\"keyword\">return</span> getKth(nums1, st1 + k/<span class=\"number\">2</span>, nums2, st2, k - k/<span class=\"number\">2</span>);</div><div class=\"line\">        <span class=\"keyword\">else</span></div><div class=\"line\">            <span class=\"keyword\">return</span> getKth(nums1, st1, nums2, st2 + k/<span class=\"number\">2</span>, k - k/<span class=\"number\">2</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>自己思路<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">findMedianSortedArrays</span><span class=\"params\">($nums1, $nums2)</span> </span>&#123;</div><div class=\"line\">        $count1 = count($nums1);</div><div class=\"line\">        $count2 = count($nums2);</div><div class=\"line\">        <span class=\"comment\">//第一个数组为0情况</span></div><div class=\"line\">        <span class=\"keyword\">if</span>($count1 == <span class=\"number\">0</span> ) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>($count2%<span class=\"number\">2</span> ==<span class=\"number\">0</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> ($nums2[$count2/<span class=\"number\">2</span><span class=\"number\">-1</span>] + $nums2[($count2/<span class=\"number\">2</span>)])/<span class=\"number\">2</span>;</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> $nums2[ceil($count2/<span class=\"number\">2</span>)<span class=\"number\">-1</span>];</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">//第二个数组为0情况</span></div><div class=\"line\">        <span class=\"keyword\">if</span>($count2 == <span class=\"number\">0</span> ) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>($count1%<span class=\"number\">2</span> ==<span class=\"number\">0</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> ($nums1[$count1/<span class=\"number\">2</span> <span class=\"number\">-1</span>] + $nums1[($count1/<span class=\"number\">2</span>)])/<span class=\"number\">2</span>;</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> $nums1[ceil($count1/<span class=\"number\">2</span>) <span class=\"number\">-1</span>];</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">//中位数在两个数组合并以后的位置（从0开始）</span></div><div class=\"line\">        $halfLen = ($count1 + $count2)%<span class=\"number\">2</span> == <span class=\"number\">0</span> ? ($count1 + $count2)/<span class=\"number\">2</span> <span class=\"number\">-1</span> :intval(($count1 + $count2)/<span class=\"number\">2</span>) ;</div><div class=\"line\">        <span class=\"comment\">//交换$nums1为大一点数组</span></div><div class=\"line\">        <span class=\"keyword\">if</span>($count2 &gt; $count1)</div><div class=\"line\">        &#123;</div><div class=\"line\">            $count1 = $count1 + $count2;</div><div class=\"line\">            $count2 = $count1 - $count2;</div><div class=\"line\">            $count1 = $count1 - $count2;</div><div class=\"line\">            $tmp = $nums1;</div><div class=\"line\">            $nums1 = $nums2;</div><div class=\"line\">            $nums2= $tmp;</div><div class=\"line\">        &#125;</div><div class=\"line\">        $ret = <span class=\"keyword\">$this</span>-&gt;Bsearch($nums1, $nums2, <span class=\"number\">0</span>,$count2<span class=\"number\">-1</span>, $halfLen);</div><div class=\"line\">        <span class=\"keyword\">return</span> $ret;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//递归查找</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Bsearch</span><span class=\"params\">($nums1,$nums2,$start,$end,$halfLen)</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\">//向下取整中位数</span></div><div class=\"line\">        $mid = intval(($start+$end)/<span class=\"number\">2</span>);</div><div class=\"line\">        $poision = $halfLen - $mid<span class=\"number\">-1</span>;</div><div class=\"line\">        <span class=\"comment\">//这里临界值判断</span></div><div class=\"line\">        <span class=\"keyword\">if</span>($start == $end) &#123;</div><div class=\"line\">            <span class=\"comment\">//偶数个</span></div><div class=\"line\">            <span class=\"keyword\">if</span>((count($nums1)+count($nums2))%<span class=\"number\">2</span>==<span class=\"number\">0</span>)</div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span>($start == <span class=\"number\">0</span> ) </div><div class=\"line\">                &#123;</div><div class=\"line\">                    <span class=\"keyword\">if</span>($nums1[$poision] &lt; $nums2[$mid])&#123;</div><div class=\"line\">                        <span class=\"keyword\">echo</span> <span class=\"number\">1</span>;</div><div class=\"line\">                        <span class=\"keyword\">return</span> ($nums1[$poision] +(<span class=\"keyword\">isset</span>($nums1[$poision+<span class=\"number\">1</span>]) ? min($nums1[$poision+<span class=\"number\">1</span>], $nums2[$mid]) : $nums2[$mid]))/<span class=\"number\">2</span>; </div><div class=\"line\">                    &#125; </div><div class=\"line\">                    <span class=\"keyword\">if</span>($nums1[$poision] &gt; $nums2[$mid])</div><div class=\"line\">                    &#123;</div><div class=\"line\">                        <span class=\"keyword\">echo</span> <span class=\"number\">2</span>;</div><div class=\"line\">                        <span class=\"keyword\">return</span> (($nums1[$poision] + (<span class=\"keyword\">isset</span>($nums1[$poision<span class=\"number\">-1</span>]) ? max($nums1[$poision<span class=\"number\">-1</span>], $nums2[$mid]) : $nums2[$mid]) )/<span class=\"number\">2</span>); </div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125; </div><div class=\"line\">                <span class=\"keyword\">if</span>($start == (count($nums2) <span class=\"number\">-1</span>)) &#123;</div><div class=\"line\">                    <span class=\"comment\">//都是临界值时</span></div><div class=\"line\">                    <span class=\"keyword\">if</span>($nums1[$poision] &gt; $nums2[$mid])</div><div class=\"line\">                    &#123;</div><div class=\"line\">                        <span class=\"keyword\">echo</span> <span class=\"number\">3</span>;</div><div class=\"line\">                        <span class=\"keyword\">return</span> (($nums1[$poision] + (<span class=\"keyword\">isset</span>($nums1[$poision<span class=\"number\">-1</span>]) ? max($nums1[$poision<span class=\"number\">-1</span>], $nums2[$mid]) : $nums2[$mid]) )/<span class=\"number\">2</span>); </div><div class=\"line\">                    &#125;</div><div class=\"line\">                    <span class=\"keyword\">if</span>($nums1[$poision] &lt; $nums2[$mid])</div><div class=\"line\">                    &#123;</div><div class=\"line\">                        <span class=\"keyword\">echo</span> <span class=\"number\">9</span>;</div><div class=\"line\">                        <span class=\"keyword\">return</span> ($nums1[$poision] +(<span class=\"keyword\">isset</span>($nums1[$poision+<span class=\"number\">1</span>]) ? min($nums1[$poision+<span class=\"number\">1</span>], $nums2[$mid]) : $nums2[$mid]))/<span class=\"number\">2</span>;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">echo</span> <span class=\"number\">5</span>;</div><div class=\"line\">                <span class=\"keyword\">return</span> ((<span class=\"keyword\">isset</span>($nums1[$poision+<span class=\"number\">1</span>]) ? min($nums2[$mid], $nums1[$poision+<span class=\"number\">1</span>]) : $nums2[$mid])  + $nums1[$poision])/<span class=\"number\">2</span>;</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                <span class=\"comment\">//基数个</span></div><div class=\"line\">                <span class=\"keyword\">if</span>($start == <span class=\"number\">0</span> ) </div><div class=\"line\">                &#123;</div><div class=\"line\">                    <span class=\"keyword\">if</span>($nums1[$poision] &gt; $nums2[$mid])&#123;</div><div class=\"line\">                        <span class=\"keyword\">echo</span> <span class=\"number\">6</span>;</div><div class=\"line\">                        <span class=\"keyword\">return</span> $nums2[$mid];</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    <span class=\"keyword\">echo</span> <span class=\"number\">11</span>;</div><div class=\"line\">                    <span class=\"keyword\">return</span> $nums1[$poision];</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">if</span>($start == count($count2)<span class=\"number\">-1</span>)</div><div class=\"line\">                &#123;</div><div class=\"line\">                    <span class=\"keyword\">if</span>($start == $halfLen &amp;&amp; $nums1[$poision] &lt; $nums2[$mid])</div><div class=\"line\">                    &#123;</div><div class=\"line\">                        <span class=\"keyword\">echo</span> <span class=\"number\">7</span>;</div><div class=\"line\">                        <span class=\"keyword\">return</span> $nums1[$poision];</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    <span class=\"keyword\">echo</span> <span class=\"number\">8</span>;</div><div class=\"line\">                    <span class=\"keyword\">return</span> $nums1[$poision];</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">echo</span> <span class=\"number\">10</span>;</div><div class=\"line\">                <span class=\"keyword\">echo</span> $poision.<span class=\"string\">\"\\n\"</span>;</div><div class=\"line\">                <span class=\"keyword\">echo</span> $mid.<span class=\"string\">\"\\n\"</span>;</div><div class=\"line\">                <span class=\"keyword\">return</span> $nums1[$poision];</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">//比对中位数</span></div><div class=\"line\">        <span class=\"keyword\">if</span>($nums2[$mid] &lt; $nums1[$poision])</div><div class=\"line\">        &#123;</div><div class=\"line\">            $ret = <span class=\"keyword\">$this</span>-&gt;Bsearch($nums1, $nums2,  (($mid+<span class=\"number\">1</span> &gt; $end) ? $end : $mid+<span class=\"number\">1</span>), $end, $halfLen);</div><div class=\"line\">        &#125; <span class=\"keyword\">elseif</span>($nums2[$mid] &gt; $nums1[$poision])</div><div class=\"line\">        &#123;</div><div class=\"line\">            $ret = <span class=\"keyword\">$this</span>-&gt;Bsearch($nums1,$nums2,$start ,(($mid<span class=\"number\">-1</span> &lt; $start) ? $start : $mid<span class=\"number\">-1</span>), $halfLen);</div><div class=\"line\">        &#125;<span class=\"keyword\">elseif</span>($nums2[$mid] == $nums1[$poision])</div><div class=\"line\">        &#123;</div><div class=\"line\">            $ret = $nums2[$mid];</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> $ret;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n"},{"title":"算法-水壶问题","date":"2018-01-23T07:45:13.000Z","toc":true,"_content":"\n## 问题\n\n### 英文\nYou are given two jugs with capacities x and y litres. There is an infinite amount of water supply available. You need to determine whether it is possible to measure exactly z litres using these two jugs.\n\nIf z liters of water is measurable, you must have z liters of water contained within one or both buckets by the end.\n\nOperations allowed:\n\nFill any of the jugs completely with water.\nEmpty any of the jugs.\nPour water from one jug into another till the other jug is completely full or the first jug itself is empty.\nExample 1: (From the famous \"Die Hard\" example)\n\nInput: x = 3, y = 5, z = 4\nOutput: True\nExample 2:\n\nInput: x = 2, y = 6, z = 5\nOutput: False\n### 中文\n有两个容量分别为 x升 和 y升 的水壶以及无限多的水。请判断能否通过使用这两个水壶，从而可以得到恰好 z升 的水？\n\n如果可以，最后请用以上水壶中的一或两个来盛放取得的 z升 水。\n\n你允许：\n\n装满任意一个水壶\n清空任意一个水壶\n从一个水壶向另外一个水壶倒水，直到装满或者倒空\n示例 1: (From the famous \"Die Hard\" example)\n\n输入: x = 3, y = 5, z = 4\n输出: True\n示例 2:\n\n输入: x = 2, y = 6, z = 5\n输出: False\n\n## 分析\n需要满足条件：\n1.两个杯子，如果z>x+y说明两个杯子无法满足。\n2.如果z=0，则直接返回true;\n3.如果a||b有一个为0，则另一个一个不等于z时返回false\n4.ax+by=z,根据这个公式可知，如果z是a,b的最大公约数的整数倍。\n\n所以该问题可以转化为 z%gcd(x,y) == 0的问题。\n\n### 疑问\n以为一定要是gcd，而不能是公约数呢？(裴蜀定理)\n如何证明？？？\n\n## 代码\n\n```php\nclass Solution {\n    function canMeasureWater($x, $y, $z) {\n        //排除为0的情况\n        if($z == 0) {\n            return true;\n        }\n        if($x == 0 && $y == 0)\n        {   \n            return false;\n        }\n        //设$x为大 $y为小\n        if($x<$y)\n        {\n            $x = $x+$y;\n            $y= $x-$y;\n            $x = $x - $y;\n        }\n        if($x < 0)\n        {\n            return ($y==$z);\n        }\n        if($y != 0)\n        {\n            if($z==$x || $z==$y|| $x+$y==$z || $x-$y == $z)\n            {\n                return true;\n            }\n            if($x+$y< $z) {\n            \treturn false;\n            }\n            while($x%$y != 0) \n            {\n                $tmp = $x;\n                $x = $y%$x;\n                $y = $tmp;\n            }\n            return ($z%$y==0);\n        } else {\n            if($z%$x==0) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n```","source":"_posts/算法-水壶问题.md","raw":"---\ntitle: 算法-水壶问题\ndate: 2018-01-23 15:45:13\ntags: 算法\ncategories: 算法\ntoc: true\n---\n\n## 问题\n\n### 英文\nYou are given two jugs with capacities x and y litres. There is an infinite amount of water supply available. You need to determine whether it is possible to measure exactly z litres using these two jugs.\n\nIf z liters of water is measurable, you must have z liters of water contained within one or both buckets by the end.\n\nOperations allowed:\n\nFill any of the jugs completely with water.\nEmpty any of the jugs.\nPour water from one jug into another till the other jug is completely full or the first jug itself is empty.\nExample 1: (From the famous \"Die Hard\" example)\n\nInput: x = 3, y = 5, z = 4\nOutput: True\nExample 2:\n\nInput: x = 2, y = 6, z = 5\nOutput: False\n### 中文\n有两个容量分别为 x升 和 y升 的水壶以及无限多的水。请判断能否通过使用这两个水壶，从而可以得到恰好 z升 的水？\n\n如果可以，最后请用以上水壶中的一或两个来盛放取得的 z升 水。\n\n你允许：\n\n装满任意一个水壶\n清空任意一个水壶\n从一个水壶向另外一个水壶倒水，直到装满或者倒空\n示例 1: (From the famous \"Die Hard\" example)\n\n输入: x = 3, y = 5, z = 4\n输出: True\n示例 2:\n\n输入: x = 2, y = 6, z = 5\n输出: False\n\n## 分析\n需要满足条件：\n1.两个杯子，如果z>x+y说明两个杯子无法满足。\n2.如果z=0，则直接返回true;\n3.如果a||b有一个为0，则另一个一个不等于z时返回false\n4.ax+by=z,根据这个公式可知，如果z是a,b的最大公约数的整数倍。\n\n所以该问题可以转化为 z%gcd(x,y) == 0的问题。\n\n### 疑问\n以为一定要是gcd，而不能是公约数呢？(裴蜀定理)\n如何证明？？？\n\n## 代码\n\n```php\nclass Solution {\n    function canMeasureWater($x, $y, $z) {\n        //排除为0的情况\n        if($z == 0) {\n            return true;\n        }\n        if($x == 0 && $y == 0)\n        {   \n            return false;\n        }\n        //设$x为大 $y为小\n        if($x<$y)\n        {\n            $x = $x+$y;\n            $y= $x-$y;\n            $x = $x - $y;\n        }\n        if($x < 0)\n        {\n            return ($y==$z);\n        }\n        if($y != 0)\n        {\n            if($z==$x || $z==$y|| $x+$y==$z || $x-$y == $z)\n            {\n                return true;\n            }\n            if($x+$y< $z) {\n            \treturn false;\n            }\n            while($x%$y != 0) \n            {\n                $tmp = $x;\n                $x = $y%$x;\n                $y = $tmp;\n            }\n            return ($z%$y==0);\n        } else {\n            if($z%$x==0) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n```","slug":"算法-水壶问题","published":1,"updated":"2019-02-21T03:49:34.723Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjswwkdr0003sg7ww7n53kmcp","content":"<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><h3 id=\"英文\"><a href=\"#英文\" class=\"headerlink\" title=\"英文\"></a>英文</h3><p>You are given two jugs with capacities x and y litres. There is an infinite amount of water supply available. You need to determine whether it is possible to measure exactly z litres using these two jugs.</p>\n<p>If z liters of water is measurable, you must have z liters of water contained within one or both buckets by the end.</p>\n<p>Operations allowed:</p>\n<p>Fill any of the jugs completely with water.<br>Empty any of the jugs.<br>Pour water from one jug into another till the other jug is completely full or the first jug itself is empty.<br>Example 1: (From the famous “Die Hard” example)</p>\n<p>Input: x = 3, y = 5, z = 4<br>Output: True<br>Example 2:</p>\n<p>Input: x = 2, y = 6, z = 5<br>Output: False</p>\n<h3 id=\"中文\"><a href=\"#中文\" class=\"headerlink\" title=\"中文\"></a>中文</h3><p>有两个容量分别为 x升 和 y升 的水壶以及无限多的水。请判断能否通过使用这两个水壶，从而可以得到恰好 z升 的水？</p>\n<p>如果可以，最后请用以上水壶中的一或两个来盛放取得的 z升 水。</p>\n<p>你允许：</p>\n<p>装满任意一个水壶<br>清空任意一个水壶<br>从一个水壶向另外一个水壶倒水，直到装满或者倒空<br>示例 1: (From the famous “Die Hard” example)</p>\n<p>输入: x = 3, y = 5, z = 4<br>输出: True<br>示例 2:</p>\n<p>输入: x = 2, y = 6, z = 5<br>输出: False</p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>需要满足条件：<br>1.两个杯子，如果z&gt;x+y说明两个杯子无法满足。<br>2.如果z=0，则直接返回true;<br>3.如果a||b有一个为0，则另一个一个不等于z时返回false<br>4.ax+by=z,根据这个公式可知，如果z是a,b的最大公约数的整数倍。</p>\n<p>所以该问题可以转化为 z%gcd(x,y) == 0的问题。</p>\n<h3 id=\"疑问\"><a href=\"#疑问\" class=\"headerlink\" title=\"疑问\"></a>疑问</h3><p>以为一定要是gcd，而不能是公约数呢？(裴蜀定理)<br>如何证明？？？</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canMeasureWater</span><span class=\"params\">($x, $y, $z)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">//排除为0的情况</span></div><div class=\"line\">        <span class=\"keyword\">if</span>($z == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span>($x == <span class=\"number\">0</span> &amp;&amp; $y == <span class=\"number\">0</span>)</div><div class=\"line\">        &#123;   </div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">//设$x为大 $y为小</span></div><div class=\"line\">        <span class=\"keyword\">if</span>($x&lt;$y)</div><div class=\"line\">        &#123;</div><div class=\"line\">            $x = $x+$y;</div><div class=\"line\">            $y= $x-$y;</div><div class=\"line\">            $x = $x - $y;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span>($x &lt; <span class=\"number\">0</span>)</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> ($y==$z);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span>($y != <span class=\"number\">0</span>)</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>($z==$x || $z==$y|| $x+$y==$z || $x-$y == $z)</div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">if</span>($x+$y&lt; $z) &#123;</div><div class=\"line\">            \t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">while</span>($x%$y != <span class=\"number\">0</span>) </div><div class=\"line\">            &#123;</div><div class=\"line\">                $tmp = $x;</div><div class=\"line\">                $x = $y%$x;</div><div class=\"line\">                $y = $tmp;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">return</span> ($z%$y==<span class=\"number\">0</span>);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>($z%$x==<span class=\"number\">0</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><h3 id=\"英文\"><a href=\"#英文\" class=\"headerlink\" title=\"英文\"></a>英文</h3><p>You are given two jugs with capacities x and y litres. There is an infinite amount of water supply available. You need to determine whether it is possible to measure exactly z litres using these two jugs.</p>\n<p>If z liters of water is measurable, you must have z liters of water contained within one or both buckets by the end.</p>\n<p>Operations allowed:</p>\n<p>Fill any of the jugs completely with water.<br>Empty any of the jugs.<br>Pour water from one jug into another till the other jug is completely full or the first jug itself is empty.<br>Example 1: (From the famous “Die Hard” example)</p>\n<p>Input: x = 3, y = 5, z = 4<br>Output: True<br>Example 2:</p>\n<p>Input: x = 2, y = 6, z = 5<br>Output: False</p>\n<h3 id=\"中文\"><a href=\"#中文\" class=\"headerlink\" title=\"中文\"></a>中文</h3><p>有两个容量分别为 x升 和 y升 的水壶以及无限多的水。请判断能否通过使用这两个水壶，从而可以得到恰好 z升 的水？</p>\n<p>如果可以，最后请用以上水壶中的一或两个来盛放取得的 z升 水。</p>\n<p>你允许：</p>\n<p>装满任意一个水壶<br>清空任意一个水壶<br>从一个水壶向另外一个水壶倒水，直到装满或者倒空<br>示例 1: (From the famous “Die Hard” example)</p>\n<p>输入: x = 3, y = 5, z = 4<br>输出: True<br>示例 2:</p>\n<p>输入: x = 2, y = 6, z = 5<br>输出: False</p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>需要满足条件：<br>1.两个杯子，如果z&gt;x+y说明两个杯子无法满足。<br>2.如果z=0，则直接返回true;<br>3.如果a||b有一个为0，则另一个一个不等于z时返回false<br>4.ax+by=z,根据这个公式可知，如果z是a,b的最大公约数的整数倍。</p>\n<p>所以该问题可以转化为 z%gcd(x,y) == 0的问题。</p>\n<h3 id=\"疑问\"><a href=\"#疑问\" class=\"headerlink\" title=\"疑问\"></a>疑问</h3><p>以为一定要是gcd，而不能是公约数呢？(裴蜀定理)<br>如何证明？？？</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canMeasureWater</span><span class=\"params\">($x, $y, $z)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">//排除为0的情况</span></div><div class=\"line\">        <span class=\"keyword\">if</span>($z == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span>($x == <span class=\"number\">0</span> &amp;&amp; $y == <span class=\"number\">0</span>)</div><div class=\"line\">        &#123;   </div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">//设$x为大 $y为小</span></div><div class=\"line\">        <span class=\"keyword\">if</span>($x&lt;$y)</div><div class=\"line\">        &#123;</div><div class=\"line\">            $x = $x+$y;</div><div class=\"line\">            $y= $x-$y;</div><div class=\"line\">            $x = $x - $y;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span>($x &lt; <span class=\"number\">0</span>)</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> ($y==$z);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span>($y != <span class=\"number\">0</span>)</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>($z==$x || $z==$y|| $x+$y==$z || $x-$y == $z)</div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">if</span>($x+$y&lt; $z) &#123;</div><div class=\"line\">            \t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">while</span>($x%$y != <span class=\"number\">0</span>) </div><div class=\"line\">            &#123;</div><div class=\"line\">                $tmp = $x;</div><div class=\"line\">                $x = $y%$x;</div><div class=\"line\">                $y = $tmp;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">return</span> ($z%$y==<span class=\"number\">0</span>);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>($z%$x==<span class=\"number\">0</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"算法-最接近的三数之和-16","date":"2018-01-28T07:18:49.000Z","toc":true,"_content":"## 题目\n### 英文\nGiven an array nums of n integers and an integer target, find three integers in nums such that the sum is closest to target. Return the sum of the three integers. You may assume that each input would have exactly one solution.\n\nExample:\n\nGiven array nums = [-1, 2, 1, -4], and target = 1.\n\nThe sum that is closest to the target is 2. (-1 + 2 + 1 = 2).\n\n### 中文\n给定一个包括 n 个整数的数组 nums 和 一个目标值 target。找出 nums 中的三个整数，使得它们的和与 target 最接近。返回这三个数的和。假定每组输入只存在唯一答案。\n\n例如，给定数组 nums = [-1，2，1，-4], 和 target = 1.\n\n与 target 最接近的三个数的和为 2. (-1 + 2 + 1 = 2).\n## 思路\n\n### 原来思路\n与求三数之和相似，先排序再查找最优解，然是时间复杂度由n^3变为n^2。\n\n- 排序数组\n- 定义左右指针 `i=key+1`、`j=size-1`，左加右减，寻找最优解（val +$nums[$i]+$nums[$j] == $target）。\n- 循环节点，重复上述操作寻找最优解。\n\n## 代码\n\n```php\nclass Solution {\n    function threeSumClosest($nums, $target) {\n        sort($nums);//排序就不写了。。\n        foreach($nums as $key => $val)\n        {\n            $i = $key +1;\n            $j = count($nums) -1;\n            while($j > $i)\n            {\n                //如果相等，直接返回。\n                if($val + $nums[$i] + $nums[$j] == $target)\n                {\n                    return $val + $nums[$i] + $nums[$j];\n                }\n                //获取最优解\n                if(isset($tmp)){\n                    $absv = abs($val + $nums[$i] + $nums[$j] -$target);\n                    if($absv < abs($tmp-$target)) {\n                        $tmp = ($val + $nums[$i] + $nums[$j]);\n                    }  \n                } else {\n                    $absv = abs($val + $nums[$i] + $nums[$j] -$target);\n                    $tmp = ($val + $nums[$i] + $nums[$j]);\n                }\n                if($val + $nums[$i] + $nums[$j] > $target)\n                {\n                    $j--;\n                    continue;\n                }\n                if($val + $nums[$i] + $nums[$j] <$target)\n                {\n                    $i++;\n                    continue;\n                }\n            }\n        }\n        return $tmp;\n    }\n}\n```","source":"_posts/算法-最接近的三数之和.md","raw":"---\ntitle: 算法-最接近的三数之和-16\ndate: 2018-01-28 15:18:49\ntags: 算法\ncategories: 算法\ntoc: true\n---\n## 题目\n### 英文\nGiven an array nums of n integers and an integer target, find three integers in nums such that the sum is closest to target. Return the sum of the three integers. You may assume that each input would have exactly one solution.\n\nExample:\n\nGiven array nums = [-1, 2, 1, -4], and target = 1.\n\nThe sum that is closest to the target is 2. (-1 + 2 + 1 = 2).\n\n### 中文\n给定一个包括 n 个整数的数组 nums 和 一个目标值 target。找出 nums 中的三个整数，使得它们的和与 target 最接近。返回这三个数的和。假定每组输入只存在唯一答案。\n\n例如，给定数组 nums = [-1，2，1，-4], 和 target = 1.\n\n与 target 最接近的三个数的和为 2. (-1 + 2 + 1 = 2).\n## 思路\n\n### 原来思路\n与求三数之和相似，先排序再查找最优解，然是时间复杂度由n^3变为n^2。\n\n- 排序数组\n- 定义左右指针 `i=key+1`、`j=size-1`，左加右减，寻找最优解（val +$nums[$i]+$nums[$j] == $target）。\n- 循环节点，重复上述操作寻找最优解。\n\n## 代码\n\n```php\nclass Solution {\n    function threeSumClosest($nums, $target) {\n        sort($nums);//排序就不写了。。\n        foreach($nums as $key => $val)\n        {\n            $i = $key +1;\n            $j = count($nums) -1;\n            while($j > $i)\n            {\n                //如果相等，直接返回。\n                if($val + $nums[$i] + $nums[$j] == $target)\n                {\n                    return $val + $nums[$i] + $nums[$j];\n                }\n                //获取最优解\n                if(isset($tmp)){\n                    $absv = abs($val + $nums[$i] + $nums[$j] -$target);\n                    if($absv < abs($tmp-$target)) {\n                        $tmp = ($val + $nums[$i] + $nums[$j]);\n                    }  \n                } else {\n                    $absv = abs($val + $nums[$i] + $nums[$j] -$target);\n                    $tmp = ($val + $nums[$i] + $nums[$j]);\n                }\n                if($val + $nums[$i] + $nums[$j] > $target)\n                {\n                    $j--;\n                    continue;\n                }\n                if($val + $nums[$i] + $nums[$j] <$target)\n                {\n                    $i++;\n                    continue;\n                }\n            }\n        }\n        return $tmp;\n    }\n}\n```","slug":"算法-最接近的三数之和","published":1,"updated":"2019-02-21T03:49:34.722Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjswwkdr2003vg7wwob61djc8","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><h3 id=\"英文\"><a href=\"#英文\" class=\"headerlink\" title=\"英文\"></a>英文</h3><p>Given an array nums of n integers and an integer target, find three integers in nums such that the sum is closest to target. Return the sum of the three integers. You may assume that each input would have exactly one solution.</p>\n<p>Example:</p>\n<p>Given array nums = [-1, 2, 1, -4], and target = 1.</p>\n<p>The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).</p>\n<h3 id=\"中文\"><a href=\"#中文\" class=\"headerlink\" title=\"中文\"></a>中文</h3><p>给定一个包括 n 个整数的数组 nums 和 一个目标值 target。找出 nums 中的三个整数，使得它们的和与 target 最接近。返回这三个数的和。假定每组输入只存在唯一答案。</p>\n<p>例如，给定数组 nums = [-1，2，1，-4], 和 target = 1.</p>\n<p>与 target 最接近的三个数的和为 2. (-1 + 2 + 1 = 2).</p>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><h3 id=\"原来思路\"><a href=\"#原来思路\" class=\"headerlink\" title=\"原来思路\"></a>原来思路</h3><p>与求三数之和相似，先排序再查找最优解，然是时间复杂度由n^3变为n^2。</p>\n<ul>\n<li>排序数组</li>\n<li>定义左右指针 <code>i=key+1</code>、<code>j=size-1</code>，左加右减，寻找最优解（val +$nums[$i]+$nums[$j] == $target）。</li>\n<li>循环节点，重复上述操作寻找最优解。</li>\n</ul>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">threeSumClosest</span><span class=\"params\">($nums, $target)</span> </span>&#123;</div><div class=\"line\">        sort($nums);<span class=\"comment\">//排序就不写了。。</span></div><div class=\"line\">        <span class=\"keyword\">foreach</span>($nums <span class=\"keyword\">as</span> $key =&gt; $val)</div><div class=\"line\">        &#123;</div><div class=\"line\">            $i = $key +<span class=\"number\">1</span>;</div><div class=\"line\">            $j = count($nums) <span class=\"number\">-1</span>;</div><div class=\"line\">            <span class=\"keyword\">while</span>($j &gt; $i)</div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"comment\">//如果相等，直接返回。</span></div><div class=\"line\">                <span class=\"keyword\">if</span>($val + $nums[$i] + $nums[$j] == $target)</div><div class=\"line\">                &#123;</div><div class=\"line\">                    <span class=\"keyword\">return</span> $val + $nums[$i] + $nums[$j];</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"comment\">//获取最优解</span></div><div class=\"line\">                <span class=\"keyword\">if</span>(<span class=\"keyword\">isset</span>($tmp))&#123;</div><div class=\"line\">                    $absv = abs($val + $nums[$i] + $nums[$j] -$target);</div><div class=\"line\">                    <span class=\"keyword\">if</span>($absv &lt; abs($tmp-$target)) &#123;</div><div class=\"line\">                        $tmp = ($val + $nums[$i] + $nums[$j]);</div><div class=\"line\">                    &#125;  </div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                    $absv = abs($val + $nums[$i] + $nums[$j] -$target);</div><div class=\"line\">                    $tmp = ($val + $nums[$i] + $nums[$j]);</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">if</span>($val + $nums[$i] + $nums[$j] &gt; $target)</div><div class=\"line\">                &#123;</div><div class=\"line\">                    $j--;</div><div class=\"line\">                    <span class=\"keyword\">continue</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">if</span>($val + $nums[$i] + $nums[$j] &lt;$target)</div><div class=\"line\">                &#123;</div><div class=\"line\">                    $i++;</div><div class=\"line\">                    <span class=\"keyword\">continue</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> $tmp;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><h3 id=\"英文\"><a href=\"#英文\" class=\"headerlink\" title=\"英文\"></a>英文</h3><p>Given an array nums of n integers and an integer target, find three integers in nums such that the sum is closest to target. Return the sum of the three integers. You may assume that each input would have exactly one solution.</p>\n<p>Example:</p>\n<p>Given array nums = [-1, 2, 1, -4], and target = 1.</p>\n<p>The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).</p>\n<h3 id=\"中文\"><a href=\"#中文\" class=\"headerlink\" title=\"中文\"></a>中文</h3><p>给定一个包括 n 个整数的数组 nums 和 一个目标值 target。找出 nums 中的三个整数，使得它们的和与 target 最接近。返回这三个数的和。假定每组输入只存在唯一答案。</p>\n<p>例如，给定数组 nums = [-1，2，1，-4], 和 target = 1.</p>\n<p>与 target 最接近的三个数的和为 2. (-1 + 2 + 1 = 2).</p>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><h3 id=\"原来思路\"><a href=\"#原来思路\" class=\"headerlink\" title=\"原来思路\"></a>原来思路</h3><p>与求三数之和相似，先排序再查找最优解，然是时间复杂度由n^3变为n^2。</p>\n<ul>\n<li>排序数组</li>\n<li>定义左右指针 <code>i=key+1</code>、<code>j=size-1</code>，左加右减，寻找最优解（val +$nums[$i]+$nums[$j] == $target）。</li>\n<li>循环节点，重复上述操作寻找最优解。</li>\n</ul>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">threeSumClosest</span><span class=\"params\">($nums, $target)</span> </span>&#123;</div><div class=\"line\">        sort($nums);<span class=\"comment\">//排序就不写了。。</span></div><div class=\"line\">        <span class=\"keyword\">foreach</span>($nums <span class=\"keyword\">as</span> $key =&gt; $val)</div><div class=\"line\">        &#123;</div><div class=\"line\">            $i = $key +<span class=\"number\">1</span>;</div><div class=\"line\">            $j = count($nums) <span class=\"number\">-1</span>;</div><div class=\"line\">            <span class=\"keyword\">while</span>($j &gt; $i)</div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"comment\">//如果相等，直接返回。</span></div><div class=\"line\">                <span class=\"keyword\">if</span>($val + $nums[$i] + $nums[$j] == $target)</div><div class=\"line\">                &#123;</div><div class=\"line\">                    <span class=\"keyword\">return</span> $val + $nums[$i] + $nums[$j];</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"comment\">//获取最优解</span></div><div class=\"line\">                <span class=\"keyword\">if</span>(<span class=\"keyword\">isset</span>($tmp))&#123;</div><div class=\"line\">                    $absv = abs($val + $nums[$i] + $nums[$j] -$target);</div><div class=\"line\">                    <span class=\"keyword\">if</span>($absv &lt; abs($tmp-$target)) &#123;</div><div class=\"line\">                        $tmp = ($val + $nums[$i] + $nums[$j]);</div><div class=\"line\">                    &#125;  </div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                    $absv = abs($val + $nums[$i] + $nums[$j] -$target);</div><div class=\"line\">                    $tmp = ($val + $nums[$i] + $nums[$j]);</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">if</span>($val + $nums[$i] + $nums[$j] &gt; $target)</div><div class=\"line\">                &#123;</div><div class=\"line\">                    $j--;</div><div class=\"line\">                    <span class=\"keyword\">continue</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">if</span>($val + $nums[$i] + $nums[$j] &lt;$target)</div><div class=\"line\">                &#123;</div><div class=\"line\">                    $i++;</div><div class=\"line\">                    <span class=\"keyword\">continue</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> $tmp;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"算法-最大子序和","date":"2018-01-14T13:43:04.000Z","toc":true,"_content":"## 题目\n### 英文\nGiven an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.\n\nExample:\n\nInput: [-2,1,-3,4,-1,2,1,-5,4],\nOutput: 6\nExplanation: [4,-1,2,1] has the largest sum = 6.\n\n### 中文\n给定一个整数数组 nums ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。\n\n## 思路\n- 动态规划。\n- 把求联系最大子序列转化为求当前节点与上一节点的最大值。\n\n## 代码\n\n```c\nint maxSubArray(int* nums, int numsSize) {\n    if(numsSize == 0){\n        return 0;\n    }\n    if(numsSize <=1){\n        return *nums;\n    }\n    int tmp = 0;\n    int pre =  *nums ;\n    nums++;\n    \n    int ret = pre;\n   for(int i = 1; i< numsSize;i++)\n   {\n       tmp = (pre + *nums) > *nums ? (pre + *nums) : *nums;\n       \n           // printf(\"tmp:%d\\n\", tmp);\n           if(tmp > ret)\n           {\n               ret = tmp;\n           }\n        \n       \n       pre = tmp;\n       nums++;\n   }\n    return ret;\n}\n```","source":"_posts/算法-最大子序和.md","raw":"---\ntitle: 算法-最大子序和\ndate: 2018-01-14 21:43:04\ntags: 算法\ncategories: 算法\ntoc: true\n---\n## 题目\n### 英文\nGiven an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.\n\nExample:\n\nInput: [-2,1,-3,4,-1,2,1,-5,4],\nOutput: 6\nExplanation: [4,-1,2,1] has the largest sum = 6.\n\n### 中文\n给定一个整数数组 nums ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。\n\n## 思路\n- 动态规划。\n- 把求联系最大子序列转化为求当前节点与上一节点的最大值。\n\n## 代码\n\n```c\nint maxSubArray(int* nums, int numsSize) {\n    if(numsSize == 0){\n        return 0;\n    }\n    if(numsSize <=1){\n        return *nums;\n    }\n    int tmp = 0;\n    int pre =  *nums ;\n    nums++;\n    \n    int ret = pre;\n   for(int i = 1; i< numsSize;i++)\n   {\n       tmp = (pre + *nums) > *nums ? (pre + *nums) : *nums;\n       \n           // printf(\"tmp:%d\\n\", tmp);\n           if(tmp > ret)\n           {\n               ret = tmp;\n           }\n        \n       \n       pre = tmp;\n       nums++;\n   }\n    return ret;\n}\n```","slug":"算法-最大子序和","published":1,"updated":"2019-02-21T03:49:34.722Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjswwkdr3003yg7wwac99nzr1","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><h3 id=\"英文\"><a href=\"#英文\" class=\"headerlink\" title=\"英文\"></a>英文</h3><p>Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.</p>\n<p>Example:</p>\n<p>Input: [-2,1,-3,4,-1,2,1,-5,4],<br>Output: 6<br>Explanation: [4,-1,2,1] has the largest sum = 6.</p>\n<h3 id=\"中文\"><a href=\"#中文\" class=\"headerlink\" title=\"中文\"></a>中文</h3><p>给定一个整数数组 nums ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。</p>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><ul>\n<li>动态规划。</li>\n<li>把求联系最大子序列转化为求当前节点与上一节点的最大值。</li>\n</ul>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">maxSubArray</span><span class=\"params\">(<span class=\"keyword\">int</span>* nums, <span class=\"keyword\">int</span> numsSize)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(numsSize == <span class=\"number\">0</span>)&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span>(numsSize &lt;=<span class=\"number\">1</span>)&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> *nums;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">int</span> tmp = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> pre =  *nums ;</div><div class=\"line\">    nums++;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">int</span> ret = pre;</div><div class=\"line\">   <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i&lt; numsSize;i++)</div><div class=\"line\">   &#123;</div><div class=\"line\">       tmp = (pre + *nums) &gt; *nums ? (pre + *nums) : *nums;</div><div class=\"line\">       </div><div class=\"line\">           <span class=\"comment\">// printf(\"tmp:%d\\n\", tmp);</span></div><div class=\"line\">           <span class=\"keyword\">if</span>(tmp &gt; ret)</div><div class=\"line\">           &#123;</div><div class=\"line\">               ret = tmp;</div><div class=\"line\">           &#125;</div><div class=\"line\">        </div><div class=\"line\">       </div><div class=\"line\">       pre = tmp;</div><div class=\"line\">       nums++;</div><div class=\"line\">   &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> ret;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><h3 id=\"英文\"><a href=\"#英文\" class=\"headerlink\" title=\"英文\"></a>英文</h3><p>Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.</p>\n<p>Example:</p>\n<p>Input: [-2,1,-3,4,-1,2,1,-5,4],<br>Output: 6<br>Explanation: [4,-1,2,1] has the largest sum = 6.</p>\n<h3 id=\"中文\"><a href=\"#中文\" class=\"headerlink\" title=\"中文\"></a>中文</h3><p>给定一个整数数组 nums ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。</p>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><ul>\n<li>动态规划。</li>\n<li>把求联系最大子序列转化为求当前节点与上一节点的最大值。</li>\n</ul>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">maxSubArray</span><span class=\"params\">(<span class=\"keyword\">int</span>* nums, <span class=\"keyword\">int</span> numsSize)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(numsSize == <span class=\"number\">0</span>)&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span>(numsSize &lt;=<span class=\"number\">1</span>)&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> *nums;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">int</span> tmp = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> pre =  *nums ;</div><div class=\"line\">    nums++;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">int</span> ret = pre;</div><div class=\"line\">   <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i&lt; numsSize;i++)</div><div class=\"line\">   &#123;</div><div class=\"line\">       tmp = (pre + *nums) &gt; *nums ? (pre + *nums) : *nums;</div><div class=\"line\">       </div><div class=\"line\">           <span class=\"comment\">// printf(\"tmp:%d\\n\", tmp);</span></div><div class=\"line\">           <span class=\"keyword\">if</span>(tmp &gt; ret)</div><div class=\"line\">           &#123;</div><div class=\"line\">               ret = tmp;</div><div class=\"line\">           &#125;</div><div class=\"line\">        </div><div class=\"line\">       </div><div class=\"line\">       pre = tmp;</div><div class=\"line\">       nums++;</div><div class=\"line\">   &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> ret;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"算法-求最大正方形面积","date":"2018-01-14T09:18:04.000Z","toc":true,"_content":"## 题目\n### 英文\nGiven a 2D binary matrix filled with 0's and 1's, find the largest square containing only 1's and return its area.\n\nExample:\n\nInput: \n\n1 0 1 0 0\n1 0 1 1 1\n1 1 1 1 1\n1 0 0 1 0\n\nOutput: 4\n### 中文\n在一个由 0 和 1 组成的二维矩阵内，找到只包含 1 的最大正方形，并返回其面积。\n\n## 思路\n- 动态规划(主要用户将一个复杂的问题分解为多个建单的问题，求最优解时)。\n- 声明一个空间和原有二位数据大小一样的二位数组(tmp[i][j])。\n- 计算每一个节点最大正方形的边长，并存储与该节点（利用之前节点计算当前节点最大正方形边长）。\n- 取tmp[i][j]得最大值的平凡返回。\n## 代码\n\n`第一版代码`\n\n```php\nclass Solution {\n  function maximalSquare($matrix) {\n      $hight =  count($matrix);\n      if($hight<1)\n      {\n          return 0;\n      }\n      $wide = 0;\n      if($hight > 0){\n          $wide= count($matrix[0]);\n      }\n      $ret = 0;\n      for($i = 1; $i<= $hight; $i++)\n      {\n          $tmp = $this->getRet($matrix, $i, $hight, $wide);\n          if($ret <$tmp ){\n              $ret = $tmp;\n          }\n      }\n      return $ret;\n  }\n    \n  public function getRet($matrix, $i, $hight, $wide)\n  {\n    //起始点纵向坐标  \n    for($h = 0; $h<= $hight-$i; $h++ )\n    {   \n        for($j = 0;$j <= $wide-$i; $j++)\n        {\n            //h 为起点高，j为起点宽。\n            $ret = 1;\n            for($m = $h; $m <$h + $i; $m++){\n                for($k = $j; $k < $j + $i; $k++){\n                    if($matrix[$m][$k] == 0)\n                    {\n                        $ret = 0;\n                        break;\n                    }\n                }\n                if($ret == 0) {\n                    break;\n                }\n            }\n            if($ret == 1){\n                return $i*$i;\n            }\n        }\n    }\n    return 0;\n  }\n    \n}\n\n```\n\n用php跑测试用例，跑了2.5秒。😓\n\n回头用c重写下试试。\n```c\n待定\n```\n## 最优解\n\n```java\nclass Solution {\n    public int maximalSquare(char[][] matrix) {\n        /**\n        dp[i][j]表示以第i行第j列为右下角所能构成的最大正方形边长, 则递推式为: \n        dp[i][j] = 1 + min(dp[i-1][j-1], dp[i-1][j], dp[i][j-1]);\n        **/\n        int m = matrix.length;\n        if(m < 1) return 0;\n        int n = matrix[0].length;\n        int max = 0;\n        int[][] dp = new int[m+1][n+1];\n        \n        for(int i = 1; i <= m; ++i) {\n            for(int j = 1; j <= n; ++j) {\n                if(matrix[i-1][j-1] == '1') {\n                    dp[i][j] = 1 + Math.min(dp[i-1][j-1], Math.min(dp[i-1][j], dp[i][j-1]));\n                    max = Math.max(max, dp[i][j]); \n                }\n            }\n        }\n        \n        return max*max;\n    }\n}\n```","source":"_posts/算法-求最大正方形面积.md","raw":"---\ntitle: 算法-求最大正方形面积\ndate: 2018-01-14 17:18:04\ntags: 算法\ncategories: 算法\ntoc: true\n---\n## 题目\n### 英文\nGiven a 2D binary matrix filled with 0's and 1's, find the largest square containing only 1's and return its area.\n\nExample:\n\nInput: \n\n1 0 1 0 0\n1 0 1 1 1\n1 1 1 1 1\n1 0 0 1 0\n\nOutput: 4\n### 中文\n在一个由 0 和 1 组成的二维矩阵内，找到只包含 1 的最大正方形，并返回其面积。\n\n## 思路\n- 动态规划(主要用户将一个复杂的问题分解为多个建单的问题，求最优解时)。\n- 声明一个空间和原有二位数据大小一样的二位数组(tmp[i][j])。\n- 计算每一个节点最大正方形的边长，并存储与该节点（利用之前节点计算当前节点最大正方形边长）。\n- 取tmp[i][j]得最大值的平凡返回。\n## 代码\n\n`第一版代码`\n\n```php\nclass Solution {\n  function maximalSquare($matrix) {\n      $hight =  count($matrix);\n      if($hight<1)\n      {\n          return 0;\n      }\n      $wide = 0;\n      if($hight > 0){\n          $wide= count($matrix[0]);\n      }\n      $ret = 0;\n      for($i = 1; $i<= $hight; $i++)\n      {\n          $tmp = $this->getRet($matrix, $i, $hight, $wide);\n          if($ret <$tmp ){\n              $ret = $tmp;\n          }\n      }\n      return $ret;\n  }\n    \n  public function getRet($matrix, $i, $hight, $wide)\n  {\n    //起始点纵向坐标  \n    for($h = 0; $h<= $hight-$i; $h++ )\n    {   \n        for($j = 0;$j <= $wide-$i; $j++)\n        {\n            //h 为起点高，j为起点宽。\n            $ret = 1;\n            for($m = $h; $m <$h + $i; $m++){\n                for($k = $j; $k < $j + $i; $k++){\n                    if($matrix[$m][$k] == 0)\n                    {\n                        $ret = 0;\n                        break;\n                    }\n                }\n                if($ret == 0) {\n                    break;\n                }\n            }\n            if($ret == 1){\n                return $i*$i;\n            }\n        }\n    }\n    return 0;\n  }\n    \n}\n\n```\n\n用php跑测试用例，跑了2.5秒。😓\n\n回头用c重写下试试。\n```c\n待定\n```\n## 最优解\n\n```java\nclass Solution {\n    public int maximalSquare(char[][] matrix) {\n        /**\n        dp[i][j]表示以第i行第j列为右下角所能构成的最大正方形边长, 则递推式为: \n        dp[i][j] = 1 + min(dp[i-1][j-1], dp[i-1][j], dp[i][j-1]);\n        **/\n        int m = matrix.length;\n        if(m < 1) return 0;\n        int n = matrix[0].length;\n        int max = 0;\n        int[][] dp = new int[m+1][n+1];\n        \n        for(int i = 1; i <= m; ++i) {\n            for(int j = 1; j <= n; ++j) {\n                if(matrix[i-1][j-1] == '1') {\n                    dp[i][j] = 1 + Math.min(dp[i-1][j-1], Math.min(dp[i-1][j], dp[i][j-1]));\n                    max = Math.max(max, dp[i][j]); \n                }\n            }\n        }\n        \n        return max*max;\n    }\n}\n```","slug":"算法-求最大正方形面积","published":1,"updated":"2019-02-21T03:49:34.725Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjswwkdr40041g7ww7rx0tnto","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><h3 id=\"英文\"><a href=\"#英文\" class=\"headerlink\" title=\"英文\"></a>英文</h3><p>Given a 2D binary matrix filled with 0’s and 1’s, find the largest square containing only 1’s and return its area.</p>\n<p>Example:</p>\n<p>Input: </p>\n<p>1 0 1 0 0<br>1 0 1 1 1<br>1 1 1 1 1<br>1 0 0 1 0</p>\n<p>Output: 4</p>\n<h3 id=\"中文\"><a href=\"#中文\" class=\"headerlink\" title=\"中文\"></a>中文</h3><p>在一个由 0 和 1 组成的二维矩阵内，找到只包含 1 的最大正方形，并返回其面积。</p>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><ul>\n<li>动态规划(主要用户将一个复杂的问题分解为多个建单的问题，求最优解时)。</li>\n<li>声明一个空间和原有二位数据大小一样的二位数组(tmp[i][j])。</li>\n<li>计算每一个节点最大正方形的边长，并存储与该节点（利用之前节点计算当前节点最大正方形边长）。</li>\n<li>取tmp[i][j]得最大值的平凡返回。<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2></li>\n</ul>\n<p><code>第一版代码</code></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">maximalSquare</span><span class=\"params\">($matrix)</span> </span>&#123;</div><div class=\"line\">      $hight =  count($matrix);</div><div class=\"line\">      <span class=\"keyword\">if</span>($hight&lt;<span class=\"number\">1</span>)</div><div class=\"line\">      &#123;</div><div class=\"line\">          <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">      &#125;</div><div class=\"line\">      $wide = <span class=\"number\">0</span>;</div><div class=\"line\">      <span class=\"keyword\">if</span>($hight &gt; <span class=\"number\">0</span>)&#123;</div><div class=\"line\">          $wide= count($matrix[<span class=\"number\">0</span>]);</div><div class=\"line\">      &#125;</div><div class=\"line\">      $ret = <span class=\"number\">0</span>;</div><div class=\"line\">      <span class=\"keyword\">for</span>($i = <span class=\"number\">1</span>; $i&lt;= $hight; $i++)</div><div class=\"line\">      &#123;</div><div class=\"line\">          $tmp = <span class=\"keyword\">$this</span>-&gt;getRet($matrix, $i, $hight, $wide);</div><div class=\"line\">          <span class=\"keyword\">if</span>($ret &lt;$tmp )&#123;</div><div class=\"line\">              $ret = $tmp;</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">return</span> $ret;</div><div class=\"line\">  &#125;</div><div class=\"line\">    </div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getRet</span><span class=\"params\">($matrix, $i, $hight, $wide)</span></span></div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"comment\">//起始点纵向坐标  </span></div><div class=\"line\">    <span class=\"keyword\">for</span>($h = <span class=\"number\">0</span>; $h&lt;= $hight-$i; $h++ )</div><div class=\"line\">    &#123;   </div><div class=\"line\">        <span class=\"keyword\">for</span>($j = <span class=\"number\">0</span>;$j &lt;= $wide-$i; $j++)</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"comment\">//h 为起点高，j为起点宽。</span></div><div class=\"line\">            $ret = <span class=\"number\">1</span>;</div><div class=\"line\">            <span class=\"keyword\">for</span>($m = $h; $m &lt;$h + $i; $m++)&#123;</div><div class=\"line\">                <span class=\"keyword\">for</span>($k = $j; $k &lt; $j + $i; $k++)&#123;</div><div class=\"line\">                    <span class=\"keyword\">if</span>($matrix[$m][$k] == <span class=\"number\">0</span>)</div><div class=\"line\">                    &#123;</div><div class=\"line\">                        $ret = <span class=\"number\">0</span>;</div><div class=\"line\">                        <span class=\"keyword\">break</span>;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">if</span>($ret == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                    <span class=\"keyword\">break</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">if</span>($ret == <span class=\"number\">1</span>)&#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> $i*$i;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">    </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>用php跑测试用例，跑了2.5秒。😓</p>\n<p>回头用c重写下试试。<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">待定</div></pre></td></tr></table></figure></p>\n<h2 id=\"最优解\"><a href=\"#最优解\" class=\"headerlink\" title=\"最优解\"></a>最优解</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">maximalSquare</span><span class=\"params\">(<span class=\"keyword\">char</span>[][] matrix)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">/**</span></div><div class=\"line\">        dp[i][j]表示以第i行第j列为右下角所能构成的最大正方形边长, 则递推式为: </div><div class=\"line\">        dp[i][j] = 1 + min(dp[i-1][j-1], dp[i-1][j], dp[i][j-1]);</div><div class=\"line\">        **/</div><div class=\"line\">        <span class=\"keyword\">int</span> m = matrix.length;</div><div class=\"line\">        <span class=\"keyword\">if</span>(m &lt; <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">int</span> n = matrix[<span class=\"number\">0</span>].length;</div><div class=\"line\">        <span class=\"keyword\">int</span> max = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">int</span>[][] dp = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[m+<span class=\"number\">1</span>][n+<span class=\"number\">1</span>];</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; ++i) &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= n; ++j) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span>(matrix[i-<span class=\"number\">1</span>][j-<span class=\"number\">1</span>] == <span class=\"string\">'1'</span>) &#123;</div><div class=\"line\">                    dp[i][j] = <span class=\"number\">1</span> + Math.min(dp[i-<span class=\"number\">1</span>][j-<span class=\"number\">1</span>], Math.min(dp[i-<span class=\"number\">1</span>][j], dp[i][j-<span class=\"number\">1</span>]));</div><div class=\"line\">                    max = Math.max(max, dp[i][j]); </div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">return</span> max*max;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><h3 id=\"英文\"><a href=\"#英文\" class=\"headerlink\" title=\"英文\"></a>英文</h3><p>Given a 2D binary matrix filled with 0’s and 1’s, find the largest square containing only 1’s and return its area.</p>\n<p>Example:</p>\n<p>Input: </p>\n<p>1 0 1 0 0<br>1 0 1 1 1<br>1 1 1 1 1<br>1 0 0 1 0</p>\n<p>Output: 4</p>\n<h3 id=\"中文\"><a href=\"#中文\" class=\"headerlink\" title=\"中文\"></a>中文</h3><p>在一个由 0 和 1 组成的二维矩阵内，找到只包含 1 的最大正方形，并返回其面积。</p>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><ul>\n<li>动态规划(主要用户将一个复杂的问题分解为多个建单的问题，求最优解时)。</li>\n<li>声明一个空间和原有二位数据大小一样的二位数组(tmp[i][j])。</li>\n<li>计算每一个节点最大正方形的边长，并存储与该节点（利用之前节点计算当前节点最大正方形边长）。</li>\n<li>取tmp[i][j]得最大值的平凡返回。<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2></li>\n</ul>\n<p><code>第一版代码</code></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">maximalSquare</span><span class=\"params\">($matrix)</span> </span>&#123;</div><div class=\"line\">      $hight =  count($matrix);</div><div class=\"line\">      <span class=\"keyword\">if</span>($hight&lt;<span class=\"number\">1</span>)</div><div class=\"line\">      &#123;</div><div class=\"line\">          <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">      &#125;</div><div class=\"line\">      $wide = <span class=\"number\">0</span>;</div><div class=\"line\">      <span class=\"keyword\">if</span>($hight &gt; <span class=\"number\">0</span>)&#123;</div><div class=\"line\">          $wide= count($matrix[<span class=\"number\">0</span>]);</div><div class=\"line\">      &#125;</div><div class=\"line\">      $ret = <span class=\"number\">0</span>;</div><div class=\"line\">      <span class=\"keyword\">for</span>($i = <span class=\"number\">1</span>; $i&lt;= $hight; $i++)</div><div class=\"line\">      &#123;</div><div class=\"line\">          $tmp = <span class=\"keyword\">$this</span>-&gt;getRet($matrix, $i, $hight, $wide);</div><div class=\"line\">          <span class=\"keyword\">if</span>($ret &lt;$tmp )&#123;</div><div class=\"line\">              $ret = $tmp;</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">return</span> $ret;</div><div class=\"line\">  &#125;</div><div class=\"line\">    </div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getRet</span><span class=\"params\">($matrix, $i, $hight, $wide)</span></span></div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"comment\">//起始点纵向坐标  </span></div><div class=\"line\">    <span class=\"keyword\">for</span>($h = <span class=\"number\">0</span>; $h&lt;= $hight-$i; $h++ )</div><div class=\"line\">    &#123;   </div><div class=\"line\">        <span class=\"keyword\">for</span>($j = <span class=\"number\">0</span>;$j &lt;= $wide-$i; $j++)</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"comment\">//h 为起点高，j为起点宽。</span></div><div class=\"line\">            $ret = <span class=\"number\">1</span>;</div><div class=\"line\">            <span class=\"keyword\">for</span>($m = $h; $m &lt;$h + $i; $m++)&#123;</div><div class=\"line\">                <span class=\"keyword\">for</span>($k = $j; $k &lt; $j + $i; $k++)&#123;</div><div class=\"line\">                    <span class=\"keyword\">if</span>($matrix[$m][$k] == <span class=\"number\">0</span>)</div><div class=\"line\">                    &#123;</div><div class=\"line\">                        $ret = <span class=\"number\">0</span>;</div><div class=\"line\">                        <span class=\"keyword\">break</span>;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">if</span>($ret == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                    <span class=\"keyword\">break</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">if</span>($ret == <span class=\"number\">1</span>)&#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> $i*$i;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">    </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>用php跑测试用例，跑了2.5秒。😓</p>\n<p>回头用c重写下试试。<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">待定</div></pre></td></tr></table></figure></p>\n<h2 id=\"最优解\"><a href=\"#最优解\" class=\"headerlink\" title=\"最优解\"></a>最优解</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">maximalSquare</span><span class=\"params\">(<span class=\"keyword\">char</span>[][] matrix)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">/**</span></div><div class=\"line\">        dp[i][j]表示以第i行第j列为右下角所能构成的最大正方形边长, 则递推式为: </div><div class=\"line\">        dp[i][j] = 1 + min(dp[i-1][j-1], dp[i-1][j], dp[i][j-1]);</div><div class=\"line\">        **/</div><div class=\"line\">        <span class=\"keyword\">int</span> m = matrix.length;</div><div class=\"line\">        <span class=\"keyword\">if</span>(m &lt; <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">int</span> n = matrix[<span class=\"number\">0</span>].length;</div><div class=\"line\">        <span class=\"keyword\">int</span> max = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">int</span>[][] dp = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[m+<span class=\"number\">1</span>][n+<span class=\"number\">1</span>];</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; ++i) &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= n; ++j) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span>(matrix[i-<span class=\"number\">1</span>][j-<span class=\"number\">1</span>] == <span class=\"string\">'1'</span>) &#123;</div><div class=\"line\">                    dp[i][j] = <span class=\"number\">1</span> + Math.min(dp[i-<span class=\"number\">1</span>][j-<span class=\"number\">1</span>], Math.min(dp[i-<span class=\"number\">1</span>][j], dp[i][j-<span class=\"number\">1</span>]));</div><div class=\"line\">                    max = Math.max(max, dp[i][j]); </div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">return</span> max*max;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"合并k个链表","toc":true,"date":"2018-01-10T08:09:18.000Z","_content":"\n## 题目\n合并 k 个排序链表，返回合并后的排序链表。请分析和描述算法的复杂度。\n\n示例:\n\n输入:\n[\n  1->4->5,\n  1->3->4,\n  2->6\n]\n输出: 1->1->2->3->4->4->5->6\n\n## 分析\n- 如果理由`最后选择`进行合并链表，这是时间复杂度是`kn`如果 `k` 很大的时候时间复杂度简直爆炸，还不如直接合并。\n- 如果使用归并排序 时间复杂度是`nlogk`。\n- 如果直接两两暴力合并，时间复杂度是`n(k^2+k)/2`\n- 所以当k很大的时候，最优解应该是并归。\n\n## 代码\n```c\nstruct ListNode* merge(struct ListNode* l1, struct ListNode* l2)\n{\n    struct ListNode* l3 = NULL;\n    struct ListNode* p = NULL;\n    struct ListNode* tmp = NULL;\n    if(!l1 && !l2) {\n        return l3;\n    }\n    if(l1 && !l2) {\n        return l1;\n    }\n    if(!l1 && l2)\n    {\n        return l2;\n    }\n    //设置头结点\n    if(l1->val < l2->val) {\n        l3 = l1;\n        l1 = l1->next;\n    } else {\n        l3 = l2;\n        l2 = l2->next;\n    }    \n    p = l3;\n    while(l1 && l2)\n    {\n        if(l1->val < l2->val)\n        {\n            tmp = l1->next;\n            p->next = l1;\n            l1 = tmp;\n        } else {\n            tmp = l2->next;\n            p->next = l2;\n            l2 = tmp;\n        }\n        p = p->next;\n    }\n    \n    if(l1) {\n        p->next = l1;\n    }\n    if(l2)\n    {\n        p->next = l2;\n    }\n    return l3;\n}\n\n/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     struct ListNode *next;\n * };\n */\nstruct ListNode* mergeKLists(struct ListNode** lists, int listsSize) \n{\n    if(listsSize == 0) {\n        return 0;\n    }\n    if(listsSize == 1) {\n        return (*lists);\n    }\n    struct ListNode* ret = (*lists);\n    for(int i = 1 ; i < listsSize; i++)\n    {\n        lists++;\n        ret = merge((*lists), ret);\n    }\n    return ret;   \n}\n\n```\n\n## 后记\n尝试寻找更优解法。","source":"_posts/算法-合并k个链表.md","raw":"---\ntitle: 合并k个链表\ntags: 算法\ncategories: 算法\ntoc: true\ndate: 2018-01-10 16:09:18\n---\n\n## 题目\n合并 k 个排序链表，返回合并后的排序链表。请分析和描述算法的复杂度。\n\n示例:\n\n输入:\n[\n  1->4->5,\n  1->3->4,\n  2->6\n]\n输出: 1->1->2->3->4->4->5->6\n\n## 分析\n- 如果理由`最后选择`进行合并链表，这是时间复杂度是`kn`如果 `k` 很大的时候时间复杂度简直爆炸，还不如直接合并。\n- 如果使用归并排序 时间复杂度是`nlogk`。\n- 如果直接两两暴力合并，时间复杂度是`n(k^2+k)/2`\n- 所以当k很大的时候，最优解应该是并归。\n\n## 代码\n```c\nstruct ListNode* merge(struct ListNode* l1, struct ListNode* l2)\n{\n    struct ListNode* l3 = NULL;\n    struct ListNode* p = NULL;\n    struct ListNode* tmp = NULL;\n    if(!l1 && !l2) {\n        return l3;\n    }\n    if(l1 && !l2) {\n        return l1;\n    }\n    if(!l1 && l2)\n    {\n        return l2;\n    }\n    //设置头结点\n    if(l1->val < l2->val) {\n        l3 = l1;\n        l1 = l1->next;\n    } else {\n        l3 = l2;\n        l2 = l2->next;\n    }    \n    p = l3;\n    while(l1 && l2)\n    {\n        if(l1->val < l2->val)\n        {\n            tmp = l1->next;\n            p->next = l1;\n            l1 = tmp;\n        } else {\n            tmp = l2->next;\n            p->next = l2;\n            l2 = tmp;\n        }\n        p = p->next;\n    }\n    \n    if(l1) {\n        p->next = l1;\n    }\n    if(l2)\n    {\n        p->next = l2;\n    }\n    return l3;\n}\n\n/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     struct ListNode *next;\n * };\n */\nstruct ListNode* mergeKLists(struct ListNode** lists, int listsSize) \n{\n    if(listsSize == 0) {\n        return 0;\n    }\n    if(listsSize == 1) {\n        return (*lists);\n    }\n    struct ListNode* ret = (*lists);\n    for(int i = 1 ; i < listsSize; i++)\n    {\n        lists++;\n        ret = merge((*lists), ret);\n    }\n    return ret;   \n}\n\n```\n\n## 后记\n尝试寻找更优解法。","slug":"算法-合并k个链表","published":1,"updated":"2019-02-21T03:49:34.721Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjswwkdr60044g7ww9kaiv4uo","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>合并 k 个排序链表，返回合并后的排序链表。请分析和描述算法的复杂度。</p>\n<p>示例:</p>\n<p>输入:<br>[<br>  1-&gt;4-&gt;5,<br>  1-&gt;3-&gt;4,<br>  2-&gt;6<br>]<br>输出: 1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4-&gt;5-&gt;6</p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><ul>\n<li>如果理由<code>最后选择</code>进行合并链表，这是时间复杂度是<code>kn</code>如果 <code>k</code> 很大的时候时间复杂度简直爆炸，还不如直接合并。</li>\n<li>如果使用归并排序 时间复杂度是<code>nlogk</code>。</li>\n<li>如果直接两两暴力合并，时间复杂度是<code>n(k^2+k)/2</code></li>\n<li>所以当k很大的时候，最优解应该是并归。</li>\n</ul>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">struct</span> ListNode* <span class=\"title\">merge</span><span class=\"params\">(<span class=\"keyword\">struct</span> ListNode* l1, <span class=\"keyword\">struct</span> ListNode* l2)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">struct</span> ListNode* l3 = <span class=\"literal\">NULL</span>;</div><div class=\"line\">    <span class=\"keyword\">struct</span> ListNode* p = <span class=\"literal\">NULL</span>;</div><div class=\"line\">    <span class=\"keyword\">struct</span> ListNode* tmp = <span class=\"literal\">NULL</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span>(!l1 &amp;&amp; !l2) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> l3;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span>(l1 &amp;&amp; !l2) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> l1;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span>(!l1 &amp;&amp; l2)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> l2;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//设置头结点</span></div><div class=\"line\">    <span class=\"keyword\">if</span>(l1-&gt;val &lt; l2-&gt;val) &#123;</div><div class=\"line\">        l3 = l1;</div><div class=\"line\">        l1 = l1-&gt;next;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        l3 = l2;</div><div class=\"line\">        l2 = l2-&gt;next;</div><div class=\"line\">    &#125;    </div><div class=\"line\">    p = l3;</div><div class=\"line\">    <span class=\"keyword\">while</span>(l1 &amp;&amp; l2)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(l1-&gt;val &lt; l2-&gt;val)</div><div class=\"line\">        &#123;</div><div class=\"line\">            tmp = l1-&gt;next;</div><div class=\"line\">            p-&gt;next = l1;</div><div class=\"line\">            l1 = tmp;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            tmp = l2-&gt;next;</div><div class=\"line\">            p-&gt;next = l2;</div><div class=\"line\">            l2 = tmp;</div><div class=\"line\">        &#125;</div><div class=\"line\">        p = p-&gt;next;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">if</span>(l1) &#123;</div><div class=\"line\">        p-&gt;next = l1;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span>(l2)</div><div class=\"line\">    &#123;</div><div class=\"line\">        p-&gt;next = l2;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> l3;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Definition for singly-linked list.</div><div class=\"line\"> * struct ListNode &#123;</div><div class=\"line\"> *     int val;</div><div class=\"line\"> *     struct ListNode *next;</div><div class=\"line\"> * &#125;;</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">struct</span> ListNode* <span class=\"title\">mergeKLists</span><span class=\"params\">(<span class=\"keyword\">struct</span> ListNode** lists, <span class=\"keyword\">int</span> listsSize)</span> </span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(listsSize == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span>(listsSize == <span class=\"number\">1</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> (*lists);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">struct</span> ListNode* ret = (*lists);</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span> ; i &lt; listsSize; i++)</div><div class=\"line\">    &#123;</div><div class=\"line\">        lists++;</div><div class=\"line\">        ret = merge((*lists), ret);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> ret;   </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h2><p>尝试寻找更优解法。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>合并 k 个排序链表，返回合并后的排序链表。请分析和描述算法的复杂度。</p>\n<p>示例:</p>\n<p>输入:<br>[<br>  1-&gt;4-&gt;5,<br>  1-&gt;3-&gt;4,<br>  2-&gt;6<br>]<br>输出: 1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4-&gt;5-&gt;6</p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><ul>\n<li>如果理由<code>最后选择</code>进行合并链表，这是时间复杂度是<code>kn</code>如果 <code>k</code> 很大的时候时间复杂度简直爆炸，还不如直接合并。</li>\n<li>如果使用归并排序 时间复杂度是<code>nlogk</code>。</li>\n<li>如果直接两两暴力合并，时间复杂度是<code>n(k^2+k)/2</code></li>\n<li>所以当k很大的时候，最优解应该是并归。</li>\n</ul>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">struct</span> ListNode* <span class=\"title\">merge</span><span class=\"params\">(<span class=\"keyword\">struct</span> ListNode* l1, <span class=\"keyword\">struct</span> ListNode* l2)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">struct</span> ListNode* l3 = <span class=\"literal\">NULL</span>;</div><div class=\"line\">    <span class=\"keyword\">struct</span> ListNode* p = <span class=\"literal\">NULL</span>;</div><div class=\"line\">    <span class=\"keyword\">struct</span> ListNode* tmp = <span class=\"literal\">NULL</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span>(!l1 &amp;&amp; !l2) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> l3;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span>(l1 &amp;&amp; !l2) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> l1;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span>(!l1 &amp;&amp; l2)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> l2;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//设置头结点</span></div><div class=\"line\">    <span class=\"keyword\">if</span>(l1-&gt;val &lt; l2-&gt;val) &#123;</div><div class=\"line\">        l3 = l1;</div><div class=\"line\">        l1 = l1-&gt;next;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        l3 = l2;</div><div class=\"line\">        l2 = l2-&gt;next;</div><div class=\"line\">    &#125;    </div><div class=\"line\">    p = l3;</div><div class=\"line\">    <span class=\"keyword\">while</span>(l1 &amp;&amp; l2)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(l1-&gt;val &lt; l2-&gt;val)</div><div class=\"line\">        &#123;</div><div class=\"line\">            tmp = l1-&gt;next;</div><div class=\"line\">            p-&gt;next = l1;</div><div class=\"line\">            l1 = tmp;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            tmp = l2-&gt;next;</div><div class=\"line\">            p-&gt;next = l2;</div><div class=\"line\">            l2 = tmp;</div><div class=\"line\">        &#125;</div><div class=\"line\">        p = p-&gt;next;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">if</span>(l1) &#123;</div><div class=\"line\">        p-&gt;next = l1;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span>(l2)</div><div class=\"line\">    &#123;</div><div class=\"line\">        p-&gt;next = l2;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> l3;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Definition for singly-linked list.</div><div class=\"line\"> * struct ListNode &#123;</div><div class=\"line\"> *     int val;</div><div class=\"line\"> *     struct ListNode *next;</div><div class=\"line\"> * &#125;;</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">struct</span> ListNode* <span class=\"title\">mergeKLists</span><span class=\"params\">(<span class=\"keyword\">struct</span> ListNode** lists, <span class=\"keyword\">int</span> listsSize)</span> </span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(listsSize == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span>(listsSize == <span class=\"number\">1</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> (*lists);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">struct</span> ListNode* ret = (*lists);</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span> ; i &lt; listsSize; i++)</div><div class=\"line\">    &#123;</div><div class=\"line\">        lists++;</div><div class=\"line\">        ret = merge((*lists), ret);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> ret;   </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h2><p>尝试寻找更优解法。</p>\n"},{"title":"算法-盛水最多的容器","date":"2018-01-28T07:11:20.000Z","toc":true,"_content":"\n## 题目\n### 英文\n`11. Container With Most Water`\nGiven n non-negative integers a1, a2, ..., an , where each represents a point at coordinate (i, ai). n vertical lines are drawn such that the two endpoints of line i is at (i, ai) and (i, 0). Find two lines, which together with x-axis forms a container, such that the container contains the most water.\n\nNote: You may not slant the container and n is at least 2.\n\n \n![image](/photo/img/算法-盛水最多的容器/question_11.jpg)\n\n\nThe above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.\n\n \n\nExample:\n\nInput: [1,8,6,2,5,4,8,3,7]\nOutput: 49\n\n### 中文\n`11. 盛最多水的容器`\n\n给定 n 个非负整数 a1，a2，...，an，每个数代表坐标中的一个点 (i, ai) 。在坐标内画 n 条垂直线，垂直线 i 的两个端点分别为 (i, ai) 和 (i, 0)。找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。\n\n说明：你不能倾斜容器，且 n 的值至少为 2。\n\n![image](/photo/img/算法-盛水最多的容器/question_11.jpg)\n\n图中垂直线代表输入数组 [1,8,6,2,5,4,8,3,7]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为 49。\n\n \n\n示例:\n\n输入: [1,8,6,2,5,4,8,3,7]\n输出: 49\n\n## 思路\n\n### 思路1\n\n- 遍历循环，寻找最优解。\n\n### 思路2（贪心）\n\n- 取数组最左最右作为容器的左右边界。\n- 将高度较小的的边界不断向内移动，直到找到面积更大的。\n- 重复第二部操作，直到左右边界重合。\n\n## 代码\n\n```c\nint maxArea(int* height, int heightSize) {\n    if(heightSize < 2) {\n        return 0;\n    }\n    int ret = 0;\n    int width = 0;\n    int hight = 0;\n    for(int i = 0; i < heightSize;i++)\n    {\n        for(int j = i+1; j < heightSize; j++)\n        {\n            width = j -i;\n            hight = min(height[i], height[j]);\n            ret = max(ret, (width*hight));\n        }\n    }\n    return ret;\n}\n\n//获取两数最小值\nint min(a, b){\n    return a > b ? b : a;\n}\n\n//获取两数内最大值\nint max(a, b)\n{\n    return a > b ? a : b;\n}\n```\n\n`优化后代码`\n\n```c\nint maxArea(int* height, int heightSize) {\n    if(heightSize < 2) {\n        return 0;\n    }\n    int ret = 0;\n    int i = 0;\n    int j = heightSize - 1;\n    int h = 0;\n    while(i < j)\n    {\n        h = min(height[i], height[j]);\n        ret  = max(ret, (h*(j-i)));\n        if(height[i] < height[j]) i++;\n        else j--;\n    }\n    return ret;\n}\n\n//获取两数最小值\nint min(a, b){\n    return a > b ? b : a;\n}\n\n//获取两数内最大值\nint max(a, b)\n{\n    return a > b ? a : b;\n}\n```","source":"_posts/算法-盛水最多的容器.md","raw":"---\ntitle: 算法-盛水最多的容器\ndate: 2018-01-28 15:11:20\ntags: 算法\ncategories: 算法\ntoc: true\n---\n\n## 题目\n### 英文\n`11. Container With Most Water`\nGiven n non-negative integers a1, a2, ..., an , where each represents a point at coordinate (i, ai). n vertical lines are drawn such that the two endpoints of line i is at (i, ai) and (i, 0). Find two lines, which together with x-axis forms a container, such that the container contains the most water.\n\nNote: You may not slant the container and n is at least 2.\n\n \n![image](/photo/img/算法-盛水最多的容器/question_11.jpg)\n\n\nThe above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.\n\n \n\nExample:\n\nInput: [1,8,6,2,5,4,8,3,7]\nOutput: 49\n\n### 中文\n`11. 盛最多水的容器`\n\n给定 n 个非负整数 a1，a2，...，an，每个数代表坐标中的一个点 (i, ai) 。在坐标内画 n 条垂直线，垂直线 i 的两个端点分别为 (i, ai) 和 (i, 0)。找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。\n\n说明：你不能倾斜容器，且 n 的值至少为 2。\n\n![image](/photo/img/算法-盛水最多的容器/question_11.jpg)\n\n图中垂直线代表输入数组 [1,8,6,2,5,4,8,3,7]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为 49。\n\n \n\n示例:\n\n输入: [1,8,6,2,5,4,8,3,7]\n输出: 49\n\n## 思路\n\n### 思路1\n\n- 遍历循环，寻找最优解。\n\n### 思路2（贪心）\n\n- 取数组最左最右作为容器的左右边界。\n- 将高度较小的的边界不断向内移动，直到找到面积更大的。\n- 重复第二部操作，直到左右边界重合。\n\n## 代码\n\n```c\nint maxArea(int* height, int heightSize) {\n    if(heightSize < 2) {\n        return 0;\n    }\n    int ret = 0;\n    int width = 0;\n    int hight = 0;\n    for(int i = 0; i < heightSize;i++)\n    {\n        for(int j = i+1; j < heightSize; j++)\n        {\n            width = j -i;\n            hight = min(height[i], height[j]);\n            ret = max(ret, (width*hight));\n        }\n    }\n    return ret;\n}\n\n//获取两数最小值\nint min(a, b){\n    return a > b ? b : a;\n}\n\n//获取两数内最大值\nint max(a, b)\n{\n    return a > b ? a : b;\n}\n```\n\n`优化后代码`\n\n```c\nint maxArea(int* height, int heightSize) {\n    if(heightSize < 2) {\n        return 0;\n    }\n    int ret = 0;\n    int i = 0;\n    int j = heightSize - 1;\n    int h = 0;\n    while(i < j)\n    {\n        h = min(height[i], height[j]);\n        ret  = max(ret, (h*(j-i)));\n        if(height[i] < height[j]) i++;\n        else j--;\n    }\n    return ret;\n}\n\n//获取两数最小值\nint min(a, b){\n    return a > b ? b : a;\n}\n\n//获取两数内最大值\nint max(a, b)\n{\n    return a > b ? a : b;\n}\n```","slug":"算法-盛水最多的容器","published":1,"updated":"2019-02-21T03:49:34.726Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjswwkdr70047g7ww4yofzqf5","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><h3 id=\"英文\"><a href=\"#英文\" class=\"headerlink\" title=\"英文\"></a>英文</h3><p><code>11. Container With Most Water</code><br>Given n non-negative integers a1, a2, …, an , where each represents a point at coordinate (i, ai). n vertical lines are drawn such that the two endpoints of line i is at (i, ai) and (i, 0). Find two lines, which together with x-axis forms a container, such that the container contains the most water.</p>\n<p>Note: You may not slant the container and n is at least 2.</p>\n<p><img src=\"/photo/img/算法-盛水最多的容器/question_11.jpg\" alt=\"image\"></p>\n<p>The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.</p>\n<p>Example:</p>\n<p>Input: [1,8,6,2,5,4,8,3,7]<br>Output: 49</p>\n<h3 id=\"中文\"><a href=\"#中文\" class=\"headerlink\" title=\"中文\"></a>中文</h3><p><code>11. 盛最多水的容器</code></p>\n<p>给定 n 个非负整数 a1，a2，…，an，每个数代表坐标中的一个点 (i, ai) 。在坐标内画 n 条垂直线，垂直线 i 的两个端点分别为 (i, ai) 和 (i, 0)。找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。</p>\n<p>说明：你不能倾斜容器，且 n 的值至少为 2。</p>\n<p><img src=\"/photo/img/算法-盛水最多的容器/question_11.jpg\" alt=\"image\"></p>\n<p>图中垂直线代表输入数组 [1,8,6,2,5,4,8,3,7]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为 49。</p>\n<p>示例:</p>\n<p>输入: [1,8,6,2,5,4,8,3,7]<br>输出: 49</p>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><h3 id=\"思路1\"><a href=\"#思路1\" class=\"headerlink\" title=\"思路1\"></a>思路1</h3><ul>\n<li>遍历循环，寻找最优解。</li>\n</ul>\n<h3 id=\"思路2（贪心）\"><a href=\"#思路2（贪心）\" class=\"headerlink\" title=\"思路2（贪心）\"></a>思路2（贪心）</h3><ul>\n<li>取数组最左最右作为容器的左右边界。</li>\n<li>将高度较小的的边界不断向内移动，直到找到面积更大的。</li>\n<li>重复第二部操作，直到左右边界重合。</li>\n</ul>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">maxArea</span><span class=\"params\">(<span class=\"keyword\">int</span>* height, <span class=\"keyword\">int</span> heightSize)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(heightSize &lt; <span class=\"number\">2</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">int</span> ret = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> width = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> hight = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; heightSize;i++)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = i+<span class=\"number\">1</span>; j &lt; heightSize; j++)</div><div class=\"line\">        &#123;</div><div class=\"line\">            width = j -i;</div><div class=\"line\">            hight = min(height[i], height[j]);</div><div class=\"line\">            ret = max(ret, (width*hight));</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> ret;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//获取两数最小值</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">min</span><span class=\"params\">(a, b)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> a &gt; b ? b : a;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//获取两数内最大值</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">max</span><span class=\"params\">(a, b)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> a &gt; b ? a : b;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><code>优化后代码</code></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">maxArea</span><span class=\"params\">(<span class=\"keyword\">int</span>* height, <span class=\"keyword\">int</span> heightSize)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(heightSize &lt; <span class=\"number\">2</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">int</span> ret = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> j = heightSize - <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> h = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">while</span>(i &lt; j)</div><div class=\"line\">    &#123;</div><div class=\"line\">        h = min(height[i], height[j]);</div><div class=\"line\">        ret  = max(ret, (h*(j-i)));</div><div class=\"line\">        <span class=\"keyword\">if</span>(height[i] &lt; height[j]) i++;</div><div class=\"line\">        <span class=\"keyword\">else</span> j--;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> ret;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//获取两数最小值</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">min</span><span class=\"params\">(a, b)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> a &gt; b ? b : a;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//获取两数内最大值</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">max</span><span class=\"params\">(a, b)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> a &gt; b ? a : b;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><h3 id=\"英文\"><a href=\"#英文\" class=\"headerlink\" title=\"英文\"></a>英文</h3><p><code>11. Container With Most Water</code><br>Given n non-negative integers a1, a2, …, an , where each represents a point at coordinate (i, ai). n vertical lines are drawn such that the two endpoints of line i is at (i, ai) and (i, 0). Find two lines, which together with x-axis forms a container, such that the container contains the most water.</p>\n<p>Note: You may not slant the container and n is at least 2.</p>\n<p><img src=\"/photo/img/算法-盛水最多的容器/question_11.jpg\" alt=\"image\"></p>\n<p>The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.</p>\n<p>Example:</p>\n<p>Input: [1,8,6,2,5,4,8,3,7]<br>Output: 49</p>\n<h3 id=\"中文\"><a href=\"#中文\" class=\"headerlink\" title=\"中文\"></a>中文</h3><p><code>11. 盛最多水的容器</code></p>\n<p>给定 n 个非负整数 a1，a2，…，an，每个数代表坐标中的一个点 (i, ai) 。在坐标内画 n 条垂直线，垂直线 i 的两个端点分别为 (i, ai) 和 (i, 0)。找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。</p>\n<p>说明：你不能倾斜容器，且 n 的值至少为 2。</p>\n<p><img src=\"/photo/img/算法-盛水最多的容器/question_11.jpg\" alt=\"image\"></p>\n<p>图中垂直线代表输入数组 [1,8,6,2,5,4,8,3,7]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为 49。</p>\n<p>示例:</p>\n<p>输入: [1,8,6,2,5,4,8,3,7]<br>输出: 49</p>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><h3 id=\"思路1\"><a href=\"#思路1\" class=\"headerlink\" title=\"思路1\"></a>思路1</h3><ul>\n<li>遍历循环，寻找最优解。</li>\n</ul>\n<h3 id=\"思路2（贪心）\"><a href=\"#思路2（贪心）\" class=\"headerlink\" title=\"思路2（贪心）\"></a>思路2（贪心）</h3><ul>\n<li>取数组最左最右作为容器的左右边界。</li>\n<li>将高度较小的的边界不断向内移动，直到找到面积更大的。</li>\n<li>重复第二部操作，直到左右边界重合。</li>\n</ul>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">maxArea</span><span class=\"params\">(<span class=\"keyword\">int</span>* height, <span class=\"keyword\">int</span> heightSize)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(heightSize &lt; <span class=\"number\">2</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">int</span> ret = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> width = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> hight = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; heightSize;i++)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = i+<span class=\"number\">1</span>; j &lt; heightSize; j++)</div><div class=\"line\">        &#123;</div><div class=\"line\">            width = j -i;</div><div class=\"line\">            hight = min(height[i], height[j]);</div><div class=\"line\">            ret = max(ret, (width*hight));</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> ret;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//获取两数最小值</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">min</span><span class=\"params\">(a, b)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> a &gt; b ? b : a;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//获取两数内最大值</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">max</span><span class=\"params\">(a, b)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> a &gt; b ? a : b;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><code>优化后代码</code></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">maxArea</span><span class=\"params\">(<span class=\"keyword\">int</span>* height, <span class=\"keyword\">int</span> heightSize)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(heightSize &lt; <span class=\"number\">2</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">int</span> ret = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> j = heightSize - <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> h = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">while</span>(i &lt; j)</div><div class=\"line\">    &#123;</div><div class=\"line\">        h = min(height[i], height[j]);</div><div class=\"line\">        ret  = max(ret, (h*(j-i)));</div><div class=\"line\">        <span class=\"keyword\">if</span>(height[i] &lt; height[j]) i++;</div><div class=\"line\">        <span class=\"keyword\">else</span> j--;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> ret;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//获取两数最小值</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">min</span><span class=\"params\">(a, b)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> a &gt; b ? b : a;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//获取两数内最大值</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">max</span><span class=\"params\">(a, b)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> a &gt; b ? a : b;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"算法-螺旋矩阵","date":"2018-02-11T12:17:20.000Z","toc":true,"_content":"\n## 题目\n### 英文\n\nGiven a matrix of m x n elements (m rows, n columns), return all elements of the matrix in spiral order.\n\nExample 1:\n\nInput:\n[\n [ 1, 2, 3 ],\n [ 4, 5, 6 ],\n [ 7, 8, 9 ]\n]\nOutput: [1,2,3,6,9,8,7,4,5]\nExample 2:\n\nInput:\n[\n  [1, 2, 3, 4],\n  [5, 6, 7, 8],\n  [9,10,11,12]\n]\nOutput: [1,2,3,4,8,12,11,10,9,5,6,7]\n\n### 中文\n给定一个包含 m x n 个元素的矩阵（m 行, n 列），请按照顺时针螺旋顺序，返回矩阵中的所有元素。\n\n示例 1:\n\n输入:\n[\n [ 1, 2, 3 ],\n [ 4, 5, 6 ],\n [ 7, 8, 9 ]\n]\n输出: [1,2,3,6,9,8,7,4,5]\n示例 2:\n\n输入:\n[\n  [1, 2, 3, 4],\n  [5, 6, 7, 8],\n  [9,10,11,12]\n]\n输出: [1,2,3,4,8,12,11,10,9,5,6,7]\n\n## 思路\n- 所有走过的节点标记为null\n- 用turn标记当前走向，如果下一个节点为null或notSet,则调转到下一个方向。\n\n## 代码\n\n```php\nclass Solution {\n    function spiralOrder($matrix) {\n        $row = count($matrix);\n        if($row == 0)\n        {\n            return [];\n        }\n        $columu = count($matrix[1]);\n        $currentpoint = $matrix[0][0];\n        $turn = 0;\n        $i = 0;\n        $j = 0;\n        while(isset($currentpoint) && !is_null($currentpoint))\n        {\n            //向右\n            $ret[] = $currentpoint;\n            $matrix[$i][$j] = null;\n            if($turn == 0)\n            {\n                \n                if(isset($matrix[$i][$j+1])&&!is_null($matrix[$i][$j+1]))\n                {\n                    $currentpoint = $matrix[$i][$j+1];\n                    $j++;\n                } elseif(isset($matrix[$i+1][$j])&&!is_null($matrix[$i+1][$j])) {\n                    $currentpoint = $matrix[$i+1][$j];\n                    $i++;\n                    $turn = 1;\n                    continue;\n                } else {\n                    $currentpoint = null;\n                }\n            }\n            //向下\n            if($turn == 1)\n            {\n                if(isset($matrix[$i+1][$j])&&!is_null($matrix[$i+1][$j]))\n                {\n                    $currentpoint = $matrix[$i+1][$j];\n                    $i++;\n                } elseif(isset($matrix[$i][$j-1])&&!is_null($matrix[$i][$j-1])) {\n                    $currentpoint = $matrix[$i][$j-1];\n                    $j--;\n                    $turn = 2;\n                    continue;\n                } else {\n                    $currentpoint = null;\n                }\n            }\n            //向左\n            if($turn == 2)\n            {\n \n                if(isset($matrix[$i][$j-1])&&!is_null($matrix[$i][$j-1]))\n                {\n                    $currentpoint = $matrix[$i][$j-1];\n                    $j--;\n                } elseif(isset($matrix[$i-1][$j])&&!is_null($matrix[$i-1][$j])) {;\n                    $currentpoint = $matrix[$i-1][$j];\n                    $i--;\n                    $turn = 3;\n                    continue;\n                } else {\n                    $currentpoint = null;\n                }\n            }\n            if($turn == 3)\n            {\n                if(isset($matrix[$i-1][$j])&&!is_null($matrix[$i-1][$j]))\n                {\n                    $currentpoint = $matrix[$i-1][$j];\n                    $i--;\n                } elseif(isset($matrix[$i][$j+1])&&!is_null($matrix[$i][$j+1])) {\n                    $currentpoint = $matrix[$i][$j+1];\n                    $j++;\n                    $turn = 0;\n                    continue;\n                } else {\n                    $currentpoint = null;\n                }\n            }\n        }\n        return $ret;\n    }\n}\n```","source":"_posts/算法-螺旋矩阵.md","raw":"---\ntitle: 算法-螺旋矩阵\ndate: 2018-02-11 20:17:20\ntags: 算法\ntoc: true\ncategories: 算法\n---\n\n## 题目\n### 英文\n\nGiven a matrix of m x n elements (m rows, n columns), return all elements of the matrix in spiral order.\n\nExample 1:\n\nInput:\n[\n [ 1, 2, 3 ],\n [ 4, 5, 6 ],\n [ 7, 8, 9 ]\n]\nOutput: [1,2,3,6,9,8,7,4,5]\nExample 2:\n\nInput:\n[\n  [1, 2, 3, 4],\n  [5, 6, 7, 8],\n  [9,10,11,12]\n]\nOutput: [1,2,3,4,8,12,11,10,9,5,6,7]\n\n### 中文\n给定一个包含 m x n 个元素的矩阵（m 行, n 列），请按照顺时针螺旋顺序，返回矩阵中的所有元素。\n\n示例 1:\n\n输入:\n[\n [ 1, 2, 3 ],\n [ 4, 5, 6 ],\n [ 7, 8, 9 ]\n]\n输出: [1,2,3,6,9,8,7,4,5]\n示例 2:\n\n输入:\n[\n  [1, 2, 3, 4],\n  [5, 6, 7, 8],\n  [9,10,11,12]\n]\n输出: [1,2,3,4,8,12,11,10,9,5,6,7]\n\n## 思路\n- 所有走过的节点标记为null\n- 用turn标记当前走向，如果下一个节点为null或notSet,则调转到下一个方向。\n\n## 代码\n\n```php\nclass Solution {\n    function spiralOrder($matrix) {\n        $row = count($matrix);\n        if($row == 0)\n        {\n            return [];\n        }\n        $columu = count($matrix[1]);\n        $currentpoint = $matrix[0][0];\n        $turn = 0;\n        $i = 0;\n        $j = 0;\n        while(isset($currentpoint) && !is_null($currentpoint))\n        {\n            //向右\n            $ret[] = $currentpoint;\n            $matrix[$i][$j] = null;\n            if($turn == 0)\n            {\n                \n                if(isset($matrix[$i][$j+1])&&!is_null($matrix[$i][$j+1]))\n                {\n                    $currentpoint = $matrix[$i][$j+1];\n                    $j++;\n                } elseif(isset($matrix[$i+1][$j])&&!is_null($matrix[$i+1][$j])) {\n                    $currentpoint = $matrix[$i+1][$j];\n                    $i++;\n                    $turn = 1;\n                    continue;\n                } else {\n                    $currentpoint = null;\n                }\n            }\n            //向下\n            if($turn == 1)\n            {\n                if(isset($matrix[$i+1][$j])&&!is_null($matrix[$i+1][$j]))\n                {\n                    $currentpoint = $matrix[$i+1][$j];\n                    $i++;\n                } elseif(isset($matrix[$i][$j-1])&&!is_null($matrix[$i][$j-1])) {\n                    $currentpoint = $matrix[$i][$j-1];\n                    $j--;\n                    $turn = 2;\n                    continue;\n                } else {\n                    $currentpoint = null;\n                }\n            }\n            //向左\n            if($turn == 2)\n            {\n \n                if(isset($matrix[$i][$j-1])&&!is_null($matrix[$i][$j-1]))\n                {\n                    $currentpoint = $matrix[$i][$j-1];\n                    $j--;\n                } elseif(isset($matrix[$i-1][$j])&&!is_null($matrix[$i-1][$j])) {;\n                    $currentpoint = $matrix[$i-1][$j];\n                    $i--;\n                    $turn = 3;\n                    continue;\n                } else {\n                    $currentpoint = null;\n                }\n            }\n            if($turn == 3)\n            {\n                if(isset($matrix[$i-1][$j])&&!is_null($matrix[$i-1][$j]))\n                {\n                    $currentpoint = $matrix[$i-1][$j];\n                    $i--;\n                } elseif(isset($matrix[$i][$j+1])&&!is_null($matrix[$i][$j+1])) {\n                    $currentpoint = $matrix[$i][$j+1];\n                    $j++;\n                    $turn = 0;\n                    continue;\n                } else {\n                    $currentpoint = null;\n                }\n            }\n        }\n        return $ret;\n    }\n}\n```","slug":"算法-螺旋矩阵","published":1,"updated":"2019-02-21T03:49:34.727Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjswwkdr9004ag7wwjz7jpyq3","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><h3 id=\"英文\"><a href=\"#英文\" class=\"headerlink\" title=\"英文\"></a>英文</h3><p>Given a matrix of m x n elements (m rows, n columns), return all elements of the matrix in spiral order.</p>\n<p>Example 1:</p>\n<p>Input:<br>[<br> [ 1, 2, 3 ],<br> [ 4, 5, 6 ],<br> [ 7, 8, 9 ]<br>]<br>Output: [1,2,3,6,9,8,7,4,5]<br>Example 2:</p>\n<p>Input:<br>[<br>  [1, 2, 3, 4],<br>  [5, 6, 7, 8],<br>  [9,10,11,12]<br>]<br>Output: [1,2,3,4,8,12,11,10,9,5,6,7]</p>\n<h3 id=\"中文\"><a href=\"#中文\" class=\"headerlink\" title=\"中文\"></a>中文</h3><p>给定一个包含 m x n 个元素的矩阵（m 行, n 列），请按照顺时针螺旋顺序，返回矩阵中的所有元素。</p>\n<p>示例 1:</p>\n<p>输入:<br>[<br> [ 1, 2, 3 ],<br> [ 4, 5, 6 ],<br> [ 7, 8, 9 ]<br>]<br>输出: [1,2,3,6,9,8,7,4,5]<br>示例 2:</p>\n<p>输入:<br>[<br>  [1, 2, 3, 4],<br>  [5, 6, 7, 8],<br>  [9,10,11,12]<br>]<br>输出: [1,2,3,4,8,12,11,10,9,5,6,7]</p>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><ul>\n<li>所有走过的节点标记为null</li>\n<li>用turn标记当前走向，如果下一个节点为null或notSet,则调转到下一个方向。</li>\n</ul>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">spiralOrder</span><span class=\"params\">($matrix)</span> </span>&#123;</div><div class=\"line\">        $row = count($matrix);</div><div class=\"line\">        <span class=\"keyword\">if</span>($row == <span class=\"number\">0</span>)</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> [];</div><div class=\"line\">        &#125;</div><div class=\"line\">        $columu = count($matrix[<span class=\"number\">1</span>]);</div><div class=\"line\">        $currentpoint = $matrix[<span class=\"number\">0</span>][<span class=\"number\">0</span>];</div><div class=\"line\">        $turn = <span class=\"number\">0</span>;</div><div class=\"line\">        $i = <span class=\"number\">0</span>;</div><div class=\"line\">        $j = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">while</span>(<span class=\"keyword\">isset</span>($currentpoint) &amp;&amp; !is_null($currentpoint))</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"comment\">//向右</span></div><div class=\"line\">            $ret[] = $currentpoint;</div><div class=\"line\">            $matrix[$i][$j] = <span class=\"keyword\">null</span>;</div><div class=\"line\">            <span class=\"keyword\">if</span>($turn == <span class=\"number\">0</span>)</div><div class=\"line\">            &#123;</div><div class=\"line\">                </div><div class=\"line\">                <span class=\"keyword\">if</span>(<span class=\"keyword\">isset</span>($matrix[$i][$j+<span class=\"number\">1</span>])&amp;&amp;!is_null($matrix[$i][$j+<span class=\"number\">1</span>]))</div><div class=\"line\">                &#123;</div><div class=\"line\">                    $currentpoint = $matrix[$i][$j+<span class=\"number\">1</span>];</div><div class=\"line\">                    $j++;</div><div class=\"line\">                &#125; <span class=\"keyword\">elseif</span>(<span class=\"keyword\">isset</span>($matrix[$i+<span class=\"number\">1</span>][$j])&amp;&amp;!is_null($matrix[$i+<span class=\"number\">1</span>][$j])) &#123;</div><div class=\"line\">                    $currentpoint = $matrix[$i+<span class=\"number\">1</span>][$j];</div><div class=\"line\">                    $i++;</div><div class=\"line\">                    $turn = <span class=\"number\">1</span>;</div><div class=\"line\">                    <span class=\"keyword\">continue</span>;</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                    $currentpoint = <span class=\"keyword\">null</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"comment\">//向下</span></div><div class=\"line\">            <span class=\"keyword\">if</span>($turn == <span class=\"number\">1</span>)</div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span>(<span class=\"keyword\">isset</span>($matrix[$i+<span class=\"number\">1</span>][$j])&amp;&amp;!is_null($matrix[$i+<span class=\"number\">1</span>][$j]))</div><div class=\"line\">                &#123;</div><div class=\"line\">                    $currentpoint = $matrix[$i+<span class=\"number\">1</span>][$j];</div><div class=\"line\">                    $i++;</div><div class=\"line\">                &#125; <span class=\"keyword\">elseif</span>(<span class=\"keyword\">isset</span>($matrix[$i][$j<span class=\"number\">-1</span>])&amp;&amp;!is_null($matrix[$i][$j<span class=\"number\">-1</span>])) &#123;</div><div class=\"line\">                    $currentpoint = $matrix[$i][$j<span class=\"number\">-1</span>];</div><div class=\"line\">                    $j--;</div><div class=\"line\">                    $turn = <span class=\"number\">2</span>;</div><div class=\"line\">                    <span class=\"keyword\">continue</span>;</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                    $currentpoint = <span class=\"keyword\">null</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"comment\">//向左</span></div><div class=\"line\">            <span class=\"keyword\">if</span>($turn == <span class=\"number\">2</span>)</div><div class=\"line\">            &#123;</div><div class=\"line\"> </div><div class=\"line\">                <span class=\"keyword\">if</span>(<span class=\"keyword\">isset</span>($matrix[$i][$j<span class=\"number\">-1</span>])&amp;&amp;!is_null($matrix[$i][$j<span class=\"number\">-1</span>]))</div><div class=\"line\">                &#123;</div><div class=\"line\">                    $currentpoint = $matrix[$i][$j<span class=\"number\">-1</span>];</div><div class=\"line\">                    $j--;</div><div class=\"line\">                &#125; <span class=\"keyword\">elseif</span>(<span class=\"keyword\">isset</span>($matrix[$i<span class=\"number\">-1</span>][$j])&amp;&amp;!is_null($matrix[$i<span class=\"number\">-1</span>][$j])) &#123;;</div><div class=\"line\">                    $currentpoint = $matrix[$i<span class=\"number\">-1</span>][$j];</div><div class=\"line\">                    $i--;</div><div class=\"line\">                    $turn = <span class=\"number\">3</span>;</div><div class=\"line\">                    <span class=\"keyword\">continue</span>;</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                    $currentpoint = <span class=\"keyword\">null</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">if</span>($turn == <span class=\"number\">3</span>)</div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span>(<span class=\"keyword\">isset</span>($matrix[$i<span class=\"number\">-1</span>][$j])&amp;&amp;!is_null($matrix[$i<span class=\"number\">-1</span>][$j]))</div><div class=\"line\">                &#123;</div><div class=\"line\">                    $currentpoint = $matrix[$i<span class=\"number\">-1</span>][$j];</div><div class=\"line\">                    $i--;</div><div class=\"line\">                &#125; <span class=\"keyword\">elseif</span>(<span class=\"keyword\">isset</span>($matrix[$i][$j+<span class=\"number\">1</span>])&amp;&amp;!is_null($matrix[$i][$j+<span class=\"number\">1</span>])) &#123;</div><div class=\"line\">                    $currentpoint = $matrix[$i][$j+<span class=\"number\">1</span>];</div><div class=\"line\">                    $j++;</div><div class=\"line\">                    $turn = <span class=\"number\">0</span>;</div><div class=\"line\">                    <span class=\"keyword\">continue</span>;</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                    $currentpoint = <span class=\"keyword\">null</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> $ret;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><h3 id=\"英文\"><a href=\"#英文\" class=\"headerlink\" title=\"英文\"></a>英文</h3><p>Given a matrix of m x n elements (m rows, n columns), return all elements of the matrix in spiral order.</p>\n<p>Example 1:</p>\n<p>Input:<br>[<br> [ 1, 2, 3 ],<br> [ 4, 5, 6 ],<br> [ 7, 8, 9 ]<br>]<br>Output: [1,2,3,6,9,8,7,4,5]<br>Example 2:</p>\n<p>Input:<br>[<br>  [1, 2, 3, 4],<br>  [5, 6, 7, 8],<br>  [9,10,11,12]<br>]<br>Output: [1,2,3,4,8,12,11,10,9,5,6,7]</p>\n<h3 id=\"中文\"><a href=\"#中文\" class=\"headerlink\" title=\"中文\"></a>中文</h3><p>给定一个包含 m x n 个元素的矩阵（m 行, n 列），请按照顺时针螺旋顺序，返回矩阵中的所有元素。</p>\n<p>示例 1:</p>\n<p>输入:<br>[<br> [ 1, 2, 3 ],<br> [ 4, 5, 6 ],<br> [ 7, 8, 9 ]<br>]<br>输出: [1,2,3,6,9,8,7,4,5]<br>示例 2:</p>\n<p>输入:<br>[<br>  [1, 2, 3, 4],<br>  [5, 6, 7, 8],<br>  [9,10,11,12]<br>]<br>输出: [1,2,3,4,8,12,11,10,9,5,6,7]</p>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><ul>\n<li>所有走过的节点标记为null</li>\n<li>用turn标记当前走向，如果下一个节点为null或notSet,则调转到下一个方向。</li>\n</ul>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">spiralOrder</span><span class=\"params\">($matrix)</span> </span>&#123;</div><div class=\"line\">        $row = count($matrix);</div><div class=\"line\">        <span class=\"keyword\">if</span>($row == <span class=\"number\">0</span>)</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> [];</div><div class=\"line\">        &#125;</div><div class=\"line\">        $columu = count($matrix[<span class=\"number\">1</span>]);</div><div class=\"line\">        $currentpoint = $matrix[<span class=\"number\">0</span>][<span class=\"number\">0</span>];</div><div class=\"line\">        $turn = <span class=\"number\">0</span>;</div><div class=\"line\">        $i = <span class=\"number\">0</span>;</div><div class=\"line\">        $j = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">while</span>(<span class=\"keyword\">isset</span>($currentpoint) &amp;&amp; !is_null($currentpoint))</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"comment\">//向右</span></div><div class=\"line\">            $ret[] = $currentpoint;</div><div class=\"line\">            $matrix[$i][$j] = <span class=\"keyword\">null</span>;</div><div class=\"line\">            <span class=\"keyword\">if</span>($turn == <span class=\"number\">0</span>)</div><div class=\"line\">            &#123;</div><div class=\"line\">                </div><div class=\"line\">                <span class=\"keyword\">if</span>(<span class=\"keyword\">isset</span>($matrix[$i][$j+<span class=\"number\">1</span>])&amp;&amp;!is_null($matrix[$i][$j+<span class=\"number\">1</span>]))</div><div class=\"line\">                &#123;</div><div class=\"line\">                    $currentpoint = $matrix[$i][$j+<span class=\"number\">1</span>];</div><div class=\"line\">                    $j++;</div><div class=\"line\">                &#125; <span class=\"keyword\">elseif</span>(<span class=\"keyword\">isset</span>($matrix[$i+<span class=\"number\">1</span>][$j])&amp;&amp;!is_null($matrix[$i+<span class=\"number\">1</span>][$j])) &#123;</div><div class=\"line\">                    $currentpoint = $matrix[$i+<span class=\"number\">1</span>][$j];</div><div class=\"line\">                    $i++;</div><div class=\"line\">                    $turn = <span class=\"number\">1</span>;</div><div class=\"line\">                    <span class=\"keyword\">continue</span>;</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                    $currentpoint = <span class=\"keyword\">null</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"comment\">//向下</span></div><div class=\"line\">            <span class=\"keyword\">if</span>($turn == <span class=\"number\">1</span>)</div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span>(<span class=\"keyword\">isset</span>($matrix[$i+<span class=\"number\">1</span>][$j])&amp;&amp;!is_null($matrix[$i+<span class=\"number\">1</span>][$j]))</div><div class=\"line\">                &#123;</div><div class=\"line\">                    $currentpoint = $matrix[$i+<span class=\"number\">1</span>][$j];</div><div class=\"line\">                    $i++;</div><div class=\"line\">                &#125; <span class=\"keyword\">elseif</span>(<span class=\"keyword\">isset</span>($matrix[$i][$j<span class=\"number\">-1</span>])&amp;&amp;!is_null($matrix[$i][$j<span class=\"number\">-1</span>])) &#123;</div><div class=\"line\">                    $currentpoint = $matrix[$i][$j<span class=\"number\">-1</span>];</div><div class=\"line\">                    $j--;</div><div class=\"line\">                    $turn = <span class=\"number\">2</span>;</div><div class=\"line\">                    <span class=\"keyword\">continue</span>;</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                    $currentpoint = <span class=\"keyword\">null</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"comment\">//向左</span></div><div class=\"line\">            <span class=\"keyword\">if</span>($turn == <span class=\"number\">2</span>)</div><div class=\"line\">            &#123;</div><div class=\"line\"> </div><div class=\"line\">                <span class=\"keyword\">if</span>(<span class=\"keyword\">isset</span>($matrix[$i][$j<span class=\"number\">-1</span>])&amp;&amp;!is_null($matrix[$i][$j<span class=\"number\">-1</span>]))</div><div class=\"line\">                &#123;</div><div class=\"line\">                    $currentpoint = $matrix[$i][$j<span class=\"number\">-1</span>];</div><div class=\"line\">                    $j--;</div><div class=\"line\">                &#125; <span class=\"keyword\">elseif</span>(<span class=\"keyword\">isset</span>($matrix[$i<span class=\"number\">-1</span>][$j])&amp;&amp;!is_null($matrix[$i<span class=\"number\">-1</span>][$j])) &#123;;</div><div class=\"line\">                    $currentpoint = $matrix[$i<span class=\"number\">-1</span>][$j];</div><div class=\"line\">                    $i--;</div><div class=\"line\">                    $turn = <span class=\"number\">3</span>;</div><div class=\"line\">                    <span class=\"keyword\">continue</span>;</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                    $currentpoint = <span class=\"keyword\">null</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">if</span>($turn == <span class=\"number\">3</span>)</div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span>(<span class=\"keyword\">isset</span>($matrix[$i<span class=\"number\">-1</span>][$j])&amp;&amp;!is_null($matrix[$i<span class=\"number\">-1</span>][$j]))</div><div class=\"line\">                &#123;</div><div class=\"line\">                    $currentpoint = $matrix[$i<span class=\"number\">-1</span>][$j];</div><div class=\"line\">                    $i--;</div><div class=\"line\">                &#125; <span class=\"keyword\">elseif</span>(<span class=\"keyword\">isset</span>($matrix[$i][$j+<span class=\"number\">1</span>])&amp;&amp;!is_null($matrix[$i][$j+<span class=\"number\">1</span>])) &#123;</div><div class=\"line\">                    $currentpoint = $matrix[$i][$j+<span class=\"number\">1</span>];</div><div class=\"line\">                    $j++;</div><div class=\"line\">                    $turn = <span class=\"number\">0</span>;</div><div class=\"line\">                    <span class=\"keyword\">continue</span>;</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                    $currentpoint = <span class=\"keyword\">null</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> $ret;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"算法-求第k个排序","date":"2018-01-16T15:57:21.000Z","toc":true,"_content":"\n## 题目\n### 英文\nThe set [1,2,3,...,n] contains a total of n! unique permutations.\n\nBy listing and labeling all of the permutations in order, we get the following sequence for n = 3:\n\n\"123\"\n\"132\"\n\"213\"\n\"231\"\n\"312\"\n\"321\"\nGiven n and k, return the kth permutation sequence.\n\nNote:\n\nGiven n will be between 1 and 9 inclusive.\nGiven k will be between 1 and n! inclusive.\nExample 1:\n\nInput: n = 3, k = 3\nOutput: \"213\"\nExample 2:\n\nInput: n = 4, k = 9\nOutput: \"2314\"\n\n### 中文\n给出集合 [1,2,3,…,n]，其所有元素共有 n! 种排列。\n\n按大小顺序列出所有排列情况，并一一标记，当 n = 3 时, 所有排列如下：\n\n\"123\"\n\"132\"\n\"213\"\n\"231\"\n\"312\"\n\"321\"\n给定 n 和 k，返回第 k 个排列。\n\n说明：\n\n给定 n 的范围是 [1, 9]。\n给定 k 的范围是[1,  n!]。\n示例 1:\n\n输入: n = 3, k = 3\n输出: \"213\"\n示例 2:\n\n输入: n = 4, k = 9\n输出: \"2314\"\n## 思路\n\n- 排列的每一个位置都有一个固定的进位（如果当前数固定，可以有多少种排列），当k达到前进位是，则改位置加1。\n- 从最左（进位最大）开始，依次用当前进位对k-1做除法（（k-1）/当前进位)，如果结果不为0，则用`结果`+当前能够使用的最小值，获得当前位置的值。\n- 用余数当做k,按照第二步的思路，求其余位置的值。\n\n##代码\n```c\nchar* getPermutation(int n, int k) {\n    char* result = (char*)malloc((n + 1) * sizeof(char));\n    bool* flag = (bool*)calloc(n, sizeof(bool));\n    int temp[10] = { 0 };\n    temp[n] = 1;\n    temp[n - 1] = 1;\n    int i = 0, t = 0, idx = 0, j = 0;\n    for(i = n - 2; i > 0; i--)\n        temp[i] = temp[i + 1] * (n - i);\n    for(i = 1; i <= n; i++) {\n        t = (k - 1) / temp[i];\n        idx = t;\n        for(j = 1; j <= n; j++) {\n            //第j小未使用的数，j为上述计算得来。\n            if(!flag[j]) {\n                t--;\n                if(t == -1)\n                    break;\n            }\n        }\n        result[i - 1] = '0' + j;\n        flag[j] = true;\n        k -= idx * temp[i];\n    }\n    result[n] = '\\0';\n    free(flag);\n    return result;\n}\n```","source":"_posts/算法-求第k个排序.md","raw":"---\ntitle: 算法-求第k个排序\ndate: 2018-01-16 23:57:21\ntags: 算法\ncategories: 算法\ntoc: true\n---\n\n## 题目\n### 英文\nThe set [1,2,3,...,n] contains a total of n! unique permutations.\n\nBy listing and labeling all of the permutations in order, we get the following sequence for n = 3:\n\n\"123\"\n\"132\"\n\"213\"\n\"231\"\n\"312\"\n\"321\"\nGiven n and k, return the kth permutation sequence.\n\nNote:\n\nGiven n will be between 1 and 9 inclusive.\nGiven k will be between 1 and n! inclusive.\nExample 1:\n\nInput: n = 3, k = 3\nOutput: \"213\"\nExample 2:\n\nInput: n = 4, k = 9\nOutput: \"2314\"\n\n### 中文\n给出集合 [1,2,3,…,n]，其所有元素共有 n! 种排列。\n\n按大小顺序列出所有排列情况，并一一标记，当 n = 3 时, 所有排列如下：\n\n\"123\"\n\"132\"\n\"213\"\n\"231\"\n\"312\"\n\"321\"\n给定 n 和 k，返回第 k 个排列。\n\n说明：\n\n给定 n 的范围是 [1, 9]。\n给定 k 的范围是[1,  n!]。\n示例 1:\n\n输入: n = 3, k = 3\n输出: \"213\"\n示例 2:\n\n输入: n = 4, k = 9\n输出: \"2314\"\n## 思路\n\n- 排列的每一个位置都有一个固定的进位（如果当前数固定，可以有多少种排列），当k达到前进位是，则改位置加1。\n- 从最左（进位最大）开始，依次用当前进位对k-1做除法（（k-1）/当前进位)，如果结果不为0，则用`结果`+当前能够使用的最小值，获得当前位置的值。\n- 用余数当做k,按照第二步的思路，求其余位置的值。\n\n##代码\n```c\nchar* getPermutation(int n, int k) {\n    char* result = (char*)malloc((n + 1) * sizeof(char));\n    bool* flag = (bool*)calloc(n, sizeof(bool));\n    int temp[10] = { 0 };\n    temp[n] = 1;\n    temp[n - 1] = 1;\n    int i = 0, t = 0, idx = 0, j = 0;\n    for(i = n - 2; i > 0; i--)\n        temp[i] = temp[i + 1] * (n - i);\n    for(i = 1; i <= n; i++) {\n        t = (k - 1) / temp[i];\n        idx = t;\n        for(j = 1; j <= n; j++) {\n            //第j小未使用的数，j为上述计算得来。\n            if(!flag[j]) {\n                t--;\n                if(t == -1)\n                    break;\n            }\n        }\n        result[i - 1] = '0' + j;\n        flag[j] = true;\n        k -= idx * temp[i];\n    }\n    result[n] = '\\0';\n    free(flag);\n    return result;\n}\n```","slug":"算法-求第k个排序","published":1,"updated":"2019-02-21T03:49:34.725Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjswwkdrb004dg7ww1ummvapo","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><h3 id=\"英文\"><a href=\"#英文\" class=\"headerlink\" title=\"英文\"></a>英文</h3><p>The set [1,2,3,…,n] contains a total of n! unique permutations.</p>\n<p>By listing and labeling all of the permutations in order, we get the following sequence for n = 3:</p>\n<p>“123”<br>“132”<br>“213”<br>“231”<br>“312”<br>“321”<br>Given n and k, return the kth permutation sequence.</p>\n<p>Note:</p>\n<p>Given n will be between 1 and 9 inclusive.<br>Given k will be between 1 and n! inclusive.<br>Example 1:</p>\n<p>Input: n = 3, k = 3<br>Output: “213”<br>Example 2:</p>\n<p>Input: n = 4, k = 9<br>Output: “2314”</p>\n<h3 id=\"中文\"><a href=\"#中文\" class=\"headerlink\" title=\"中文\"></a>中文</h3><p>给出集合 [1,2,3,…,n]，其所有元素共有 n! 种排列。</p>\n<p>按大小顺序列出所有排列情况，并一一标记，当 n = 3 时, 所有排列如下：</p>\n<p>“123”<br>“132”<br>“213”<br>“231”<br>“312”<br>“321”<br>给定 n 和 k，返回第 k 个排列。</p>\n<p>说明：</p>\n<p>给定 n 的范围是 [1, 9]。<br>给定 k 的范围是[1,  n!]。<br>示例 1:</p>\n<p>输入: n = 3, k = 3<br>输出: “213”<br>示例 2:</p>\n<p>输入: n = 4, k = 9<br>输出: “2314”</p>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><ul>\n<li>排列的每一个位置都有一个固定的进位（如果当前数固定，可以有多少种排列），当k达到前进位是，则改位置加1。</li>\n<li>从最左（进位最大）开始，依次用当前进位对k-1做除法（（k-1）/当前进位)，如果结果不为0，则用<code>结果</code>+当前能够使用的最小值，获得当前位置的值。</li>\n<li>用余数当做k,按照第二步的思路，求其余位置的值。</li>\n</ul>\n<p>##代码<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">char</span>* <span class=\"title\">getPermutation</span><span class=\"params\">(<span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> k)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">char</span>* result = (<span class=\"keyword\">char</span>*)<span class=\"built_in\">malloc</span>((n + <span class=\"number\">1</span>) * <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">char</span>));</div><div class=\"line\">    <span class=\"keyword\">bool</span>* flag = (<span class=\"keyword\">bool</span>*)<span class=\"built_in\">calloc</span>(n, <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">bool</span>));</div><div class=\"line\">    <span class=\"keyword\">int</span> temp[<span class=\"number\">10</span>] = &#123; <span class=\"number\">0</span> &#125;;</div><div class=\"line\">    temp[n] = <span class=\"number\">1</span>;</div><div class=\"line\">    temp[n - <span class=\"number\">1</span>] = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>, t = <span class=\"number\">0</span>, idx = <span class=\"number\">0</span>, j = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span>(i = n - <span class=\"number\">2</span>; i &gt; <span class=\"number\">0</span>; i--)</div><div class=\"line\">        temp[i] = temp[i + <span class=\"number\">1</span>] * (n - i);</div><div class=\"line\">    <span class=\"keyword\">for</span>(i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</div><div class=\"line\">        t = (k - <span class=\"number\">1</span>) / temp[i];</div><div class=\"line\">        idx = t;</div><div class=\"line\">        <span class=\"keyword\">for</span>(j = <span class=\"number\">1</span>; j &lt;= n; j++) &#123;</div><div class=\"line\">            <span class=\"comment\">//第j小未使用的数，j为上述计算得来。</span></div><div class=\"line\">            <span class=\"keyword\">if</span>(!flag[j]) &#123;</div><div class=\"line\">                t--;</div><div class=\"line\">                <span class=\"keyword\">if</span>(t == <span class=\"number\">-1</span>)</div><div class=\"line\">                    <span class=\"keyword\">break</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        result[i - <span class=\"number\">1</span>] = <span class=\"string\">'0'</span> + j;</div><div class=\"line\">        flag[j] = <span class=\"literal\">true</span>;</div><div class=\"line\">        k -= idx * temp[i];</div><div class=\"line\">    &#125;</div><div class=\"line\">    result[n] = <span class=\"string\">'\\0'</span>;</div><div class=\"line\">    <span class=\"built_in\">free</span>(flag);</div><div class=\"line\">    <span class=\"keyword\">return</span> result;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><h3 id=\"英文\"><a href=\"#英文\" class=\"headerlink\" title=\"英文\"></a>英文</h3><p>The set [1,2,3,…,n] contains a total of n! unique permutations.</p>\n<p>By listing and labeling all of the permutations in order, we get the following sequence for n = 3:</p>\n<p>“123”<br>“132”<br>“213”<br>“231”<br>“312”<br>“321”<br>Given n and k, return the kth permutation sequence.</p>\n<p>Note:</p>\n<p>Given n will be between 1 and 9 inclusive.<br>Given k will be between 1 and n! inclusive.<br>Example 1:</p>\n<p>Input: n = 3, k = 3<br>Output: “213”<br>Example 2:</p>\n<p>Input: n = 4, k = 9<br>Output: “2314”</p>\n<h3 id=\"中文\"><a href=\"#中文\" class=\"headerlink\" title=\"中文\"></a>中文</h3><p>给出集合 [1,2,3,…,n]，其所有元素共有 n! 种排列。</p>\n<p>按大小顺序列出所有排列情况，并一一标记，当 n = 3 时, 所有排列如下：</p>\n<p>“123”<br>“132”<br>“213”<br>“231”<br>“312”<br>“321”<br>给定 n 和 k，返回第 k 个排列。</p>\n<p>说明：</p>\n<p>给定 n 的范围是 [1, 9]。<br>给定 k 的范围是[1,  n!]。<br>示例 1:</p>\n<p>输入: n = 3, k = 3<br>输出: “213”<br>示例 2:</p>\n<p>输入: n = 4, k = 9<br>输出: “2314”</p>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><ul>\n<li>排列的每一个位置都有一个固定的进位（如果当前数固定，可以有多少种排列），当k达到前进位是，则改位置加1。</li>\n<li>从最左（进位最大）开始，依次用当前进位对k-1做除法（（k-1）/当前进位)，如果结果不为0，则用<code>结果</code>+当前能够使用的最小值，获得当前位置的值。</li>\n<li>用余数当做k,按照第二步的思路，求其余位置的值。</li>\n</ul>\n<p>##代码<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">char</span>* <span class=\"title\">getPermutation</span><span class=\"params\">(<span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> k)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">char</span>* result = (<span class=\"keyword\">char</span>*)<span class=\"built_in\">malloc</span>((n + <span class=\"number\">1</span>) * <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">char</span>));</div><div class=\"line\">    <span class=\"keyword\">bool</span>* flag = (<span class=\"keyword\">bool</span>*)<span class=\"built_in\">calloc</span>(n, <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">bool</span>));</div><div class=\"line\">    <span class=\"keyword\">int</span> temp[<span class=\"number\">10</span>] = &#123; <span class=\"number\">0</span> &#125;;</div><div class=\"line\">    temp[n] = <span class=\"number\">1</span>;</div><div class=\"line\">    temp[n - <span class=\"number\">1</span>] = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>, t = <span class=\"number\">0</span>, idx = <span class=\"number\">0</span>, j = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span>(i = n - <span class=\"number\">2</span>; i &gt; <span class=\"number\">0</span>; i--)</div><div class=\"line\">        temp[i] = temp[i + <span class=\"number\">1</span>] * (n - i);</div><div class=\"line\">    <span class=\"keyword\">for</span>(i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</div><div class=\"line\">        t = (k - <span class=\"number\">1</span>) / temp[i];</div><div class=\"line\">        idx = t;</div><div class=\"line\">        <span class=\"keyword\">for</span>(j = <span class=\"number\">1</span>; j &lt;= n; j++) &#123;</div><div class=\"line\">            <span class=\"comment\">//第j小未使用的数，j为上述计算得来。</span></div><div class=\"line\">            <span class=\"keyword\">if</span>(!flag[j]) &#123;</div><div class=\"line\">                t--;</div><div class=\"line\">                <span class=\"keyword\">if</span>(t == <span class=\"number\">-1</span>)</div><div class=\"line\">                    <span class=\"keyword\">break</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        result[i - <span class=\"number\">1</span>] = <span class=\"string\">'0'</span> + j;</div><div class=\"line\">        flag[j] = <span class=\"literal\">true</span>;</div><div class=\"line\">        k -= idx * temp[i];</div><div class=\"line\">    &#125;</div><div class=\"line\">    result[n] = <span class=\"string\">'\\0'</span>;</div><div class=\"line\">    <span class=\"built_in\">free</span>(flag);</div><div class=\"line\">    <span class=\"keyword\">return</span> result;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n"},{"title":"算法-链表相交(ntersection of Two Linked Lists)","date":"2018-01-08T09:11:56.000Z","toc":true,"_content":"\n## 题目\n编写一个程序，找到两个单链表相交的起始节点\n注意：\n- 如果两个链表没有交点，返回 null.\n- 在返回结果后，两个链表仍须保持原有的结构。\n- 可假定整个链表结构中没有循环。\n- 程序尽量满足 O(n) 时间复杂度，且仅用 O(1) 内存。\n\n\n## 思路\n架设存在两个链表 `headA` `headB`。定义两个指针 `a` `b`分别对应`headA` `headB`, 循环`a` `b` 直至到达链表的尾部，然后将`a`指向`headB`、将`b`指向`headA` ,继续循环直至出现`a==b`的情况，或者任意一个链表到达终点。\n\n\n## 代码\n```c\n/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     struct ListNode *next;\n * };\n */\nstruct ListNode *getIntersectionNode(struct ListNode *headA, struct ListNode *headB) {\n    struct ListNode *a = headA;\n    struct ListNode *b = headB;\n    int aDone =0;\n    int bDone =0;\n    while(1)\n    {\n        if(a == b) {\n            return a;\n        }\n        if(a && a->next) {\n            a =  a->next;\n        } else {\n            if(aDone != 1) {\n               a = headB;\n               aDone = 1; \n            } else {\n                break;\n            }\n            \n        } \n        \n        if(b && b->next )\n        {\n            b = b->next;\n        } else {\n            if(bDone != 1) {\n                b = headA;\n                bDone =1;\n            } else {\n                break;\n            }\n            \n        }\n        \n    }\n    return NULL;\n    \n   \n}\n```","source":"_posts/算法-链表相交.md","raw":"---\ntitle: 算法-链表相交(ntersection of Two Linked Lists)\ndate: 2018-01-08 17:11:56\ntags: 算法\ntoc: true\ncategories: 算法\n---\n\n## 题目\n编写一个程序，找到两个单链表相交的起始节点\n注意：\n- 如果两个链表没有交点，返回 null.\n- 在返回结果后，两个链表仍须保持原有的结构。\n- 可假定整个链表结构中没有循环。\n- 程序尽量满足 O(n) 时间复杂度，且仅用 O(1) 内存。\n\n\n## 思路\n架设存在两个链表 `headA` `headB`。定义两个指针 `a` `b`分别对应`headA` `headB`, 循环`a` `b` 直至到达链表的尾部，然后将`a`指向`headB`、将`b`指向`headA` ,继续循环直至出现`a==b`的情况，或者任意一个链表到达终点。\n\n\n## 代码\n```c\n/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     struct ListNode *next;\n * };\n */\nstruct ListNode *getIntersectionNode(struct ListNode *headA, struct ListNode *headB) {\n    struct ListNode *a = headA;\n    struct ListNode *b = headB;\n    int aDone =0;\n    int bDone =0;\n    while(1)\n    {\n        if(a == b) {\n            return a;\n        }\n        if(a && a->next) {\n            a =  a->next;\n        } else {\n            if(aDone != 1) {\n               a = headB;\n               aDone = 1; \n            } else {\n                break;\n            }\n            \n        } \n        \n        if(b && b->next )\n        {\n            b = b->next;\n        } else {\n            if(bDone != 1) {\n                b = headA;\n                bDone =1;\n            } else {\n                break;\n            }\n            \n        }\n        \n    }\n    return NULL;\n    \n   \n}\n```","slug":"算法-链表相交","published":1,"updated":"2019-02-21T03:49:34.727Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjswwkdrd004gg7wwd04jykdb","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>编写一个程序，找到两个单链表相交的起始节点<br>注意：</p>\n<ul>\n<li>如果两个链表没有交点，返回 null.</li>\n<li>在返回结果后，两个链表仍须保持原有的结构。</li>\n<li>可假定整个链表结构中没有循环。</li>\n<li>程序尽量满足 O(n) 时间复杂度，且仅用 O(1) 内存。</li>\n</ul>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>架设存在两个链表 <code>headA</code> <code>headB</code>。定义两个指针 <code>a</code> <code>b</code>分别对应<code>headA</code> <code>headB</code>, 循环<code>a</code> <code>b</code> 直至到达链表的尾部，然后将<code>a</code>指向<code>headB</code>、将<code>b</code>指向<code>headA</code> ,继续循环直至出现<code>a==b</code>的情况，或者任意一个链表到达终点。</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Definition for singly-linked list.</div><div class=\"line\"> * struct ListNode &#123;</div><div class=\"line\"> *     int val;</div><div class=\"line\"> *     struct ListNode *next;</div><div class=\"line\"> * &#125;;</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">struct</span> ListNode *<span class=\"title\">getIntersectionNode</span><span class=\"params\">(<span class=\"keyword\">struct</span> ListNode *headA, <span class=\"keyword\">struct</span> ListNode *headB)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">struct</span> ListNode *a = headA;</div><div class=\"line\">    <span class=\"keyword\">struct</span> ListNode *b = headB;</div><div class=\"line\">    <span class=\"keyword\">int</span> aDone =<span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> bDone =<span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"number\">1</span>)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(a == b) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> a;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span>(a &amp;&amp; a-&gt;next) &#123;</div><div class=\"line\">            a =  a-&gt;next;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>(aDone != <span class=\"number\">1</span>) &#123;</div><div class=\"line\">               a = headB;</div><div class=\"line\">               aDone = <span class=\"number\">1</span>; </div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            </div><div class=\"line\">        &#125; </div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">if</span>(b &amp;&amp; b-&gt;next )</div><div class=\"line\">        &#123;</div><div class=\"line\">            b = b-&gt;next;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>(bDone != <span class=\"number\">1</span>) &#123;</div><div class=\"line\">                b = headA;</div><div class=\"line\">                bDone =<span class=\"number\">1</span>;</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            </div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</div><div class=\"line\">    </div><div class=\"line\">   </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>编写一个程序，找到两个单链表相交的起始节点<br>注意：</p>\n<ul>\n<li>如果两个链表没有交点，返回 null.</li>\n<li>在返回结果后，两个链表仍须保持原有的结构。</li>\n<li>可假定整个链表结构中没有循环。</li>\n<li>程序尽量满足 O(n) 时间复杂度，且仅用 O(1) 内存。</li>\n</ul>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>架设存在两个链表 <code>headA</code> <code>headB</code>。定义两个指针 <code>a</code> <code>b</code>分别对应<code>headA</code> <code>headB</code>, 循环<code>a</code> <code>b</code> 直至到达链表的尾部，然后将<code>a</code>指向<code>headB</code>、将<code>b</code>指向<code>headA</code> ,继续循环直至出现<code>a==b</code>的情况，或者任意一个链表到达终点。</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Definition for singly-linked list.</div><div class=\"line\"> * struct ListNode &#123;</div><div class=\"line\"> *     int val;</div><div class=\"line\"> *     struct ListNode *next;</div><div class=\"line\"> * &#125;;</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">struct</span> ListNode *<span class=\"title\">getIntersectionNode</span><span class=\"params\">(<span class=\"keyword\">struct</span> ListNode *headA, <span class=\"keyword\">struct</span> ListNode *headB)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">struct</span> ListNode *a = headA;</div><div class=\"line\">    <span class=\"keyword\">struct</span> ListNode *b = headB;</div><div class=\"line\">    <span class=\"keyword\">int</span> aDone =<span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> bDone =<span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"number\">1</span>)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(a == b) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> a;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span>(a &amp;&amp; a-&gt;next) &#123;</div><div class=\"line\">            a =  a-&gt;next;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>(aDone != <span class=\"number\">1</span>) &#123;</div><div class=\"line\">               a = headB;</div><div class=\"line\">               aDone = <span class=\"number\">1</span>; </div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            </div><div class=\"line\">        &#125; </div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">if</span>(b &amp;&amp; b-&gt;next )</div><div class=\"line\">        &#123;</div><div class=\"line\">            b = b-&gt;next;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>(bDone != <span class=\"number\">1</span>) &#123;</div><div class=\"line\">                b = headA;</div><div class=\"line\">                bDone =<span class=\"number\">1</span>;</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            </div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</div><div class=\"line\">    </div><div class=\"line\">   </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjswwkdos0004g7ww6ysxr7xs","category_id":"cjswwkdou0006g7wwhlded0lv","_id":"cjswwkdp2000gg7wwckcim3di"},{"post_id":"cjswwkdp1000fg7wwhj03cqnv","category_id":"cjswwkdoz000bg7wwdg65cqsy","_id":"cjswwkdp6000og7wwr79fhlw9"},{"post_id":"cjswwkdow0009g7wwlrhsmd2z","category_id":"cjswwkdoz000bg7wwdg65cqsy","_id":"cjswwkdp8000sg7wwgcocb1gz"},{"post_id":"cjswwkdoz000eg7ww5or2795e","category_id":"cjswwkdp3000ig7wwfu8gz6fo","_id":"cjswwkdp9000vg7wwuwmgtcr9"},{"post_id":"cjswwkdp2000hg7wwicpkh0wp","category_id":"cjswwkdp6000pg7wwn5hdjppf","_id":"cjswwkdpc000zg7wwkcy6n82a"},{"post_id":"cjswwkdpa000wg7wwsidlcqd7","category_id":"cjswwkdpc0010g7wwry4n7sfj","_id":"cjswwkdpi001ag7wwfubq1bae"},{"post_id":"cjswwkdpb000yg7wwr0myl5vw","category_id":"cjswwkdpf0015g7wwvaopdff3","_id":"cjswwkdpm001gg7wwettptdtx"},{"post_id":"cjswwkdpc0012g7wwhpp8mske","category_id":"cjswwkdpj001bg7wwqabnyz7k","_id":"cjswwkdpo001mg7ww83s5zx74"},{"post_id":"cjswwkdpf0014g7wwkljgei97","category_id":"cjswwkdpm001hg7wwlbemg46l","_id":"cjswwkdpr001tg7wwhmn91f1e"},{"post_id":"cjswwkdpn001lg7ww3bzrazwg","category_id":"cjswwkdp3000ig7wwfu8gz6fo","_id":"cjswwkdps001xg7ww8mzp0d2c"},{"post_id":"cjswwkdpq001rg7ww5s8mt2t7","category_id":"cjswwkdp6000pg7wwn5hdjppf","_id":"cjswwkdpw0021g7ww7gymntpc"},{"post_id":"cjswwkdpg0018g7wwub01434s","category_id":"cjswwkdpp001ng7wwpwx88pdv","_id":"cjswwkdpz0025g7wwazz8ztwe"},{"post_id":"cjswwkdpt001zg7wwebujtktm","category_id":"cjswwkdpf0015g7wwvaopdff3","_id":"cjswwkdq00027g7ww9arjt0mi"},{"post_id":"cjswwkdpi0019g7wwke1hr58g","category_id":"cjswwkdps001vg7wwx45c27i7","_id":"cjswwkdq1002ag7wwlv07t14s"},{"post_id":"cjswwkdpk001dg7ww2v8wymfq","category_id":"cjswwkdps001vg7wwx45c27i7","_id":"cjswwkdq2002dg7wwq7ueqsa4"},{"post_id":"cjswwkdpl001fg7ww2krcorax","category_id":"cjswwkdps001vg7wwx45c27i7","_id":"cjswwkdq3002hg7ww2vfafebv"},{"post_id":"cjswwkdpm001jg7wwm01bbtwr","category_id":"cjswwkdps001vg7wwx45c27i7","_id":"cjswwkdq4002kg7wwa1jhmxrf"},{"post_id":"cjswwkdpp001pg7wwyi0d6uax","category_id":"cjswwkdq3002gg7wwgbkz6z0u","_id":"cjswwkdq5002og7wwgbstiheh"},{"post_id":"cjswwkdpr001ug7wwdovbd2jh","category_id":"cjswwkdq5002lg7wwx956c1eq","_id":"cjswwkdq6002tg7wwlxsc7jxb"},{"post_id":"cjswwkdpw0020g7wwazawjgv7","category_id":"cjswwkdq5002lg7wwx956c1eq","_id":"cjswwkdq7002wg7ww2mgoee5b"},{"post_id":"cjswwkdpy0024g7wwvyl6udtv","category_id":"cjswwkdq6002sg7ww69oxbjc3","_id":"cjswwkdq8002zg7wwppg0cmjh"},{"post_id":"cjswwkdqo0033g7wwnloia3bd","category_id":"cjswwkdpf0015g7wwvaopdff3","_id":"cjswwkdqu003cg7wwcpddnl7v"},{"post_id":"cjswwkdqq0035g7ww8bg5xe1d","category_id":"cjswwkdq5002lg7wwx956c1eq","_id":"cjswwkdqv003gg7wwb7pjn2a4"},{"post_id":"cjswwkdqr0038g7wwxw87qou9","category_id":"cjswwkdpf0015g7wwvaopdff3","_id":"cjswwkdqx003kg7wwx6463xeq"},{"post_id":"cjswwkdqt003bg7wwzeyjezgs","category_id":"cjswwkdpf0015g7wwvaopdff3","_id":"cjswwkdqy003ng7wwpjmsbwii"},{"post_id":"cjswwkdqv003fg7wwo1u22ikn","category_id":"cjswwkdpf0015g7wwvaopdff3","_id":"cjswwkdqz003qg7ww1cea6p8n"},{"post_id":"cjswwkdqw003jg7www6lvhvev","category_id":"cjswwkdpf0015g7wwvaopdff3","_id":"cjswwkdr1003tg7ww0x000ste"},{"post_id":"cjswwkdqx003mg7wwadyz440d","category_id":"cjswwkdpf0015g7wwvaopdff3","_id":"cjswwkdr2003wg7ww01y7p6gi"},{"post_id":"cjswwkdqz003pg7wwpv84v23u","category_id":"cjswwkdpf0015g7wwvaopdff3","_id":"cjswwkdr4003zg7wwpt5zwsc0"},{"post_id":"cjswwkdr0003sg7ww7n53kmcp","category_id":"cjswwkdpf0015g7wwvaopdff3","_id":"cjswwkdr50042g7wwy3b3l0d0"},{"post_id":"cjswwkdr2003vg7wwob61djc8","category_id":"cjswwkdpf0015g7wwvaopdff3","_id":"cjswwkdr70045g7wwniwd6qiv"},{"post_id":"cjswwkdr3003yg7wwac99nzr1","category_id":"cjswwkdpf0015g7wwvaopdff3","_id":"cjswwkdr80048g7wwxbk9wcit"},{"post_id":"cjswwkdr40041g7ww7rx0tnto","category_id":"cjswwkdpf0015g7wwvaopdff3","_id":"cjswwkdra004bg7ww25m11wpr"},{"post_id":"cjswwkdr60044g7ww9kaiv4uo","category_id":"cjswwkdpf0015g7wwvaopdff3","_id":"cjswwkdrc004eg7wwlzjtslwa"},{"post_id":"cjswwkdr70047g7ww4yofzqf5","category_id":"cjswwkdpf0015g7wwvaopdff3","_id":"cjswwkdre004hg7wwxo5jo3dj"},{"post_id":"cjswwkdr9004ag7wwjz7jpyq3","category_id":"cjswwkdpf0015g7wwvaopdff3","_id":"cjswwkdre004jg7ww28qa917m"},{"post_id":"cjswwkdrb004dg7ww1ummvapo","category_id":"cjswwkdpf0015g7wwvaopdff3","_id":"cjswwkdrf004lg7wwntijjicg"},{"post_id":"cjswwkdrd004gg7wwd04jykdb","category_id":"cjswwkdpf0015g7wwvaopdff3","_id":"cjswwkdrf004mg7wwac1bmqpa"}],"PostTag":[{"post_id":"cjswwkdos0004g7ww6ysxr7xs","tag_id":"cjswwkdov0007g7wwcfe1oab0","_id":"cjswwkdoz000dg7wwykmre4nu"},{"post_id":"cjswwkdp1000fg7wwhj03cqnv","tag_id":"cjswwkdoz000cg7wwdp60hind","_id":"cjswwkdp4000kg7wwoen60iwb"},{"post_id":"cjswwkdow0009g7wwlrhsmd2z","tag_id":"cjswwkdoz000cg7wwdp60hind","_id":"cjswwkdp5000mg7wwb6vscy0h"},{"post_id":"cjswwkdoz000eg7ww5or2795e","tag_id":"cjswwkdp3000jg7ww4a8vcvhw","_id":"cjswwkdp8000tg7wwzfx5lfad"},{"post_id":"cjswwkdp2000hg7wwicpkh0wp","tag_id":"cjswwkdp6000qg7ww4wtayndv","_id":"cjswwkdpa000xg7wwtn6aun9r"},{"post_id":"cjswwkdpa000wg7wwsidlcqd7","tag_id":"cjswwkdpc0011g7wwgtgm2kcd","_id":"cjswwkdpg0017g7wwpbdc6p0m"},{"post_id":"cjswwkdpb000yg7wwr0myl5vw","tag_id":"cjswwkdpg0016g7wwp22og9iy","_id":"cjswwkdpl001eg7wwh9t1mugw"},{"post_id":"cjswwkdpc0012g7wwhpp8mske","tag_id":"cjswwkdpj001cg7ww0c7g14q1","_id":"cjswwkdpn001kg7wwrwqv9zvb"},{"post_id":"cjswwkdpf0014g7wwkljgei97","tag_id":"cjswwkdpm001ig7wwgi8hmiux","_id":"cjswwkdpq001qg7wwmfnrqw51"},{"post_id":"cjswwkdpn001lg7ww3bzrazwg","tag_id":"cjswwkdp3000jg7ww4a8vcvhw","_id":"cjswwkdpr001sg7wwqa3eydxh"},{"post_id":"cjswwkdpg0018g7wwub01434s","tag_id":"cjswwkdpp001og7wwb3npvz5v","_id":"cjswwkdps001yg7wwr6i8utg4"},{"post_id":"cjswwkdpi0019g7wwke1hr58g","tag_id":"cjswwkdps001wg7wwaxnmrv6z","_id":"cjswwkdpz0026g7wwiq6ojs3s"},{"post_id":"cjswwkdpk001dg7ww2v8wymfq","tag_id":"cjswwkdps001wg7wwaxnmrv6z","_id":"cjswwkdq1002bg7wwk2lqfn6h"},{"post_id":"cjswwkdpl001fg7ww2krcorax","tag_id":"cjswwkdps001wg7wwaxnmrv6z","_id":"cjswwkdq3002fg7wwoo936dxk"},{"post_id":"cjswwkdpm001jg7wwm01bbtwr","tag_id":"cjswwkdps001wg7wwaxnmrv6z","_id":"cjswwkdq4002jg7wwo0cf2d3h"},{"post_id":"cjswwkdpp001pg7wwyi0d6uax","tag_id":"cjswwkdq3002ig7wwbfjdkgpj","_id":"cjswwkdq5002ng7ww244vwsax"},{"post_id":"cjswwkdpq001rg7ww5s8mt2t7","tag_id":"cjswwkdq5002mg7wwgeqwd569","_id":"cjswwkdq6002rg7wwa12zjmre"},{"post_id":"cjswwkdpr001ug7wwdovbd2jh","tag_id":"cjswwkdq5002qg7wwkqdeiki0","_id":"cjswwkdq7002vg7wwf2u2kqbb"},{"post_id":"cjswwkdpt001zg7wwebujtktm","tag_id":"cjswwkdq5002qg7wwkqdeiki0","_id":"cjswwkdq7002yg7wwogtb6igb"},{"post_id":"cjswwkdpw0020g7wwazawjgv7","tag_id":"cjswwkdq5002qg7wwkqdeiki0","_id":"cjswwkdq90031g7wwyhdcb4qt"},{"post_id":"cjswwkdpy0024g7wwvyl6udtv","tag_id":"cjswwkdq80030g7wwa4skn04z","_id":"cjswwkdq90032g7wwe6y0es01"},{"post_id":"cjswwkdqo0033g7wwnloia3bd","tag_id":"cjswwkdpg0016g7wwp22og9iy","_id":"cjswwkdqr0037g7wwukyhkwsj"},{"post_id":"cjswwkdqq0035g7ww8bg5xe1d","tag_id":"cjswwkdq5002qg7wwkqdeiki0","_id":"cjswwkdqt003ag7ww3bamunxq"},{"post_id":"cjswwkdqr0038g7wwxw87qou9","tag_id":"cjswwkdpg0016g7wwp22og9iy","_id":"cjswwkdqu003eg7wwpvv83ef6"},{"post_id":"cjswwkdqt003bg7wwzeyjezgs","tag_id":"cjswwkdpg0016g7wwp22og9iy","_id":"cjswwkdqw003ig7ww3hmhph8x"},{"post_id":"cjswwkdqv003fg7wwo1u22ikn","tag_id":"cjswwkdpg0016g7wwp22og9iy","_id":"cjswwkdqx003lg7wwzqntzvfl"},{"post_id":"cjswwkdqw003jg7www6lvhvev","tag_id":"cjswwkdpg0016g7wwp22og9iy","_id":"cjswwkdqy003og7ww9i2eo1g0"},{"post_id":"cjswwkdqx003mg7wwadyz440d","tag_id":"cjswwkdpg0016g7wwp22og9iy","_id":"cjswwkdr0003rg7wwoeksdnl6"},{"post_id":"cjswwkdqz003pg7wwpv84v23u","tag_id":"cjswwkdpg0016g7wwp22og9iy","_id":"cjswwkdr1003ug7wwxn6oxubk"},{"post_id":"cjswwkdr0003sg7ww7n53kmcp","tag_id":"cjswwkdpg0016g7wwp22og9iy","_id":"cjswwkdr3003xg7ww7yppf7e9"},{"post_id":"cjswwkdr2003vg7wwob61djc8","tag_id":"cjswwkdpg0016g7wwp22og9iy","_id":"cjswwkdr40040g7ww7ol86x59"},{"post_id":"cjswwkdr3003yg7wwac99nzr1","tag_id":"cjswwkdpg0016g7wwp22og9iy","_id":"cjswwkdr60043g7wwppuq78c0"},{"post_id":"cjswwkdr40041g7ww7rx0tnto","tag_id":"cjswwkdpg0016g7wwp22og9iy","_id":"cjswwkdr70046g7wwmkdbrgmf"},{"post_id":"cjswwkdr60044g7ww9kaiv4uo","tag_id":"cjswwkdpg0016g7wwp22og9iy","_id":"cjswwkdr80049g7wwlij9le64"},{"post_id":"cjswwkdr70047g7ww4yofzqf5","tag_id":"cjswwkdpg0016g7wwp22og9iy","_id":"cjswwkdrb004cg7wwslocb80n"},{"post_id":"cjswwkdr9004ag7wwjz7jpyq3","tag_id":"cjswwkdpg0016g7wwp22og9iy","_id":"cjswwkdrd004fg7wwetzrr2mi"},{"post_id":"cjswwkdrb004dg7ww1ummvapo","tag_id":"cjswwkdpg0016g7wwp22og9iy","_id":"cjswwkdre004ig7ww9134a0si"},{"post_id":"cjswwkdrd004gg7wwd04jykdb","tag_id":"cjswwkdpg0016g7wwp22og9iy","_id":"cjswwkdrf004kg7wwja5fxn6d"}],"Tag":[{"name":"kong","_id":"cjswwkdov0007g7wwcfe1oab0"},{"name":"php","_id":"cjswwkdoz000cg7wwdp60hind"},{"name":"网络","_id":"cjswwkdp3000jg7ww4a8vcvhw"},{"name":"工具","_id":"cjswwkdp6000qg7ww4wtayndv"},{"name":"微服务","_id":"cjswwkdpc0011g7wwgtgm2kcd"},{"name":"算法","_id":"cjswwkdpg0016g7wwp22og9iy"},{"name":"设计模式","_id":"cjswwkdpj001cg7ww0c7g14q1"},{"name":"hexo","_id":"cjswwkdpm001ig7wwgi8hmiux"},{"name":"http","_id":"cjswwkdpp001og7wwb3npvz5v"},{"name":"php源码","_id":"cjswwkdps001wg7wwaxnmrv6z"},{"name":"折腾","_id":"cjswwkdq3002ig7wwbfjdkgpj"},{"name":"composer","_id":"cjswwkdq5002mg7wwgeqwd569"},{"name":"数据库","_id":"cjswwkdq5002qg7wwkqdeiki0"},{"name":"c语言","_id":"cjswwkdq80030g7wwa4skn04z"}]}}