{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/b325609689e6e350fab73951048aba5b_xl.jpg","path":"b325609689e6e350fab73951048aba5b_xl.jpg","modified":1,"renderable":0},{"_id":"themes/yilia/source/main.css","path":"main.css","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/default-skin.svg","path":"fonts/default-skin.svg","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.eot","path":"fonts/iconfont.eot","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.svg","path":"fonts/iconfont.svg","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.ttf","path":"fonts/iconfont.ttf","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.woff","path":"fonts/iconfont.woff","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/tooltip.svg","path":"fonts/tooltip.svg","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/default-skin.png","path":"img/default-skin.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/preloader.gif","path":"img/preloader.gif","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/js/jquery-3.1.1.min.js","path":"js/jquery-3.1.1.min.js","modified":1,"renderable":1},{"_id":"source/photo/img/2018-06-19/servicePic1.png","path":"photo/img/2018-06-19/servicePic1.png","modified":1,"renderable":0},{"_id":"source/photo/img/2018-06-19/servicePic3.png","path":"photo/img/2018-06-19/servicePic3.png","modified":1,"renderable":0},{"_id":"source/photo/img/2018-06-19/servicePic4.png","path":"photo/img/2018-06-19/servicePic4.png","modified":1,"renderable":0},{"_id":"source/photo/img/2018-06-19/servicePic5.png","path":"photo/img/2018-06-19/servicePic5.png","modified":1,"renderable":0},{"_id":"source/photo/img/2018-06-21/DingTalk20180621202319.png","path":"photo/img/2018-06-21/DingTalk20180621202319.png","modified":1,"renderable":0},{"_id":"source/photo/img/php-curl/DingTalk20180718203726.png","path":"photo/img/php-curl/DingTalk20180718203726.png","modified":1,"renderable":0},{"_id":"source/photo/img/php-curl/DingTalk20180718204055.png","path":"photo/img/php-curl/DingTalk20180718204055.png","modified":1,"renderable":0},{"_id":"source/photo/img/php-curl/DingTalk20180718204343.png","path":"photo/img/php-curl/DingTalk20180718204343.png","modified":1,"renderable":0},{"_id":"source/photo/img/php-curl/DingTalk20180718204411.png","path":"photo/img/php-curl/DingTalk20180718204411.png","modified":1,"renderable":0},{"_id":"source/photo/img/2018-06-19/servicePic2.png","path":"photo/img/2018-06-19/servicePic2.png","modified":1,"renderable":0},{"_id":"themes/yilia/source/slider.js","path":"slider.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/main.js","path":"main.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"e77dc8ea1ce03049b2f389d17432857023ca5a2b","modified":1526527945643},{"_id":"source/b325609689e6e350fab73951048aba5b_xl.jpg","hash":"f42904b1e5ce91bd3fae16b21c7928301e88c9da","modified":1482149562000},{"_id":"themes/yilia/.babelrc","hash":"db600d40e93e6d8023737a65d58d3be7370e5e30","modified":1482148908000},{"_id":"themes/yilia/.editorconfig","hash":"daaa8757fac18f8735fadd0a37a42c06f421ca14","modified":1482148908000},{"_id":"themes/yilia/.eslintignore","hash":"ed9d8911ca08c3dd5072c48dd0be4d06f8897730","modified":1482148908000},{"_id":"themes/yilia/.eslintrc.js","hash":"303d25adf02ad65720e537a16a4a137d14bb755f","modified":1482148908000},{"_id":"themes/yilia/.gitignore","hash":"d5fc575329853ff620b50fc62ad4b18fa09a308a","modified":1482148908000},{"_id":"themes/yilia/README.md","hash":"6288a9a9809f1d14d3517660dc7fda03f7c4d4cc","modified":1482148908000},{"_id":"themes/yilia/_config.yml","hash":"16f9a07b07eb07998d52b6a11ce1ef7903fe4a83","modified":1482155466000},{"_id":"themes/yilia/package.json","hash":"a53faf4a97607b54ea59d5268743fa85d573931f","modified":1482148908000},{"_id":"themes/yilia/webpack.config.js","hash":"cce70cea8a8954503be8f527ee2377501dbabb1c","modified":1482148908000},{"_id":"source/_posts/Laravel学习笔记三控制器.md","hash":"1c867dbd385d104972d3cc806eb60bf7fb239c6d","modified":1529404554664},{"_id":"source/_posts/PHPExecel.md","hash":"fb2adabb0c5f7508b2d85d7690c9a9acaa549a9f","modified":1529404561359},{"_id":"source/_posts/github.md","hash":"36c360ca820cf33d4a74ce32c30c01200fe151d2","modified":1529404514525},{"_id":"source/_posts/hexo-git-github搭建博客.md","hash":"2047cc91dcd2e0a827f18915905a1582fc6d1602","modified":1529404536887},{"_id":"source/_posts/laravel学习笔记二路由.md","hash":"78721932a88de66b020ff507091e6b6a4dbdf33b","modified":1529404554670},{"_id":"source/_posts/laravel学习笔记四中间件.md","hash":"8df579e63e5712c01a8a01c050cf2f865c4764ab","modified":1529404554667},{"_id":"source/_posts/larave学习笔记.md","hash":"249ec1664f70a32dda03ff335385ab3d5d9a1bcb","modified":1531403767558},{"_id":"source/_posts/php-curl.md","hash":"50d22a201c3f045fc0bde4667ac59ccbfdce7cf0","modified":1531918079013},{"_id":"source/_posts/python学习笔记一.md","hash":"83d84833c97ad86c99118c3c55e234fec5fd73df","modified":1531884092177},{"_id":"source/_posts/solr-从控制页面删除数据.md","hash":"bd5f0b1077d5a67c7eac3b7d2c03945420eb390b","modified":1529584205551},{"_id":"source/_posts/websocket订阅火币成交记录.md","hash":"fb37c982c215d2d61ba7b3eedcf552353f4b25ee","modified":1529403588515},{"_id":"source/_posts/一次HTTP请求.md","hash":"8a68ebd419e24b248fd9c4e90cbfe4ee73e02d6a","modified":1511233313000},{"_id":"source/_posts/使用sz-rz命令从服务下载上传文件.md","hash":"5b317027a11cd4e4d2133d9987bde6247436837a","modified":1531402965196},{"_id":"source/_posts/微服务数据一致性和服务可靠性.md","hash":"ca8e5213faba5e723ed1ecd838791edb70893e8b","modified":1531403670353},{"_id":"source/_posts/我不是药神.md","hash":"b4899e35cf3195b9bfd3cd68c01fea79327ed172","modified":1531494535702},{"_id":"source/_posts/设计模式-builder-template-method.md","hash":"90e551870e0879384671d384c3d68dbc67c92231","modified":1533126099910},{"_id":"source/photo/index.md","hash":"0aa76c50ad7e4c763eecba26bff548f2666b8f7f","modified":1482154790000},{"_id":"source/photo/output.json","hash":"b6f0c8376f879349bd41590b2d9301d2faf6b38e","modified":1482153780000},{"_id":"source/photo/tool.js","hash":"9166382c1d5e9dffac1cf484503a70488c720166","modified":1482049780000},{"_id":"themes/yilia/languages/default.yml","hash":"f26a34a7983d4bc17c65c7f0f14da598e62ce66d","modified":1482148908000},{"_id":"themes/yilia/languages/fr.yml","hash":"b4be1c1592a72012e48df2b3ec41cc9685573e50","modified":1482148908000},{"_id":"themes/yilia/languages/nl.yml","hash":"3d82ec703d0b3287739d7cb4750a715ae83bfcb3","modified":1482148908000},{"_id":"themes/yilia/languages/no.yml","hash":"ddf2035e920a5ecb9076138c184257d9f51896a7","modified":1482148908000},{"_id":"themes/yilia/languages/ru.yml","hash":"2a476b4c6e04900914c81378941640ac5d58a1f0","modified":1482148908000},{"_id":"themes/yilia/languages/zh-CN.yml","hash":"b057f389c6713010f97d461e48ec959b0b6f3b44","modified":1482148908000},{"_id":"themes/yilia/languages/zh-tw.yml","hash":"f5f0ca88185da7a8457760d84bf221781473bd7c","modified":1482148908000},{"_id":"themes/yilia/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1482148908000},{"_id":"themes/yilia/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1482148908000},{"_id":"themes/yilia/layout/index.ejs","hash":"ec498c6c0606acde997ce195dad97b267418d980","modified":1482148908000},{"_id":"themes/yilia/layout/layout.ejs","hash":"b471ab706d48e0be3f783eab1c94bf5878ef5a94","modified":1482148908000},{"_id":"themes/yilia/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1482148908000},{"_id":"themes/yilia/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1482148908000},{"_id":"themes/yilia/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1482148908000},{"_id":"themes/yilia/source/main.css","hash":"978d85fb60d7b3fd3e1af41c84bdfcc8255ae0d0","modified":1482148908000},{"_id":"themes/yilia/layout/_partial/after-footer.ejs","hash":"142c68ba46c1bcb0fa3922014b35f3c2c3ac9c9c","modified":1482148908000},{"_id":"themes/yilia/layout/_partial/archive-post.ejs","hash":"edc0154b30a4127acda10297bec6aacf754b4ac4","modified":1482148908000},{"_id":"themes/yilia/layout/_partial/archive.ejs","hash":"a4eacc2bc1278095a0ef99f904b0634c78f980eb","modified":1482148908000},{"_id":"themes/yilia/layout/_partial/article.ejs","hash":"6555448b2bd3e0aa1fa3bbcfc714b0d1dc7d3862","modified":1482148908000},{"_id":"themes/yilia/layout/_partial/baidu-analytics.ejs","hash":"155327c23607f69989b58845f24d842a54e504b8","modified":1482148908000},{"_id":"themes/yilia/layout/_partial/footer.ejs","hash":"871f81cacd5d41cb2eb001cd56254217a857dc2f","modified":1482148908000},{"_id":"themes/yilia/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1482148908000},{"_id":"themes/yilia/layout/_partial/head.ejs","hash":"211f8b77697381d759ae12a9a82f85792250f6ce","modified":1482148908000},{"_id":"themes/yilia/layout/_partial/header.ejs","hash":"b69855e07b65117769adc515cb64b803932068c9","modified":1482148908000},{"_id":"themes/yilia/layout/_partial/left-col.ejs","hash":"1e63c86574f2b2dab3908db0c9981d3549202cd2","modified":1482148908000},{"_id":"themes/yilia/layout/_partial/mathjax.ejs","hash":"11550a418921d330e6553be0569a94ab5a217967","modified":1482148908000},{"_id":"themes/yilia/layout/_partial/mobile-nav.ejs","hash":"7d04a2512973a6c1e62f5175dd818a82cfa7824b","modified":1482148908000},{"_id":"themes/yilia/layout/_partial/tools.ejs","hash":"449ab069f57fa13c295bd9c8ebb936472a602cb1","modified":1482148908000},{"_id":"themes/yilia/layout/_partial/viewer.ejs","hash":"cc1c39903aed0a0601d104238d2bbd13ad2a36f3","modified":1482148908000},{"_id":"themes/yilia/source/fonts/default-skin.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1482148908000},{"_id":"themes/yilia/source/fonts/iconfont.eot","hash":"a6048d19579aa03fa2e0cf6f4ea0c91cc9906946","modified":1482148908000},{"_id":"themes/yilia/source/fonts/iconfont.svg","hash":"7c4d7a123d44d525f322076b74100493a735d9be","modified":1482148908000},{"_id":"themes/yilia/source/fonts/iconfont.ttf","hash":"4eecc4e6e094525636c66a0f036d9d136eb043b4","modified":1482148908000},{"_id":"themes/yilia/source/fonts/iconfont.woff","hash":"3b5c92c260005b654d2cb54e3d44c7a79e5a52b9","modified":1482148908000},{"_id":"themes/yilia/source/fonts/tooltip.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1482148908000},{"_id":"themes/yilia/source/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1482148908000},{"_id":"themes/yilia/source/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1482148908000},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1482148908000},{"_id":"themes/yilia/source-src/css/_core.scss","hash":"29ba600e98ed55f7af4ade8038272c84cba21188","modified":1482148908000},{"_id":"themes/yilia/source-src/css/_function.scss","hash":"ce227b6f5a9af194fd5d455200630f32c05e151f","modified":1482148908000},{"_id":"themes/yilia/source-src/css/archive.scss","hash":"8a0ae8ee6af8df3f215f1cd4ecc10145a5b92cf0","modified":1482148908000},{"_id":"themes/yilia/source-src/css/article-inner.scss","hash":"4115c4518cca3f5cf461018aa7a7321138d017cc","modified":1482148908000},{"_id":"themes/yilia/source-src/css/article-main.scss","hash":"1577a2336b3ad122f49f60dff2bc1a97d4e7b18b","modified":1482148908000},{"_id":"themes/yilia/source-src/css/article-nav.scss","hash":"9069371dcc65eee63081a21e8a56a9f3dbf64c08","modified":1482148908000},{"_id":"themes/yilia/source-src/css/article.scss","hash":"55d082fec4c6bb341725567acaa29ce37d50320a","modified":1482148908000},{"_id":"themes/yilia/source-src/css/duoshuo.scss","hash":"8eb9678e2f88da64436d75e5fde5c84bd52f7e17","modified":1482148908000},{"_id":"themes/yilia/source-src/css/fonts.scss","hash":"55622fe3cfcba698fc7e0c350886ef8577eb6183","modified":1482148908000},{"_id":"themes/yilia/source-src/css/footer.scss","hash":"7ca837a4cc34db1c35f01baec85eb10ccc64ea86","modified":1482148908000},{"_id":"themes/yilia/source-src/css/global.scss","hash":"b4cb4f45a55d4250cd9056f76dab2a3c0dabcec4","modified":1482148908000},{"_id":"themes/yilia/source-src/css/highlight.scss","hash":"0267e2febaef284cf319235435643232fdeee0c9","modified":1482148908000},{"_id":"themes/yilia/source-src/css/grid.scss","hash":"78fae4d9ea57aa81c7cd02b1de13754b164ca32a","modified":1482148908000},{"_id":"themes/yilia/source-src/css/left.scss","hash":"338b6a84eed60412d0dd3d64525dbb4c8e8f6b94","modified":1482148908000},{"_id":"themes/yilia/source-src/css/main.scss","hash":"b63c0f9b3bf68efc3bcd7c816bcac6f2fb827528","modified":1482148908000},{"_id":"themes/yilia/source-src/css/mobile-slider.scss","hash":"facd3d41bc9b2d2c6134fc0fbd379a3b0c18476b","modified":1482148908000},{"_id":"themes/yilia/source-src/css/mobile.scss","hash":"d5ead4f0787e72dea76a1e2bc114edc82e744451","modified":1482148908000},{"_id":"themes/yilia/source-src/css/page.scss","hash":"244c4d75c375978ff9edb74acc68825e63c6b235","modified":1482148908000},{"_id":"themes/yilia/source-src/css/reward.scss","hash":"a557a9ed244c82b8b71e9da9de3339d92783499f","modified":1482148908000},{"_id":"themes/yilia/source-src/css/scroll.scss","hash":"2495f7e4e3b055735c531f944b5f40a118a351ec","modified":1482148908000},{"_id":"themes/yilia/source-src/css/share.scss","hash":"9d6f6884f40c191882e56a1e1e1192400944a515","modified":1482148908000},{"_id":"themes/yilia/source-src/css/social.scss","hash":"70c2e36b7161717feed1f231271ed693c36407d1","modified":1482148908000},{"_id":"themes/yilia/source-src/css/tags-cloud.scss","hash":"399744e98e7c67939ed9b23c2670d8baad044eda","modified":1482148908000},{"_id":"themes/yilia/source-src/css/tags.scss","hash":"ca0d8adf1a59fe6263d552b9d90b3ca351ad631b","modified":1482148908000},{"_id":"themes/yilia/source-src/css/tools.scss","hash":"f46123cffed3d5f6db8e67d490b28f90d7c6b052","modified":1482148908000},{"_id":"themes/yilia/source-src/css/tooltip.scss","hash":"b81cedbe31accca82e597801186911a7b5e6841c","modified":1482148908000},{"_id":"themes/yilia/source-src/js/anm.js","hash":"d18f6276a352b871390a4112d479b9e58b8cdbbe","modified":1482148908000},{"_id":"themes/yilia/source-src/js/Q.js","hash":"e56d9710afa79b31ca6b9fbd845f6d1895f5214b","modified":1482148908000},{"_id":"themes/yilia/source-src/js/browser.js","hash":"4dc04845cf27f350922b63f1813a9c82e6e33b05","modified":1482148908000},{"_id":"themes/yilia/source-src/js/fix.js","hash":"1aa4843ea651ebd77de89052b5535bade542bb13","modified":1482148908000},{"_id":"themes/yilia/source-src/js/main.js","hash":"c16968e4607461741a7c63847af686de07f85208","modified":1482148908000},{"_id":"themes/yilia/source-src/js/mobile.js","hash":"be13e3edaae77232503139e4f0272fb439511e3f","modified":1482148908000},{"_id":"themes/yilia/source-src/js/report.js","hash":"57680f9a23bd0a1eaafd64ae08cc33e20627ab15","modified":1482148908000},{"_id":"themes/yilia/source-src/js/share.js","hash":"d4ccff8266c37363b3904226f5d035b7db882c61","modified":1482148908000},{"_id":"themes/yilia/source-src/js/slider.js","hash":"f5f8c9a6dad9e3e93f63813a623ec388727565f5","modified":1482148908000},{"_id":"themes/yilia/source-src/js/util.js","hash":"79da46bd2a1b7ef49bfafa2e4fb8b92845f7e77e","modified":1482148908000},{"_id":"themes/yilia/source-src/js/viewer.js","hash":"3e0fd4479a40ddbd1571c6c953df7e23637b61f5","modified":1482148908000},{"_id":"themes/yilia/source/js/jquery-3.1.1.min.js","hash":"f647a6d37dc4ca055ced3cf64bbc1f490070acba","modified":1482074320000},{"_id":"source/photo/img/2018-06-19/servicePic1.png","hash":"d70e7b5cc208e05b58b9716a1affb8a4018fc929","modified":1529404850000},{"_id":"source/photo/img/2018-06-19/servicePic3.png","hash":"17be50dacdca270537254810c882fad0cc060cb2","modified":1529409229000},{"_id":"source/photo/img/2018-06-19/servicePic4.png","hash":"85884fa22437134430169182e3ea72df03fd7e43","modified":1529409198000},{"_id":"source/photo/img/2018-06-19/servicePic5.png","hash":"523b397346c0042541a83d0ce9d5503e78b8b6d0","modified":1529409154000},{"_id":"themes/yilia/layout/_partial/post/category.ejs","hash":"7f30b4c98eee09d0af1df8164d86dcad27f9acfc","modified":1482148908000},{"_id":"themes/yilia/layout/_partial/post/date.ejs","hash":"aae96de18d48cd3b9b7bf6fed0100e15b53cca97","modified":1482148908000},{"_id":"themes/yilia/layout/_partial/post/duoshuo.ejs","hash":"f6b4c4eaafb5ac386273354b5f64a26139b7a3b0","modified":1482148908000},{"_id":"themes/yilia/layout/_partial/post/nav.ejs","hash":"b6a97043f9ec37e571aacacfedcda1d4d75e3c7c","modified":1482148908000},{"_id":"themes/yilia/layout/_partial/post/share.ejs","hash":"06a2dd18ac9a43fbc9a59c61e6f795f9326e9927","modified":1482148908000},{"_id":"themes/yilia/layout/_partial/post/tag.ejs","hash":"e6edf173da77fb851fc067a481a897ad934cc4ca","modified":1482148908000},{"_id":"themes/yilia/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1482148908000},{"_id":"themes/yilia/source-src/css/core/_animation.scss","hash":"955c8978496e4e861130ca1e21c5ef803ceb6136","modified":1482148908000},{"_id":"themes/yilia/source-src/css/core/_media-queries.scss","hash":"262ffcd88775080b7f511db37f58d2bcb1b2bfc7","modified":1482148908000},{"_id":"themes/yilia/source-src/css/core/_mixin.scss","hash":"91db061c9c17628291a005e5bd4936cf9d35a6c4","modified":1482148908000},{"_id":"themes/yilia/source-src/css/core/_reset.scss","hash":"398a49913b4a47d928103562b1ce94520be4026a","modified":1482148908000},{"_id":"themes/yilia/source-src/css/core/_variables.scss","hash":"6e75bdaa46de83094ba0873099c6e7d656a22453","modified":1482148908000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.eot","hash":"a6048d19579aa03fa2e0cf6f4ea0c91cc9906946","modified":1482148908000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.svg","hash":"7c4d7a123d44d525f322076b74100493a735d9be","modified":1482148908000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.ttf","hash":"4eecc4e6e094525636c66a0f036d9d136eb043b4","modified":1482148908000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.woff","hash":"3b5c92c260005b654d2cb54e3d44c7a79e5a52b9","modified":1482148908000},{"_id":"themes/yilia/source-src/css/img/checkered-pattern.png","hash":"049262fa0886989d750637b264bed34ab51c23c8","modified":1482148908000},{"_id":"themes/yilia/source-src/css/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1482148908000},{"_id":"themes/yilia/source-src/css/img/tooltip.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1482148908000},{"_id":"source/photo/img/2018-06-21/DingTalk20180621202319.png","hash":"5dfa9cb97017ed029184472ecbb11a9142704bed","modified":1529583800000},{"_id":"source/photo/img/php-curl/DingTalk20180718203726.png","hash":"c7f3e0a5e85439f98b330994c35ef3944254e5df","modified":1531917460000},{"_id":"source/photo/img/php-curl/DingTalk20180718204055.png","hash":"ebe305b6b44223e9e5d2761ad257d252b4dbfec0","modified":1531917656000},{"_id":"source/photo/img/php-curl/DingTalk20180718204343.png","hash":"2bea4819d0eab6d599bf82f1a06d16787f94ae66","modified":1531917827000},{"_id":"source/photo/img/php-curl/DingTalk20180718204411.png","hash":"faf427a5248d8466352ca960417ff6c97940ceec","modified":1531917852000},{"_id":"source/photo/img/2018-06-19/servicePic2.png","hash":"eb24df666df5261869eee0f24b7285485789bd83","modified":1529409251000},{"_id":"themes/yilia/source/slider.js","hash":"fac265afe4f8b48a7c5a858268a808a7b0336ca6","modified":1482148908000},{"_id":"themes/yilia/source/main.js","hash":"066631f693440e67752ce717aa74ee52071b7fc2","modified":1482071960000}],"Category":[],"Data":[],"Page":[{"title":"相册","noDate":"true","_content":"<link type=\"text/css\" href=\"/fancybox/jquery.fancybox.css\" rel=\"stylesheet\">\n<div class=\"instagram\"><section class=\"archives album\"><ul class=\"img-box-ul\"></ul></section></div>\n\t\n</div>\n<script src=\"/js/photo.js\"></script>\n<script src=\"/js/jquery-3.1.1.min.js\"></script>\n<script type=\"text/javascript\">\nfunction test() {\n\t$.getJSON(\"/photo/output.json\", function (data) {\n\t\tvar li=\"\";\n    \t for(i=0;i<=data.length-1;i++){\n    \t \tli += '<div style=\"width:250px;height:250px;float:left;margin-left:10px\"><img src=\"https://raw.githubusercontent.com/MaxieLj/blog/master/photos/' + data[i] + '\"  style=\"width:100%; height:100%;float:left\"/></div>'\n                   ;\n    \t }\n       li+='<div style=\"clear:both\"></div>'\n    \t $('.instagram').append(li);   \t\n    });\n    \n}\ntest();\n\n\t\n</script>","source":"photo/index.md","raw":"title: 相册\nnoDate: 'true'\n---\n<link type=\"text/css\" href=\"/fancybox/jquery.fancybox.css\" rel=\"stylesheet\">\n<div class=\"instagram\"><section class=\"archives album\"><ul class=\"img-box-ul\"></ul></section></div>\n\t\n</div>\n<script src=\"/js/photo.js\"></script>\n<script src=\"/js/jquery-3.1.1.min.js\"></script>\n<script type=\"text/javascript\">\nfunction test() {\n\t$.getJSON(\"/photo/output.json\", function (data) {\n\t\tvar li=\"\";\n    \t for(i=0;i<=data.length-1;i++){\n    \t \tli += '<div style=\"width:250px;height:250px;float:left;margin-left:10px\"><img src=\"https://raw.githubusercontent.com/MaxieLj/blog/master/photos/' + data[i] + '\"  style=\"width:100%; height:100%;float:left\"/></div>'\n                   ;\n    \t }\n       li+='<div style=\"clear:both\"></div>'\n    \t $('.instagram').append(li);   \t\n    });\n    \n}\ntest();\n\n\t\n</script>","date":"2017-11-16T14:35:24.000Z","updated":"2016-12-19T13:39:50.000Z","path":"photo/index.html","comments":1,"layout":"page","_id":"cjkb4lzk5000ltrww1h9ij902","content":"<p><link type=\"text/css\" href=\"/fancybox/jquery.fancybox.css\" rel=\"stylesheet\"></p>\n<div class=\"instagram\"><section class=\"archives album\"><ul class=\"img-box-ul\"></ul></section></div>\n\n<p></p>\n<script src=\"/js/photo.js\"></script>\n<script src=\"/js/jquery-3.1.1.min.js\"></script>\n<script type=\"text/javascript\">\nfunction test() {\n    $.getJSON(\"/photo/output.json\", function (data) {\n        var li=\"\";\n         for(i=0;i<=data.length-1;i++){\n             li += '<div style=\"width:250px;height:250px;float:left;margin-left:10px\"><img src=\"https://raw.githubusercontent.com/MaxieLj/blog/master/photos/' + data[i] + '\"  style=\"width:100%; height:100%;float:left\"/></div>'\n                   ;\n         }\n       li+='<div style=\"clear:both\"></div>'\n         $('.instagram').append(li);       \n    });\n\n}\ntest();\n\n\n</script>","site":{"data":{}},"excerpt":"","more":"<p><link type=\"text/css\" href=\"/fancybox/jquery.fancybox.css\" rel=\"stylesheet\"></p>\n<div class=\"instagram\"><section class=\"archives album\"><ul class=\"img-box-ul\"></ul></section></div>\n\n<p></p>\n<script src=\"/js/photo.js\"></script>\n<script src=\"/js/jquery-3.1.1.min.js\"></script>\n<script type=\"text/javascript\">\nfunction test() {\n    $.getJSON(\"/photo/output.json\", function (data) {\n        var li=\"\";\n         for(i=0;i<=data.length-1;i++){\n             li += '<div style=\"width:250px;height:250px;float:left;margin-left:10px\"><img src=\"https://raw.githubusercontent.com/MaxieLj/blog/master/photos/' + data[i] + '\"  style=\"width:100%; height:100%;float:left\"/></div>'\n                   ;\n         }\n       li+='<div style=\"clear:both\"></div>'\n         $('.instagram').append(li);       \n    });\n\n}\ntest();\n\n\n</script>"},{"_content":"[\n\t\"219305422169140726.jpg\",\n\t\"326320136918309177.jpg\",\n\t\"832021159053859552.jpg\",\n\t\"844103819611894943.jpg\"\n]","source":"photo/output.json","raw":"[\n\t\"219305422169140726.jpg\",\n\t\"326320136918309177.jpg\",\n\t\"832021159053859552.jpg\",\n\t\"844103819611894943.jpg\"\n]","date":"2017-11-16T14:35:24.000Z","updated":"2016-12-19T13:23:00.000Z","path":"photo/output.json","layout":"false","title":"","comments":1,"_id":"cjkb4lzk6000mtrwwcqdnkdt2","content":"[\"219305422169140726.jpg\",\"326320136918309177.jpg\",\"832021159053859552.jpg\",\"844103819611894943.jpg\"]","site":{"data":{}},"excerpt":"","more":"[\"219305422169140726.jpg\",\"326320136918309177.jpg\",\"832021159053859552.jpg\",\"844103819611894943.jpg\"]"},{"_content":"\"use strict\";\n    const fs = require(\"fs\");\n    const path = \"../../photos\";\n\n    fs.readdir(path, function (err, files) {\n        if (err) {\n            return;\n        }\n        let arr = [];\n        (function iterator(index) {\n            if (index == files.length) {\n                fs.writeFile(\"output.json\", JSON.stringify(arr, null, \"\\t\"));\n                return;\n            }\n\n            fs.stat(path + \"/\" + files[index], function (err, stats) {\n                if (err) {\n                    return;\n                }\n                if (stats.isFile()) {\n                    arr.push(files[index]);\n                }\n                iterator(index + 1);\n            })\n        }(0));\n    });","source":"photo/tool.js","raw":"\"use strict\";\n    const fs = require(\"fs\");\n    const path = \"../../photos\";\n\n    fs.readdir(path, function (err, files) {\n        if (err) {\n            return;\n        }\n        let arr = [];\n        (function iterator(index) {\n            if (index == files.length) {\n                fs.writeFile(\"output.json\", JSON.stringify(arr, null, \"\\t\"));\n                return;\n            }\n\n            fs.stat(path + \"/\" + files[index], function (err, stats) {\n                if (err) {\n                    return;\n                }\n                if (stats.isFile()) {\n                    arr.push(files[index]);\n                }\n                iterator(index + 1);\n            })\n        }(0));\n    });","date":"2017-11-16T14:35:24.000Z","updated":"2016-12-18T08:29:40.000Z","path":"photo/tool.js","layout":"false","title":"","comments":1,"_id":"cjkb4lzk7000ntrwwgmvru3yp","content":"\"use strict\";\n    const fs = require(\"fs\");\n    const path = \"../../photos\";\n\n    fs.readdir(path, function (err, files) {\n        if (err) {\n            return;\n        }\n        let arr = [];\n        (function iterator(index) {\n            if (index == files.length) {\n                fs.writeFile(\"output.json\", JSON.stringify(arr, null, \"\\t\"));\n                return;\n            }\n\n            fs.stat(path + \"/\" + files[index], function (err, stats) {\n                if (err) {\n                    return;\n                }\n                if (stats.isFile()) {\n                    arr.push(files[index]);\n                }\n                iterator(index + 1);\n            })\n        }(0));\n    });","site":{"data":{}},"excerpt":"","more":"\"use strict\";\n    const fs = require(\"fs\");\n    const path = \"../../photos\";\n\n    fs.readdir(path, function (err, files) {\n        if (err) {\n            return;\n        }\n        let arr = [];\n        (function iterator(index) {\n            if (index == files.length) {\n                fs.writeFile(\"output.json\", JSON.stringify(arr, null, \"\\t\"));\n                return;\n            }\n\n            fs.stat(path + \"/\" + files[index], function (err, stats) {\n                if (err) {\n                    return;\n                }\n                if (stats.isFile()) {\n                    arr.push(files[index]);\n                }\n                iterator(index + 1);\n            })\n        }(0));\n    });"}],"Post":[{"title":"Laravel学习笔记三控制器","date":"2016-02-16T13:26:25.000Z","_content":"\n\n\n标签（空格分隔）： Laravel\n\n---\n\n关于laravel我们学习了如何配置laravel、以及路由。接下来让然是至关重要的控制器了。\n在MVC框架中，C是一个很重要的环节。用来处理我们的数据逻辑。\n\n我们之前在学习路由是后，是给Route::get()第二个参数一个闭包函数。当然能处理一些数据逻辑，但是如果我们所有的数据逻辑都放在路由文件，那么我们路由文件将会特别臃肿，而且我们的代码耦合度会特别高。这也就回到php面向过程的时代，这不是我们所想要的。\n\n在我们的面向对象的思维中，是把不同功能的代码封装成一个一个类，各自处理自己流水线上的数据。所以我们要通过路由把必要的参数传给我们的控制器去处理。\n\n在这里看到一个小插曲，Laravel官方文档说在上线前使用`php artisan route:cache`会让路由速度快上一百倍，我不知道这是不是吹牛逼。废话不多说我们开始我们的控制器学习吧。\n\n###控制器到路由###\n\n 在第一步我们需要把访问到路由的请求转到控制器。在Laravel中使用下边代码即可：\n ```Route::get('user/{id}', 'UserController@show');```\n  我们可以把客户的请求跳转到 App/Http/Controller下的UserController的show方法。\n  \n  在这里laravel给我们提供很好的工具让我们来创建控制器。使用`php artisan make:controller NameController` 。默认会出现App/Http/Controller 路径下。并且还有一些级基础代码。\n```<?php\n\nnamespace App\\Http\\Controllers;\n\nuse Illuminate\\Http\\Request;\nuse App\\Http\\Controllers\\Controller;\n\nclass NameController extends Controller\n{\n    //\n}\n```\n\n###传递参数到控制器###\n\n我们看到在自动生成代码中我们看到引入了`Request` 类。这个类要讲起来其实可以单独讲，但是我们学到控制器就稍微讲一下，不然没法传递参数。如下\n```\n public function index(Request $request){\n    \t$name = $request->input('name');\n\n    }\n```\n用该方法可以获取到我们想要的参数。\n\n\n","source":"_posts/Laravel学习笔记三控制器.md","raw":"---\ntitle: 'Laravel学习笔记三控制器'\ndate: 2016-02-16 21:26:25\ntags:\n---\n\n\n\n标签（空格分隔）： Laravel\n\n---\n\n关于laravel我们学习了如何配置laravel、以及路由。接下来让然是至关重要的控制器了。\n在MVC框架中，C是一个很重要的环节。用来处理我们的数据逻辑。\n\n我们之前在学习路由是后，是给Route::get()第二个参数一个闭包函数。当然能处理一些数据逻辑，但是如果我们所有的数据逻辑都放在路由文件，那么我们路由文件将会特别臃肿，而且我们的代码耦合度会特别高。这也就回到php面向过程的时代，这不是我们所想要的。\n\n在我们的面向对象的思维中，是把不同功能的代码封装成一个一个类，各自处理自己流水线上的数据。所以我们要通过路由把必要的参数传给我们的控制器去处理。\n\n在这里看到一个小插曲，Laravel官方文档说在上线前使用`php artisan route:cache`会让路由速度快上一百倍，我不知道这是不是吹牛逼。废话不多说我们开始我们的控制器学习吧。\n\n###控制器到路由###\n\n 在第一步我们需要把访问到路由的请求转到控制器。在Laravel中使用下边代码即可：\n ```Route::get('user/{id}', 'UserController@show');```\n  我们可以把客户的请求跳转到 App/Http/Controller下的UserController的show方法。\n  \n  在这里laravel给我们提供很好的工具让我们来创建控制器。使用`php artisan make:controller NameController` 。默认会出现App/Http/Controller 路径下。并且还有一些级基础代码。\n```<?php\n\nnamespace App\\Http\\Controllers;\n\nuse Illuminate\\Http\\Request;\nuse App\\Http\\Controllers\\Controller;\n\nclass NameController extends Controller\n{\n    //\n}\n```\n\n###传递参数到控制器###\n\n我们看到在自动生成代码中我们看到引入了`Request` 类。这个类要讲起来其实可以单独讲，但是我们学到控制器就稍微讲一下，不然没法传递参数。如下\n```\n public function index(Request $request){\n    \t$name = $request->input('name');\n\n    }\n```\n用该方法可以获取到我们想要的参数。\n\n\n","slug":"Laravel学习笔记三控制器","published":1,"updated":"2018-06-19T10:35:54.664Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkb4lzja0000trwwl9259lxn","content":"<p>标签（空格分隔）： Laravel</p>\n<hr>\n<p>关于laravel我们学习了如何配置laravel、以及路由。接下来让然是至关重要的控制器了。<br>在MVC框架中，C是一个很重要的环节。用来处理我们的数据逻辑。</p>\n<p>我们之前在学习路由是后，是给Route::get()第二个参数一个闭包函数。当然能处理一些数据逻辑，但是如果我们所有的数据逻辑都放在路由文件，那么我们路由文件将会特别臃肿，而且我们的代码耦合度会特别高。这也就回到php面向过程的时代，这不是我们所想要的。</p>\n<p>在我们的面向对象的思维中，是把不同功能的代码封装成一个一个类，各自处理自己流水线上的数据。所以我们要通过路由把必要的参数传给我们的控制器去处理。</p>\n<p>在这里看到一个小插曲，Laravel官方文档说在上线前使用<code>php artisan route:cache</code>会让路由速度快上一百倍，我不知道这是不是吹牛逼。废话不多说我们开始我们的控制器学习吧。</p>\n<p>###控制器到路由###</p>\n<p> 在第一步我们需要把访问到路由的请求转到控制器。在Laravel中使用下边代码即可：<br> <figure class=\"highlight plain\"><figcaption><span>'UserController@show');```</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">  我们可以把客户的请求跳转到 App/Http/Controller下的UserController的show方法。</div><div class=\"line\">  </div><div class=\"line\">  在这里laravel给我们提供很好的工具让我们来创建控制器。使用`php artisan make:controller NameController` 。默认会出现App/Http/Controller 路径下。并且还有一些级基础代码。</div><div class=\"line\">```&lt;?php</div><div class=\"line\"></div><div class=\"line\">namespace App\\Http\\Controllers;</div><div class=\"line\"></div><div class=\"line\">use Illuminate\\Http\\Request;</div><div class=\"line\">use App\\Http\\Controllers\\Controller;</div><div class=\"line\"></div><div class=\"line\">class NameController extends Controller</div><div class=\"line\">&#123;</div><div class=\"line\">    //</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>###传递参数到控制器###</p>\n<p>我们看到在自动生成代码中我们看到引入了<code>Request</code> 类。这个类要讲起来其实可以单独讲，但是我们学到控制器就稍微讲一下，不然没法传递参数。如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">public function index(Request $request)&#123;</div><div class=\"line\">   \t$name = $request-&gt;input(&apos;name&apos;);</div><div class=\"line\"></div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p>用该方法可以获取到我们想要的参数。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>标签（空格分隔）： Laravel</p>\n<hr>\n<p>关于laravel我们学习了如何配置laravel、以及路由。接下来让然是至关重要的控制器了。<br>在MVC框架中，C是一个很重要的环节。用来处理我们的数据逻辑。</p>\n<p>我们之前在学习路由是后，是给Route::get()第二个参数一个闭包函数。当然能处理一些数据逻辑，但是如果我们所有的数据逻辑都放在路由文件，那么我们路由文件将会特别臃肿，而且我们的代码耦合度会特别高。这也就回到php面向过程的时代，这不是我们所想要的。</p>\n<p>在我们的面向对象的思维中，是把不同功能的代码封装成一个一个类，各自处理自己流水线上的数据。所以我们要通过路由把必要的参数传给我们的控制器去处理。</p>\n<p>在这里看到一个小插曲，Laravel官方文档说在上线前使用<code>php artisan route:cache</code>会让路由速度快上一百倍，我不知道这是不是吹牛逼。废话不多说我们开始我们的控制器学习吧。</p>\n<p>###控制器到路由###</p>\n<p> 在第一步我们需要把访问到路由的请求转到控制器。在Laravel中使用下边代码即可：<br> <figure class=\"highlight plain\"><figcaption><span>'UserController@show');```</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">  我们可以把客户的请求跳转到 App/Http/Controller下的UserController的show方法。</div><div class=\"line\">  </div><div class=\"line\">  在这里laravel给我们提供很好的工具让我们来创建控制器。使用`php artisan make:controller NameController` 。默认会出现App/Http/Controller 路径下。并且还有一些级基础代码。</div><div class=\"line\">```&lt;?php</div><div class=\"line\"></div><div class=\"line\">namespace App\\Http\\Controllers;</div><div class=\"line\"></div><div class=\"line\">use Illuminate\\Http\\Request;</div><div class=\"line\">use App\\Http\\Controllers\\Controller;</div><div class=\"line\"></div><div class=\"line\">class NameController extends Controller</div><div class=\"line\">&#123;</div><div class=\"line\">    //</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>###传递参数到控制器###</p>\n<p>我们看到在自动生成代码中我们看到引入了<code>Request</code> 类。这个类要讲起来其实可以单独讲，但是我们学到控制器就稍微讲一下，不然没法传递参数。如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">public function index(Request $request)&#123;</div><div class=\"line\">   \t$name = $request-&gt;input(&apos;name&apos;);</div><div class=\"line\"></div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p>用该方法可以获取到我们想要的参数。</p>\n"},{"title":"PHPExcel","date":"2017-10-30T02:42:03.000Z","_content":"# PHPEXcel\n----\n## 背景\n在工作中我们肯定会遇到由于后端管理系统不完善，而导致运营同学无法从管理系统获取想要的数据。亦或程序设计之初没有考虑到完善，导致一些必要的数据没有录入，希望后续补充批量导入。在这个时候我们就需要获取从数据批量导出数据或者导入数据，而无论导入还是导出数据，我们都希望是Excel格式。\n\n## 根据Execel生成sql\n\n\n1.PHPExcel\n\n准备：我们需要从github获取PHPExcel工具包。地址 `https://github.com/PHPOffice/PHPExcel` \n\n打开PHPExcel文件夹，看下代码结构。我们需要的主要代码在`Classes`文件下，我们只需要引入`PHPExcel.php`即可。\n\n代码实现\n```php\ninclude './code/web_code/PHPExcel/Classes/PHPExcel.php';//引入必要的第三方依赖\n$inputFileType = 'Excel2007';//设置Excel的版本\n$inputFileName = './targe.xlsx';// 需要导入文件地址\n\n\n$currentsheet = $objPHPExcel->getSheet(0); //选择Excel页\n$maxColumn = $currentsheet->getHighestColumn(); //获取当前页的最大列数\n$maxRow = $currentsheet->getHighestRow(); //获取当前页的最大行数\n\n//循环拼接sql\nfor ($i=2; $i< $maxRow; $i++) { \n    //过滤条件\n     if(is_null($currentsheet->getCell('J'.$i)->getValue())||$currentsheet->getCell('J'.$i)->getValue()== '已退款' || $currentsheet->getCell('J'.$i)->getValue() == '待退款' || $currentsheet->getCell('J'.$i)->getValue() == '已经申请退款' || $currentsheet->getCell('J'.$i)->getValue() == '退了' ||$currentsheet->getCell('J'.$i)->getValue() == '没有电话' || $currentsheet->getCell('J'.$i)->getValue() == '0') {\n\n        continue;\n     }\n     //过滤条件\n     if(!is_numeric($currentsheet->getCell('J'.$i)->getValue())||$currentsheet->getCell('J'.$i)->getValue() == '0' || empty($currentsheet->getCell('J'.$i)->getValue()) || $currentsheet->getCell('J'.$i)->getValue() == '') {\n        continue;\n     }\n\n    $sql_bd_name .= ' WHEN '.$currentsheet->getCell('A'.$i)->getValue().' THEN '.$currentsheet->getCell('J'.$i)->getValue();\n    $sql_bd_name .= ','.$currentsheet->getCell('A'.$i)->getValue();\n    $res +=1;\n}\n\n//输入，当然这里无论我们用fopen或者其他的输入当属都可以，这里我把结果打到了控制台。\necho $sql_bd_name;\necho $res \n\n```\n\n\n我们生成的sql是`WHEN`  `THEN`的样式，完整语句应该是 update tablename set seller_jn_activity CASE id\nWHEN 1 TEHN 2 \nEND,\nbd_jn_activity CASE id\nwhen 2 THEN 3\nEND\nWHERE in (1,2,3)\n\n发现数据清洗其实是一件很麻烦的事。","source":"_posts/PHPExecel.md","raw":"---\ntitle: PHPExcel\ndate: 2017-10-30 10:42:03\ntags:\n---\n# PHPEXcel\n----\n## 背景\n在工作中我们肯定会遇到由于后端管理系统不完善，而导致运营同学无法从管理系统获取想要的数据。亦或程序设计之初没有考虑到完善，导致一些必要的数据没有录入，希望后续补充批量导入。在这个时候我们就需要获取从数据批量导出数据或者导入数据，而无论导入还是导出数据，我们都希望是Excel格式。\n\n## 根据Execel生成sql\n\n\n1.PHPExcel\n\n准备：我们需要从github获取PHPExcel工具包。地址 `https://github.com/PHPOffice/PHPExcel` \n\n打开PHPExcel文件夹，看下代码结构。我们需要的主要代码在`Classes`文件下，我们只需要引入`PHPExcel.php`即可。\n\n代码实现\n```php\ninclude './code/web_code/PHPExcel/Classes/PHPExcel.php';//引入必要的第三方依赖\n$inputFileType = 'Excel2007';//设置Excel的版本\n$inputFileName = './targe.xlsx';// 需要导入文件地址\n\n\n$currentsheet = $objPHPExcel->getSheet(0); //选择Excel页\n$maxColumn = $currentsheet->getHighestColumn(); //获取当前页的最大列数\n$maxRow = $currentsheet->getHighestRow(); //获取当前页的最大行数\n\n//循环拼接sql\nfor ($i=2; $i< $maxRow; $i++) { \n    //过滤条件\n     if(is_null($currentsheet->getCell('J'.$i)->getValue())||$currentsheet->getCell('J'.$i)->getValue()== '已退款' || $currentsheet->getCell('J'.$i)->getValue() == '待退款' || $currentsheet->getCell('J'.$i)->getValue() == '已经申请退款' || $currentsheet->getCell('J'.$i)->getValue() == '退了' ||$currentsheet->getCell('J'.$i)->getValue() == '没有电话' || $currentsheet->getCell('J'.$i)->getValue() == '0') {\n\n        continue;\n     }\n     //过滤条件\n     if(!is_numeric($currentsheet->getCell('J'.$i)->getValue())||$currentsheet->getCell('J'.$i)->getValue() == '0' || empty($currentsheet->getCell('J'.$i)->getValue()) || $currentsheet->getCell('J'.$i)->getValue() == '') {\n        continue;\n     }\n\n    $sql_bd_name .= ' WHEN '.$currentsheet->getCell('A'.$i)->getValue().' THEN '.$currentsheet->getCell('J'.$i)->getValue();\n    $sql_bd_name .= ','.$currentsheet->getCell('A'.$i)->getValue();\n    $res +=1;\n}\n\n//输入，当然这里无论我们用fopen或者其他的输入当属都可以，这里我把结果打到了控制台。\necho $sql_bd_name;\necho $res \n\n```\n\n\n我们生成的sql是`WHEN`  `THEN`的样式，完整语句应该是 update tablename set seller_jn_activity CASE id\nWHEN 1 TEHN 2 \nEND,\nbd_jn_activity CASE id\nwhen 2 THEN 3\nEND\nWHERE in (1,2,3)\n\n发现数据清洗其实是一件很麻烦的事。","slug":"PHPExecel","published":1,"updated":"2018-06-19T10:36:01.359Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkb4lzje0001trwwxnabca3i","content":"<h1 id=\"PHPEXcel\"><a href=\"#PHPEXcel\" class=\"headerlink\" title=\"PHPEXcel\"></a>PHPEXcel</h1><hr>\n<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>在工作中我们肯定会遇到由于后端管理系统不完善，而导致运营同学无法从管理系统获取想要的数据。亦或程序设计之初没有考虑到完善，导致一些必要的数据没有录入，希望后续补充批量导入。在这个时候我们就需要获取从数据批量导出数据或者导入数据，而无论导入还是导出数据，我们都希望是Excel格式。</p>\n<h2 id=\"根据Execel生成sql\"><a href=\"#根据Execel生成sql\" class=\"headerlink\" title=\"根据Execel生成sql\"></a>根据Execel生成sql</h2><p>1.PHPExcel</p>\n<p>准备：我们需要从github获取PHPExcel工具包。地址 <code>https://github.com/PHPOffice/PHPExcel</code> </p>\n<p>打开PHPExcel文件夹，看下代码结构。我们需要的主要代码在<code>Classes</code>文件下，我们只需要引入<code>PHPExcel.php</code>即可。</p>\n<p>代码实现<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">include</span> <span class=\"string\">'./code/web_code/PHPExcel/Classes/PHPExcel.php'</span>;<span class=\"comment\">//引入必要的第三方依赖</span></div><div class=\"line\">$inputFileType = <span class=\"string\">'Excel2007'</span>;<span class=\"comment\">//设置Excel的版本</span></div><div class=\"line\">$inputFileName = <span class=\"string\">'./targe.xlsx'</span>;<span class=\"comment\">// 需要导入文件地址</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">$currentsheet = $objPHPExcel-&gt;getSheet(<span class=\"number\">0</span>); <span class=\"comment\">//选择Excel页</span></div><div class=\"line\">$maxColumn = $currentsheet-&gt;getHighestColumn(); <span class=\"comment\">//获取当前页的最大列数</span></div><div class=\"line\">$maxRow = $currentsheet-&gt;getHighestRow(); <span class=\"comment\">//获取当前页的最大行数</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//循环拼接sql</span></div><div class=\"line\"><span class=\"keyword\">for</span> ($i=<span class=\"number\">2</span>; $i&lt; $maxRow; $i++) &#123; </div><div class=\"line\">    <span class=\"comment\">//过滤条件</span></div><div class=\"line\">     <span class=\"keyword\">if</span>(is_null($currentsheet-&gt;getCell(<span class=\"string\">'J'</span>.$i)-&gt;getValue())||$currentsheet-&gt;getCell(<span class=\"string\">'J'</span>.$i)-&gt;getValue()== <span class=\"string\">'已退款'</span> || $currentsheet-&gt;getCell(<span class=\"string\">'J'</span>.$i)-&gt;getValue() == <span class=\"string\">'待退款'</span> || $currentsheet-&gt;getCell(<span class=\"string\">'J'</span>.$i)-&gt;getValue() == <span class=\"string\">'已经申请退款'</span> || $currentsheet-&gt;getCell(<span class=\"string\">'J'</span>.$i)-&gt;getValue() == <span class=\"string\">'退了'</span> ||$currentsheet-&gt;getCell(<span class=\"string\">'J'</span>.$i)-&gt;getValue() == <span class=\"string\">'没有电话'</span> || $currentsheet-&gt;getCell(<span class=\"string\">'J'</span>.$i)-&gt;getValue() == <span class=\"string\">'0'</span>) &#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">continue</span>;</div><div class=\"line\">     &#125;</div><div class=\"line\">     <span class=\"comment\">//过滤条件</span></div><div class=\"line\">     <span class=\"keyword\">if</span>(!is_numeric($currentsheet-&gt;getCell(<span class=\"string\">'J'</span>.$i)-&gt;getValue())||$currentsheet-&gt;getCell(<span class=\"string\">'J'</span>.$i)-&gt;getValue() == <span class=\"string\">'0'</span> || <span class=\"keyword\">empty</span>($currentsheet-&gt;getCell(<span class=\"string\">'J'</span>.$i)-&gt;getValue()) || $currentsheet-&gt;getCell(<span class=\"string\">'J'</span>.$i)-&gt;getValue() == <span class=\"string\">''</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">continue</span>;</div><div class=\"line\">     &#125;</div><div class=\"line\"></div><div class=\"line\">    $sql_bd_name .= <span class=\"string\">' WHEN '</span>.$currentsheet-&gt;getCell(<span class=\"string\">'A'</span>.$i)-&gt;getValue().<span class=\"string\">' THEN '</span>.$currentsheet-&gt;getCell(<span class=\"string\">'J'</span>.$i)-&gt;getValue();</div><div class=\"line\">    $sql_bd_name .= <span class=\"string\">','</span>.$currentsheet-&gt;getCell(<span class=\"string\">'A'</span>.$i)-&gt;getValue();</div><div class=\"line\">    $res +=<span class=\"number\">1</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//输入，当然这里无论我们用fopen或者其他的输入当属都可以，这里我把结果打到了控制台。</span></div><div class=\"line\"><span class=\"keyword\">echo</span> $sql_bd_name;</div><div class=\"line\"><span class=\"keyword\">echo</span> $res</div></pre></td></tr></table></figure></p>\n<p>我们生成的sql是<code>WHEN</code>  <code>THEN</code>的样式，完整语句应该是 update tablename set seller_jn_activity CASE id<br>WHEN 1 TEHN 2<br>END,<br>bd_jn_activity CASE id<br>when 2 THEN 3<br>END<br>WHERE in (1,2,3)</p>\n<p>发现数据清洗其实是一件很麻烦的事。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"PHPEXcel\"><a href=\"#PHPEXcel\" class=\"headerlink\" title=\"PHPEXcel\"></a>PHPEXcel</h1><hr>\n<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>在工作中我们肯定会遇到由于后端管理系统不完善，而导致运营同学无法从管理系统获取想要的数据。亦或程序设计之初没有考虑到完善，导致一些必要的数据没有录入，希望后续补充批量导入。在这个时候我们就需要获取从数据批量导出数据或者导入数据，而无论导入还是导出数据，我们都希望是Excel格式。</p>\n<h2 id=\"根据Execel生成sql\"><a href=\"#根据Execel生成sql\" class=\"headerlink\" title=\"根据Execel生成sql\"></a>根据Execel生成sql</h2><p>1.PHPExcel</p>\n<p>准备：我们需要从github获取PHPExcel工具包。地址 <code>https://github.com/PHPOffice/PHPExcel</code> </p>\n<p>打开PHPExcel文件夹，看下代码结构。我们需要的主要代码在<code>Classes</code>文件下，我们只需要引入<code>PHPExcel.php</code>即可。</p>\n<p>代码实现<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">include</span> <span class=\"string\">'./code/web_code/PHPExcel/Classes/PHPExcel.php'</span>;<span class=\"comment\">//引入必要的第三方依赖</span></div><div class=\"line\">$inputFileType = <span class=\"string\">'Excel2007'</span>;<span class=\"comment\">//设置Excel的版本</span></div><div class=\"line\">$inputFileName = <span class=\"string\">'./targe.xlsx'</span>;<span class=\"comment\">// 需要导入文件地址</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">$currentsheet = $objPHPExcel-&gt;getSheet(<span class=\"number\">0</span>); <span class=\"comment\">//选择Excel页</span></div><div class=\"line\">$maxColumn = $currentsheet-&gt;getHighestColumn(); <span class=\"comment\">//获取当前页的最大列数</span></div><div class=\"line\">$maxRow = $currentsheet-&gt;getHighestRow(); <span class=\"comment\">//获取当前页的最大行数</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//循环拼接sql</span></div><div class=\"line\"><span class=\"keyword\">for</span> ($i=<span class=\"number\">2</span>; $i&lt; $maxRow; $i++) &#123; </div><div class=\"line\">    <span class=\"comment\">//过滤条件</span></div><div class=\"line\">     <span class=\"keyword\">if</span>(is_null($currentsheet-&gt;getCell(<span class=\"string\">'J'</span>.$i)-&gt;getValue())||$currentsheet-&gt;getCell(<span class=\"string\">'J'</span>.$i)-&gt;getValue()== <span class=\"string\">'已退款'</span> || $currentsheet-&gt;getCell(<span class=\"string\">'J'</span>.$i)-&gt;getValue() == <span class=\"string\">'待退款'</span> || $currentsheet-&gt;getCell(<span class=\"string\">'J'</span>.$i)-&gt;getValue() == <span class=\"string\">'已经申请退款'</span> || $currentsheet-&gt;getCell(<span class=\"string\">'J'</span>.$i)-&gt;getValue() == <span class=\"string\">'退了'</span> ||$currentsheet-&gt;getCell(<span class=\"string\">'J'</span>.$i)-&gt;getValue() == <span class=\"string\">'没有电话'</span> || $currentsheet-&gt;getCell(<span class=\"string\">'J'</span>.$i)-&gt;getValue() == <span class=\"string\">'0'</span>) &#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">continue</span>;</div><div class=\"line\">     &#125;</div><div class=\"line\">     <span class=\"comment\">//过滤条件</span></div><div class=\"line\">     <span class=\"keyword\">if</span>(!is_numeric($currentsheet-&gt;getCell(<span class=\"string\">'J'</span>.$i)-&gt;getValue())||$currentsheet-&gt;getCell(<span class=\"string\">'J'</span>.$i)-&gt;getValue() == <span class=\"string\">'0'</span> || <span class=\"keyword\">empty</span>($currentsheet-&gt;getCell(<span class=\"string\">'J'</span>.$i)-&gt;getValue()) || $currentsheet-&gt;getCell(<span class=\"string\">'J'</span>.$i)-&gt;getValue() == <span class=\"string\">''</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">continue</span>;</div><div class=\"line\">     &#125;</div><div class=\"line\"></div><div class=\"line\">    $sql_bd_name .= <span class=\"string\">' WHEN '</span>.$currentsheet-&gt;getCell(<span class=\"string\">'A'</span>.$i)-&gt;getValue().<span class=\"string\">' THEN '</span>.$currentsheet-&gt;getCell(<span class=\"string\">'J'</span>.$i)-&gt;getValue();</div><div class=\"line\">    $sql_bd_name .= <span class=\"string\">','</span>.$currentsheet-&gt;getCell(<span class=\"string\">'A'</span>.$i)-&gt;getValue();</div><div class=\"line\">    $res +=<span class=\"number\">1</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//输入，当然这里无论我们用fopen或者其他的输入当属都可以，这里我把结果打到了控制台。</span></div><div class=\"line\"><span class=\"keyword\">echo</span> $sql_bd_name;</div><div class=\"line\"><span class=\"keyword\">echo</span> $res</div></pre></td></tr></table></figure></p>\n<p>我们生成的sql是<code>WHEN</code>  <code>THEN</code>的样式，完整语句应该是 update tablename set seller_jn_activity CASE id<br>WHEN 1 TEHN 2<br>END,<br>bd_jn_activity CASE id<br>when 2 THEN 3<br>END<br>WHERE in (1,2,3)</p>\n<p>发现数据清洗其实是一件很麻烦的事。</p>\n"},{"layout":"git","title":"github","date":"2015-06-26T14:04:09.000Z","_content":"#关于Git的使用  \n------\n\n## Git的安装和使用 ##\n 准备工作：\n> * 下载git 客户端 [链接地址][1]\n\n下载完毕后，安装一路一下一步。\n安装完成之后我们开始使用Git\n使用前我们需要告诉Git，我们是谁。所以需要配置一些信息，来确定我们的身份。\n\n ```\n git config –global user.name “用户名”\n git config –global user.email “邮箱”\n ```\n第一条命令用来告诉 git 我们的名字（以后链接github）\n第二条命令用来告诉git 我们的邮箱\n\n到此我们就可以使用Git了\n\n## 链接github ##\n如果我们希望把自己的项目托管在github我们就需要再做一些配置\n\n首先我们需要生成ssh,使用以下命令\n```\nssh-keygen –t rsa –C\n```\n\n 1. 然后他提示的默认路径生成一些文件，或者你自己配置路径。 在生成过程中会让你输入密码，可以不输入，一路回车\n    生成完毕后，会在你选择路径下生成两个文件 一个是 .rsa 一个是 .pub 我们这里只需要.pub里的内容 复制里边的内容\n 2. 接下来我们需要把文件里的key添加到我们的github账号里。 首先我们登陆我们的github账号。 然后在设置里 NEW SSH KEY 添加描述然后把我们的key复制到里边即可。\n\n不过在提交之前我们还需要做一些配置来确定我们需要把当前库的代码推送到github账号的哪个库里\n```\ngit remote add origin git@github.com:aaa/xxx\n```\n在上边的配置的命令中，aaa表示的我们的github账号。xxx使我们的库文件。\n以后就可以使用git来进行版本管理和推送到github里了。\n正常操作代码\n```\ngit status\ngit add .\ngit commit -a 'message'\ngit push\n```\n提交完毕。\n\n如果我们需要在其他电脑上使用我们托管的代码，我们需要使用\n```\ngit pull\n\n```\n或者\n```\ngit colne 'address'\n```\n来从github上获取我们所需要的代码\n\n如果在配置过程中出现错误，按照提示的代码解决即可。\n当然在此如果我们直接使用了\n```\ngit commit -a\n```\n会弹出来vim窗口，在这里写一些vim的命令\n在非insert状态下我们使用ctrl+d来批量选择#，然后按d删除\n\n在飞插入模式写:wq 保存并推出\n  [1]: https://git-scm.com/download/win","source":"_posts/github.md","raw":"layout: git\ntitle: github\ndate: 2015-06-26 22:04:09\ntags:\n---\n#关于Git的使用  \n------\n\n## Git的安装和使用 ##\n 准备工作：\n> * 下载git 客户端 [链接地址][1]\n\n下载完毕后，安装一路一下一步。\n安装完成之后我们开始使用Git\n使用前我们需要告诉Git，我们是谁。所以需要配置一些信息，来确定我们的身份。\n\n ```\n git config –global user.name “用户名”\n git config –global user.email “邮箱”\n ```\n第一条命令用来告诉 git 我们的名字（以后链接github）\n第二条命令用来告诉git 我们的邮箱\n\n到此我们就可以使用Git了\n\n## 链接github ##\n如果我们希望把自己的项目托管在github我们就需要再做一些配置\n\n首先我们需要生成ssh,使用以下命令\n```\nssh-keygen –t rsa –C\n```\n\n 1. 然后他提示的默认路径生成一些文件，或者你自己配置路径。 在生成过程中会让你输入密码，可以不输入，一路回车\n    生成完毕后，会在你选择路径下生成两个文件 一个是 .rsa 一个是 .pub 我们这里只需要.pub里的内容 复制里边的内容\n 2. 接下来我们需要把文件里的key添加到我们的github账号里。 首先我们登陆我们的github账号。 然后在设置里 NEW SSH KEY 添加描述然后把我们的key复制到里边即可。\n\n不过在提交之前我们还需要做一些配置来确定我们需要把当前库的代码推送到github账号的哪个库里\n```\ngit remote add origin git@github.com:aaa/xxx\n```\n在上边的配置的命令中，aaa表示的我们的github账号。xxx使我们的库文件。\n以后就可以使用git来进行版本管理和推送到github里了。\n正常操作代码\n```\ngit status\ngit add .\ngit commit -a 'message'\ngit push\n```\n提交完毕。\n\n如果我们需要在其他电脑上使用我们托管的代码，我们需要使用\n```\ngit pull\n\n```\n或者\n```\ngit colne 'address'\n```\n来从github上获取我们所需要的代码\n\n如果在配置过程中出现错误，按照提示的代码解决即可。\n当然在此如果我们直接使用了\n```\ngit commit -a\n```\n会弹出来vim窗口，在这里写一些vim的命令\n在非insert状态下我们使用ctrl+d来批量选择#，然后按d删除\n\n在飞插入模式写:wq 保存并推出\n  [1]: https://git-scm.com/download/win","slug":"github","published":1,"updated":"2018-06-19T10:35:14.525Z","comments":1,"photos":[],"link":"","_id":"cjkb4lzjg0002trwwia5ukunw","content":"<h2 id=\"关于Git的使用\"><a href=\"#关于Git的使用\" class=\"headerlink\" title=\"#关于Git的使用  \"></a>#关于Git的使用  </h2><h2 id=\"Git的安装和使用\"><a href=\"#Git的安装和使用\" class=\"headerlink\" title=\"Git的安装和使用\"></a>Git的安装和使用</h2><p> 准备工作：</p>\n<blockquote>\n<ul>\n<li>下载git 客户端 <a href=\"https://git-scm.com/download/win\" target=\"_blank\" rel=\"noopener\">链接地址</a></li>\n</ul>\n</blockquote>\n<p>下载完毕后，安装一路一下一步。<br>安装完成之后我们开始使用Git<br>使用前我们需要告诉Git，我们是谁。所以需要配置一些信息，来确定我们的身份。</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git config –global user.name “用户名”</div><div class=\"line\">git config –global user.email “邮箱”</div></pre></td></tr></table></figure>\n<p>第一条命令用来告诉 git 我们的名字（以后链接github）<br>第二条命令用来告诉git 我们的邮箱</p>\n<p>到此我们就可以使用Git了</p>\n<h2 id=\"链接github\"><a href=\"#链接github\" class=\"headerlink\" title=\"链接github\"></a>链接github</h2><p>如果我们希望把自己的项目托管在github我们就需要再做一些配置</p>\n<p>首先我们需要生成ssh,使用以下命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ssh-keygen –t rsa –C</div></pre></td></tr></table></figure></p>\n<ol>\n<li>然后他提示的默认路径生成一些文件，或者你自己配置路径。 在生成过程中会让你输入密码，可以不输入，一路回车<br>生成完毕后，会在你选择路径下生成两个文件 一个是 .rsa 一个是 .pub 我们这里只需要.pub里的内容 复制里边的内容</li>\n<li>接下来我们需要把文件里的key添加到我们的github账号里。 首先我们登陆我们的github账号。 然后在设置里 NEW SSH KEY 添加描述然后把我们的key复制到里边即可。</li>\n</ol>\n<p>不过在提交之前我们还需要做一些配置来确定我们需要把当前库的代码推送到github账号的哪个库里<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git remote add origin git@github.com:aaa/xxx</div></pre></td></tr></table></figure></p>\n<p>在上边的配置的命令中，aaa表示的我们的github账号。xxx使我们的库文件。<br>以后就可以使用git来进行版本管理和推送到github里了。<br>正常操作代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">git status</div><div class=\"line\">git add .</div><div class=\"line\">git commit -a &apos;message&apos;</div><div class=\"line\">git push</div></pre></td></tr></table></figure></p>\n<p>提交完毕。</p>\n<p>如果我们需要在其他电脑上使用我们托管的代码，我们需要使用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git pull</div></pre></td></tr></table></figure></p>\n<p>或者<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git colne &apos;address&apos;</div></pre></td></tr></table></figure></p>\n<p>来从github上获取我们所需要的代码</p>\n<p>如果在配置过程中出现错误，按照提示的代码解决即可。<br>当然在此如果我们直接使用了<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git commit -a</div></pre></td></tr></table></figure></p>\n<p>会弹出来vim窗口，在这里写一些vim的命令<br>在非insert状态下我们使用ctrl+d来批量选择#，然后按d删除</p>\n<p>在飞插入模式写:wq 保存并推出</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"关于Git的使用\"><a href=\"#关于Git的使用\" class=\"headerlink\" title=\"#关于Git的使用  \"></a>#关于Git的使用  </h2><h2 id=\"Git的安装和使用\"><a href=\"#Git的安装和使用\" class=\"headerlink\" title=\"Git的安装和使用\"></a>Git的安装和使用</h2><p> 准备工作：</p>\n<blockquote>\n<ul>\n<li>下载git 客户端 <a href=\"https://git-scm.com/download/win\" target=\"_blank\" rel=\"noopener\">链接地址</a></li>\n</ul>\n</blockquote>\n<p>下载完毕后，安装一路一下一步。<br>安装完成之后我们开始使用Git<br>使用前我们需要告诉Git，我们是谁。所以需要配置一些信息，来确定我们的身份。</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git config –global user.name “用户名”</div><div class=\"line\">git config –global user.email “邮箱”</div></pre></td></tr></table></figure>\n<p>第一条命令用来告诉 git 我们的名字（以后链接github）<br>第二条命令用来告诉git 我们的邮箱</p>\n<p>到此我们就可以使用Git了</p>\n<h2 id=\"链接github\"><a href=\"#链接github\" class=\"headerlink\" title=\"链接github\"></a>链接github</h2><p>如果我们希望把自己的项目托管在github我们就需要再做一些配置</p>\n<p>首先我们需要生成ssh,使用以下命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ssh-keygen –t rsa –C</div></pre></td></tr></table></figure></p>\n<ol>\n<li>然后他提示的默认路径生成一些文件，或者你自己配置路径。 在生成过程中会让你输入密码，可以不输入，一路回车<br>生成完毕后，会在你选择路径下生成两个文件 一个是 .rsa 一个是 .pub 我们这里只需要.pub里的内容 复制里边的内容</li>\n<li>接下来我们需要把文件里的key添加到我们的github账号里。 首先我们登陆我们的github账号。 然后在设置里 NEW SSH KEY 添加描述然后把我们的key复制到里边即可。</li>\n</ol>\n<p>不过在提交之前我们还需要做一些配置来确定我们需要把当前库的代码推送到github账号的哪个库里<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git remote add origin git@github.com:aaa/xxx</div></pre></td></tr></table></figure></p>\n<p>在上边的配置的命令中，aaa表示的我们的github账号。xxx使我们的库文件。<br>以后就可以使用git来进行版本管理和推送到github里了。<br>正常操作代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">git status</div><div class=\"line\">git add .</div><div class=\"line\">git commit -a &apos;message&apos;</div><div class=\"line\">git push</div></pre></td></tr></table></figure></p>\n<p>提交完毕。</p>\n<p>如果我们需要在其他电脑上使用我们托管的代码，我们需要使用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git pull</div></pre></td></tr></table></figure></p>\n<p>或者<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git colne &apos;address&apos;</div></pre></td></tr></table></figure></p>\n<p>来从github上获取我们所需要的代码</p>\n<p>如果在配置过程中出现错误，按照提示的代码解决即可。<br>当然在此如果我们直接使用了<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git commit -a</div></pre></td></tr></table></figure></p>\n<p>会弹出来vim窗口，在这里写一些vim的命令<br>在非insert状态下我们使用ctrl+d来批量选择#，然后按d删除</p>\n<p>在飞插入模式写:wq 保存并推出</p>\n"},{"title":"hexo git github搭建博客","date":"2015-06-02T13:48:07.000Z","_content":"\n\n------\n\n在经搭建个人博客、csnd写博客、博客园写博客一系列折腾之后最终决定用 git github hexo 来搭建自己的个人博。我这样做的原因最主要就这么几点：\n\n> * github的大环境。（装逼）\n> * 免费稳定1\n> * 有一定的技术含量，我个人喜欢折腾。\n> * 为了保持使用git的习惯，顺带看看新的技术，跟上时代潮流。\n\n**\n\n开始\n--\n\n**\n需求环境\n 1. git [git下载地址][1]\n 2. node.js [node.js下载地址][2]\n\n两个安装都是一路下一步\n## 验证软件正确安装 ##\n\n    git --version\n    node -v\n    npm -v\n如果显示版本信息，怎安装成功。\n## 安装hexo ##\n在这里如果被墙的可以使用淘宝镜像cnpm 具体怎么操作可以自行百度，这里不多做解释。\n不过一般不会被墙，我使用npm。运行下边的命令安装hexo：\n被墙请使用命令：\n\n    npm install -g cnpm --registry=https://registry.npm.taobao.org\n\n以下是没有被墙的命令，被墙把npm换成cnpm即可。安装hexo\n\n    npm install hexo-cli -g\n\n安装完成后，验证是否安装成功。\n\n    hexo -v\n新建文件夹yourblog,输入命令\n\n    $ hexo init blog\n    $ cd blog\n新建博客\n\n    $ hexo new \"Hello Hexo\"\n生成静态页面\n\n    $ hexo generate\n运行服务\n\n    $ hexo server\n\n然后打开浏览器输入 localhost:4000 即可访问本地静态页面。\n\n\n## 接下来我们把本地静态页面PUSH到github ##\n\n - 首先你要有github账号。\n - 新建一个github.io的库\n - 设置本地github配置参数\n - 经本地静态页面push到github\n\n\n----------\n **github设置**\n\n新建github账号就不在这里陈述了，如果有同学不会使用git将代码push到github的话可以参考 [廖雪峰的官网][3]\n我们来直接进行第二不，创建一个github.io库。\n首先登陆我们的github账号点击`new repository`,然后输入youname.github.io\n**git设置**\n设置git配置信息\n\n\n    $ git config --global user.name \"你的用户名\"\n    $ git config --global user.email \"你的邮箱\"\n    \n\n**hexo 设置**\n    安装hexo git插件\n\n    npm install hexo-deployer-git --save\n\n然后打开博客根目录的_config.yml文件\n大致内容是这个样子的\n\n```\n# Hexo Configuration\n## Docs: https://hexo.io/docs/configuration.html\n## Source: https://github.com/hexojs/hexo/\n\n# Site\ntitle: 和女票抢可乐\nsubtitle:\ndescription:\nauthor: MaxieLj\nlanguage:\ntimezone:\n\n# URL\n## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'\nurl: http://yoursite.com\nroot: /\npermalink: :year/:month/:day/:title/\npermalink_defaults:\n\n# Directory\nsource_dir: source\npublic_dir: public\ntag_dir: tags\narchive_dir: archives\ncategory_dir: categories\ncode_dir: downloads/code\ni18n_dir: :lang\nskip_render:\n\n# Writing\nnew_post_name: :title.md # File name of new posts\ndefault_layout: post\ntitlecase: false # Transform title into titlecase\nexternal_link: true # Open external links in new tab\nfilename_case: 0\nrender_drafts: false\npost_asset_folder: false\nrelative_link: false\nfuture: true\nhighlight:\n  enable: true\n  line_number: true\n  auto_detect: false\n  tab_replace:\n\n# Category & Tag\ndefault_category: uncategorized\ncategory_map:\ntag_map:\n\n# Date / Time format\n## Hexo uses Moment.js to parse and display date\n## You can customize the date format as defined in\n## http://momentjs.com/docs/#/displaying/format/\ndate_format: YYYY-MM-DD\ntime_format: HH:mm:ss\n\n# Pagination\n## Set per_page to 0 to disable pagination\nper_page: 10\npagination_dir: page\n\n# Extensions\n## Plugins: https://hexo.io/plugins/\n## Themes: https://hexo.io/themes/\ntheme: yilia\n\n# Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n  repository: https://github.com/MaxieLj/MaxieLj.github.io.git\n  branch: master\n\njsonContent:\n  meta: false\n  pages: false\n  posts:\n    title: true\n    date: true\n    path: true\n    text: true\n    raw: false\n    content: false\n    slug: false\n    updated: false\n    comments: false\n    link: false\n    permalink: false\n    excerpt: false\n    categories: false\n    tags: true\n```\n我们只需要在尾部添加：\n```\ndeploy:\n  type: git\n  repository: https://github.com/MaxieLj/MaxieLj.github.io.git\n  branch: master\n```\n\n然后我们运行\n\n    $ hexo g\n生成静态文件\n然后推送到github\n\n    $ hexo d\n然后访问youname.github.io就可以看到生成的静态页面了\n当然我们一般是在本地调试好再用 hexo d推送到github\n\n\n  [1]: https://git-scm.com/downloads\n  [2]: https://nodejs.org/en/\n  [3]: http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000","source":"_posts/hexo-git-github搭建博客.md","raw":"---\ntitle: hexo git github搭建博客\ndate: 2015-06-02 21:48:07\ntags:\n---\n\n\n------\n\n在经搭建个人博客、csnd写博客、博客园写博客一系列折腾之后最终决定用 git github hexo 来搭建自己的个人博。我这样做的原因最主要就这么几点：\n\n> * github的大环境。（装逼）\n> * 免费稳定1\n> * 有一定的技术含量，我个人喜欢折腾。\n> * 为了保持使用git的习惯，顺带看看新的技术，跟上时代潮流。\n\n**\n\n开始\n--\n\n**\n需求环境\n 1. git [git下载地址][1]\n 2. node.js [node.js下载地址][2]\n\n两个安装都是一路下一步\n## 验证软件正确安装 ##\n\n    git --version\n    node -v\n    npm -v\n如果显示版本信息，怎安装成功。\n## 安装hexo ##\n在这里如果被墙的可以使用淘宝镜像cnpm 具体怎么操作可以自行百度，这里不多做解释。\n不过一般不会被墙，我使用npm。运行下边的命令安装hexo：\n被墙请使用命令：\n\n    npm install -g cnpm --registry=https://registry.npm.taobao.org\n\n以下是没有被墙的命令，被墙把npm换成cnpm即可。安装hexo\n\n    npm install hexo-cli -g\n\n安装完成后，验证是否安装成功。\n\n    hexo -v\n新建文件夹yourblog,输入命令\n\n    $ hexo init blog\n    $ cd blog\n新建博客\n\n    $ hexo new \"Hello Hexo\"\n生成静态页面\n\n    $ hexo generate\n运行服务\n\n    $ hexo server\n\n然后打开浏览器输入 localhost:4000 即可访问本地静态页面。\n\n\n## 接下来我们把本地静态页面PUSH到github ##\n\n - 首先你要有github账号。\n - 新建一个github.io的库\n - 设置本地github配置参数\n - 经本地静态页面push到github\n\n\n----------\n **github设置**\n\n新建github账号就不在这里陈述了，如果有同学不会使用git将代码push到github的话可以参考 [廖雪峰的官网][3]\n我们来直接进行第二不，创建一个github.io库。\n首先登陆我们的github账号点击`new repository`,然后输入youname.github.io\n**git设置**\n设置git配置信息\n\n\n    $ git config --global user.name \"你的用户名\"\n    $ git config --global user.email \"你的邮箱\"\n    \n\n**hexo 设置**\n    安装hexo git插件\n\n    npm install hexo-deployer-git --save\n\n然后打开博客根目录的_config.yml文件\n大致内容是这个样子的\n\n```\n# Hexo Configuration\n## Docs: https://hexo.io/docs/configuration.html\n## Source: https://github.com/hexojs/hexo/\n\n# Site\ntitle: 和女票抢可乐\nsubtitle:\ndescription:\nauthor: MaxieLj\nlanguage:\ntimezone:\n\n# URL\n## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'\nurl: http://yoursite.com\nroot: /\npermalink: :year/:month/:day/:title/\npermalink_defaults:\n\n# Directory\nsource_dir: source\npublic_dir: public\ntag_dir: tags\narchive_dir: archives\ncategory_dir: categories\ncode_dir: downloads/code\ni18n_dir: :lang\nskip_render:\n\n# Writing\nnew_post_name: :title.md # File name of new posts\ndefault_layout: post\ntitlecase: false # Transform title into titlecase\nexternal_link: true # Open external links in new tab\nfilename_case: 0\nrender_drafts: false\npost_asset_folder: false\nrelative_link: false\nfuture: true\nhighlight:\n  enable: true\n  line_number: true\n  auto_detect: false\n  tab_replace:\n\n# Category & Tag\ndefault_category: uncategorized\ncategory_map:\ntag_map:\n\n# Date / Time format\n## Hexo uses Moment.js to parse and display date\n## You can customize the date format as defined in\n## http://momentjs.com/docs/#/displaying/format/\ndate_format: YYYY-MM-DD\ntime_format: HH:mm:ss\n\n# Pagination\n## Set per_page to 0 to disable pagination\nper_page: 10\npagination_dir: page\n\n# Extensions\n## Plugins: https://hexo.io/plugins/\n## Themes: https://hexo.io/themes/\ntheme: yilia\n\n# Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n  repository: https://github.com/MaxieLj/MaxieLj.github.io.git\n  branch: master\n\njsonContent:\n  meta: false\n  pages: false\n  posts:\n    title: true\n    date: true\n    path: true\n    text: true\n    raw: false\n    content: false\n    slug: false\n    updated: false\n    comments: false\n    link: false\n    permalink: false\n    excerpt: false\n    categories: false\n    tags: true\n```\n我们只需要在尾部添加：\n```\ndeploy:\n  type: git\n  repository: https://github.com/MaxieLj/MaxieLj.github.io.git\n  branch: master\n```\n\n然后我们运行\n\n    $ hexo g\n生成静态文件\n然后推送到github\n\n    $ hexo d\n然后访问youname.github.io就可以看到生成的静态页面了\n当然我们一般是在本地调试好再用 hexo d推送到github\n\n\n  [1]: https://git-scm.com/downloads\n  [2]: https://nodejs.org/en/\n  [3]: http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000","slug":"hexo-git-github搭建博客","published":1,"updated":"2018-06-19T10:35:36.887Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkb4lzjh0003trwwxocqt0fo","content":"<hr>\n<p>在经搭建个人博客、csnd写博客、博客园写博客一系列折腾之后最终决定用 git github hexo 来搭建自己的个人博。我这样做的原因最主要就这么几点：</p>\n<blockquote>\n<ul>\n<li>github的大环境。（装逼）</li>\n<li>免费稳定1</li>\n<li>有一定的技术含量，我个人喜欢折腾。</li>\n<li>为了保持使用git的习惯，顺带看看新的技术，跟上时代潮流。</li>\n</ul>\n</blockquote>\n<p>**</p>\n<h2 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h2><p>**<br>需求环境</p>\n<ol>\n<li>git <a href=\"https://git-scm.com/downloads\" target=\"_blank\" rel=\"noopener\">git下载地址</a></li>\n<li>node.js <a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"noopener\">node.js下载地址</a></li>\n</ol>\n<p>两个安装都是一路下一步</p>\n<h2 id=\"验证软件正确安装\"><a href=\"#验证软件正确安装\" class=\"headerlink\" title=\"验证软件正确安装\"></a>验证软件正确安装</h2><pre><code>git --version\nnode -v\nnpm -v\n</code></pre><p>如果显示版本信息，怎安装成功。</p>\n<h2 id=\"安装hexo\"><a href=\"#安装hexo\" class=\"headerlink\" title=\"安装hexo\"></a>安装hexo</h2><p>在这里如果被墙的可以使用淘宝镜像cnpm 具体怎么操作可以自行百度，这里不多做解释。<br>不过一般不会被墙，我使用npm。运行下边的命令安装hexo：<br>被墙请使用命令：</p>\n<pre><code>npm install -g cnpm --registry=https://registry.npm.taobao.org\n</code></pre><p>以下是没有被墙的命令，被墙把npm换成cnpm即可。安装hexo</p>\n<pre><code>npm install hexo-cli -g\n</code></pre><p>安装完成后，验证是否安装成功。</p>\n<pre><code>hexo -v\n</code></pre><p>新建文件夹yourblog,输入命令</p>\n<pre><code>$ hexo init blog\n$ cd blog\n</code></pre><p>新建博客</p>\n<pre><code>$ hexo new &quot;Hello Hexo&quot;\n</code></pre><p>生成静态页面</p>\n<pre><code>$ hexo generate\n</code></pre><p>运行服务</p>\n<pre><code>$ hexo server\n</code></pre><p>然后打开浏览器输入 localhost:4000 即可访问本地静态页面。</p>\n<h2 id=\"接下来我们把本地静态页面PUSH到github\"><a href=\"#接下来我们把本地静态页面PUSH到github\" class=\"headerlink\" title=\"接下来我们把本地静态页面PUSH到github\"></a>接下来我们把本地静态页面PUSH到github</h2><ul>\n<li>首先你要有github账号。</li>\n<li>新建一个github.io的库</li>\n<li>设置本地github配置参数</li>\n<li>经本地静态页面push到github</li>\n</ul>\n<hr>\n<p> <strong>github设置</strong></p>\n<p>新建github账号就不在这里陈述了，如果有同学不会使用git将代码push到github的话可以参考 <a href=\"http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000\" target=\"_blank\" rel=\"noopener\">廖雪峰的官网</a><br>我们来直接进行第二不，创建一个github.io库。<br>首先登陆我们的github账号点击<code>new repository</code>,然后输入youname.github.io<br><strong>git设置</strong><br>设置git配置信息</p>\n<pre><code>$ git config --global user.name &quot;你的用户名&quot;\n$ git config --global user.email &quot;你的邮箱&quot;\n</code></pre><p><strong>hexo 设置</strong><br>    安装hexo git插件</p>\n<pre><code>npm install hexo-deployer-git --save\n</code></pre><p>然后打开博客根目录的_config.yml文件<br>大致内容是这个样子的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Hexo Configuration</div><div class=\"line\">## Docs: https://hexo.io/docs/configuration.html</div><div class=\"line\">## Source: https://github.com/hexojs/hexo/</div><div class=\"line\"></div><div class=\"line\"># Site</div><div class=\"line\">title: 和女票抢可乐</div><div class=\"line\">subtitle:</div><div class=\"line\">description:</div><div class=\"line\">author: MaxieLj</div><div class=\"line\">language:</div><div class=\"line\">timezone:</div><div class=\"line\"></div><div class=\"line\"># URL</div><div class=\"line\">## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;</div><div class=\"line\">url: http://yoursite.com</div><div class=\"line\">root: /</div><div class=\"line\">permalink: :year/:month/:day/:title/</div><div class=\"line\">permalink_defaults:</div><div class=\"line\"></div><div class=\"line\"># Directory</div><div class=\"line\">source_dir: source</div><div class=\"line\">public_dir: public</div><div class=\"line\">tag_dir: tags</div><div class=\"line\">archive_dir: archives</div><div class=\"line\">category_dir: categories</div><div class=\"line\">code_dir: downloads/code</div><div class=\"line\">i18n_dir: :lang</div><div class=\"line\">skip_render:</div><div class=\"line\"></div><div class=\"line\"># Writing</div><div class=\"line\">new_post_name: :title.md # File name of new posts</div><div class=\"line\">default_layout: post</div><div class=\"line\">titlecase: false # Transform title into titlecase</div><div class=\"line\">external_link: true # Open external links in new tab</div><div class=\"line\">filename_case: 0</div><div class=\"line\">render_drafts: false</div><div class=\"line\">post_asset_folder: false</div><div class=\"line\">relative_link: false</div><div class=\"line\">future: true</div><div class=\"line\">highlight:</div><div class=\"line\">  enable: true</div><div class=\"line\">  line_number: true</div><div class=\"line\">  auto_detect: false</div><div class=\"line\">  tab_replace:</div><div class=\"line\"></div><div class=\"line\"># Category &amp; Tag</div><div class=\"line\">default_category: uncategorized</div><div class=\"line\">category_map:</div><div class=\"line\">tag_map:</div><div class=\"line\"></div><div class=\"line\"># Date / Time format</div><div class=\"line\">## Hexo uses Moment.js to parse and display date</div><div class=\"line\">## You can customize the date format as defined in</div><div class=\"line\">## http://momentjs.com/docs/#/displaying/format/</div><div class=\"line\">date_format: YYYY-MM-DD</div><div class=\"line\">time_format: HH:mm:ss</div><div class=\"line\"></div><div class=\"line\"># Pagination</div><div class=\"line\">## Set per_page to 0 to disable pagination</div><div class=\"line\">per_page: 10</div><div class=\"line\">pagination_dir: page</div><div class=\"line\"></div><div class=\"line\"># Extensions</div><div class=\"line\">## Plugins: https://hexo.io/plugins/</div><div class=\"line\">## Themes: https://hexo.io/themes/</div><div class=\"line\">theme: yilia</div><div class=\"line\"></div><div class=\"line\"># Deployment</div><div class=\"line\">## Docs: https://hexo.io/docs/deployment.html</div><div class=\"line\">deploy:</div><div class=\"line\">  type: git</div><div class=\"line\">  repository: https://github.com/MaxieLj/MaxieLj.github.io.git</div><div class=\"line\">  branch: master</div><div class=\"line\"></div><div class=\"line\">jsonContent:</div><div class=\"line\">  meta: false</div><div class=\"line\">  pages: false</div><div class=\"line\">  posts:</div><div class=\"line\">    title: true</div><div class=\"line\">    date: true</div><div class=\"line\">    path: true</div><div class=\"line\">    text: true</div><div class=\"line\">    raw: false</div><div class=\"line\">    content: false</div><div class=\"line\">    slug: false</div><div class=\"line\">    updated: false</div><div class=\"line\">    comments: false</div><div class=\"line\">    link: false</div><div class=\"line\">    permalink: false</div><div class=\"line\">    excerpt: false</div><div class=\"line\">    categories: false</div><div class=\"line\">    tags: true</div></pre></td></tr></table></figure>\n<p>我们只需要在尾部添加：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">deploy:</div><div class=\"line\">  type: git</div><div class=\"line\">  repository: https://github.com/MaxieLj/MaxieLj.github.io.git</div><div class=\"line\">  branch: master</div></pre></td></tr></table></figure></p>\n<p>然后我们运行</p>\n<pre><code>$ hexo g\n</code></pre><p>生成静态文件<br>然后推送到github</p>\n<pre><code>$ hexo d\n</code></pre><p>然后访问youname.github.io就可以看到生成的静态页面了<br>当然我们一般是在本地调试好再用 hexo d推送到github</p>\n","site":{"data":{}},"excerpt":"","more":"<hr>\n<p>在经搭建个人博客、csnd写博客、博客园写博客一系列折腾之后最终决定用 git github hexo 来搭建自己的个人博。我这样做的原因最主要就这么几点：</p>\n<blockquote>\n<ul>\n<li>github的大环境。（装逼）</li>\n<li>免费稳定1</li>\n<li>有一定的技术含量，我个人喜欢折腾。</li>\n<li>为了保持使用git的习惯，顺带看看新的技术，跟上时代潮流。</li>\n</ul>\n</blockquote>\n<p>**</p>\n<h2 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h2><p>**<br>需求环境</p>\n<ol>\n<li>git <a href=\"https://git-scm.com/downloads\" target=\"_blank\" rel=\"noopener\">git下载地址</a></li>\n<li>node.js <a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"noopener\">node.js下载地址</a></li>\n</ol>\n<p>两个安装都是一路下一步</p>\n<h2 id=\"验证软件正确安装\"><a href=\"#验证软件正确安装\" class=\"headerlink\" title=\"验证软件正确安装\"></a>验证软件正确安装</h2><pre><code>git --version\nnode -v\nnpm -v\n</code></pre><p>如果显示版本信息，怎安装成功。</p>\n<h2 id=\"安装hexo\"><a href=\"#安装hexo\" class=\"headerlink\" title=\"安装hexo\"></a>安装hexo</h2><p>在这里如果被墙的可以使用淘宝镜像cnpm 具体怎么操作可以自行百度，这里不多做解释。<br>不过一般不会被墙，我使用npm。运行下边的命令安装hexo：<br>被墙请使用命令：</p>\n<pre><code>npm install -g cnpm --registry=https://registry.npm.taobao.org\n</code></pre><p>以下是没有被墙的命令，被墙把npm换成cnpm即可。安装hexo</p>\n<pre><code>npm install hexo-cli -g\n</code></pre><p>安装完成后，验证是否安装成功。</p>\n<pre><code>hexo -v\n</code></pre><p>新建文件夹yourblog,输入命令</p>\n<pre><code>$ hexo init blog\n$ cd blog\n</code></pre><p>新建博客</p>\n<pre><code>$ hexo new &quot;Hello Hexo&quot;\n</code></pre><p>生成静态页面</p>\n<pre><code>$ hexo generate\n</code></pre><p>运行服务</p>\n<pre><code>$ hexo server\n</code></pre><p>然后打开浏览器输入 localhost:4000 即可访问本地静态页面。</p>\n<h2 id=\"接下来我们把本地静态页面PUSH到github\"><a href=\"#接下来我们把本地静态页面PUSH到github\" class=\"headerlink\" title=\"接下来我们把本地静态页面PUSH到github\"></a>接下来我们把本地静态页面PUSH到github</h2><ul>\n<li>首先你要有github账号。</li>\n<li>新建一个github.io的库</li>\n<li>设置本地github配置参数</li>\n<li>经本地静态页面push到github</li>\n</ul>\n<hr>\n<p> <strong>github设置</strong></p>\n<p>新建github账号就不在这里陈述了，如果有同学不会使用git将代码push到github的话可以参考 <a href=\"http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000\" target=\"_blank\" rel=\"noopener\">廖雪峰的官网</a><br>我们来直接进行第二不，创建一个github.io库。<br>首先登陆我们的github账号点击<code>new repository</code>,然后输入youname.github.io<br><strong>git设置</strong><br>设置git配置信息</p>\n<pre><code>$ git config --global user.name &quot;你的用户名&quot;\n$ git config --global user.email &quot;你的邮箱&quot;\n</code></pre><p><strong>hexo 设置</strong><br>    安装hexo git插件</p>\n<pre><code>npm install hexo-deployer-git --save\n</code></pre><p>然后打开博客根目录的_config.yml文件<br>大致内容是这个样子的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Hexo Configuration</div><div class=\"line\">## Docs: https://hexo.io/docs/configuration.html</div><div class=\"line\">## Source: https://github.com/hexojs/hexo/</div><div class=\"line\"></div><div class=\"line\"># Site</div><div class=\"line\">title: 和女票抢可乐</div><div class=\"line\">subtitle:</div><div class=\"line\">description:</div><div class=\"line\">author: MaxieLj</div><div class=\"line\">language:</div><div class=\"line\">timezone:</div><div class=\"line\"></div><div class=\"line\"># URL</div><div class=\"line\">## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;</div><div class=\"line\">url: http://yoursite.com</div><div class=\"line\">root: /</div><div class=\"line\">permalink: :year/:month/:day/:title/</div><div class=\"line\">permalink_defaults:</div><div class=\"line\"></div><div class=\"line\"># Directory</div><div class=\"line\">source_dir: source</div><div class=\"line\">public_dir: public</div><div class=\"line\">tag_dir: tags</div><div class=\"line\">archive_dir: archives</div><div class=\"line\">category_dir: categories</div><div class=\"line\">code_dir: downloads/code</div><div class=\"line\">i18n_dir: :lang</div><div class=\"line\">skip_render:</div><div class=\"line\"></div><div class=\"line\"># Writing</div><div class=\"line\">new_post_name: :title.md # File name of new posts</div><div class=\"line\">default_layout: post</div><div class=\"line\">titlecase: false # Transform title into titlecase</div><div class=\"line\">external_link: true # Open external links in new tab</div><div class=\"line\">filename_case: 0</div><div class=\"line\">render_drafts: false</div><div class=\"line\">post_asset_folder: false</div><div class=\"line\">relative_link: false</div><div class=\"line\">future: true</div><div class=\"line\">highlight:</div><div class=\"line\">  enable: true</div><div class=\"line\">  line_number: true</div><div class=\"line\">  auto_detect: false</div><div class=\"line\">  tab_replace:</div><div class=\"line\"></div><div class=\"line\"># Category &amp; Tag</div><div class=\"line\">default_category: uncategorized</div><div class=\"line\">category_map:</div><div class=\"line\">tag_map:</div><div class=\"line\"></div><div class=\"line\"># Date / Time format</div><div class=\"line\">## Hexo uses Moment.js to parse and display date</div><div class=\"line\">## You can customize the date format as defined in</div><div class=\"line\">## http://momentjs.com/docs/#/displaying/format/</div><div class=\"line\">date_format: YYYY-MM-DD</div><div class=\"line\">time_format: HH:mm:ss</div><div class=\"line\"></div><div class=\"line\"># Pagination</div><div class=\"line\">## Set per_page to 0 to disable pagination</div><div class=\"line\">per_page: 10</div><div class=\"line\">pagination_dir: page</div><div class=\"line\"></div><div class=\"line\"># Extensions</div><div class=\"line\">## Plugins: https://hexo.io/plugins/</div><div class=\"line\">## Themes: https://hexo.io/themes/</div><div class=\"line\">theme: yilia</div><div class=\"line\"></div><div class=\"line\"># Deployment</div><div class=\"line\">## Docs: https://hexo.io/docs/deployment.html</div><div class=\"line\">deploy:</div><div class=\"line\">  type: git</div><div class=\"line\">  repository: https://github.com/MaxieLj/MaxieLj.github.io.git</div><div class=\"line\">  branch: master</div><div class=\"line\"></div><div class=\"line\">jsonContent:</div><div class=\"line\">  meta: false</div><div class=\"line\">  pages: false</div><div class=\"line\">  posts:</div><div class=\"line\">    title: true</div><div class=\"line\">    date: true</div><div class=\"line\">    path: true</div><div class=\"line\">    text: true</div><div class=\"line\">    raw: false</div><div class=\"line\">    content: false</div><div class=\"line\">    slug: false</div><div class=\"line\">    updated: false</div><div class=\"line\">    comments: false</div><div class=\"line\">    link: false</div><div class=\"line\">    permalink: false</div><div class=\"line\">    excerpt: false</div><div class=\"line\">    categories: false</div><div class=\"line\">    tags: true</div></pre></td></tr></table></figure>\n<p>我们只需要在尾部添加：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">deploy:</div><div class=\"line\">  type: git</div><div class=\"line\">  repository: https://github.com/MaxieLj/MaxieLj.github.io.git</div><div class=\"line\">  branch: master</div></pre></td></tr></table></figure></p>\n<p>然后我们运行</p>\n<pre><code>$ hexo g\n</code></pre><p>生成静态文件<br>然后推送到github</p>\n<pre><code>$ hexo d\n</code></pre><p>然后访问youname.github.io就可以看到生成的静态页面了<br>当然我们一般是在本地调试好再用 hexo d推送到github</p>\n"},{"title":"'laravel学习笔记二路由'","date":"2016-02-09T14:09:19.000Z","_content":"laravel框架安装好之后我们就要开始熟悉laravel框架的内部结构。\n我们主要是从这个几个方便来学习laravel：\n\n - route 路由\n - controller 控制器\n - blade 模板\n - model 模型\n  \n今天我们主要讲路由。\n\n### laravel-route\n可能我们在学习laravel之前已经接触过一些框架例如：yii，tp,ci。\n但是他们都没有laravel所带的路由系统强大，我们现在开始介绍laravel框架的路由。\n### 闭包\n最基本的路由接受的是一个闭包函数，直接返回值，例如：\n```\nRoure::get('/',funcition(){\nreturn 'this is Route'})\n```\n\n我们在 **/routes/web.php** 里注册该路由即可返回 `this us Route`。当然laravel路由所能接受的请求方式不仅仅是get还要post put 等等法法，示例如下\n```\nRoute::get($uri, $callback);\nRoute::post($uri, $callback);\nRoute::put($uri, $callback);\nRoute::patch($uri, $callback);\nRoute::delete($uri, $callback);\nRoute::options($uri, $callback);\n```\n### 带参数访问###\n\n```\nRoure::get('/{id}',function($id){\nreturn 'user id is '.$id\n})\n```\n 当然也可以带多参数访问\n \n```\n Route::get('/id/{id}/name/{name}',function($id,$name){\n //\n })\n```\n 让然也可以传递一个可选参数 ,但是我们需要用`？`来标记该参数，还给予他默认值\n```\nRoute::get('/name/{name}?',function($name='Maxie'){\n//\n})\n```\n### 路由命名###\n```\nRoure::get('/',funcition(){\nreturn 'this is Route'})->name('index')\n```\n我们可以给路由命名一个名字，让我们在模板中使用rul函数可以解析到我们所命名的路由`url('index')`。这些我们在模板中在细讲\n\n### 路由群组###\n路由群组是一个很好东西，我们在开发中很定会给我们的项目分不同模块。例如用户模块，商户模块。这时候我么会给他们加上不同的命名空间，我们可以通过路由群组把我们注册的路由也分类，很方便我们的访问。例如：\n```\nRoute::groun(['namespace'=>'user'],function(){\n//我们可以在此注册我们的路由，路由控制器路由会在App/Http/Controller/user 下\n})\n```\n 当让我们可以在群组里继续注册群组，在这里我们不多做演示。\n \n## 路由绑定到控制器##\n\n这是我们最关键的地方，一般我们通过访问URI都会想传递参数给我们的控制器，当然laravel还给我们提供了中间件让我们在路路由控制器之间或者路由玉模板之前做一个参数处理或者过滤，我们在此不做演示。后边我们会详细解释，现在我们详细解释路由有绑定到控制器，想必这是你我最关系的。\n路由绑定到控制器只需要：\n```\nRoure::get('/','UserController@showProfile')\n```\n这样既可绑定我么你的路由到控制器。\n\n## 路由绑定绑定到视图##\n有很多的访问不需要我们做处理，只需展示一些东西既可，我么你可以直接把路由绑定到视图\n\n```\nRoute::get('/',function(){\nreturn view('welcom')\n})\n\n这也是我们刚刚配置完laravel时候路由web.php唯一注册一个路由\n```\n\n \n ","source":"_posts/laravel学习笔记二路由.md","raw":"---\ntitle: '''laravel学习笔记二路由'''\ndate: 2016-02-09 22:09:19\ntags:\n---\nlaravel框架安装好之后我们就要开始熟悉laravel框架的内部结构。\n我们主要是从这个几个方便来学习laravel：\n\n - route 路由\n - controller 控制器\n - blade 模板\n - model 模型\n  \n今天我们主要讲路由。\n\n### laravel-route\n可能我们在学习laravel之前已经接触过一些框架例如：yii，tp,ci。\n但是他们都没有laravel所带的路由系统强大，我们现在开始介绍laravel框架的路由。\n### 闭包\n最基本的路由接受的是一个闭包函数，直接返回值，例如：\n```\nRoure::get('/',funcition(){\nreturn 'this is Route'})\n```\n\n我们在 **/routes/web.php** 里注册该路由即可返回 `this us Route`。当然laravel路由所能接受的请求方式不仅仅是get还要post put 等等法法，示例如下\n```\nRoute::get($uri, $callback);\nRoute::post($uri, $callback);\nRoute::put($uri, $callback);\nRoute::patch($uri, $callback);\nRoute::delete($uri, $callback);\nRoute::options($uri, $callback);\n```\n### 带参数访问###\n\n```\nRoure::get('/{id}',function($id){\nreturn 'user id is '.$id\n})\n```\n 当然也可以带多参数访问\n \n```\n Route::get('/id/{id}/name/{name}',function($id,$name){\n //\n })\n```\n 让然也可以传递一个可选参数 ,但是我们需要用`？`来标记该参数，还给予他默认值\n```\nRoute::get('/name/{name}?',function($name='Maxie'){\n//\n})\n```\n### 路由命名###\n```\nRoure::get('/',funcition(){\nreturn 'this is Route'})->name('index')\n```\n我们可以给路由命名一个名字，让我们在模板中使用rul函数可以解析到我们所命名的路由`url('index')`。这些我们在模板中在细讲\n\n### 路由群组###\n路由群组是一个很好东西，我们在开发中很定会给我们的项目分不同模块。例如用户模块，商户模块。这时候我么会给他们加上不同的命名空间，我们可以通过路由群组把我们注册的路由也分类，很方便我们的访问。例如：\n```\nRoute::groun(['namespace'=>'user'],function(){\n//我们可以在此注册我们的路由，路由控制器路由会在App/Http/Controller/user 下\n})\n```\n 当让我们可以在群组里继续注册群组，在这里我们不多做演示。\n \n## 路由绑定到控制器##\n\n这是我们最关键的地方，一般我们通过访问URI都会想传递参数给我们的控制器，当然laravel还给我们提供了中间件让我们在路路由控制器之间或者路由玉模板之前做一个参数处理或者过滤，我们在此不做演示。后边我们会详细解释，现在我们详细解释路由有绑定到控制器，想必这是你我最关系的。\n路由绑定到控制器只需要：\n```\nRoure::get('/','UserController@showProfile')\n```\n这样既可绑定我么你的路由到控制器。\n\n## 路由绑定绑定到视图##\n有很多的访问不需要我们做处理，只需展示一些东西既可，我么你可以直接把路由绑定到视图\n\n```\nRoute::get('/',function(){\nreturn view('welcom')\n})\n\n这也是我们刚刚配置完laravel时候路由web.php唯一注册一个路由\n```\n\n \n ","slug":"laravel学习笔记二路由","published":1,"updated":"2018-06-19T10:35:54.670Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkb4lzjh0004trww45q9ixif","content":"<p>laravel框架安装好之后我们就要开始熟悉laravel框架的内部结构。<br>我们主要是从这个几个方便来学习laravel：</p>\n<ul>\n<li>route 路由</li>\n<li>controller 控制器</li>\n<li>blade 模板</li>\n<li>model 模型</li>\n</ul>\n<p>今天我们主要讲路由。</p>\n<h3 id=\"laravel-route\"><a href=\"#laravel-route\" class=\"headerlink\" title=\"laravel-route\"></a>laravel-route</h3><p>可能我们在学习laravel之前已经接触过一些框架例如：yii，tp,ci。<br>但是他们都没有laravel所带的路由系统强大，我们现在开始介绍laravel框架的路由。</p>\n<h3 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h3><p>最基本的路由接受的是一个闭包函数，直接返回值，例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Roure::get(&apos;/&apos;,funcition()&#123;</div><div class=\"line\">return &apos;this is Route&apos;&#125;)</div></pre></td></tr></table></figure></p>\n<p>我们在 <strong>/routes/web.php</strong> 里注册该路由即可返回 <code>this us Route</code>。当然laravel路由所能接受的请求方式不仅仅是get还要post put 等等法法，示例如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">Route::get($uri, $callback);</div><div class=\"line\">Route::post($uri, $callback);</div><div class=\"line\">Route::put($uri, $callback);</div><div class=\"line\">Route::patch($uri, $callback);</div><div class=\"line\">Route::delete($uri, $callback);</div><div class=\"line\">Route::options($uri, $callback);</div></pre></td></tr></table></figure></p>\n<h3 id=\"带参数访问\"><a href=\"#带参数访问\" class=\"headerlink\" title=\"带参数访问\"></a>带参数访问</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Roure::get(&apos;/&#123;id&#125;&apos;,function($id)&#123;</div><div class=\"line\">return &apos;user id is &apos;.$id</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p> 当然也可以带多参数访问</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Route::get(&apos;/id/&#123;id&#125;/name/&#123;name&#125;&apos;,function($id,$name)&#123;</div><div class=\"line\">//</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p> 让然也可以传递一个可选参数 ,但是我们需要用<code>？</code>来标记该参数，还给予他默认值<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Route::get(&apos;/name/&#123;name&#125;?&apos;,function($name=&apos;Maxie&apos;)&#123;</div><div class=\"line\">//</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<h3 id=\"路由命名\"><a href=\"#路由命名\" class=\"headerlink\" title=\"路由命名\"></a>路由命名</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Roure::get(&apos;/&apos;,funcition()&#123;</div><div class=\"line\">return &apos;this is Route&apos;&#125;)-&gt;name(&apos;index&apos;)</div></pre></td></tr></table></figure>\n<p>我们可以给路由命名一个名字，让我们在模板中使用rul函数可以解析到我们所命名的路由<code>url(&#39;index&#39;)</code>。这些我们在模板中在细讲</p>\n<h3 id=\"路由群组\"><a href=\"#路由群组\" class=\"headerlink\" title=\"路由群组\"></a>路由群组</h3><p>路由群组是一个很好东西，我们在开发中很定会给我们的项目分不同模块。例如用户模块，商户模块。这时候我么会给他们加上不同的命名空间，我们可以通过路由群组把我们注册的路由也分类，很方便我们的访问。例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Route::groun([&apos;namespace&apos;=&gt;&apos;user&apos;],function()&#123;</div><div class=\"line\">//我们可以在此注册我们的路由，路由控制器路由会在App/Http/Controller/user 下</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p> 当让我们可以在群组里继续注册群组，在这里我们不多做演示。</p>\n<h2 id=\"路由绑定到控制器\"><a href=\"#路由绑定到控制器\" class=\"headerlink\" title=\"路由绑定到控制器\"></a>路由绑定到控制器</h2><p>这是我们最关键的地方，一般我们通过访问URI都会想传递参数给我们的控制器，当然laravel还给我们提供了中间件让我们在路路由控制器之间或者路由玉模板之前做一个参数处理或者过滤，我们在此不做演示。后边我们会详细解释，现在我们详细解释路由有绑定到控制器，想必这是你我最关系的。<br>路由绑定到控制器只需要：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Roure::get(&apos;/&apos;,&apos;UserController@showProfile&apos;)</div></pre></td></tr></table></figure></p>\n<p>这样既可绑定我么你的路由到控制器。</p>\n<h2 id=\"路由绑定绑定到视图\"><a href=\"#路由绑定绑定到视图\" class=\"headerlink\" title=\"路由绑定绑定到视图\"></a>路由绑定绑定到视图</h2><p>有很多的访问不需要我们做处理，只需展示一些东西既可，我么你可以直接把路由绑定到视图</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Route::get(&apos;/&apos;,function()&#123;</div><div class=\"line\">return view(&apos;welcom&apos;)</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">这也是我们刚刚配置完laravel时候路由web.php唯一注册一个路由</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>laravel框架安装好之后我们就要开始熟悉laravel框架的内部结构。<br>我们主要是从这个几个方便来学习laravel：</p>\n<ul>\n<li>route 路由</li>\n<li>controller 控制器</li>\n<li>blade 模板</li>\n<li>model 模型</li>\n</ul>\n<p>今天我们主要讲路由。</p>\n<h3 id=\"laravel-route\"><a href=\"#laravel-route\" class=\"headerlink\" title=\"laravel-route\"></a>laravel-route</h3><p>可能我们在学习laravel之前已经接触过一些框架例如：yii，tp,ci。<br>但是他们都没有laravel所带的路由系统强大，我们现在开始介绍laravel框架的路由。</p>\n<h3 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h3><p>最基本的路由接受的是一个闭包函数，直接返回值，例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Roure::get(&apos;/&apos;,funcition()&#123;</div><div class=\"line\">return &apos;this is Route&apos;&#125;)</div></pre></td></tr></table></figure></p>\n<p>我们在 <strong>/routes/web.php</strong> 里注册该路由即可返回 <code>this us Route</code>。当然laravel路由所能接受的请求方式不仅仅是get还要post put 等等法法，示例如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">Route::get($uri, $callback);</div><div class=\"line\">Route::post($uri, $callback);</div><div class=\"line\">Route::put($uri, $callback);</div><div class=\"line\">Route::patch($uri, $callback);</div><div class=\"line\">Route::delete($uri, $callback);</div><div class=\"line\">Route::options($uri, $callback);</div></pre></td></tr></table></figure></p>\n<h3 id=\"带参数访问\"><a href=\"#带参数访问\" class=\"headerlink\" title=\"带参数访问\"></a>带参数访问</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Roure::get(&apos;/&#123;id&#125;&apos;,function($id)&#123;</div><div class=\"line\">return &apos;user id is &apos;.$id</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p> 当然也可以带多参数访问</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Route::get(&apos;/id/&#123;id&#125;/name/&#123;name&#125;&apos;,function($id,$name)&#123;</div><div class=\"line\">//</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p> 让然也可以传递一个可选参数 ,但是我们需要用<code>？</code>来标记该参数，还给予他默认值<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Route::get(&apos;/name/&#123;name&#125;?&apos;,function($name=&apos;Maxie&apos;)&#123;</div><div class=\"line\">//</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<h3 id=\"路由命名\"><a href=\"#路由命名\" class=\"headerlink\" title=\"路由命名\"></a>路由命名</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Roure::get(&apos;/&apos;,funcition()&#123;</div><div class=\"line\">return &apos;this is Route&apos;&#125;)-&gt;name(&apos;index&apos;)</div></pre></td></tr></table></figure>\n<p>我们可以给路由命名一个名字，让我们在模板中使用rul函数可以解析到我们所命名的路由<code>url(&#39;index&#39;)</code>。这些我们在模板中在细讲</p>\n<h3 id=\"路由群组\"><a href=\"#路由群组\" class=\"headerlink\" title=\"路由群组\"></a>路由群组</h3><p>路由群组是一个很好东西，我们在开发中很定会给我们的项目分不同模块。例如用户模块，商户模块。这时候我么会给他们加上不同的命名空间，我们可以通过路由群组把我们注册的路由也分类，很方便我们的访问。例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Route::groun([&apos;namespace&apos;=&gt;&apos;user&apos;],function()&#123;</div><div class=\"line\">//我们可以在此注册我们的路由，路由控制器路由会在App/Http/Controller/user 下</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p> 当让我们可以在群组里继续注册群组，在这里我们不多做演示。</p>\n<h2 id=\"路由绑定到控制器\"><a href=\"#路由绑定到控制器\" class=\"headerlink\" title=\"路由绑定到控制器\"></a>路由绑定到控制器</h2><p>这是我们最关键的地方，一般我们通过访问URI都会想传递参数给我们的控制器，当然laravel还给我们提供了中间件让我们在路路由控制器之间或者路由玉模板之前做一个参数处理或者过滤，我们在此不做演示。后边我们会详细解释，现在我们详细解释路由有绑定到控制器，想必这是你我最关系的。<br>路由绑定到控制器只需要：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Roure::get(&apos;/&apos;,&apos;UserController@showProfile&apos;)</div></pre></td></tr></table></figure></p>\n<p>这样既可绑定我么你的路由到控制器。</p>\n<h2 id=\"路由绑定绑定到视图\"><a href=\"#路由绑定绑定到视图\" class=\"headerlink\" title=\"路由绑定绑定到视图\"></a>路由绑定绑定到视图</h2><p>有很多的访问不需要我们做处理，只需展示一些东西既可，我么你可以直接把路由绑定到视图</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Route::get(&apos;/&apos;,function()&#123;</div><div class=\"line\">return view(&apos;welcom&apos;)</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">这也是我们刚刚配置完laravel时候路由web.php唯一注册一个路由</div></pre></td></tr></table></figure>\n"},{"title":"'laravel学习笔记四中间件'","date":"2016-03-02T11:44:12.000Z","_content":" # Laravel 学习笔记四Http中间件\n\n标签（空格分隔）： laravel\n\n---\n \n \n ### 简介###\n  关于中间件，从字面意思上我们很好理解中间件的意思。就是存在两个节点之间的节点。这里我们所描述的节点是`Route`和`Controller`。\n  \n  \n  一次正产给的请求是客户端发送请求，服务端接受请求，然后对参数做一些判断然后处理逻辑。任何请求都会从进入控制器开始就直接进入真正的逻辑处理，我们会先判断请求参数是否正确，以防止黑客攻击。比较常见的处理逻辑反馈有403、503页面。这些是我们在接受参数后对参数进行处理，从而反馈到客户端。如果我们传递参数较多，对参数筛选很严格的话，就会出现很多对参数判断的代码，以及当一些对参数判断的代码需要复用时候我们无法将其从控制器中分离出来，这些都是我们平常工作中饭经常遇到的问题。这是`中间件`就能很好地处理这个问题了。\n  \n  间件的作用是在请求从`Route`进入控制器是时，我们可以先将请求引入到中间件中，对数据做些处理，然后才引入到控制器中，或者直接反馈给客户端。这样我们的控制器可以专心于数据逻辑，从而代码简洁，以及参数判断代码会得到复用，很大的提升工作效率。\n\n\n \n ### 创建一个控制器###\n\n第一步我们来创建一个中间件。在`larval`中，自带了一条命令用来创建中间件。`php artisan make:middleware CheckAge` 。我们可以用此命令创建一个`CheckAge`的中间，用来过滤用户的年龄。穿件代码如下：\n\n```\n<?php\n\nnamespace App\\Http\\Middleware;\n\nuse Closure;\n\nclass CheckAge\n{\n    /**\n     * 运行请求过滤器。\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @param  \\Closure  $next\n     * @return mixed\n     */\n    public function handle($request, Closure $next)\n    {\n        if ($request->age <= 200) {\n            return redirect('home');\n        }\n\n        return $next($request);\n    }\n\n}\n```\n 当然在这里少不了路由的代码，我们的请求先到路由，然后到中间件最后到控制器。\n```\nRoute::get('getuser/user/{id}/age/{age}',UserController@getUser)->middleware('CheckAge');\n```\n 在这段代码中我们把所有请求age大于200的重定向到`home`中，佛则就继续，这样就是实现了参数过滤。这就是中间件的基本作用。\n \n# 注册中间件###\n\n \n 我们的中间件在使用前，是需要注册的。否则我们无法正常调用到我们的中间件。这个注册文件在`app/Http/Kernel.php`中。我们打开这个文件。\n\n\n```\n<?php\n\nnamespace App\\Http;\n\nuse Illuminate\\Foundation\\Http\\Kernel as HttpKernel;\n\nclass Kernel extends HttpKernel\n{\n    // 这里注册是全局的中间件，在所有的都需要经过这个中间件来过滤信息，无论是来之web的请求还是API的///请求\n    protected $middleware = [\n        \\Illuminate\\Foundation\\Http\\Middleware\\CheckForMaintenanceMode::class,\n    ];\n\n    // 中间件群组，在这里我们可以注册中间件群组，用来给请求批量的添加空间。这里laravel中web请求默认     //都必须经过web群组的中间的过滤，api请求需要经过api群组的中间件过滤。使用实例在下边已经给出。\n    protected $middlewareGroups = [\n        'web' => [\n            \\App\\Http\\Middleware\\EncryptCookies::class,\n            \\Illuminate\\Cookie\\Middleware\\AddQueuedCookiesToResponse::class,\n            \\Illuminate\\Session\\Middleware\\StartSession::class,\n            \\Illuminate\\View\\Middleware\\ShareErrorsFromSession::class,\n            \\App\\Http\\Middleware\\VerifyCsrfToken::class,\n        ],\n\n        'api' => [\n            'throttle:60,1',\n        ],\n    ];\n    \n    // 非全局的中间件，单独给某些路由指定下面的中间件（用户自己编写）。\n    protected $routeMiddleware = [\n        'auth' => \\App\\Http\\Middleware\\Authenticate::class,\n        'auth.basic' => \\Illuminate\\Auth\\Middleware\\AuthenticateWithBasicAuth::class,\n        'can' => \\Illuminate\\Foundation\\Http\\Middleware\\Authorize::class,\n        'guest' => \\App\\Http\\Middleware\\RedirectIfAuthenticated::class,\n        'throttle' => \\Illuminate\\Routing\\Middleware\\ThrottleRequests::class,\n    ];\n}\n```\n群组使用\n```\nRoute::group(['middleware' => ['web']], function () {\n    //\n})\n```\n\n我们可以看出这个`Kernel.php`文件中有是哪个属性，分别为 `protected $middleware` `protected $middlewareGroups` `protected $routeMiddleware` 这三个属性分别用来注册`全局中间件` `群组中间件` `和自定义中间件`。\n\n### 特殊中间件###\n\n在中间件中用连个比较特殊的中间件，分别为`前置中间件` `和后置中间件`。顾名思义，前置中间件就是在请求前运作的，后置中间件就是在请求后运作的。这有什么用呢？我们可以在这里举一个栗子：\n\n在正常的项目中我们肯定要记录一些数据操作记录，用来跟踪每次请求的逻辑处理。方便我们在项目出现bug时候跟踪数据。\n在laravel中我们用下面函数来进行sql语句的记录：\n```\nDB::enableQueryLog();\nDB::getQueryLog();\n```\n\n我们可以将`DB::enableQueryLog()` 放在需要记录sql语句的请求的前置中间件中，用来开启sql记录。将`DB::getQueryLog()`放在需要记录请求的后置中间件中，记录所执行的sql。\n\n这就是中间件的作用。\n\n\n### 中间件参数###\n\n在调取中间件时，我们可以穿的附加参数。例如：\n```\n<?php\n\nnamespace App\\Http\\Middleware;\n\nuse Closure;\n\nclass CheckRole\n{\n    /**\n     * 处理传入的请求\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @param  \\Closure  $next\n     * @param  string  $role\n     * @return mixed\n     */\n    public function handle($request, Closure $next, $role)\n    {\n        if (! $request->user()->hasRole($role)) {\n            // Redirect...\n        }\n\n        return $next($request);\n    }\n\n}\n```\n传递指定参数可以:隔开\n```\nRoute::put('post/{id}', function ($id) {\n    //\n})->middleware('role:editor');\n```\n\n好了，本节就到此为止了。\n\n\n\n\n\n","source":"_posts/laravel学习笔记四中间件.md","raw":"---\ntitle: '''laravel学习笔记四中间件'''\ndate: 2016-03-02 19:44:12\ntags:\n---\n # Laravel 学习笔记四Http中间件\n\n标签（空格分隔）： laravel\n\n---\n \n \n ### 简介###\n  关于中间件，从字面意思上我们很好理解中间件的意思。就是存在两个节点之间的节点。这里我们所描述的节点是`Route`和`Controller`。\n  \n  \n  一次正产给的请求是客户端发送请求，服务端接受请求，然后对参数做一些判断然后处理逻辑。任何请求都会从进入控制器开始就直接进入真正的逻辑处理，我们会先判断请求参数是否正确，以防止黑客攻击。比较常见的处理逻辑反馈有403、503页面。这些是我们在接受参数后对参数进行处理，从而反馈到客户端。如果我们传递参数较多，对参数筛选很严格的话，就会出现很多对参数判断的代码，以及当一些对参数判断的代码需要复用时候我们无法将其从控制器中分离出来，这些都是我们平常工作中饭经常遇到的问题。这是`中间件`就能很好地处理这个问题了。\n  \n  间件的作用是在请求从`Route`进入控制器是时，我们可以先将请求引入到中间件中，对数据做些处理，然后才引入到控制器中，或者直接反馈给客户端。这样我们的控制器可以专心于数据逻辑，从而代码简洁，以及参数判断代码会得到复用，很大的提升工作效率。\n\n\n \n ### 创建一个控制器###\n\n第一步我们来创建一个中间件。在`larval`中，自带了一条命令用来创建中间件。`php artisan make:middleware CheckAge` 。我们可以用此命令创建一个`CheckAge`的中间，用来过滤用户的年龄。穿件代码如下：\n\n```\n<?php\n\nnamespace App\\Http\\Middleware;\n\nuse Closure;\n\nclass CheckAge\n{\n    /**\n     * 运行请求过滤器。\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @param  \\Closure  $next\n     * @return mixed\n     */\n    public function handle($request, Closure $next)\n    {\n        if ($request->age <= 200) {\n            return redirect('home');\n        }\n\n        return $next($request);\n    }\n\n}\n```\n 当然在这里少不了路由的代码，我们的请求先到路由，然后到中间件最后到控制器。\n```\nRoute::get('getuser/user/{id}/age/{age}',UserController@getUser)->middleware('CheckAge');\n```\n 在这段代码中我们把所有请求age大于200的重定向到`home`中，佛则就继续，这样就是实现了参数过滤。这就是中间件的基本作用。\n \n# 注册中间件###\n\n \n 我们的中间件在使用前，是需要注册的。否则我们无法正常调用到我们的中间件。这个注册文件在`app/Http/Kernel.php`中。我们打开这个文件。\n\n\n```\n<?php\n\nnamespace App\\Http;\n\nuse Illuminate\\Foundation\\Http\\Kernel as HttpKernel;\n\nclass Kernel extends HttpKernel\n{\n    // 这里注册是全局的中间件，在所有的都需要经过这个中间件来过滤信息，无论是来之web的请求还是API的///请求\n    protected $middleware = [\n        \\Illuminate\\Foundation\\Http\\Middleware\\CheckForMaintenanceMode::class,\n    ];\n\n    // 中间件群组，在这里我们可以注册中间件群组，用来给请求批量的添加空间。这里laravel中web请求默认     //都必须经过web群组的中间的过滤，api请求需要经过api群组的中间件过滤。使用实例在下边已经给出。\n    protected $middlewareGroups = [\n        'web' => [\n            \\App\\Http\\Middleware\\EncryptCookies::class,\n            \\Illuminate\\Cookie\\Middleware\\AddQueuedCookiesToResponse::class,\n            \\Illuminate\\Session\\Middleware\\StartSession::class,\n            \\Illuminate\\View\\Middleware\\ShareErrorsFromSession::class,\n            \\App\\Http\\Middleware\\VerifyCsrfToken::class,\n        ],\n\n        'api' => [\n            'throttle:60,1',\n        ],\n    ];\n    \n    // 非全局的中间件，单独给某些路由指定下面的中间件（用户自己编写）。\n    protected $routeMiddleware = [\n        'auth' => \\App\\Http\\Middleware\\Authenticate::class,\n        'auth.basic' => \\Illuminate\\Auth\\Middleware\\AuthenticateWithBasicAuth::class,\n        'can' => \\Illuminate\\Foundation\\Http\\Middleware\\Authorize::class,\n        'guest' => \\App\\Http\\Middleware\\RedirectIfAuthenticated::class,\n        'throttle' => \\Illuminate\\Routing\\Middleware\\ThrottleRequests::class,\n    ];\n}\n```\n群组使用\n```\nRoute::group(['middleware' => ['web']], function () {\n    //\n})\n```\n\n我们可以看出这个`Kernel.php`文件中有是哪个属性，分别为 `protected $middleware` `protected $middlewareGroups` `protected $routeMiddleware` 这三个属性分别用来注册`全局中间件` `群组中间件` `和自定义中间件`。\n\n### 特殊中间件###\n\n在中间件中用连个比较特殊的中间件，分别为`前置中间件` `和后置中间件`。顾名思义，前置中间件就是在请求前运作的，后置中间件就是在请求后运作的。这有什么用呢？我们可以在这里举一个栗子：\n\n在正常的项目中我们肯定要记录一些数据操作记录，用来跟踪每次请求的逻辑处理。方便我们在项目出现bug时候跟踪数据。\n在laravel中我们用下面函数来进行sql语句的记录：\n```\nDB::enableQueryLog();\nDB::getQueryLog();\n```\n\n我们可以将`DB::enableQueryLog()` 放在需要记录sql语句的请求的前置中间件中，用来开启sql记录。将`DB::getQueryLog()`放在需要记录请求的后置中间件中，记录所执行的sql。\n\n这就是中间件的作用。\n\n\n### 中间件参数###\n\n在调取中间件时，我们可以穿的附加参数。例如：\n```\n<?php\n\nnamespace App\\Http\\Middleware;\n\nuse Closure;\n\nclass CheckRole\n{\n    /**\n     * 处理传入的请求\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @param  \\Closure  $next\n     * @param  string  $role\n     * @return mixed\n     */\n    public function handle($request, Closure $next, $role)\n    {\n        if (! $request->user()->hasRole($role)) {\n            // Redirect...\n        }\n\n        return $next($request);\n    }\n\n}\n```\n传递指定参数可以:隔开\n```\nRoute::put('post/{id}', function ($id) {\n    //\n})->middleware('role:editor');\n```\n\n好了，本节就到此为止了。\n\n\n\n\n\n","slug":"laravel学习笔记四中间件","published":1,"updated":"2018-06-19T10:35:54.667Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkb4lzji0005trww6hmboxwf","content":"<h1 id=\"Laravel-学习笔记四Http中间件\"><a href=\"#Laravel-学习笔记四Http中间件\" class=\"headerlink\" title=\"Laravel 学习笔记四Http中间件\"></a>Laravel 学习笔记四Http中间件</h1><p>标签（空格分隔）： laravel</p>\n<hr>\n<h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>  关于中间件，从字面意思上我们很好理解中间件的意思。就是存在两个节点之间的节点。这里我们所描述的节点是<code>Route</code>和<code>Controller</code>。</p>\n<p>  一次正产给的请求是客户端发送请求，服务端接受请求，然后对参数做一些判断然后处理逻辑。任何请求都会从进入控制器开始就直接进入真正的逻辑处理，我们会先判断请求参数是否正确，以防止黑客攻击。比较常见的处理逻辑反馈有403、503页面。这些是我们在接受参数后对参数进行处理，从而反馈到客户端。如果我们传递参数较多，对参数筛选很严格的话，就会出现很多对参数判断的代码，以及当一些对参数判断的代码需要复用时候我们无法将其从控制器中分离出来，这些都是我们平常工作中饭经常遇到的问题。这是<code>中间件</code>就能很好地处理这个问题了。</p>\n<p>  间件的作用是在请求从<code>Route</code>进入控制器是时，我们可以先将请求引入到中间件中，对数据做些处理，然后才引入到控制器中，或者直接反馈给客户端。这样我们的控制器可以专心于数据逻辑，从而代码简洁，以及参数判断代码会得到复用，很大的提升工作效率。</p>\n<h3 id=\"创建一个控制器\"><a href=\"#创建一个控制器\" class=\"headerlink\" title=\"创建一个控制器\"></a>创建一个控制器</h3><p>第一步我们来创建一个中间件。在<code>larval</code>中，自带了一条命令用来创建中间件。<code>php artisan make:middleware CheckAge</code> 。我们可以用此命令创建一个<code>CheckAge</code>的中间，用来过滤用户的年龄。穿件代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?php</div><div class=\"line\"></div><div class=\"line\">namespace App\\Http\\Middleware;</div><div class=\"line\"></div><div class=\"line\">use Closure;</div><div class=\"line\"></div><div class=\"line\">class CheckAge</div><div class=\"line\">&#123;</div><div class=\"line\">    /**</div><div class=\"line\">     * 运行请求过滤器。</div><div class=\"line\">     *</div><div class=\"line\">     * @param  \\Illuminate\\Http\\Request  $request</div><div class=\"line\">     * @param  \\Closure  $next</div><div class=\"line\">     * @return mixed</div><div class=\"line\">     */</div><div class=\"line\">    public function handle($request, Closure $next)</div><div class=\"line\">    &#123;</div><div class=\"line\">        if ($request-&gt;age &lt;= 200) &#123;</div><div class=\"line\">            return redirect(&apos;home&apos;);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        return $next($request);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p> 当然在这里少不了路由的代码，我们的请求先到路由，然后到中间件最后到控制器。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Route::get(&apos;getuser/user/&#123;id&#125;/age/&#123;age&#125;&apos;,UserController@getUser)-&gt;middleware(&apos;CheckAge&apos;);</div></pre></td></tr></table></figure></p>\n<p> 在这段代码中我们把所有请求age大于200的重定向到<code>home</code>中，佛则就继续，这样就是实现了参数过滤。这就是中间件的基本作用。</p>\n<h1 id=\"注册中间件\"><a href=\"#注册中间件\" class=\"headerlink\" title=\"注册中间件\"></a>注册中间件</h1><p> 我们的中间件在使用前，是需要注册的。否则我们无法正常调用到我们的中间件。这个注册文件在<code>app/Http/Kernel.php</code>中。我们打开这个文件。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?php</div><div class=\"line\"></div><div class=\"line\">namespace App\\Http;</div><div class=\"line\"></div><div class=\"line\">use Illuminate\\Foundation\\Http\\Kernel as HttpKernel;</div><div class=\"line\"></div><div class=\"line\">class Kernel extends HttpKernel</div><div class=\"line\">&#123;</div><div class=\"line\">    // 这里注册是全局的中间件，在所有的都需要经过这个中间件来过滤信息，无论是来之web的请求还是API的///请求</div><div class=\"line\">    protected $middleware = [</div><div class=\"line\">        \\Illuminate\\Foundation\\Http\\Middleware\\CheckForMaintenanceMode::class,</div><div class=\"line\">    ];</div><div class=\"line\"></div><div class=\"line\">    // 中间件群组，在这里我们可以注册中间件群组，用来给请求批量的添加空间。这里laravel中web请求默认     //都必须经过web群组的中间的过滤，api请求需要经过api群组的中间件过滤。使用实例在下边已经给出。</div><div class=\"line\">    protected $middlewareGroups = [</div><div class=\"line\">        &apos;web&apos; =&gt; [</div><div class=\"line\">            \\App\\Http\\Middleware\\EncryptCookies::class,</div><div class=\"line\">            \\Illuminate\\Cookie\\Middleware\\AddQueuedCookiesToResponse::class,</div><div class=\"line\">            \\Illuminate\\Session\\Middleware\\StartSession::class,</div><div class=\"line\">            \\Illuminate\\View\\Middleware\\ShareErrorsFromSession::class,</div><div class=\"line\">            \\App\\Http\\Middleware\\VerifyCsrfToken::class,</div><div class=\"line\">        ],</div><div class=\"line\"></div><div class=\"line\">        &apos;api&apos; =&gt; [</div><div class=\"line\">            &apos;throttle:60,1&apos;,</div><div class=\"line\">        ],</div><div class=\"line\">    ];</div><div class=\"line\">    </div><div class=\"line\">    // 非全局的中间件，单独给某些路由指定下面的中间件（用户自己编写）。</div><div class=\"line\">    protected $routeMiddleware = [</div><div class=\"line\">        &apos;auth&apos; =&gt; \\App\\Http\\Middleware\\Authenticate::class,</div><div class=\"line\">        &apos;auth.basic&apos; =&gt; \\Illuminate\\Auth\\Middleware\\AuthenticateWithBasicAuth::class,</div><div class=\"line\">        &apos;can&apos; =&gt; \\Illuminate\\Foundation\\Http\\Middleware\\Authorize::class,</div><div class=\"line\">        &apos;guest&apos; =&gt; \\App\\Http\\Middleware\\RedirectIfAuthenticated::class,</div><div class=\"line\">        &apos;throttle&apos; =&gt; \\Illuminate\\Routing\\Middleware\\ThrottleRequests::class,</div><div class=\"line\">    ];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>群组使用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Route::group([&apos;middleware&apos; =&gt; [&apos;web&apos;]], function () &#123;</div><div class=\"line\">    //</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>我们可以看出这个<code>Kernel.php</code>文件中有是哪个属性，分别为 <code>protected $middleware</code> <code>protected $middlewareGroups</code> <code>protected $routeMiddleware</code> 这三个属性分别用来注册<code>全局中间件</code> <code>群组中间件</code> <code>和自定义中间件</code>。</p>\n<h3 id=\"特殊中间件\"><a href=\"#特殊中间件\" class=\"headerlink\" title=\"特殊中间件\"></a>特殊中间件</h3><p>在中间件中用连个比较特殊的中间件，分别为<code>前置中间件</code> <code>和后置中间件</code>。顾名思义，前置中间件就是在请求前运作的，后置中间件就是在请求后运作的。这有什么用呢？我们可以在这里举一个栗子：</p>\n<p>在正常的项目中我们肯定要记录一些数据操作记录，用来跟踪每次请求的逻辑处理。方便我们在项目出现bug时候跟踪数据。<br>在laravel中我们用下面函数来进行sql语句的记录：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">DB::enableQueryLog();</div><div class=\"line\">DB::getQueryLog();</div></pre></td></tr></table></figure></p>\n<p>我们可以将<code>DB::enableQueryLog()</code> 放在需要记录sql语句的请求的前置中间件中，用来开启sql记录。将<code>DB::getQueryLog()</code>放在需要记录请求的后置中间件中，记录所执行的sql。</p>\n<p>这就是中间件的作用。</p>\n<h3 id=\"中间件参数\"><a href=\"#中间件参数\" class=\"headerlink\" title=\"中间件参数\"></a>中间件参数</h3><p>在调取中间件时，我们可以穿的附加参数。例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?php</div><div class=\"line\"></div><div class=\"line\">namespace App\\Http\\Middleware;</div><div class=\"line\"></div><div class=\"line\">use Closure;</div><div class=\"line\"></div><div class=\"line\">class CheckRole</div><div class=\"line\">&#123;</div><div class=\"line\">    /**</div><div class=\"line\">     * 处理传入的请求</div><div class=\"line\">     *</div><div class=\"line\">     * @param  \\Illuminate\\Http\\Request  $request</div><div class=\"line\">     * @param  \\Closure  $next</div><div class=\"line\">     * @param  string  $role</div><div class=\"line\">     * @return mixed</div><div class=\"line\">     */</div><div class=\"line\">    public function handle($request, Closure $next, $role)</div><div class=\"line\">    &#123;</div><div class=\"line\">        if (! $request-&gt;user()-&gt;hasRole($role)) &#123;</div><div class=\"line\">            // Redirect...</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        return $next($request);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>传递指定参数可以:隔开<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Route::put(&apos;post/&#123;id&#125;&apos;, function ($id) &#123;</div><div class=\"line\">    //</div><div class=\"line\">&#125;)-&gt;middleware(&apos;role:editor&apos;);</div></pre></td></tr></table></figure></p>\n<p>好了，本节就到此为止了。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Laravel-学习笔记四Http中间件\"><a href=\"#Laravel-学习笔记四Http中间件\" class=\"headerlink\" title=\"Laravel 学习笔记四Http中间件\"></a>Laravel 学习笔记四Http中间件</h1><p>标签（空格分隔）： laravel</p>\n<hr>\n<h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>  关于中间件，从字面意思上我们很好理解中间件的意思。就是存在两个节点之间的节点。这里我们所描述的节点是<code>Route</code>和<code>Controller</code>。</p>\n<p>  一次正产给的请求是客户端发送请求，服务端接受请求，然后对参数做一些判断然后处理逻辑。任何请求都会从进入控制器开始就直接进入真正的逻辑处理，我们会先判断请求参数是否正确，以防止黑客攻击。比较常见的处理逻辑反馈有403、503页面。这些是我们在接受参数后对参数进行处理，从而反馈到客户端。如果我们传递参数较多，对参数筛选很严格的话，就会出现很多对参数判断的代码，以及当一些对参数判断的代码需要复用时候我们无法将其从控制器中分离出来，这些都是我们平常工作中饭经常遇到的问题。这是<code>中间件</code>就能很好地处理这个问题了。</p>\n<p>  间件的作用是在请求从<code>Route</code>进入控制器是时，我们可以先将请求引入到中间件中，对数据做些处理，然后才引入到控制器中，或者直接反馈给客户端。这样我们的控制器可以专心于数据逻辑，从而代码简洁，以及参数判断代码会得到复用，很大的提升工作效率。</p>\n<h3 id=\"创建一个控制器\"><a href=\"#创建一个控制器\" class=\"headerlink\" title=\"创建一个控制器\"></a>创建一个控制器</h3><p>第一步我们来创建一个中间件。在<code>larval</code>中，自带了一条命令用来创建中间件。<code>php artisan make:middleware CheckAge</code> 。我们可以用此命令创建一个<code>CheckAge</code>的中间，用来过滤用户的年龄。穿件代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?php</div><div class=\"line\"></div><div class=\"line\">namespace App\\Http\\Middleware;</div><div class=\"line\"></div><div class=\"line\">use Closure;</div><div class=\"line\"></div><div class=\"line\">class CheckAge</div><div class=\"line\">&#123;</div><div class=\"line\">    /**</div><div class=\"line\">     * 运行请求过滤器。</div><div class=\"line\">     *</div><div class=\"line\">     * @param  \\Illuminate\\Http\\Request  $request</div><div class=\"line\">     * @param  \\Closure  $next</div><div class=\"line\">     * @return mixed</div><div class=\"line\">     */</div><div class=\"line\">    public function handle($request, Closure $next)</div><div class=\"line\">    &#123;</div><div class=\"line\">        if ($request-&gt;age &lt;= 200) &#123;</div><div class=\"line\">            return redirect(&apos;home&apos;);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        return $next($request);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p> 当然在这里少不了路由的代码，我们的请求先到路由，然后到中间件最后到控制器。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Route::get(&apos;getuser/user/&#123;id&#125;/age/&#123;age&#125;&apos;,UserController@getUser)-&gt;middleware(&apos;CheckAge&apos;);</div></pre></td></tr></table></figure></p>\n<p> 在这段代码中我们把所有请求age大于200的重定向到<code>home</code>中，佛则就继续，这样就是实现了参数过滤。这就是中间件的基本作用。</p>\n<h1 id=\"注册中间件\"><a href=\"#注册中间件\" class=\"headerlink\" title=\"注册中间件\"></a>注册中间件</h1><p> 我们的中间件在使用前，是需要注册的。否则我们无法正常调用到我们的中间件。这个注册文件在<code>app/Http/Kernel.php</code>中。我们打开这个文件。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?php</div><div class=\"line\"></div><div class=\"line\">namespace App\\Http;</div><div class=\"line\"></div><div class=\"line\">use Illuminate\\Foundation\\Http\\Kernel as HttpKernel;</div><div class=\"line\"></div><div class=\"line\">class Kernel extends HttpKernel</div><div class=\"line\">&#123;</div><div class=\"line\">    // 这里注册是全局的中间件，在所有的都需要经过这个中间件来过滤信息，无论是来之web的请求还是API的///请求</div><div class=\"line\">    protected $middleware = [</div><div class=\"line\">        \\Illuminate\\Foundation\\Http\\Middleware\\CheckForMaintenanceMode::class,</div><div class=\"line\">    ];</div><div class=\"line\"></div><div class=\"line\">    // 中间件群组，在这里我们可以注册中间件群组，用来给请求批量的添加空间。这里laravel中web请求默认     //都必须经过web群组的中间的过滤，api请求需要经过api群组的中间件过滤。使用实例在下边已经给出。</div><div class=\"line\">    protected $middlewareGroups = [</div><div class=\"line\">        &apos;web&apos; =&gt; [</div><div class=\"line\">            \\App\\Http\\Middleware\\EncryptCookies::class,</div><div class=\"line\">            \\Illuminate\\Cookie\\Middleware\\AddQueuedCookiesToResponse::class,</div><div class=\"line\">            \\Illuminate\\Session\\Middleware\\StartSession::class,</div><div class=\"line\">            \\Illuminate\\View\\Middleware\\ShareErrorsFromSession::class,</div><div class=\"line\">            \\App\\Http\\Middleware\\VerifyCsrfToken::class,</div><div class=\"line\">        ],</div><div class=\"line\"></div><div class=\"line\">        &apos;api&apos; =&gt; [</div><div class=\"line\">            &apos;throttle:60,1&apos;,</div><div class=\"line\">        ],</div><div class=\"line\">    ];</div><div class=\"line\">    </div><div class=\"line\">    // 非全局的中间件，单独给某些路由指定下面的中间件（用户自己编写）。</div><div class=\"line\">    protected $routeMiddleware = [</div><div class=\"line\">        &apos;auth&apos; =&gt; \\App\\Http\\Middleware\\Authenticate::class,</div><div class=\"line\">        &apos;auth.basic&apos; =&gt; \\Illuminate\\Auth\\Middleware\\AuthenticateWithBasicAuth::class,</div><div class=\"line\">        &apos;can&apos; =&gt; \\Illuminate\\Foundation\\Http\\Middleware\\Authorize::class,</div><div class=\"line\">        &apos;guest&apos; =&gt; \\App\\Http\\Middleware\\RedirectIfAuthenticated::class,</div><div class=\"line\">        &apos;throttle&apos; =&gt; \\Illuminate\\Routing\\Middleware\\ThrottleRequests::class,</div><div class=\"line\">    ];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>群组使用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Route::group([&apos;middleware&apos; =&gt; [&apos;web&apos;]], function () &#123;</div><div class=\"line\">    //</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>我们可以看出这个<code>Kernel.php</code>文件中有是哪个属性，分别为 <code>protected $middleware</code> <code>protected $middlewareGroups</code> <code>protected $routeMiddleware</code> 这三个属性分别用来注册<code>全局中间件</code> <code>群组中间件</code> <code>和自定义中间件</code>。</p>\n<h3 id=\"特殊中间件\"><a href=\"#特殊中间件\" class=\"headerlink\" title=\"特殊中间件\"></a>特殊中间件</h3><p>在中间件中用连个比较特殊的中间件，分别为<code>前置中间件</code> <code>和后置中间件</code>。顾名思义，前置中间件就是在请求前运作的，后置中间件就是在请求后运作的。这有什么用呢？我们可以在这里举一个栗子：</p>\n<p>在正常的项目中我们肯定要记录一些数据操作记录，用来跟踪每次请求的逻辑处理。方便我们在项目出现bug时候跟踪数据。<br>在laravel中我们用下面函数来进行sql语句的记录：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">DB::enableQueryLog();</div><div class=\"line\">DB::getQueryLog();</div></pre></td></tr></table></figure></p>\n<p>我们可以将<code>DB::enableQueryLog()</code> 放在需要记录sql语句的请求的前置中间件中，用来开启sql记录。将<code>DB::getQueryLog()</code>放在需要记录请求的后置中间件中，记录所执行的sql。</p>\n<p>这就是中间件的作用。</p>\n<h3 id=\"中间件参数\"><a href=\"#中间件参数\" class=\"headerlink\" title=\"中间件参数\"></a>中间件参数</h3><p>在调取中间件时，我们可以穿的附加参数。例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?php</div><div class=\"line\"></div><div class=\"line\">namespace App\\Http\\Middleware;</div><div class=\"line\"></div><div class=\"line\">use Closure;</div><div class=\"line\"></div><div class=\"line\">class CheckRole</div><div class=\"line\">&#123;</div><div class=\"line\">    /**</div><div class=\"line\">     * 处理传入的请求</div><div class=\"line\">     *</div><div class=\"line\">     * @param  \\Illuminate\\Http\\Request  $request</div><div class=\"line\">     * @param  \\Closure  $next</div><div class=\"line\">     * @param  string  $role</div><div class=\"line\">     * @return mixed</div><div class=\"line\">     */</div><div class=\"line\">    public function handle($request, Closure $next, $role)</div><div class=\"line\">    &#123;</div><div class=\"line\">        if (! $request-&gt;user()-&gt;hasRole($role)) &#123;</div><div class=\"line\">            // Redirect...</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        return $next($request);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>传递指定参数可以:隔开<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Route::put(&apos;post/&#123;id&#125;&apos;, function ($id) &#123;</div><div class=\"line\">    //</div><div class=\"line\">&#125;)-&gt;middleware(&apos;role:editor&apos;);</div></pre></td></tr></table></figure></p>\n<p>好了，本节就到此为止了。</p>\n"},{"layout":"'laravel","title":"laravel学习笔记","date":"2016-02-08T14:10:05.000Z","_content":"# laravel-  学习笔记\n------\n\n \n\n## laravel 配置篇 ##\nlavel 有三种安装方法：\n\n - 使用composer安装\n - 使用laravel安装器安装\n - 下载解压安装\n \n###  composer ###\n先说第一种，使用composer安装，使用 composer create-project 进行安装\n```\ncomposer create-project --prefer-dist laravel/laravel blog\n```\n### laravel安装器### \n\n 使用laravel安装器首先需要安装laravel安装器，让我们来使用composer安装laravel安装器\n\n```\ncomposer global require \"laravel/installer\"\n```\n\n当然我们在使用laravel安装器安装laravel之前，需要配置PATH环境变量，不然系统找不到laravel安装器\nlaravel安装器默认位置\nWindows:\n`C:\\Users\\admin\\AppData\\Roaming\\Composer\\vendor\\bin`\nlinux:\n`~/.composer/vendor/bin`\n\n\n### 下载解压安装 ###\n因为composer可能被墙，所以golaravel给出了已经集成了所有以来的laravel意见安装包\n下载地址为`http://www.golaravel.com/download/`\n\n\n# 配置\nlaravel所有的配置文件都在根目录conf文件夹下\n当然我们不能忽视的一个很重的一点，就是要设置laravel的应用key，如果不加以设置，我的会话和其他需要加密的信息将会不安全，让然我们通过composer或者laravel安装器安装的laravel不需要进行配置，因为在我们安装laravel时候composer和laravel已经给我们配置好了，所以通过第三种方法安装laravel的，需要为laravel配置新的key，生成key的方法是，在laravel根目录输入`key:generate`.\nlaravel所有的配置都是conf文件夹下的，但是为了方便配置，laravel调用根目录的.env,我们配置框架最关键的数据库信息卸载根目录的.env文件里\n\n# 开发服务器\n\nlaravel为我们提供了一个简单的开发服务器，当我需要时只需要在跟路面输入命令`php artisan serve`即可。但是这毕竟是开发使用过的，不能再生产环境中使用。\n#laravel其他\nlaravel还为我们提供很多其他功能，具体我就不在此赘述，需要请看官网。\n","source":"_posts/larave学习笔记.md","raw":"layout: '''laravel'\ntitle: laravel学习笔记\ndate: 2016-02-08 22:10:05\ntags:\n---\n# laravel-  学习笔记\n------\n\n \n\n## laravel 配置篇 ##\nlavel 有三种安装方法：\n\n - 使用composer安装\n - 使用laravel安装器安装\n - 下载解压安装\n \n###  composer ###\n先说第一种，使用composer安装，使用 composer create-project 进行安装\n```\ncomposer create-project --prefer-dist laravel/laravel blog\n```\n### laravel安装器### \n\n 使用laravel安装器首先需要安装laravel安装器，让我们来使用composer安装laravel安装器\n\n```\ncomposer global require \"laravel/installer\"\n```\n\n当然我们在使用laravel安装器安装laravel之前，需要配置PATH环境变量，不然系统找不到laravel安装器\nlaravel安装器默认位置\nWindows:\n`C:\\Users\\admin\\AppData\\Roaming\\Composer\\vendor\\bin`\nlinux:\n`~/.composer/vendor/bin`\n\n\n### 下载解压安装 ###\n因为composer可能被墙，所以golaravel给出了已经集成了所有以来的laravel意见安装包\n下载地址为`http://www.golaravel.com/download/`\n\n\n# 配置\nlaravel所有的配置文件都在根目录conf文件夹下\n当然我们不能忽视的一个很重的一点，就是要设置laravel的应用key，如果不加以设置，我的会话和其他需要加密的信息将会不安全，让然我们通过composer或者laravel安装器安装的laravel不需要进行配置，因为在我们安装laravel时候composer和laravel已经给我们配置好了，所以通过第三种方法安装laravel的，需要为laravel配置新的key，生成key的方法是，在laravel根目录输入`key:generate`.\nlaravel所有的配置都是conf文件夹下的，但是为了方便配置，laravel调用根目录的.env,我们配置框架最关键的数据库信息卸载根目录的.env文件里\n\n# 开发服务器\n\nlaravel为我们提供了一个简单的开发服务器，当我需要时只需要在跟路面输入命令`php artisan serve`即可。但是这毕竟是开发使用过的，不能再生产环境中使用。\n#laravel其他\nlaravel还为我们提供很多其他功能，具体我就不在此赘述，需要请看官网。\n","slug":"larave学习笔记","published":1,"updated":"2018-07-12T13:56:07.558Z","comments":1,"photos":[],"link":"","_id":"cjkb4lzjj0006trwwwr2xpp4b","content":"<h1 id=\"laravel-学习笔记\"><a href=\"#laravel-学习笔记\" class=\"headerlink\" title=\"laravel-  学习笔记\"></a>laravel-  学习笔记</h1><hr>\n<h2 id=\"laravel-配置篇\"><a href=\"#laravel-配置篇\" class=\"headerlink\" title=\"laravel 配置篇\"></a>laravel 配置篇</h2><p>lavel 有三种安装方法：</p>\n<ul>\n<li>使用composer安装</li>\n<li>使用laravel安装器安装</li>\n<li>下载解压安装</li>\n</ul>\n<h3 id=\"composer\"><a href=\"#composer\" class=\"headerlink\" title=\"composer\"></a>composer</h3><p>先说第一种，使用composer安装，使用 composer create-project 进行安装<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">composer create-project --prefer-dist laravel/laravel blog</div></pre></td></tr></table></figure></p>\n<h3 id=\"laravel安装器\"><a href=\"#laravel安装器\" class=\"headerlink\" title=\"laravel安装器\"></a>laravel安装器</h3><p> 使用laravel安装器首先需要安装laravel安装器，让我们来使用composer安装laravel安装器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">composer global require &quot;laravel/installer&quot;</div></pre></td></tr></table></figure>\n<p>当然我们在使用laravel安装器安装laravel之前，需要配置PATH环境变量，不然系统找不到laravel安装器<br>laravel安装器默认位置<br>Windows:<br><code>C:\\Users\\admin\\AppData\\Roaming\\Composer\\vendor\\bin</code><br>linux:<br><code>~/.composer/vendor/bin</code></p>\n<h3 id=\"下载解压安装\"><a href=\"#下载解压安装\" class=\"headerlink\" title=\"下载解压安装\"></a>下载解压安装</h3><p>因为composer可能被墙，所以golaravel给出了已经集成了所有以来的laravel意见安装包<br>下载地址为<code>http://www.golaravel.com/download/</code></p>\n<h1 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h1><p>laravel所有的配置文件都在根目录conf文件夹下<br>当然我们不能忽视的一个很重的一点，就是要设置laravel的应用key，如果不加以设置，我的会话和其他需要加密的信息将会不安全，让然我们通过composer或者laravel安装器安装的laravel不需要进行配置，因为在我们安装laravel时候composer和laravel已经给我们配置好了，所以通过第三种方法安装laravel的，需要为laravel配置新的key，生成key的方法是，在laravel根目录输入<code>key:generate</code>.<br>laravel所有的配置都是conf文件夹下的，但是为了方便配置，laravel调用根目录的.env,我们配置框架最关键的数据库信息卸载根目录的.env文件里</p>\n<h1 id=\"开发服务器\"><a href=\"#开发服务器\" class=\"headerlink\" title=\"开发服务器\"></a>开发服务器</h1><p>laravel为我们提供了一个简单的开发服务器，当我需要时只需要在跟路面输入命令<code>php artisan serve</code>即可。但是这毕竟是开发使用过的，不能再生产环境中使用。</p>\n<p>#laravel其他<br>laravel还为我们提供很多其他功能，具体我就不在此赘述，需要请看官网。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"laravel-学习笔记\"><a href=\"#laravel-学习笔记\" class=\"headerlink\" title=\"laravel-  学习笔记\"></a>laravel-  学习笔记</h1><hr>\n<h2 id=\"laravel-配置篇\"><a href=\"#laravel-配置篇\" class=\"headerlink\" title=\"laravel 配置篇\"></a>laravel 配置篇</h2><p>lavel 有三种安装方法：</p>\n<ul>\n<li>使用composer安装</li>\n<li>使用laravel安装器安装</li>\n<li>下载解压安装</li>\n</ul>\n<h3 id=\"composer\"><a href=\"#composer\" class=\"headerlink\" title=\"composer\"></a>composer</h3><p>先说第一种，使用composer安装，使用 composer create-project 进行安装<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">composer create-project --prefer-dist laravel/laravel blog</div></pre></td></tr></table></figure></p>\n<h3 id=\"laravel安装器\"><a href=\"#laravel安装器\" class=\"headerlink\" title=\"laravel安装器\"></a>laravel安装器</h3><p> 使用laravel安装器首先需要安装laravel安装器，让我们来使用composer安装laravel安装器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">composer global require &quot;laravel/installer&quot;</div></pre></td></tr></table></figure>\n<p>当然我们在使用laravel安装器安装laravel之前，需要配置PATH环境变量，不然系统找不到laravel安装器<br>laravel安装器默认位置<br>Windows:<br><code>C:\\Users\\admin\\AppData\\Roaming\\Composer\\vendor\\bin</code><br>linux:<br><code>~/.composer/vendor/bin</code></p>\n<h3 id=\"下载解压安装\"><a href=\"#下载解压安装\" class=\"headerlink\" title=\"下载解压安装\"></a>下载解压安装</h3><p>因为composer可能被墙，所以golaravel给出了已经集成了所有以来的laravel意见安装包<br>下载地址为<code>http://www.golaravel.com/download/</code></p>\n<h1 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h1><p>laravel所有的配置文件都在根目录conf文件夹下<br>当然我们不能忽视的一个很重的一点，就是要设置laravel的应用key，如果不加以设置，我的会话和其他需要加密的信息将会不安全，让然我们通过composer或者laravel安装器安装的laravel不需要进行配置，因为在我们安装laravel时候composer和laravel已经给我们配置好了，所以通过第三种方法安装laravel的，需要为laravel配置新的key，生成key的方法是，在laravel根目录输入<code>key:generate</code>.<br>laravel所有的配置都是conf文件夹下的，但是为了方便配置，laravel调用根目录的.env,我们配置框架最关键的数据库信息卸载根目录的.env文件里</p>\n<h1 id=\"开发服务器\"><a href=\"#开发服务器\" class=\"headerlink\" title=\"开发服务器\"></a>开发服务器</h1><p>laravel为我们提供了一个简单的开发服务器，当我需要时只需要在跟路面输入命令<code>php artisan serve</code>即可。但是这毕竟是开发使用过的，不能再生产环境中使用。</p>\n<p>#laravel其他<br>laravel还为我们提供很多其他功能，具体我就不在此赘述，需要请看官网。</p>\n"},{"title":"php curl","date":"2015-07-18T12:28:10.000Z","_content":"\n\n### 参数1\n\ncurl_setopt \nCURLOPT_RETURNTRANSFER 表示是否直接输出到控制台\n eg:\n \n```php\n$curl = curl_init();\ncurl_setopt($curl, CURLOPT_URL, 'http://baidu.com');\ncurl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);\ncurl_setopt($curl, CURLOPT_HEADER, 0);\n// curl_setopt($curl, CURLOPT_POST, 1);\n$ret = curl_exec($curl);\n// var_dump($ret);\n```\n\n输出结果为:\n\n![image](/photo/img/php-curl/DingTalk20180718203726.png)\n\n打开参数\n\n```\n<?php\n$curl = curl_init();\ncurl_setopt($curl, CURLOPT_URL, 'http://baidu.com');\ncurl_setopt($curl, CURLOPT_RETURNTRANSFER, 0);\ncurl_setopt($curl, CURLOPT_HEADER, 0);\n// curl_setopt($curl, CURLOPT_POST, 1);\n$ret = curl_exec($curl);\n// var_dump($ret);\n```\n\n输出结果\n\n![image](/photo/img/php-curl/DingTalk20180718204055.png)\n\n\n### 参数2\n\nCURLOPT_HEADER\nCURLOPT_HEADER 表示是否输出头信息\n\n```\n<?php\n$curl = curl_init();\ncurl_setopt($curl, CURLOPT_URL, 'http://baidu.com');\ncurl_setopt($curl, CURLOPT_RETURNTRANSFER, 0);\ncurl_setopt($curl, CURLOPT_HEADER, 1);\n// curl_setopt($curl, CURLOPT_POST, 1);\n$ret = curl_exec($curl);\n// var_dump($ret);\n```\n返回结果\n![image](/photo/img/php-curl/DingTalk20180718204343.png)\n\n```\n<?php\n$curl = curl_init();\ncurl_setopt($curl, CURLOPT_URL, 'http://baidu.com');\ncurl_setopt($curl, CURLOPT_RETURNTRANSFER, 0);\ncurl_setopt($curl, CURLOPT_HEADER, 0);\n// curl_setopt($curl, CURLOPT_POST, 1);\n$ret = curl_exec($curl);\n// var_dump($ret);\n```\n返回结果\n![image](/photo/img/php-curl/DingTalk20180718204411.png)\n\n\n## get 与 post\n\n`get`\n```\n//初始化\n$curl = curl_init();\n//设置url\ncurl_setopt($curl, CURLOPT_URL, 'http://baidu.com');\ncurl_setopt($curl, CURLOPT_RETURNTRANSFER, 0);\ncurl_setopt($curl, CURLOPT_HEADER, 0);\n$ret = curl_exec($curl);\n//关闭\ncurl_close($curl);\n```\n\n`post`\n\n```\n//初始化\n$curl = curl_init();\n//设置url\ncurl_setopt($curl, CURLOPT_URL, 'http://baidu.com');\ncurl_setopt($curl, CURLOPT_RETURNTRANSFER, 0);\ncurl_setopt($curl, CURLOPT_HEADER, 0);\ncurl_setopt($curl, CURLOPT_POST, 1);\n$ret = curl_exec($curl);\n//关闭\ncurl_close($curl);\n```","source":"_posts/php-curl.md","raw":"---\ntitle: php curl\ndate: 2015-07-18 20:28:10\ntags: curl\n---\n\n\n### 参数1\n\ncurl_setopt \nCURLOPT_RETURNTRANSFER 表示是否直接输出到控制台\n eg:\n \n```php\n$curl = curl_init();\ncurl_setopt($curl, CURLOPT_URL, 'http://baidu.com');\ncurl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);\ncurl_setopt($curl, CURLOPT_HEADER, 0);\n// curl_setopt($curl, CURLOPT_POST, 1);\n$ret = curl_exec($curl);\n// var_dump($ret);\n```\n\n输出结果为:\n\n![image](/photo/img/php-curl/DingTalk20180718203726.png)\n\n打开参数\n\n```\n<?php\n$curl = curl_init();\ncurl_setopt($curl, CURLOPT_URL, 'http://baidu.com');\ncurl_setopt($curl, CURLOPT_RETURNTRANSFER, 0);\ncurl_setopt($curl, CURLOPT_HEADER, 0);\n// curl_setopt($curl, CURLOPT_POST, 1);\n$ret = curl_exec($curl);\n// var_dump($ret);\n```\n\n输出结果\n\n![image](/photo/img/php-curl/DingTalk20180718204055.png)\n\n\n### 参数2\n\nCURLOPT_HEADER\nCURLOPT_HEADER 表示是否输出头信息\n\n```\n<?php\n$curl = curl_init();\ncurl_setopt($curl, CURLOPT_URL, 'http://baidu.com');\ncurl_setopt($curl, CURLOPT_RETURNTRANSFER, 0);\ncurl_setopt($curl, CURLOPT_HEADER, 1);\n// curl_setopt($curl, CURLOPT_POST, 1);\n$ret = curl_exec($curl);\n// var_dump($ret);\n```\n返回结果\n![image](/photo/img/php-curl/DingTalk20180718204343.png)\n\n```\n<?php\n$curl = curl_init();\ncurl_setopt($curl, CURLOPT_URL, 'http://baidu.com');\ncurl_setopt($curl, CURLOPT_RETURNTRANSFER, 0);\ncurl_setopt($curl, CURLOPT_HEADER, 0);\n// curl_setopt($curl, CURLOPT_POST, 1);\n$ret = curl_exec($curl);\n// var_dump($ret);\n```\n返回结果\n![image](/photo/img/php-curl/DingTalk20180718204411.png)\n\n\n## get 与 post\n\n`get`\n```\n//初始化\n$curl = curl_init();\n//设置url\ncurl_setopt($curl, CURLOPT_URL, 'http://baidu.com');\ncurl_setopt($curl, CURLOPT_RETURNTRANSFER, 0);\ncurl_setopt($curl, CURLOPT_HEADER, 0);\n$ret = curl_exec($curl);\n//关闭\ncurl_close($curl);\n```\n\n`post`\n\n```\n//初始化\n$curl = curl_init();\n//设置url\ncurl_setopt($curl, CURLOPT_URL, 'http://baidu.com');\ncurl_setopt($curl, CURLOPT_RETURNTRANSFER, 0);\ncurl_setopt($curl, CURLOPT_HEADER, 0);\ncurl_setopt($curl, CURLOPT_POST, 1);\n$ret = curl_exec($curl);\n//关闭\ncurl_close($curl);\n```","slug":"php-curl","published":1,"updated":"2018-07-18T12:47:59.013Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkb4lzjk0007trww19ah00qy","content":"<h3 id=\"参数1\"><a href=\"#参数1\" class=\"headerlink\" title=\"参数1\"></a>参数1</h3><p>curl_setopt<br>CURLOPT_RETURNTRANSFER 表示是否直接输出到控制台<br> eg:</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">$curl = curl_init();</div><div class=\"line\">curl_setopt($curl, CURLOPT_URL, <span class=\"string\">'http://baidu.com'</span>);</div><div class=\"line\">curl_setopt($curl, CURLOPT_RETURNTRANSFER, <span class=\"number\">1</span>);</div><div class=\"line\">curl_setopt($curl, CURLOPT_HEADER, <span class=\"number\">0</span>);</div><div class=\"line\"><span class=\"comment\">// curl_setopt($curl, CURLOPT_POST, 1);</span></div><div class=\"line\">$ret = curl_exec($curl);</div><div class=\"line\"><span class=\"comment\">// var_dump($ret);</span></div></pre></td></tr></table></figure>\n<p>输出结果为:</p>\n<p><img src=\"/photo/img/php-curl/DingTalk20180718203726.png\" alt=\"image\"></p>\n<p>打开参数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?php</div><div class=\"line\">$curl = curl_init();</div><div class=\"line\">curl_setopt($curl, CURLOPT_URL, &apos;http://baidu.com&apos;);</div><div class=\"line\">curl_setopt($curl, CURLOPT_RETURNTRANSFER, 0);</div><div class=\"line\">curl_setopt($curl, CURLOPT_HEADER, 0);</div><div class=\"line\">// curl_setopt($curl, CURLOPT_POST, 1);</div><div class=\"line\">$ret = curl_exec($curl);</div><div class=\"line\">// var_dump($ret);</div></pre></td></tr></table></figure>\n<p>输出结果</p>\n<p><img src=\"/photo/img/php-curl/DingTalk20180718204055.png\" alt=\"image\"></p>\n<h3 id=\"参数2\"><a href=\"#参数2\" class=\"headerlink\" title=\"参数2\"></a>参数2</h3><p>CURLOPT_HEADER<br>CURLOPT_HEADER 表示是否输出头信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?php</div><div class=\"line\">$curl = curl_init();</div><div class=\"line\">curl_setopt($curl, CURLOPT_URL, &apos;http://baidu.com&apos;);</div><div class=\"line\">curl_setopt($curl, CURLOPT_RETURNTRANSFER, 0);</div><div class=\"line\">curl_setopt($curl, CURLOPT_HEADER, 1);</div><div class=\"line\">// curl_setopt($curl, CURLOPT_POST, 1);</div><div class=\"line\">$ret = curl_exec($curl);</div><div class=\"line\">// var_dump($ret);</div></pre></td></tr></table></figure>\n<p>返回结果<br><img src=\"/photo/img/php-curl/DingTalk20180718204343.png\" alt=\"image\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?php</div><div class=\"line\">$curl = curl_init();</div><div class=\"line\">curl_setopt($curl, CURLOPT_URL, &apos;http://baidu.com&apos;);</div><div class=\"line\">curl_setopt($curl, CURLOPT_RETURNTRANSFER, 0);</div><div class=\"line\">curl_setopt($curl, CURLOPT_HEADER, 0);</div><div class=\"line\">// curl_setopt($curl, CURLOPT_POST, 1);</div><div class=\"line\">$ret = curl_exec($curl);</div><div class=\"line\">// var_dump($ret);</div></pre></td></tr></table></figure>\n<p>返回结果<br><img src=\"/photo/img/php-curl/DingTalk20180718204411.png\" alt=\"image\"></p>\n<h2 id=\"get-与-post\"><a href=\"#get-与-post\" class=\"headerlink\" title=\"get 与 post\"></a>get 与 post</h2><p><code>get</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">//初始化</div><div class=\"line\">$curl = curl_init();</div><div class=\"line\">//设置url</div><div class=\"line\">curl_setopt($curl, CURLOPT_URL, &apos;http://baidu.com&apos;);</div><div class=\"line\">curl_setopt($curl, CURLOPT_RETURNTRANSFER, 0);</div><div class=\"line\">curl_setopt($curl, CURLOPT_HEADER, 0);</div><div class=\"line\">$ret = curl_exec($curl);</div><div class=\"line\">//关闭</div><div class=\"line\">curl_close($curl);</div></pre></td></tr></table></figure></p>\n<p><code>post</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">//初始化</div><div class=\"line\">$curl = curl_init();</div><div class=\"line\">//设置url</div><div class=\"line\">curl_setopt($curl, CURLOPT_URL, &apos;http://baidu.com&apos;);</div><div class=\"line\">curl_setopt($curl, CURLOPT_RETURNTRANSFER, 0);</div><div class=\"line\">curl_setopt($curl, CURLOPT_HEADER, 0);</div><div class=\"line\">curl_setopt($curl, CURLOPT_POST, 1);</div><div class=\"line\">$ret = curl_exec($curl);</div><div class=\"line\">//关闭</div><div class=\"line\">curl_close($curl);</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"参数1\"><a href=\"#参数1\" class=\"headerlink\" title=\"参数1\"></a>参数1</h3><p>curl_setopt<br>CURLOPT_RETURNTRANSFER 表示是否直接输出到控制台<br> eg:</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">$curl = curl_init();</div><div class=\"line\">curl_setopt($curl, CURLOPT_URL, <span class=\"string\">'http://baidu.com'</span>);</div><div class=\"line\">curl_setopt($curl, CURLOPT_RETURNTRANSFER, <span class=\"number\">1</span>);</div><div class=\"line\">curl_setopt($curl, CURLOPT_HEADER, <span class=\"number\">0</span>);</div><div class=\"line\"><span class=\"comment\">// curl_setopt($curl, CURLOPT_POST, 1);</span></div><div class=\"line\">$ret = curl_exec($curl);</div><div class=\"line\"><span class=\"comment\">// var_dump($ret);</span></div></pre></td></tr></table></figure>\n<p>输出结果为:</p>\n<p><img src=\"/photo/img/php-curl/DingTalk20180718203726.png\" alt=\"image\"></p>\n<p>打开参数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?php</div><div class=\"line\">$curl = curl_init();</div><div class=\"line\">curl_setopt($curl, CURLOPT_URL, &apos;http://baidu.com&apos;);</div><div class=\"line\">curl_setopt($curl, CURLOPT_RETURNTRANSFER, 0);</div><div class=\"line\">curl_setopt($curl, CURLOPT_HEADER, 0);</div><div class=\"line\">// curl_setopt($curl, CURLOPT_POST, 1);</div><div class=\"line\">$ret = curl_exec($curl);</div><div class=\"line\">// var_dump($ret);</div></pre></td></tr></table></figure>\n<p>输出结果</p>\n<p><img src=\"/photo/img/php-curl/DingTalk20180718204055.png\" alt=\"image\"></p>\n<h3 id=\"参数2\"><a href=\"#参数2\" class=\"headerlink\" title=\"参数2\"></a>参数2</h3><p>CURLOPT_HEADER<br>CURLOPT_HEADER 表示是否输出头信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?php</div><div class=\"line\">$curl = curl_init();</div><div class=\"line\">curl_setopt($curl, CURLOPT_URL, &apos;http://baidu.com&apos;);</div><div class=\"line\">curl_setopt($curl, CURLOPT_RETURNTRANSFER, 0);</div><div class=\"line\">curl_setopt($curl, CURLOPT_HEADER, 1);</div><div class=\"line\">// curl_setopt($curl, CURLOPT_POST, 1);</div><div class=\"line\">$ret = curl_exec($curl);</div><div class=\"line\">// var_dump($ret);</div></pre></td></tr></table></figure>\n<p>返回结果<br><img src=\"/photo/img/php-curl/DingTalk20180718204343.png\" alt=\"image\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?php</div><div class=\"line\">$curl = curl_init();</div><div class=\"line\">curl_setopt($curl, CURLOPT_URL, &apos;http://baidu.com&apos;);</div><div class=\"line\">curl_setopt($curl, CURLOPT_RETURNTRANSFER, 0);</div><div class=\"line\">curl_setopt($curl, CURLOPT_HEADER, 0);</div><div class=\"line\">// curl_setopt($curl, CURLOPT_POST, 1);</div><div class=\"line\">$ret = curl_exec($curl);</div><div class=\"line\">// var_dump($ret);</div></pre></td></tr></table></figure>\n<p>返回结果<br><img src=\"/photo/img/php-curl/DingTalk20180718204411.png\" alt=\"image\"></p>\n<h2 id=\"get-与-post\"><a href=\"#get-与-post\" class=\"headerlink\" title=\"get 与 post\"></a>get 与 post</h2><p><code>get</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">//初始化</div><div class=\"line\">$curl = curl_init();</div><div class=\"line\">//设置url</div><div class=\"line\">curl_setopt($curl, CURLOPT_URL, &apos;http://baidu.com&apos;);</div><div class=\"line\">curl_setopt($curl, CURLOPT_RETURNTRANSFER, 0);</div><div class=\"line\">curl_setopt($curl, CURLOPT_HEADER, 0);</div><div class=\"line\">$ret = curl_exec($curl);</div><div class=\"line\">//关闭</div><div class=\"line\">curl_close($curl);</div></pre></td></tr></table></figure></p>\n<p><code>post</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">//初始化</div><div class=\"line\">$curl = curl_init();</div><div class=\"line\">//设置url</div><div class=\"line\">curl_setopt($curl, CURLOPT_URL, &apos;http://baidu.com&apos;);</div><div class=\"line\">curl_setopt($curl, CURLOPT_RETURNTRANSFER, 0);</div><div class=\"line\">curl_setopt($curl, CURLOPT_HEADER, 0);</div><div class=\"line\">curl_setopt($curl, CURLOPT_POST, 1);</div><div class=\"line\">$ret = curl_exec($curl);</div><div class=\"line\">//关闭</div><div class=\"line\">curl_close($curl);</div></pre></td></tr></table></figure>"},{"title":"python学习笔记一","date":"2018-07-06T09:43:01.000Z","_content":"\n在php里数组分为索引数组和关联数组\n但sss是在python里这两者数组确实不同的数据类型\nlist:\ndata = [1,2,3,4,5]\n字典\n{data:1}","source":"_posts/python学习笔记一.md","raw":"---\ntitle: python学习笔记一\ndate: 2018-07-06 17:43:01\ntags:\n---\n\n在php里数组分为索引数组和关联数组\n但sss是在python里这两者数组确实不同的数据类型\nlist:\ndata = [1,2,3,4,5]\n字典\n{data:1}","slug":"python学习笔记一","published":1,"updated":"2018-07-18T03:21:32.177Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkb4lzjl0008trwwcw8lzlt0","content":"<p>在php里数组分为索引数组和关联数组<br>但sss是在python里这两者数组确实不同的数据类型<br>list:<br>data = [1,2,3,4,5]<br>字典<br>{data:1}</p>\n","site":{"data":{}},"excerpt":"","more":"<p>在php里数组分为索引数组和关联数组<br>但sss是在python里这两者数组确实不同的数据类型<br>list:<br>data = [1,2,3,4,5]<br>字典<br>{data:1}</p>\n"},{"title":"solr-从控制页面删除数据","date":"2018-06-21T12:21:18.000Z","_content":"\n# 1.xml\n\n![image](/photo/img/2018-06-21/DingTalk20180621202319.png)\n\n```\n<delete><query>*:*</query></delete>\n<commit/>\n```","source":"_posts/solr-从控制页面删除数据.md","raw":"---\ntitle: solr-从控制页面删除数据\ndate: 2018-06-21 20:21:18\ntags:\n---\n\n# 1.xml\n\n![image](/photo/img/2018-06-21/DingTalk20180621202319.png)\n\n```\n<delete><query>*:*</query></delete>\n<commit/>\n```","slug":"solr-从控制页面删除数据","published":1,"updated":"2018-06-21T12:30:05.551Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkb4lzjp000atrww6w8ubtvx","content":"<h1 id=\"1-xml\"><a href=\"#1-xml\" class=\"headerlink\" title=\"1.xml\"></a>1.xml</h1><p><img src=\"/photo/img/2018-06-21/DingTalk20180621202319.png\" alt=\"image\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;delete&gt;&lt;query&gt;*:*&lt;/query&gt;&lt;/delete&gt;</div><div class=\"line\">&lt;commit/&gt;</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"1-xml\"><a href=\"#1-xml\" class=\"headerlink\" title=\"1.xml\"></a>1.xml</h1><p><img src=\"/photo/img/2018-06-21/DingTalk20180621202319.png\" alt=\"image\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;delete&gt;&lt;query&gt;*:*&lt;/query&gt;&lt;/delete&gt;</div><div class=\"line\">&lt;commit/&gt;</div></pre></td></tr></table></figure>"},{"title":"websocket订阅火币成交记录","date":"2018-06-19T10:15:57.000Z","_content":"# python3\n## 单线程：\n### 文件一：\n```python\n# -*- coding: utf-8 -*-\n#author: maxie_lj\nimport _thread\nfrom websocket import create_connection\nfrom mysqlOpertion import connect_mysql\nimport gzip\nimport time\nimport json\n\n# 链接\ndef connect():\n    while(1):\n        try:\n            print('')\n            # 挂代理\n            ws = create_connection(\"wss://www.huobi.br.com/-/s/pro/ws\")\n            #print('链接成功')\n            return ws\n            break\n        except Exception as err:\n            #print(err)\n            #print('connect ws error,retry...')\n            time.sleep(1)\n\n\ndef getsubconfig():\n    # 统计参数\n    tradeStr=[\n              \"\"\"{\"sub\": \"market.elfusdt.trade.detail\",\"id\": \"id1\"}\"\"\",\n              \"\"\"{\"sub\": \"market.btcusdt.trade.detail\",\"id\": \"id2\"}\"\"\",\n              \"\"\"{\"sub\": \"market.htusdt.trade.detail\",\"id\": \"id3\"}\"\"\",\n              \"\"\"{\"sub\": \"market.swftcbtc.trade.detail\",\"id\": \"id4\"}\"\"\",\n              \"\"\"{\"sub\": \"market.topcbtc.trade.detail\",\"id\": \"id6\"}\"\"\",\n              \"\"\"{\"sub\": \"market.bchusdt.trade.detail\",\"id\": \"id7\"}\"\"\",\n              \"\"\"{\"sub\": \"market.ethusdt.trade.detail\",\"id\": \"id8\"}\"\"\",\n              \"\"\"{\"sub\": \"market.etcusdt.trade.detail\",\"id\": \"id9\"}\"\"\",\n              \"\"\"{\"sub\": \"market.eosusdt.trade.detail\",\"id\": \"id9\"}\"\"\",\n              \"\"\"{\"sub\": \"market.ltcusdt.trade.detail\",\"id\": \"id9\"}\"\"\"\n              ]\n    return tradeStr\n\n# 订阅\ndef sub(ws,tradeStr):\n    ws.send(tradeStr)\n\n# 获取返回\ndef getResponse(ws,tradeStr):\n    db = connect_mysql.connect()\n    while 1 :\n        try :\n            compressData=ws.recv()\n        except Exception :\n            #print('链接异常')\n            run(tradeStr,1)\n        try :\n            result=gzip.decompress(compressData).decode('utf-8')\n        except:\n            #print('丢包解析异常')\n            continue\n        if result[:7] == '{\"ping\"':\n            ts=result[8:21]\n            #print('心跳包',ts)\n            pong='{\"pong\":'+ts+'}'\n            ws.send(pong)\n        else:\n            if result[:5] == '{\"ch\"':\n                result = json.loads(result)\n                #print(result)\n                #print('------------------------------------------------------')\n                n = 0\n                while n < len(result['tick']['data']) :\n                    connect_mysql.commit('%s' % result['ch'].split('.')[1],result['tick']['data'][n]['price'],result['tick']['data'][n]['amount'],\"'%s'\" % result[\"tick\"][\"data\"][n][\"direction\"], \"'%s'\" % result['ch'].split('.')[1],db);\n                    n += 1\n\ndef subCoin(tradeStr):\n    ws=connect()\n    sub(ws,tradeStr)\n    getResponse(ws,tradeStr)\n\ndef run(tradeStr,test):\n    subCoin(tradeStr)\n\ndef main():\n    tradeStr=getsubconfig()\n    try :\n        tradeStr = getsubconfig()\n        i = 0\n        while i < len(tradeStr) :\n            _thread.start_new_thread( run, (tradeStr[i],i) )\n            i += 1\n    except Exception as err :\n        print(err)\n    while 1:\n        pass\n\n\nif __name__ == '__main__':\n    main()\n```\n\n# 多线程版本：\n## 文件一：\n\n```python\n# -*- coding: utf-8 -*-\n#author: maxie_lj\nimport _thread\nfrom websocket import create_connection\nfrom test1 import connect_mysql\nimport gzip\nimport time\nimport json\n\n# 链接数据库\ndef connect():\n    while(1):\n        try:\n            ws = create_connection(\"wss://www.huobi.br.com/-/s/pro/ws\")\n            # print('链接成功')\n            return ws\n            break\n        except Exception as err:\n            print(err)\n            #print('connect ws error,retry...')\n            time.sleep(1)\n\n\ndef getsubconfig():\n    # 统计参数\n    tradeStr=[\n              \"\"\"{\"sub\": \"market.elfusdt.trade.detail\"}\"\"\",\n              \"\"\"{\"sub\": \"market.btcusdt.trade.detail\"}\"\"\",\n              \"\"\"{\"sub\": \"market.htusdt.trade.detail\"}\"\"\",\n              \"\"\"{\"sub\": \"market.swftcbtc.trade.detail\"}\"\"\",\n              \"\"\"{\"sub\": \"market.topcbtc.trade.detail\"}\"\"\",\n              \"\"\"{\"sub\": \"market.bchusdt.trade.detail\"}\"\"\",\n              \"\"\"{\"sub\": \"market.ethusdt.trade.detail\"}\"\"\",\n              \"\"\"{\"sub\": \"market.etcusdt.trade.detail\"}\"\"\",\n              \"\"\"{\"sub\": \"market.eosusdt.trade.detail\"}\"\"\",\n              \"\"\"{\"sub\": \"market.ltcusdt.trade.detail\"}\"\"\"\n              ]\n    return tradeStr\n\n# 订阅\ndef sub(ws,tradeStr):\n    ws.send(tradeStr)\n\n# 获取返回\ndef getResponse(ws):\n    db = connect_mysql.connect()\n    while 1 :\n        try :\n            compressData=ws.recv()\n        except Exception :\n            ws=connect()\n            subCoin(ws)\n            print('链接异常')\n        try :\n            result=gzip.decompress(compressData).decode('utf-8')\n        except:\n            print('丢包解析异常')\n            continue\n        if result[:7] == '{\"ping\"':\n            ts=result[8:21]\n            #print('心跳包',ts)\n            pong='{\"pong\":'+ts+'}'\n            ws.send(pong)\n        else:\n            if result[:5] == '{\"ch\"':\n                result = json.loads(result)\n                print(result)\n                #print('------------------------------------------------------')\n                n = 0\n                while n < len(result['tick']['data']) :\n                    connect_mysql.commit('%s' % result['ch'].split('.')[1],result['tick']['data'][n]['price'],result['tick']['data'][n]['amount'],\"'%s'\" % result[\"tick\"][\"data\"][n][\"direction\"], \"'%s'\" % result['ch'].split('.')[1],db);\n                    n += 1\n\n# 订阅\ndef subCoin(ws):\n    tradeStr=getsubconfig()\n    i = 0\n    while i < len(tradeStr) :\n            sub(ws,tradeStr[i])\n            i += 1\n# 主函数\ndef main():\n    ws=connect()\n    subCoin(ws)\n    getResponse(ws)\n\n\nif __name__ == '__main__':\n    main()\n```\n\n\n```\n### 文件二:\n\n```python\nimport json\nimport pymysql\nimport time\n\nclass connect_mysql():\n    db = ''\n    def connect() :\n            db = connect_mysql.db = pymysql.connect(\"localhost\", \"root\", \"root\", \"huobi\", charset='utf8' )\n            return db\n\n    def commit(table, price, amount, action, coin_type, db) :\n\n        try:\n            cursor = db.cursor()\n            sql = \"INSERT INTO %s_success_order(action,order_amount, price, coin_type)VALUES (%s, %.10f, %.10f,%s )\" % (table,action, amount, price,coin_type )\n            cursor.execute(sql)\n           # 提交到数据库执行\n            db.commit()\n        except Exception as e:\n            db = connect_mysql.db = pymysql.connect(\"localhost\", \"root\", \"root\", \"huobi\", charset='utf8' )\n            commit(table, price, amount, action, coin_type, db)\n        return\n\n\n    def connect_close() :\n        connect_mysql.db.close()\n```\n\n\n文件二是单线程和多线程版的公用文件\n\n\n\n\n\n\n# shell 脚本\n```shell\n#!/bin/bash\ntotal=1\navaliable=`ps -ef | grep -w huobi.py | grep -v grep | wc -l`\ndiff=`expr $total - $avaliable`\n#echo $diff >> /home/script/diff.text\n#echo $total >> /home/script/diff.text\n#echo $avaliable >> /home/script/diff.text\nif [ $diff -gt 0 ];then\n        for((i=0;i<$diff;i++));do\n                 /usr/local/bin/python3 /home/script/huobi.py >> /home/script/huobi.out\n        done\nfi\n```\n\n# crontab 配置\n```powershell\nMAILTO=\"\"\n\n* * * * * sudo /bin/bash /home/script/huobi.sh\n```\n\n**注意事项**：\n在写shell脚本时，尽量用绝对路径。\n","source":"_posts/websocket订阅火币成交记录.md","raw":"---\ntitle: websocket订阅火币成交记录\ndate: 2018-06-19 18:15:57\ntags: python, shell, crond\n---\n# python3\n## 单线程：\n### 文件一：\n```python\n# -*- coding: utf-8 -*-\n#author: maxie_lj\nimport _thread\nfrom websocket import create_connection\nfrom mysqlOpertion import connect_mysql\nimport gzip\nimport time\nimport json\n\n# 链接\ndef connect():\n    while(1):\n        try:\n            print('')\n            # 挂代理\n            ws = create_connection(\"wss://www.huobi.br.com/-/s/pro/ws\")\n            #print('链接成功')\n            return ws\n            break\n        except Exception as err:\n            #print(err)\n            #print('connect ws error,retry...')\n            time.sleep(1)\n\n\ndef getsubconfig():\n    # 统计参数\n    tradeStr=[\n              \"\"\"{\"sub\": \"market.elfusdt.trade.detail\",\"id\": \"id1\"}\"\"\",\n              \"\"\"{\"sub\": \"market.btcusdt.trade.detail\",\"id\": \"id2\"}\"\"\",\n              \"\"\"{\"sub\": \"market.htusdt.trade.detail\",\"id\": \"id3\"}\"\"\",\n              \"\"\"{\"sub\": \"market.swftcbtc.trade.detail\",\"id\": \"id4\"}\"\"\",\n              \"\"\"{\"sub\": \"market.topcbtc.trade.detail\",\"id\": \"id6\"}\"\"\",\n              \"\"\"{\"sub\": \"market.bchusdt.trade.detail\",\"id\": \"id7\"}\"\"\",\n              \"\"\"{\"sub\": \"market.ethusdt.trade.detail\",\"id\": \"id8\"}\"\"\",\n              \"\"\"{\"sub\": \"market.etcusdt.trade.detail\",\"id\": \"id9\"}\"\"\",\n              \"\"\"{\"sub\": \"market.eosusdt.trade.detail\",\"id\": \"id9\"}\"\"\",\n              \"\"\"{\"sub\": \"market.ltcusdt.trade.detail\",\"id\": \"id9\"}\"\"\"\n              ]\n    return tradeStr\n\n# 订阅\ndef sub(ws,tradeStr):\n    ws.send(tradeStr)\n\n# 获取返回\ndef getResponse(ws,tradeStr):\n    db = connect_mysql.connect()\n    while 1 :\n        try :\n            compressData=ws.recv()\n        except Exception :\n            #print('链接异常')\n            run(tradeStr,1)\n        try :\n            result=gzip.decompress(compressData).decode('utf-8')\n        except:\n            #print('丢包解析异常')\n            continue\n        if result[:7] == '{\"ping\"':\n            ts=result[8:21]\n            #print('心跳包',ts)\n            pong='{\"pong\":'+ts+'}'\n            ws.send(pong)\n        else:\n            if result[:5] == '{\"ch\"':\n                result = json.loads(result)\n                #print(result)\n                #print('------------------------------------------------------')\n                n = 0\n                while n < len(result['tick']['data']) :\n                    connect_mysql.commit('%s' % result['ch'].split('.')[1],result['tick']['data'][n]['price'],result['tick']['data'][n]['amount'],\"'%s'\" % result[\"tick\"][\"data\"][n][\"direction\"], \"'%s'\" % result['ch'].split('.')[1],db);\n                    n += 1\n\ndef subCoin(tradeStr):\n    ws=connect()\n    sub(ws,tradeStr)\n    getResponse(ws,tradeStr)\n\ndef run(tradeStr,test):\n    subCoin(tradeStr)\n\ndef main():\n    tradeStr=getsubconfig()\n    try :\n        tradeStr = getsubconfig()\n        i = 0\n        while i < len(tradeStr) :\n            _thread.start_new_thread( run, (tradeStr[i],i) )\n            i += 1\n    except Exception as err :\n        print(err)\n    while 1:\n        pass\n\n\nif __name__ == '__main__':\n    main()\n```\n\n# 多线程版本：\n## 文件一：\n\n```python\n# -*- coding: utf-8 -*-\n#author: maxie_lj\nimport _thread\nfrom websocket import create_connection\nfrom test1 import connect_mysql\nimport gzip\nimport time\nimport json\n\n# 链接数据库\ndef connect():\n    while(1):\n        try:\n            ws = create_connection(\"wss://www.huobi.br.com/-/s/pro/ws\")\n            # print('链接成功')\n            return ws\n            break\n        except Exception as err:\n            print(err)\n            #print('connect ws error,retry...')\n            time.sleep(1)\n\n\ndef getsubconfig():\n    # 统计参数\n    tradeStr=[\n              \"\"\"{\"sub\": \"market.elfusdt.trade.detail\"}\"\"\",\n              \"\"\"{\"sub\": \"market.btcusdt.trade.detail\"}\"\"\",\n              \"\"\"{\"sub\": \"market.htusdt.trade.detail\"}\"\"\",\n              \"\"\"{\"sub\": \"market.swftcbtc.trade.detail\"}\"\"\",\n              \"\"\"{\"sub\": \"market.topcbtc.trade.detail\"}\"\"\",\n              \"\"\"{\"sub\": \"market.bchusdt.trade.detail\"}\"\"\",\n              \"\"\"{\"sub\": \"market.ethusdt.trade.detail\"}\"\"\",\n              \"\"\"{\"sub\": \"market.etcusdt.trade.detail\"}\"\"\",\n              \"\"\"{\"sub\": \"market.eosusdt.trade.detail\"}\"\"\",\n              \"\"\"{\"sub\": \"market.ltcusdt.trade.detail\"}\"\"\"\n              ]\n    return tradeStr\n\n# 订阅\ndef sub(ws,tradeStr):\n    ws.send(tradeStr)\n\n# 获取返回\ndef getResponse(ws):\n    db = connect_mysql.connect()\n    while 1 :\n        try :\n            compressData=ws.recv()\n        except Exception :\n            ws=connect()\n            subCoin(ws)\n            print('链接异常')\n        try :\n            result=gzip.decompress(compressData).decode('utf-8')\n        except:\n            print('丢包解析异常')\n            continue\n        if result[:7] == '{\"ping\"':\n            ts=result[8:21]\n            #print('心跳包',ts)\n            pong='{\"pong\":'+ts+'}'\n            ws.send(pong)\n        else:\n            if result[:5] == '{\"ch\"':\n                result = json.loads(result)\n                print(result)\n                #print('------------------------------------------------------')\n                n = 0\n                while n < len(result['tick']['data']) :\n                    connect_mysql.commit('%s' % result['ch'].split('.')[1],result['tick']['data'][n]['price'],result['tick']['data'][n]['amount'],\"'%s'\" % result[\"tick\"][\"data\"][n][\"direction\"], \"'%s'\" % result['ch'].split('.')[1],db);\n                    n += 1\n\n# 订阅\ndef subCoin(ws):\n    tradeStr=getsubconfig()\n    i = 0\n    while i < len(tradeStr) :\n            sub(ws,tradeStr[i])\n            i += 1\n# 主函数\ndef main():\n    ws=connect()\n    subCoin(ws)\n    getResponse(ws)\n\n\nif __name__ == '__main__':\n    main()\n```\n\n\n```\n### 文件二:\n\n```python\nimport json\nimport pymysql\nimport time\n\nclass connect_mysql():\n    db = ''\n    def connect() :\n            db = connect_mysql.db = pymysql.connect(\"localhost\", \"root\", \"root\", \"huobi\", charset='utf8' )\n            return db\n\n    def commit(table, price, amount, action, coin_type, db) :\n\n        try:\n            cursor = db.cursor()\n            sql = \"INSERT INTO %s_success_order(action,order_amount, price, coin_type)VALUES (%s, %.10f, %.10f,%s )\" % (table,action, amount, price,coin_type )\n            cursor.execute(sql)\n           # 提交到数据库执行\n            db.commit()\n        except Exception as e:\n            db = connect_mysql.db = pymysql.connect(\"localhost\", \"root\", \"root\", \"huobi\", charset='utf8' )\n            commit(table, price, amount, action, coin_type, db)\n        return\n\n\n    def connect_close() :\n        connect_mysql.db.close()\n```\n\n\n文件二是单线程和多线程版的公用文件\n\n\n\n\n\n\n# shell 脚本\n```shell\n#!/bin/bash\ntotal=1\navaliable=`ps -ef | grep -w huobi.py | grep -v grep | wc -l`\ndiff=`expr $total - $avaliable`\n#echo $diff >> /home/script/diff.text\n#echo $total >> /home/script/diff.text\n#echo $avaliable >> /home/script/diff.text\nif [ $diff -gt 0 ];then\n        for((i=0;i<$diff;i++));do\n                 /usr/local/bin/python3 /home/script/huobi.py >> /home/script/huobi.out\n        done\nfi\n```\n\n# crontab 配置\n```powershell\nMAILTO=\"\"\n\n* * * * * sudo /bin/bash /home/script/huobi.sh\n```\n\n**注意事项**：\n在写shell脚本时，尽量用绝对路径。\n","slug":"websocket订阅火币成交记录","published":1,"updated":"2018-06-19T10:19:48.515Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkb4lzjq000btrwwkuafxgh3","content":"<h1 id=\"python3\"><a href=\"#python3\" class=\"headerlink\" title=\"python3\"></a>python3</h1><h2 id=\"单线程：\"><a href=\"#单线程：\" class=\"headerlink\" title=\"单线程：\"></a>单线程：</h2><h3 id=\"文件一：\"><a href=\"#文件一：\" class=\"headerlink\" title=\"文件一：\"></a>文件一：</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></div><div class=\"line\"><span class=\"comment\">#author: maxie_lj</span></div><div class=\"line\"><span class=\"keyword\">import</span> _thread</div><div class=\"line\"><span class=\"keyword\">from</span> websocket <span class=\"keyword\">import</span> create_connection</div><div class=\"line\"><span class=\"keyword\">from</span> mysqlOpertion <span class=\"keyword\">import</span> connect_mysql</div><div class=\"line\"><span class=\"keyword\">import</span> gzip</div><div class=\"line\"><span class=\"keyword\">import</span> time</div><div class=\"line\"><span class=\"keyword\">import</span> json</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 链接</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">connect</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"number\">1</span>):</div><div class=\"line\">        <span class=\"keyword\">try</span>:</div><div class=\"line\">            print(<span class=\"string\">''</span>)</div><div class=\"line\">            <span class=\"comment\"># 挂代理</span></div><div class=\"line\">            ws = create_connection(<span class=\"string\">\"wss://www.huobi.br.com/-/s/pro/ws\"</span>)</div><div class=\"line\">            <span class=\"comment\">#print('链接成功')</span></div><div class=\"line\">            <span class=\"keyword\">return</span> ws</div><div class=\"line\">            <span class=\"keyword\">break</span></div><div class=\"line\">        <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> err:</div><div class=\"line\">            <span class=\"comment\">#print(err)</span></div><div class=\"line\">            <span class=\"comment\">#print('connect ws error,retry...')</span></div><div class=\"line\">            time.sleep(<span class=\"number\">1</span>)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getsubconfig</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"comment\"># 统计参数</span></div><div class=\"line\">    tradeStr=[</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.elfusdt.trade.detail\",\"id\": \"id1\"&#125;\"\"\"</span>,</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.btcusdt.trade.detail\",\"id\": \"id2\"&#125;\"\"\"</span>,</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.htusdt.trade.detail\",\"id\": \"id3\"&#125;\"\"\"</span>,</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.swftcbtc.trade.detail\",\"id\": \"id4\"&#125;\"\"\"</span>,</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.topcbtc.trade.detail\",\"id\": \"id6\"&#125;\"\"\"</span>,</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.bchusdt.trade.detail\",\"id\": \"id7\"&#125;\"\"\"</span>,</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.ethusdt.trade.detail\",\"id\": \"id8\"&#125;\"\"\"</span>,</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.etcusdt.trade.detail\",\"id\": \"id9\"&#125;\"\"\"</span>,</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.eosusdt.trade.detail\",\"id\": \"id9\"&#125;\"\"\"</span>,</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.ltcusdt.trade.detail\",\"id\": \"id9\"&#125;\"\"\"</span></div><div class=\"line\">              ]</div><div class=\"line\">    <span class=\"keyword\">return</span> tradeStr</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 订阅</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sub</span><span class=\"params\">(ws,tradeStr)</span>:</span></div><div class=\"line\">    ws.send(tradeStr)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 获取返回</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getResponse</span><span class=\"params\">(ws,tradeStr)</span>:</span></div><div class=\"line\">    db = connect_mysql.connect()</div><div class=\"line\">    <span class=\"keyword\">while</span> <span class=\"number\">1</span> :</div><div class=\"line\">        <span class=\"keyword\">try</span> :</div><div class=\"line\">            compressData=ws.recv()</div><div class=\"line\">        <span class=\"keyword\">except</span> Exception :</div><div class=\"line\">            <span class=\"comment\">#print('链接异常')</span></div><div class=\"line\">            run(tradeStr,<span class=\"number\">1</span>)</div><div class=\"line\">        <span class=\"keyword\">try</span> :</div><div class=\"line\">            result=gzip.decompress(compressData).decode(<span class=\"string\">'utf-8'</span>)</div><div class=\"line\">        <span class=\"keyword\">except</span>:</div><div class=\"line\">            <span class=\"comment\">#print('丢包解析异常')</span></div><div class=\"line\">            <span class=\"keyword\">continue</span></div><div class=\"line\">        <span class=\"keyword\">if</span> result[:<span class=\"number\">7</span>] == <span class=\"string\">'&#123;\"ping\"'</span>:</div><div class=\"line\">            ts=result[<span class=\"number\">8</span>:<span class=\"number\">21</span>]</div><div class=\"line\">            <span class=\"comment\">#print('心跳包',ts)</span></div><div class=\"line\">            pong=<span class=\"string\">'&#123;\"pong\":'</span>+ts+<span class=\"string\">'&#125;'</span></div><div class=\"line\">            ws.send(pong)</div><div class=\"line\">        <span class=\"keyword\">else</span>:</div><div class=\"line\">            <span class=\"keyword\">if</span> result[:<span class=\"number\">5</span>] == <span class=\"string\">'&#123;\"ch\"'</span>:</div><div class=\"line\">                result = json.loads(result)</div><div class=\"line\">                <span class=\"comment\">#print(result)</span></div><div class=\"line\">                <span class=\"comment\">#print('------------------------------------------------------')</span></div><div class=\"line\">                n = <span class=\"number\">0</span></div><div class=\"line\">                <span class=\"keyword\">while</span> n &lt; len(result[<span class=\"string\">'tick'</span>][<span class=\"string\">'data'</span>]) :</div><div class=\"line\">                    connect_mysql.commit(<span class=\"string\">'%s'</span> % result[<span class=\"string\">'ch'</span>].split(<span class=\"string\">'.'</span>)[<span class=\"number\">1</span>],result[<span class=\"string\">'tick'</span>][<span class=\"string\">'data'</span>][n][<span class=\"string\">'price'</span>],result[<span class=\"string\">'tick'</span>][<span class=\"string\">'data'</span>][n][<span class=\"string\">'amount'</span>],<span class=\"string\">\"'%s'\"</span> % result[<span class=\"string\">\"tick\"</span>][<span class=\"string\">\"data\"</span>][n][<span class=\"string\">\"direction\"</span>], <span class=\"string\">\"'%s'\"</span> % result[<span class=\"string\">'ch'</span>].split(<span class=\"string\">'.'</span>)[<span class=\"number\">1</span>],db);</div><div class=\"line\">                    n += <span class=\"number\">1</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">subCoin</span><span class=\"params\">(tradeStr)</span>:</span></div><div class=\"line\">    ws=connect()</div><div class=\"line\">    sub(ws,tradeStr)</div><div class=\"line\">    getResponse(ws,tradeStr)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span><span class=\"params\">(tradeStr,test)</span>:</span></div><div class=\"line\">    subCoin(tradeStr)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    tradeStr=getsubconfig()</div><div class=\"line\">    <span class=\"keyword\">try</span> :</div><div class=\"line\">        tradeStr = getsubconfig()</div><div class=\"line\">        i = <span class=\"number\">0</span></div><div class=\"line\">        <span class=\"keyword\">while</span> i &lt; len(tradeStr) :</div><div class=\"line\">            _thread.start_new_thread( run, (tradeStr[i],i) )</div><div class=\"line\">            i += <span class=\"number\">1</span></div><div class=\"line\">    <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> err :</div><div class=\"line\">        print(err)</div><div class=\"line\">    <span class=\"keyword\">while</span> <span class=\"number\">1</span>:</div><div class=\"line\">        <span class=\"keyword\">pass</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    main()</div></pre></td></tr></table></figure>\n<h1 id=\"多线程版本：\"><a href=\"#多线程版本：\" class=\"headerlink\" title=\"多线程版本：\"></a>多线程版本：</h1><h2 id=\"文件一：-1\"><a href=\"#文件一：-1\" class=\"headerlink\" title=\"文件一：\"></a>文件一：</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></div><div class=\"line\"><span class=\"comment\">#author: maxie_lj</span></div><div class=\"line\"><span class=\"keyword\">import</span> _thread</div><div class=\"line\"><span class=\"keyword\">from</span> websocket <span class=\"keyword\">import</span> create_connection</div><div class=\"line\"><span class=\"keyword\">from</span> test1 <span class=\"keyword\">import</span> connect_mysql</div><div class=\"line\"><span class=\"keyword\">import</span> gzip</div><div class=\"line\"><span class=\"keyword\">import</span> time</div><div class=\"line\"><span class=\"keyword\">import</span> json</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 链接数据库</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">connect</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"number\">1</span>):</div><div class=\"line\">        <span class=\"keyword\">try</span>:</div><div class=\"line\">            ws = create_connection(<span class=\"string\">\"wss://www.huobi.br.com/-/s/pro/ws\"</span>)</div><div class=\"line\">            <span class=\"comment\"># print('链接成功')</span></div><div class=\"line\">            <span class=\"keyword\">return</span> ws</div><div class=\"line\">            <span class=\"keyword\">break</span></div><div class=\"line\">        <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> err:</div><div class=\"line\">            print(err)</div><div class=\"line\">            <span class=\"comment\">#print('connect ws error,retry...')</span></div><div class=\"line\">            time.sleep(<span class=\"number\">1</span>)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getsubconfig</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"comment\"># 统计参数</span></div><div class=\"line\">    tradeStr=[</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.elfusdt.trade.detail\"&#125;\"\"\"</span>,</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.btcusdt.trade.detail\"&#125;\"\"\"</span>,</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.htusdt.trade.detail\"&#125;\"\"\"</span>,</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.swftcbtc.trade.detail\"&#125;\"\"\"</span>,</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.topcbtc.trade.detail\"&#125;\"\"\"</span>,</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.bchusdt.trade.detail\"&#125;\"\"\"</span>,</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.ethusdt.trade.detail\"&#125;\"\"\"</span>,</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.etcusdt.trade.detail\"&#125;\"\"\"</span>,</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.eosusdt.trade.detail\"&#125;\"\"\"</span>,</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.ltcusdt.trade.detail\"&#125;\"\"\"</span></div><div class=\"line\">              ]</div><div class=\"line\">    <span class=\"keyword\">return</span> tradeStr</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 订阅</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sub</span><span class=\"params\">(ws,tradeStr)</span>:</span></div><div class=\"line\">    ws.send(tradeStr)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 获取返回</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getResponse</span><span class=\"params\">(ws)</span>:</span></div><div class=\"line\">    db = connect_mysql.connect()</div><div class=\"line\">    <span class=\"keyword\">while</span> <span class=\"number\">1</span> :</div><div class=\"line\">        <span class=\"keyword\">try</span> :</div><div class=\"line\">            compressData=ws.recv()</div><div class=\"line\">        <span class=\"keyword\">except</span> Exception :</div><div class=\"line\">            ws=connect()</div><div class=\"line\">            subCoin(ws)</div><div class=\"line\">            print(<span class=\"string\">'链接异常'</span>)</div><div class=\"line\">        <span class=\"keyword\">try</span> :</div><div class=\"line\">            result=gzip.decompress(compressData).decode(<span class=\"string\">'utf-8'</span>)</div><div class=\"line\">        <span class=\"keyword\">except</span>:</div><div class=\"line\">            print(<span class=\"string\">'丢包解析异常'</span>)</div><div class=\"line\">            <span class=\"keyword\">continue</span></div><div class=\"line\">        <span class=\"keyword\">if</span> result[:<span class=\"number\">7</span>] == <span class=\"string\">'&#123;\"ping\"'</span>:</div><div class=\"line\">            ts=result[<span class=\"number\">8</span>:<span class=\"number\">21</span>]</div><div class=\"line\">            <span class=\"comment\">#print('心跳包',ts)</span></div><div class=\"line\">            pong=<span class=\"string\">'&#123;\"pong\":'</span>+ts+<span class=\"string\">'&#125;'</span></div><div class=\"line\">            ws.send(pong)</div><div class=\"line\">        <span class=\"keyword\">else</span>:</div><div class=\"line\">            <span class=\"keyword\">if</span> result[:<span class=\"number\">5</span>] == <span class=\"string\">'&#123;\"ch\"'</span>:</div><div class=\"line\">                result = json.loads(result)</div><div class=\"line\">                print(result)</div><div class=\"line\">                <span class=\"comment\">#print('------------------------------------------------------')</span></div><div class=\"line\">                n = <span class=\"number\">0</span></div><div class=\"line\">                <span class=\"keyword\">while</span> n &lt; len(result[<span class=\"string\">'tick'</span>][<span class=\"string\">'data'</span>]) :</div><div class=\"line\">                    connect_mysql.commit(<span class=\"string\">'%s'</span> % result[<span class=\"string\">'ch'</span>].split(<span class=\"string\">'.'</span>)[<span class=\"number\">1</span>],result[<span class=\"string\">'tick'</span>][<span class=\"string\">'data'</span>][n][<span class=\"string\">'price'</span>],result[<span class=\"string\">'tick'</span>][<span class=\"string\">'data'</span>][n][<span class=\"string\">'amount'</span>],<span class=\"string\">\"'%s'\"</span> % result[<span class=\"string\">\"tick\"</span>][<span class=\"string\">\"data\"</span>][n][<span class=\"string\">\"direction\"</span>], <span class=\"string\">\"'%s'\"</span> % result[<span class=\"string\">'ch'</span>].split(<span class=\"string\">'.'</span>)[<span class=\"number\">1</span>],db);</div><div class=\"line\">                    n += <span class=\"number\">1</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 订阅</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">subCoin</span><span class=\"params\">(ws)</span>:</span></div><div class=\"line\">    tradeStr=getsubconfig()</div><div class=\"line\">    i = <span class=\"number\">0</span></div><div class=\"line\">    <span class=\"keyword\">while</span> i &lt; len(tradeStr) :</div><div class=\"line\">            sub(ws,tradeStr[i])</div><div class=\"line\">            i += <span class=\"number\">1</span></div><div class=\"line\"><span class=\"comment\"># 主函数</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    ws=connect()</div><div class=\"line\">    subCoin(ws)</div><div class=\"line\">    getResponse(ws)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    main()</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">### 文件二:</div><div class=\"line\"></div><div class=\"line\">```python</div><div class=\"line\">import json</div><div class=\"line\">import pymysql</div><div class=\"line\">import time</div><div class=\"line\"></div><div class=\"line\">class connect_mysql():</div><div class=\"line\">    db = &apos;&apos;</div><div class=\"line\">    def connect() :</div><div class=\"line\">            db = connect_mysql.db = pymysql.connect(&quot;localhost&quot;, &quot;root&quot;, &quot;root&quot;, &quot;huobi&quot;, charset=&apos;utf8&apos; )</div><div class=\"line\">            return db</div><div class=\"line\"></div><div class=\"line\">    def commit(table, price, amount, action, coin_type, db) :</div><div class=\"line\"></div><div class=\"line\">        try:</div><div class=\"line\">            cursor = db.cursor()</div><div class=\"line\">            sql = &quot;INSERT INTO %s_success_order(action,order_amount, price, coin_type)VALUES (%s, %.10f, %.10f,%s )&quot; % (table,action, amount, price,coin_type )</div><div class=\"line\">            cursor.execute(sql)</div><div class=\"line\">           # 提交到数据库执行</div><div class=\"line\">            db.commit()</div><div class=\"line\">        except Exception as e:</div><div class=\"line\">            db = connect_mysql.db = pymysql.connect(&quot;localhost&quot;, &quot;root&quot;, &quot;root&quot;, &quot;huobi&quot;, charset=&apos;utf8&apos; )</div><div class=\"line\">            commit(table, price, amount, action, coin_type, db)</div><div class=\"line\">        return</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    def connect_close() :</div><div class=\"line\">        connect_mysql.db.close()</div></pre></td></tr></table></figure>\n<p>文件二是单线程和多线程版的公用文件</p>\n<h1 id=\"shell-脚本\"><a href=\"#shell-脚本\" class=\"headerlink\" title=\"shell 脚本\"></a>shell 脚本</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">#!/bin/bash</div><div class=\"line\">total=1</div><div class=\"line\">avaliable=`ps -ef | grep -w huobi.py | grep -v grep | wc -l`</div><div class=\"line\">diff=`expr $total - $avaliable`</div><div class=\"line\">#echo $diff &gt;&gt; /home/script/diff.text</div><div class=\"line\">#echo $total &gt;&gt; /home/script/diff.text</div><div class=\"line\">#echo $avaliable &gt;&gt; /home/script/diff.text</div><div class=\"line\">if [ $diff -gt 0 ];then</div><div class=\"line\">        for((i=0;i&lt;$diff;i++));do</div><div class=\"line\">                 /usr/local/bin/python3 /home/script/huobi.py &gt;&gt; /home/script/huobi.out</div><div class=\"line\">        done</div><div class=\"line\">fi</div></pre></td></tr></table></figure>\n<h1 id=\"crontab-配置\"><a href=\"#crontab-配置\" class=\"headerlink\" title=\"crontab 配置\"></a>crontab 配置</h1><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">MAILTO=<span class=\"string\">\"\"</span></div><div class=\"line\"></div><div class=\"line\">* * * * * sudo /bin/bash /home/script/huobi.sh</div></pre></td></tr></table></figure>\n<p><strong>注意事项</strong>：<br>在写shell脚本时，尽量用绝对路径。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"python3\"><a href=\"#python3\" class=\"headerlink\" title=\"python3\"></a>python3</h1><h2 id=\"单线程：\"><a href=\"#单线程：\" class=\"headerlink\" title=\"单线程：\"></a>单线程：</h2><h3 id=\"文件一：\"><a href=\"#文件一：\" class=\"headerlink\" title=\"文件一：\"></a>文件一：</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></div><div class=\"line\"><span class=\"comment\">#author: maxie_lj</span></div><div class=\"line\"><span class=\"keyword\">import</span> _thread</div><div class=\"line\"><span class=\"keyword\">from</span> websocket <span class=\"keyword\">import</span> create_connection</div><div class=\"line\"><span class=\"keyword\">from</span> mysqlOpertion <span class=\"keyword\">import</span> connect_mysql</div><div class=\"line\"><span class=\"keyword\">import</span> gzip</div><div class=\"line\"><span class=\"keyword\">import</span> time</div><div class=\"line\"><span class=\"keyword\">import</span> json</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 链接</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">connect</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"number\">1</span>):</div><div class=\"line\">        <span class=\"keyword\">try</span>:</div><div class=\"line\">            print(<span class=\"string\">''</span>)</div><div class=\"line\">            <span class=\"comment\"># 挂代理</span></div><div class=\"line\">            ws = create_connection(<span class=\"string\">\"wss://www.huobi.br.com/-/s/pro/ws\"</span>)</div><div class=\"line\">            <span class=\"comment\">#print('链接成功')</span></div><div class=\"line\">            <span class=\"keyword\">return</span> ws</div><div class=\"line\">            <span class=\"keyword\">break</span></div><div class=\"line\">        <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> err:</div><div class=\"line\">            <span class=\"comment\">#print(err)</span></div><div class=\"line\">            <span class=\"comment\">#print('connect ws error,retry...')</span></div><div class=\"line\">            time.sleep(<span class=\"number\">1</span>)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getsubconfig</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"comment\"># 统计参数</span></div><div class=\"line\">    tradeStr=[</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.elfusdt.trade.detail\",\"id\": \"id1\"&#125;\"\"\"</span>,</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.btcusdt.trade.detail\",\"id\": \"id2\"&#125;\"\"\"</span>,</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.htusdt.trade.detail\",\"id\": \"id3\"&#125;\"\"\"</span>,</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.swftcbtc.trade.detail\",\"id\": \"id4\"&#125;\"\"\"</span>,</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.topcbtc.trade.detail\",\"id\": \"id6\"&#125;\"\"\"</span>,</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.bchusdt.trade.detail\",\"id\": \"id7\"&#125;\"\"\"</span>,</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.ethusdt.trade.detail\",\"id\": \"id8\"&#125;\"\"\"</span>,</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.etcusdt.trade.detail\",\"id\": \"id9\"&#125;\"\"\"</span>,</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.eosusdt.trade.detail\",\"id\": \"id9\"&#125;\"\"\"</span>,</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.ltcusdt.trade.detail\",\"id\": \"id9\"&#125;\"\"\"</span></div><div class=\"line\">              ]</div><div class=\"line\">    <span class=\"keyword\">return</span> tradeStr</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 订阅</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sub</span><span class=\"params\">(ws,tradeStr)</span>:</span></div><div class=\"line\">    ws.send(tradeStr)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 获取返回</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getResponse</span><span class=\"params\">(ws,tradeStr)</span>:</span></div><div class=\"line\">    db = connect_mysql.connect()</div><div class=\"line\">    <span class=\"keyword\">while</span> <span class=\"number\">1</span> :</div><div class=\"line\">        <span class=\"keyword\">try</span> :</div><div class=\"line\">            compressData=ws.recv()</div><div class=\"line\">        <span class=\"keyword\">except</span> Exception :</div><div class=\"line\">            <span class=\"comment\">#print('链接异常')</span></div><div class=\"line\">            run(tradeStr,<span class=\"number\">1</span>)</div><div class=\"line\">        <span class=\"keyword\">try</span> :</div><div class=\"line\">            result=gzip.decompress(compressData).decode(<span class=\"string\">'utf-8'</span>)</div><div class=\"line\">        <span class=\"keyword\">except</span>:</div><div class=\"line\">            <span class=\"comment\">#print('丢包解析异常')</span></div><div class=\"line\">            <span class=\"keyword\">continue</span></div><div class=\"line\">        <span class=\"keyword\">if</span> result[:<span class=\"number\">7</span>] == <span class=\"string\">'&#123;\"ping\"'</span>:</div><div class=\"line\">            ts=result[<span class=\"number\">8</span>:<span class=\"number\">21</span>]</div><div class=\"line\">            <span class=\"comment\">#print('心跳包',ts)</span></div><div class=\"line\">            pong=<span class=\"string\">'&#123;\"pong\":'</span>+ts+<span class=\"string\">'&#125;'</span></div><div class=\"line\">            ws.send(pong)</div><div class=\"line\">        <span class=\"keyword\">else</span>:</div><div class=\"line\">            <span class=\"keyword\">if</span> result[:<span class=\"number\">5</span>] == <span class=\"string\">'&#123;\"ch\"'</span>:</div><div class=\"line\">                result = json.loads(result)</div><div class=\"line\">                <span class=\"comment\">#print(result)</span></div><div class=\"line\">                <span class=\"comment\">#print('------------------------------------------------------')</span></div><div class=\"line\">                n = <span class=\"number\">0</span></div><div class=\"line\">                <span class=\"keyword\">while</span> n &lt; len(result[<span class=\"string\">'tick'</span>][<span class=\"string\">'data'</span>]) :</div><div class=\"line\">                    connect_mysql.commit(<span class=\"string\">'%s'</span> % result[<span class=\"string\">'ch'</span>].split(<span class=\"string\">'.'</span>)[<span class=\"number\">1</span>],result[<span class=\"string\">'tick'</span>][<span class=\"string\">'data'</span>][n][<span class=\"string\">'price'</span>],result[<span class=\"string\">'tick'</span>][<span class=\"string\">'data'</span>][n][<span class=\"string\">'amount'</span>],<span class=\"string\">\"'%s'\"</span> % result[<span class=\"string\">\"tick\"</span>][<span class=\"string\">\"data\"</span>][n][<span class=\"string\">\"direction\"</span>], <span class=\"string\">\"'%s'\"</span> % result[<span class=\"string\">'ch'</span>].split(<span class=\"string\">'.'</span>)[<span class=\"number\">1</span>],db);</div><div class=\"line\">                    n += <span class=\"number\">1</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">subCoin</span><span class=\"params\">(tradeStr)</span>:</span></div><div class=\"line\">    ws=connect()</div><div class=\"line\">    sub(ws,tradeStr)</div><div class=\"line\">    getResponse(ws,tradeStr)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span><span class=\"params\">(tradeStr,test)</span>:</span></div><div class=\"line\">    subCoin(tradeStr)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    tradeStr=getsubconfig()</div><div class=\"line\">    <span class=\"keyword\">try</span> :</div><div class=\"line\">        tradeStr = getsubconfig()</div><div class=\"line\">        i = <span class=\"number\">0</span></div><div class=\"line\">        <span class=\"keyword\">while</span> i &lt; len(tradeStr) :</div><div class=\"line\">            _thread.start_new_thread( run, (tradeStr[i],i) )</div><div class=\"line\">            i += <span class=\"number\">1</span></div><div class=\"line\">    <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> err :</div><div class=\"line\">        print(err)</div><div class=\"line\">    <span class=\"keyword\">while</span> <span class=\"number\">1</span>:</div><div class=\"line\">        <span class=\"keyword\">pass</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    main()</div></pre></td></tr></table></figure>\n<h1 id=\"多线程版本：\"><a href=\"#多线程版本：\" class=\"headerlink\" title=\"多线程版本：\"></a>多线程版本：</h1><h2 id=\"文件一：-1\"><a href=\"#文件一：-1\" class=\"headerlink\" title=\"文件一：\"></a>文件一：</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></div><div class=\"line\"><span class=\"comment\">#author: maxie_lj</span></div><div class=\"line\"><span class=\"keyword\">import</span> _thread</div><div class=\"line\"><span class=\"keyword\">from</span> websocket <span class=\"keyword\">import</span> create_connection</div><div class=\"line\"><span class=\"keyword\">from</span> test1 <span class=\"keyword\">import</span> connect_mysql</div><div class=\"line\"><span class=\"keyword\">import</span> gzip</div><div class=\"line\"><span class=\"keyword\">import</span> time</div><div class=\"line\"><span class=\"keyword\">import</span> json</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 链接数据库</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">connect</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"number\">1</span>):</div><div class=\"line\">        <span class=\"keyword\">try</span>:</div><div class=\"line\">            ws = create_connection(<span class=\"string\">\"wss://www.huobi.br.com/-/s/pro/ws\"</span>)</div><div class=\"line\">            <span class=\"comment\"># print('链接成功')</span></div><div class=\"line\">            <span class=\"keyword\">return</span> ws</div><div class=\"line\">            <span class=\"keyword\">break</span></div><div class=\"line\">        <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> err:</div><div class=\"line\">            print(err)</div><div class=\"line\">            <span class=\"comment\">#print('connect ws error,retry...')</span></div><div class=\"line\">            time.sleep(<span class=\"number\">1</span>)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getsubconfig</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"comment\"># 统计参数</span></div><div class=\"line\">    tradeStr=[</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.elfusdt.trade.detail\"&#125;\"\"\"</span>,</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.btcusdt.trade.detail\"&#125;\"\"\"</span>,</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.htusdt.trade.detail\"&#125;\"\"\"</span>,</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.swftcbtc.trade.detail\"&#125;\"\"\"</span>,</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.topcbtc.trade.detail\"&#125;\"\"\"</span>,</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.bchusdt.trade.detail\"&#125;\"\"\"</span>,</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.ethusdt.trade.detail\"&#125;\"\"\"</span>,</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.etcusdt.trade.detail\"&#125;\"\"\"</span>,</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.eosusdt.trade.detail\"&#125;\"\"\"</span>,</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.ltcusdt.trade.detail\"&#125;\"\"\"</span></div><div class=\"line\">              ]</div><div class=\"line\">    <span class=\"keyword\">return</span> tradeStr</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 订阅</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sub</span><span class=\"params\">(ws,tradeStr)</span>:</span></div><div class=\"line\">    ws.send(tradeStr)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 获取返回</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getResponse</span><span class=\"params\">(ws)</span>:</span></div><div class=\"line\">    db = connect_mysql.connect()</div><div class=\"line\">    <span class=\"keyword\">while</span> <span class=\"number\">1</span> :</div><div class=\"line\">        <span class=\"keyword\">try</span> :</div><div class=\"line\">            compressData=ws.recv()</div><div class=\"line\">        <span class=\"keyword\">except</span> Exception :</div><div class=\"line\">            ws=connect()</div><div class=\"line\">            subCoin(ws)</div><div class=\"line\">            print(<span class=\"string\">'链接异常'</span>)</div><div class=\"line\">        <span class=\"keyword\">try</span> :</div><div class=\"line\">            result=gzip.decompress(compressData).decode(<span class=\"string\">'utf-8'</span>)</div><div class=\"line\">        <span class=\"keyword\">except</span>:</div><div class=\"line\">            print(<span class=\"string\">'丢包解析异常'</span>)</div><div class=\"line\">            <span class=\"keyword\">continue</span></div><div class=\"line\">        <span class=\"keyword\">if</span> result[:<span class=\"number\">7</span>] == <span class=\"string\">'&#123;\"ping\"'</span>:</div><div class=\"line\">            ts=result[<span class=\"number\">8</span>:<span class=\"number\">21</span>]</div><div class=\"line\">            <span class=\"comment\">#print('心跳包',ts)</span></div><div class=\"line\">            pong=<span class=\"string\">'&#123;\"pong\":'</span>+ts+<span class=\"string\">'&#125;'</span></div><div class=\"line\">            ws.send(pong)</div><div class=\"line\">        <span class=\"keyword\">else</span>:</div><div class=\"line\">            <span class=\"keyword\">if</span> result[:<span class=\"number\">5</span>] == <span class=\"string\">'&#123;\"ch\"'</span>:</div><div class=\"line\">                result = json.loads(result)</div><div class=\"line\">                print(result)</div><div class=\"line\">                <span class=\"comment\">#print('------------------------------------------------------')</span></div><div class=\"line\">                n = <span class=\"number\">0</span></div><div class=\"line\">                <span class=\"keyword\">while</span> n &lt; len(result[<span class=\"string\">'tick'</span>][<span class=\"string\">'data'</span>]) :</div><div class=\"line\">                    connect_mysql.commit(<span class=\"string\">'%s'</span> % result[<span class=\"string\">'ch'</span>].split(<span class=\"string\">'.'</span>)[<span class=\"number\">1</span>],result[<span class=\"string\">'tick'</span>][<span class=\"string\">'data'</span>][n][<span class=\"string\">'price'</span>],result[<span class=\"string\">'tick'</span>][<span class=\"string\">'data'</span>][n][<span class=\"string\">'amount'</span>],<span class=\"string\">\"'%s'\"</span> % result[<span class=\"string\">\"tick\"</span>][<span class=\"string\">\"data\"</span>][n][<span class=\"string\">\"direction\"</span>], <span class=\"string\">\"'%s'\"</span> % result[<span class=\"string\">'ch'</span>].split(<span class=\"string\">'.'</span>)[<span class=\"number\">1</span>],db);</div><div class=\"line\">                    n += <span class=\"number\">1</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 订阅</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">subCoin</span><span class=\"params\">(ws)</span>:</span></div><div class=\"line\">    tradeStr=getsubconfig()</div><div class=\"line\">    i = <span class=\"number\">0</span></div><div class=\"line\">    <span class=\"keyword\">while</span> i &lt; len(tradeStr) :</div><div class=\"line\">            sub(ws,tradeStr[i])</div><div class=\"line\">            i += <span class=\"number\">1</span></div><div class=\"line\"><span class=\"comment\"># 主函数</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    ws=connect()</div><div class=\"line\">    subCoin(ws)</div><div class=\"line\">    getResponse(ws)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    main()</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">### 文件二:</div><div class=\"line\"></div><div class=\"line\">```python</div><div class=\"line\">import json</div><div class=\"line\">import pymysql</div><div class=\"line\">import time</div><div class=\"line\"></div><div class=\"line\">class connect_mysql():</div><div class=\"line\">    db = &apos;&apos;</div><div class=\"line\">    def connect() :</div><div class=\"line\">            db = connect_mysql.db = pymysql.connect(&quot;localhost&quot;, &quot;root&quot;, &quot;root&quot;, &quot;huobi&quot;, charset=&apos;utf8&apos; )</div><div class=\"line\">            return db</div><div class=\"line\"></div><div class=\"line\">    def commit(table, price, amount, action, coin_type, db) :</div><div class=\"line\"></div><div class=\"line\">        try:</div><div class=\"line\">            cursor = db.cursor()</div><div class=\"line\">            sql = &quot;INSERT INTO %s_success_order(action,order_amount, price, coin_type)VALUES (%s, %.10f, %.10f,%s )&quot; % (table,action, amount, price,coin_type )</div><div class=\"line\">            cursor.execute(sql)</div><div class=\"line\">           # 提交到数据库执行</div><div class=\"line\">            db.commit()</div><div class=\"line\">        except Exception as e:</div><div class=\"line\">            db = connect_mysql.db = pymysql.connect(&quot;localhost&quot;, &quot;root&quot;, &quot;root&quot;, &quot;huobi&quot;, charset=&apos;utf8&apos; )</div><div class=\"line\">            commit(table, price, amount, action, coin_type, db)</div><div class=\"line\">        return</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    def connect_close() :</div><div class=\"line\">        connect_mysql.db.close()</div></pre></td></tr></table></figure>\n<p>文件二是单线程和多线程版的公用文件</p>\n<h1 id=\"shell-脚本\"><a href=\"#shell-脚本\" class=\"headerlink\" title=\"shell 脚本\"></a>shell 脚本</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">#!/bin/bash</div><div class=\"line\">total=1</div><div class=\"line\">avaliable=`ps -ef | grep -w huobi.py | grep -v grep | wc -l`</div><div class=\"line\">diff=`expr $total - $avaliable`</div><div class=\"line\">#echo $diff &gt;&gt; /home/script/diff.text</div><div class=\"line\">#echo $total &gt;&gt; /home/script/diff.text</div><div class=\"line\">#echo $avaliable &gt;&gt; /home/script/diff.text</div><div class=\"line\">if [ $diff -gt 0 ];then</div><div class=\"line\">        for((i=0;i&lt;$diff;i++));do</div><div class=\"line\">                 /usr/local/bin/python3 /home/script/huobi.py &gt;&gt; /home/script/huobi.out</div><div class=\"line\">        done</div><div class=\"line\">fi</div></pre></td></tr></table></figure>\n<h1 id=\"crontab-配置\"><a href=\"#crontab-配置\" class=\"headerlink\" title=\"crontab 配置\"></a>crontab 配置</h1><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">MAILTO=<span class=\"string\">\"\"</span></div><div class=\"line\"></div><div class=\"line\">* * * * * sudo /bin/bash /home/script/huobi.sh</div></pre></td></tr></table></figure>\n<p><strong>注意事项</strong>：<br>在写shell脚本时，尽量用绝对路径。</p>\n"},{"title":"一次HTTP请求","date":"2017-11-20T12:09:23.000Z","_content":"\n#一次完整的HTTP请求，以及请求方式的区别\n\n-----\n今天在对接业务组mas时候遇到一个很少遇到的问题，发送一个一个不但参数的POST的请求。\n在我的印象里传参好像必带名字，因为就像一个你不认识的人要来你家，你肯定不会让他进来的。\n所以重新缕了一下POST请求，冲冲能。\n\n##一次HTTP请求的过程\n\n访问某个网址，例如我们访问www.baidu.com\n浏览器会和百度的服务器进行三次握手（中间的域名解析等暂不考虑）\n然后是程序层面的信息请求与提交\n\n三次握手->get或者post请求\n\n1） Client首先发送一个连接试探，ACK=0 表示确认号无效，SYN = 1 表示这是一个连接请求或连接接受报文，同时表示这个数据报不能携带数据，seq = x 表示Client自己的初始序号（seq = 0 就代表这是第0号包），这时候Client进入syn_sent状态，表示客户端等待服务器的回复\n\n2） Server监听到连接请求报文后，如同意建立连接，则向Client发送确认。TCP报文首部中的SYN 和 ACK都置1 ，ack = x + 1表示期望收到对方下一个报文段的第一个数据字节序号是x+1，同时表明x为止的所有数据都已正确收到（ack=1其实是ack=0+1,也就是期望客户端的第1个包），seq = y 表示Server 自己的初始序号（seq=0就代表这是服务器这边发出的第0号包）。这时服务器进入syn_rcvd，表示服务器已经收到Client的连接请求，等待client的确认。\n\n3） Client收到确认后还需再次发送确认，同时携带要发送给Server的数据。ACK 置1 表示确认号ack= y + 1 有效（代表期望收到服务器的第1个包），Client自己的序号seq= x + 1（表示这就是我的第1个包，相对于第0个包来说的），一旦收到Client的确认之后，这个TCP连接就进入Established状态，就可以发起http请求了。\n\n## post请求\nHTTP 协议是以 ASCII 码传输，建立在TCP/IP协议之上的应用层规范，规范把 HTTP 请求分为三个部分：状态行、请求头、消息主体。类似于下面这样：\n<method> <request-url> <version>\n<headers>\n<entity-body></entity-body></headers></version></request-url></method>\n协议规定 POST 提交的数据必须放在消息主体（entity-body）中，但协议并没有规定数据必须使用什么编码方式。实际上，开发者完全可以自己决定消息主体的格式，只要最后发送的 HTTP 请求满足上面的格式就可以。\n\n但是，数据发送出去，还要服务端解析成功才有意义。一般服务端语言如 php、python 等，以及它们的 framework，都内置了自动解析常见数据格式的功能。服务端通常是根据请求头（headers）中的 Content-Type 字段来获知请求中的消息主体是用何种方式编码，再对主体进行解析。所以说到 POST 提交数据方案，包含了 Content-Type 和消息主体编码方式两部分。下面就正式开始介绍它们。\n\n\nheader\nContent-Type，内容类型，一般是指网页中存在的Content-Type，用于定义网络文件的类型和网页的编码，决定文件接收方将以什么形式、什么编码读取这个文件.\n当然还有UA等其他头信息，\n\nContent-Type对照表：http://tool.oschina.net/commons\n\n说几种常见的Content-Type\n\n1.application/x-www-form-urlencoded\n这个就是我们常见form表格提的方式\n\n2.multipart/form-data\n\n这又是一个常见的 POST 数据提交的方式。我们使用表单上传文件时，必须让 form 的 enctyped 等于这个值。直接来看一个请求示例\n\n3.application/json\n\napplication/json 这个 Content-Type 作为响应头大家肯定不陌生。实际上，现在越来越多的人把它作为请求头，用来告诉服务端消息主体是序列化后的 JSON 字符串。由于 JSON 规范的流行，除了低版本 IE 之外的各大浏览器都原生支持 JSON.stringify，服务端语言也都有处理 JSON 的函数，使用 JSON 不会遇上什么麻烦。\n\nso 用这种格式就可以传递非Key Val的数据\n","source":"_posts/一次HTTP请求.md","raw":"---\ntitle: 一次HTTP请求\ndate: 2017-11-20 20:09:23\ntags:\n---\n\n#一次完整的HTTP请求，以及请求方式的区别\n\n-----\n今天在对接业务组mas时候遇到一个很少遇到的问题，发送一个一个不但参数的POST的请求。\n在我的印象里传参好像必带名字，因为就像一个你不认识的人要来你家，你肯定不会让他进来的。\n所以重新缕了一下POST请求，冲冲能。\n\n##一次HTTP请求的过程\n\n访问某个网址，例如我们访问www.baidu.com\n浏览器会和百度的服务器进行三次握手（中间的域名解析等暂不考虑）\n然后是程序层面的信息请求与提交\n\n三次握手->get或者post请求\n\n1） Client首先发送一个连接试探，ACK=0 表示确认号无效，SYN = 1 表示这是一个连接请求或连接接受报文，同时表示这个数据报不能携带数据，seq = x 表示Client自己的初始序号（seq = 0 就代表这是第0号包），这时候Client进入syn_sent状态，表示客户端等待服务器的回复\n\n2） Server监听到连接请求报文后，如同意建立连接，则向Client发送确认。TCP报文首部中的SYN 和 ACK都置1 ，ack = x + 1表示期望收到对方下一个报文段的第一个数据字节序号是x+1，同时表明x为止的所有数据都已正确收到（ack=1其实是ack=0+1,也就是期望客户端的第1个包），seq = y 表示Server 自己的初始序号（seq=0就代表这是服务器这边发出的第0号包）。这时服务器进入syn_rcvd，表示服务器已经收到Client的连接请求，等待client的确认。\n\n3） Client收到确认后还需再次发送确认，同时携带要发送给Server的数据。ACK 置1 表示确认号ack= y + 1 有效（代表期望收到服务器的第1个包），Client自己的序号seq= x + 1（表示这就是我的第1个包，相对于第0个包来说的），一旦收到Client的确认之后，这个TCP连接就进入Established状态，就可以发起http请求了。\n\n## post请求\nHTTP 协议是以 ASCII 码传输，建立在TCP/IP协议之上的应用层规范，规范把 HTTP 请求分为三个部分：状态行、请求头、消息主体。类似于下面这样：\n<method> <request-url> <version>\n<headers>\n<entity-body></entity-body></headers></version></request-url></method>\n协议规定 POST 提交的数据必须放在消息主体（entity-body）中，但协议并没有规定数据必须使用什么编码方式。实际上，开发者完全可以自己决定消息主体的格式，只要最后发送的 HTTP 请求满足上面的格式就可以。\n\n但是，数据发送出去，还要服务端解析成功才有意义。一般服务端语言如 php、python 等，以及它们的 framework，都内置了自动解析常见数据格式的功能。服务端通常是根据请求头（headers）中的 Content-Type 字段来获知请求中的消息主体是用何种方式编码，再对主体进行解析。所以说到 POST 提交数据方案，包含了 Content-Type 和消息主体编码方式两部分。下面就正式开始介绍它们。\n\n\nheader\nContent-Type，内容类型，一般是指网页中存在的Content-Type，用于定义网络文件的类型和网页的编码，决定文件接收方将以什么形式、什么编码读取这个文件.\n当然还有UA等其他头信息，\n\nContent-Type对照表：http://tool.oschina.net/commons\n\n说几种常见的Content-Type\n\n1.application/x-www-form-urlencoded\n这个就是我们常见form表格提的方式\n\n2.multipart/form-data\n\n这又是一个常见的 POST 数据提交的方式。我们使用表单上传文件时，必须让 form 的 enctyped 等于这个值。直接来看一个请求示例\n\n3.application/json\n\napplication/json 这个 Content-Type 作为响应头大家肯定不陌生。实际上，现在越来越多的人把它作为请求头，用来告诉服务端消息主体是序列化后的 JSON 字符串。由于 JSON 规范的流行，除了低版本 IE 之外的各大浏览器都原生支持 JSON.stringify，服务端语言也都有处理 JSON 的函数，使用 JSON 不会遇上什么麻烦。\n\nso 用这种格式就可以传递非Key Val的数据\n","slug":"一次HTTP请求","published":1,"updated":"2017-11-21T03:01:53.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkb4lzjr000ctrwwzhle33kh","content":"<p>#一次完整的HTTP请求，以及请求方式的区别</p>\n<hr>\n<p>今天在对接业务组mas时候遇到一个很少遇到的问题，发送一个一个不但参数的POST的请求。<br>在我的印象里传参好像必带名字，因为就像一个你不认识的人要来你家，你肯定不会让他进来的。<br>所以重新缕了一下POST请求，冲冲能。</p>\n<p>##一次HTTP请求的过程</p>\n<p>访问某个网址，例如我们访问www.baidu.com<br>浏览器会和百度的服务器进行三次握手（中间的域名解析等暂不考虑）<br>然后是程序层面的信息请求与提交</p>\n<p>三次握手-&gt;get或者post请求</p>\n<p>1） Client首先发送一个连接试探，ACK=0 表示确认号无效，SYN = 1 表示这是一个连接请求或连接接受报文，同时表示这个数据报不能携带数据，seq = x 表示Client自己的初始序号（seq = 0 就代表这是第0号包），这时候Client进入syn_sent状态，表示客户端等待服务器的回复</p>\n<p>2） Server监听到连接请求报文后，如同意建立连接，则向Client发送确认。TCP报文首部中的SYN 和 ACK都置1 ，ack = x + 1表示期望收到对方下一个报文段的第一个数据字节序号是x+1，同时表明x为止的所有数据都已正确收到（ack=1其实是ack=0+1,也就是期望客户端的第1个包），seq = y 表示Server 自己的初始序号（seq=0就代表这是服务器这边发出的第0号包）。这时服务器进入syn_rcvd，表示服务器已经收到Client的连接请求，等待client的确认。</p>\n<p>3） Client收到确认后还需再次发送确认，同时携带要发送给Server的数据。ACK 置1 表示确认号ack= y + 1 有效（代表期望收到服务器的第1个包），Client自己的序号seq= x + 1（表示这就是我的第1个包，相对于第0个包来说的），一旦收到Client的确认之后，这个TCP连接就进入Established状态，就可以发起http请求了。</p>\n<h2 id=\"post请求\"><a href=\"#post请求\" class=\"headerlink\" title=\"post请求\"></a>post请求</h2><p>HTTP 协议是以 ASCII 码传输，建立在TCP/IP协议之上的应用层规范，规范把 HTTP 请求分为三个部分：状态行、请求头、消息主体。类似于下面这样：</p>\n<p><method> <request-url> <version></version></request-url></method></p>\n<p><headers></headers></p>\n<p><entity-body></entity-body><br>协议规定 POST 提交的数据必须放在消息主体（entity-body）中，但协议并没有规定数据必须使用什么编码方式。实际上，开发者完全可以自己决定消息主体的格式，只要最后发送的 HTTP 请求满足上面的格式就可以。</p>\n<p>但是，数据发送出去，还要服务端解析成功才有意义。一般服务端语言如 php、python 等，以及它们的 framework，都内置了自动解析常见数据格式的功能。服务端通常是根据请求头（headers）中的 Content-Type 字段来获知请求中的消息主体是用何种方式编码，再对主体进行解析。所以说到 POST 提交数据方案，包含了 Content-Type 和消息主体编码方式两部分。下面就正式开始介绍它们。</p>\n<p>header<br>Content-Type，内容类型，一般是指网页中存在的Content-Type，用于定义网络文件的类型和网页的编码，决定文件接收方将以什么形式、什么编码读取这个文件.<br>当然还有UA等其他头信息，</p>\n<p>Content-Type对照表：<a href=\"http://tool.oschina.net/commons\" target=\"_blank\" rel=\"noopener\">http://tool.oschina.net/commons</a></p>\n<p>说几种常见的Content-Type</p>\n<p>1.application/x-www-form-urlencoded<br>这个就是我们常见form表格提的方式</p>\n<p>2.multipart/form-data</p>\n<p>这又是一个常见的 POST 数据提交的方式。我们使用表单上传文件时，必须让 form 的 enctyped 等于这个值。直接来看一个请求示例</p>\n<p>3.application/json</p>\n<p>application/json 这个 Content-Type 作为响应头大家肯定不陌生。实际上，现在越来越多的人把它作为请求头，用来告诉服务端消息主体是序列化后的 JSON 字符串。由于 JSON 规范的流行，除了低版本 IE 之外的各大浏览器都原生支持 JSON.stringify，服务端语言也都有处理 JSON 的函数，使用 JSON 不会遇上什么麻烦。</p>\n<p>so 用这种格式就可以传递非Key Val的数据</p>\n","site":{"data":{}},"excerpt":"","more":"<p>#一次完整的HTTP请求，以及请求方式的区别</p>\n<hr>\n<p>今天在对接业务组mas时候遇到一个很少遇到的问题，发送一个一个不但参数的POST的请求。<br>在我的印象里传参好像必带名字，因为就像一个你不认识的人要来你家，你肯定不会让他进来的。<br>所以重新缕了一下POST请求，冲冲能。</p>\n<p>##一次HTTP请求的过程</p>\n<p>访问某个网址，例如我们访问www.baidu.com<br>浏览器会和百度的服务器进行三次握手（中间的域名解析等暂不考虑）<br>然后是程序层面的信息请求与提交</p>\n<p>三次握手-&gt;get或者post请求</p>\n<p>1） Client首先发送一个连接试探，ACK=0 表示确认号无效，SYN = 1 表示这是一个连接请求或连接接受报文，同时表示这个数据报不能携带数据，seq = x 表示Client自己的初始序号（seq = 0 就代表这是第0号包），这时候Client进入syn_sent状态，表示客户端等待服务器的回复</p>\n<p>2） Server监听到连接请求报文后，如同意建立连接，则向Client发送确认。TCP报文首部中的SYN 和 ACK都置1 ，ack = x + 1表示期望收到对方下一个报文段的第一个数据字节序号是x+1，同时表明x为止的所有数据都已正确收到（ack=1其实是ack=0+1,也就是期望客户端的第1个包），seq = y 表示Server 自己的初始序号（seq=0就代表这是服务器这边发出的第0号包）。这时服务器进入syn_rcvd，表示服务器已经收到Client的连接请求，等待client的确认。</p>\n<p>3） Client收到确认后还需再次发送确认，同时携带要发送给Server的数据。ACK 置1 表示确认号ack= y + 1 有效（代表期望收到服务器的第1个包），Client自己的序号seq= x + 1（表示这就是我的第1个包，相对于第0个包来说的），一旦收到Client的确认之后，这个TCP连接就进入Established状态，就可以发起http请求了。</p>\n<h2 id=\"post请求\"><a href=\"#post请求\" class=\"headerlink\" title=\"post请求\"></a>post请求</h2><p>HTTP 协议是以 ASCII 码传输，建立在TCP/IP协议之上的应用层规范，规范把 HTTP 请求分为三个部分：状态行、请求头、消息主体。类似于下面这样：</p>\n<p><method> <request-url> <version></version></request-url></method></p>\n<p><headers></headers></p>\n<p><entity-body></entity-body><br>协议规定 POST 提交的数据必须放在消息主体（entity-body）中，但协议并没有规定数据必须使用什么编码方式。实际上，开发者完全可以自己决定消息主体的格式，只要最后发送的 HTTP 请求满足上面的格式就可以。</p>\n<p>但是，数据发送出去，还要服务端解析成功才有意义。一般服务端语言如 php、python 等，以及它们的 framework，都内置了自动解析常见数据格式的功能。服务端通常是根据请求头（headers）中的 Content-Type 字段来获知请求中的消息主体是用何种方式编码，再对主体进行解析。所以说到 POST 提交数据方案，包含了 Content-Type 和消息主体编码方式两部分。下面就正式开始介绍它们。</p>\n<p>header<br>Content-Type，内容类型，一般是指网页中存在的Content-Type，用于定义网络文件的类型和网页的编码，决定文件接收方将以什么形式、什么编码读取这个文件.<br>当然还有UA等其他头信息，</p>\n<p>Content-Type对照表：<a href=\"http://tool.oschina.net/commons\" target=\"_blank\" rel=\"noopener\">http://tool.oschina.net/commons</a></p>\n<p>说几种常见的Content-Type</p>\n<p>1.application/x-www-form-urlencoded<br>这个就是我们常见form表格提的方式</p>\n<p>2.multipart/form-data</p>\n<p>这又是一个常见的 POST 数据提交的方式。我们使用表单上传文件时，必须让 form 的 enctyped 等于这个值。直接来看一个请求示例</p>\n<p>3.application/json</p>\n<p>application/json 这个 Content-Type 作为响应头大家肯定不陌生。实际上，现在越来越多的人把它作为请求头，用来告诉服务端消息主体是序列化后的 JSON 字符串。由于 JSON 规范的流行，除了低版本 IE 之外的各大浏览器都原生支持 JSON.stringify，服务端语言也都有处理 JSON 的函数，使用 JSON 不会遇上什么麻烦。</p>\n<p>so 用这种格式就可以传递非Key Val的数据</p>\n"},{"title":"Item2使用sz rz命令从服务下载上传文件","date":"2018-07-12T13:27:37.000Z","_content":"\n## 背景\n如何从linux服务下载/上传文件\n\n - 使用scp命令\n - 使用sz命令\n\n\n这里主要介绍使用sz命令下载文件\n\n## 安装\n - 安装lrzsz `hobrew install llssz`\n - 在本地编写shell用于接受sz命令下载下来的文件\n\n上传shell\n\n`iterm2-send-zmodem.sh`\n```\n    #!/bin/bash\n    \n    \n    #Author: Matt Mastracci (matthew@mastracci.com)\n    \n    \n    # AppleScript from http://stackoverflow.com/questions/4309087/cancel-button-on-osascript-in-a-bash-script\n    \n    \n    # licensed under cc-wiki with attribution required\n    \n    \n    # Remainder of script public domain\n    \n    \n    osascript -e 'tell application \"iTerm2\" to version' > /dev/null 2>&1 && NAME=iTerm2 || NAME=iTerm\n    if [[ $NAME = \"iTerm\" ]]; then\n        FILE=`osascript -e 'tell application \"iTerm\" to activate' -e 'tell application \"iTerm\" to set thefile to choose file with prompt \"Choose a file to send\"' -e \"do shell script (\\\"echo \\\"&(quoted form of POSIX path of thefile as Unicode text)&\\\"\\\")\"`\n    else\n        FILE=`osascript -e 'tell application \"iTerm2\" to activate' -e 'tell application \"iTerm2\" to set thefile to choose file with prompt \"Choose a file to send\"' -e \"do shell script (\\\"echo \\\"&(quoted form of POSIX path of thefile as Unicode text)&\\\"\\\")\"`\n    fi\n    if [[ $FILE = \"\" ]]; then\n        echo Cancelled.\n        # Send ZModem cancel\n        echo -e \\\\x18\\\\x18\\\\x18\\\\x18\\\\x18\n        sleep 1\n        echo\n        echo \\# Cancelled transfer\n    else\n        /usr/local/bin/sz \"$FILE\" -e -b\n        sleep 1\n        echo\n        echo \\# Received $FILE\n    fi  \n```\n\n下载shell\n\n`iterm2-recv-zmodem.sh`\n\n```\n    #!/bin/bash\n    # Author: Matt Mastracci (matthew@mastracci.com)\n    # AppleScript from http://stackoverflow.com/questions/4309087/cancel-button-on-osascript-in-a-bash-script\n    # licensed under cc-wiki with attribution required \n    # Remainder of script public domain\n\n    osascript -e 'tell application \"iTerm2\" to version' > /dev/null 2>&1 && NAME=iTerm2 || NAME=iTerm\n    if [[ $NAME = \"iTerm\" ]]; then\n        FILE=`osascript -e 'tell application \"iTerm\" to activate' -e 'tell application \"iTerm\" to set thefile to choose folder with prompt \"Choose a folder to place received files in\"' -e \"do shell script (\\\"echo \\\"&(quoted form of POSIX path of thefile as Unicode text)&\\\"\\\")\"`\n    else\n        FILE=`osascript -e 'tell application \"iTerm2\" to activate' -e 'tell application \"iTerm2\" to set thefile to choose folder with prompt \"Choose a folder to place received files in\"' -e \"do shell script (\\\"echo \\\"&(quoted form of POSIX path of thefile as Unicode text)&\\\"\\\")\"`\n    fi\n\n    if [[ $FILE = \"\" ]]; then\n        echo Cancelled.\n        # Send ZModem cancel\n        echo -e \\\\x18\\\\x18\\\\x18\\\\x18\\\\x18\n        sleep 1\n        echo\n        echo \\# Cancelled transfer\n    else\n        cd \"$FILE\"\n        /usr/local/bin/rz -E -e -b\n        sleep 1\n        echo\n        echo\n        echo \\# Sent \\-\\> $FILE\n    fi\n```\n## 配置iterm2\n\n- 设置Iterm2的Tirgger特性，profiles-default-editProfiles-Advanced中的Tirgger\n\n```\n    添加两条trigger，分别设置Regular expression，Action，Parameters，Instant如下：\n        1.第一条\n            Regular expression: rz waiting to receive.\\*\\*B0100\n            Action: Run Silent Coprocess\n            Parameters: /usr/local/bin/iterm2-send-zmodem.sh\n            Instant: checked\n        2.第二条\n            Regular expression: \\*\\*B00000000000000\n            Action: Run Silent Coprocess\n            Parameters: /usr/local/bin/iterm2-recv-zmodem.sh\n            Instant: checked\n```\n\n**备注**:注意两个文件的权限","source":"_posts/使用sz-rz命令从服务下载上传文件.md","raw":"---\ntitle: Item2使用sz rz命令从服务下载上传文件\ndate: 2018-07-12 21:27:37\ntags:\n---\n\n## 背景\n如何从linux服务下载/上传文件\n\n - 使用scp命令\n - 使用sz命令\n\n\n这里主要介绍使用sz命令下载文件\n\n## 安装\n - 安装lrzsz `hobrew install llssz`\n - 在本地编写shell用于接受sz命令下载下来的文件\n\n上传shell\n\n`iterm2-send-zmodem.sh`\n```\n    #!/bin/bash\n    \n    \n    #Author: Matt Mastracci (matthew@mastracci.com)\n    \n    \n    # AppleScript from http://stackoverflow.com/questions/4309087/cancel-button-on-osascript-in-a-bash-script\n    \n    \n    # licensed under cc-wiki with attribution required\n    \n    \n    # Remainder of script public domain\n    \n    \n    osascript -e 'tell application \"iTerm2\" to version' > /dev/null 2>&1 && NAME=iTerm2 || NAME=iTerm\n    if [[ $NAME = \"iTerm\" ]]; then\n        FILE=`osascript -e 'tell application \"iTerm\" to activate' -e 'tell application \"iTerm\" to set thefile to choose file with prompt \"Choose a file to send\"' -e \"do shell script (\\\"echo \\\"&(quoted form of POSIX path of thefile as Unicode text)&\\\"\\\")\"`\n    else\n        FILE=`osascript -e 'tell application \"iTerm2\" to activate' -e 'tell application \"iTerm2\" to set thefile to choose file with prompt \"Choose a file to send\"' -e \"do shell script (\\\"echo \\\"&(quoted form of POSIX path of thefile as Unicode text)&\\\"\\\")\"`\n    fi\n    if [[ $FILE = \"\" ]]; then\n        echo Cancelled.\n        # Send ZModem cancel\n        echo -e \\\\x18\\\\x18\\\\x18\\\\x18\\\\x18\n        sleep 1\n        echo\n        echo \\# Cancelled transfer\n    else\n        /usr/local/bin/sz \"$FILE\" -e -b\n        sleep 1\n        echo\n        echo \\# Received $FILE\n    fi  \n```\n\n下载shell\n\n`iterm2-recv-zmodem.sh`\n\n```\n    #!/bin/bash\n    # Author: Matt Mastracci (matthew@mastracci.com)\n    # AppleScript from http://stackoverflow.com/questions/4309087/cancel-button-on-osascript-in-a-bash-script\n    # licensed under cc-wiki with attribution required \n    # Remainder of script public domain\n\n    osascript -e 'tell application \"iTerm2\" to version' > /dev/null 2>&1 && NAME=iTerm2 || NAME=iTerm\n    if [[ $NAME = \"iTerm\" ]]; then\n        FILE=`osascript -e 'tell application \"iTerm\" to activate' -e 'tell application \"iTerm\" to set thefile to choose folder with prompt \"Choose a folder to place received files in\"' -e \"do shell script (\\\"echo \\\"&(quoted form of POSIX path of thefile as Unicode text)&\\\"\\\")\"`\n    else\n        FILE=`osascript -e 'tell application \"iTerm2\" to activate' -e 'tell application \"iTerm2\" to set thefile to choose folder with prompt \"Choose a folder to place received files in\"' -e \"do shell script (\\\"echo \\\"&(quoted form of POSIX path of thefile as Unicode text)&\\\"\\\")\"`\n    fi\n\n    if [[ $FILE = \"\" ]]; then\n        echo Cancelled.\n        # Send ZModem cancel\n        echo -e \\\\x18\\\\x18\\\\x18\\\\x18\\\\x18\n        sleep 1\n        echo\n        echo \\# Cancelled transfer\n    else\n        cd \"$FILE\"\n        /usr/local/bin/rz -E -e -b\n        sleep 1\n        echo\n        echo\n        echo \\# Sent \\-\\> $FILE\n    fi\n```\n## 配置iterm2\n\n- 设置Iterm2的Tirgger特性，profiles-default-editProfiles-Advanced中的Tirgger\n\n```\n    添加两条trigger，分别设置Regular expression，Action，Parameters，Instant如下：\n        1.第一条\n            Regular expression: rz waiting to receive.\\*\\*B0100\n            Action: Run Silent Coprocess\n            Parameters: /usr/local/bin/iterm2-send-zmodem.sh\n            Instant: checked\n        2.第二条\n            Regular expression: \\*\\*B00000000000000\n            Action: Run Silent Coprocess\n            Parameters: /usr/local/bin/iterm2-recv-zmodem.sh\n            Instant: checked\n```\n\n**备注**:注意两个文件的权限","slug":"使用sz-rz命令从服务下载上传文件","published":1,"updated":"2018-07-12T13:42:45.196Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkb4lzjs000ftrww6z3l1v6h","content":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>如何从linux服务下载/上传文件</p>\n<ul>\n<li>使用scp命令</li>\n<li>使用sz命令</li>\n</ul>\n<p>这里主要介绍使用sz命令下载文件</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><ul>\n<li>安装lrzsz <code>hobrew install llssz</code></li>\n<li>在本地编写shell用于接受sz命令下载下来的文件</li>\n</ul>\n<p>上传shell</p>\n<p><code>iterm2-send-zmodem.sh</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\">#!/bin/bash</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">#Author: Matt Mastracci (matthew@mastracci.com)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"># AppleScript from http://stackoverflow.com/questions/4309087/cancel-button-on-osascript-in-a-bash-script</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"># licensed under cc-wiki with attribution required</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"># Remainder of script public domain</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">osascript -e &apos;tell application &quot;iTerm2&quot; to version&apos; &gt; /dev/null 2&gt;&amp;1 &amp;&amp; NAME=iTerm2 || NAME=iTerm</div><div class=\"line\">if [[ $NAME = &quot;iTerm&quot; ]]; then</div><div class=\"line\">    FILE=`osascript -e &apos;tell application &quot;iTerm&quot; to activate&apos; -e &apos;tell application &quot;iTerm&quot; to set thefile to choose file with prompt &quot;Choose a file to send&quot;&apos; -e &quot;do shell script (\\&quot;echo \\&quot;&amp;(quoted form of POSIX path of thefile as Unicode text)&amp;\\&quot;\\&quot;)&quot;`</div><div class=\"line\">else</div><div class=\"line\">    FILE=`osascript -e &apos;tell application &quot;iTerm2&quot; to activate&apos; -e &apos;tell application &quot;iTerm2&quot; to set thefile to choose file with prompt &quot;Choose a file to send&quot;&apos; -e &quot;do shell script (\\&quot;echo \\&quot;&amp;(quoted form of POSIX path of thefile as Unicode text)&amp;\\&quot;\\&quot;)&quot;`</div><div class=\"line\">fi</div><div class=\"line\">if [[ $FILE = &quot;&quot; ]]; then</div><div class=\"line\">    echo Cancelled.</div><div class=\"line\">    # Send ZModem cancel</div><div class=\"line\">    echo -e \\\\x18\\\\x18\\\\x18\\\\x18\\\\x18</div><div class=\"line\">    sleep 1</div><div class=\"line\">    echo</div><div class=\"line\">    echo \\# Cancelled transfer</div><div class=\"line\">else</div><div class=\"line\">    /usr/local/bin/sz &quot;$FILE&quot; -e -b</div><div class=\"line\">    sleep 1</div><div class=\"line\">    echo</div><div class=\"line\">    echo \\# Received $FILE</div><div class=\"line\">fi</div></pre></td></tr></table></figure></p>\n<p>下载shell</p>\n<p><code>iterm2-recv-zmodem.sh</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">#!/bin/bash</div><div class=\"line\"># Author: Matt Mastracci (matthew@mastracci.com)</div><div class=\"line\"># AppleScript from http://stackoverflow.com/questions/4309087/cancel-button-on-osascript-in-a-bash-script</div><div class=\"line\"># licensed under cc-wiki with attribution required </div><div class=\"line\"># Remainder of script public domain</div><div class=\"line\"></div><div class=\"line\">osascript -e &apos;tell application &quot;iTerm2&quot; to version&apos; &gt; /dev/null 2&gt;&amp;1 &amp;&amp; NAME=iTerm2 || NAME=iTerm</div><div class=\"line\">if [[ $NAME = &quot;iTerm&quot; ]]; then</div><div class=\"line\">    FILE=`osascript -e &apos;tell application &quot;iTerm&quot; to activate&apos; -e &apos;tell application &quot;iTerm&quot; to set thefile to choose folder with prompt &quot;Choose a folder to place received files in&quot;&apos; -e &quot;do shell script (\\&quot;echo \\&quot;&amp;(quoted form of POSIX path of thefile as Unicode text)&amp;\\&quot;\\&quot;)&quot;`</div><div class=\"line\">else</div><div class=\"line\">    FILE=`osascript -e &apos;tell application &quot;iTerm2&quot; to activate&apos; -e &apos;tell application &quot;iTerm2&quot; to set thefile to choose folder with prompt &quot;Choose a folder to place received files in&quot;&apos; -e &quot;do shell script (\\&quot;echo \\&quot;&amp;(quoted form of POSIX path of thefile as Unicode text)&amp;\\&quot;\\&quot;)&quot;`</div><div class=\"line\">fi</div><div class=\"line\"></div><div class=\"line\">if [[ $FILE = &quot;&quot; ]]; then</div><div class=\"line\">    echo Cancelled.</div><div class=\"line\">    # Send ZModem cancel</div><div class=\"line\">    echo -e \\\\x18\\\\x18\\\\x18\\\\x18\\\\x18</div><div class=\"line\">    sleep 1</div><div class=\"line\">    echo</div><div class=\"line\">    echo \\# Cancelled transfer</div><div class=\"line\">else</div><div class=\"line\">    cd &quot;$FILE&quot;</div><div class=\"line\">    /usr/local/bin/rz -E -e -b</div><div class=\"line\">    sleep 1</div><div class=\"line\">    echo</div><div class=\"line\">    echo</div><div class=\"line\">    echo \\# Sent \\-\\&gt; $FILE</div><div class=\"line\">fi</div></pre></td></tr></table></figure>\n<h2 id=\"配置iterm2\"><a href=\"#配置iterm2\" class=\"headerlink\" title=\"配置iterm2\"></a>配置iterm2</h2><ul>\n<li>设置Iterm2的Tirgger特性，profiles-default-editProfiles-Advanced中的Tirgger</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">添加两条trigger，分别设置Regular expression，Action，Parameters，Instant如下：</div><div class=\"line\">    1.第一条</div><div class=\"line\">        Regular expression: rz waiting to receive.\\*\\*B0100</div><div class=\"line\">        Action: Run Silent Coprocess</div><div class=\"line\">        Parameters: /usr/local/bin/iterm2-send-zmodem.sh</div><div class=\"line\">        Instant: checked</div><div class=\"line\">    2.第二条</div><div class=\"line\">        Regular expression: \\*\\*B00000000000000</div><div class=\"line\">        Action: Run Silent Coprocess</div><div class=\"line\">        Parameters: /usr/local/bin/iterm2-recv-zmodem.sh</div><div class=\"line\">        Instant: checked</div></pre></td></tr></table></figure>\n<p><strong>备注</strong>:注意两个文件的权限</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>如何从linux服务下载/上传文件</p>\n<ul>\n<li>使用scp命令</li>\n<li>使用sz命令</li>\n</ul>\n<p>这里主要介绍使用sz命令下载文件</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><ul>\n<li>安装lrzsz <code>hobrew install llssz</code></li>\n<li>在本地编写shell用于接受sz命令下载下来的文件</li>\n</ul>\n<p>上传shell</p>\n<p><code>iterm2-send-zmodem.sh</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\">#!/bin/bash</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">#Author: Matt Mastracci (matthew@mastracci.com)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"># AppleScript from http://stackoverflow.com/questions/4309087/cancel-button-on-osascript-in-a-bash-script</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"># licensed under cc-wiki with attribution required</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"># Remainder of script public domain</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">osascript -e &apos;tell application &quot;iTerm2&quot; to version&apos; &gt; /dev/null 2&gt;&amp;1 &amp;&amp; NAME=iTerm2 || NAME=iTerm</div><div class=\"line\">if [[ $NAME = &quot;iTerm&quot; ]]; then</div><div class=\"line\">    FILE=`osascript -e &apos;tell application &quot;iTerm&quot; to activate&apos; -e &apos;tell application &quot;iTerm&quot; to set thefile to choose file with prompt &quot;Choose a file to send&quot;&apos; -e &quot;do shell script (\\&quot;echo \\&quot;&amp;(quoted form of POSIX path of thefile as Unicode text)&amp;\\&quot;\\&quot;)&quot;`</div><div class=\"line\">else</div><div class=\"line\">    FILE=`osascript -e &apos;tell application &quot;iTerm2&quot; to activate&apos; -e &apos;tell application &quot;iTerm2&quot; to set thefile to choose file with prompt &quot;Choose a file to send&quot;&apos; -e &quot;do shell script (\\&quot;echo \\&quot;&amp;(quoted form of POSIX path of thefile as Unicode text)&amp;\\&quot;\\&quot;)&quot;`</div><div class=\"line\">fi</div><div class=\"line\">if [[ $FILE = &quot;&quot; ]]; then</div><div class=\"line\">    echo Cancelled.</div><div class=\"line\">    # Send ZModem cancel</div><div class=\"line\">    echo -e \\\\x18\\\\x18\\\\x18\\\\x18\\\\x18</div><div class=\"line\">    sleep 1</div><div class=\"line\">    echo</div><div class=\"line\">    echo \\# Cancelled transfer</div><div class=\"line\">else</div><div class=\"line\">    /usr/local/bin/sz &quot;$FILE&quot; -e -b</div><div class=\"line\">    sleep 1</div><div class=\"line\">    echo</div><div class=\"line\">    echo \\# Received $FILE</div><div class=\"line\">fi</div></pre></td></tr></table></figure></p>\n<p>下载shell</p>\n<p><code>iterm2-recv-zmodem.sh</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">#!/bin/bash</div><div class=\"line\"># Author: Matt Mastracci (matthew@mastracci.com)</div><div class=\"line\"># AppleScript from http://stackoverflow.com/questions/4309087/cancel-button-on-osascript-in-a-bash-script</div><div class=\"line\"># licensed under cc-wiki with attribution required </div><div class=\"line\"># Remainder of script public domain</div><div class=\"line\"></div><div class=\"line\">osascript -e &apos;tell application &quot;iTerm2&quot; to version&apos; &gt; /dev/null 2&gt;&amp;1 &amp;&amp; NAME=iTerm2 || NAME=iTerm</div><div class=\"line\">if [[ $NAME = &quot;iTerm&quot; ]]; then</div><div class=\"line\">    FILE=`osascript -e &apos;tell application &quot;iTerm&quot; to activate&apos; -e &apos;tell application &quot;iTerm&quot; to set thefile to choose folder with prompt &quot;Choose a folder to place received files in&quot;&apos; -e &quot;do shell script (\\&quot;echo \\&quot;&amp;(quoted form of POSIX path of thefile as Unicode text)&amp;\\&quot;\\&quot;)&quot;`</div><div class=\"line\">else</div><div class=\"line\">    FILE=`osascript -e &apos;tell application &quot;iTerm2&quot; to activate&apos; -e &apos;tell application &quot;iTerm2&quot; to set thefile to choose folder with prompt &quot;Choose a folder to place received files in&quot;&apos; -e &quot;do shell script (\\&quot;echo \\&quot;&amp;(quoted form of POSIX path of thefile as Unicode text)&amp;\\&quot;\\&quot;)&quot;`</div><div class=\"line\">fi</div><div class=\"line\"></div><div class=\"line\">if [[ $FILE = &quot;&quot; ]]; then</div><div class=\"line\">    echo Cancelled.</div><div class=\"line\">    # Send ZModem cancel</div><div class=\"line\">    echo -e \\\\x18\\\\x18\\\\x18\\\\x18\\\\x18</div><div class=\"line\">    sleep 1</div><div class=\"line\">    echo</div><div class=\"line\">    echo \\# Cancelled transfer</div><div class=\"line\">else</div><div class=\"line\">    cd &quot;$FILE&quot;</div><div class=\"line\">    /usr/local/bin/rz -E -e -b</div><div class=\"line\">    sleep 1</div><div class=\"line\">    echo</div><div class=\"line\">    echo</div><div class=\"line\">    echo \\# Sent \\-\\&gt; $FILE</div><div class=\"line\">fi</div></pre></td></tr></table></figure>\n<h2 id=\"配置iterm2\"><a href=\"#配置iterm2\" class=\"headerlink\" title=\"配置iterm2\"></a>配置iterm2</h2><ul>\n<li>设置Iterm2的Tirgger特性，profiles-default-editProfiles-Advanced中的Tirgger</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">添加两条trigger，分别设置Regular expression，Action，Parameters，Instant如下：</div><div class=\"line\">    1.第一条</div><div class=\"line\">        Regular expression: rz waiting to receive.\\*\\*B0100</div><div class=\"line\">        Action: Run Silent Coprocess</div><div class=\"line\">        Parameters: /usr/local/bin/iterm2-send-zmodem.sh</div><div class=\"line\">        Instant: checked</div><div class=\"line\">    2.第二条</div><div class=\"line\">        Regular expression: \\*\\*B00000000000000</div><div class=\"line\">        Action: Run Silent Coprocess</div><div class=\"line\">        Parameters: /usr/local/bin/iterm2-recv-zmodem.sh</div><div class=\"line\">        Instant: checked</div></pre></td></tr></table></figure>\n<p><strong>备注</strong>:注意两个文件的权限</p>\n"},{"title":"微服务数据一致性和服务可靠性","grammar_cjkRuby":true,"_content":"\n![image](/photo/img/2018-06-19/servicePic1.png)\n\n  \n  ## 存在问题\n  我们的保证金服务现有结构是这个样子。\n在 1、2、3、4、5、6 各个阶段都会存在超时和异常问题，当负载少时，我们还可以手动人工处理，但是当数据量大的时候，问题或多的令人发指，沉浸于洗数据，无法自拔。。\n超时存在问题：\n1.当1、2、3 步骤超时时，下游服务可以忽略，当做执行失败，重试。\n2.当在环节4、5、6超时时，对于下游服务是也是执行失败，但是还可以重试么？\n\n\n## 如何提高服务可靠性\n对于上游服务，如何保证对下游提供可靠的服务。\n ### 补偿机制\n ![image](/photo/img/2018-06-19/servicePic5.png)\n 在服务间的调用失败时，可以记录失败调用，如队列，消费重试。但是前提一定是接口幂等。\n 但是这样并不能解决根本性问题，如果我们在调用保证金冻结服务时，失败此时我们冻结时报操作入队列，让队列异步消费，如果此时要解冻保证金，就会出现业务异常。\n \n **所以**补偿机制建议使用在 `不可避免的业务异常情况下使用`，我们应该尽可能的优化技术方案，来保证数据一致性，最后再采用补偿机制。\n ### 两段提交协议（2pc）\n![image](/photo/img/2018-06-19/servicePic4.png)\n\npreOperation 执行请求，在调用微服务前，执行预操作成功则表示此次操作可行。\n如果commit失败该如何处理？重新preOperetion嘛？如果接口幂等是否可以重复，commit？如何保证避免重复提交？\n在preOperation时，返回唯一操作ID，业务逻辑每个操作对应一个操作ID，commit失败就重试，当然前提是我们的上有服务接口幂等。\n\n![image](/photo/img/2018-06-19/servicePic3.png)\n即使是这样也会存在问题，如果保证金预操作成功，但是执行一直失败呢？我们必须提供回滚机制。\n![image](/photo/img/2018-06-19/servicePic2.png)\n1. 大量同步RPC依赖，如何保证自身服务可靠性？\n \t服务之间在调用的时候，会存在大量异常、超时。我该如何处理，认为这次是失败的？还是成功的？如果依赖的服务返回成功，才算成功的话，我改如何保证服务可靠性，该如何对我的下游服务提供可靠的服务。\n2. 调用依赖服务失败，如何降级处理？\n\t 在服务调用失败的时候，我的上游出错了，我该如何降级处理，我该重试？还是直接跳过，跳过后是否会造成微服务之间数据一致性问题。如果重试是否会造成重复提交，接口是否幂等？\n3. 是否还欠缺回滚机制？ \n","source":"_posts/微服务数据一致性和服务可靠性.md","raw":"---\ntitle: 微服务数据一致性和服务可靠性\ntags: 分布式,事务\ngrammar_cjkRuby: true\n---\n\n![image](/photo/img/2018-06-19/servicePic1.png)\n\n  \n  ## 存在问题\n  我们的保证金服务现有结构是这个样子。\n在 1、2、3、4、5、6 各个阶段都会存在超时和异常问题，当负载少时，我们还可以手动人工处理，但是当数据量大的时候，问题或多的令人发指，沉浸于洗数据，无法自拔。。\n超时存在问题：\n1.当1、2、3 步骤超时时，下游服务可以忽略，当做执行失败，重试。\n2.当在环节4、5、6超时时，对于下游服务是也是执行失败，但是还可以重试么？\n\n\n## 如何提高服务可靠性\n对于上游服务，如何保证对下游提供可靠的服务。\n ### 补偿机制\n ![image](/photo/img/2018-06-19/servicePic5.png)\n 在服务间的调用失败时，可以记录失败调用，如队列，消费重试。但是前提一定是接口幂等。\n 但是这样并不能解决根本性问题，如果我们在调用保证金冻结服务时，失败此时我们冻结时报操作入队列，让队列异步消费，如果此时要解冻保证金，就会出现业务异常。\n \n **所以**补偿机制建议使用在 `不可避免的业务异常情况下使用`，我们应该尽可能的优化技术方案，来保证数据一致性，最后再采用补偿机制。\n ### 两段提交协议（2pc）\n![image](/photo/img/2018-06-19/servicePic4.png)\n\npreOperation 执行请求，在调用微服务前，执行预操作成功则表示此次操作可行。\n如果commit失败该如何处理？重新preOperetion嘛？如果接口幂等是否可以重复，commit？如何保证避免重复提交？\n在preOperation时，返回唯一操作ID，业务逻辑每个操作对应一个操作ID，commit失败就重试，当然前提是我们的上有服务接口幂等。\n\n![image](/photo/img/2018-06-19/servicePic3.png)\n即使是这样也会存在问题，如果保证金预操作成功，但是执行一直失败呢？我们必须提供回滚机制。\n![image](/photo/img/2018-06-19/servicePic2.png)\n1. 大量同步RPC依赖，如何保证自身服务可靠性？\n \t服务之间在调用的时候，会存在大量异常、超时。我该如何处理，认为这次是失败的？还是成功的？如果依赖的服务返回成功，才算成功的话，我改如何保证服务可靠性，该如何对我的下游服务提供可靠的服务。\n2. 调用依赖服务失败，如何降级处理？\n\t 在服务调用失败的时候，我的上游出错了，我该如何降级处理，我该重试？还是直接跳过，跳过后是否会造成微服务之间数据一致性问题。如果重试是否会造成重复提交，接口是否幂等？\n3. 是否还欠缺回滚机制？ \n","slug":"微服务数据一致性和服务可靠性","published":1,"date":"2018-07-12T13:54:30.353Z","updated":"2018-07-12T13:54:30.353Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkb4lzju000gtrwwzu5srcme","content":"<p><img src=\"/photo/img/2018-06-19/servicePic1.png\" alt=\"image\"></p>\n<h2 id=\"存在问题\"><a href=\"#存在问题\" class=\"headerlink\" title=\"存在问题\"></a>存在问题</h2><p>  我们的保证金服务现有结构是这个样子。<br>在 1、2、3、4、5、6 各个阶段都会存在超时和异常问题，当负载少时，我们还可以手动人工处理，但是当数据量大的时候，问题或多的令人发指，沉浸于洗数据，无法自拔。。<br>超时存在问题：<br>1.当1、2、3 步骤超时时，下游服务可以忽略，当做执行失败，重试。<br>2.当在环节4、5、6超时时，对于下游服务是也是执行失败，但是还可以重试么？</p>\n<h2 id=\"如何提高服务可靠性\"><a href=\"#如何提高服务可靠性\" class=\"headerlink\" title=\"如何提高服务可靠性\"></a>如何提高服务可靠性</h2><p>对于上游服务，如何保证对下游提供可靠的服务。</p>\n<h3 id=\"补偿机制\"><a href=\"#补偿机制\" class=\"headerlink\" title=\"补偿机制\"></a>补偿机制</h3><p> <img src=\"/photo/img/2018-06-19/servicePic5.png\" alt=\"image\"><br> 在服务间的调用失败时，可以记录失败调用，如队列，消费重试。但是前提一定是接口幂等。<br> 但是这样并不能解决根本性问题，如果我们在调用保证金冻结服务时，失败此时我们冻结时报操作入队列，让队列异步消费，如果此时要解冻保证金，就会出现业务异常。</p>\n<p> <strong>所以</strong>补偿机制建议使用在 <code>不可避免的业务异常情况下使用</code>，我们应该尽可能的优化技术方案，来保证数据一致性，最后再采用补偿机制。</p>\n<h3 id=\"两段提交协议（2pc）\"><a href=\"#两段提交协议（2pc）\" class=\"headerlink\" title=\"两段提交协议（2pc）\"></a>两段提交协议（2pc）</h3><p><img src=\"/photo/img/2018-06-19/servicePic4.png\" alt=\"image\"></p>\n<p>preOperation 执行请求，在调用微服务前，执行预操作成功则表示此次操作可行。<br>如果commit失败该如何处理？重新preOperetion嘛？如果接口幂等是否可以重复，commit？如何保证避免重复提交？<br>在preOperation时，返回唯一操作ID，业务逻辑每个操作对应一个操作ID，commit失败就重试，当然前提是我们的上有服务接口幂等。</p>\n<p><img src=\"/photo/img/2018-06-19/servicePic3.png\" alt=\"image\"><br>即使是这样也会存在问题，如果保证金预操作成功，但是执行一直失败呢？我们必须提供回滚机制。<br><img src=\"/photo/img/2018-06-19/servicePic2.png\" alt=\"image\"></p>\n<ol>\n<li>大量同步RPC依赖，如何保证自身服务可靠性？<br>  服务之间在调用的时候，会存在大量异常、超时。我该如何处理，认为这次是失败的？还是成功的？如果依赖的服务返回成功，才算成功的话，我改如何保证服务可靠性，该如何对我的下游服务提供可靠的服务。</li>\n<li>调用依赖服务失败，如何降级处理？<br>  在服务调用失败的时候，我的上游出错了，我该如何降级处理，我该重试？还是直接跳过，跳过后是否会造成微服务之间数据一致性问题。如果重试是否会造成重复提交，接口是否幂等？</li>\n<li>是否还欠缺回滚机制？ </li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"/photo/img/2018-06-19/servicePic1.png\" alt=\"image\"></p>\n<h2 id=\"存在问题\"><a href=\"#存在问题\" class=\"headerlink\" title=\"存在问题\"></a>存在问题</h2><p>  我们的保证金服务现有结构是这个样子。<br>在 1、2、3、4、5、6 各个阶段都会存在超时和异常问题，当负载少时，我们还可以手动人工处理，但是当数据量大的时候，问题或多的令人发指，沉浸于洗数据，无法自拔。。<br>超时存在问题：<br>1.当1、2、3 步骤超时时，下游服务可以忽略，当做执行失败，重试。<br>2.当在环节4、5、6超时时，对于下游服务是也是执行失败，但是还可以重试么？</p>\n<h2 id=\"如何提高服务可靠性\"><a href=\"#如何提高服务可靠性\" class=\"headerlink\" title=\"如何提高服务可靠性\"></a>如何提高服务可靠性</h2><p>对于上游服务，如何保证对下游提供可靠的服务。</p>\n<h3 id=\"补偿机制\"><a href=\"#补偿机制\" class=\"headerlink\" title=\"补偿机制\"></a>补偿机制</h3><p> <img src=\"/photo/img/2018-06-19/servicePic5.png\" alt=\"image\"><br> 在服务间的调用失败时，可以记录失败调用，如队列，消费重试。但是前提一定是接口幂等。<br> 但是这样并不能解决根本性问题，如果我们在调用保证金冻结服务时，失败此时我们冻结时报操作入队列，让队列异步消费，如果此时要解冻保证金，就会出现业务异常。</p>\n<p> <strong>所以</strong>补偿机制建议使用在 <code>不可避免的业务异常情况下使用</code>，我们应该尽可能的优化技术方案，来保证数据一致性，最后再采用补偿机制。</p>\n<h3 id=\"两段提交协议（2pc）\"><a href=\"#两段提交协议（2pc）\" class=\"headerlink\" title=\"两段提交协议（2pc）\"></a>两段提交协议（2pc）</h3><p><img src=\"/photo/img/2018-06-19/servicePic4.png\" alt=\"image\"></p>\n<p>preOperation 执行请求，在调用微服务前，执行预操作成功则表示此次操作可行。<br>如果commit失败该如何处理？重新preOperetion嘛？如果接口幂等是否可以重复，commit？如何保证避免重复提交？<br>在preOperation时，返回唯一操作ID，业务逻辑每个操作对应一个操作ID，commit失败就重试，当然前提是我们的上有服务接口幂等。</p>\n<p><img src=\"/photo/img/2018-06-19/servicePic3.png\" alt=\"image\"><br>即使是这样也会存在问题，如果保证金预操作成功，但是执行一直失败呢？我们必须提供回滚机制。<br><img src=\"/photo/img/2018-06-19/servicePic2.png\" alt=\"image\"></p>\n<ol>\n<li>大量同步RPC依赖，如何保证自身服务可靠性？<br>  服务之间在调用的时候，会存在大量异常、超时。我该如何处理，认为这次是失败的？还是成功的？如果依赖的服务返回成功，才算成功的话，我改如何保证服务可靠性，该如何对我的下游服务提供可靠的服务。</li>\n<li>调用依赖服务失败，如何降级处理？<br>  在服务调用失败的时候，我的上游出错了，我该如何降级处理，我该重试？还是直接跳过，跳过后是否会造成微服务之间数据一致性问题。如果重试是否会造成重复提交，接口是否幂等？</li>\n<li>是否还欠缺回滚机制？ </li>\n</ol>\n"},{"title":"我不是药神","date":"2018-07-13T14:44:43.000Z","_content":"\n\n一直以来都想成为一个坚强的人,但是生活中还是有很多时候让我情不自禁,一部电影被感动哭的稀里哗啦,\n不得不承认我是个泪点很低的人,但是我想这并不妨碍我成为一个坚强的人。\n\n看完点影,不禁想问自己几个问题:\n\n- 电影里徐峥错了么?好像并没有什么大错。尊重知识产权确实一个严肃的问题,不然社会没有前进的动力。\n- 警察错了么? 好像也没有错,秉公执法的警察才是好警察。\n- 病人错了么? 明明知道这是走私药,却仍然要买,我想对于想要活命的人来说,什么都无足轻重了。\n只有哪些真正历过生离死别,一直在生与死的边缘挣扎的人, 才知道生命的可贵。\n\n到底是哪里错了? 我想真的事像电影里所说的一样, 都是因为穷。如果穷是原罪的话,我想这个世界大多数人都犯了很重的罪。\n那么错在哪里, 我想我们的国家体制已经意识到了,她在改变。\n\n\n- 黄毛是个仗义的兄弟, 看到了黄毛, 这不禁让我想到我的高中, 想到了当我处于和别人争执的时候那些为我站出来的朋友。\n\n我想我一直是一个不善于表达的人, 无论对于父母, 伴侣, 还是朋友, 对于他们我一直都很吝啬赞美之词。\n\n\n- 最后一个问题, 如果我是徐峥, 我会站出来么? 当我事业有成的时候, 衣食无忧的时候, 家庭美满的时候, 我会为那些\n需要帮助的人站出来么?\n\n但是我知道, 那些站出来的背影真的很帅, 也值得我们尊敬。","source":"_posts/我不是药神.md","raw":"---\ntitle: 我不是药神\ndate: 2018-07-13 22:44:43\ntags:\n---\n\n\n一直以来都想成为一个坚强的人,但是生活中还是有很多时候让我情不自禁,一部电影被感动哭的稀里哗啦,\n不得不承认我是个泪点很低的人,但是我想这并不妨碍我成为一个坚强的人。\n\n看完点影,不禁想问自己几个问题:\n\n- 电影里徐峥错了么?好像并没有什么大错。尊重知识产权确实一个严肃的问题,不然社会没有前进的动力。\n- 警察错了么? 好像也没有错,秉公执法的警察才是好警察。\n- 病人错了么? 明明知道这是走私药,却仍然要买,我想对于想要活命的人来说,什么都无足轻重了。\n只有哪些真正历过生离死别,一直在生与死的边缘挣扎的人, 才知道生命的可贵。\n\n到底是哪里错了? 我想真的事像电影里所说的一样, 都是因为穷。如果穷是原罪的话,我想这个世界大多数人都犯了很重的罪。\n那么错在哪里, 我想我们的国家体制已经意识到了,她在改变。\n\n\n- 黄毛是个仗义的兄弟, 看到了黄毛, 这不禁让我想到我的高中, 想到了当我处于和别人争执的时候那些为我站出来的朋友。\n\n我想我一直是一个不善于表达的人, 无论对于父母, 伴侣, 还是朋友, 对于他们我一直都很吝啬赞美之词。\n\n\n- 最后一个问题, 如果我是徐峥, 我会站出来么? 当我事业有成的时候, 衣食无忧的时候, 家庭美满的时候, 我会为那些\n需要帮助的人站出来么?\n\n但是我知道, 那些站出来的背影真的很帅, 也值得我们尊敬。","slug":"我不是药神","published":1,"updated":"2018-07-13T15:08:55.702Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkb4lzjv000htrwwxkhdp6tf","content":"<p>一直以来都想成为一个坚强的人,但是生活中还是有很多时候让我情不自禁,一部电影被感动哭的稀里哗啦,<br>不得不承认我是个泪点很低的人,但是我想这并不妨碍我成为一个坚强的人。</p>\n<p>看完点影,不禁想问自己几个问题:</p>\n<ul>\n<li>电影里徐峥错了么?好像并没有什么大错。尊重知识产权确实一个严肃的问题,不然社会没有前进的动力。</li>\n<li>警察错了么? 好像也没有错,秉公执法的警察才是好警察。</li>\n<li>病人错了么? 明明知道这是走私药,却仍然要买,我想对于想要活命的人来说,什么都无足轻重了。<br>只有哪些真正历过生离死别,一直在生与死的边缘挣扎的人, 才知道生命的可贵。</li>\n</ul>\n<p>到底是哪里错了? 我想真的事像电影里所说的一样, 都是因为穷。如果穷是原罪的话,我想这个世界大多数人都犯了很重的罪。<br>那么错在哪里, 我想我们的国家体制已经意识到了,她在改变。</p>\n<ul>\n<li>黄毛是个仗义的兄弟, 看到了黄毛, 这不禁让我想到我的高中, 想到了当我处于和别人争执的时候那些为我站出来的朋友。</li>\n</ul>\n<p>我想我一直是一个不善于表达的人, 无论对于父母, 伴侣, 还是朋友, 对于他们我一直都很吝啬赞美之词。</p>\n<ul>\n<li>最后一个问题, 如果我是徐峥, 我会站出来么? 当我事业有成的时候, 衣食无忧的时候, 家庭美满的时候, 我会为那些<br>需要帮助的人站出来么?</li>\n</ul>\n<p>但是我知道, 那些站出来的背影真的很帅, 也值得我们尊敬。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>一直以来都想成为一个坚强的人,但是生活中还是有很多时候让我情不自禁,一部电影被感动哭的稀里哗啦,<br>不得不承认我是个泪点很低的人,但是我想这并不妨碍我成为一个坚强的人。</p>\n<p>看完点影,不禁想问自己几个问题:</p>\n<ul>\n<li>电影里徐峥错了么?好像并没有什么大错。尊重知识产权确实一个严肃的问题,不然社会没有前进的动力。</li>\n<li>警察错了么? 好像也没有错,秉公执法的警察才是好警察。</li>\n<li>病人错了么? 明明知道这是走私药,却仍然要买,我想对于想要活命的人来说,什么都无足轻重了。<br>只有哪些真正历过生离死别,一直在生与死的边缘挣扎的人, 才知道生命的可贵。</li>\n</ul>\n<p>到底是哪里错了? 我想真的事像电影里所说的一样, 都是因为穷。如果穷是原罪的话,我想这个世界大多数人都犯了很重的罪。<br>那么错在哪里, 我想我们的国家体制已经意识到了,她在改变。</p>\n<ul>\n<li>黄毛是个仗义的兄弟, 看到了黄毛, 这不禁让我想到我的高中, 想到了当我处于和别人争执的时候那些为我站出来的朋友。</li>\n</ul>\n<p>我想我一直是一个不善于表达的人, 无论对于父母, 伴侣, 还是朋友, 对于他们我一直都很吝啬赞美之词。</p>\n<ul>\n<li>最后一个问题, 如果我是徐峥, 我会站出来么? 当我事业有成的时候, 衣食无忧的时候, 家庭美满的时候, 我会为那些<br>需要帮助的人站出来么?</li>\n</ul>\n<p>但是我知道, 那些站出来的背影真的很帅, 也值得我们尊敬。</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cjkb4lzjk0007trww19ah00qy","tag_id":"cjkb4lzjm0009trwwrml9oojq","_id":"cjkb4lzjs000etrwwt7tx11g8"},{"post_id":"cjkb4lzjq000btrwwkuafxgh3","tag_id":"cjkb4lzjs000dtrww89yg9uli","_id":"cjkb4lzjw000jtrwwmnjisqg5"},{"post_id":"cjkb4lzju000gtrwwzu5srcme","tag_id":"cjkb4lzjv000itrwwiacz3hi5","_id":"cjkb4lzjw000ktrwwq2jw7jxr"}],"Tag":[{"name":"curl","_id":"cjkb4lzjm0009trwwrml9oojq"},{"name":"python, shell, crond","_id":"cjkb4lzjs000dtrww89yg9uli"},{"name":"分布式,事务","_id":"cjkb4lzjv000itrwwiacz3hi5"}]}}