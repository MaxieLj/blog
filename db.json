{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/b325609689e6e350fab73951048aba5b_xl.jpg","path":"b325609689e6e350fab73951048aba5b_xl.jpg","modified":1,"renderable":0},{"_id":"themes/apollo/source/favicon.png","path":"favicon.png","modified":1,"renderable":1},{"_id":"themes/apollo/source/css/apollo.css","path":"css/apollo.css","modified":1,"renderable":1},{"_id":"themes/apollo/source/font/sourcesanspro.woff","path":"font/sourcesanspro.woff","modified":1,"renderable":1},{"_id":"themes/apollo/source/scss/apollo.scss","path":"scss/apollo.scss","modified":1,"renderable":1},{"_id":"themes/apollo/source/font/sourcesanspro.woff2","path":"font/sourcesanspro.woff2","modified":1,"renderable":1},{"_id":"source/photo/img/2018-06-19/servicePic1.png","path":"photo/img/2018-06-19/servicePic1.png","modified":1,"renderable":0},{"_id":"source/photo/img/2018-06-19/servicePic4.png","path":"photo/img/2018-06-19/servicePic4.png","modified":1,"renderable":0},{"_id":"source/photo/img/2018-06-19/servicePic3.png","path":"photo/img/2018-06-19/servicePic3.png","modified":1,"renderable":0},{"_id":"source/photo/img/2018-06-19/servicePic5.png","path":"photo/img/2018-06-19/servicePic5.png","modified":1,"renderable":0},{"_id":"source/photo/img/php内存管理/自身引用.png","path":"photo/img/php内存管理/自身引用.png","modified":1,"renderable":0},{"_id":"source/photo/img/php内存管理/写时复制.png","path":"photo/img/php内存管理/写时复制.png","modified":1,"renderable":0},{"_id":"source/photo/img/php内存管理/释放.png","path":"photo/img/php内存管理/释放.png","modified":1,"renderable":0},{"_id":"source/photo/img/php引用/引用后.png","path":"photo/img/php引用/引用后.png","modified":1,"renderable":0},{"_id":"source/photo/img/php数据结构/php数据结构.png","path":"photo/img/php数据结构/php数据结构.png","modified":1,"renderable":0},{"_id":"source/photo/img/php引用/未引用前.png","path":"photo/img/php引用/未引用前.png","modified":1,"renderable":0},{"_id":"source/photo/img/php数据结构/zend_stirng内存中结构.png","path":"photo/img/php数据结构/zend_stirng内存中结构.png","modified":1,"renderable":0},{"_id":"source/photo/img/php数组实现/hashtable.png","path":"photo/img/php数组实现/hashtable.png","modified":1,"renderable":0},{"_id":"source/photo/img/php数组实现/php数组具体实现.png","path":"photo/img/php数组实现/php数组具体实现.png","modified":1,"renderable":0},{"_id":"source/photo/img/php数组实现/链表冲突.png","path":"photo/img/php数组实现/链表冲突.png","modified":1,"renderable":0},{"_id":"source/photo/img/创建一个composer包/自动加载目录.png","path":"photo/img/创建一个composer包/自动加载目录.png","modified":1,"renderable":0},{"_id":"source/photo/img/guzzle压测/逻辑上并行-100次结束.png","path":"photo/img/guzzle压测/逻辑上并行-100次结束.png","modified":1,"renderable":0},{"_id":"source/photo/img/php-curl/DingTalk20180718203726.png","path":"photo/img/php-curl/DingTalk20180718203726.png","modified":1,"renderable":0},{"_id":"source/photo/img/php-curl/DingTalk20180718204055.png","path":"photo/img/php-curl/DingTalk20180718204055.png","modified":1,"renderable":0},{"_id":"source/photo/img/php-curl/DingTalk20180718204411.png","path":"photo/img/php-curl/DingTalk20180718204411.png","modified":1,"renderable":0},{"_id":"source/photo/img/php-curl/DingTalk20180718204343.png","path":"photo/img/php-curl/DingTalk20180718204343.png","modified":1,"renderable":0},{"_id":"source/photo/img/solr-增删改查/DingTalk20180621202319.png","path":"photo/img/solr-增删改查/DingTalk20180621202319.png","modified":1,"renderable":0},{"_id":"source/photo/img/solr-增删改查/执行删除操作结果.png","path":"photo/img/solr-增删改查/执行删除操作结果.png","modified":1,"renderable":0},{"_id":"source/photo/img/swagger-ui/WX20180807-095949.png","path":"photo/img/swagger-ui/WX20180807-095949.png","modified":1,"renderable":0},{"_id":"source/photo/img/2018-06-19/servicePic2.png","path":"photo/img/2018-06-19/servicePic2.png","modified":1,"renderable":0},{"_id":"source/photo/img/solr-增删改查/执行删除前数据.png","path":"photo/img/solr-增删改查/执行删除前数据.png","modified":1,"renderable":0},{"_id":"source/photo/img/solr-增删改查/执行结果.png","path":"photo/img/solr-增删改查/执行结果.png","modified":1,"renderable":0},{"_id":"source/photo/img/guzzle压测/串行每个请求耗时.png","path":"photo/img/guzzle压测/串行每个请求耗时.png","modified":1,"renderable":0},{"_id":"source/photo/img/guzzle压测/带时间的并行请求结果.png","path":"photo/img/guzzle压测/带时间的并行请求结果.png","modified":1,"renderable":0},{"_id":"source/photo/img/guzzle压测/逻辑上并行-100次.png","path":"photo/img/guzzle压测/逻辑上并行-100次.png","modified":1,"renderable":0},{"_id":"source/photo/img/solr-增删改查/更新操作.png","path":"photo/img/solr-增删改查/更新操作.png","modified":1,"renderable":0},{"_id":"source/photo/img/guzzle压测/带时间的串行请求结果.png","path":"photo/img/guzzle压测/带时间的串行请求结果.png","modified":1,"renderable":0},{"_id":"source/photo/img/solr-增删改查/新增数据.png","path":"photo/img/solr-增删改查/新增数据.png","modified":1,"renderable":0},{"_id":"source/photo/img/solr-增删改查/执行删除操作.png","path":"photo/img/solr-增删改查/执行删除操作.png","modified":1,"renderable":0},{"_id":"source/photo/img/guzzle压测/串行.png","path":"photo/img/guzzle压测/串行.png","modified":1,"renderable":0},{"_id":"source/photo/img/guzzle压测/并行.png","path":"photo/img/guzzle压测/并行.png","modified":1,"renderable":0},{"_id":"source/photo/img/kong/kong-404.png","path":"photo/img/kong/kong-404.png","modified":1,"renderable":0},{"_id":"source/photo/img/guzzle压测/逻辑上的串行-100次.png","path":"photo/img/guzzle压测/逻辑上的串行-100次.png","modified":1,"renderable":0},{"_id":"source/photo/img/kong/pg_hba.conf.png","path":"photo/img/kong/pg_hba.conf.png","modified":1,"renderable":0}],"Cache":[{"_id":"source/.DS_Store","hash":"3eaabdda02eee428ffc22809e22321baaa7a586a","modified":1533886383988},{"_id":"source/b325609689e6e350fab73951048aba5b_xl.jpg","hash":"f42904b1e5ce91bd3fae16b21c7928301e88c9da","modified":1482149562000},{"_id":"themes/apollo/.gitignore","hash":"a006beea0877a0aa3610ee00e73f62cb1d45125b","modified":1535771705317},{"_id":"themes/apollo/README.md","hash":"201c76d030a98578ed5a6ad5c766a7bde91c32d3","modified":1535771705318},{"_id":"themes/apollo/gulpfile.js","hash":"857a026b6643a2cd52c65d4ae0dc7fe9618206ee","modified":1535771705319},{"_id":"themes/apollo/package.json","hash":"eb1e76ec0b7ed6c6c7b2bd32b4f1e1bbe15800ca","modified":1535771705323},{"_id":"themes/apollo/_config.yml","hash":"1383a12bf0623d933dc65046ed97865a14ce92a2","modified":1535772137557},{"_id":"themes/apollo/LICENSE","hash":"6e31ac9076bfc8f09ae47977419eee4edfb63e5b","modified":1535771705317},{"_id":"source/_drafts/int**与二维数组.md","hash":"5e428ceb0686652bdd035f82581edda6287524da","modified":1546172860941},{"_id":"source/_drafts/gdb.md","hash":"d44a43d4b3ee5543f58f6a350345ffb48cd2448a","modified":1545389645153},{"_id":"source/_drafts/jMeter.md","hash":"045f55b08726884f9b0711e938893a4c3480b29e","modified":1544431794009},{"_id":"source/_drafts/c语言指针与字符串.md","hash":"33624825b11c1581674ad2a8ec164feac1ef3c13","modified":1545622720738},{"_id":"source/_drafts/git-手册.md","hash":"c41e951909d9898c145f18cae26bf3f993f730d8","modified":1543480378971},{"_id":"source/_drafts/tcpdump.md","hash":"753a34520851c0d97336dd14430687656a446cb4","modified":1545389607265},{"_id":"source/_drafts/压测优化nginx日志.md","hash":"89f4b96c432a4199b47db2627c29f125a2ede947","modified":1544514368854},{"_id":"source/_drafts/strace.md","hash":"ee753534c702acf5ad1e6666774e8f3575720707","modified":1545389527336},{"_id":"source/_drafts/socket编程.md","hash":"55e17c181f2c393ef72788ab605467b78e6402c8","modified":1545544858855},{"_id":"source/_drafts/基于c语言实现链表.md","hash":"ea2b44221624a627128a8904ff83c79898c37d3f","modified":1544499063733},{"_id":"source/_drafts/基于redis的分布式锁.md","hash":"0739f90263e33b0835e29be45579c51b710582bc","modified":1540284607208},{"_id":"source/_drafts/如何分析慢sql.md","hash":"977c7e7663d89e493bf127a3e935ec79fa078943","modified":1544611876085},{"_id":"source/_drafts/如何实现psr4自动加载.md","hash":"2634350be8e0d44eed4c606ff563ff9c659e05b9","modified":1540180025999},{"_id":"source/_drafts/数据库一些基本知识.md","hash":"492eb5316476cf16e78339179eb0c412b0932c49","modified":1544611902651},{"_id":"source/_drafts/数据库锁.md","hash":"5e277eaa68fefa137f9fa33d5790ad3a58a5db47","modified":1545389717634},{"_id":"source/_drafts/数据库索引.md","hash":"8623caa23dd4e17c9d522c495de154f6e2690ea2","modified":1545389731039},{"_id":"source/_drafts/算法.md","hash":"001fffb219ce3ad6744e177358c581d8eb0baf23","modified":1545656730764},{"_id":"source/_drafts/数据库缓存.md","hash":"2ab0fdf390b23efaec8cea51c9407a414aba2ffa","modified":1545389745220},{"_id":"source/_posts/PHPExecel.md","hash":"fb2adabb0c5f7508b2d85d7690c9a9acaa549a9f","modified":1529404561359},{"_id":"source/_posts/github.md","hash":"36c360ca820cf33d4a74ce32c30c01200fe151d2","modified":1529404514525},{"_id":"source/_posts/hexo-git-github搭建博客.md","hash":"3ed5a2ac8d34720c60caf9c7d5eed5f5cc450b68","modified":1540178874674},{"_id":"source/_posts/kong.md","hash":"5e8af62beb084a0366f1c98cef397ab63394b83a","modified":1545215318424},{"_id":"source/_posts/php-curl.md","hash":"50d22a201c3f045fc0bde4667ac59ccbfdce7cf0","modified":1531918079013},{"_id":"source/_posts/php数据结构.md","hash":"4894f66876e5bb6c528e0a820829b483229167d8","modified":1540178927722},{"_id":"source/_posts/php垃圾回收.md","hash":"f358932be7b1ddc314949726bdf04647ecbbdb1d","modified":1543198461387},{"_id":"source/_posts/php数组实现.md","hash":"292182bacfc77094637c79bb0fded306427374ac","modified":1544499015730},{"_id":"source/_posts/php的&符号.md","hash":"22e2e95cfc9efe315cac6287d4ecc01eb911bac5","modified":1540866015100},{"_id":"source/_posts/php闭包.md","hash":"624afb9dedb1664a58ecc3c9d23cac483930b254","modified":1535185488893},{"_id":"source/_posts/python学习笔记一.md","hash":"f215c012e63ccb8db18a1ffbda14313b77a65475","modified":1534681864532},{"_id":"source/_posts/solr-从控制页面删除数据.md","hash":"9b423a35955439d80f4f6864f90728a661504501","modified":1537263055557},{"_id":"source/_posts/swagger.md","hash":"86b69612b3922debf5572a8734c708f4db6edd2e","modified":1533612796945},{"_id":"source/_posts/一次HTTP请求.md","hash":"b1b5f1fea704df2c7d9ef62cecdbf1635c69dfb7","modified":1541840487815},{"_id":"source/_posts/websocket订阅火币成交记录.md","hash":"fb37c982c215d2d61ba7b3eedcf552353f4b25ee","modified":1529403588515},{"_id":"source/_posts/使用guzzle并行请求.md","hash":"e6196d27b273c0e2c726a32e28ec43ad26164bf9","modified":1541728422848},{"_id":"source/_posts/使用sz-rz命令从服务下载上传文件.md","hash":"5b317027a11cd4e4d2133d9987bde6247436837a","modified":1531402965196},{"_id":"source/_posts/微服务数据一致性和服务可靠性.md","hash":"ca8e5213faba5e723ed1ecd838791edb70893e8b","modified":1531403670353},{"_id":"source/_posts/如何建立一个composer私有包.md","hash":"2e086fe7c486d7b6f2e6f7dc9dbebc9d82b320fe","modified":1539691539870},{"_id":"source/_posts/数据库隔离级别.md","hash":"2e1cc8b07ea264a28bcdceba58664f3cc467b075","modified":1545568465229},{"_id":"source/_posts/设计模式.md","hash":"e4f2fcd812ba68f7d2b25ff962591fbab647733c","modified":1533204754678},{"_id":"source/photo/index.md","hash":"0aa76c50ad7e4c763eecba26bff548f2666b8f7f","modified":1482154790000},{"_id":"source/photo/output.json","hash":"b6f0c8376f879349bd41590b2d9301d2faf6b38e","modified":1482153780000},{"_id":"source/photo/.DS_Store","hash":"9e74cad0a728bae4f90fca405f5ea1b7cb08d0ef","modified":1533886964267},{"_id":"source/photo/tool.js","hash":"9166382c1d5e9dffac1cf484503a70488c720166","modified":1482049780000},{"_id":"themes/apollo/doc/doc-en.md","hash":"409e931a444c02a57b64a0a44dde6e66c1881ca0","modified":1535771705318},{"_id":"themes/apollo/languages/zh-cn.yml","hash":"22a2d16fe8c0dddb016b5325b9b9c182a1b49ae1","modified":1535771705319},{"_id":"themes/apollo/languages/en.yml","hash":"ca168b190932229884db1de755ec2f793c758a16","modified":1535771705319},{"_id":"themes/apollo/doc/doc-zh.md","hash":"2a6a81840cdaf497969268a12d8f62c98cc38103","modified":1535771705319},{"_id":"themes/apollo/layout/index.jade","hash":"55f2f1b4b5364a0e09cb18e1112664c6415fb881","modified":1535771705320},{"_id":"themes/apollo/layout/archive.jade","hash":"62797414355bf4474092bc3a32726c8340820ffb","modified":1535771705320},{"_id":"themes/apollo/layout/post.jade","hash":"245c26244c075c3632d1545c3b228ee9d112f15d","modified":1535771705323},{"_id":"themes/apollo/source/favicon.png","hash":"a9cdcb22d1e74d5480323e19d1983de5a6873b8c","modified":1535771705324},{"_id":"source/photo/img/.DS_Store","hash":"954e71b1659f5f8b55d77daace953aa786e5fc5c","modified":1533890645729},{"_id":"themes/apollo/layout/mixins/paginator.jade","hash":"f4ee2fb61a32e199b48cf93771749edc8a007391","modified":1535771705320},{"_id":"themes/apollo/layout/mixins/post.jade","hash":"f23c6c40e14cdf16783b3c2baf736c9dce18408c","modified":1535771705320},{"_id":"themes/apollo/layout/partial/copyright.jade","hash":"217f8b17054e5079f2d30bb7e2e4e36c0f2161b7","modified":1535771705321},{"_id":"themes/apollo/layout/partial/layout.jade","hash":"529c2ec06cfbc3d5b6d66dd320db50dfab5577a6","modified":1535771705322},{"_id":"themes/apollo/layout/partial/comment.jade","hash":"ff0a2c269c2434da2ac5529872f1d6184a71f96d","modified":1535771705321},{"_id":"themes/apollo/layout/partial/nav.jade","hash":"f4842d9d3d763fbb823d112a6f49f24cc42a0ad4","modified":1535771705322},{"_id":"themes/apollo/layout/partial/scripts.jade","hash":"6bff591ae3d1ff6750f239c4c933ad61f009f36a","modified":1535771705322},{"_id":"themes/apollo/layout/partial/head.jade","hash":"43d2db73f0247a9a3ed00ecb95b537a872b7201a","modified":1535771705321},{"_id":"themes/apollo/source/css/apollo.css","hash":"e07a11a5da5fc097f023e06a85575356066afd09","modified":1535771705324},{"_id":"themes/apollo/source/font/sourcesanspro.woff","hash":"a6722c9b6439b7a020a9be3d3178970757a9265c","modified":1535771705325},{"_id":"themes/apollo/source/scss/apollo.scss","hash":"e0092f469264b55b25e0d441274f1c812147e7d1","modified":1535771705334},{"_id":"themes/apollo/source/font/sourcesanspro.woff2","hash":"da65f527a8da65d5eb6721626d28cfdb46ab104a","modified":1535771705325},{"_id":"source/photo/img/2018-06-19/servicePic1.png","hash":"d70e7b5cc208e05b58b9716a1affb8a4018fc929","modified":1529404850000},{"_id":"source/photo/img/2018-06-19/servicePic4.png","hash":"85884fa22437134430169182e3ea72df03fd7e43","modified":1529409198000},{"_id":"source/photo/img/2018-06-19/servicePic3.png","hash":"17be50dacdca270537254810c882fad0cc060cb2","modified":1529409229000},{"_id":"source/photo/img/2018-06-19/servicePic5.png","hash":"523b397346c0042541a83d0ce9d5503e78b8b6d0","modified":1529409154000},{"_id":"source/photo/img/php内存管理/自身引用.png","hash":"98af7602bc35fb49c9d5482afcf22d0fab024459","modified":1541556522000},{"_id":"source/photo/img/php内存管理/写时复制.png","hash":"89fdb3b8d476cb02e6ddc9bf0f3eb75ec8ba27aa","modified":1541469091000},{"_id":"source/photo/img/php内存管理/释放.png","hash":"48e5bfc07235ea4fd58df90369a00ddc5c91da08","modified":1541556606000},{"_id":"source/photo/img/php引用/引用后.png","hash":"9597a3a0a657405cdd1202aff6b89c6310de3764","modified":1534086413000},{"_id":"source/photo/img/php数据结构/php数据结构.png","hash":"9d90514461188eeded55f8428baae352753f9a68","modified":1534751806000},{"_id":"source/photo/img/php引用/未引用前.png","hash":"754834c971f01ca2808ea626deafa39e9adeee8c","modified":1534084631000},{"_id":"source/photo/img/php数据结构/zend_stirng内存中结构.png","hash":"ba352ab7603161e9b22bab7346c7f36b09579f1d","modified":1534758784000},{"_id":"source/photo/img/php数组实现/hashtable.png","hash":"c2e5ad35cb5d5a8b906d6e1ffb3165584511d83e","modified":1534929454000},{"_id":"source/photo/img/php数组实现/php数组具体实现.png","hash":"a3bd58cf36844ad094ef214cb2be3e6e4d2998a9","modified":1535017614000},{"_id":"source/photo/img/php数组实现/链表冲突.png","hash":"8832a1cea6dc461fdf5da067b9451f2dbdd4a09a","modified":1535019084000},{"_id":"themes/apollo/source/scss/_partial/archive-post-list.scss","hash":"d2f740a7d48349b7536777c795f82ab740836d0f","modified":1535771705326},{"_id":"source/photo/img/创建一个composer包/自动加载目录.png","hash":"64abb657c6240079a6507cc4a0c5b3618b082cf1","modified":1539691079000},{"_id":"themes/apollo/source/scss/_partial/base.scss","hash":"ae967b2049ecb9b8c4e139ecce32fd9fb5358ac5","modified":1535771705328},{"_id":"themes/apollo/source/scss/_partial/header.scss","hash":"153bde88bf8ffeae4ffd813d8cc694dd83d33d94","modified":1535771705331},{"_id":"themes/apollo/source/scss/_partial/footer.scss","hash":"094aca6e52f11b139ac7980ca03fa7b9d8fc7b2f","modified":1535771705330},{"_id":"themes/apollo/source/scss/_partial/home-post-list.scss","hash":"6b5c59f3d2295944f934aee2c1156012a3306d5d","modified":1535771705331},{"_id":"themes/apollo/source/scss/_partial/copyright.scss","hash":"1309667e3000037170cfbb5b8c9c65f4ffcf6814","modified":1535771705328},{"_id":"themes/apollo/source/scss/_partial/mq.scss","hash":"fc5dda52cfbb10e27e2471e03f4606fb3d588225","modified":1535771705332},{"_id":"themes/apollo/source/scss/_partial/post.scss","hash":"1998f207541a2590a5624549f96c5e65d136690a","modified":1535771705333},{"_id":"themes/apollo/source/scss/_partial/normalize.scss","hash":"fd0b27bed6f103ea95b08f698ea663ff576dbcf1","modified":1535771705332},{"_id":"source/photo/img/guzzle压测/逻辑上并行-100次结束.png","hash":"119848567dd0203e6101d2ea437fbd976e054ac4","modified":1538137027000},{"_id":"source/photo/img/php-curl/DingTalk20180718203726.png","hash":"c7f3e0a5e85439f98b330994c35ef3944254e5df","modified":1531917460000},{"_id":"source/photo/img/php-curl/DingTalk20180718204055.png","hash":"ebe305b6b44223e9e5d2761ad257d252b4dbfec0","modified":1531917656000},{"_id":"source/photo/img/php-curl/DingTalk20180718204411.png","hash":"faf427a5248d8466352ca960417ff6c97940ceec","modified":1531917852000},{"_id":"source/photo/img/php-curl/DingTalk20180718204343.png","hash":"2bea4819d0eab6d599bf82f1a06d16787f94ae66","modified":1531917827000},{"_id":"source/photo/img/solr-增删改查/DingTalk20180621202319.png","hash":"5dfa9cb97017ed029184472ecbb11a9142704bed","modified":1529583800000},{"_id":"source/photo/img/solr-增删改查/执行删除操作结果.png","hash":"f21588f4d3afcb91d8122b87cf2f74d0b0927273","modified":1537261732000},{"_id":"source/photo/img/swagger-ui/WX20180807-095949.png","hash":"da067d9351db2e6e4a28343c1cb5c2ca2c8cab1e","modified":1533607195437},{"_id":"source/photo/img/2018-06-19/servicePic2.png","hash":"eb24df666df5261869eee0f24b7285485789bd83","modified":1529409251000},{"_id":"source/photo/img/solr-增删改查/执行删除前数据.png","hash":"6661fbdb596354789ad24d6bb4c9a4fa8b9d9eb2","modified":1537261580000},{"_id":"source/photo/img/solr-增删改查/执行结果.png","hash":"7dc54985909b181f82c5be86204f562e29289400","modified":1537262652000},{"_id":"source/photo/img/guzzle压测/串行每个请求耗时.png","hash":"f5da5dae9b9810e7f44fcd55687110856a1cc1a0","modified":1538301125000},{"_id":"source/photo/img/guzzle压测/带时间的并行请求结果.png","hash":"ce356c2c25d1e36c8ef3430432aa50ece32eeaf8","modified":1539684844000},{"_id":"source/photo/img/guzzle压测/逻辑上并行-100次.png","hash":"3fb745973c0fe5e83c0e3e0015996ac296d6f3c1","modified":1538137019000},{"_id":"source/photo/img/solr-增删改查/更新操作.png","hash":"037a32d4c743e6d9143f0558db68a4bb2a87a8f1","modified":1537262987000},{"_id":"source/photo/img/guzzle压测/带时间的串行请求结果.png","hash":"c186c02d5fe483853df7f94b8bb1725df17d4fe2","modified":1539684833000},{"_id":"source/photo/img/solr-增删改查/新增数据.png","hash":"51b48f48a30b3f10d82f02ca1ef9ed4c69648b40","modified":1537262411000},{"_id":"source/photo/img/solr-增删改查/执行删除操作.png","hash":"1260cbf7fff4519a3e6a318e6a82a2c0335b7d4e","modified":1537261725000},{"_id":"source/photo/img/guzzle压测/串行.png","hash":"7b4b69870d3f717ef74036d144f06020104f6b42","modified":1538136540000},{"_id":"source/photo/img/guzzle压测/并行.png","hash":"8d678769c9c5c73db9e1b4bcb88f93c35fb60523","modified":1538136650000},{"_id":"source/photo/img/kong/kong-404.png","hash":"3d3dd12a068d9c8d1b2d4dec1d702a486583a3f3","modified":1543749083082},{"_id":"source/photo/img/guzzle压测/逻辑上的串行-100次.png","hash":"518b74fc8648770dd69471e41288618be4a09490","modified":1538137000000},{"_id":"source/photo/img/kong/pg_hba.conf.png","hash":"3474a8f6dcbb890b8f528fb7a07bd098a564512e","modified":1543746991230}],"Category":[],"Data":[],"Page":[{"title":"相册","noDate":"true","_content":"<link type=\"text/css\" href=\"/fancybox/jquery.fancybox.css\" rel=\"stylesheet\">\n<div class=\"instagram\"><section class=\"archives album\"><ul class=\"img-box-ul\"></ul></section></div>\n\t\n</div>\n<script src=\"/js/photo.js\"></script>\n<script src=\"/js/jquery-3.1.1.min.js\"></script>\n<script type=\"text/javascript\">\nfunction test() {\n\t$.getJSON(\"/photo/output.json\", function (data) {\n\t\tvar li=\"\";\n    \t for(i=0;i<=data.length-1;i++){\n    \t \tli += '<div style=\"width:250px;height:250px;float:left;margin-left:10px\"><img src=\"https://raw.githubusercontent.com/MaxieLj/blog/master/photos/' + data[i] + '\"  style=\"width:100%; height:100%;float:left\"/></div>'\n                   ;\n    \t }\n       li+='<div style=\"clear:both\"></div>'\n    \t $('.instagram').append(li);   \t\n    });\n    \n}\ntest();\n\n\t\n</script>","source":"photo/index.md","raw":"title: 相册\nnoDate: 'true'\n---\n<link type=\"text/css\" href=\"/fancybox/jquery.fancybox.css\" rel=\"stylesheet\">\n<div class=\"instagram\"><section class=\"archives album\"><ul class=\"img-box-ul\"></ul></section></div>\n\t\n</div>\n<script src=\"/js/photo.js\"></script>\n<script src=\"/js/jquery-3.1.1.min.js\"></script>\n<script type=\"text/javascript\">\nfunction test() {\n\t$.getJSON(\"/photo/output.json\", function (data) {\n\t\tvar li=\"\";\n    \t for(i=0;i<=data.length-1;i++){\n    \t \tli += '<div style=\"width:250px;height:250px;float:left;margin-left:10px\"><img src=\"https://raw.githubusercontent.com/MaxieLj/blog/master/photos/' + data[i] + '\"  style=\"width:100%; height:100%;float:left\"/></div>'\n                   ;\n    \t }\n       li+='<div style=\"clear:both\"></div>'\n    \t $('.instagram').append(li);   \t\n    });\n    \n}\ntest();\n\n\t\n</script>","date":"2017-11-16T14:35:24.000Z","updated":"2016-12-19T13:39:50.000Z","path":"photo/index.html","comments":1,"layout":"page","_id":"cjqavhgm9001dzqjfdkglxz59","content":"<p><link type=\"text/css\" href=\"/fancybox/jquery.fancybox.css\" rel=\"stylesheet\"></p>\n<div class=\"instagram\"><section class=\"archives album\"><ul class=\"img-box-ul\"></ul></section></div>\n\n<p></p>\n<script src=\"/js/photo.js\"></script>\n<script src=\"/js/jquery-3.1.1.min.js\"></script>\n<script type=\"text/javascript\">\nfunction test() {\n    $.getJSON(\"/photo/output.json\", function (data) {\n        var li=\"\";\n         for(i=0;i<=data.length-1;i++){\n             li += '<div style=\"width:250px;height:250px;float:left;margin-left:10px\"><img src=\"https://raw.githubusercontent.com/MaxieLj/blog/master/photos/' + data[i] + '\"  style=\"width:100%; height:100%;float:left\"/></div>'\n                   ;\n         }\n       li+='<div style=\"clear:both\"></div>'\n         $('.instagram').append(li);       \n    });\n\n}\ntest();\n\n\n</script>","site":{"data":{}},"excerpt":"","more":"<p><link type=\"text/css\" href=\"/fancybox/jquery.fancybox.css\" rel=\"stylesheet\"></p>\n<div class=\"instagram\"><section class=\"archives album\"><ul class=\"img-box-ul\"></ul></section></div>\n\n<p></p>\n<script src=\"/js/photo.js\"></script>\n<script src=\"/js/jquery-3.1.1.min.js\"></script>\n<script type=\"text/javascript\">\nfunction test() {\n    $.getJSON(\"/photo/output.json\", function (data) {\n        var li=\"\";\n         for(i=0;i<=data.length-1;i++){\n             li += '<div style=\"width:250px;height:250px;float:left;margin-left:10px\"><img src=\"https://raw.githubusercontent.com/MaxieLj/blog/master/photos/' + data[i] + '\"  style=\"width:100%; height:100%;float:left\"/></div>'\n                   ;\n         }\n       li+='<div style=\"clear:both\"></div>'\n         $('.instagram').append(li);       \n    });\n\n}\ntest();\n\n\n</script>"},{"_content":"[\n\t\"219305422169140726.jpg\",\n\t\"326320136918309177.jpg\",\n\t\"832021159053859552.jpg\",\n\t\"844103819611894943.jpg\"\n]","source":"photo/output.json","raw":"[\n\t\"219305422169140726.jpg\",\n\t\"326320136918309177.jpg\",\n\t\"832021159053859552.jpg\",\n\t\"844103819611894943.jpg\"\n]","date":"2017-11-16T14:35:24.000Z","updated":"2016-12-19T13:23:00.000Z","path":"photo/output.json","layout":"false","title":"","comments":1,"_id":"cjqavhgma001ezqjfos92wqhp","content":"[\"219305422169140726.jpg\",\"326320136918309177.jpg\",\"832021159053859552.jpg\",\"844103819611894943.jpg\"]","site":{"data":{}},"excerpt":"","more":"[\"219305422169140726.jpg\",\"326320136918309177.jpg\",\"832021159053859552.jpg\",\"844103819611894943.jpg\"]"},{"_content":"\"use strict\";\n    const fs = require(\"fs\");\n    const path = \"../../photos\";\n\n    fs.readdir(path, function (err, files) {\n        if (err) {\n            return;\n        }\n        let arr = [];\n        (function iterator(index) {\n            if (index == files.length) {\n                fs.writeFile(\"output.json\", JSON.stringify(arr, null, \"\\t\"));\n                return;\n            }\n\n            fs.stat(path + \"/\" + files[index], function (err, stats) {\n                if (err) {\n                    return;\n                }\n                if (stats.isFile()) {\n                    arr.push(files[index]);\n                }\n                iterator(index + 1);\n            })\n        }(0));\n    });","source":"photo/tool.js","raw":"\"use strict\";\n    const fs = require(\"fs\");\n    const path = \"../../photos\";\n\n    fs.readdir(path, function (err, files) {\n        if (err) {\n            return;\n        }\n        let arr = [];\n        (function iterator(index) {\n            if (index == files.length) {\n                fs.writeFile(\"output.json\", JSON.stringify(arr, null, \"\\t\"));\n                return;\n            }\n\n            fs.stat(path + \"/\" + files[index], function (err, stats) {\n                if (err) {\n                    return;\n                }\n                if (stats.isFile()) {\n                    arr.push(files[index]);\n                }\n                iterator(index + 1);\n            })\n        }(0));\n    });","date":"2017-11-16T14:35:24.000Z","updated":"2016-12-18T08:29:40.000Z","path":"photo/tool.js","layout":"false","title":"","comments":1,"_id":"cjqavhgma001fzqjfaphz8ub3","content":"\"use strict\";\n    const fs = require(\"fs\");\n    const path = \"../../photos\";\n\n    fs.readdir(path, function (err, files) {\n        if (err) {\n            return;\n        }\n        let arr = [];\n        (function iterator(index) {\n            if (index == files.length) {\n                fs.writeFile(\"output.json\", JSON.stringify(arr, null, \"\\t\"));\n                return;\n            }\n\n            fs.stat(path + \"/\" + files[index], function (err, stats) {\n                if (err) {\n                    return;\n                }\n                if (stats.isFile()) {\n                    arr.push(files[index]);\n                }\n                iterator(index + 1);\n            })\n        }(0));\n    });","site":{"data":{}},"excerpt":"","more":"\"use strict\";\n    const fs = require(\"fs\");\n    const path = \"../../photos\";\n\n    fs.readdir(path, function (err, files) {\n        if (err) {\n            return;\n        }\n        let arr = [];\n        (function iterator(index) {\n            if (index == files.length) {\n                fs.writeFile(\"output.json\", JSON.stringify(arr, null, \"\\t\"));\n                return;\n            }\n\n            fs.stat(path + \"/\" + files[index], function (err, stats) {\n                if (err) {\n                    return;\n                }\n                if (stats.isFile()) {\n                    arr.push(files[index]);\n                }\n                iterator(index + 1);\n            })\n        }(0));\n    });"}],"Post":[{"title":"nt**与二维数组","_content":"","source":"_drafts/int**与二维数组.md","raw":"---\ntitle: nt**与二维数组\ntags:\n---\n","slug":"int**与二维数组","published":0,"date":"2018-12-30T12:27:17.360Z","updated":"2018-12-30T12:27:40.941Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqavhgci0000zqjfqwi1c9tb","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"gdb","_content":"","source":"_drafts/gdb.md","raw":"---\ntitle: gdb\ntags:\n---\n","slug":"gdb","published":0,"date":"2018-12-21T10:54:05.153Z","updated":"2018-12-21T10:54:05.153Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqavhgcm0001zqjf41wjsaea","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"jMeter","_content":"","source":"_drafts/jMeter.md","raw":"---\ntitle: jMeter\ntags:\n---\n","slug":"jMeter","published":0,"date":"2018-12-10T08:49:54.008Z","updated":"2018-12-10T08:49:54.009Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqavhgcp0002zqjfvxctgs9f","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"c语言指针与字符串","_content":"\n## 问题\n\n```c\n#include<string.h>\nvoid main(){\n    char str[] = \"hello world\";\n\tint len = strlen(str),i;\n\tfor (i = 0; i < len; i++) {\n\t\tprintf(\"%c\", str[i]);\n\t}\n        printf(\"\\n\");\n\tchar *p = str;\n\tfor (i = 0; i < len; i++) {\n\t\tprintf(\"%c\", *(p++));\n\t}\n        printf(\"\\n\");\n        for (i = 0; i < len; i++) {\n\t\tprintf(\"%c\", *(str+i));\n\t}\n\tsystem(\"pause\");\n```\n- 字符数组归根结底还是一个数组，上图中定义的字符串数组，str也可以认为是一个指针，指针以及数组方面操作均适用。\n\n除了字符数组外，C语言还支持直接使用一个指针指向字符串的方式来表示字符串，代码如下\n```c\nchar *str = \"hello C language\";\n```\n### 原因\n以此方式定义的字符串，同样可以对此字符串进行多样的操作。为什么可以用字符数组表示字符串，非要弄个指针来表示字符串呢？这其中定有深意。原来它们最根本的区别是在内存中的存储区域不一样，字符数组存储在全局数据区或栈区，而以指针形式表示的字符串却存储在常量区。全局数据区和栈区的字符串（也包括其他数据）有读取和写入的权限，而常量区的字符串（也包括其他数据）只有读取权限，没有写入权限。一句话概括：数组形字符串存放在全局数据区或栈区，可读可写。指针字符串存放在常量区，只读不能写。\n\n所以经常会出现我在本地调试的时候字符串指针无法修改其内容（指针指向一个常量），但是在leecode（指针指向数组，存储于堆栈）却可以。。。尴尬。\n\n\n","source":"_drafts/c语言指针与字符串.md","raw":"---\ntitle: c语言指针与字符串\ntags:\n---\n\n## 问题\n\n```c\n#include<string.h>\nvoid main(){\n    char str[] = \"hello world\";\n\tint len = strlen(str),i;\n\tfor (i = 0; i < len; i++) {\n\t\tprintf(\"%c\", str[i]);\n\t}\n        printf(\"\\n\");\n\tchar *p = str;\n\tfor (i = 0; i < len; i++) {\n\t\tprintf(\"%c\", *(p++));\n\t}\n        printf(\"\\n\");\n        for (i = 0; i < len; i++) {\n\t\tprintf(\"%c\", *(str+i));\n\t}\n\tsystem(\"pause\");\n```\n- 字符数组归根结底还是一个数组，上图中定义的字符串数组，str也可以认为是一个指针，指针以及数组方面操作均适用。\n\n除了字符数组外，C语言还支持直接使用一个指针指向字符串的方式来表示字符串，代码如下\n```c\nchar *str = \"hello C language\";\n```\n### 原因\n以此方式定义的字符串，同样可以对此字符串进行多样的操作。为什么可以用字符数组表示字符串，非要弄个指针来表示字符串呢？这其中定有深意。原来它们最根本的区别是在内存中的存储区域不一样，字符数组存储在全局数据区或栈区，而以指针形式表示的字符串却存储在常量区。全局数据区和栈区的字符串（也包括其他数据）有读取和写入的权限，而常量区的字符串（也包括其他数据）只有读取权限，没有写入权限。一句话概括：数组形字符串存放在全局数据区或栈区，可读可写。指针字符串存放在常量区，只读不能写。\n\n所以经常会出现我在本地调试的时候字符串指针无法修改其内容（指针指向一个常量），但是在leecode（指针指向数组，存储于堆栈）却可以。。。尴尬。\n\n\n","slug":"c语言指针与字符串","published":0,"date":"2018-12-24T02:12:12.675Z","updated":"2018-12-30T15:05:13.655Z","_id":"cjqavhgcq0003zqjfb3ovplt8","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string.h&gt;</span></span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">char</span> str[] = <span class=\"string\">\"hello world\"</span>;</div><div class=\"line\">\t<span class=\"keyword\">int</span> len = <span class=\"built_in\">strlen</span>(str),i;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</div><div class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%c\"</span>, str[i]);</div><div class=\"line\">\t&#125;</div><div class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"\\n\"</span>);</div><div class=\"line\">\t<span class=\"keyword\">char</span> *p = str;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</div><div class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%c\"</span>, *(p++));</div><div class=\"line\">\t&#125;</div><div class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"\\n\"</span>);</div><div class=\"line\">        <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</div><div class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%c\"</span>, *(str+i));</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</div></pre></td></tr></table></figure>\n<ul>\n<li>字符数组归根结底还是一个数组，上图中定义的字符串数组，str也可以认为是一个指针，指针以及数组方面操作均适用。</li>\n</ul>\n<p>除了字符数组外，C语言还支持直接使用一个指针指向字符串的方式来表示字符串，代码如下<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">char</span> *str = <span class=\"string\">\"hello C language\"</span>;</div></pre></td></tr></table></figure></p>\n<h3 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因\"></a>原因</h3><p>以此方式定义的字符串，同样可以对此字符串进行多样的操作。为什么可以用字符数组表示字符串，非要弄个指针来表示字符串呢？这其中定有深意。原来它们最根本的区别是在内存中的存储区域不一样，字符数组存储在全局数据区或栈区，而以指针形式表示的字符串却存储在常量区。全局数据区和栈区的字符串（也包括其他数据）有读取和写入的权限，而常量区的字符串（也包括其他数据）只有读取权限，没有写入权限。一句话概括：数组形字符串存放在全局数据区或栈区，可读可写。指针字符串存放在常量区，只读不能写。</p>\n<p>所以经常会出现我在本地调试的时候字符串指针无法修改其内容（指针指向一个常量），但是在leecode（指针指向数组，存储于堆栈）却可以。。。尴尬。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string.h&gt;</span></span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">char</span> str[] = <span class=\"string\">\"hello world\"</span>;</div><div class=\"line\">\t<span class=\"keyword\">int</span> len = <span class=\"built_in\">strlen</span>(str),i;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</div><div class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%c\"</span>, str[i]);</div><div class=\"line\">\t&#125;</div><div class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"\\n\"</span>);</div><div class=\"line\">\t<span class=\"keyword\">char</span> *p = str;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</div><div class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%c\"</span>, *(p++));</div><div class=\"line\">\t&#125;</div><div class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"\\n\"</span>);</div><div class=\"line\">        <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</div><div class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%c\"</span>, *(str+i));</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</div></pre></td></tr></table></figure>\n<ul>\n<li>字符数组归根结底还是一个数组，上图中定义的字符串数组，str也可以认为是一个指针，指针以及数组方面操作均适用。</li>\n</ul>\n<p>除了字符数组外，C语言还支持直接使用一个指针指向字符串的方式来表示字符串，代码如下<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">char</span> *str = <span class=\"string\">\"hello C language\"</span>;</div></pre></td></tr></table></figure></p>\n<h3 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因\"></a>原因</h3><p>以此方式定义的字符串，同样可以对此字符串进行多样的操作。为什么可以用字符数组表示字符串，非要弄个指针来表示字符串呢？这其中定有深意。原来它们最根本的区别是在内存中的存储区域不一样，字符数组存储在全局数据区或栈区，而以指针形式表示的字符串却存储在常量区。全局数据区和栈区的字符串（也包括其他数据）有读取和写入的权限，而常量区的字符串（也包括其他数据）只有读取权限，没有写入权限。一句话概括：数组形字符串存放在全局数据区或栈区，可读可写。指针字符串存放在常量区，只读不能写。</p>\n<p>所以经常会出现我在本地调试的时候字符串指针无法修改其内容（指针指向一个常量），但是在leecode（指针指向数组，存储于堆栈）却可以。。。尴尬。</p>\n"},{"title":"git 手册","_content":"\n1.如何上传本地文件到git远程仓库\n```\ngit init \ngit remote add origin git@gitlab.renrenche.com:lijian/hera-kong.git\ngit add .\ngit commit -m ''\ngit push --set-upstream origin master\ngit push\n```","source":"_drafts/git-手册.md","raw":"---\ntitle: git 手册\ntags:\n---\n\n1.如何上传本地文件到git远程仓库\n```\ngit init \ngit remote add origin git@gitlab.renrenche.com:lijian/hera-kong.git\ngit add .\ngit commit -m ''\ngit push --set-upstream origin master\ngit push\n```","slug":"git-手册","published":0,"date":"2018-11-29T08:25:38.216Z","updated":"2018-11-29T08:32:58.971Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqavhgcr0004zqjffjyjei2w","content":"<p>1.如何上传本地文件到git远程仓库<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">git init </div><div class=\"line\">git remote add origin git@gitlab.renrenche.com:lijian/hera-kong.git</div><div class=\"line\">git add .</div><div class=\"line\">git commit -m &apos;&apos;</div><div class=\"line\">git push --set-upstream origin master</div><div class=\"line\">git push</div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>1.如何上传本地文件到git远程仓库<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">git init </div><div class=\"line\">git remote add origin git@gitlab.renrenche.com:lijian/hera-kong.git</div><div class=\"line\">git add .</div><div class=\"line\">git commit -m &apos;&apos;</div><div class=\"line\">git push --set-upstream origin master</div><div class=\"line\">git push</div></pre></td></tr></table></figure></p>\n"},{"title":"tcpdump","_content":"","source":"_drafts/tcpdump.md","raw":"---\ntitle: tcpdump\ntags:\n---\n","slug":"tcpdump","published":0,"date":"2018-12-21T10:53:27.264Z","updated":"2018-12-21T10:53:27.265Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqavhgcs0005zqjfjjguli9p","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"nginx各种时间的详细解释","_content":"","source":"_drafts/压测优化nginx日志.md","raw":"---\ntitle: nginx各种时间的详细解释\ntags:\n---\n","slug":"压测优化nginx日志","published":0,"date":"2018-12-11T07:44:08.697Z","updated":"2018-12-11T07:46:08.854Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqavhgct0006zqjfp58e5hzm","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"strace","_content":"","source":"_drafts/strace.md","raw":"---\ntitle: strace\ntags:\n---\n","slug":"strace","published":0,"date":"2018-12-21T10:52:07.336Z","updated":"2018-12-21T10:52:07.336Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqavhgct0007zqjf5lwqz831","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"socket编程","_content":"","source":"_drafts/socket编程.md","raw":"---\ntitle: socket编程\ntags:\n---\n","slug":"socket编程","published":0,"date":"2018-12-23T06:00:58.855Z","updated":"2018-12-23T06:00:58.855Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqavhgcu0008zqjfzeke2dcz","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"基于c语言实现链表","_content":"","source":"_drafts/基于c语言实现链表.md","raw":"---\ntitle: 基于c语言实现链表\ntags:\n---\n","slug":"基于c语言实现链表","published":0,"date":"2018-12-11T03:31:03.732Z","updated":"2018-12-11T03:31:03.733Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqavhgcv0009zqjf0ic1gvp9","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"基于redis的分布式锁","_content":"\n## 锁\n当业务中存在多个竞争者对统一资源进行插入/更新的时候,且当前资源只允许一个操作者更改/插入时,就会存在竞争关系。如果不妥善处理竞争会导致\n数据混乱。\n\neg:\n\n已支付为例,现在存在A B两个操作者,账户余额为100元。\n\n- A 减少账户50元。\n- B 扣账户致账户100元。\n\n在扣除账户余额之前,会对账户余额进行校验,如果账户余额不足,应该拒绝操作。如果此时不对资源（账户）加锁 ,会存在如下情况:\n\n1 A操作首先对账户校验, 当前账户余额100元, 允许操作, 进行扣除操作。\n2 B操作对账户进行校验, 当前账户余额100元, 允许操作, 进行扣除操作。\n3 A执行扣除完毕,当前账户余额50元。\n4 B执行扣除完毕,当前账户余额-50元。\n\n\n在这种场景会导致当前账户余额为负数,这肯定输不允许出现的。\n所以需要资源加锁。\n\n\n## 分布式锁\n\n顾名思义, 锁是分布式的, 多个服务同时公用一个锁。\n\n\n## 如何实现:\n\n\n锁是对某种资源的占有。\n\n加锁:\n\n基于redis生成一个带有过期时间的key\n\n```php\n$redis->set($lock->sourceName, $lock->key, ['nx', 'ex' => $lock->expire])\n\n```\n- `expire`为过期时间,如果超过过期时间,则自动解锁。\n- `key` 生成当前锁的key,随机生成。\n解锁:\n\n具体动作: 比对当前锁和当前key是否匹配,如果匹配则解锁（删除当前redis里的key）\n\n实现:\n\n```php\n$script = '\n        if redis.call(\"get\",KEYS[1]) == ARGV[1]\n        then\n            return redis.call(\"del\",KEYS[1])\n        else\n            return 0\n        end\n    ';\n$redis->eval($script,[$locks, $keys],$numKeys)\n```\n- 其中locks为锁名。\n- $keys为秘钥。\n\n## 异常\n\n如果进程异常,我们需要解锁当前锁。\n具体实现:\n\n```php\n register_shutdown_function(function(){\n            $lock->release();\n        });\n```\n\nphp中程序异常退出会调用register_shutdown_function()所注册函数,所以只要在程序异常时,解锁当前注册锁就可以了。\n\n\n\n","source":"_drafts/基于redis的分布式锁.md","raw":"---\ntitle: 基于redis的分布式锁\ntags:\n---\n\n## 锁\n当业务中存在多个竞争者对统一资源进行插入/更新的时候,且当前资源只允许一个操作者更改/插入时,就会存在竞争关系。如果不妥善处理竞争会导致\n数据混乱。\n\neg:\n\n已支付为例,现在存在A B两个操作者,账户余额为100元。\n\n- A 减少账户50元。\n- B 扣账户致账户100元。\n\n在扣除账户余额之前,会对账户余额进行校验,如果账户余额不足,应该拒绝操作。如果此时不对资源（账户）加锁 ,会存在如下情况:\n\n1 A操作首先对账户校验, 当前账户余额100元, 允许操作, 进行扣除操作。\n2 B操作对账户进行校验, 当前账户余额100元, 允许操作, 进行扣除操作。\n3 A执行扣除完毕,当前账户余额50元。\n4 B执行扣除完毕,当前账户余额-50元。\n\n\n在这种场景会导致当前账户余额为负数,这肯定输不允许出现的。\n所以需要资源加锁。\n\n\n## 分布式锁\n\n顾名思义, 锁是分布式的, 多个服务同时公用一个锁。\n\n\n## 如何实现:\n\n\n锁是对某种资源的占有。\n\n加锁:\n\n基于redis生成一个带有过期时间的key\n\n```php\n$redis->set($lock->sourceName, $lock->key, ['nx', 'ex' => $lock->expire])\n\n```\n- `expire`为过期时间,如果超过过期时间,则自动解锁。\n- `key` 生成当前锁的key,随机生成。\n解锁:\n\n具体动作: 比对当前锁和当前key是否匹配,如果匹配则解锁（删除当前redis里的key）\n\n实现:\n\n```php\n$script = '\n        if redis.call(\"get\",KEYS[1]) == ARGV[1]\n        then\n            return redis.call(\"del\",KEYS[1])\n        else\n            return 0\n        end\n    ';\n$redis->eval($script,[$locks, $keys],$numKeys)\n```\n- 其中locks为锁名。\n- $keys为秘钥。\n\n## 异常\n\n如果进程异常,我们需要解锁当前锁。\n具体实现:\n\n```php\n register_shutdown_function(function(){\n            $lock->release();\n        });\n```\n\nphp中程序异常退出会调用register_shutdown_function()所注册函数,所以只要在程序异常时,解锁当前注册锁就可以了。\n\n\n\n","slug":"基于redis的分布式锁","published":0,"date":"2018-10-23T08:50:07.208Z","updated":"2018-10-23T08:50:07.208Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqavhgcv000azqjfafy2ukut","content":"<h2 id=\"锁\"><a href=\"#锁\" class=\"headerlink\" title=\"锁\"></a>锁</h2><p>当业务中存在多个竞争者对统一资源进行插入/更新的时候,且当前资源只允许一个操作者更改/插入时,就会存在竞争关系。如果不妥善处理竞争会导致<br>数据混乱。</p>\n<p>eg:</p>\n<p>已支付为例,现在存在A B两个操作者,账户余额为100元。</p>\n<ul>\n<li>A 减少账户50元。</li>\n<li>B 扣账户致账户100元。</li>\n</ul>\n<p>在扣除账户余额之前,会对账户余额进行校验,如果账户余额不足,应该拒绝操作。如果此时不对资源（账户）加锁 ,会存在如下情况:</p>\n<p>1 A操作首先对账户校验, 当前账户余额100元, 允许操作, 进行扣除操作。<br>2 B操作对账户进行校验, 当前账户余额100元, 允许操作, 进行扣除操作。<br>3 A执行扣除完毕,当前账户余额50元。<br>4 B执行扣除完毕,当前账户余额-50元。</p>\n<p>在这种场景会导致当前账户余额为负数,这肯定输不允许出现的。<br>所以需要资源加锁。</p>\n<h2 id=\"分布式锁\"><a href=\"#分布式锁\" class=\"headerlink\" title=\"分布式锁\"></a>分布式锁</h2><p>顾名思义, 锁是分布式的, 多个服务同时公用一个锁。</p>\n<h2 id=\"如何实现\"><a href=\"#如何实现\" class=\"headerlink\" title=\"如何实现:\"></a>如何实现:</h2><p>锁是对某种资源的占有。</p>\n<p>加锁:</p>\n<p>基于redis生成一个带有过期时间的key</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$redis-&gt;set($lock-&gt;sourceName, $lock-&gt;key, [<span class=\"string\">'nx'</span>, <span class=\"string\">'ex'</span> =&gt; $lock-&gt;expire])</div></pre></td></tr></table></figure>\n<ul>\n<li><code>expire</code>为过期时间,如果超过过期时间,则自动解锁。</li>\n<li><code>key</code> 生成当前锁的key,随机生成。<br>解锁:</li>\n</ul>\n<p>具体动作: 比对当前锁和当前key是否匹配,如果匹配则解锁（删除当前redis里的key）</p>\n<p>实现:</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">$script = <span class=\"string\">'</span></div><div class=\"line\">        if redis.call(\"get\",KEYS[1]) == ARGV[1]</div><div class=\"line\">        then</div><div class=\"line\">            return redis.call(\"del\",KEYS[1])</div><div class=\"line\">        else</div><div class=\"line\">            return 0</div><div class=\"line\">        end</div><div class=\"line\">    ';</div><div class=\"line\">$redis-&gt;eval($script,[$locks, $keys],$numKeys)</div></pre></td></tr></table></figure>\n<ul>\n<li>其中locks为锁名。</li>\n<li>$keys为秘钥。</li>\n</ul>\n<h2 id=\"异常\"><a href=\"#异常\" class=\"headerlink\" title=\"异常\"></a>异常</h2><p>如果进程异常,我们需要解锁当前锁。<br>具体实现:</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">register_shutdown_function(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">           $lock-&gt;release();</div><div class=\"line\">       &#125;);</div></pre></td></tr></table></figure>\n<p>php中程序异常退出会调用register_shutdown_function()所注册函数,所以只要在程序异常时,解锁当前注册锁就可以了。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"锁\"><a href=\"#锁\" class=\"headerlink\" title=\"锁\"></a>锁</h2><p>当业务中存在多个竞争者对统一资源进行插入/更新的时候,且当前资源只允许一个操作者更改/插入时,就会存在竞争关系。如果不妥善处理竞争会导致<br>数据混乱。</p>\n<p>eg:</p>\n<p>已支付为例,现在存在A B两个操作者,账户余额为100元。</p>\n<ul>\n<li>A 减少账户50元。</li>\n<li>B 扣账户致账户100元。</li>\n</ul>\n<p>在扣除账户余额之前,会对账户余额进行校验,如果账户余额不足,应该拒绝操作。如果此时不对资源（账户）加锁 ,会存在如下情况:</p>\n<p>1 A操作首先对账户校验, 当前账户余额100元, 允许操作, 进行扣除操作。<br>2 B操作对账户进行校验, 当前账户余额100元, 允许操作, 进行扣除操作。<br>3 A执行扣除完毕,当前账户余额50元。<br>4 B执行扣除完毕,当前账户余额-50元。</p>\n<p>在这种场景会导致当前账户余额为负数,这肯定输不允许出现的。<br>所以需要资源加锁。</p>\n<h2 id=\"分布式锁\"><a href=\"#分布式锁\" class=\"headerlink\" title=\"分布式锁\"></a>分布式锁</h2><p>顾名思义, 锁是分布式的, 多个服务同时公用一个锁。</p>\n<h2 id=\"如何实现\"><a href=\"#如何实现\" class=\"headerlink\" title=\"如何实现:\"></a>如何实现:</h2><p>锁是对某种资源的占有。</p>\n<p>加锁:</p>\n<p>基于redis生成一个带有过期时间的key</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$redis-&gt;set($lock-&gt;sourceName, $lock-&gt;key, [<span class=\"string\">'nx'</span>, <span class=\"string\">'ex'</span> =&gt; $lock-&gt;expire])</div></pre></td></tr></table></figure>\n<ul>\n<li><code>expire</code>为过期时间,如果超过过期时间,则自动解锁。</li>\n<li><code>key</code> 生成当前锁的key,随机生成。<br>解锁:</li>\n</ul>\n<p>具体动作: 比对当前锁和当前key是否匹配,如果匹配则解锁（删除当前redis里的key）</p>\n<p>实现:</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">$script = <span class=\"string\">'</span></div><div class=\"line\">        if redis.call(\"get\",KEYS[1]) == ARGV[1]</div><div class=\"line\">        then</div><div class=\"line\">            return redis.call(\"del\",KEYS[1])</div><div class=\"line\">        else</div><div class=\"line\">            return 0</div><div class=\"line\">        end</div><div class=\"line\">    ';</div><div class=\"line\">$redis-&gt;eval($script,[$locks, $keys],$numKeys)</div></pre></td></tr></table></figure>\n<ul>\n<li>其中locks为锁名。</li>\n<li>$keys为秘钥。</li>\n</ul>\n<h2 id=\"异常\"><a href=\"#异常\" class=\"headerlink\" title=\"异常\"></a>异常</h2><p>如果进程异常,我们需要解锁当前锁。<br>具体实现:</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">register_shutdown_function(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">           $lock-&gt;release();</div><div class=\"line\">       &#125;);</div></pre></td></tr></table></figure>\n<p>php中程序异常退出会调用register_shutdown_function()所注册函数,所以只要在程序异常时,解锁当前注册锁就可以了。</p>\n"},{"title":"如何分析慢sql","_content":"","source":"_drafts/如何分析慢sql.md","raw":"---\ntitle: 如何分析慢sql\ntags:\n---\n","slug":"如何分析慢sql","published":0,"date":"2018-12-12T10:51:16.085Z","updated":"2018-12-12T10:51:16.085Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqavhgcw000bzqjfpjgfaiil","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"如何实现psr4自动加载","_content":"","source":"_drafts/如何实现psr4自动加载.md","raw":"---\ntitle: 如何实现psr4自动加载\ntags:\n---\n","slug":"如何实现psr4自动加载","published":0,"date":"2018-10-22T03:47:05.999Z","updated":"2018-10-22T03:47:05.999Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqavhgcy000czqjfo9s2j5ig","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"数据库一些基本知识","_content":"","source":"_drafts/数据库一些基本知识.md","raw":"---\ntitle: 数据库一些基本知识\ntags:\n---\n","slug":"数据库一些基本知识","published":0,"date":"2018-12-12T10:51:42.651Z","updated":"2018-12-12T10:51:42.651Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqavhgcz000dzqjfl8petj5s","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"数据库锁","_content":"","source":"_drafts/数据库锁.md","raw":"---\ntitle: 数据库锁\ntags:\n---\n","slug":"数据库锁","published":0,"date":"2018-12-21T10:55:17.633Z","updated":"2018-12-21T10:55:17.634Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqavhgcz000ezqjfjj0eo1zt","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"数据库索引","_content":"","source":"_drafts/数据库索引.md","raw":"---\ntitle: 数据库索引\ntags:\n---\n","slug":"数据库索引","published":0,"date":"2018-12-21T10:55:31.039Z","updated":"2018-12-21T10:55:31.039Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqavhgd3000fzqjfb3iq3jdj","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"算法","_content":"\n## 1.算法-求两数之和\n```\n给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。\n\n你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。\n\n示例:\n\n给定 nums = [2, 7, 11, 15], target = 9\n\n因为 nums[0] + nums[1] = 2 + 7 = 9\n所以返回 [0, 1]\n```\n\n```c\nint* twoSum(int* nums, int numsSize, int target) \n{\n    static int arr[2]={0};\n    \n    for(int i = 0;i < numsSize-1; i++) \n    {\n        for(int n = i + 1 ;n < numsSize; n++) \n        {\n            if((nums[i] + nums[n]) == target) \n            {\n                arr[0] = i;\n                arr[1] = n;\n                return arr;\n            }\n        }\n    }\n    return 0;\n}\n```\n\n问：为什么保修用static修饰数组，不然会报错。\n`load of null pointer of type 'const int'`\n原因:\n```\n 因为如果不用静态的话，数组的生命周期就是从定义的地方到函数结束，函数运行结束，这个内存也就释放掉了。返回的是数组的首地址，一旦函数运行结束，这个地址里的东西就变成空了，所以要用静态数组延长数组的生命周期\n```\n\n## 算法-两数相加\n\n很蠢的一个解法\n```c\n/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     struct ListNode *next;\n * };\n */\nstruct ListNode* addTwoNumbers(struct ListNode* l1, struct ListNode* l2) \n{\n    struct ListNode* l3 = (struct ListNode *)malloc(sizeof(struct ListNode));\n    struct ListNode* l3current;\n    l3current = l3;\n    int tmp = 0;\n    aa:\n    if (l1 != NULL) \n    {   \n        struct ListNode* l3tmp = (struct ListNode *)malloc(sizeof(struct ListNode));\n        l3tmp->next = NULL;\n        if(l2 != NULL)\n        {\n            if((l1->val + l2->val+ tmp)> 9 )\n            {\n                l3tmp->val = (l1->val + l2->val+ tmp)-10;      \n                tmp = 1;\n                l1 = l1->next;\n                l2 = l2->next;\n                l3current->next = l3tmp;\n                l3current = l3tmp;\n                goto aa;\n            } else {\n                \n                l3tmp->val = l1->val + l2->val +tmp;                       \n                tmp = 0;\n                l1 = l1->next;\n                l2 = l2->next;\n                l3current->next = l3tmp;\n                l3current = l3tmp;\n                goto aa;\n            }\n        } else {\n            l3tmp->val =(l1->val +tmp)%10 ; \n            if(l1->val +tmp > 9) {\n                tmp = 1;\n            } else {\n                tmp = 0;   \n            }\n            l1 = l1->next;   \n            l3current->next = l3tmp;\n            l3current = l3tmp;\n            goto aa;\n        }  \n    }else {\n        if(l2 != NULL)\n        {\n            struct ListNode* l3tmp = (struct ListNode *)malloc(sizeof(struct ListNode));\n            l3tmp->next = NULL;\n            l3tmp->val =  (l2->val +tmp)%10;\n            if(l2->val +tmp > 9) {\n                tmp = 1;    \n            } else {\n                tmp = 0;    \n            }\n             \n            l2 = l2->next;\n            l3current->next = l3tmp;\n            l3current = l3tmp;\n            goto aa;\n        } else {\n            if(tmp == 0) {\n                return l3->next;   \n            } else {\n            struct ListNode* l3tmp = (struct ListNode *)malloc(sizeof(struct ListNode));\n            l3tmp->next = NULL;\n            l3tmp->val =  tmp;  \n            tmp = 0;\n            l3current->next = l3tmp;\n            l3current = l3tmp;\n            goto aa;\n            }\n        }  \n        \n    } \n    return l3->next;\n}\n\n```\n\n遇到问题：\n- c中的链表如何实现的\n- `struct ListNode* l3tmp = (struct ListNode *)malloc(sizeof(struct ListNode));` 与 `struct ListNode* l3tmp` 的区别\n- 以及为什么返回结构体不需要用static来修饰了\n\n问题2:\n如果头地址不分配内存的话无法赋值，所以导致一直在造作l3current 并不是l3.\n\n\n\n子字符串翻转：\n```c\nvoid reverseWords(char *s) {\n    if(s == \" \") {\n        s = \"\";\n        return;\n    }\n    int len = strlen(s);\n    char *ret = (char *) malloc(len);\n    memset(ret, '\\0,', len);\n    int j = 0, i = 0;\n    memset(ret, '\\0', len);\n    char *tmp = (char *) malloc(len);\n    memset(tmp, '\\0', len);\n\n    while (s[i] != '\\0') {\n        if (s[i] == ' ') {\n            if (ret[j-1] == ' ') {\n                i++;\n                continue;\n            }\n            else {\n                ret[j] = s[i];\n                j++;\n\n            }\n        } else {\n            ret[j] = s[i];\n            j++;\n\n        }\n        i++;\n    }\n\n    int m = 0;\n    int k = 0;\n    char* strtmp = (char*)malloc(len+1);\n    memset(strtmp, '\\0', len +1);\n    for (i = strlen(ret) - 1; i >= 0; i--) {\n\n        if (ret[i] != ' ') {\n            tmp[m] = ret[i];\n            m++;\n        } else {\n            m = m-1;\n            while (m >= 0 ) {\n                strtmp[k] = tmp[m];\n                m--;\n                k++;\n            }\n            memset(tmp, '\\0', len);\n            m = 0;\n            strtmp[k] = ' ';\n            k++;\n\n        }\n\n    }\n    m = m-1;\n    while (m >= 0 ) {\n        strtmp[k] = tmp[m];\n        m--;\n        k++;\n    }\n    memset(tmp, '\\0', len);\n    s = strtmp;\n\n}\n```\n为什么mac下c 语言不允许直接操作字符串中的字符。（已经找到答案）\n\n\nchar* p = (char*)malloc(128);与char p[128]的区别.\n\n\nLeetCode 求真实路径 C语言版本\n`需要补充思路`\n```\nchar *simplifyPath(char *path) {\n    int len = strlen(path);\n    char *ret = (char *) malloc(len+1);\n    memset(ret, '\\0', len+1);\n    char *p;\n    char delim[2] = \"/\";\n    p = strtok(path, delim);\n    int i = 0, j = 0;\n    while (p != NULL) {\n        if (strcoll(p, \".\") == 0) {\n            p = strtok(NULL, delim);\n            continue;\n        }\n        if (strcoll(p, \"..\") == 0) {\n            while (i > 0) {\n                if(ret[i] == '/') {\n                    ret[i] = '\\0';\n                    break;\n                }\n                ret[i] = '\\0';\n                i--;\n            }\n            p = strtok(NULL, delim);\n            continue;\n        }\n\n        if (ret[i] != '/') {\n            ret[i] = '/';\n            i++;\n        } else {\n            i++;\n        }\n        for (j = 0; j < strlen(p); j++) {\n            ret[i] = p[j];\n            i++;\n        }\n        p = strtok(NULL, delim);\n    }\n    if(strlen(ret) < 1) {\n        ret[0] ='/';\n    }\n    return ret;\n\n}\n```","source":"_drafts/算法.md","raw":"---\ntitle: 算法\ntags:\n---\n\n## 1.算法-求两数之和\n```\n给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。\n\n你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。\n\n示例:\n\n给定 nums = [2, 7, 11, 15], target = 9\n\n因为 nums[0] + nums[1] = 2 + 7 = 9\n所以返回 [0, 1]\n```\n\n```c\nint* twoSum(int* nums, int numsSize, int target) \n{\n    static int arr[2]={0};\n    \n    for(int i = 0;i < numsSize-1; i++) \n    {\n        for(int n = i + 1 ;n < numsSize; n++) \n        {\n            if((nums[i] + nums[n]) == target) \n            {\n                arr[0] = i;\n                arr[1] = n;\n                return arr;\n            }\n        }\n    }\n    return 0;\n}\n```\n\n问：为什么保修用static修饰数组，不然会报错。\n`load of null pointer of type 'const int'`\n原因:\n```\n 因为如果不用静态的话，数组的生命周期就是从定义的地方到函数结束，函数运行结束，这个内存也就释放掉了。返回的是数组的首地址，一旦函数运行结束，这个地址里的东西就变成空了，所以要用静态数组延长数组的生命周期\n```\n\n## 算法-两数相加\n\n很蠢的一个解法\n```c\n/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     struct ListNode *next;\n * };\n */\nstruct ListNode* addTwoNumbers(struct ListNode* l1, struct ListNode* l2) \n{\n    struct ListNode* l3 = (struct ListNode *)malloc(sizeof(struct ListNode));\n    struct ListNode* l3current;\n    l3current = l3;\n    int tmp = 0;\n    aa:\n    if (l1 != NULL) \n    {   \n        struct ListNode* l3tmp = (struct ListNode *)malloc(sizeof(struct ListNode));\n        l3tmp->next = NULL;\n        if(l2 != NULL)\n        {\n            if((l1->val + l2->val+ tmp)> 9 )\n            {\n                l3tmp->val = (l1->val + l2->val+ tmp)-10;      \n                tmp = 1;\n                l1 = l1->next;\n                l2 = l2->next;\n                l3current->next = l3tmp;\n                l3current = l3tmp;\n                goto aa;\n            } else {\n                \n                l3tmp->val = l1->val + l2->val +tmp;                       \n                tmp = 0;\n                l1 = l1->next;\n                l2 = l2->next;\n                l3current->next = l3tmp;\n                l3current = l3tmp;\n                goto aa;\n            }\n        } else {\n            l3tmp->val =(l1->val +tmp)%10 ; \n            if(l1->val +tmp > 9) {\n                tmp = 1;\n            } else {\n                tmp = 0;   \n            }\n            l1 = l1->next;   \n            l3current->next = l3tmp;\n            l3current = l3tmp;\n            goto aa;\n        }  \n    }else {\n        if(l2 != NULL)\n        {\n            struct ListNode* l3tmp = (struct ListNode *)malloc(sizeof(struct ListNode));\n            l3tmp->next = NULL;\n            l3tmp->val =  (l2->val +tmp)%10;\n            if(l2->val +tmp > 9) {\n                tmp = 1;    \n            } else {\n                tmp = 0;    \n            }\n             \n            l2 = l2->next;\n            l3current->next = l3tmp;\n            l3current = l3tmp;\n            goto aa;\n        } else {\n            if(tmp == 0) {\n                return l3->next;   \n            } else {\n            struct ListNode* l3tmp = (struct ListNode *)malloc(sizeof(struct ListNode));\n            l3tmp->next = NULL;\n            l3tmp->val =  tmp;  \n            tmp = 0;\n            l3current->next = l3tmp;\n            l3current = l3tmp;\n            goto aa;\n            }\n        }  \n        \n    } \n    return l3->next;\n}\n\n```\n\n遇到问题：\n- c中的链表如何实现的\n- `struct ListNode* l3tmp = (struct ListNode *)malloc(sizeof(struct ListNode));` 与 `struct ListNode* l3tmp` 的区别\n- 以及为什么返回结构体不需要用static来修饰了\n\n问题2:\n如果头地址不分配内存的话无法赋值，所以导致一直在造作l3current 并不是l3.\n\n\n\n子字符串翻转：\n```c\nvoid reverseWords(char *s) {\n    if(s == \" \") {\n        s = \"\";\n        return;\n    }\n    int len = strlen(s);\n    char *ret = (char *) malloc(len);\n    memset(ret, '\\0,', len);\n    int j = 0, i = 0;\n    memset(ret, '\\0', len);\n    char *tmp = (char *) malloc(len);\n    memset(tmp, '\\0', len);\n\n    while (s[i] != '\\0') {\n        if (s[i] == ' ') {\n            if (ret[j-1] == ' ') {\n                i++;\n                continue;\n            }\n            else {\n                ret[j] = s[i];\n                j++;\n\n            }\n        } else {\n            ret[j] = s[i];\n            j++;\n\n        }\n        i++;\n    }\n\n    int m = 0;\n    int k = 0;\n    char* strtmp = (char*)malloc(len+1);\n    memset(strtmp, '\\0', len +1);\n    for (i = strlen(ret) - 1; i >= 0; i--) {\n\n        if (ret[i] != ' ') {\n            tmp[m] = ret[i];\n            m++;\n        } else {\n            m = m-1;\n            while (m >= 0 ) {\n                strtmp[k] = tmp[m];\n                m--;\n                k++;\n            }\n            memset(tmp, '\\0', len);\n            m = 0;\n            strtmp[k] = ' ';\n            k++;\n\n        }\n\n    }\n    m = m-1;\n    while (m >= 0 ) {\n        strtmp[k] = tmp[m];\n        m--;\n        k++;\n    }\n    memset(tmp, '\\0', len);\n    s = strtmp;\n\n}\n```\n为什么mac下c 语言不允许直接操作字符串中的字符。（已经找到答案）\n\n\nchar* p = (char*)malloc(128);与char p[128]的区别.\n\n\nLeetCode 求真实路径 C语言版本\n`需要补充思路`\n```\nchar *simplifyPath(char *path) {\n    int len = strlen(path);\n    char *ret = (char *) malloc(len+1);\n    memset(ret, '\\0', len+1);\n    char *p;\n    char delim[2] = \"/\";\n    p = strtok(path, delim);\n    int i = 0, j = 0;\n    while (p != NULL) {\n        if (strcoll(p, \".\") == 0) {\n            p = strtok(NULL, delim);\n            continue;\n        }\n        if (strcoll(p, \"..\") == 0) {\n            while (i > 0) {\n                if(ret[i] == '/') {\n                    ret[i] = '\\0';\n                    break;\n                }\n                ret[i] = '\\0';\n                i--;\n            }\n            p = strtok(NULL, delim);\n            continue;\n        }\n\n        if (ret[i] != '/') {\n            ret[i] = '/';\n            i++;\n        } else {\n            i++;\n        }\n        for (j = 0; j < strlen(p); j++) {\n            ret[i] = p[j];\n            i++;\n        }\n        p = strtok(NULL, delim);\n    }\n    if(strlen(ret) < 1) {\n        ret[0] ='/';\n    }\n    return ret;\n\n}\n```","slug":"算法","published":0,"date":"2018-12-10T03:34:18.787Z","updated":"2018-12-24T13:05:30.764Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqavhgd4000gzqjfc33yulaz","content":"<h2 id=\"1-算法-求两数之和\"><a href=\"#1-算法-求两数之和\" class=\"headerlink\" title=\"1.算法-求两数之和\"></a>1.算法-求两数之和</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。</div><div class=\"line\"></div><div class=\"line\">你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。</div><div class=\"line\"></div><div class=\"line\">示例:</div><div class=\"line\"></div><div class=\"line\">给定 nums = [2, 7, 11, 15], target = 9</div><div class=\"line\"></div><div class=\"line\">因为 nums[0] + nums[1] = 2 + 7 = 9</div><div class=\"line\">所以返回 [0, 1]</div></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span>* <span class=\"title\">twoSum</span><span class=\"params\">(<span class=\"keyword\">int</span>* nums, <span class=\"keyword\">int</span> numsSize, <span class=\"keyword\">int</span> target)</span> </span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> arr[<span class=\"number\">2</span>]=&#123;<span class=\"number\">0</span>&#125;;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt; numsSize<span class=\"number\">-1</span>; i++) </div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> n = i + <span class=\"number\">1</span> ;n &lt; numsSize; n++) </div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>((nums[i] + nums[n]) == target) </div><div class=\"line\">            &#123;</div><div class=\"line\">                arr[<span class=\"number\">0</span>] = i;</div><div class=\"line\">                arr[<span class=\"number\">1</span>] = n;</div><div class=\"line\">                <span class=\"keyword\">return</span> arr;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>问：为什么保修用static修饰数组，不然会报错。<br><code>load of null pointer of type &#39;const int&#39;</code><br>原因:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">因为如果不用静态的话，数组的生命周期就是从定义的地方到函数结束，函数运行结束，这个内存也就释放掉了。返回的是数组的首地址，一旦函数运行结束，这个地址里的东西就变成空了，所以要用静态数组延长数组的生命周期</div></pre></td></tr></table></figure></p>\n<h2 id=\"算法-两数相加\"><a href=\"#算法-两数相加\" class=\"headerlink\" title=\"算法-两数相加\"></a>算法-两数相加</h2><p>很蠢的一个解法<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Definition for singly-linked list.</div><div class=\"line\"> * struct ListNode &#123;</div><div class=\"line\"> *     int val;</div><div class=\"line\"> *     struct ListNode *next;</div><div class=\"line\"> * &#125;;</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">struct</span> ListNode* <span class=\"title\">addTwoNumbers</span><span class=\"params\">(<span class=\"keyword\">struct</span> ListNode* l1, <span class=\"keyword\">struct</span> ListNode* l2)</span> </span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">struct</span> ListNode* l3 = (<span class=\"keyword\">struct</span> ListNode *)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">struct</span> ListNode));</div><div class=\"line\">    <span class=\"keyword\">struct</span> ListNode* l3current;</div><div class=\"line\">    l3current = l3;</div><div class=\"line\">    <span class=\"keyword\">int</span> tmp = <span class=\"number\">0</span>;</div><div class=\"line\">    aa:</div><div class=\"line\">    <span class=\"keyword\">if</span> (l1 != <span class=\"literal\">NULL</span>) </div><div class=\"line\">    &#123;   </div><div class=\"line\">        <span class=\"keyword\">struct</span> ListNode* l3tmp = (<span class=\"keyword\">struct</span> ListNode *)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">struct</span> ListNode));</div><div class=\"line\">        l3tmp-&gt;next = <span class=\"literal\">NULL</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span>(l2 != <span class=\"literal\">NULL</span>)</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>((l1-&gt;val + l2-&gt;val+ tmp)&gt; <span class=\"number\">9</span> )</div><div class=\"line\">            &#123;</div><div class=\"line\">                l3tmp-&gt;val = (l1-&gt;val + l2-&gt;val+ tmp)<span class=\"number\">-10</span>;      </div><div class=\"line\">                tmp = <span class=\"number\">1</span>;</div><div class=\"line\">                l1 = l1-&gt;next;</div><div class=\"line\">                l2 = l2-&gt;next;</div><div class=\"line\">                l3current-&gt;next = l3tmp;</div><div class=\"line\">                l3current = l3tmp;</div><div class=\"line\">                <span class=\"keyword\">goto</span> aa;</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                </div><div class=\"line\">                l3tmp-&gt;val = l1-&gt;val + l2-&gt;val +tmp;                       </div><div class=\"line\">                tmp = <span class=\"number\">0</span>;</div><div class=\"line\">                l1 = l1-&gt;next;</div><div class=\"line\">                l2 = l2-&gt;next;</div><div class=\"line\">                l3current-&gt;next = l3tmp;</div><div class=\"line\">                l3current = l3tmp;</div><div class=\"line\">                <span class=\"keyword\">goto</span> aa;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            l3tmp-&gt;val =(l1-&gt;val +tmp)%<span class=\"number\">10</span> ; </div><div class=\"line\">            <span class=\"keyword\">if</span>(l1-&gt;val +tmp &gt; <span class=\"number\">9</span>) &#123;</div><div class=\"line\">                tmp = <span class=\"number\">1</span>;</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                tmp = <span class=\"number\">0</span>;   </div><div class=\"line\">            &#125;</div><div class=\"line\">            l1 = l1-&gt;next;   </div><div class=\"line\">            l3current-&gt;next = l3tmp;</div><div class=\"line\">            l3current = l3tmp;</div><div class=\"line\">            <span class=\"keyword\">goto</span> aa;</div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(l2 != <span class=\"literal\">NULL</span>)</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">struct</span> ListNode* l3tmp = (<span class=\"keyword\">struct</span> ListNode *)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">struct</span> ListNode));</div><div class=\"line\">            l3tmp-&gt;next = <span class=\"literal\">NULL</span>;</div><div class=\"line\">            l3tmp-&gt;val =  (l2-&gt;val +tmp)%<span class=\"number\">10</span>;</div><div class=\"line\">            <span class=\"keyword\">if</span>(l2-&gt;val +tmp &gt; <span class=\"number\">9</span>) &#123;</div><div class=\"line\">                tmp = <span class=\"number\">1</span>;    </div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                tmp = <span class=\"number\">0</span>;    </div><div class=\"line\">            &#125;</div><div class=\"line\">             </div><div class=\"line\">            l2 = l2-&gt;next;</div><div class=\"line\">            l3current-&gt;next = l3tmp;</div><div class=\"line\">            l3current = l3tmp;</div><div class=\"line\">            <span class=\"keyword\">goto</span> aa;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>(tmp == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> l3-&gt;next;   </div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">struct</span> ListNode* l3tmp = (<span class=\"keyword\">struct</span> ListNode *)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">struct</span> ListNode));</div><div class=\"line\">            l3tmp-&gt;next = <span class=\"literal\">NULL</span>;</div><div class=\"line\">            l3tmp-&gt;val =  tmp;  </div><div class=\"line\">            tmp = <span class=\"number\">0</span>;</div><div class=\"line\">            l3current-&gt;next = l3tmp;</div><div class=\"line\">            l3current = l3tmp;</div><div class=\"line\">            <span class=\"keyword\">goto</span> aa;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;  </div><div class=\"line\">        </div><div class=\"line\">    &#125; </div><div class=\"line\">    <span class=\"keyword\">return</span> l3-&gt;next;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>遇到问题：</p>\n<ul>\n<li>c中的链表如何实现的</li>\n<li><code>struct ListNode* l3tmp = (struct ListNode *)malloc(sizeof(struct ListNode));</code> 与 <code>struct ListNode* l3tmp</code> 的区别</li>\n<li>以及为什么返回结构体不需要用static来修饰了</li>\n</ul>\n<p>问题2:<br>如果头地址不分配内存的话无法赋值，所以导致一直在造作l3current 并不是l3.</p>\n<p>子字符串翻转：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div></pre></td><td class=\"code\"><pre><div class=\"line\">void reverseWords(char *s) &#123;</div><div class=\"line\">    if(s == \" \") &#123;</div><div class=\"line\">        s = \"\";</div><div class=\"line\">        return;</div><div class=\"line\">    &#125;</div><div class=\"line\">    int len = strlen(s);</div><div class=\"line\">    char *ret = (char *) malloc(len);</div><div class=\"line\">    memset(ret, '\\0,', len);</div><div class=\"line\">    int j = 0, i = 0;</div><div class=\"line\">    memset(ret, '\\0', len);</div><div class=\"line\">    char *tmp = (char *) malloc(len);</div><div class=\"line\">    memset(tmp, '\\0', len);</div><div class=\"line\"></div><div class=\"line\">    while (s[i] != '\\0') &#123;</div><div class=\"line\">        if (s[i] == ' ') &#123;</div><div class=\"line\">            if (ret[j-1] == ' ') &#123;</div><div class=\"line\">                i++;</div><div class=\"line\">                continue;</div><div class=\"line\">            &#125;</div><div class=\"line\">            else &#123;</div><div class=\"line\">                ret[j] = s[i];</div><div class=\"line\">                j++;</div><div class=\"line\"></div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; else &#123;</div><div class=\"line\">            ret[j] = s[i];</div><div class=\"line\">            j++;</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\">        i++;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    int m = 0;</div><div class=\"line\">    int k = 0;</div><div class=\"line\">    char* strtmp = (char*)malloc(len+1);</div><div class=\"line\">    memset(strtmp, '\\0', len +1);</div><div class=\"line\">    for (i = strlen(ret) - 1; i &gt;= 0; i--) &#123;</div><div class=\"line\"></div><div class=\"line\">        if (ret[i] != ' ') &#123;</div><div class=\"line\">            tmp[m] = ret[i];</div><div class=\"line\">            m++;</div><div class=\"line\">        &#125; else &#123;</div><div class=\"line\">            m = m-1;</div><div class=\"line\">            while (m &gt;= 0 ) &#123;</div><div class=\"line\">                strtmp[k] = tmp[m];</div><div class=\"line\">                m--;</div><div class=\"line\">                k++;</div><div class=\"line\">            &#125;</div><div class=\"line\">            memset(tmp, '\\0', len);</div><div class=\"line\">            m = 0;</div><div class=\"line\">            strtmp[k] = ' ';</div><div class=\"line\">            k++;</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">    m = m-1;</div><div class=\"line\">    while (m &gt;= 0 ) &#123;</div><div class=\"line\">        strtmp[k] = tmp[m];</div><div class=\"line\">        m--;</div><div class=\"line\">        k++;</div><div class=\"line\">    &#125;</div><div class=\"line\">    memset(tmp, '\\0', len);</div><div class=\"line\">    s = strtmp;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>为什么mac下c 语言不允许直接操作字符串中的字符。（已经找到答案）</p>\n<p>char<em> p = (char</em>)malloc(128);与char p[128]的区别.</p>\n<p>LeetCode 求真实路径 C语言版本<br><code>需要补充思路</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\">char *simplifyPath(char *path) &#123;</div><div class=\"line\">    int len = strlen(path);</div><div class=\"line\">    char *ret = (char *) malloc(len+1);</div><div class=\"line\">    memset(ret, &apos;\\0&apos;, len+1);</div><div class=\"line\">    char *p;</div><div class=\"line\">    char delim[2] = &quot;/&quot;;</div><div class=\"line\">    p = strtok(path, delim);</div><div class=\"line\">    int i = 0, j = 0;</div><div class=\"line\">    while (p != NULL) &#123;</div><div class=\"line\">        if (strcoll(p, &quot;.&quot;) == 0) &#123;</div><div class=\"line\">            p = strtok(NULL, delim);</div><div class=\"line\">            continue;</div><div class=\"line\">        &#125;</div><div class=\"line\">        if (strcoll(p, &quot;..&quot;) == 0) &#123;</div><div class=\"line\">            while (i &gt; 0) &#123;</div><div class=\"line\">                if(ret[i] == &apos;/&apos;) &#123;</div><div class=\"line\">                    ret[i] = &apos;\\0&apos;;</div><div class=\"line\">                    break;</div><div class=\"line\">                &#125;</div><div class=\"line\">                ret[i] = &apos;\\0&apos;;</div><div class=\"line\">                i--;</div><div class=\"line\">            &#125;</div><div class=\"line\">            p = strtok(NULL, delim);</div><div class=\"line\">            continue;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        if (ret[i] != &apos;/&apos;) &#123;</div><div class=\"line\">            ret[i] = &apos;/&apos;;</div><div class=\"line\">            i++;</div><div class=\"line\">        &#125; else &#123;</div><div class=\"line\">            i++;</div><div class=\"line\">        &#125;</div><div class=\"line\">        for (j = 0; j &lt; strlen(p); j++) &#123;</div><div class=\"line\">            ret[i] = p[j];</div><div class=\"line\">            i++;</div><div class=\"line\">        &#125;</div><div class=\"line\">        p = strtok(NULL, delim);</div><div class=\"line\">    &#125;</div><div class=\"line\">    if(strlen(ret) &lt; 1) &#123;</div><div class=\"line\">        ret[0] =&apos;/&apos;;</div><div class=\"line\">    &#125;</div><div class=\"line\">    return ret;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-算法-求两数之和\"><a href=\"#1-算法-求两数之和\" class=\"headerlink\" title=\"1.算法-求两数之和\"></a>1.算法-求两数之和</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。</div><div class=\"line\"></div><div class=\"line\">你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。</div><div class=\"line\"></div><div class=\"line\">示例:</div><div class=\"line\"></div><div class=\"line\">给定 nums = [2, 7, 11, 15], target = 9</div><div class=\"line\"></div><div class=\"line\">因为 nums[0] + nums[1] = 2 + 7 = 9</div><div class=\"line\">所以返回 [0, 1]</div></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span>* <span class=\"title\">twoSum</span><span class=\"params\">(<span class=\"keyword\">int</span>* nums, <span class=\"keyword\">int</span> numsSize, <span class=\"keyword\">int</span> target)</span> </span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> arr[<span class=\"number\">2</span>]=&#123;<span class=\"number\">0</span>&#125;;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt; numsSize<span class=\"number\">-1</span>; i++) </div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> n = i + <span class=\"number\">1</span> ;n &lt; numsSize; n++) </div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>((nums[i] + nums[n]) == target) </div><div class=\"line\">            &#123;</div><div class=\"line\">                arr[<span class=\"number\">0</span>] = i;</div><div class=\"line\">                arr[<span class=\"number\">1</span>] = n;</div><div class=\"line\">                <span class=\"keyword\">return</span> arr;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>问：为什么保修用static修饰数组，不然会报错。<br><code>load of null pointer of type &#39;const int&#39;</code><br>原因:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">因为如果不用静态的话，数组的生命周期就是从定义的地方到函数结束，函数运行结束，这个内存也就释放掉了。返回的是数组的首地址，一旦函数运行结束，这个地址里的东西就变成空了，所以要用静态数组延长数组的生命周期</div></pre></td></tr></table></figure></p>\n<h2 id=\"算法-两数相加\"><a href=\"#算法-两数相加\" class=\"headerlink\" title=\"算法-两数相加\"></a>算法-两数相加</h2><p>很蠢的一个解法<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Definition for singly-linked list.</div><div class=\"line\"> * struct ListNode &#123;</div><div class=\"line\"> *     int val;</div><div class=\"line\"> *     struct ListNode *next;</div><div class=\"line\"> * &#125;;</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">struct</span> ListNode* <span class=\"title\">addTwoNumbers</span><span class=\"params\">(<span class=\"keyword\">struct</span> ListNode* l1, <span class=\"keyword\">struct</span> ListNode* l2)</span> </span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">struct</span> ListNode* l3 = (<span class=\"keyword\">struct</span> ListNode *)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">struct</span> ListNode));</div><div class=\"line\">    <span class=\"keyword\">struct</span> ListNode* l3current;</div><div class=\"line\">    l3current = l3;</div><div class=\"line\">    <span class=\"keyword\">int</span> tmp = <span class=\"number\">0</span>;</div><div class=\"line\">    aa:</div><div class=\"line\">    <span class=\"keyword\">if</span> (l1 != <span class=\"literal\">NULL</span>) </div><div class=\"line\">    &#123;   </div><div class=\"line\">        <span class=\"keyword\">struct</span> ListNode* l3tmp = (<span class=\"keyword\">struct</span> ListNode *)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">struct</span> ListNode));</div><div class=\"line\">        l3tmp-&gt;next = <span class=\"literal\">NULL</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span>(l2 != <span class=\"literal\">NULL</span>)</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>((l1-&gt;val + l2-&gt;val+ tmp)&gt; <span class=\"number\">9</span> )</div><div class=\"line\">            &#123;</div><div class=\"line\">                l3tmp-&gt;val = (l1-&gt;val + l2-&gt;val+ tmp)<span class=\"number\">-10</span>;      </div><div class=\"line\">                tmp = <span class=\"number\">1</span>;</div><div class=\"line\">                l1 = l1-&gt;next;</div><div class=\"line\">                l2 = l2-&gt;next;</div><div class=\"line\">                l3current-&gt;next = l3tmp;</div><div class=\"line\">                l3current = l3tmp;</div><div class=\"line\">                <span class=\"keyword\">goto</span> aa;</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                </div><div class=\"line\">                l3tmp-&gt;val = l1-&gt;val + l2-&gt;val +tmp;                       </div><div class=\"line\">                tmp = <span class=\"number\">0</span>;</div><div class=\"line\">                l1 = l1-&gt;next;</div><div class=\"line\">                l2 = l2-&gt;next;</div><div class=\"line\">                l3current-&gt;next = l3tmp;</div><div class=\"line\">                l3current = l3tmp;</div><div class=\"line\">                <span class=\"keyword\">goto</span> aa;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            l3tmp-&gt;val =(l1-&gt;val +tmp)%<span class=\"number\">10</span> ; </div><div class=\"line\">            <span class=\"keyword\">if</span>(l1-&gt;val +tmp &gt; <span class=\"number\">9</span>) &#123;</div><div class=\"line\">                tmp = <span class=\"number\">1</span>;</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                tmp = <span class=\"number\">0</span>;   </div><div class=\"line\">            &#125;</div><div class=\"line\">            l1 = l1-&gt;next;   </div><div class=\"line\">            l3current-&gt;next = l3tmp;</div><div class=\"line\">            l3current = l3tmp;</div><div class=\"line\">            <span class=\"keyword\">goto</span> aa;</div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(l2 != <span class=\"literal\">NULL</span>)</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">struct</span> ListNode* l3tmp = (<span class=\"keyword\">struct</span> ListNode *)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">struct</span> ListNode));</div><div class=\"line\">            l3tmp-&gt;next = <span class=\"literal\">NULL</span>;</div><div class=\"line\">            l3tmp-&gt;val =  (l2-&gt;val +tmp)%<span class=\"number\">10</span>;</div><div class=\"line\">            <span class=\"keyword\">if</span>(l2-&gt;val +tmp &gt; <span class=\"number\">9</span>) &#123;</div><div class=\"line\">                tmp = <span class=\"number\">1</span>;    </div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                tmp = <span class=\"number\">0</span>;    </div><div class=\"line\">            &#125;</div><div class=\"line\">             </div><div class=\"line\">            l2 = l2-&gt;next;</div><div class=\"line\">            l3current-&gt;next = l3tmp;</div><div class=\"line\">            l3current = l3tmp;</div><div class=\"line\">            <span class=\"keyword\">goto</span> aa;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>(tmp == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> l3-&gt;next;   </div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">struct</span> ListNode* l3tmp = (<span class=\"keyword\">struct</span> ListNode *)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">struct</span> ListNode));</div><div class=\"line\">            l3tmp-&gt;next = <span class=\"literal\">NULL</span>;</div><div class=\"line\">            l3tmp-&gt;val =  tmp;  </div><div class=\"line\">            tmp = <span class=\"number\">0</span>;</div><div class=\"line\">            l3current-&gt;next = l3tmp;</div><div class=\"line\">            l3current = l3tmp;</div><div class=\"line\">            <span class=\"keyword\">goto</span> aa;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;  </div><div class=\"line\">        </div><div class=\"line\">    &#125; </div><div class=\"line\">    <span class=\"keyword\">return</span> l3-&gt;next;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>遇到问题：</p>\n<ul>\n<li>c中的链表如何实现的</li>\n<li><code>struct ListNode* l3tmp = (struct ListNode *)malloc(sizeof(struct ListNode));</code> 与 <code>struct ListNode* l3tmp</code> 的区别</li>\n<li>以及为什么返回结构体不需要用static来修饰了</li>\n</ul>\n<p>问题2:<br>如果头地址不分配内存的话无法赋值，所以导致一直在造作l3current 并不是l3.</p>\n<p>子字符串翻转：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div></pre></td><td class=\"code\"><pre><div class=\"line\">void reverseWords(char *s) &#123;</div><div class=\"line\">    if(s == \" \") &#123;</div><div class=\"line\">        s = \"\";</div><div class=\"line\">        return;</div><div class=\"line\">    &#125;</div><div class=\"line\">    int len = strlen(s);</div><div class=\"line\">    char *ret = (char *) malloc(len);</div><div class=\"line\">    memset(ret, '\\0,', len);</div><div class=\"line\">    int j = 0, i = 0;</div><div class=\"line\">    memset(ret, '\\0', len);</div><div class=\"line\">    char *tmp = (char *) malloc(len);</div><div class=\"line\">    memset(tmp, '\\0', len);</div><div class=\"line\"></div><div class=\"line\">    while (s[i] != '\\0') &#123;</div><div class=\"line\">        if (s[i] == ' ') &#123;</div><div class=\"line\">            if (ret[j-1] == ' ') &#123;</div><div class=\"line\">                i++;</div><div class=\"line\">                continue;</div><div class=\"line\">            &#125;</div><div class=\"line\">            else &#123;</div><div class=\"line\">                ret[j] = s[i];</div><div class=\"line\">                j++;</div><div class=\"line\"></div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; else &#123;</div><div class=\"line\">            ret[j] = s[i];</div><div class=\"line\">            j++;</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\">        i++;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    int m = 0;</div><div class=\"line\">    int k = 0;</div><div class=\"line\">    char* strtmp = (char*)malloc(len+1);</div><div class=\"line\">    memset(strtmp, '\\0', len +1);</div><div class=\"line\">    for (i = strlen(ret) - 1; i &gt;= 0; i--) &#123;</div><div class=\"line\"></div><div class=\"line\">        if (ret[i] != ' ') &#123;</div><div class=\"line\">            tmp[m] = ret[i];</div><div class=\"line\">            m++;</div><div class=\"line\">        &#125; else &#123;</div><div class=\"line\">            m = m-1;</div><div class=\"line\">            while (m &gt;= 0 ) &#123;</div><div class=\"line\">                strtmp[k] = tmp[m];</div><div class=\"line\">                m--;</div><div class=\"line\">                k++;</div><div class=\"line\">            &#125;</div><div class=\"line\">            memset(tmp, '\\0', len);</div><div class=\"line\">            m = 0;</div><div class=\"line\">            strtmp[k] = ' ';</div><div class=\"line\">            k++;</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">    m = m-1;</div><div class=\"line\">    while (m &gt;= 0 ) &#123;</div><div class=\"line\">        strtmp[k] = tmp[m];</div><div class=\"line\">        m--;</div><div class=\"line\">        k++;</div><div class=\"line\">    &#125;</div><div class=\"line\">    memset(tmp, '\\0', len);</div><div class=\"line\">    s = strtmp;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>为什么mac下c 语言不允许直接操作字符串中的字符。（已经找到答案）</p>\n<p>char<em> p = (char</em>)malloc(128);与char p[128]的区别.</p>\n<p>LeetCode 求真实路径 C语言版本<br><code>需要补充思路</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\">char *simplifyPath(char *path) &#123;</div><div class=\"line\">    int len = strlen(path);</div><div class=\"line\">    char *ret = (char *) malloc(len+1);</div><div class=\"line\">    memset(ret, &apos;\\0&apos;, len+1);</div><div class=\"line\">    char *p;</div><div class=\"line\">    char delim[2] = &quot;/&quot;;</div><div class=\"line\">    p = strtok(path, delim);</div><div class=\"line\">    int i = 0, j = 0;</div><div class=\"line\">    while (p != NULL) &#123;</div><div class=\"line\">        if (strcoll(p, &quot;.&quot;) == 0) &#123;</div><div class=\"line\">            p = strtok(NULL, delim);</div><div class=\"line\">            continue;</div><div class=\"line\">        &#125;</div><div class=\"line\">        if (strcoll(p, &quot;..&quot;) == 0) &#123;</div><div class=\"line\">            while (i &gt; 0) &#123;</div><div class=\"line\">                if(ret[i] == &apos;/&apos;) &#123;</div><div class=\"line\">                    ret[i] = &apos;\\0&apos;;</div><div class=\"line\">                    break;</div><div class=\"line\">                &#125;</div><div class=\"line\">                ret[i] = &apos;\\0&apos;;</div><div class=\"line\">                i--;</div><div class=\"line\">            &#125;</div><div class=\"line\">            p = strtok(NULL, delim);</div><div class=\"line\">            continue;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        if (ret[i] != &apos;/&apos;) &#123;</div><div class=\"line\">            ret[i] = &apos;/&apos;;</div><div class=\"line\">            i++;</div><div class=\"line\">        &#125; else &#123;</div><div class=\"line\">            i++;</div><div class=\"line\">        &#125;</div><div class=\"line\">        for (j = 0; j &lt; strlen(p); j++) &#123;</div><div class=\"line\">            ret[i] = p[j];</div><div class=\"line\">            i++;</div><div class=\"line\">        &#125;</div><div class=\"line\">        p = strtok(NULL, delim);</div><div class=\"line\">    &#125;</div><div class=\"line\">    if(strlen(ret) &lt; 1) &#123;</div><div class=\"line\">        ret[0] =&apos;/&apos;;</div><div class=\"line\">    &#125;</div><div class=\"line\">    return ret;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n"},{"title":"数据库缓存","_content":"","source":"_drafts/数据库缓存.md","raw":"---\ntitle: 数据库缓存\ntags:\n---\n","slug":"数据库缓存","published":0,"date":"2018-12-21T10:55:45.219Z","updated":"2018-12-21T10:55:45.220Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqavhgd7000hzqjftnvqsbps","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"PHPExcel","date":"2017-10-30T02:42:03.000Z","_content":"# PHPEXcel\n----\n## 背景\n在工作中我们肯定会遇到由于后端管理系统不完善，而导致运营同学无法从管理系统获取想要的数据。亦或程序设计之初没有考虑到完善，导致一些必要的数据没有录入，希望后续补充批量导入。在这个时候我们就需要获取从数据批量导出数据或者导入数据，而无论导入还是导出数据，我们都希望是Excel格式。\n\n## 根据Execel生成sql\n\n\n1.PHPExcel\n\n准备：我们需要从github获取PHPExcel工具包。地址 `https://github.com/PHPOffice/PHPExcel` \n\n打开PHPExcel文件夹，看下代码结构。我们需要的主要代码在`Classes`文件下，我们只需要引入`PHPExcel.php`即可。\n\n代码实现\n```php\ninclude './code/web_code/PHPExcel/Classes/PHPExcel.php';//引入必要的第三方依赖\n$inputFileType = 'Excel2007';//设置Excel的版本\n$inputFileName = './targe.xlsx';// 需要导入文件地址\n\n\n$currentsheet = $objPHPExcel->getSheet(0); //选择Excel页\n$maxColumn = $currentsheet->getHighestColumn(); //获取当前页的最大列数\n$maxRow = $currentsheet->getHighestRow(); //获取当前页的最大行数\n\n//循环拼接sql\nfor ($i=2; $i< $maxRow; $i++) { \n    //过滤条件\n     if(is_null($currentsheet->getCell('J'.$i)->getValue())||$currentsheet->getCell('J'.$i)->getValue()== '已退款' || $currentsheet->getCell('J'.$i)->getValue() == '待退款' || $currentsheet->getCell('J'.$i)->getValue() == '已经申请退款' || $currentsheet->getCell('J'.$i)->getValue() == '退了' ||$currentsheet->getCell('J'.$i)->getValue() == '没有电话' || $currentsheet->getCell('J'.$i)->getValue() == '0') {\n\n        continue;\n     }\n     //过滤条件\n     if(!is_numeric($currentsheet->getCell('J'.$i)->getValue())||$currentsheet->getCell('J'.$i)->getValue() == '0' || empty($currentsheet->getCell('J'.$i)->getValue()) || $currentsheet->getCell('J'.$i)->getValue() == '') {\n        continue;\n     }\n\n    $sql_bd_name .= ' WHEN '.$currentsheet->getCell('A'.$i)->getValue().' THEN '.$currentsheet->getCell('J'.$i)->getValue();\n    $sql_bd_name .= ','.$currentsheet->getCell('A'.$i)->getValue();\n    $res +=1;\n}\n\n//输入，当然这里无论我们用fopen或者其他的输入当属都可以，这里我把结果打到了控制台。\necho $sql_bd_name;\necho $res \n\n```\n\n\n我们生成的sql是`WHEN`  `THEN`的样式，完整语句应该是 update tablename set seller_jn_activity CASE id\nWHEN 1 TEHN 2 \nEND,\nbd_jn_activity CASE id\nwhen 2 THEN 3\nEND\nWHERE in (1,2,3)\n\n发现数据清洗其实是一件很麻烦的事。","source":"_posts/PHPExecel.md","raw":"---\ntitle: PHPExcel\ndate: 2017-10-30 10:42:03\ntags:\n---\n# PHPEXcel\n----\n## 背景\n在工作中我们肯定会遇到由于后端管理系统不完善，而导致运营同学无法从管理系统获取想要的数据。亦或程序设计之初没有考虑到完善，导致一些必要的数据没有录入，希望后续补充批量导入。在这个时候我们就需要获取从数据批量导出数据或者导入数据，而无论导入还是导出数据，我们都希望是Excel格式。\n\n## 根据Execel生成sql\n\n\n1.PHPExcel\n\n准备：我们需要从github获取PHPExcel工具包。地址 `https://github.com/PHPOffice/PHPExcel` \n\n打开PHPExcel文件夹，看下代码结构。我们需要的主要代码在`Classes`文件下，我们只需要引入`PHPExcel.php`即可。\n\n代码实现\n```php\ninclude './code/web_code/PHPExcel/Classes/PHPExcel.php';//引入必要的第三方依赖\n$inputFileType = 'Excel2007';//设置Excel的版本\n$inputFileName = './targe.xlsx';// 需要导入文件地址\n\n\n$currentsheet = $objPHPExcel->getSheet(0); //选择Excel页\n$maxColumn = $currentsheet->getHighestColumn(); //获取当前页的最大列数\n$maxRow = $currentsheet->getHighestRow(); //获取当前页的最大行数\n\n//循环拼接sql\nfor ($i=2; $i< $maxRow; $i++) { \n    //过滤条件\n     if(is_null($currentsheet->getCell('J'.$i)->getValue())||$currentsheet->getCell('J'.$i)->getValue()== '已退款' || $currentsheet->getCell('J'.$i)->getValue() == '待退款' || $currentsheet->getCell('J'.$i)->getValue() == '已经申请退款' || $currentsheet->getCell('J'.$i)->getValue() == '退了' ||$currentsheet->getCell('J'.$i)->getValue() == '没有电话' || $currentsheet->getCell('J'.$i)->getValue() == '0') {\n\n        continue;\n     }\n     //过滤条件\n     if(!is_numeric($currentsheet->getCell('J'.$i)->getValue())||$currentsheet->getCell('J'.$i)->getValue() == '0' || empty($currentsheet->getCell('J'.$i)->getValue()) || $currentsheet->getCell('J'.$i)->getValue() == '') {\n        continue;\n     }\n\n    $sql_bd_name .= ' WHEN '.$currentsheet->getCell('A'.$i)->getValue().' THEN '.$currentsheet->getCell('J'.$i)->getValue();\n    $sql_bd_name .= ','.$currentsheet->getCell('A'.$i)->getValue();\n    $res +=1;\n}\n\n//输入，当然这里无论我们用fopen或者其他的输入当属都可以，这里我把结果打到了控制台。\necho $sql_bd_name;\necho $res \n\n```\n\n\n我们生成的sql是`WHEN`  `THEN`的样式，完整语句应该是 update tablename set seller_jn_activity CASE id\nWHEN 1 TEHN 2 \nEND,\nbd_jn_activity CASE id\nwhen 2 THEN 3\nEND\nWHERE in (1,2,3)\n\n发现数据清洗其实是一件很麻烦的事。","slug":"PHPExecel","published":1,"updated":"2018-06-19T10:36:01.359Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqavhgd9000izqjfyaolm6np","content":"<h1 id=\"PHPEXcel\"><a href=\"#PHPEXcel\" class=\"headerlink\" title=\"PHPEXcel\"></a>PHPEXcel</h1><hr>\n<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>在工作中我们肯定会遇到由于后端管理系统不完善，而导致运营同学无法从管理系统获取想要的数据。亦或程序设计之初没有考虑到完善，导致一些必要的数据没有录入，希望后续补充批量导入。在这个时候我们就需要获取从数据批量导出数据或者导入数据，而无论导入还是导出数据，我们都希望是Excel格式。</p>\n<h2 id=\"根据Execel生成sql\"><a href=\"#根据Execel生成sql\" class=\"headerlink\" title=\"根据Execel生成sql\"></a>根据Execel生成sql</h2><p>1.PHPExcel</p>\n<p>准备：我们需要从github获取PHPExcel工具包。地址 <code>https://github.com/PHPOffice/PHPExcel</code> </p>\n<p>打开PHPExcel文件夹，看下代码结构。我们需要的主要代码在<code>Classes</code>文件下，我们只需要引入<code>PHPExcel.php</code>即可。</p>\n<p>代码实现<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">include</span> <span class=\"string\">'./code/web_code/PHPExcel/Classes/PHPExcel.php'</span>;<span class=\"comment\">//引入必要的第三方依赖</span></div><div class=\"line\">$inputFileType = <span class=\"string\">'Excel2007'</span>;<span class=\"comment\">//设置Excel的版本</span></div><div class=\"line\">$inputFileName = <span class=\"string\">'./targe.xlsx'</span>;<span class=\"comment\">// 需要导入文件地址</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">$currentsheet = $objPHPExcel-&gt;getSheet(<span class=\"number\">0</span>); <span class=\"comment\">//选择Excel页</span></div><div class=\"line\">$maxColumn = $currentsheet-&gt;getHighestColumn(); <span class=\"comment\">//获取当前页的最大列数</span></div><div class=\"line\">$maxRow = $currentsheet-&gt;getHighestRow(); <span class=\"comment\">//获取当前页的最大行数</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//循环拼接sql</span></div><div class=\"line\"><span class=\"keyword\">for</span> ($i=<span class=\"number\">2</span>; $i&lt; $maxRow; $i++) &#123; </div><div class=\"line\">    <span class=\"comment\">//过滤条件</span></div><div class=\"line\">     <span class=\"keyword\">if</span>(is_null($currentsheet-&gt;getCell(<span class=\"string\">'J'</span>.$i)-&gt;getValue())||$currentsheet-&gt;getCell(<span class=\"string\">'J'</span>.$i)-&gt;getValue()== <span class=\"string\">'已退款'</span> || $currentsheet-&gt;getCell(<span class=\"string\">'J'</span>.$i)-&gt;getValue() == <span class=\"string\">'待退款'</span> || $currentsheet-&gt;getCell(<span class=\"string\">'J'</span>.$i)-&gt;getValue() == <span class=\"string\">'已经申请退款'</span> || $currentsheet-&gt;getCell(<span class=\"string\">'J'</span>.$i)-&gt;getValue() == <span class=\"string\">'退了'</span> ||$currentsheet-&gt;getCell(<span class=\"string\">'J'</span>.$i)-&gt;getValue() == <span class=\"string\">'没有电话'</span> || $currentsheet-&gt;getCell(<span class=\"string\">'J'</span>.$i)-&gt;getValue() == <span class=\"string\">'0'</span>) &#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">continue</span>;</div><div class=\"line\">     &#125;</div><div class=\"line\">     <span class=\"comment\">//过滤条件</span></div><div class=\"line\">     <span class=\"keyword\">if</span>(!is_numeric($currentsheet-&gt;getCell(<span class=\"string\">'J'</span>.$i)-&gt;getValue())||$currentsheet-&gt;getCell(<span class=\"string\">'J'</span>.$i)-&gt;getValue() == <span class=\"string\">'0'</span> || <span class=\"keyword\">empty</span>($currentsheet-&gt;getCell(<span class=\"string\">'J'</span>.$i)-&gt;getValue()) || $currentsheet-&gt;getCell(<span class=\"string\">'J'</span>.$i)-&gt;getValue() == <span class=\"string\">''</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">continue</span>;</div><div class=\"line\">     &#125;</div><div class=\"line\"></div><div class=\"line\">    $sql_bd_name .= <span class=\"string\">' WHEN '</span>.$currentsheet-&gt;getCell(<span class=\"string\">'A'</span>.$i)-&gt;getValue().<span class=\"string\">' THEN '</span>.$currentsheet-&gt;getCell(<span class=\"string\">'J'</span>.$i)-&gt;getValue();</div><div class=\"line\">    $sql_bd_name .= <span class=\"string\">','</span>.$currentsheet-&gt;getCell(<span class=\"string\">'A'</span>.$i)-&gt;getValue();</div><div class=\"line\">    $res +=<span class=\"number\">1</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//输入，当然这里无论我们用fopen或者其他的输入当属都可以，这里我把结果打到了控制台。</span></div><div class=\"line\"><span class=\"keyword\">echo</span> $sql_bd_name;</div><div class=\"line\"><span class=\"keyword\">echo</span> $res</div></pre></td></tr></table></figure></p>\n<p>我们生成的sql是<code>WHEN</code>  <code>THEN</code>的样式，完整语句应该是 update tablename set seller_jn_activity CASE id<br>WHEN 1 TEHN 2<br>END,<br>bd_jn_activity CASE id<br>when 2 THEN 3<br>END<br>WHERE in (1,2,3)</p>\n<p>发现数据清洗其实是一件很麻烦的事。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"PHPEXcel\"><a href=\"#PHPEXcel\" class=\"headerlink\" title=\"PHPEXcel\"></a>PHPEXcel</h1><hr>\n<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>在工作中我们肯定会遇到由于后端管理系统不完善，而导致运营同学无法从管理系统获取想要的数据。亦或程序设计之初没有考虑到完善，导致一些必要的数据没有录入，希望后续补充批量导入。在这个时候我们就需要获取从数据批量导出数据或者导入数据，而无论导入还是导出数据，我们都希望是Excel格式。</p>\n<h2 id=\"根据Execel生成sql\"><a href=\"#根据Execel生成sql\" class=\"headerlink\" title=\"根据Execel生成sql\"></a>根据Execel生成sql</h2><p>1.PHPExcel</p>\n<p>准备：我们需要从github获取PHPExcel工具包。地址 <code>https://github.com/PHPOffice/PHPExcel</code> </p>\n<p>打开PHPExcel文件夹，看下代码结构。我们需要的主要代码在<code>Classes</code>文件下，我们只需要引入<code>PHPExcel.php</code>即可。</p>\n<p>代码实现<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">include</span> <span class=\"string\">'./code/web_code/PHPExcel/Classes/PHPExcel.php'</span>;<span class=\"comment\">//引入必要的第三方依赖</span></div><div class=\"line\">$inputFileType = <span class=\"string\">'Excel2007'</span>;<span class=\"comment\">//设置Excel的版本</span></div><div class=\"line\">$inputFileName = <span class=\"string\">'./targe.xlsx'</span>;<span class=\"comment\">// 需要导入文件地址</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">$currentsheet = $objPHPExcel-&gt;getSheet(<span class=\"number\">0</span>); <span class=\"comment\">//选择Excel页</span></div><div class=\"line\">$maxColumn = $currentsheet-&gt;getHighestColumn(); <span class=\"comment\">//获取当前页的最大列数</span></div><div class=\"line\">$maxRow = $currentsheet-&gt;getHighestRow(); <span class=\"comment\">//获取当前页的最大行数</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//循环拼接sql</span></div><div class=\"line\"><span class=\"keyword\">for</span> ($i=<span class=\"number\">2</span>; $i&lt; $maxRow; $i++) &#123; </div><div class=\"line\">    <span class=\"comment\">//过滤条件</span></div><div class=\"line\">     <span class=\"keyword\">if</span>(is_null($currentsheet-&gt;getCell(<span class=\"string\">'J'</span>.$i)-&gt;getValue())||$currentsheet-&gt;getCell(<span class=\"string\">'J'</span>.$i)-&gt;getValue()== <span class=\"string\">'已退款'</span> || $currentsheet-&gt;getCell(<span class=\"string\">'J'</span>.$i)-&gt;getValue() == <span class=\"string\">'待退款'</span> || $currentsheet-&gt;getCell(<span class=\"string\">'J'</span>.$i)-&gt;getValue() == <span class=\"string\">'已经申请退款'</span> || $currentsheet-&gt;getCell(<span class=\"string\">'J'</span>.$i)-&gt;getValue() == <span class=\"string\">'退了'</span> ||$currentsheet-&gt;getCell(<span class=\"string\">'J'</span>.$i)-&gt;getValue() == <span class=\"string\">'没有电话'</span> || $currentsheet-&gt;getCell(<span class=\"string\">'J'</span>.$i)-&gt;getValue() == <span class=\"string\">'0'</span>) &#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">continue</span>;</div><div class=\"line\">     &#125;</div><div class=\"line\">     <span class=\"comment\">//过滤条件</span></div><div class=\"line\">     <span class=\"keyword\">if</span>(!is_numeric($currentsheet-&gt;getCell(<span class=\"string\">'J'</span>.$i)-&gt;getValue())||$currentsheet-&gt;getCell(<span class=\"string\">'J'</span>.$i)-&gt;getValue() == <span class=\"string\">'0'</span> || <span class=\"keyword\">empty</span>($currentsheet-&gt;getCell(<span class=\"string\">'J'</span>.$i)-&gt;getValue()) || $currentsheet-&gt;getCell(<span class=\"string\">'J'</span>.$i)-&gt;getValue() == <span class=\"string\">''</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">continue</span>;</div><div class=\"line\">     &#125;</div><div class=\"line\"></div><div class=\"line\">    $sql_bd_name .= <span class=\"string\">' WHEN '</span>.$currentsheet-&gt;getCell(<span class=\"string\">'A'</span>.$i)-&gt;getValue().<span class=\"string\">' THEN '</span>.$currentsheet-&gt;getCell(<span class=\"string\">'J'</span>.$i)-&gt;getValue();</div><div class=\"line\">    $sql_bd_name .= <span class=\"string\">','</span>.$currentsheet-&gt;getCell(<span class=\"string\">'A'</span>.$i)-&gt;getValue();</div><div class=\"line\">    $res +=<span class=\"number\">1</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//输入，当然这里无论我们用fopen或者其他的输入当属都可以，这里我把结果打到了控制台。</span></div><div class=\"line\"><span class=\"keyword\">echo</span> $sql_bd_name;</div><div class=\"line\"><span class=\"keyword\">echo</span> $res</div></pre></td></tr></table></figure></p>\n<p>我们生成的sql是<code>WHEN</code>  <code>THEN</code>的样式，完整语句应该是 update tablename set seller_jn_activity CASE id<br>WHEN 1 TEHN 2<br>END,<br>bd_jn_activity CASE id<br>when 2 THEN 3<br>END<br>WHERE in (1,2,3)</p>\n<p>发现数据清洗其实是一件很麻烦的事。</p>\n"},{"title":"hexo git github搭建博客","date":"2015-06-02T13:48:07.000Z","_content":"\n\n------\n\n\n开始\n--\n\n**\n需求环境\n 1. git [git下载地址][1]\n 2. node.js [node.js下载地址][2]\n\n两个安装都是一路下一步\n## 验证软件正确安装 ##\n\n    git --version\n    node -v\n    npm -v\n如果显示版本信息，怎安装成功。\n## 安装hexo ##\n在这里如果被墙的可以使用淘宝镜像cnpm 具体怎么操作可以自行百度，这里不多做解释。\n不过一般不会被墙，我使用npm。运行下边的命令安装hexo：\n被墙请使用命令：\n\n    npm install -g cnpm --registry=https://registry.npm.taobao.org\n\n以下是没有被墙的命令，被墙把npm换成cnpm即可。安装hexo\n\n    npm install hexo-cli -g\n\n安装完成后，验证是否安装成功。\n\n    hexo -v\n新建文件夹yourblog,输入命令\n\n    $ hexo init blog\n    $ cd blog\n新建博客\n\n    $ hexo new \"Hello Hexo\"\n生成静态页面\n\n    $ hexo generate\n运行服务\n\n    $ hexo server\n\n然后打开浏览器输入 localhost:4000 即可访问本地静态页面。\n\n\n## 接下来我们把本地静态页面PUSH到github ##\n\n - 首先你要有github账号。\n - 新建一个github.io的库\n - 设置本地github配置参数\n - 经本地静态页面push到github\n\n\n----------\n **github设置**\n\n新建github账号就不在这里陈述了，如果有同学不会使用git将代码push到github的话可以参考 [廖雪峰的官网][3]\n我们来直接进行第二不，创建一个github.io库。\n首先登陆我们的github账号点击`new repository`,然后输入youname.github.io\n**git设置**\n设置git配置信息\n\n\n    $ git config --global user.name \"你的用户名\"\n    $ git config --global user.email \"你的邮箱\"\n    \n\n**hexo 设置**\n    安装hexo git插件\n\n    npm install hexo-deployer-git --save\n\n然后打开博客根目录的_config.yml文件\n大致内容是这个样子的\n\n```\n# Hexo Configuration\n## Docs: https://hexo.io/docs/configuration.html\n## Source: https://github.com/hexojs/hexo/\n\n# Site\ntitle: 和女票抢可乐\nsubtitle:\ndescription:\nauthor: MaxieLj\nlanguage:\ntimezone:\n\n# URL\n## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'\nurl: http://yoursite.com\nroot: /\npermalink: :year/:month/:day/:title/\npermalink_defaults:\n\n# Directory\nsource_dir: source\npublic_dir: public\ntag_dir: tags\narchive_dir: archives\ncategory_dir: categories\ncode_dir: downloads/code\ni18n_dir: :lang\nskip_render:\n\n# Writing\nnew_post_name: :title.md # File name of new posts\ndefault_layout: post\ntitlecase: false # Transform title into titlecase\nexternal_link: true # Open external links in new tab\nfilename_case: 0\nrender_drafts: false\npost_asset_folder: false\nrelative_link: false\nfuture: true\nhighlight:\n  enable: true\n  line_number: true\n  auto_detect: false\n  tab_replace:\n\n# Category & Tag\ndefault_category: uncategorized\ncategory_map:\ntag_map:\n\n# Date / Time format\n## Hexo uses Moment.js to parse and display date\n## You can customize the date format as defined in\n## http://momentjs.com/docs/#/displaying/format/\ndate_format: YYYY-MM-DD\ntime_format: HH:mm:ss\n\n# Pagination\n## Set per_page to 0 to disable pagination\nper_page: 10\npagination_dir: page\n\n# Extensions\n## Plugins: https://hexo.io/plugins/\n## Themes: https://hexo.io/themes/\ntheme: yilia\n\n# Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n  repository: https://github.com/MaxieLj/MaxieLj.github.io.git\n  branch: master\n\njsonContent:\n  meta: false\n  pages: false\n  posts:\n    title: true\n    date: true\n    path: true\n    text: true\n    raw: false\n    content: false\n    slug: false\n    updated: false\n    comments: false\n    link: false\n    permalink: false\n    excerpt: false\n    categories: false\n    tags: true\n```\n我们只需要在尾部添加：\n```\ndeploy:\n  type: git\n  repository: https://github.com/MaxieLj/MaxieLj.github.io.git\n  branch: master\n```\n\n然后我们运行\n\n    $ hexo g\n生成静态文件\n然后推送到github\n\n    $ hexo d\n然后访问youname.github.io就可以看到生成的静态页面了\n当然我们一般是在本地调试好再用 hexo d推送到github\n\n\n  [1]: https://git-scm.com/downloads\n  [2]: https://nodejs.org/en/\n  [3]: http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000","source":"_posts/hexo-git-github搭建博客.md","raw":"---\ntitle: hexo git github搭建博客\ndate: 2015-06-02 21:48:07\ntags:\n---\n\n\n------\n\n\n开始\n--\n\n**\n需求环境\n 1. git [git下载地址][1]\n 2. node.js [node.js下载地址][2]\n\n两个安装都是一路下一步\n## 验证软件正确安装 ##\n\n    git --version\n    node -v\n    npm -v\n如果显示版本信息，怎安装成功。\n## 安装hexo ##\n在这里如果被墙的可以使用淘宝镜像cnpm 具体怎么操作可以自行百度，这里不多做解释。\n不过一般不会被墙，我使用npm。运行下边的命令安装hexo：\n被墙请使用命令：\n\n    npm install -g cnpm --registry=https://registry.npm.taobao.org\n\n以下是没有被墙的命令，被墙把npm换成cnpm即可。安装hexo\n\n    npm install hexo-cli -g\n\n安装完成后，验证是否安装成功。\n\n    hexo -v\n新建文件夹yourblog,输入命令\n\n    $ hexo init blog\n    $ cd blog\n新建博客\n\n    $ hexo new \"Hello Hexo\"\n生成静态页面\n\n    $ hexo generate\n运行服务\n\n    $ hexo server\n\n然后打开浏览器输入 localhost:4000 即可访问本地静态页面。\n\n\n## 接下来我们把本地静态页面PUSH到github ##\n\n - 首先你要有github账号。\n - 新建一个github.io的库\n - 设置本地github配置参数\n - 经本地静态页面push到github\n\n\n----------\n **github设置**\n\n新建github账号就不在这里陈述了，如果有同学不会使用git将代码push到github的话可以参考 [廖雪峰的官网][3]\n我们来直接进行第二不，创建一个github.io库。\n首先登陆我们的github账号点击`new repository`,然后输入youname.github.io\n**git设置**\n设置git配置信息\n\n\n    $ git config --global user.name \"你的用户名\"\n    $ git config --global user.email \"你的邮箱\"\n    \n\n**hexo 设置**\n    安装hexo git插件\n\n    npm install hexo-deployer-git --save\n\n然后打开博客根目录的_config.yml文件\n大致内容是这个样子的\n\n```\n# Hexo Configuration\n## Docs: https://hexo.io/docs/configuration.html\n## Source: https://github.com/hexojs/hexo/\n\n# Site\ntitle: 和女票抢可乐\nsubtitle:\ndescription:\nauthor: MaxieLj\nlanguage:\ntimezone:\n\n# URL\n## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'\nurl: http://yoursite.com\nroot: /\npermalink: :year/:month/:day/:title/\npermalink_defaults:\n\n# Directory\nsource_dir: source\npublic_dir: public\ntag_dir: tags\narchive_dir: archives\ncategory_dir: categories\ncode_dir: downloads/code\ni18n_dir: :lang\nskip_render:\n\n# Writing\nnew_post_name: :title.md # File name of new posts\ndefault_layout: post\ntitlecase: false # Transform title into titlecase\nexternal_link: true # Open external links in new tab\nfilename_case: 0\nrender_drafts: false\npost_asset_folder: false\nrelative_link: false\nfuture: true\nhighlight:\n  enable: true\n  line_number: true\n  auto_detect: false\n  tab_replace:\n\n# Category & Tag\ndefault_category: uncategorized\ncategory_map:\ntag_map:\n\n# Date / Time format\n## Hexo uses Moment.js to parse and display date\n## You can customize the date format as defined in\n## http://momentjs.com/docs/#/displaying/format/\ndate_format: YYYY-MM-DD\ntime_format: HH:mm:ss\n\n# Pagination\n## Set per_page to 0 to disable pagination\nper_page: 10\npagination_dir: page\n\n# Extensions\n## Plugins: https://hexo.io/plugins/\n## Themes: https://hexo.io/themes/\ntheme: yilia\n\n# Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n  repository: https://github.com/MaxieLj/MaxieLj.github.io.git\n  branch: master\n\njsonContent:\n  meta: false\n  pages: false\n  posts:\n    title: true\n    date: true\n    path: true\n    text: true\n    raw: false\n    content: false\n    slug: false\n    updated: false\n    comments: false\n    link: false\n    permalink: false\n    excerpt: false\n    categories: false\n    tags: true\n```\n我们只需要在尾部添加：\n```\ndeploy:\n  type: git\n  repository: https://github.com/MaxieLj/MaxieLj.github.io.git\n  branch: master\n```\n\n然后我们运行\n\n    $ hexo g\n生成静态文件\n然后推送到github\n\n    $ hexo d\n然后访问youname.github.io就可以看到生成的静态页面了\n当然我们一般是在本地调试好再用 hexo d推送到github\n\n\n  [1]: https://git-scm.com/downloads\n  [2]: https://nodejs.org/en/\n  [3]: http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000","slug":"hexo-git-github搭建博客","published":1,"updated":"2018-10-22T03:27:54.674Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqavhgda000jzqjfkk918yr4","content":"<hr>\n<h2 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h2><p>**<br>需求环境</p>\n<ol>\n<li>git <a href=\"https://git-scm.com/downloads\" target=\"_blank\" rel=\"noopener\">git下载地址</a></li>\n<li>node.js <a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"noopener\">node.js下载地址</a></li>\n</ol>\n<p>两个安装都是一路下一步</p>\n<h2 id=\"验证软件正确安装\"><a href=\"#验证软件正确安装\" class=\"headerlink\" title=\"验证软件正确安装\"></a>验证软件正确安装</h2><pre><code>git --version\nnode -v\nnpm -v\n</code></pre><p>如果显示版本信息，怎安装成功。</p>\n<h2 id=\"安装hexo\"><a href=\"#安装hexo\" class=\"headerlink\" title=\"安装hexo\"></a>安装hexo</h2><p>在这里如果被墙的可以使用淘宝镜像cnpm 具体怎么操作可以自行百度，这里不多做解释。<br>不过一般不会被墙，我使用npm。运行下边的命令安装hexo：<br>被墙请使用命令：</p>\n<pre><code>npm install -g cnpm --registry=https://registry.npm.taobao.org\n</code></pre><p>以下是没有被墙的命令，被墙把npm换成cnpm即可。安装hexo</p>\n<pre><code>npm install hexo-cli -g\n</code></pre><p>安装完成后，验证是否安装成功。</p>\n<pre><code>hexo -v\n</code></pre><p>新建文件夹yourblog,输入命令</p>\n<pre><code>$ hexo init blog\n$ cd blog\n</code></pre><p>新建博客</p>\n<pre><code>$ hexo new &quot;Hello Hexo&quot;\n</code></pre><p>生成静态页面</p>\n<pre><code>$ hexo generate\n</code></pre><p>运行服务</p>\n<pre><code>$ hexo server\n</code></pre><p>然后打开浏览器输入 localhost:4000 即可访问本地静态页面。</p>\n<h2 id=\"接下来我们把本地静态页面PUSH到github\"><a href=\"#接下来我们把本地静态页面PUSH到github\" class=\"headerlink\" title=\"接下来我们把本地静态页面PUSH到github\"></a>接下来我们把本地静态页面PUSH到github</h2><ul>\n<li>首先你要有github账号。</li>\n<li>新建一个github.io的库</li>\n<li>设置本地github配置参数</li>\n<li>经本地静态页面push到github</li>\n</ul>\n<hr>\n<p> <strong>github设置</strong></p>\n<p>新建github账号就不在这里陈述了，如果有同学不会使用git将代码push到github的话可以参考 <a href=\"http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000\" target=\"_blank\" rel=\"noopener\">廖雪峰的官网</a><br>我们来直接进行第二不，创建一个github.io库。<br>首先登陆我们的github账号点击<code>new repository</code>,然后输入youname.github.io<br><strong>git设置</strong><br>设置git配置信息</p>\n<pre><code>$ git config --global user.name &quot;你的用户名&quot;\n$ git config --global user.email &quot;你的邮箱&quot;\n</code></pre><p><strong>hexo 设置</strong><br>    安装hexo git插件</p>\n<pre><code>npm install hexo-deployer-git --save\n</code></pre><p>然后打开博客根目录的_config.yml文件<br>大致内容是这个样子的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Hexo Configuration</div><div class=\"line\">## Docs: https://hexo.io/docs/configuration.html</div><div class=\"line\">## Source: https://github.com/hexojs/hexo/</div><div class=\"line\"></div><div class=\"line\"># Site</div><div class=\"line\">title: 和女票抢可乐</div><div class=\"line\">subtitle:</div><div class=\"line\">description:</div><div class=\"line\">author: MaxieLj</div><div class=\"line\">language:</div><div class=\"line\">timezone:</div><div class=\"line\"></div><div class=\"line\"># URL</div><div class=\"line\">## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;</div><div class=\"line\">url: http://yoursite.com</div><div class=\"line\">root: /</div><div class=\"line\">permalink: :year/:month/:day/:title/</div><div class=\"line\">permalink_defaults:</div><div class=\"line\"></div><div class=\"line\"># Directory</div><div class=\"line\">source_dir: source</div><div class=\"line\">public_dir: public</div><div class=\"line\">tag_dir: tags</div><div class=\"line\">archive_dir: archives</div><div class=\"line\">category_dir: categories</div><div class=\"line\">code_dir: downloads/code</div><div class=\"line\">i18n_dir: :lang</div><div class=\"line\">skip_render:</div><div class=\"line\"></div><div class=\"line\"># Writing</div><div class=\"line\">new_post_name: :title.md # File name of new posts</div><div class=\"line\">default_layout: post</div><div class=\"line\">titlecase: false # Transform title into titlecase</div><div class=\"line\">external_link: true # Open external links in new tab</div><div class=\"line\">filename_case: 0</div><div class=\"line\">render_drafts: false</div><div class=\"line\">post_asset_folder: false</div><div class=\"line\">relative_link: false</div><div class=\"line\">future: true</div><div class=\"line\">highlight:</div><div class=\"line\">  enable: true</div><div class=\"line\">  line_number: true</div><div class=\"line\">  auto_detect: false</div><div class=\"line\">  tab_replace:</div><div class=\"line\"></div><div class=\"line\"># Category &amp; Tag</div><div class=\"line\">default_category: uncategorized</div><div class=\"line\">category_map:</div><div class=\"line\">tag_map:</div><div class=\"line\"></div><div class=\"line\"># Date / Time format</div><div class=\"line\">## Hexo uses Moment.js to parse and display date</div><div class=\"line\">## You can customize the date format as defined in</div><div class=\"line\">## http://momentjs.com/docs/#/displaying/format/</div><div class=\"line\">date_format: YYYY-MM-DD</div><div class=\"line\">time_format: HH:mm:ss</div><div class=\"line\"></div><div class=\"line\"># Pagination</div><div class=\"line\">## Set per_page to 0 to disable pagination</div><div class=\"line\">per_page: 10</div><div class=\"line\">pagination_dir: page</div><div class=\"line\"></div><div class=\"line\"># Extensions</div><div class=\"line\">## Plugins: https://hexo.io/plugins/</div><div class=\"line\">## Themes: https://hexo.io/themes/</div><div class=\"line\">theme: yilia</div><div class=\"line\"></div><div class=\"line\"># Deployment</div><div class=\"line\">## Docs: https://hexo.io/docs/deployment.html</div><div class=\"line\">deploy:</div><div class=\"line\">  type: git</div><div class=\"line\">  repository: https://github.com/MaxieLj/MaxieLj.github.io.git</div><div class=\"line\">  branch: master</div><div class=\"line\"></div><div class=\"line\">jsonContent:</div><div class=\"line\">  meta: false</div><div class=\"line\">  pages: false</div><div class=\"line\">  posts:</div><div class=\"line\">    title: true</div><div class=\"line\">    date: true</div><div class=\"line\">    path: true</div><div class=\"line\">    text: true</div><div class=\"line\">    raw: false</div><div class=\"line\">    content: false</div><div class=\"line\">    slug: false</div><div class=\"line\">    updated: false</div><div class=\"line\">    comments: false</div><div class=\"line\">    link: false</div><div class=\"line\">    permalink: false</div><div class=\"line\">    excerpt: false</div><div class=\"line\">    categories: false</div><div class=\"line\">    tags: true</div></pre></td></tr></table></figure>\n<p>我们只需要在尾部添加：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">deploy:</div><div class=\"line\">  type: git</div><div class=\"line\">  repository: https://github.com/MaxieLj/MaxieLj.github.io.git</div><div class=\"line\">  branch: master</div></pre></td></tr></table></figure></p>\n<p>然后我们运行</p>\n<pre><code>$ hexo g\n</code></pre><p>生成静态文件<br>然后推送到github</p>\n<pre><code>$ hexo d\n</code></pre><p>然后访问youname.github.io就可以看到生成的静态页面了<br>当然我们一般是在本地调试好再用 hexo d推送到github</p>\n","site":{"data":{}},"excerpt":"","more":"<hr>\n<h2 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h2><p>**<br>需求环境</p>\n<ol>\n<li>git <a href=\"https://git-scm.com/downloads\" target=\"_blank\" rel=\"noopener\">git下载地址</a></li>\n<li>node.js <a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"noopener\">node.js下载地址</a></li>\n</ol>\n<p>两个安装都是一路下一步</p>\n<h2 id=\"验证软件正确安装\"><a href=\"#验证软件正确安装\" class=\"headerlink\" title=\"验证软件正确安装\"></a>验证软件正确安装</h2><pre><code>git --version\nnode -v\nnpm -v\n</code></pre><p>如果显示版本信息，怎安装成功。</p>\n<h2 id=\"安装hexo\"><a href=\"#安装hexo\" class=\"headerlink\" title=\"安装hexo\"></a>安装hexo</h2><p>在这里如果被墙的可以使用淘宝镜像cnpm 具体怎么操作可以自行百度，这里不多做解释。<br>不过一般不会被墙，我使用npm。运行下边的命令安装hexo：<br>被墙请使用命令：</p>\n<pre><code>npm install -g cnpm --registry=https://registry.npm.taobao.org\n</code></pre><p>以下是没有被墙的命令，被墙把npm换成cnpm即可。安装hexo</p>\n<pre><code>npm install hexo-cli -g\n</code></pre><p>安装完成后，验证是否安装成功。</p>\n<pre><code>hexo -v\n</code></pre><p>新建文件夹yourblog,输入命令</p>\n<pre><code>$ hexo init blog\n$ cd blog\n</code></pre><p>新建博客</p>\n<pre><code>$ hexo new &quot;Hello Hexo&quot;\n</code></pre><p>生成静态页面</p>\n<pre><code>$ hexo generate\n</code></pre><p>运行服务</p>\n<pre><code>$ hexo server\n</code></pre><p>然后打开浏览器输入 localhost:4000 即可访问本地静态页面。</p>\n<h2 id=\"接下来我们把本地静态页面PUSH到github\"><a href=\"#接下来我们把本地静态页面PUSH到github\" class=\"headerlink\" title=\"接下来我们把本地静态页面PUSH到github\"></a>接下来我们把本地静态页面PUSH到github</h2><ul>\n<li>首先你要有github账号。</li>\n<li>新建一个github.io的库</li>\n<li>设置本地github配置参数</li>\n<li>经本地静态页面push到github</li>\n</ul>\n<hr>\n<p> <strong>github设置</strong></p>\n<p>新建github账号就不在这里陈述了，如果有同学不会使用git将代码push到github的话可以参考 <a href=\"http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000\" target=\"_blank\" rel=\"noopener\">廖雪峰的官网</a><br>我们来直接进行第二不，创建一个github.io库。<br>首先登陆我们的github账号点击<code>new repository</code>,然后输入youname.github.io<br><strong>git设置</strong><br>设置git配置信息</p>\n<pre><code>$ git config --global user.name &quot;你的用户名&quot;\n$ git config --global user.email &quot;你的邮箱&quot;\n</code></pre><p><strong>hexo 设置</strong><br>    安装hexo git插件</p>\n<pre><code>npm install hexo-deployer-git --save\n</code></pre><p>然后打开博客根目录的_config.yml文件<br>大致内容是这个样子的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Hexo Configuration</div><div class=\"line\">## Docs: https://hexo.io/docs/configuration.html</div><div class=\"line\">## Source: https://github.com/hexojs/hexo/</div><div class=\"line\"></div><div class=\"line\"># Site</div><div class=\"line\">title: 和女票抢可乐</div><div class=\"line\">subtitle:</div><div class=\"line\">description:</div><div class=\"line\">author: MaxieLj</div><div class=\"line\">language:</div><div class=\"line\">timezone:</div><div class=\"line\"></div><div class=\"line\"># URL</div><div class=\"line\">## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;</div><div class=\"line\">url: http://yoursite.com</div><div class=\"line\">root: /</div><div class=\"line\">permalink: :year/:month/:day/:title/</div><div class=\"line\">permalink_defaults:</div><div class=\"line\"></div><div class=\"line\"># Directory</div><div class=\"line\">source_dir: source</div><div class=\"line\">public_dir: public</div><div class=\"line\">tag_dir: tags</div><div class=\"line\">archive_dir: archives</div><div class=\"line\">category_dir: categories</div><div class=\"line\">code_dir: downloads/code</div><div class=\"line\">i18n_dir: :lang</div><div class=\"line\">skip_render:</div><div class=\"line\"></div><div class=\"line\"># Writing</div><div class=\"line\">new_post_name: :title.md # File name of new posts</div><div class=\"line\">default_layout: post</div><div class=\"line\">titlecase: false # Transform title into titlecase</div><div class=\"line\">external_link: true # Open external links in new tab</div><div class=\"line\">filename_case: 0</div><div class=\"line\">render_drafts: false</div><div class=\"line\">post_asset_folder: false</div><div class=\"line\">relative_link: false</div><div class=\"line\">future: true</div><div class=\"line\">highlight:</div><div class=\"line\">  enable: true</div><div class=\"line\">  line_number: true</div><div class=\"line\">  auto_detect: false</div><div class=\"line\">  tab_replace:</div><div class=\"line\"></div><div class=\"line\"># Category &amp; Tag</div><div class=\"line\">default_category: uncategorized</div><div class=\"line\">category_map:</div><div class=\"line\">tag_map:</div><div class=\"line\"></div><div class=\"line\"># Date / Time format</div><div class=\"line\">## Hexo uses Moment.js to parse and display date</div><div class=\"line\">## You can customize the date format as defined in</div><div class=\"line\">## http://momentjs.com/docs/#/displaying/format/</div><div class=\"line\">date_format: YYYY-MM-DD</div><div class=\"line\">time_format: HH:mm:ss</div><div class=\"line\"></div><div class=\"line\"># Pagination</div><div class=\"line\">## Set per_page to 0 to disable pagination</div><div class=\"line\">per_page: 10</div><div class=\"line\">pagination_dir: page</div><div class=\"line\"></div><div class=\"line\"># Extensions</div><div class=\"line\">## Plugins: https://hexo.io/plugins/</div><div class=\"line\">## Themes: https://hexo.io/themes/</div><div class=\"line\">theme: yilia</div><div class=\"line\"></div><div class=\"line\"># Deployment</div><div class=\"line\">## Docs: https://hexo.io/docs/deployment.html</div><div class=\"line\">deploy:</div><div class=\"line\">  type: git</div><div class=\"line\">  repository: https://github.com/MaxieLj/MaxieLj.github.io.git</div><div class=\"line\">  branch: master</div><div class=\"line\"></div><div class=\"line\">jsonContent:</div><div class=\"line\">  meta: false</div><div class=\"line\">  pages: false</div><div class=\"line\">  posts:</div><div class=\"line\">    title: true</div><div class=\"line\">    date: true</div><div class=\"line\">    path: true</div><div class=\"line\">    text: true</div><div class=\"line\">    raw: false</div><div class=\"line\">    content: false</div><div class=\"line\">    slug: false</div><div class=\"line\">    updated: false</div><div class=\"line\">    comments: false</div><div class=\"line\">    link: false</div><div class=\"line\">    permalink: false</div><div class=\"line\">    excerpt: false</div><div class=\"line\">    categories: false</div><div class=\"line\">    tags: true</div></pre></td></tr></table></figure>\n<p>我们只需要在尾部添加：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">deploy:</div><div class=\"line\">  type: git</div><div class=\"line\">  repository: https://github.com/MaxieLj/MaxieLj.github.io.git</div><div class=\"line\">  branch: master</div></pre></td></tr></table></figure></p>\n<p>然后我们运行</p>\n<pre><code>$ hexo g\n</code></pre><p>生成静态文件<br>然后推送到github</p>\n<pre><code>$ hexo d\n</code></pre><p>然后访问youname.github.io就可以看到生成的静态页面了<br>当然我们一般是在本地调试好再用 hexo d推送到github</p>\n"},{"layout":"git","title":"github","date":"2015-06-26T14:04:09.000Z","_content":"#关于Git的使用  \n------\n\n## Git的安装和使用 ##\n 准备工作：\n> * 下载git 客户端 [链接地址][1]\n\n下载完毕后，安装一路一下一步。\n安装完成之后我们开始使用Git\n使用前我们需要告诉Git，我们是谁。所以需要配置一些信息，来确定我们的身份。\n\n ```\n git config –global user.name “用户名”\n git config –global user.email “邮箱”\n ```\n第一条命令用来告诉 git 我们的名字（以后链接github）\n第二条命令用来告诉git 我们的邮箱\n\n到此我们就可以使用Git了\n\n## 链接github ##\n如果我们希望把自己的项目托管在github我们就需要再做一些配置\n\n首先我们需要生成ssh,使用以下命令\n```\nssh-keygen –t rsa –C\n```\n\n 1. 然后他提示的默认路径生成一些文件，或者你自己配置路径。 在生成过程中会让你输入密码，可以不输入，一路回车\n    生成完毕后，会在你选择路径下生成两个文件 一个是 .rsa 一个是 .pub 我们这里只需要.pub里的内容 复制里边的内容\n 2. 接下来我们需要把文件里的key添加到我们的github账号里。 首先我们登陆我们的github账号。 然后在设置里 NEW SSH KEY 添加描述然后把我们的key复制到里边即可。\n\n不过在提交之前我们还需要做一些配置来确定我们需要把当前库的代码推送到github账号的哪个库里\n```\ngit remote add origin git@github.com:aaa/xxx\n```\n在上边的配置的命令中，aaa表示的我们的github账号。xxx使我们的库文件。\n以后就可以使用git来进行版本管理和推送到github里了。\n正常操作代码\n```\ngit status\ngit add .\ngit commit -a 'message'\ngit push\n```\n提交完毕。\n\n如果我们需要在其他电脑上使用我们托管的代码，我们需要使用\n```\ngit pull\n\n```\n或者\n```\ngit colne 'address'\n```\n来从github上获取我们所需要的代码\n\n如果在配置过程中出现错误，按照提示的代码解决即可。\n当然在此如果我们直接使用了\n```\ngit commit -a\n```\n会弹出来vim窗口，在这里写一些vim的命令\n在非insert状态下我们使用ctrl+d来批量选择#，然后按d删除\n\n在飞插入模式写:wq 保存并推出\n  [1]: https://git-scm.com/download/win","source":"_posts/github.md","raw":"layout: git\ntitle: github\ndate: 2015-06-26 22:04:09\ntags:\n---\n#关于Git的使用  \n------\n\n## Git的安装和使用 ##\n 准备工作：\n> * 下载git 客户端 [链接地址][1]\n\n下载完毕后，安装一路一下一步。\n安装完成之后我们开始使用Git\n使用前我们需要告诉Git，我们是谁。所以需要配置一些信息，来确定我们的身份。\n\n ```\n git config –global user.name “用户名”\n git config –global user.email “邮箱”\n ```\n第一条命令用来告诉 git 我们的名字（以后链接github）\n第二条命令用来告诉git 我们的邮箱\n\n到此我们就可以使用Git了\n\n## 链接github ##\n如果我们希望把自己的项目托管在github我们就需要再做一些配置\n\n首先我们需要生成ssh,使用以下命令\n```\nssh-keygen –t rsa –C\n```\n\n 1. 然后他提示的默认路径生成一些文件，或者你自己配置路径。 在生成过程中会让你输入密码，可以不输入，一路回车\n    生成完毕后，会在你选择路径下生成两个文件 一个是 .rsa 一个是 .pub 我们这里只需要.pub里的内容 复制里边的内容\n 2. 接下来我们需要把文件里的key添加到我们的github账号里。 首先我们登陆我们的github账号。 然后在设置里 NEW SSH KEY 添加描述然后把我们的key复制到里边即可。\n\n不过在提交之前我们还需要做一些配置来确定我们需要把当前库的代码推送到github账号的哪个库里\n```\ngit remote add origin git@github.com:aaa/xxx\n```\n在上边的配置的命令中，aaa表示的我们的github账号。xxx使我们的库文件。\n以后就可以使用git来进行版本管理和推送到github里了。\n正常操作代码\n```\ngit status\ngit add .\ngit commit -a 'message'\ngit push\n```\n提交完毕。\n\n如果我们需要在其他电脑上使用我们托管的代码，我们需要使用\n```\ngit pull\n\n```\n或者\n```\ngit colne 'address'\n```\n来从github上获取我们所需要的代码\n\n如果在配置过程中出现错误，按照提示的代码解决即可。\n当然在此如果我们直接使用了\n```\ngit commit -a\n```\n会弹出来vim窗口，在这里写一些vim的命令\n在非insert状态下我们使用ctrl+d来批量选择#，然后按d删除\n\n在飞插入模式写:wq 保存并推出\n  [1]: https://git-scm.com/download/win","slug":"github","published":1,"updated":"2018-06-19T10:35:14.525Z","comments":1,"photos":[],"link":"","_id":"cjqavhgda000kzqjfwlafwm37","content":"<h2 id=\"关于Git的使用\"><a href=\"#关于Git的使用\" class=\"headerlink\" title=\"#关于Git的使用  \"></a>#关于Git的使用  </h2><h2 id=\"Git的安装和使用\"><a href=\"#Git的安装和使用\" class=\"headerlink\" title=\"Git的安装和使用\"></a>Git的安装和使用</h2><p> 准备工作：</p>\n<blockquote>\n<ul>\n<li>下载git 客户端 <a href=\"https://git-scm.com/download/win\" target=\"_blank\" rel=\"noopener\">链接地址</a></li>\n</ul>\n</blockquote>\n<p>下载完毕后，安装一路一下一步。<br>安装完成之后我们开始使用Git<br>使用前我们需要告诉Git，我们是谁。所以需要配置一些信息，来确定我们的身份。</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git config –global user.name “用户名”</div><div class=\"line\">git config –global user.email “邮箱”</div></pre></td></tr></table></figure>\n<p>第一条命令用来告诉 git 我们的名字（以后链接github）<br>第二条命令用来告诉git 我们的邮箱</p>\n<p>到此我们就可以使用Git了</p>\n<h2 id=\"链接github\"><a href=\"#链接github\" class=\"headerlink\" title=\"链接github\"></a>链接github</h2><p>如果我们希望把自己的项目托管在github我们就需要再做一些配置</p>\n<p>首先我们需要生成ssh,使用以下命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ssh-keygen –t rsa –C</div></pre></td></tr></table></figure></p>\n<ol>\n<li>然后他提示的默认路径生成一些文件，或者你自己配置路径。 在生成过程中会让你输入密码，可以不输入，一路回车<br>生成完毕后，会在你选择路径下生成两个文件 一个是 .rsa 一个是 .pub 我们这里只需要.pub里的内容 复制里边的内容</li>\n<li>接下来我们需要把文件里的key添加到我们的github账号里。 首先我们登陆我们的github账号。 然后在设置里 NEW SSH KEY 添加描述然后把我们的key复制到里边即可。</li>\n</ol>\n<p>不过在提交之前我们还需要做一些配置来确定我们需要把当前库的代码推送到github账号的哪个库里<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git remote add origin git@github.com:aaa/xxx</div></pre></td></tr></table></figure></p>\n<p>在上边的配置的命令中，aaa表示的我们的github账号。xxx使我们的库文件。<br>以后就可以使用git来进行版本管理和推送到github里了。<br>正常操作代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">git status</div><div class=\"line\">git add .</div><div class=\"line\">git commit -a &apos;message&apos;</div><div class=\"line\">git push</div></pre></td></tr></table></figure></p>\n<p>提交完毕。</p>\n<p>如果我们需要在其他电脑上使用我们托管的代码，我们需要使用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git pull</div></pre></td></tr></table></figure></p>\n<p>或者<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git colne &apos;address&apos;</div></pre></td></tr></table></figure></p>\n<p>来从github上获取我们所需要的代码</p>\n<p>如果在配置过程中出现错误，按照提示的代码解决即可。<br>当然在此如果我们直接使用了<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git commit -a</div></pre></td></tr></table></figure></p>\n<p>会弹出来vim窗口，在这里写一些vim的命令<br>在非insert状态下我们使用ctrl+d来批量选择#，然后按d删除</p>\n<p>在飞插入模式写:wq 保存并推出</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"关于Git的使用\"><a href=\"#关于Git的使用\" class=\"headerlink\" title=\"#关于Git的使用  \"></a>#关于Git的使用  </h2><h2 id=\"Git的安装和使用\"><a href=\"#Git的安装和使用\" class=\"headerlink\" title=\"Git的安装和使用\"></a>Git的安装和使用</h2><p> 准备工作：</p>\n<blockquote>\n<ul>\n<li>下载git 客户端 <a href=\"https://git-scm.com/download/win\" target=\"_blank\" rel=\"noopener\">链接地址</a></li>\n</ul>\n</blockquote>\n<p>下载完毕后，安装一路一下一步。<br>安装完成之后我们开始使用Git<br>使用前我们需要告诉Git，我们是谁。所以需要配置一些信息，来确定我们的身份。</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git config –global user.name “用户名”</div><div class=\"line\">git config –global user.email “邮箱”</div></pre></td></tr></table></figure>\n<p>第一条命令用来告诉 git 我们的名字（以后链接github）<br>第二条命令用来告诉git 我们的邮箱</p>\n<p>到此我们就可以使用Git了</p>\n<h2 id=\"链接github\"><a href=\"#链接github\" class=\"headerlink\" title=\"链接github\"></a>链接github</h2><p>如果我们希望把自己的项目托管在github我们就需要再做一些配置</p>\n<p>首先我们需要生成ssh,使用以下命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ssh-keygen –t rsa –C</div></pre></td></tr></table></figure></p>\n<ol>\n<li>然后他提示的默认路径生成一些文件，或者你自己配置路径。 在生成过程中会让你输入密码，可以不输入，一路回车<br>生成完毕后，会在你选择路径下生成两个文件 一个是 .rsa 一个是 .pub 我们这里只需要.pub里的内容 复制里边的内容</li>\n<li>接下来我们需要把文件里的key添加到我们的github账号里。 首先我们登陆我们的github账号。 然后在设置里 NEW SSH KEY 添加描述然后把我们的key复制到里边即可。</li>\n</ol>\n<p>不过在提交之前我们还需要做一些配置来确定我们需要把当前库的代码推送到github账号的哪个库里<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git remote add origin git@github.com:aaa/xxx</div></pre></td></tr></table></figure></p>\n<p>在上边的配置的命令中，aaa表示的我们的github账号。xxx使我们的库文件。<br>以后就可以使用git来进行版本管理和推送到github里了。<br>正常操作代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">git status</div><div class=\"line\">git add .</div><div class=\"line\">git commit -a &apos;message&apos;</div><div class=\"line\">git push</div></pre></td></tr></table></figure></p>\n<p>提交完毕。</p>\n<p>如果我们需要在其他电脑上使用我们托管的代码，我们需要使用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git pull</div></pre></td></tr></table></figure></p>\n<p>或者<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git colne &apos;address&apos;</div></pre></td></tr></table></figure></p>\n<p>来从github上获取我们所需要的代码</p>\n<p>如果在配置过程中出现错误，按照提示的代码解决即可。<br>当然在此如果我们直接使用了<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git commit -a</div></pre></td></tr></table></figure></p>\n<p>会弹出来vim窗口，在这里写一些vim的命令<br>在非insert状态下我们使用ctrl+d来批量选择#，然后按d删除</p>\n<p>在飞插入模式写:wq 保存并推出</p>\n"},{"title":"kong","date":"2018-12-02T11:02:17.000Z","_content":"\n当前系统，环境centos7\n\b起kong服务需要做：\n- 安装\n    - kong\n    - pgsql\n    - dashboard(可选，用来通过api来管理空)\n- 配置\n    - kong.conf（配置数据库等）、配置路由。\n    - pgsql配置（新建数据库）\n    - 配置kong路由\n- 注意事项\n    - 尽量安装高版本，防止和pgsql不兼容。\n\n\n# 1.安装kong\n\n- 需要安装kong\n- 安装pgsql\n\n官方文档提供的快速安装地址`https://docs.konghq.com/install/centos/?_ga=2.182378343.1594956911.1543481061-735966922.1539239867`\n\nstep1:\n`baseurl=https://kong.bintray.com/kong-community-edition-rpm/centos/7` 各个版本的地址，下载要安装的版本。\nwget `https://kong.bintray.com/kong-community-edition-rpm/centos/7/kong-community-edition-0.14.1.el7.noarch.rpm`\nsrep2:\n执行下边命令:\n```\nsudo yum install epel-release\nsudo yum install kong-community-edition-0.14.1.*.noarch.rpm --nogpgcheck\n```\n安装完成，这个时候是起不来额，因为没有安装pgsql。\n\n\n# 2.安装postgresql10\n\n尽量安装高版本，防止和pgsql不兼容,为了避免采坑，选择`kong-community-edition-0.14.1.el7.noarch.rpm`版本，当然也在测试机测试没有问题。\n官方地址`https://www.postgresql.org/download/linux/redhat/` 可以选择对需安装的对应的版本，会自动生成安装命令，我选择的是10.6\n\npostgresql10安装与启动\n```\nyum install https://download.postgresql.org/pub/repos/yum/10/redhat/rhel-7-x86_64/pgdg-centos10-10-2.noarch.rpm    \nyum install postgresql10    \nyum install postgresql10-server\n/usr/pgsql-10/bin/postgresql-10-setup initdb  \nsystemctl enable postgresql-10  \nsystemctl start postgresql-10\n```\n安装完成后，还需要做：\n1. 配置postgreps用户。\n2. 新增和数据库。\n3. 配置远程连接。\n\n添加用户以及新增数据：\n```\nsudo -s  //取得root权限\nsu - postgres \npsql -U postgres //连接本地数据\n\npostgres=# CREATE USER kong WITH LOGIN PASSWORD 'kong';  //创建用户\npostgres-# CREATE ROLE //返回CREATE ROLE，表示创建用户成功\n\npostgres=# CREATE DATABASE kong; //创建数据库\nCREATE DATABASE //返回CREATE DATABASE，表示创建数据库成功.\n\n```\n\n然后初始化数据库:`sudo /usr/local/bin/kong migrations up`\n\n修改pgsql,配置远程连接：\n执行`vim /var/lib/pgsql/10/data/pg_hba.conf`\n```\n//修改 127.0.0.1/32 为trust\nhost    all             all             127.0.0.1/32            trust\n//添加下边这条记录，用于ssl连接\nhost    all             all             0.0.0.0/0               md5\n```\n![image](/photo/img/kong/pg_hba.conf.png)\n\n执行`vim /var/lib/pgsql/10/data/postgresql.conf`\n添加一下信息:\n```\nlisten_addresses = '*' //允许所有的ip访问postgres\n```\n\n# 3.配置kong.conf\n\n执行 `vi /etc/kong/kong.conf`\n\n```\npg_host = 127.0.0.1             # The PostgreSQL host to connect to.\npg_port = 5432                  # The port to connect to.\npg_user = kong                  # The username to authenticate if required.\npg_password = kong                  # The password to authenticate if required.\npg_database = kong              # The database name to connect to.\n```\n执行`sudo /usr/local/bin/kong start -c /etc/kong/kong.conf`,提示`Kong started`则代表启动成功\n\n`curl -i http://localhost:8001/`,测试kong是否启动。也可以访问`http://host:8000/`,来确定kong是否起来。因为此时我们尚未配置任何服务、路由，访问会返回404，如下：\n![image](/photo/img/kong/kong-404.png)\n\n\n# 4.配置dashboard\n前置操作：需要安装nodejs\n`sudo yum install nodejs`\n\nkong提供一套api，用于动态管服务、路由、插件等。当然有开源的dashboard，这样我们操作起来更方便。\n开源项目地址`https://github.com/PGBI/kong-dashboard`\n\n安装命令`npm install -g kong-dashboard`\n\n启动命令：`nohup kong-dashboard start --kong-url http://localhost:8001 /dev/null 2>&1 &`\n\n为了安全起见，可以吧启动kong的账户密码放在work的环境变量里。\n修改work的环境变量 vi ~.bash_profile，添加password参数。\nkong-dashboard start \\\n  --kong-url http://kong:8001 \\\n  --basic-auth work=$password\n\n# 5.日志目录以及启动相关\n查看日志文件`tail -f /usr/local/kong/logs/error.log`\n\nkong配置文件默认地址为 /ect/kong/kong.conf\n想要删除postgreSql，需要先断开所有连接`sudo ps aux | grep scidb | xargs sudo kill -9`\n\n启动命令`sudo /usr/local/bin/kong start -c /etc/kong/kong.conf`\n\n# 6.遇到问题\n\n沙盒项目部署的时候，我把项目上传到了 /home/work/kong/目录下，并将其软连到了/usr/local/share/lua/目录下。、\n\n再启动kong时，报错:\n\n```\n2018/12/06 15:26:01 [error] 7684#0: init_worker_by_lua error: /usr/local/share/lua/5.1/kong/init.lua:244: module 'resty.worker.events' not found:Failed loading module resty.worker.events in LuaRocks rock lua-resty-worker-events 0.3.3-1\n\tno field package.preload['resty.worker.events']\n\tno file './resty/worker/events.lua'\n\tno file './resty/worker/events/init.lua'\n\tno file '/usr/local/openresty/site/lualib/resty/worker/events.ljbc'\n\tno file '/usr/local/openresty/site/lualib/resty/worker/events/init.ljbc'\n\tno file '/usr/local/openresty/lualib/resty/worker/events.ljbc'\n\tno file '/usr/local/openresty/lualib/resty/worker/events/init.ljbc'\n\tno file '/usr/local/openresty/site/lualib/resty/worker/events.lua'\n\tno file '/usr/local/openresty/site/lualib/resty/worker/events/init.lua'\n\tno file '/usr/local/openresty/lualib/resty/worker/events.lua'\n\tno file '/usr/local/openresty/lualib/resty/worker/events/init.lua'\n\tno file '/usr/local/openresty/luajit/share/luajit-2.1.0-beta3/resty/worker/events.lua'\n\tno file '/usr/local/share/lua/5.1/resty/worker/events.lua'\n\tno file '/usr/local/share/lua/5.1/resty/worker/events/init.lua'\n\tno file '/usr/local/openresty/luajit/share/lua/5.1/resty/worker/events.lua'\n\tno file '/usr/local/openresty/luajit/share/lua/5.1/resty/worker/events/init.lua'\n\tno file '/root/.luarocks/share/lua/5.1/resty/worker/events.lua'\n\tno file '/root/.luarocks/share/lua/5.1/resty/worker/events/init.lua'\n\tno file '/usr/local/openresty/site/lualib/resty/worker/events.so'\n\tno file '/usr/local/openresty/lualib/resty/worker/events.so'\n\tno file './resty/worker/events.so'\n\tno file '/usr/local/lib/lua/5.1/resty/worker/events.so'\n\tno file '/usr/local/openresty/luajit/lib/lua/5.1/resty/worker/events.so'\n\tno file '/usr/local/lib/lua/5.1/loadall.so'\n\tno file '/root/.luarocks/lib/lua/5.1/resty/worker/events.so'\n\tno file '/usr/local/openresty/site/lualib/resty.so'\n\tno file '/usr/local/openresty/lualib/resty.so'\n\tno file './resty.so'\n\tno file '/usr/local/lib/lua/5.1/resty.so'\n\tno file '/usr/local/openresty/luajit/lib/lua/5.1/resty.so'\n\tno file '/usr/local/lib/lua/5.1/loadall.so'\n\tno file '/root/.luarocks/lib/lua/5.1/resty.so'\n```\n\n最终我把项目上传到了/usr/local/share/releas/目录下，并将其软连到了/usr/local/share/lua/下，启动并没有出现改问题.\n\n\n线索：\n`https://github.com/Kong/kong/issues/2838`\n","source":"_posts/kong.md","raw":"---\ntitle: kong\ndate: 2018-12-02 19:02:17\ntags:\n---\n\n当前系统，环境centos7\n\b起kong服务需要做：\n- 安装\n    - kong\n    - pgsql\n    - dashboard(可选，用来通过api来管理空)\n- 配置\n    - kong.conf（配置数据库等）、配置路由。\n    - pgsql配置（新建数据库）\n    - 配置kong路由\n- 注意事项\n    - 尽量安装高版本，防止和pgsql不兼容。\n\n\n# 1.安装kong\n\n- 需要安装kong\n- 安装pgsql\n\n官方文档提供的快速安装地址`https://docs.konghq.com/install/centos/?_ga=2.182378343.1594956911.1543481061-735966922.1539239867`\n\nstep1:\n`baseurl=https://kong.bintray.com/kong-community-edition-rpm/centos/7` 各个版本的地址，下载要安装的版本。\nwget `https://kong.bintray.com/kong-community-edition-rpm/centos/7/kong-community-edition-0.14.1.el7.noarch.rpm`\nsrep2:\n执行下边命令:\n```\nsudo yum install epel-release\nsudo yum install kong-community-edition-0.14.1.*.noarch.rpm --nogpgcheck\n```\n安装完成，这个时候是起不来额，因为没有安装pgsql。\n\n\n# 2.安装postgresql10\n\n尽量安装高版本，防止和pgsql不兼容,为了避免采坑，选择`kong-community-edition-0.14.1.el7.noarch.rpm`版本，当然也在测试机测试没有问题。\n官方地址`https://www.postgresql.org/download/linux/redhat/` 可以选择对需安装的对应的版本，会自动生成安装命令，我选择的是10.6\n\npostgresql10安装与启动\n```\nyum install https://download.postgresql.org/pub/repos/yum/10/redhat/rhel-7-x86_64/pgdg-centos10-10-2.noarch.rpm    \nyum install postgresql10    \nyum install postgresql10-server\n/usr/pgsql-10/bin/postgresql-10-setup initdb  \nsystemctl enable postgresql-10  \nsystemctl start postgresql-10\n```\n安装完成后，还需要做：\n1. 配置postgreps用户。\n2. 新增和数据库。\n3. 配置远程连接。\n\n添加用户以及新增数据：\n```\nsudo -s  //取得root权限\nsu - postgres \npsql -U postgres //连接本地数据\n\npostgres=# CREATE USER kong WITH LOGIN PASSWORD 'kong';  //创建用户\npostgres-# CREATE ROLE //返回CREATE ROLE，表示创建用户成功\n\npostgres=# CREATE DATABASE kong; //创建数据库\nCREATE DATABASE //返回CREATE DATABASE，表示创建数据库成功.\n\n```\n\n然后初始化数据库:`sudo /usr/local/bin/kong migrations up`\n\n修改pgsql,配置远程连接：\n执行`vim /var/lib/pgsql/10/data/pg_hba.conf`\n```\n//修改 127.0.0.1/32 为trust\nhost    all             all             127.0.0.1/32            trust\n//添加下边这条记录，用于ssl连接\nhost    all             all             0.0.0.0/0               md5\n```\n![image](/photo/img/kong/pg_hba.conf.png)\n\n执行`vim /var/lib/pgsql/10/data/postgresql.conf`\n添加一下信息:\n```\nlisten_addresses = '*' //允许所有的ip访问postgres\n```\n\n# 3.配置kong.conf\n\n执行 `vi /etc/kong/kong.conf`\n\n```\npg_host = 127.0.0.1             # The PostgreSQL host to connect to.\npg_port = 5432                  # The port to connect to.\npg_user = kong                  # The username to authenticate if required.\npg_password = kong                  # The password to authenticate if required.\npg_database = kong              # The database name to connect to.\n```\n执行`sudo /usr/local/bin/kong start -c /etc/kong/kong.conf`,提示`Kong started`则代表启动成功\n\n`curl -i http://localhost:8001/`,测试kong是否启动。也可以访问`http://host:8000/`,来确定kong是否起来。因为此时我们尚未配置任何服务、路由，访问会返回404，如下：\n![image](/photo/img/kong/kong-404.png)\n\n\n# 4.配置dashboard\n前置操作：需要安装nodejs\n`sudo yum install nodejs`\n\nkong提供一套api，用于动态管服务、路由、插件等。当然有开源的dashboard，这样我们操作起来更方便。\n开源项目地址`https://github.com/PGBI/kong-dashboard`\n\n安装命令`npm install -g kong-dashboard`\n\n启动命令：`nohup kong-dashboard start --kong-url http://localhost:8001 /dev/null 2>&1 &`\n\n为了安全起见，可以吧启动kong的账户密码放在work的环境变量里。\n修改work的环境变量 vi ~.bash_profile，添加password参数。\nkong-dashboard start \\\n  --kong-url http://kong:8001 \\\n  --basic-auth work=$password\n\n# 5.日志目录以及启动相关\n查看日志文件`tail -f /usr/local/kong/logs/error.log`\n\nkong配置文件默认地址为 /ect/kong/kong.conf\n想要删除postgreSql，需要先断开所有连接`sudo ps aux | grep scidb | xargs sudo kill -9`\n\n启动命令`sudo /usr/local/bin/kong start -c /etc/kong/kong.conf`\n\n# 6.遇到问题\n\n沙盒项目部署的时候，我把项目上传到了 /home/work/kong/目录下，并将其软连到了/usr/local/share/lua/目录下。、\n\n再启动kong时，报错:\n\n```\n2018/12/06 15:26:01 [error] 7684#0: init_worker_by_lua error: /usr/local/share/lua/5.1/kong/init.lua:244: module 'resty.worker.events' not found:Failed loading module resty.worker.events in LuaRocks rock lua-resty-worker-events 0.3.3-1\n\tno field package.preload['resty.worker.events']\n\tno file './resty/worker/events.lua'\n\tno file './resty/worker/events/init.lua'\n\tno file '/usr/local/openresty/site/lualib/resty/worker/events.ljbc'\n\tno file '/usr/local/openresty/site/lualib/resty/worker/events/init.ljbc'\n\tno file '/usr/local/openresty/lualib/resty/worker/events.ljbc'\n\tno file '/usr/local/openresty/lualib/resty/worker/events/init.ljbc'\n\tno file '/usr/local/openresty/site/lualib/resty/worker/events.lua'\n\tno file '/usr/local/openresty/site/lualib/resty/worker/events/init.lua'\n\tno file '/usr/local/openresty/lualib/resty/worker/events.lua'\n\tno file '/usr/local/openresty/lualib/resty/worker/events/init.lua'\n\tno file '/usr/local/openresty/luajit/share/luajit-2.1.0-beta3/resty/worker/events.lua'\n\tno file '/usr/local/share/lua/5.1/resty/worker/events.lua'\n\tno file '/usr/local/share/lua/5.1/resty/worker/events/init.lua'\n\tno file '/usr/local/openresty/luajit/share/lua/5.1/resty/worker/events.lua'\n\tno file '/usr/local/openresty/luajit/share/lua/5.1/resty/worker/events/init.lua'\n\tno file '/root/.luarocks/share/lua/5.1/resty/worker/events.lua'\n\tno file '/root/.luarocks/share/lua/5.1/resty/worker/events/init.lua'\n\tno file '/usr/local/openresty/site/lualib/resty/worker/events.so'\n\tno file '/usr/local/openresty/lualib/resty/worker/events.so'\n\tno file './resty/worker/events.so'\n\tno file '/usr/local/lib/lua/5.1/resty/worker/events.so'\n\tno file '/usr/local/openresty/luajit/lib/lua/5.1/resty/worker/events.so'\n\tno file '/usr/local/lib/lua/5.1/loadall.so'\n\tno file '/root/.luarocks/lib/lua/5.1/resty/worker/events.so'\n\tno file '/usr/local/openresty/site/lualib/resty.so'\n\tno file '/usr/local/openresty/lualib/resty.so'\n\tno file './resty.so'\n\tno file '/usr/local/lib/lua/5.1/resty.so'\n\tno file '/usr/local/openresty/luajit/lib/lua/5.1/resty.so'\n\tno file '/usr/local/lib/lua/5.1/loadall.so'\n\tno file '/root/.luarocks/lib/lua/5.1/resty.so'\n```\n\n最终我把项目上传到了/usr/local/share/releas/目录下，并将其软连到了/usr/local/share/lua/下，启动并没有出现改问题.\n\n\n线索：\n`https://github.com/Kong/kong/issues/2838`\n","slug":"kong","published":1,"updated":"2018-12-19T10:28:38.424Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqavhgdb000lzqjfzybyc24t","content":"<p>当前系统，环境centos7<br>\b起kong服务需要做：</p>\n<ul>\n<li>安装<ul>\n<li>kong</li>\n<li>pgsql</li>\n<li>dashboard(可选，用来通过api来管理空)</li>\n</ul>\n</li>\n<li>配置<ul>\n<li>kong.conf（配置数据库等）、配置路由。</li>\n<li>pgsql配置（新建数据库）</li>\n<li>配置kong路由</li>\n</ul>\n</li>\n<li>注意事项<ul>\n<li>尽量安装高版本，防止和pgsql不兼容。</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"1-安装kong\"><a href=\"#1-安装kong\" class=\"headerlink\" title=\"1.安装kong\"></a>1.安装kong</h1><ul>\n<li>需要安装kong</li>\n<li>安装pgsql</li>\n</ul>\n<p>官方文档提供的快速安装地址<code>https://docs.konghq.com/install/centos/?_ga=2.182378343.1594956911.1543481061-735966922.1539239867</code></p>\n<p>step1:<br><code>baseurl=https://kong.bintray.com/kong-community-edition-rpm/centos/7</code> 各个版本的地址，下载要安装的版本。<br>wget <code>https://kong.bintray.com/kong-community-edition-rpm/centos/7/kong-community-edition-0.14.1.el7.noarch.rpm</code><br>srep2:<br>执行下边命令:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo yum install epel-release</div><div class=\"line\">sudo yum install kong-community-edition-0.14.1.*.noarch.rpm --nogpgcheck</div></pre></td></tr></table></figure></p>\n<p>安装完成，这个时候是起不来额，因为没有安装pgsql。</p>\n<h1 id=\"2-安装postgresql10\"><a href=\"#2-安装postgresql10\" class=\"headerlink\" title=\"2.安装postgresql10\"></a>2.安装postgresql10</h1><p>尽量安装高版本，防止和pgsql不兼容,为了避免采坑，选择<code>kong-community-edition-0.14.1.el7.noarch.rpm</code>版本，当然也在测试机测试没有问题。<br>官方地址<code>https://www.postgresql.org/download/linux/redhat/</code> 可以选择对需安装的对应的版本，会自动生成安装命令，我选择的是10.6</p>\n<p>postgresql10安装与启动<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum install https://download.postgresql.org/pub/repos/yum/10/redhat/rhel-7-x86_64/pgdg-centos10-10-2.noarch.rpm    </div><div class=\"line\">yum install postgresql10    </div><div class=\"line\">yum install postgresql10-server</div><div class=\"line\">/usr/pgsql-10/bin/postgresql-10-setup initdb  </div><div class=\"line\">systemctl enable postgresql-10  </div><div class=\"line\">systemctl start postgresql-10</div></pre></td></tr></table></figure></p>\n<p>安装完成后，还需要做：</p>\n<ol>\n<li>配置postgreps用户。</li>\n<li>新增和数据库。</li>\n<li>配置远程连接。</li>\n</ol>\n<p>添加用户以及新增数据：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo -s  //取得root权限</div><div class=\"line\">su - postgres </div><div class=\"line\">psql -U postgres //连接本地数据</div><div class=\"line\"></div><div class=\"line\">postgres=# CREATE USER kong WITH LOGIN PASSWORD &apos;kong&apos;;  //创建用户</div><div class=\"line\">postgres-# CREATE ROLE //返回CREATE ROLE，表示创建用户成功</div><div class=\"line\"></div><div class=\"line\">postgres=# CREATE DATABASE kong; //创建数据库</div><div class=\"line\">CREATE DATABASE //返回CREATE DATABASE，表示创建数据库成功.</div></pre></td></tr></table></figure></p>\n<p>然后初始化数据库:<code>sudo /usr/local/bin/kong migrations up</code></p>\n<p>修改pgsql,配置远程连接：<br>执行<code>vim /var/lib/pgsql/10/data/pg_hba.conf</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">//修改 127.0.0.1/32 为trust</div><div class=\"line\">host    all             all             127.0.0.1/32            trust</div><div class=\"line\">//添加下边这条记录，用于ssl连接</div><div class=\"line\">host    all             all             0.0.0.0/0               md5</div></pre></td></tr></table></figure></p>\n<p><img src=\"/photo/img/kong/pg_hba.conf.png\" alt=\"image\"></p>\n<p>执行<code>vim /var/lib/pgsql/10/data/postgresql.conf</code><br>添加一下信息:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">listen_addresses = &apos;*&apos; //允许所有的ip访问postgres</div></pre></td></tr></table></figure></p>\n<h1 id=\"3-配置kong-conf\"><a href=\"#3-配置kong-conf\" class=\"headerlink\" title=\"3.配置kong.conf\"></a>3.配置kong.conf</h1><p>执行 <code>vi /etc/kong/kong.conf</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">pg_host = 127.0.0.1             # The PostgreSQL host to connect to.</div><div class=\"line\">pg_port = 5432                  # The port to connect to.</div><div class=\"line\">pg_user = kong                  # The username to authenticate if required.</div><div class=\"line\">pg_password = kong                  # The password to authenticate if required.</div><div class=\"line\">pg_database = kong              # The database name to connect to.</div></pre></td></tr></table></figure>\n<p>执行<code>sudo /usr/local/bin/kong start -c /etc/kong/kong.conf</code>,提示<code>Kong started</code>则代表启动成功</p>\n<p><code>curl -i http://localhost:8001/</code>,测试kong是否启动。也可以访问<code>http://host:8000/</code>,来确定kong是否起来。因为此时我们尚未配置任何服务、路由，访问会返回404，如下：<br><img src=\"/photo/img/kong/kong-404.png\" alt=\"image\"></p>\n<h1 id=\"4-配置dashboard\"><a href=\"#4-配置dashboard\" class=\"headerlink\" title=\"4.配置dashboard\"></a>4.配置dashboard</h1><p>前置操作：需要安装nodejs<br><code>sudo yum install nodejs</code></p>\n<p>kong提供一套api，用于动态管服务、路由、插件等。当然有开源的dashboard，这样我们操作起来更方便。<br>开源项目地址<code>https://github.com/PGBI/kong-dashboard</code></p>\n<p>安装命令<code>npm install -g kong-dashboard</code></p>\n<p>启动命令：<code>nohup kong-dashboard start --kong-url http://localhost:8001 /dev/null 2&gt;&amp;1 &amp;</code></p>\n<p>为了安全起见，可以吧启动kong的账户密码放在work的环境变量里。<br>修改work的环境变量 vi ~.bash_profile，添加password参数。<br>kong-dashboard start \\<br>  –kong-url <a href=\"http://kong:8001\" target=\"_blank\" rel=\"noopener\">http://kong:8001</a> \\<br>  –basic-auth work=$password</p>\n<h1 id=\"5-日志目录以及启动相关\"><a href=\"#5-日志目录以及启动相关\" class=\"headerlink\" title=\"5.日志目录以及启动相关\"></a>5.日志目录以及启动相关</h1><p>查看日志文件<code>tail -f /usr/local/kong/logs/error.log</code></p>\n<p>kong配置文件默认地址为 /ect/kong/kong.conf<br>想要删除postgreSql，需要先断开所有连接<code>sudo ps aux | grep scidb | xargs sudo kill -9</code></p>\n<p>启动命令<code>sudo /usr/local/bin/kong start -c /etc/kong/kong.conf</code></p>\n<h1 id=\"6-遇到问题\"><a href=\"#6-遇到问题\" class=\"headerlink\" title=\"6.遇到问题\"></a>6.遇到问题</h1><p>沙盒项目部署的时候，我把项目上传到了 /home/work/kong/目录下，并将其软连到了/usr/local/share/lua/目录下。、</p>\n<p>再启动kong时，报错:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\">2018/12/06 15:26:01 [error] 7684#0: init_worker_by_lua error: /usr/local/share/lua/5.1/kong/init.lua:244: module &apos;resty.worker.events&apos; not found:Failed loading module resty.worker.events in LuaRocks rock lua-resty-worker-events 0.3.3-1</div><div class=\"line\">\tno field package.preload[&apos;resty.worker.events&apos;]</div><div class=\"line\">\tno file &apos;./resty/worker/events.lua&apos;</div><div class=\"line\">\tno file &apos;./resty/worker/events/init.lua&apos;</div><div class=\"line\">\tno file &apos;/usr/local/openresty/site/lualib/resty/worker/events.ljbc&apos;</div><div class=\"line\">\tno file &apos;/usr/local/openresty/site/lualib/resty/worker/events/init.ljbc&apos;</div><div class=\"line\">\tno file &apos;/usr/local/openresty/lualib/resty/worker/events.ljbc&apos;</div><div class=\"line\">\tno file &apos;/usr/local/openresty/lualib/resty/worker/events/init.ljbc&apos;</div><div class=\"line\">\tno file &apos;/usr/local/openresty/site/lualib/resty/worker/events.lua&apos;</div><div class=\"line\">\tno file &apos;/usr/local/openresty/site/lualib/resty/worker/events/init.lua&apos;</div><div class=\"line\">\tno file &apos;/usr/local/openresty/lualib/resty/worker/events.lua&apos;</div><div class=\"line\">\tno file &apos;/usr/local/openresty/lualib/resty/worker/events/init.lua&apos;</div><div class=\"line\">\tno file &apos;/usr/local/openresty/luajit/share/luajit-2.1.0-beta3/resty/worker/events.lua&apos;</div><div class=\"line\">\tno file &apos;/usr/local/share/lua/5.1/resty/worker/events.lua&apos;</div><div class=\"line\">\tno file &apos;/usr/local/share/lua/5.1/resty/worker/events/init.lua&apos;</div><div class=\"line\">\tno file &apos;/usr/local/openresty/luajit/share/lua/5.1/resty/worker/events.lua&apos;</div><div class=\"line\">\tno file &apos;/usr/local/openresty/luajit/share/lua/5.1/resty/worker/events/init.lua&apos;</div><div class=\"line\">\tno file &apos;/root/.luarocks/share/lua/5.1/resty/worker/events.lua&apos;</div><div class=\"line\">\tno file &apos;/root/.luarocks/share/lua/5.1/resty/worker/events/init.lua&apos;</div><div class=\"line\">\tno file &apos;/usr/local/openresty/site/lualib/resty/worker/events.so&apos;</div><div class=\"line\">\tno file &apos;/usr/local/openresty/lualib/resty/worker/events.so&apos;</div><div class=\"line\">\tno file &apos;./resty/worker/events.so&apos;</div><div class=\"line\">\tno file &apos;/usr/local/lib/lua/5.1/resty/worker/events.so&apos;</div><div class=\"line\">\tno file &apos;/usr/local/openresty/luajit/lib/lua/5.1/resty/worker/events.so&apos;</div><div class=\"line\">\tno file &apos;/usr/local/lib/lua/5.1/loadall.so&apos;</div><div class=\"line\">\tno file &apos;/root/.luarocks/lib/lua/5.1/resty/worker/events.so&apos;</div><div class=\"line\">\tno file &apos;/usr/local/openresty/site/lualib/resty.so&apos;</div><div class=\"line\">\tno file &apos;/usr/local/openresty/lualib/resty.so&apos;</div><div class=\"line\">\tno file &apos;./resty.so&apos;</div><div class=\"line\">\tno file &apos;/usr/local/lib/lua/5.1/resty.so&apos;</div><div class=\"line\">\tno file &apos;/usr/local/openresty/luajit/lib/lua/5.1/resty.so&apos;</div><div class=\"line\">\tno file &apos;/usr/local/lib/lua/5.1/loadall.so&apos;</div><div class=\"line\">\tno file &apos;/root/.luarocks/lib/lua/5.1/resty.so&apos;</div></pre></td></tr></table></figure>\n<p>最终我把项目上传到了/usr/local/share/releas/目录下，并将其软连到了/usr/local/share/lua/下，启动并没有出现改问题.</p>\n<p>线索：<br><code>https://github.com/Kong/kong/issues/2838</code></p>\n","site":{"data":{}},"excerpt":"","more":"<p>当前系统，环境centos7<br>\b起kong服务需要做：</p>\n<ul>\n<li>安装<ul>\n<li>kong</li>\n<li>pgsql</li>\n<li>dashboard(可选，用来通过api来管理空)</li>\n</ul>\n</li>\n<li>配置<ul>\n<li>kong.conf（配置数据库等）、配置路由。</li>\n<li>pgsql配置（新建数据库）</li>\n<li>配置kong路由</li>\n</ul>\n</li>\n<li>注意事项<ul>\n<li>尽量安装高版本，防止和pgsql不兼容。</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"1-安装kong\"><a href=\"#1-安装kong\" class=\"headerlink\" title=\"1.安装kong\"></a>1.安装kong</h1><ul>\n<li>需要安装kong</li>\n<li>安装pgsql</li>\n</ul>\n<p>官方文档提供的快速安装地址<code>https://docs.konghq.com/install/centos/?_ga=2.182378343.1594956911.1543481061-735966922.1539239867</code></p>\n<p>step1:<br><code>baseurl=https://kong.bintray.com/kong-community-edition-rpm/centos/7</code> 各个版本的地址，下载要安装的版本。<br>wget <code>https://kong.bintray.com/kong-community-edition-rpm/centos/7/kong-community-edition-0.14.1.el7.noarch.rpm</code><br>srep2:<br>执行下边命令:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo yum install epel-release</div><div class=\"line\">sudo yum install kong-community-edition-0.14.1.*.noarch.rpm --nogpgcheck</div></pre></td></tr></table></figure></p>\n<p>安装完成，这个时候是起不来额，因为没有安装pgsql。</p>\n<h1 id=\"2-安装postgresql10\"><a href=\"#2-安装postgresql10\" class=\"headerlink\" title=\"2.安装postgresql10\"></a>2.安装postgresql10</h1><p>尽量安装高版本，防止和pgsql不兼容,为了避免采坑，选择<code>kong-community-edition-0.14.1.el7.noarch.rpm</code>版本，当然也在测试机测试没有问题。<br>官方地址<code>https://www.postgresql.org/download/linux/redhat/</code> 可以选择对需安装的对应的版本，会自动生成安装命令，我选择的是10.6</p>\n<p>postgresql10安装与启动<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum install https://download.postgresql.org/pub/repos/yum/10/redhat/rhel-7-x86_64/pgdg-centos10-10-2.noarch.rpm    </div><div class=\"line\">yum install postgresql10    </div><div class=\"line\">yum install postgresql10-server</div><div class=\"line\">/usr/pgsql-10/bin/postgresql-10-setup initdb  </div><div class=\"line\">systemctl enable postgresql-10  </div><div class=\"line\">systemctl start postgresql-10</div></pre></td></tr></table></figure></p>\n<p>安装完成后，还需要做：</p>\n<ol>\n<li>配置postgreps用户。</li>\n<li>新增和数据库。</li>\n<li>配置远程连接。</li>\n</ol>\n<p>添加用户以及新增数据：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo -s  //取得root权限</div><div class=\"line\">su - postgres </div><div class=\"line\">psql -U postgres //连接本地数据</div><div class=\"line\"></div><div class=\"line\">postgres=# CREATE USER kong WITH LOGIN PASSWORD &apos;kong&apos;;  //创建用户</div><div class=\"line\">postgres-# CREATE ROLE //返回CREATE ROLE，表示创建用户成功</div><div class=\"line\"></div><div class=\"line\">postgres=# CREATE DATABASE kong; //创建数据库</div><div class=\"line\">CREATE DATABASE //返回CREATE DATABASE，表示创建数据库成功.</div></pre></td></tr></table></figure></p>\n<p>然后初始化数据库:<code>sudo /usr/local/bin/kong migrations up</code></p>\n<p>修改pgsql,配置远程连接：<br>执行<code>vim /var/lib/pgsql/10/data/pg_hba.conf</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">//修改 127.0.0.1/32 为trust</div><div class=\"line\">host    all             all             127.0.0.1/32            trust</div><div class=\"line\">//添加下边这条记录，用于ssl连接</div><div class=\"line\">host    all             all             0.0.0.0/0               md5</div></pre></td></tr></table></figure></p>\n<p><img src=\"/photo/img/kong/pg_hba.conf.png\" alt=\"image\"></p>\n<p>执行<code>vim /var/lib/pgsql/10/data/postgresql.conf</code><br>添加一下信息:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">listen_addresses = &apos;*&apos; //允许所有的ip访问postgres</div></pre></td></tr></table></figure></p>\n<h1 id=\"3-配置kong-conf\"><a href=\"#3-配置kong-conf\" class=\"headerlink\" title=\"3.配置kong.conf\"></a>3.配置kong.conf</h1><p>执行 <code>vi /etc/kong/kong.conf</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">pg_host = 127.0.0.1             # The PostgreSQL host to connect to.</div><div class=\"line\">pg_port = 5432                  # The port to connect to.</div><div class=\"line\">pg_user = kong                  # The username to authenticate if required.</div><div class=\"line\">pg_password = kong                  # The password to authenticate if required.</div><div class=\"line\">pg_database = kong              # The database name to connect to.</div></pre></td></tr></table></figure>\n<p>执行<code>sudo /usr/local/bin/kong start -c /etc/kong/kong.conf</code>,提示<code>Kong started</code>则代表启动成功</p>\n<p><code>curl -i http://localhost:8001/</code>,测试kong是否启动。也可以访问<code>http://host:8000/</code>,来确定kong是否起来。因为此时我们尚未配置任何服务、路由，访问会返回404，如下：<br><img src=\"/photo/img/kong/kong-404.png\" alt=\"image\"></p>\n<h1 id=\"4-配置dashboard\"><a href=\"#4-配置dashboard\" class=\"headerlink\" title=\"4.配置dashboard\"></a>4.配置dashboard</h1><p>前置操作：需要安装nodejs<br><code>sudo yum install nodejs</code></p>\n<p>kong提供一套api，用于动态管服务、路由、插件等。当然有开源的dashboard，这样我们操作起来更方便。<br>开源项目地址<code>https://github.com/PGBI/kong-dashboard</code></p>\n<p>安装命令<code>npm install -g kong-dashboard</code></p>\n<p>启动命令：<code>nohup kong-dashboard start --kong-url http://localhost:8001 /dev/null 2&gt;&amp;1 &amp;</code></p>\n<p>为了安全起见，可以吧启动kong的账户密码放在work的环境变量里。<br>修改work的环境变量 vi ~.bash_profile，添加password参数。<br>kong-dashboard start \\<br>  –kong-url <a href=\"http://kong:8001\" target=\"_blank\" rel=\"noopener\">http://kong:8001</a> \\<br>  –basic-auth work=$password</p>\n<h1 id=\"5-日志目录以及启动相关\"><a href=\"#5-日志目录以及启动相关\" class=\"headerlink\" title=\"5.日志目录以及启动相关\"></a>5.日志目录以及启动相关</h1><p>查看日志文件<code>tail -f /usr/local/kong/logs/error.log</code></p>\n<p>kong配置文件默认地址为 /ect/kong/kong.conf<br>想要删除postgreSql，需要先断开所有连接<code>sudo ps aux | grep scidb | xargs sudo kill -9</code></p>\n<p>启动命令<code>sudo /usr/local/bin/kong start -c /etc/kong/kong.conf</code></p>\n<h1 id=\"6-遇到问题\"><a href=\"#6-遇到问题\" class=\"headerlink\" title=\"6.遇到问题\"></a>6.遇到问题</h1><p>沙盒项目部署的时候，我把项目上传到了 /home/work/kong/目录下，并将其软连到了/usr/local/share/lua/目录下。、</p>\n<p>再启动kong时，报错:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\">2018/12/06 15:26:01 [error] 7684#0: init_worker_by_lua error: /usr/local/share/lua/5.1/kong/init.lua:244: module &apos;resty.worker.events&apos; not found:Failed loading module resty.worker.events in LuaRocks rock lua-resty-worker-events 0.3.3-1</div><div class=\"line\">\tno field package.preload[&apos;resty.worker.events&apos;]</div><div class=\"line\">\tno file &apos;./resty/worker/events.lua&apos;</div><div class=\"line\">\tno file &apos;./resty/worker/events/init.lua&apos;</div><div class=\"line\">\tno file &apos;/usr/local/openresty/site/lualib/resty/worker/events.ljbc&apos;</div><div class=\"line\">\tno file &apos;/usr/local/openresty/site/lualib/resty/worker/events/init.ljbc&apos;</div><div class=\"line\">\tno file &apos;/usr/local/openresty/lualib/resty/worker/events.ljbc&apos;</div><div class=\"line\">\tno file &apos;/usr/local/openresty/lualib/resty/worker/events/init.ljbc&apos;</div><div class=\"line\">\tno file &apos;/usr/local/openresty/site/lualib/resty/worker/events.lua&apos;</div><div class=\"line\">\tno file &apos;/usr/local/openresty/site/lualib/resty/worker/events/init.lua&apos;</div><div class=\"line\">\tno file &apos;/usr/local/openresty/lualib/resty/worker/events.lua&apos;</div><div class=\"line\">\tno file &apos;/usr/local/openresty/lualib/resty/worker/events/init.lua&apos;</div><div class=\"line\">\tno file &apos;/usr/local/openresty/luajit/share/luajit-2.1.0-beta3/resty/worker/events.lua&apos;</div><div class=\"line\">\tno file &apos;/usr/local/share/lua/5.1/resty/worker/events.lua&apos;</div><div class=\"line\">\tno file &apos;/usr/local/share/lua/5.1/resty/worker/events/init.lua&apos;</div><div class=\"line\">\tno file &apos;/usr/local/openresty/luajit/share/lua/5.1/resty/worker/events.lua&apos;</div><div class=\"line\">\tno file &apos;/usr/local/openresty/luajit/share/lua/5.1/resty/worker/events/init.lua&apos;</div><div class=\"line\">\tno file &apos;/root/.luarocks/share/lua/5.1/resty/worker/events.lua&apos;</div><div class=\"line\">\tno file &apos;/root/.luarocks/share/lua/5.1/resty/worker/events/init.lua&apos;</div><div class=\"line\">\tno file &apos;/usr/local/openresty/site/lualib/resty/worker/events.so&apos;</div><div class=\"line\">\tno file &apos;/usr/local/openresty/lualib/resty/worker/events.so&apos;</div><div class=\"line\">\tno file &apos;./resty/worker/events.so&apos;</div><div class=\"line\">\tno file &apos;/usr/local/lib/lua/5.1/resty/worker/events.so&apos;</div><div class=\"line\">\tno file &apos;/usr/local/openresty/luajit/lib/lua/5.1/resty/worker/events.so&apos;</div><div class=\"line\">\tno file &apos;/usr/local/lib/lua/5.1/loadall.so&apos;</div><div class=\"line\">\tno file &apos;/root/.luarocks/lib/lua/5.1/resty/worker/events.so&apos;</div><div class=\"line\">\tno file &apos;/usr/local/openresty/site/lualib/resty.so&apos;</div><div class=\"line\">\tno file &apos;/usr/local/openresty/lualib/resty.so&apos;</div><div class=\"line\">\tno file &apos;./resty.so&apos;</div><div class=\"line\">\tno file &apos;/usr/local/lib/lua/5.1/resty.so&apos;</div><div class=\"line\">\tno file &apos;/usr/local/openresty/luajit/lib/lua/5.1/resty.so&apos;</div><div class=\"line\">\tno file &apos;/usr/local/lib/lua/5.1/loadall.so&apos;</div><div class=\"line\">\tno file &apos;/root/.luarocks/lib/lua/5.1/resty.so&apos;</div></pre></td></tr></table></figure>\n<p>最终我把项目上传到了/usr/local/share/releas/目录下，并将其软连到了/usr/local/share/lua/下，启动并没有出现改问题.</p>\n<p>线索：<br><code>https://github.com/Kong/kong/issues/2838</code></p>\n"},{"title":"php curl","date":"2015-07-18T12:28:10.000Z","_content":"\n\n### 参数1\n\ncurl_setopt \nCURLOPT_RETURNTRANSFER 表示是否直接输出到控制台\n eg:\n \n```php\n$curl = curl_init();\ncurl_setopt($curl, CURLOPT_URL, 'http://baidu.com');\ncurl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);\ncurl_setopt($curl, CURLOPT_HEADER, 0);\n// curl_setopt($curl, CURLOPT_POST, 1);\n$ret = curl_exec($curl);\n// var_dump($ret);\n```\n\n输出结果为:\n\n![image](/photo/img/php-curl/DingTalk20180718203726.png)\n\n打开参数\n\n```\n<?php\n$curl = curl_init();\ncurl_setopt($curl, CURLOPT_URL, 'http://baidu.com');\ncurl_setopt($curl, CURLOPT_RETURNTRANSFER, 0);\ncurl_setopt($curl, CURLOPT_HEADER, 0);\n// curl_setopt($curl, CURLOPT_POST, 1);\n$ret = curl_exec($curl);\n// var_dump($ret);\n```\n\n输出结果\n\n![image](/photo/img/php-curl/DingTalk20180718204055.png)\n\n\n### 参数2\n\nCURLOPT_HEADER\nCURLOPT_HEADER 表示是否输出头信息\n\n```\n<?php\n$curl = curl_init();\ncurl_setopt($curl, CURLOPT_URL, 'http://baidu.com');\ncurl_setopt($curl, CURLOPT_RETURNTRANSFER, 0);\ncurl_setopt($curl, CURLOPT_HEADER, 1);\n// curl_setopt($curl, CURLOPT_POST, 1);\n$ret = curl_exec($curl);\n// var_dump($ret);\n```\n返回结果\n![image](/photo/img/php-curl/DingTalk20180718204343.png)\n\n```\n<?php\n$curl = curl_init();\ncurl_setopt($curl, CURLOPT_URL, 'http://baidu.com');\ncurl_setopt($curl, CURLOPT_RETURNTRANSFER, 0);\ncurl_setopt($curl, CURLOPT_HEADER, 0);\n// curl_setopt($curl, CURLOPT_POST, 1);\n$ret = curl_exec($curl);\n// var_dump($ret);\n```\n返回结果\n![image](/photo/img/php-curl/DingTalk20180718204411.png)\n\n\n## get 与 post\n\n`get`\n```\n//初始化\n$curl = curl_init();\n//设置url\ncurl_setopt($curl, CURLOPT_URL, 'http://baidu.com');\ncurl_setopt($curl, CURLOPT_RETURNTRANSFER, 0);\ncurl_setopt($curl, CURLOPT_HEADER, 0);\n$ret = curl_exec($curl);\n//关闭\ncurl_close($curl);\n```\n\n`post`\n\n```\n//初始化\n$curl = curl_init();\n//设置url\ncurl_setopt($curl, CURLOPT_URL, 'http://baidu.com');\ncurl_setopt($curl, CURLOPT_RETURNTRANSFER, 0);\ncurl_setopt($curl, CURLOPT_HEADER, 0);\ncurl_setopt($curl, CURLOPT_POST, 1);\n$ret = curl_exec($curl);\n//关闭\ncurl_close($curl);\n```","source":"_posts/php-curl.md","raw":"---\ntitle: php curl\ndate: 2015-07-18 20:28:10\ntags: curl\n---\n\n\n### 参数1\n\ncurl_setopt \nCURLOPT_RETURNTRANSFER 表示是否直接输出到控制台\n eg:\n \n```php\n$curl = curl_init();\ncurl_setopt($curl, CURLOPT_URL, 'http://baidu.com');\ncurl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);\ncurl_setopt($curl, CURLOPT_HEADER, 0);\n// curl_setopt($curl, CURLOPT_POST, 1);\n$ret = curl_exec($curl);\n// var_dump($ret);\n```\n\n输出结果为:\n\n![image](/photo/img/php-curl/DingTalk20180718203726.png)\n\n打开参数\n\n```\n<?php\n$curl = curl_init();\ncurl_setopt($curl, CURLOPT_URL, 'http://baidu.com');\ncurl_setopt($curl, CURLOPT_RETURNTRANSFER, 0);\ncurl_setopt($curl, CURLOPT_HEADER, 0);\n// curl_setopt($curl, CURLOPT_POST, 1);\n$ret = curl_exec($curl);\n// var_dump($ret);\n```\n\n输出结果\n\n![image](/photo/img/php-curl/DingTalk20180718204055.png)\n\n\n### 参数2\n\nCURLOPT_HEADER\nCURLOPT_HEADER 表示是否输出头信息\n\n```\n<?php\n$curl = curl_init();\ncurl_setopt($curl, CURLOPT_URL, 'http://baidu.com');\ncurl_setopt($curl, CURLOPT_RETURNTRANSFER, 0);\ncurl_setopt($curl, CURLOPT_HEADER, 1);\n// curl_setopt($curl, CURLOPT_POST, 1);\n$ret = curl_exec($curl);\n// var_dump($ret);\n```\n返回结果\n![image](/photo/img/php-curl/DingTalk20180718204343.png)\n\n```\n<?php\n$curl = curl_init();\ncurl_setopt($curl, CURLOPT_URL, 'http://baidu.com');\ncurl_setopt($curl, CURLOPT_RETURNTRANSFER, 0);\ncurl_setopt($curl, CURLOPT_HEADER, 0);\n// curl_setopt($curl, CURLOPT_POST, 1);\n$ret = curl_exec($curl);\n// var_dump($ret);\n```\n返回结果\n![image](/photo/img/php-curl/DingTalk20180718204411.png)\n\n\n## get 与 post\n\n`get`\n```\n//初始化\n$curl = curl_init();\n//设置url\ncurl_setopt($curl, CURLOPT_URL, 'http://baidu.com');\ncurl_setopt($curl, CURLOPT_RETURNTRANSFER, 0);\ncurl_setopt($curl, CURLOPT_HEADER, 0);\n$ret = curl_exec($curl);\n//关闭\ncurl_close($curl);\n```\n\n`post`\n\n```\n//初始化\n$curl = curl_init();\n//设置url\ncurl_setopt($curl, CURLOPT_URL, 'http://baidu.com');\ncurl_setopt($curl, CURLOPT_RETURNTRANSFER, 0);\ncurl_setopt($curl, CURLOPT_HEADER, 0);\ncurl_setopt($curl, CURLOPT_POST, 1);\n$ret = curl_exec($curl);\n//关闭\ncurl_close($curl);\n```","slug":"php-curl","published":1,"updated":"2018-07-18T12:47:59.013Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqavhgdc000mzqjfc31p1b6s","content":"<h3 id=\"参数1\"><a href=\"#参数1\" class=\"headerlink\" title=\"参数1\"></a>参数1</h3><p>curl_setopt<br>CURLOPT_RETURNTRANSFER 表示是否直接输出到控制台<br> eg:</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">$curl = curl_init();</div><div class=\"line\">curl_setopt($curl, CURLOPT_URL, <span class=\"string\">'http://baidu.com'</span>);</div><div class=\"line\">curl_setopt($curl, CURLOPT_RETURNTRANSFER, <span class=\"number\">1</span>);</div><div class=\"line\">curl_setopt($curl, CURLOPT_HEADER, <span class=\"number\">0</span>);</div><div class=\"line\"><span class=\"comment\">// curl_setopt($curl, CURLOPT_POST, 1);</span></div><div class=\"line\">$ret = curl_exec($curl);</div><div class=\"line\"><span class=\"comment\">// var_dump($ret);</span></div></pre></td></tr></table></figure>\n<p>输出结果为:</p>\n<p><img src=\"/photo/img/php-curl/DingTalk20180718203726.png\" alt=\"image\"></p>\n<p>打开参数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?php</div><div class=\"line\">$curl = curl_init();</div><div class=\"line\">curl_setopt($curl, CURLOPT_URL, &apos;http://baidu.com&apos;);</div><div class=\"line\">curl_setopt($curl, CURLOPT_RETURNTRANSFER, 0);</div><div class=\"line\">curl_setopt($curl, CURLOPT_HEADER, 0);</div><div class=\"line\">// curl_setopt($curl, CURLOPT_POST, 1);</div><div class=\"line\">$ret = curl_exec($curl);</div><div class=\"line\">// var_dump($ret);</div></pre></td></tr></table></figure>\n<p>输出结果</p>\n<p><img src=\"/photo/img/php-curl/DingTalk20180718204055.png\" alt=\"image\"></p>\n<h3 id=\"参数2\"><a href=\"#参数2\" class=\"headerlink\" title=\"参数2\"></a>参数2</h3><p>CURLOPT_HEADER<br>CURLOPT_HEADER 表示是否输出头信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?php</div><div class=\"line\">$curl = curl_init();</div><div class=\"line\">curl_setopt($curl, CURLOPT_URL, &apos;http://baidu.com&apos;);</div><div class=\"line\">curl_setopt($curl, CURLOPT_RETURNTRANSFER, 0);</div><div class=\"line\">curl_setopt($curl, CURLOPT_HEADER, 1);</div><div class=\"line\">// curl_setopt($curl, CURLOPT_POST, 1);</div><div class=\"line\">$ret = curl_exec($curl);</div><div class=\"line\">// var_dump($ret);</div></pre></td></tr></table></figure>\n<p>返回结果<br><img src=\"/photo/img/php-curl/DingTalk20180718204343.png\" alt=\"image\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?php</div><div class=\"line\">$curl = curl_init();</div><div class=\"line\">curl_setopt($curl, CURLOPT_URL, &apos;http://baidu.com&apos;);</div><div class=\"line\">curl_setopt($curl, CURLOPT_RETURNTRANSFER, 0);</div><div class=\"line\">curl_setopt($curl, CURLOPT_HEADER, 0);</div><div class=\"line\">// curl_setopt($curl, CURLOPT_POST, 1);</div><div class=\"line\">$ret = curl_exec($curl);</div><div class=\"line\">// var_dump($ret);</div></pre></td></tr></table></figure>\n<p>返回结果<br><img src=\"/photo/img/php-curl/DingTalk20180718204411.png\" alt=\"image\"></p>\n<h2 id=\"get-与-post\"><a href=\"#get-与-post\" class=\"headerlink\" title=\"get 与 post\"></a>get 与 post</h2><p><code>get</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">//初始化</div><div class=\"line\">$curl = curl_init();</div><div class=\"line\">//设置url</div><div class=\"line\">curl_setopt($curl, CURLOPT_URL, &apos;http://baidu.com&apos;);</div><div class=\"line\">curl_setopt($curl, CURLOPT_RETURNTRANSFER, 0);</div><div class=\"line\">curl_setopt($curl, CURLOPT_HEADER, 0);</div><div class=\"line\">$ret = curl_exec($curl);</div><div class=\"line\">//关闭</div><div class=\"line\">curl_close($curl);</div></pre></td></tr></table></figure></p>\n<p><code>post</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">//初始化</div><div class=\"line\">$curl = curl_init();</div><div class=\"line\">//设置url</div><div class=\"line\">curl_setopt($curl, CURLOPT_URL, &apos;http://baidu.com&apos;);</div><div class=\"line\">curl_setopt($curl, CURLOPT_RETURNTRANSFER, 0);</div><div class=\"line\">curl_setopt($curl, CURLOPT_HEADER, 0);</div><div class=\"line\">curl_setopt($curl, CURLOPT_POST, 1);</div><div class=\"line\">$ret = curl_exec($curl);</div><div class=\"line\">//关闭</div><div class=\"line\">curl_close($curl);</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"参数1\"><a href=\"#参数1\" class=\"headerlink\" title=\"参数1\"></a>参数1</h3><p>curl_setopt<br>CURLOPT_RETURNTRANSFER 表示是否直接输出到控制台<br> eg:</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">$curl = curl_init();</div><div class=\"line\">curl_setopt($curl, CURLOPT_URL, <span class=\"string\">'http://baidu.com'</span>);</div><div class=\"line\">curl_setopt($curl, CURLOPT_RETURNTRANSFER, <span class=\"number\">1</span>);</div><div class=\"line\">curl_setopt($curl, CURLOPT_HEADER, <span class=\"number\">0</span>);</div><div class=\"line\"><span class=\"comment\">// curl_setopt($curl, CURLOPT_POST, 1);</span></div><div class=\"line\">$ret = curl_exec($curl);</div><div class=\"line\"><span class=\"comment\">// var_dump($ret);</span></div></pre></td></tr></table></figure>\n<p>输出结果为:</p>\n<p><img src=\"/photo/img/php-curl/DingTalk20180718203726.png\" alt=\"image\"></p>\n<p>打开参数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?php</div><div class=\"line\">$curl = curl_init();</div><div class=\"line\">curl_setopt($curl, CURLOPT_URL, &apos;http://baidu.com&apos;);</div><div class=\"line\">curl_setopt($curl, CURLOPT_RETURNTRANSFER, 0);</div><div class=\"line\">curl_setopt($curl, CURLOPT_HEADER, 0);</div><div class=\"line\">// curl_setopt($curl, CURLOPT_POST, 1);</div><div class=\"line\">$ret = curl_exec($curl);</div><div class=\"line\">// var_dump($ret);</div></pre></td></tr></table></figure>\n<p>输出结果</p>\n<p><img src=\"/photo/img/php-curl/DingTalk20180718204055.png\" alt=\"image\"></p>\n<h3 id=\"参数2\"><a href=\"#参数2\" class=\"headerlink\" title=\"参数2\"></a>参数2</h3><p>CURLOPT_HEADER<br>CURLOPT_HEADER 表示是否输出头信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?php</div><div class=\"line\">$curl = curl_init();</div><div class=\"line\">curl_setopt($curl, CURLOPT_URL, &apos;http://baidu.com&apos;);</div><div class=\"line\">curl_setopt($curl, CURLOPT_RETURNTRANSFER, 0);</div><div class=\"line\">curl_setopt($curl, CURLOPT_HEADER, 1);</div><div class=\"line\">// curl_setopt($curl, CURLOPT_POST, 1);</div><div class=\"line\">$ret = curl_exec($curl);</div><div class=\"line\">// var_dump($ret);</div></pre></td></tr></table></figure>\n<p>返回结果<br><img src=\"/photo/img/php-curl/DingTalk20180718204343.png\" alt=\"image\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?php</div><div class=\"line\">$curl = curl_init();</div><div class=\"line\">curl_setopt($curl, CURLOPT_URL, &apos;http://baidu.com&apos;);</div><div class=\"line\">curl_setopt($curl, CURLOPT_RETURNTRANSFER, 0);</div><div class=\"line\">curl_setopt($curl, CURLOPT_HEADER, 0);</div><div class=\"line\">// curl_setopt($curl, CURLOPT_POST, 1);</div><div class=\"line\">$ret = curl_exec($curl);</div><div class=\"line\">// var_dump($ret);</div></pre></td></tr></table></figure>\n<p>返回结果<br><img src=\"/photo/img/php-curl/DingTalk20180718204411.png\" alt=\"image\"></p>\n<h2 id=\"get-与-post\"><a href=\"#get-与-post\" class=\"headerlink\" title=\"get 与 post\"></a>get 与 post</h2><p><code>get</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">//初始化</div><div class=\"line\">$curl = curl_init();</div><div class=\"line\">//设置url</div><div class=\"line\">curl_setopt($curl, CURLOPT_URL, &apos;http://baidu.com&apos;);</div><div class=\"line\">curl_setopt($curl, CURLOPT_RETURNTRANSFER, 0);</div><div class=\"line\">curl_setopt($curl, CURLOPT_HEADER, 0);</div><div class=\"line\">$ret = curl_exec($curl);</div><div class=\"line\">//关闭</div><div class=\"line\">curl_close($curl);</div></pre></td></tr></table></figure></p>\n<p><code>post</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">//初始化</div><div class=\"line\">$curl = curl_init();</div><div class=\"line\">//设置url</div><div class=\"line\">curl_setopt($curl, CURLOPT_URL, &apos;http://baidu.com&apos;);</div><div class=\"line\">curl_setopt($curl, CURLOPT_RETURNTRANSFER, 0);</div><div class=\"line\">curl_setopt($curl, CURLOPT_HEADER, 0);</div><div class=\"line\">curl_setopt($curl, CURLOPT_POST, 1);</div><div class=\"line\">$ret = curl_exec($curl);</div><div class=\"line\">//关闭</div><div class=\"line\">curl_close($curl);</div></pre></td></tr></table></figure>"},{"title":"php数据结构","date":"2018-08-19T12:30:34.000Z","_content":"`[TOC]`\n## 变量\n   \nphp是如何统一实现各种变量类型的? 这和php变量类型的实现是密不可分的。\n一个变量主要有三个要素:`变量名``变量类型``变量值`,他们在php变量类型实现中主要对应 zval zend_value 和\nzend的各种数据类型。\nphp中用$去声明一个变量,在声明的时候可以进行初始化,当然也可以不声明直接使用。一般来说,一个变量的定义包含\n两步:变量定义和变量初始化,在php中只定义不初始化是可以的。\n\n## 变量结构体\n\n```c\n// php zval结构\nstruct _zval_struct {\n\tzend_value        value; 指向具体的value\t\t\t/* value */\n\tunion {\n\t\tstruct {\n\t\t\tZEND_ENDIAN_LOHI_4(\n\t\t\t\tzend_uchar    type,\t\t\t/* active type */\n\t\t\t\tzend_uchar    type_flags,\n\t\t\t\tzend_uchar    const_flags,\n\t\t\t\tzend_uchar    reserved)\t    /* call info for EX(This) */\n\t\t} v;\n\t\tuint32_t type_info;\n\t} u1;\n\tunion {\n\t\tuint32_t     var_flags;\n\t\tuint32_t     next;                 /* hash collision chain */\n\t\tuint32_t     cache_slot;           /* literal cache slot */\n\t\tuint32_t     lineno;               /* line number (for ast nodes) */\n\t\tuint32_t     num_args;             /* arguments number for EX(This) */\n\t\tuint32_t     fe_pos;               /* foreach position */\n\t\tuint32_t     fe_iter_idx;          /* foreach iterator index */\n\t} u2;\n};\n```\n\n\n## 变量类型\n其中type 表示当前变量的类型,例如string array int等,以下为php中全部变量类型。\n其中type 是一个无符号类型的char,他的定义是这样的\n```c\ntypedef unsigned char zend_uchar;\n```\n\n\n```c\ntypedef union _zend_value {\n    \tzend_long         lval;\t\t\t\t/* long value */\n    \tdouble            dval;\t\t\t\t/* double value */\n    \tzend_refcounted  *counted;\n    \tzend_string      *str;\n    \tzend_array       *arr;\n    \tzend_object      *obj;\n    \tzend_resource    *res;\n    \tzend_reference   *ref;\n    \tzend_ast_ref     *ast;\n    \tzval             *zv;\n    \tvoid             *ptr;\n    \tzend_class_entry *ce;\n    \tzend_function    *func;\n    \tstruct {\n    \t\tuint32_t w1;\n    \t\tuint32_t w2;\n    \t} ww;\n    } zend_value;\n```\n\n- 在这些类型里不存在boolean类型,因为在php7中已经将boolean拆分为true和false.直接保存在type中,也就是说\nboolean没有_zend_value结构,直接通过type字段就可以确定boolean的值。\n- 从上边的结构体可以看出来 `zend_long`、`double` 类型不是指针类型,也就是说整形和浮点型正能进行深拷贝,\n并不能和其他说句类型一样进行 `引用计数`和`写时复制`。因为有`引用计数`和`写时复制`在变量赋值且不做修改时\n才能大量节省内存。\n\n\n以string类型为例,它在php中的结构类型应该是这样的:\n\n![image](/photo/img/php数据结构/php数据结构.png)\n\n_zend_string:\n```c\nstruct _zend_string {\n\tzend_refcounted_h gc;\n\tzend_ulong        h;                /* hash value */\n\tsize_t            len;\n\tchar              val[1];          /*字符串起始地址*/\n};\n```\n\n- 其中`gc` 字段表示这个结构体被引用的次数,垃圾回收的时候会用到。\n- h 字符串通过Times33计算出来的hashcode\n- len 字符串长度\n- val 字符串内容\n\n我们在这里都会有疑问,为什么存储字符串内容的时候没有使用char*类型,而用了一个数组类型来存储。zend_string\n在申请内存的时候会会申请malloc(sizeof(zend_string)+字符串长度),且val[0]存的是字符串最后一个字符安“\\0”\n\nzend_string结构在内存中如下所示:\n\n\n![image](/photo/img/php数据结构/zend_stirng内存中结构.png)\n\n当时也在char val[1]的地方疑惑了很久,再往上找了很多文章,其中\nNikita Popov(nikic，PHP 官方开发组成员，柏林科技大学的学生) 这样解释\n\n```\n如果你对 C 语言了解的不是很深入的话，可能会觉得 val 的定义有些奇怪：这个声明只有一个元素，但是显然我们想存储的字符串长度肯定大于一个字符的长度。这里其实使用的是结构体的一个『黑』\b方法：在声明数组时只定义一个元素，但是实际创建 zend_string 时再分配足够的内存来存储整个字符串。这样我们还是可以通过 val 访问完整的字符串。\n```\n\n\n## 参考:\n\n- [Internal value representation in PHP 7 - Part 2 ](https://nikic.github.io/2015/06/19/Internal-value-representation-in-PHP-7-part-2.html)\n- [[译]变量在 PHP7 内部的实现（二）](https://0x1.im/blog/php/Internal-value-representation-in-PHP-7-part-2.html)\n- [php内核分析——2.1 变量的内部实现](https://www.kancloud.cn/nickbai/php7/363268)\n","source":"_posts/php数据结构.md","raw":"---\ntitle: php数据结构\ndate: 2018-08-19 20:30:34\ntags:\n---\n`[TOC]`\n## 变量\n   \nphp是如何统一实现各种变量类型的? 这和php变量类型的实现是密不可分的。\n一个变量主要有三个要素:`变量名``变量类型``变量值`,他们在php变量类型实现中主要对应 zval zend_value 和\nzend的各种数据类型。\nphp中用$去声明一个变量,在声明的时候可以进行初始化,当然也可以不声明直接使用。一般来说,一个变量的定义包含\n两步:变量定义和变量初始化,在php中只定义不初始化是可以的。\n\n## 变量结构体\n\n```c\n// php zval结构\nstruct _zval_struct {\n\tzend_value        value; 指向具体的value\t\t\t/* value */\n\tunion {\n\t\tstruct {\n\t\t\tZEND_ENDIAN_LOHI_4(\n\t\t\t\tzend_uchar    type,\t\t\t/* active type */\n\t\t\t\tzend_uchar    type_flags,\n\t\t\t\tzend_uchar    const_flags,\n\t\t\t\tzend_uchar    reserved)\t    /* call info for EX(This) */\n\t\t} v;\n\t\tuint32_t type_info;\n\t} u1;\n\tunion {\n\t\tuint32_t     var_flags;\n\t\tuint32_t     next;                 /* hash collision chain */\n\t\tuint32_t     cache_slot;           /* literal cache slot */\n\t\tuint32_t     lineno;               /* line number (for ast nodes) */\n\t\tuint32_t     num_args;             /* arguments number for EX(This) */\n\t\tuint32_t     fe_pos;               /* foreach position */\n\t\tuint32_t     fe_iter_idx;          /* foreach iterator index */\n\t} u2;\n};\n```\n\n\n## 变量类型\n其中type 表示当前变量的类型,例如string array int等,以下为php中全部变量类型。\n其中type 是一个无符号类型的char,他的定义是这样的\n```c\ntypedef unsigned char zend_uchar;\n```\n\n\n```c\ntypedef union _zend_value {\n    \tzend_long         lval;\t\t\t\t/* long value */\n    \tdouble            dval;\t\t\t\t/* double value */\n    \tzend_refcounted  *counted;\n    \tzend_string      *str;\n    \tzend_array       *arr;\n    \tzend_object      *obj;\n    \tzend_resource    *res;\n    \tzend_reference   *ref;\n    \tzend_ast_ref     *ast;\n    \tzval             *zv;\n    \tvoid             *ptr;\n    \tzend_class_entry *ce;\n    \tzend_function    *func;\n    \tstruct {\n    \t\tuint32_t w1;\n    \t\tuint32_t w2;\n    \t} ww;\n    } zend_value;\n```\n\n- 在这些类型里不存在boolean类型,因为在php7中已经将boolean拆分为true和false.直接保存在type中,也就是说\nboolean没有_zend_value结构,直接通过type字段就可以确定boolean的值。\n- 从上边的结构体可以看出来 `zend_long`、`double` 类型不是指针类型,也就是说整形和浮点型正能进行深拷贝,\n并不能和其他说句类型一样进行 `引用计数`和`写时复制`。因为有`引用计数`和`写时复制`在变量赋值且不做修改时\n才能大量节省内存。\n\n\n以string类型为例,它在php中的结构类型应该是这样的:\n\n![image](/photo/img/php数据结构/php数据结构.png)\n\n_zend_string:\n```c\nstruct _zend_string {\n\tzend_refcounted_h gc;\n\tzend_ulong        h;                /* hash value */\n\tsize_t            len;\n\tchar              val[1];          /*字符串起始地址*/\n};\n```\n\n- 其中`gc` 字段表示这个结构体被引用的次数,垃圾回收的时候会用到。\n- h 字符串通过Times33计算出来的hashcode\n- len 字符串长度\n- val 字符串内容\n\n我们在这里都会有疑问,为什么存储字符串内容的时候没有使用char*类型,而用了一个数组类型来存储。zend_string\n在申请内存的时候会会申请malloc(sizeof(zend_string)+字符串长度),且val[0]存的是字符串最后一个字符安“\\0”\n\nzend_string结构在内存中如下所示:\n\n\n![image](/photo/img/php数据结构/zend_stirng内存中结构.png)\n\n当时也在char val[1]的地方疑惑了很久,再往上找了很多文章,其中\nNikita Popov(nikic，PHP 官方开发组成员，柏林科技大学的学生) 这样解释\n\n```\n如果你对 C 语言了解的不是很深入的话，可能会觉得 val 的定义有些奇怪：这个声明只有一个元素，但是显然我们想存储的字符串长度肯定大于一个字符的长度。这里其实使用的是结构体的一个『黑』\b方法：在声明数组时只定义一个元素，但是实际创建 zend_string 时再分配足够的内存来存储整个字符串。这样我们还是可以通过 val 访问完整的字符串。\n```\n\n\n## 参考:\n\n- [Internal value representation in PHP 7 - Part 2 ](https://nikic.github.io/2015/06/19/Internal-value-representation-in-PHP-7-part-2.html)\n- [[译]变量在 PHP7 内部的实现（二）](https://0x1.im/blog/php/Internal-value-representation-in-PHP-7-part-2.html)\n- [php内核分析——2.1 变量的内部实现](https://www.kancloud.cn/nickbai/php7/363268)\n","slug":"php数据结构","published":1,"updated":"2018-10-22T03:28:47.722Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqavhgde000nzqjf489bsncp","content":"<p><code>[TOC]</code></p>\n<h2 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h2><p>php是如何统一实现各种变量类型的? 这和php变量类型的实现是密不可分的。<br>一个变量主要有三个要素:<code>变量名``变量类型``变量值</code>,他们在php变量类型实现中主要对应 zval zend_value 和<br>zend的各种数据类型。<br>php中用$去声明一个变量,在声明的时候可以进行初始化,当然也可以不声明直接使用。一般来说,一个变量的定义包含<br>两步:变量定义和变量初始化,在php中只定义不初始化是可以的。</p>\n<h2 id=\"变量结构体\"><a href=\"#变量结构体\" class=\"headerlink\" title=\"变量结构体\"></a>变量结构体</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// php zval结构</span></div><div class=\"line\"><span class=\"keyword\">struct</span> _zval_struct &#123;</div><div class=\"line\">\tzend_value        value; 指向具体的value\t\t\t<span class=\"comment\">/* value */</span></div><div class=\"line\">\t<span class=\"keyword\">union</span> &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">\t\t\tZEND_ENDIAN_LOHI_4(</div><div class=\"line\">\t\t\t\tzend_uchar    type,\t\t\t<span class=\"comment\">/* active type */</span></div><div class=\"line\">\t\t\t\tzend_uchar    type_flags,</div><div class=\"line\">\t\t\t\tzend_uchar    const_flags,</div><div class=\"line\">\t\t\t\tzend_uchar    reserved)\t    <span class=\"comment\">/* call info for EX(This) */</span></div><div class=\"line\">\t\t&#125; v;</div><div class=\"line\">\t\t<span class=\"keyword\">uint32_t</span> type_info;</div><div class=\"line\">\t&#125; u1;</div><div class=\"line\">\t<span class=\"keyword\">union</span> &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">uint32_t</span>     var_flags;</div><div class=\"line\">\t\t<span class=\"keyword\">uint32_t</span>     next;                 <span class=\"comment\">/* hash collision chain */</span></div><div class=\"line\">\t\t<span class=\"keyword\">uint32_t</span>     cache_slot;           <span class=\"comment\">/* literal cache slot */</span></div><div class=\"line\">\t\t<span class=\"keyword\">uint32_t</span>     lineno;               <span class=\"comment\">/* line number (for ast nodes) */</span></div><div class=\"line\">\t\t<span class=\"keyword\">uint32_t</span>     num_args;             <span class=\"comment\">/* arguments number for EX(This) */</span></div><div class=\"line\">\t\t<span class=\"keyword\">uint32_t</span>     fe_pos;               <span class=\"comment\">/* foreach position */</span></div><div class=\"line\">\t\t<span class=\"keyword\">uint32_t</span>     fe_iter_idx;          <span class=\"comment\">/* foreach iterator index */</span></div><div class=\"line\">\t&#125; u2;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h2 id=\"变量类型\"><a href=\"#变量类型\" class=\"headerlink\" title=\"变量类型\"></a>变量类型</h2><p>其中type 表示当前变量的类型,例如string array int等,以下为php中全部变量类型。<br>其中type 是一个无符号类型的char,他的定义是这样的<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> zend_uchar;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">union</span> _zend_value &#123;</div><div class=\"line\">    \tzend_long         lval;\t\t\t\t<span class=\"comment\">/* long value */</span></div><div class=\"line\">    \t<span class=\"keyword\">double</span>            dval;\t\t\t\t<span class=\"comment\">/* double value */</span></div><div class=\"line\">    \tzend_refcounted  *counted;</div><div class=\"line\">    \tzend_string      *str;</div><div class=\"line\">    \tzend_array       *arr;</div><div class=\"line\">    \tzend_object      *obj;</div><div class=\"line\">    \tzend_resource    *res;</div><div class=\"line\">    \tzend_reference   *ref;</div><div class=\"line\">    \tzend_ast_ref     *ast;</div><div class=\"line\">    \tzval             *zv;</div><div class=\"line\">    \t<span class=\"keyword\">void</span>             *ptr;</div><div class=\"line\">    \tzend_class_entry *ce;</div><div class=\"line\">    \tzend_function    *func;</div><div class=\"line\">    \t<span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">    \t\t<span class=\"keyword\">uint32_t</span> w1;</div><div class=\"line\">    \t\t<span class=\"keyword\">uint32_t</span> w2;</div><div class=\"line\">    \t&#125; ww;</div><div class=\"line\">    &#125; zend_value;</div></pre></td></tr></table></figure>\n<ul>\n<li>在这些类型里不存在boolean类型,因为在php7中已经将boolean拆分为true和false.直接保存在type中,也就是说<br>boolean没有_zend_value结构,直接通过type字段就可以确定boolean的值。</li>\n<li>从上边的结构体可以看出来 <code>zend_long</code>、<code>double</code> 类型不是指针类型,也就是说整形和浮点型正能进行深拷贝,<br>并不能和其他说句类型一样进行 <code>引用计数</code>和<code>写时复制</code>。因为有<code>引用计数</code>和<code>写时复制</code>在变量赋值且不做修改时<br>才能大量节省内存。</li>\n</ul>\n<p>以string类型为例,它在php中的结构类型应该是这样的:</p>\n<p><img src=\"/photo/img/php数据结构/php数据结构.png\" alt=\"image\"></p>\n<p>_zend_string:<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">struct</span> _zend_string &#123;</div><div class=\"line\">\tzend_refcounted_h gc;</div><div class=\"line\">\tzend_ulong        h;                <span class=\"comment\">/* hash value */</span></div><div class=\"line\">\t<span class=\"keyword\">size_t</span>            len;</div><div class=\"line\">\t<span class=\"keyword\">char</span>              val[<span class=\"number\">1</span>];          <span class=\"comment\">/*字符串起始地址*/</span></div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<ul>\n<li>其中<code>gc</code> 字段表示这个结构体被引用的次数,垃圾回收的时候会用到。</li>\n<li>h 字符串通过Times33计算出来的hashcode</li>\n<li>len 字符串长度</li>\n<li>val 字符串内容</li>\n</ul>\n<p>我们在这里都会有疑问,为什么存储字符串内容的时候没有使用char*类型,而用了一个数组类型来存储。zend_string<br>在申请内存的时候会会申请malloc(sizeof(zend_string)+字符串长度),且val[0]存的是字符串最后一个字符安“\\0”</p>\n<p>zend_string结构在内存中如下所示:</p>\n<p><img src=\"/photo/img/php数据结构/zend_stirng内存中结构.png\" alt=\"image\"></p>\n<p>当时也在char val[1]的地方疑惑了很久,再往上找了很多文章,其中<br>Nikita Popov(nikic，PHP 官方开发组成员，柏林科技大学的学生) 这样解释</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">如果你对 C 语言了解的不是很深入的话，可能会觉得 val 的定义有些奇怪：这个声明只有一个元素，但是显然我们想存储的字符串长度肯定大于一个字符的长度。这里其实使用的是结构体的一个『黑』\b方法：在声明数组时只定义一个元素，但是实际创建 zend_string 时再分配足够的内存来存储整个字符串。这样我们还是可以通过 val 访问完整的字符串。</div></pre></td></tr></table></figure>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考:\"></a>参考:</h2><ul>\n<li><a href=\"https://nikic.github.io/2015/06/19/Internal-value-representation-in-PHP-7-part-2.html\" target=\"_blank\" rel=\"noopener\">Internal value representation in PHP 7 - Part 2 </a></li>\n<li><a href=\"https://0x1.im/blog/php/Internal-value-representation-in-PHP-7-part-2.html\" target=\"_blank\" rel=\"noopener\">[译]变量在 PHP7 内部的实现（二）</a></li>\n<li><a href=\"https://www.kancloud.cn/nickbai/php7/363268\" target=\"_blank\" rel=\"noopener\">php内核分析——2.1 变量的内部实现</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p><code>[TOC]</code></p>\n<h2 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h2><p>php是如何统一实现各种变量类型的? 这和php变量类型的实现是密不可分的。<br>一个变量主要有三个要素:<code>变量名``变量类型``变量值</code>,他们在php变量类型实现中主要对应 zval zend_value 和<br>zend的各种数据类型。<br>php中用$去声明一个变量,在声明的时候可以进行初始化,当然也可以不声明直接使用。一般来说,一个变量的定义包含<br>两步:变量定义和变量初始化,在php中只定义不初始化是可以的。</p>\n<h2 id=\"变量结构体\"><a href=\"#变量结构体\" class=\"headerlink\" title=\"变量结构体\"></a>变量结构体</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// php zval结构</span></div><div class=\"line\"><span class=\"keyword\">struct</span> _zval_struct &#123;</div><div class=\"line\">\tzend_value        value; 指向具体的value\t\t\t<span class=\"comment\">/* value */</span></div><div class=\"line\">\t<span class=\"keyword\">union</span> &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">\t\t\tZEND_ENDIAN_LOHI_4(</div><div class=\"line\">\t\t\t\tzend_uchar    type,\t\t\t<span class=\"comment\">/* active type */</span></div><div class=\"line\">\t\t\t\tzend_uchar    type_flags,</div><div class=\"line\">\t\t\t\tzend_uchar    const_flags,</div><div class=\"line\">\t\t\t\tzend_uchar    reserved)\t    <span class=\"comment\">/* call info for EX(This) */</span></div><div class=\"line\">\t\t&#125; v;</div><div class=\"line\">\t\t<span class=\"keyword\">uint32_t</span> type_info;</div><div class=\"line\">\t&#125; u1;</div><div class=\"line\">\t<span class=\"keyword\">union</span> &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">uint32_t</span>     var_flags;</div><div class=\"line\">\t\t<span class=\"keyword\">uint32_t</span>     next;                 <span class=\"comment\">/* hash collision chain */</span></div><div class=\"line\">\t\t<span class=\"keyword\">uint32_t</span>     cache_slot;           <span class=\"comment\">/* literal cache slot */</span></div><div class=\"line\">\t\t<span class=\"keyword\">uint32_t</span>     lineno;               <span class=\"comment\">/* line number (for ast nodes) */</span></div><div class=\"line\">\t\t<span class=\"keyword\">uint32_t</span>     num_args;             <span class=\"comment\">/* arguments number for EX(This) */</span></div><div class=\"line\">\t\t<span class=\"keyword\">uint32_t</span>     fe_pos;               <span class=\"comment\">/* foreach position */</span></div><div class=\"line\">\t\t<span class=\"keyword\">uint32_t</span>     fe_iter_idx;          <span class=\"comment\">/* foreach iterator index */</span></div><div class=\"line\">\t&#125; u2;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h2 id=\"变量类型\"><a href=\"#变量类型\" class=\"headerlink\" title=\"变量类型\"></a>变量类型</h2><p>其中type 表示当前变量的类型,例如string array int等,以下为php中全部变量类型。<br>其中type 是一个无符号类型的char,他的定义是这样的<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> zend_uchar;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">union</span> _zend_value &#123;</div><div class=\"line\">    \tzend_long         lval;\t\t\t\t<span class=\"comment\">/* long value */</span></div><div class=\"line\">    \t<span class=\"keyword\">double</span>            dval;\t\t\t\t<span class=\"comment\">/* double value */</span></div><div class=\"line\">    \tzend_refcounted  *counted;</div><div class=\"line\">    \tzend_string      *str;</div><div class=\"line\">    \tzend_array       *arr;</div><div class=\"line\">    \tzend_object      *obj;</div><div class=\"line\">    \tzend_resource    *res;</div><div class=\"line\">    \tzend_reference   *ref;</div><div class=\"line\">    \tzend_ast_ref     *ast;</div><div class=\"line\">    \tzval             *zv;</div><div class=\"line\">    \t<span class=\"keyword\">void</span>             *ptr;</div><div class=\"line\">    \tzend_class_entry *ce;</div><div class=\"line\">    \tzend_function    *func;</div><div class=\"line\">    \t<span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">    \t\t<span class=\"keyword\">uint32_t</span> w1;</div><div class=\"line\">    \t\t<span class=\"keyword\">uint32_t</span> w2;</div><div class=\"line\">    \t&#125; ww;</div><div class=\"line\">    &#125; zend_value;</div></pre></td></tr></table></figure>\n<ul>\n<li>在这些类型里不存在boolean类型,因为在php7中已经将boolean拆分为true和false.直接保存在type中,也就是说<br>boolean没有_zend_value结构,直接通过type字段就可以确定boolean的值。</li>\n<li>从上边的结构体可以看出来 <code>zend_long</code>、<code>double</code> 类型不是指针类型,也就是说整形和浮点型正能进行深拷贝,<br>并不能和其他说句类型一样进行 <code>引用计数</code>和<code>写时复制</code>。因为有<code>引用计数</code>和<code>写时复制</code>在变量赋值且不做修改时<br>才能大量节省内存。</li>\n</ul>\n<p>以string类型为例,它在php中的结构类型应该是这样的:</p>\n<p><img src=\"/photo/img/php数据结构/php数据结构.png\" alt=\"image\"></p>\n<p>_zend_string:<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">struct</span> _zend_string &#123;</div><div class=\"line\">\tzend_refcounted_h gc;</div><div class=\"line\">\tzend_ulong        h;                <span class=\"comment\">/* hash value */</span></div><div class=\"line\">\t<span class=\"keyword\">size_t</span>            len;</div><div class=\"line\">\t<span class=\"keyword\">char</span>              val[<span class=\"number\">1</span>];          <span class=\"comment\">/*字符串起始地址*/</span></div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<ul>\n<li>其中<code>gc</code> 字段表示这个结构体被引用的次数,垃圾回收的时候会用到。</li>\n<li>h 字符串通过Times33计算出来的hashcode</li>\n<li>len 字符串长度</li>\n<li>val 字符串内容</li>\n</ul>\n<p>我们在这里都会有疑问,为什么存储字符串内容的时候没有使用char*类型,而用了一个数组类型来存储。zend_string<br>在申请内存的时候会会申请malloc(sizeof(zend_string)+字符串长度),且val[0]存的是字符串最后一个字符安“\\0”</p>\n<p>zend_string结构在内存中如下所示:</p>\n<p><img src=\"/photo/img/php数据结构/zend_stirng内存中结构.png\" alt=\"image\"></p>\n<p>当时也在char val[1]的地方疑惑了很久,再往上找了很多文章,其中<br>Nikita Popov(nikic，PHP 官方开发组成员，柏林科技大学的学生) 这样解释</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">如果你对 C 语言了解的不是很深入的话，可能会觉得 val 的定义有些奇怪：这个声明只有一个元素，但是显然我们想存储的字符串长度肯定大于一个字符的长度。这里其实使用的是结构体的一个『黑』\b方法：在声明数组时只定义一个元素，但是实际创建 zend_string 时再分配足够的内存来存储整个字符串。这样我们还是可以通过 val 访问完整的字符串。</div></pre></td></tr></table></figure>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考:\"></a>参考:</h2><ul>\n<li><a href=\"https://nikic.github.io/2015/06/19/Internal-value-representation-in-PHP-7-part-2.html\" target=\"_blank\" rel=\"noopener\">Internal value representation in PHP 7 - Part 2 </a></li>\n<li><a href=\"https://0x1.im/blog/php/Internal-value-representation-in-PHP-7-part-2.html\" target=\"_blank\" rel=\"noopener\">[译]变量在 PHP7 内部的实现（二）</a></li>\n<li><a href=\"https://www.kancloud.cn/nickbai/php7/363268\" target=\"_blank\" rel=\"noopener\">php内核分析——2.1 变量的内部实现</a></li>\n</ul>\n"},{"title":"php垃圾回收","date":"2018-09-12T13:28:00.000Z","_content":"\nphp是如何实现内存管理的?内存管理无非包括内存分配、内存回收、以及内存使用优化。\n\n- 内存使用的优化\n- 垃圾回收机制\n- 底层内存分配\n\n\n## 内存使用的优化\n\n### 引用计数\n\nphp的引用中有个引用结构体\n\n```php\n```c\nstruct _zend_reference {\n    zend_refcondted_h gc;\n    zval              val;  指向原来的value.\n};\n```\n```\n其中`zend_refcondted_h` 便是gc便是当前变量被引用的次数,这个参数会在变量回收的时候用到。\n\n\nzend_refcondted_h :\n\n```c\ntypedef struct _zend_refcounted_h {\n\tuint32_t         refcount;\t\t\t/* reference counter 32-bit */\n\tunion {\n\t\tstruct {\n\t\t\tZEND_ENDIAN_LOHI_3(\n\t\t\t\tzend_uchar    type,\n\t\t\t\tzend_uchar    flags,    /* used for strings & objects */\n\t\t\t\tuint16_t      gc_info)  /* keeps GC root number (or 0) and color */\n\t\t} v;\n\t\tuint32_t type_info;\n\t} u;\n} zend_refcounted_h;\n```\n\n在实际中这个结构体到底是什么样的? 具体可以举例来看。\n\n```php\n$a = 'this is string'; // zend_array (refcount = 1)  只有$a引用了zend_array\n$b = &$a; //   zend_array (refcount = 2)  $a、$b引用了zend_array\n$c = $b; // zend_array (refcount = 3)  $a、$b、$c引用了zend_array\nunset($b); // zend_array (refcount = 2)  $a、$c引用了zend_array\n```\n\n> 并不是所有的变量类型都会使用引用计数, 例如 `整形`、`浮点型`、`布尔型`、`NUll`(在php中这是一个变量类型)等采用了深拷贝,\n即只要这几种变量赋值, 就会申请一款一块内存写入一个新的变量结构（注意这里不是引用结构）,当然这些类型不会公用value。\n\n\n\n### 写时复制\n\n当然只有引用计数是不够的, 因为变量会发生赋值的情况。所以在更改某一个变量时, 会对原来的变量进行拷贝并赋值。\n\n举个栗子:\n\n```\n$foo = time();\n$bar = &$b;\n$si = $a;\n\n$c = '123';\n```\n\n具体数据结构的引用计数情况如下图:\n\n\n\n![image](/photo/img/php内存管理/写时复制.png)\n\n## 内存回收\n\n### 自动gc\n在zend数据接口中有一个gc.refount,他是自动gc的关键。\n\n在自动gc机制中,如果zval不在指向value且当前value的gc.refount为0时,会直接释放value。这种情况多发生于函数返回时（销毁所有局部变量）、变量修改时、以及unset操作的时候。\n\n\n### 辣鸡回收\n\n除了自动gc,还有一种是自动gc无法处理的垃圾, 这种情况称为`循环引用`。顾名思义也就是自身内部变量引用了自身, 这种情况常出现与object和array。当我该变量zval被销毁是, 与其对应的value gc.refcount -1,\n但是因为有自身变量指向自身, 所以就陷入了一个循环:如果不销毁自身变量 value gc.refcount就无法自动gc, 只有自动gc才会销毁value。\n\n```php\n\n$a = [1];\n$a[] = &$a;\nunset($a);\n\n```\n\n![image](/photo/img/php内存管理/自身引用.png)\n\n`unset($a)`执行以后\n\n![image](/photo/img/php内存管理/释放.png)\n\n由于\b上述情况导致无法自动gc,所以需要引入另外一钟垃圾回收机制-垃圾回收器。\n现在会存在两种情况的数据需要回收：\n- 当value的gc.refcount =0 是需要回收。\n- 当value的gc.refcount 减少不等于0，但是存在循环引用时。\n\n### 回收机制\n\n当发生value gc.refcount减少时，垃圾回收机制会把可能是垃圾的value存起来， 当可能是辣鸡的value到达一定数量的时候启动垃圾鉴别程序，统一处理垃圾。当然这里的value类型只有object和array。\n\n垃圾兼备程序：\n其实垃圾鉴别程序很简单，递归遍历自身value，查看是否存在指向自身的即可。\n\ncode:\ngc 初始化\n```php\nZEND_API void gc_init(void)\n{\n\tif (GC_G(buf) == NULL && GC_G(gc_enabled)) {\n\t\t//初始化buf\b内存区域，大小为sizeof(gc_root_buffer) * //GC_ROOT_BUFFER_MAX_ENTRIES\n\t\tGC_G(buf) = (gc_root_buffer*) malloc(sizeof(gc_root_buffer) * GC_ROOT_BUFFER_MAX_ENTRIES);\n\t\t//设置_zend_gc_globals.last_unused为\b\bbug入口位置\n\t\tGC_G(last_unused) = &GC_G(buf)[GC_ROOT_BUFFER_MAX_ENTRIES];\n\t\t//初始化_zend_gc_globals的参数\n\t\tgc_reset();\n\t}\n}\n```\n垃圾回收及其依赖 `_zend_gc_globals`\n\n`_zend_gc_globals`\n```c\ntypedef struct _zend_gc_globals {\n\tzend_bool         gc_enabled;\n\tzend_bool         gc_active;\n\tzend_bool         gc_full;\n\n\tgc_root_buffer   *buf;\t\t\t\t/* preallocated arrays of buffers   */\n\tgc_root_buffer    roots;\t\t\t/* list of possible roots of cycles */\n\tgc_root_buffer   *unused;\t\t\t/* list of unused buffers           */\n\tgc_root_buffer   *first_unused;\t\t/* pointer to first unused buffer   */\n\tgc_root_buffer   *last_unused;\t\t/* pointer to last unused buffer    */\n\n\tgc_root_buffer    to_free;\t\t\t/* list to free                     */\n\tgc_root_buffer   *next_to_free;\n\n\tuint32_t gc_runs;\n\tuint32_t collected;\n\n#if GC_BENCH\n\tuint32_t root_buf_length;\n\tuint32_t root_buf_peak;\n\tuint32_t zval_possible_root;\n\tuint32_t zval_buffered;\n\tuint32_t zval_remove_from_buffer;\n\tuint32_t zval_marked_grey;\n#endif\n\n\tgc_additional_buffer *additional_buffer;\n\n} zend_gc_globals;\n```\n\n- `gc_enabled` 是否使使用gc\n- `gc_active`  是否在垃圾检查的过程中\n- `gc_full` buf缓冲区是否已满\n- `*buf` 与分配用于保存可能为垃圾的value\n- `roots` 指向buf最新加入的一个可能垃圾\n- `unused` 指向第未使用的buffer\n- `*first_unused` 指向第一个没用使用buffer\n- `*last_unused` 指向buffer的尾部\n- `to_free` 等待释放的buffer\n- `gc_runs`  统计gc运行的次数\n- `collected`  统计已经释放的垃圾数\n\n\nphp垃圾回收中几个重要的颜色写在zeng_gc的备注中。\n```C\n * BLACK  (GC_BLACK)   - In use or free.\n * GREY   (GC_GREY)    - Possible member of cycle.\n * WHITE  (GC_WHITE)   - Member of garbage cycle.\n * PURPLE (GC_PURPLE)  - Possible root of cycle.\n```\n- GC_WHITE 白色表示垃圾\n- GC_PURPLE 紫色表示已放入缓冲区\n- GC_GREY 灰色表示已经进行了一次refcount的减一操作\n- GC_BLACK 黑色是默认颜色，正常\n\n\ngc过程中主要处理功能的函数`zend_gc_collect_cycles`\n\n```c\nZEND_API void ZEND_FASTCALL gc_possible_root(zend_refcounted *ref)\n{\n\tgc_root_buffer *newRoot;\n\n\tif (UNEXPECTED(CG(unclean_shutdown)) || UNEXPECTED(GC_G(gc_active))) {\n\t\treturn;\n\t}\n\n\tZEND_ASSERT(GC_TYPE(ref) == IS_ARRAY || GC_TYPE(ref) == IS_OBJECT);\n\tZEND_ASSERT(EXPECTED(GC_REF_GET_COLOR(ref) == GC_BLACK));\n\tZEND_ASSERT(!GC_ADDRESS(GC_INFO(ref)));\n\n\tGC_BENCH_INC(zval_possible_root);\n\n\tnewRoot = GC_G(unused);\n\tif (newRoot) {\n\t\tGC_G(unused) = newRoot->prev;\n\t} else if (GC_G(first_unused) != GC_G(last_unused)) {\n\t\tnewRoot = GC_G(first_unused);\n\t\tGC_G(first_unused)++;\n\t} else {\n\t\t//垃圾处理，当缓冲区满时，程序调用gc_collect_cycles函数，执行垃圾回收操作。 其中最关键的几步就是\n\t\t//如果当前处于可以gc的状态\n\t\tif (!GC_G(gc_enabled)) {\n\t\t\treturn;\n\t\t}\n\t\tGC_REFCOUNT(ref)++;\n\t\t//垃圾回收\n\t\tgc_collect_cycles();\n\t\tGC_REFCOUNT(ref)--;\n\t\tif (UNEXPECTED(GC_REFCOUNT(ref)) == 0) {\n\t\t\tzval_dtor_func(ref);\n\t\t\treturn;\n\t\t}\n\t\tif (UNEXPECTED(GC_INFO(ref))) {\n\t\t\treturn;\n\t\t}\n\t\tnewRoot = GC_G(unused);\n\t\tif (!newRoot) {\n\t\t\treturn;\n\t\t}\n\t\tGC_G(unused) = newRoot->prev;\n\t}\n\n\tGC_TRACE_SET_COLOR(ref, GC_PURPLE);\n\tGC_INFO(ref) = (newRoot - GC_G(buf)) | GC_PURPLE;\n\tnewRoot->ref = ref;\n\n\tnewRoot->next = GC_G(roots).next;\n\tnewRoot->prev = &GC_G(roots);\n\tGC_G(roots).next->prev = newRoot;\n\tGC_G(roots).next = newRoot;\n\n\tGC_BENCH_INC(zval_buffered);\n\tGC_BENCH_INC(root_buf_length);\n\tGC_BENCH_PEAK(root_buf_peak, root_buf_length);\n}\n```\n\n\n\bdebug代码已删除\n1. \b深度优先对对象或者数据的每一个元素的`refcount--`并将其标记为灰色\n2. 深度遍历root的每个每个变量，如果此时变量的`refcount`为0，则代表着改变量为垃圾，将其标记为垃圾，如果不为0，则将其标记为黑色（正常）。\n3. 检查roots清除标记为白色的垃圾。\n\n//TODO 垃圾回收抽出来出来写。\n\n具体代码：\n```php\nZEND_API int zend_gc_collect_cycles(void)\n{\n\tint count = 0;\n\n\tif (GC_G(roots).next != &GC_G(roots)) {\n\t\tgc_root_buffer *current, *next, *orig_next_to_free;\n\t\tzend_refcounted *p;\n\t\tgc_root_buffer to_free;\n\t\tuint32_t gc_flags = 0;\n\t\tgc_additional_buffer *additional_buffer_snapshot;\n\n\n\t\tif (GC_G(gc_active)) {\n\t\t\treturn 0;\n\t\t}\n\n\t\tGC_TRACE(\"Collecting cycles\");\n\t\t//标识gc运行了多少次\n\t\tGC_G(gc_runs)++;\n\t\t//标识当前正在gc\n\t\tGC_G(gc_active) = 1;\n\n\t\tGC_TRACE(\"Marking roots\");\n\t\t//重点\n\t\tgc_mark_roots();\n\t\tGC_TRACE(\"Scanning roots\");\n\t\t//重点\n\t\tgc_scan_roots();\n\n\n\n\t\tGC_TRACE(\"Collecting roots\");\n\t\tadditional_buffer_snapshot = GC_G(additional_buffer);\n\t\tcount = gc_collect_roots(&gc_flags);\n\n\t\tGC_G(gc_active) = 0;\n\n\t\tif (GC_G(to_free).next == &GC_G(to_free)) {\n\t\t\t/* nothing to free */\n\t\t\tGC_TRACE(\"Nothing to free\");\n\t\t\treturn 0;\n\t\t}\n\n\t\t/* Copy global to_free list into local list */\n\t\tto_free.next = GC_G(to_free).next;\n\t\tto_free.prev = GC_G(to_free).prev;\n\t\tto_free.next->prev = &to_free;\n\t\tto_free.prev->next = &to_free;\n\n\t\t/* Free global list */\n\t\tGC_G(to_free).next = &GC_G(to_free);\n\t\tGC_G(to_free).prev = &GC_G(to_free);\n\n\t\torig_next_to_free = GC_G(next_to_free);\n\n\n\t\tif (gc_flags & GC_HAS_DESTRUCTORS) {\n\t\t\tGC_TRACE(\"Calling destructors\");\n\n\t\t\t/* Remember reference counters before calling destructors */\n\t\t\tcurrent = to_free.next;\n\t\t\twhile (current != &to_free) {\n\t\t\t\tcurrent->refcount = GC_REFCOUNT(current->ref);\n\t\t\t\tcurrent = current->next;\n\t\t\t}\n\n\t\t\t/* Call destructors */\n\t\t\tcurrent = to_free.next;\n\t\t\twhile (current != &to_free) {\n\t\t\t\tp = current->ref;\n\t\t\t\tGC_G(next_to_free) = current->next;\n\t\t\t\tif (GC_TYPE(p) == IS_OBJECT) {\n\t\t\t\t\tzend_object *obj = (zend_object*)p;\n\n\t\t\t\t\tif (!(GC_FLAGS(obj) & IS_OBJ_DESTRUCTOR_CALLED)) {\n\t\t\t\t\t\tGC_TRACE_REF(obj, \"calling destructor\");\n\t\t\t\t\t\tGC_FLAGS(obj) |= IS_OBJ_DESTRUCTOR_CALLED;\n\t\t\t\t\t\tif (obj->handlers->dtor_obj\n\t\t\t\t\t\t && (obj->handlers->dtor_obj != zend_objects_destroy_object\n\t\t\t\t\t\t  || obj->ce->destructor)) {\n\t\t\t\t\t\t\tGC_REFCOUNT(obj)++;\n\t\t\t\t\t\t\tobj->handlers->dtor_obj(obj);\n\t\t\t\t\t\t\tGC_REFCOUNT(obj)--;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tcurrent = GC_G(next_to_free);\n\t\t\t}\n\n\t\t\t/* Remove values captured in destructors */\n\t\t\tcurrent = to_free.next;\n\t\t\twhile (current != &to_free) {\n\t\t\t\tGC_G(next_to_free) = current->next;\n\t\t\t\tif (GC_REFCOUNT(current->ref) > current->refcount) {\n\t\t\t\t\tgc_remove_nested_data_from_buffer(current->ref, current);\n\t\t\t\t}\n\t\t\t\tcurrent = GC_G(next_to_free);\n\t\t\t}\n\t\t}\n\n\t\t/* Destroy zvals */\n\t\tGC_TRACE(\"Destroying zvals\");\n\t\tGC_G(gc_active) = 1;\n\t\tcurrent = to_free.next;\n\t\twhile (current != &to_free) {\n\t\t\tp = current->ref;\n\t\t\tGC_G(next_to_free) = current->next;\n\t\t\tGC_TRACE_REF(p, \"destroying\");\n\t\t\tif (GC_TYPE(p) == IS_OBJECT) {\n\t\t\t\tzend_object *obj = (zend_object*)p;\n\n\t\t\t\tEG(objects_store).object_buckets[obj->handle] = SET_OBJ_INVALID(obj);\n\t\t\t\tGC_TYPE(obj) = IS_NULL;\n\t\t\t\tif (!(GC_FLAGS(obj) & IS_OBJ_FREE_CALLED)) {\n\t\t\t\t\tGC_FLAGS(obj) |= IS_OBJ_FREE_CALLED;\n\t\t\t\t\tif (obj->handlers->free_obj) {\n\t\t\t\t\t\tGC_REFCOUNT(obj)++;\n\t\t\t\t\t\tobj->handlers->free_obj(obj);\n\t\t\t\t\t\tGC_REFCOUNT(obj)--;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tSET_OBJ_BUCKET_NUMBER(EG(objects_store).object_buckets[obj->handle], EG(objects_store).free_list_head);\n\t\t\t\tEG(objects_store).free_list_head = obj->handle;\n\t\t\t\tp = current->ref = (zend_refcounted*)(((char*)obj) - obj->handlers->offset);\n\t\t\t} else if (GC_TYPE(p) == IS_ARRAY) {\n\t\t\t\tzend_array *arr = (zend_array*)p;\n\n\t\t\t\tGC_TYPE(arr) = IS_NULL;\n\n\t\t\t\t/* GC may destroy arrays with rc>1. This is valid and safe. */\n\t\t\t\tHT_ALLOW_COW_VIOLATION(arr);\n\n\t\t\t\tzend_hash_destroy(arr);\n\t\t\t}\n\t\t\tcurrent = GC_G(next_to_free);\n\t\t}\n\n\t\t/* Free objects */\n\t\tcurrent = to_free.next;\n\t\twhile (current != &to_free) {\n\t\t\tnext = current->next;\n\t\t\tp = current->ref;\n\t\t\tif (EXPECTED(current >= GC_G(buf) && current < GC_G(buf) + GC_ROOT_BUFFER_MAX_ENTRIES)) {\n\t\t\t\tcurrent->prev = GC_G(unused);\n\t\t\t\tGC_G(unused) = current;\n\t\t\t}\n\t\t\tefree(p);\n\t\t\tcurrent = next;\n\t\t}\n\n\t\twhile (GC_G(additional_buffer) != additional_buffer_snapshot) {\n\t\t\tgc_additional_buffer *next = GC_G(additional_buffer)->next;\n\t\t\tefree(GC_G(additional_buffer));\n\t\t\tGC_G(additional_buffer) = next;\n\t\t}\n\n\t\tGC_TRACE(\"Collection finished\");\n\t\tGC_G(collected) += count;\n\t\tGC_G(next_to_free) = orig_next_to_free;\n\t\tGC_G(gc_active) = 0;\n\t}\n\n\treturn count;\n}\n```\n\n\n```c\nstatic void gc_mark_roots(void)\n{\n\tgc_root_buffer *current = GC_G(roots).next;\n\n\twhile (current != &GC_G(roots)) {\n\t\t//GC_PURPLE 标识在缓冲区\n\t\tif (GC_REF_GET_COLOR(current->ref) == GC_PURPLE) {\n\t\t\tgc_mark_grey(current->ref);\n\t\t}\n\t\tcurrent = current->next;\n\t}\n}\n```\n\n```c\nstatic void gc_mark_grey(zend_refcounted *ref)\n{\n    HashTable *ht;\n\tBucket *p, *end;\n\tzval *zv;\n\ntail_call:\n\tif (GC_REF_GET_COLOR(ref) != GC_GREY) {\n\t\tht = NULL;\n\t\tGC_BENCH_INC(zval_marked_grey);\n\t\tGC_REF_SET_COLOR(ref, GC_GREY);\n\n\t\tif (GC_TYPE(ref) == IS_OBJECT) {\n\t\t\tzend_object_get_gc_t get_gc;\n\t\t\tzend_object *obj = (zend_object*)ref;\n\n\t\t\tif (EXPECTED(!(GC_FLAGS(ref) & IS_OBJ_FREE_CALLED) &&\n\t\t                 (get_gc = obj->handlers->get_gc) != NULL)) {\n\t\t\t\tint n;\n\t\t\t\tzval *zv, *end;\n\t\t\t\tzval tmp;\n\n\t\t\t\tZVAL_OBJ(&tmp, obj);\n\t\t\t\tht = get_gc(&tmp, &zv, &n);\n\t\t\t\tend = zv + n;\n\t\t\t\tif (EXPECTED(!ht)) {\n\t\t\t\t\tif (!n) return;\n\t\t\t\t\twhile (!Z_REFCOUNTED_P(--end)) {\n\t\t\t\t\t\t//表明当前object size为0\n\t\t\t\t\t\tif (zv == end) return;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\twhile (zv != end) {\n\t\t\t\t\t//循环对每个元素进行--\n\t\t\t\t\tif (Z_REFCOUNTED_P(zv)) {\n\t\t\t\t\t\tref = Z_COUNTED_P(zv);\n\t\t\t\t\t\tGC_REFCOUNT(ref)--;\n\t\t\t\t\t\t//refcount已经减过，标记为灰色\n\t\t\t\t\t\tgc_mark_grey(ref);\n\t\t\t\t\t}\n\t\t\t\t\tzv++;\n\t\t\t\t}\n\t\t\t\tif (EXPECTED(!ht)) {\n\t\t\t\t\tref = Z_COUNTED_P(zv);\n\t\t\t\t\tGC_REFCOUNT(ref)--;\n\t\t\t\t\tgoto tail_call;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn;\n\t\t\t}\n\t\t} else if (GC_TYPE(ref) == IS_ARRAY) {\n\t\t\tif (((zend_array*)ref) == &EG(symbol_table)) {\n\t\t\t\t//标识是正常非垃圾\n\t\t\t\tGC_REF_SET_BLACK(ref);\n\t\t\t\treturn;\n\t\t\t} else {\n\t\t\t\tht = (zend_array*)ref;\n\t\t\t}\n\t\t} else if (GC_TYPE(ref) == IS_REFERENCE) {\n\t\t\tif (Z_REFCOUNTED(((zend_reference*)ref)->val)) {\n\t\t\t\tref = Z_COUNTED(((zend_reference*)ref)->val);\n\t\t\t\tGC_REFCOUNT(ref)--;\n\t\t\t\tgoto tail_call;\n\t\t\t}\n\t\t\treturn;\n\t\t} else {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!ht->nNumUsed) return;\n\t\tp = ht->arData;\n\t\tend = p + ht->nNumUsed;\n\t\twhile (1) {\n\t\t\tend--;\n\t\t\tzv = &end->val;\n\t\t\tif (Z_TYPE_P(zv) == IS_INDIRECT) {\n\t\t\t\tzv = Z_INDIRECT_P(zv);\n\t\t\t}\n\t\t\tif (Z_REFCOUNTED_P(zv)) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (p == end) return;\n\t\t}\n\t\twhile (p != end) {\n\t\t\tzv = &p->val;\n\t\t\tif (Z_TYPE_P(zv) == IS_INDIRECT) {\n\t\t\t\tzv = Z_INDIRECT_P(zv);\n\t\t\t}\n\t\t\tif (Z_REFCOUNTED_P(zv)) {\n\t\t\t\tref = Z_COUNTED_P(zv);\n\t\t\t\tGC_REFCOUNT(ref)--;\n\t\t\t\tgc_mark_grey(ref);\n\t\t\t}\n\t\t\tp++;\n\t\t}\n\t\tzv = &p->val;\n\t\tif (Z_TYPE_P(zv) == IS_INDIRECT) {\n\t\t\tzv = Z_INDIRECT_P(zv);\n\t\t}\n\t\tref = Z_COUNTED_P(zv);\n\t\tGC_REFCOUNT(ref)--;\n\t\tgoto tail_call;\n\t}\n}\n```\n\n```c\nstatic void gc_scan(zend_refcounted *ref)\n{\n    HashTable *ht;\n\tBucket *p, *end;\n\tzval *zv;\n\ntail_call:\n\tif (GC_REF_GET_COLOR(ref) == GC_GREY) {\n\t\tif (GC_REFCOUNT(ref) > 0) {\n\t\t\t//所有refount--以后如果还>0，说明非垃圾\n\t\t\tgc_scan_black(ref);\n\t\t} else {\n\t\t\t//否则则为垃圾\n\t\t\tGC_REF_SET_COLOR(ref, GC_WHITE);\n\t\t\tif (GC_TYPE(ref) == IS_OBJECT) {\n\t\t\t\tzend_object_get_gc_t get_gc;\n\t\t\t\tzend_object *obj = (zend_object*)ref;\n\n\t\t\t\tif (EXPECTED(!(GC_FLAGS(ref) & IS_OBJ_FREE_CALLED) &&\n\t\t\t\t             (get_gc = obj->handlers->get_gc) != NULL)) {\n\t\t\t\t\tint n;\n\t\t\t\t\tzval *zv, *end;\n\t\t\t\t\tzval tmp;\n\n\t\t\t\t\tZVAL_OBJ(&tmp, obj);\n\t\t\t\t\tht = get_gc(&tmp, &zv, &n);\n\t\t\t\t\tend = zv + n;\n\t\t\t\t\tif (EXPECTED(!ht)) {\n\t\t\t\t\t\tif (!n) return;\n\t\t\t\t\t\twhile (!Z_REFCOUNTED_P(--end)) {\n\t\t\t\t\t\t\tif (zv == end) return;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\twhile (zv != end) {\n\t\t\t\t\t\tif (Z_REFCOUNTED_P(zv)) {\n\t\t\t\t\t\t\tref = Z_COUNTED_P(zv);\n\t\t\t\t\t\t\tgc_scan(ref);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tzv++;\n\t\t\t\t\t}\n\t\t\t\t\tif (EXPECTED(!ht)) {\n\t\t\t\t\t\tref = Z_COUNTED_P(zv);\n\t\t\t\t\t\tgoto tail_call;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} else if (GC_TYPE(ref) == IS_ARRAY) {\n\t\t\t\tif ((zend_array*)ref == &EG(symbol_table)) {\n\t\t\t\t\tGC_REF_SET_BLACK(ref);\n\t\t\t\t\treturn;\n\t\t\t\t} else {\n\t\t\t\t\tht = (zend_array*)ref;\n\t\t\t\t}\n\t\t\t} else if (GC_TYPE(ref) == IS_REFERENCE) {\n\t\t\t\tif (Z_REFCOUNTED(((zend_reference*)ref)->val)) {\n\t\t\t\t\tref = Z_COUNTED(((zend_reference*)ref)->val);\n\t\t\t\t\tgoto tail_call;\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t} else {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!ht->nNumUsed) return;\n\t\t\tp = ht->arData;\n\t\t\tend = p + ht->nNumUsed;\n\t\t\twhile (1) {\n\t\t\t\tend--;\n\t\t\t\tzv = &end->val;\n\t\t\t\tif (Z_TYPE_P(zv) == IS_INDIRECT) {\n\t\t\t\t\tzv = Z_INDIRECT_P(zv);\n\t\t\t\t}\n\t\t\t\tif (Z_REFCOUNTED_P(zv)) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (p == end) return;\n\t\t\t}\n\t\t\twhile (p != end) {\n\t\t\t\tzv = &p->val;\n\t\t\t\tif (Z_TYPE_P(zv) == IS_INDIRECT) {\n\t\t\t\t\tzv = Z_INDIRECT_P(zv);\n\t\t\t\t}\n\t\t\t\tif (Z_REFCOUNTED_P(zv)) {\n\t\t\t\t\tref = Z_COUNTED_P(zv);\n\t\t\t\t\tgc_scan(ref);\n\t\t\t\t}\n\t\t\t\tp++;\n\t\t\t}\n\t\t\tzv = &p->val;\n\t\t\tif (Z_TYPE_P(zv) == IS_INDIRECT) {\n\t\t\t\tzv = Z_INDIRECT_P(zv);\n\t\t\t}\n\t\t\tref = Z_COUNTED_P(zv);\n\t\t\tgoto tail_call;\n\t\t}\n\t}\n}\n```\n主要为三个函数：\n- `gc_mark_roots`队规遍历，对object、array所有元素的refcount--并将其标记为灰色\n- `gc_scan_roots`这个函数对节点信息的链表再次进行深度优先遍历，如果发现zval的refcount大于等于1，则对该zval和其包含的zval的refcount加1操作，这个是对非垃圾的一个信息还原，然后将这些zval颜色属性去掉(设置成black)。如果发现zval的refcount等于0，则就标记成白色，这些是后面将要清理掉的垃圾。\n- `gc_collect_roots` 遍历节点信息链表,将前面一个步骤中标记为白色的节点信息放到GC_G(zval_to_free)为入口的链表中，这个链表用来存放将要释放的垃圾。 然后释放掉全部的节点信息，缓冲区被清空。分析结束后将重新收集节点信息。\n\n","source":"_posts/php垃圾回收.md","raw":"---\ntitle: php垃圾回收\ndate: 2018-09-12 21:28:00\ntags:\n---\n\nphp是如何实现内存管理的?内存管理无非包括内存分配、内存回收、以及内存使用优化。\n\n- 内存使用的优化\n- 垃圾回收机制\n- 底层内存分配\n\n\n## 内存使用的优化\n\n### 引用计数\n\nphp的引用中有个引用结构体\n\n```php\n```c\nstruct _zend_reference {\n    zend_refcondted_h gc;\n    zval              val;  指向原来的value.\n};\n```\n```\n其中`zend_refcondted_h` 便是gc便是当前变量被引用的次数,这个参数会在变量回收的时候用到。\n\n\nzend_refcondted_h :\n\n```c\ntypedef struct _zend_refcounted_h {\n\tuint32_t         refcount;\t\t\t/* reference counter 32-bit */\n\tunion {\n\t\tstruct {\n\t\t\tZEND_ENDIAN_LOHI_3(\n\t\t\t\tzend_uchar    type,\n\t\t\t\tzend_uchar    flags,    /* used for strings & objects */\n\t\t\t\tuint16_t      gc_info)  /* keeps GC root number (or 0) and color */\n\t\t} v;\n\t\tuint32_t type_info;\n\t} u;\n} zend_refcounted_h;\n```\n\n在实际中这个结构体到底是什么样的? 具体可以举例来看。\n\n```php\n$a = 'this is string'; // zend_array (refcount = 1)  只有$a引用了zend_array\n$b = &$a; //   zend_array (refcount = 2)  $a、$b引用了zend_array\n$c = $b; // zend_array (refcount = 3)  $a、$b、$c引用了zend_array\nunset($b); // zend_array (refcount = 2)  $a、$c引用了zend_array\n```\n\n> 并不是所有的变量类型都会使用引用计数, 例如 `整形`、`浮点型`、`布尔型`、`NUll`(在php中这是一个变量类型)等采用了深拷贝,\n即只要这几种变量赋值, 就会申请一款一块内存写入一个新的变量结构（注意这里不是引用结构）,当然这些类型不会公用value。\n\n\n\n### 写时复制\n\n当然只有引用计数是不够的, 因为变量会发生赋值的情况。所以在更改某一个变量时, 会对原来的变量进行拷贝并赋值。\n\n举个栗子:\n\n```\n$foo = time();\n$bar = &$b;\n$si = $a;\n\n$c = '123';\n```\n\n具体数据结构的引用计数情况如下图:\n\n\n\n![image](/photo/img/php内存管理/写时复制.png)\n\n## 内存回收\n\n### 自动gc\n在zend数据接口中有一个gc.refount,他是自动gc的关键。\n\n在自动gc机制中,如果zval不在指向value且当前value的gc.refount为0时,会直接释放value。这种情况多发生于函数返回时（销毁所有局部变量）、变量修改时、以及unset操作的时候。\n\n\n### 辣鸡回收\n\n除了自动gc,还有一种是自动gc无法处理的垃圾, 这种情况称为`循环引用`。顾名思义也就是自身内部变量引用了自身, 这种情况常出现与object和array。当我该变量zval被销毁是, 与其对应的value gc.refcount -1,\n但是因为有自身变量指向自身, 所以就陷入了一个循环:如果不销毁自身变量 value gc.refcount就无法自动gc, 只有自动gc才会销毁value。\n\n```php\n\n$a = [1];\n$a[] = &$a;\nunset($a);\n\n```\n\n![image](/photo/img/php内存管理/自身引用.png)\n\n`unset($a)`执行以后\n\n![image](/photo/img/php内存管理/释放.png)\n\n由于\b上述情况导致无法自动gc,所以需要引入另外一钟垃圾回收机制-垃圾回收器。\n现在会存在两种情况的数据需要回收：\n- 当value的gc.refcount =0 是需要回收。\n- 当value的gc.refcount 减少不等于0，但是存在循环引用时。\n\n### 回收机制\n\n当发生value gc.refcount减少时，垃圾回收机制会把可能是垃圾的value存起来， 当可能是辣鸡的value到达一定数量的时候启动垃圾鉴别程序，统一处理垃圾。当然这里的value类型只有object和array。\n\n垃圾兼备程序：\n其实垃圾鉴别程序很简单，递归遍历自身value，查看是否存在指向自身的即可。\n\ncode:\ngc 初始化\n```php\nZEND_API void gc_init(void)\n{\n\tif (GC_G(buf) == NULL && GC_G(gc_enabled)) {\n\t\t//初始化buf\b内存区域，大小为sizeof(gc_root_buffer) * //GC_ROOT_BUFFER_MAX_ENTRIES\n\t\tGC_G(buf) = (gc_root_buffer*) malloc(sizeof(gc_root_buffer) * GC_ROOT_BUFFER_MAX_ENTRIES);\n\t\t//设置_zend_gc_globals.last_unused为\b\bbug入口位置\n\t\tGC_G(last_unused) = &GC_G(buf)[GC_ROOT_BUFFER_MAX_ENTRIES];\n\t\t//初始化_zend_gc_globals的参数\n\t\tgc_reset();\n\t}\n}\n```\n垃圾回收及其依赖 `_zend_gc_globals`\n\n`_zend_gc_globals`\n```c\ntypedef struct _zend_gc_globals {\n\tzend_bool         gc_enabled;\n\tzend_bool         gc_active;\n\tzend_bool         gc_full;\n\n\tgc_root_buffer   *buf;\t\t\t\t/* preallocated arrays of buffers   */\n\tgc_root_buffer    roots;\t\t\t/* list of possible roots of cycles */\n\tgc_root_buffer   *unused;\t\t\t/* list of unused buffers           */\n\tgc_root_buffer   *first_unused;\t\t/* pointer to first unused buffer   */\n\tgc_root_buffer   *last_unused;\t\t/* pointer to last unused buffer    */\n\n\tgc_root_buffer    to_free;\t\t\t/* list to free                     */\n\tgc_root_buffer   *next_to_free;\n\n\tuint32_t gc_runs;\n\tuint32_t collected;\n\n#if GC_BENCH\n\tuint32_t root_buf_length;\n\tuint32_t root_buf_peak;\n\tuint32_t zval_possible_root;\n\tuint32_t zval_buffered;\n\tuint32_t zval_remove_from_buffer;\n\tuint32_t zval_marked_grey;\n#endif\n\n\tgc_additional_buffer *additional_buffer;\n\n} zend_gc_globals;\n```\n\n- `gc_enabled` 是否使使用gc\n- `gc_active`  是否在垃圾检查的过程中\n- `gc_full` buf缓冲区是否已满\n- `*buf` 与分配用于保存可能为垃圾的value\n- `roots` 指向buf最新加入的一个可能垃圾\n- `unused` 指向第未使用的buffer\n- `*first_unused` 指向第一个没用使用buffer\n- `*last_unused` 指向buffer的尾部\n- `to_free` 等待释放的buffer\n- `gc_runs`  统计gc运行的次数\n- `collected`  统计已经释放的垃圾数\n\n\nphp垃圾回收中几个重要的颜色写在zeng_gc的备注中。\n```C\n * BLACK  (GC_BLACK)   - In use or free.\n * GREY   (GC_GREY)    - Possible member of cycle.\n * WHITE  (GC_WHITE)   - Member of garbage cycle.\n * PURPLE (GC_PURPLE)  - Possible root of cycle.\n```\n- GC_WHITE 白色表示垃圾\n- GC_PURPLE 紫色表示已放入缓冲区\n- GC_GREY 灰色表示已经进行了一次refcount的减一操作\n- GC_BLACK 黑色是默认颜色，正常\n\n\ngc过程中主要处理功能的函数`zend_gc_collect_cycles`\n\n```c\nZEND_API void ZEND_FASTCALL gc_possible_root(zend_refcounted *ref)\n{\n\tgc_root_buffer *newRoot;\n\n\tif (UNEXPECTED(CG(unclean_shutdown)) || UNEXPECTED(GC_G(gc_active))) {\n\t\treturn;\n\t}\n\n\tZEND_ASSERT(GC_TYPE(ref) == IS_ARRAY || GC_TYPE(ref) == IS_OBJECT);\n\tZEND_ASSERT(EXPECTED(GC_REF_GET_COLOR(ref) == GC_BLACK));\n\tZEND_ASSERT(!GC_ADDRESS(GC_INFO(ref)));\n\n\tGC_BENCH_INC(zval_possible_root);\n\n\tnewRoot = GC_G(unused);\n\tif (newRoot) {\n\t\tGC_G(unused) = newRoot->prev;\n\t} else if (GC_G(first_unused) != GC_G(last_unused)) {\n\t\tnewRoot = GC_G(first_unused);\n\t\tGC_G(first_unused)++;\n\t} else {\n\t\t//垃圾处理，当缓冲区满时，程序调用gc_collect_cycles函数，执行垃圾回收操作。 其中最关键的几步就是\n\t\t//如果当前处于可以gc的状态\n\t\tif (!GC_G(gc_enabled)) {\n\t\t\treturn;\n\t\t}\n\t\tGC_REFCOUNT(ref)++;\n\t\t//垃圾回收\n\t\tgc_collect_cycles();\n\t\tGC_REFCOUNT(ref)--;\n\t\tif (UNEXPECTED(GC_REFCOUNT(ref)) == 0) {\n\t\t\tzval_dtor_func(ref);\n\t\t\treturn;\n\t\t}\n\t\tif (UNEXPECTED(GC_INFO(ref))) {\n\t\t\treturn;\n\t\t}\n\t\tnewRoot = GC_G(unused);\n\t\tif (!newRoot) {\n\t\t\treturn;\n\t\t}\n\t\tGC_G(unused) = newRoot->prev;\n\t}\n\n\tGC_TRACE_SET_COLOR(ref, GC_PURPLE);\n\tGC_INFO(ref) = (newRoot - GC_G(buf)) | GC_PURPLE;\n\tnewRoot->ref = ref;\n\n\tnewRoot->next = GC_G(roots).next;\n\tnewRoot->prev = &GC_G(roots);\n\tGC_G(roots).next->prev = newRoot;\n\tGC_G(roots).next = newRoot;\n\n\tGC_BENCH_INC(zval_buffered);\n\tGC_BENCH_INC(root_buf_length);\n\tGC_BENCH_PEAK(root_buf_peak, root_buf_length);\n}\n```\n\n\n\bdebug代码已删除\n1. \b深度优先对对象或者数据的每一个元素的`refcount--`并将其标记为灰色\n2. 深度遍历root的每个每个变量，如果此时变量的`refcount`为0，则代表着改变量为垃圾，将其标记为垃圾，如果不为0，则将其标记为黑色（正常）。\n3. 检查roots清除标记为白色的垃圾。\n\n//TODO 垃圾回收抽出来出来写。\n\n具体代码：\n```php\nZEND_API int zend_gc_collect_cycles(void)\n{\n\tint count = 0;\n\n\tif (GC_G(roots).next != &GC_G(roots)) {\n\t\tgc_root_buffer *current, *next, *orig_next_to_free;\n\t\tzend_refcounted *p;\n\t\tgc_root_buffer to_free;\n\t\tuint32_t gc_flags = 0;\n\t\tgc_additional_buffer *additional_buffer_snapshot;\n\n\n\t\tif (GC_G(gc_active)) {\n\t\t\treturn 0;\n\t\t}\n\n\t\tGC_TRACE(\"Collecting cycles\");\n\t\t//标识gc运行了多少次\n\t\tGC_G(gc_runs)++;\n\t\t//标识当前正在gc\n\t\tGC_G(gc_active) = 1;\n\n\t\tGC_TRACE(\"Marking roots\");\n\t\t//重点\n\t\tgc_mark_roots();\n\t\tGC_TRACE(\"Scanning roots\");\n\t\t//重点\n\t\tgc_scan_roots();\n\n\n\n\t\tGC_TRACE(\"Collecting roots\");\n\t\tadditional_buffer_snapshot = GC_G(additional_buffer);\n\t\tcount = gc_collect_roots(&gc_flags);\n\n\t\tGC_G(gc_active) = 0;\n\n\t\tif (GC_G(to_free).next == &GC_G(to_free)) {\n\t\t\t/* nothing to free */\n\t\t\tGC_TRACE(\"Nothing to free\");\n\t\t\treturn 0;\n\t\t}\n\n\t\t/* Copy global to_free list into local list */\n\t\tto_free.next = GC_G(to_free).next;\n\t\tto_free.prev = GC_G(to_free).prev;\n\t\tto_free.next->prev = &to_free;\n\t\tto_free.prev->next = &to_free;\n\n\t\t/* Free global list */\n\t\tGC_G(to_free).next = &GC_G(to_free);\n\t\tGC_G(to_free).prev = &GC_G(to_free);\n\n\t\torig_next_to_free = GC_G(next_to_free);\n\n\n\t\tif (gc_flags & GC_HAS_DESTRUCTORS) {\n\t\t\tGC_TRACE(\"Calling destructors\");\n\n\t\t\t/* Remember reference counters before calling destructors */\n\t\t\tcurrent = to_free.next;\n\t\t\twhile (current != &to_free) {\n\t\t\t\tcurrent->refcount = GC_REFCOUNT(current->ref);\n\t\t\t\tcurrent = current->next;\n\t\t\t}\n\n\t\t\t/* Call destructors */\n\t\t\tcurrent = to_free.next;\n\t\t\twhile (current != &to_free) {\n\t\t\t\tp = current->ref;\n\t\t\t\tGC_G(next_to_free) = current->next;\n\t\t\t\tif (GC_TYPE(p) == IS_OBJECT) {\n\t\t\t\t\tzend_object *obj = (zend_object*)p;\n\n\t\t\t\t\tif (!(GC_FLAGS(obj) & IS_OBJ_DESTRUCTOR_CALLED)) {\n\t\t\t\t\t\tGC_TRACE_REF(obj, \"calling destructor\");\n\t\t\t\t\t\tGC_FLAGS(obj) |= IS_OBJ_DESTRUCTOR_CALLED;\n\t\t\t\t\t\tif (obj->handlers->dtor_obj\n\t\t\t\t\t\t && (obj->handlers->dtor_obj != zend_objects_destroy_object\n\t\t\t\t\t\t  || obj->ce->destructor)) {\n\t\t\t\t\t\t\tGC_REFCOUNT(obj)++;\n\t\t\t\t\t\t\tobj->handlers->dtor_obj(obj);\n\t\t\t\t\t\t\tGC_REFCOUNT(obj)--;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tcurrent = GC_G(next_to_free);\n\t\t\t}\n\n\t\t\t/* Remove values captured in destructors */\n\t\t\tcurrent = to_free.next;\n\t\t\twhile (current != &to_free) {\n\t\t\t\tGC_G(next_to_free) = current->next;\n\t\t\t\tif (GC_REFCOUNT(current->ref) > current->refcount) {\n\t\t\t\t\tgc_remove_nested_data_from_buffer(current->ref, current);\n\t\t\t\t}\n\t\t\t\tcurrent = GC_G(next_to_free);\n\t\t\t}\n\t\t}\n\n\t\t/* Destroy zvals */\n\t\tGC_TRACE(\"Destroying zvals\");\n\t\tGC_G(gc_active) = 1;\n\t\tcurrent = to_free.next;\n\t\twhile (current != &to_free) {\n\t\t\tp = current->ref;\n\t\t\tGC_G(next_to_free) = current->next;\n\t\t\tGC_TRACE_REF(p, \"destroying\");\n\t\t\tif (GC_TYPE(p) == IS_OBJECT) {\n\t\t\t\tzend_object *obj = (zend_object*)p;\n\n\t\t\t\tEG(objects_store).object_buckets[obj->handle] = SET_OBJ_INVALID(obj);\n\t\t\t\tGC_TYPE(obj) = IS_NULL;\n\t\t\t\tif (!(GC_FLAGS(obj) & IS_OBJ_FREE_CALLED)) {\n\t\t\t\t\tGC_FLAGS(obj) |= IS_OBJ_FREE_CALLED;\n\t\t\t\t\tif (obj->handlers->free_obj) {\n\t\t\t\t\t\tGC_REFCOUNT(obj)++;\n\t\t\t\t\t\tobj->handlers->free_obj(obj);\n\t\t\t\t\t\tGC_REFCOUNT(obj)--;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tSET_OBJ_BUCKET_NUMBER(EG(objects_store).object_buckets[obj->handle], EG(objects_store).free_list_head);\n\t\t\t\tEG(objects_store).free_list_head = obj->handle;\n\t\t\t\tp = current->ref = (zend_refcounted*)(((char*)obj) - obj->handlers->offset);\n\t\t\t} else if (GC_TYPE(p) == IS_ARRAY) {\n\t\t\t\tzend_array *arr = (zend_array*)p;\n\n\t\t\t\tGC_TYPE(arr) = IS_NULL;\n\n\t\t\t\t/* GC may destroy arrays with rc>1. This is valid and safe. */\n\t\t\t\tHT_ALLOW_COW_VIOLATION(arr);\n\n\t\t\t\tzend_hash_destroy(arr);\n\t\t\t}\n\t\t\tcurrent = GC_G(next_to_free);\n\t\t}\n\n\t\t/* Free objects */\n\t\tcurrent = to_free.next;\n\t\twhile (current != &to_free) {\n\t\t\tnext = current->next;\n\t\t\tp = current->ref;\n\t\t\tif (EXPECTED(current >= GC_G(buf) && current < GC_G(buf) + GC_ROOT_BUFFER_MAX_ENTRIES)) {\n\t\t\t\tcurrent->prev = GC_G(unused);\n\t\t\t\tGC_G(unused) = current;\n\t\t\t}\n\t\t\tefree(p);\n\t\t\tcurrent = next;\n\t\t}\n\n\t\twhile (GC_G(additional_buffer) != additional_buffer_snapshot) {\n\t\t\tgc_additional_buffer *next = GC_G(additional_buffer)->next;\n\t\t\tefree(GC_G(additional_buffer));\n\t\t\tGC_G(additional_buffer) = next;\n\t\t}\n\n\t\tGC_TRACE(\"Collection finished\");\n\t\tGC_G(collected) += count;\n\t\tGC_G(next_to_free) = orig_next_to_free;\n\t\tGC_G(gc_active) = 0;\n\t}\n\n\treturn count;\n}\n```\n\n\n```c\nstatic void gc_mark_roots(void)\n{\n\tgc_root_buffer *current = GC_G(roots).next;\n\n\twhile (current != &GC_G(roots)) {\n\t\t//GC_PURPLE 标识在缓冲区\n\t\tif (GC_REF_GET_COLOR(current->ref) == GC_PURPLE) {\n\t\t\tgc_mark_grey(current->ref);\n\t\t}\n\t\tcurrent = current->next;\n\t}\n}\n```\n\n```c\nstatic void gc_mark_grey(zend_refcounted *ref)\n{\n    HashTable *ht;\n\tBucket *p, *end;\n\tzval *zv;\n\ntail_call:\n\tif (GC_REF_GET_COLOR(ref) != GC_GREY) {\n\t\tht = NULL;\n\t\tGC_BENCH_INC(zval_marked_grey);\n\t\tGC_REF_SET_COLOR(ref, GC_GREY);\n\n\t\tif (GC_TYPE(ref) == IS_OBJECT) {\n\t\t\tzend_object_get_gc_t get_gc;\n\t\t\tzend_object *obj = (zend_object*)ref;\n\n\t\t\tif (EXPECTED(!(GC_FLAGS(ref) & IS_OBJ_FREE_CALLED) &&\n\t\t                 (get_gc = obj->handlers->get_gc) != NULL)) {\n\t\t\t\tint n;\n\t\t\t\tzval *zv, *end;\n\t\t\t\tzval tmp;\n\n\t\t\t\tZVAL_OBJ(&tmp, obj);\n\t\t\t\tht = get_gc(&tmp, &zv, &n);\n\t\t\t\tend = zv + n;\n\t\t\t\tif (EXPECTED(!ht)) {\n\t\t\t\t\tif (!n) return;\n\t\t\t\t\twhile (!Z_REFCOUNTED_P(--end)) {\n\t\t\t\t\t\t//表明当前object size为0\n\t\t\t\t\t\tif (zv == end) return;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\twhile (zv != end) {\n\t\t\t\t\t//循环对每个元素进行--\n\t\t\t\t\tif (Z_REFCOUNTED_P(zv)) {\n\t\t\t\t\t\tref = Z_COUNTED_P(zv);\n\t\t\t\t\t\tGC_REFCOUNT(ref)--;\n\t\t\t\t\t\t//refcount已经减过，标记为灰色\n\t\t\t\t\t\tgc_mark_grey(ref);\n\t\t\t\t\t}\n\t\t\t\t\tzv++;\n\t\t\t\t}\n\t\t\t\tif (EXPECTED(!ht)) {\n\t\t\t\t\tref = Z_COUNTED_P(zv);\n\t\t\t\t\tGC_REFCOUNT(ref)--;\n\t\t\t\t\tgoto tail_call;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn;\n\t\t\t}\n\t\t} else if (GC_TYPE(ref) == IS_ARRAY) {\n\t\t\tif (((zend_array*)ref) == &EG(symbol_table)) {\n\t\t\t\t//标识是正常非垃圾\n\t\t\t\tGC_REF_SET_BLACK(ref);\n\t\t\t\treturn;\n\t\t\t} else {\n\t\t\t\tht = (zend_array*)ref;\n\t\t\t}\n\t\t} else if (GC_TYPE(ref) == IS_REFERENCE) {\n\t\t\tif (Z_REFCOUNTED(((zend_reference*)ref)->val)) {\n\t\t\t\tref = Z_COUNTED(((zend_reference*)ref)->val);\n\t\t\t\tGC_REFCOUNT(ref)--;\n\t\t\t\tgoto tail_call;\n\t\t\t}\n\t\t\treturn;\n\t\t} else {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!ht->nNumUsed) return;\n\t\tp = ht->arData;\n\t\tend = p + ht->nNumUsed;\n\t\twhile (1) {\n\t\t\tend--;\n\t\t\tzv = &end->val;\n\t\t\tif (Z_TYPE_P(zv) == IS_INDIRECT) {\n\t\t\t\tzv = Z_INDIRECT_P(zv);\n\t\t\t}\n\t\t\tif (Z_REFCOUNTED_P(zv)) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (p == end) return;\n\t\t}\n\t\twhile (p != end) {\n\t\t\tzv = &p->val;\n\t\t\tif (Z_TYPE_P(zv) == IS_INDIRECT) {\n\t\t\t\tzv = Z_INDIRECT_P(zv);\n\t\t\t}\n\t\t\tif (Z_REFCOUNTED_P(zv)) {\n\t\t\t\tref = Z_COUNTED_P(zv);\n\t\t\t\tGC_REFCOUNT(ref)--;\n\t\t\t\tgc_mark_grey(ref);\n\t\t\t}\n\t\t\tp++;\n\t\t}\n\t\tzv = &p->val;\n\t\tif (Z_TYPE_P(zv) == IS_INDIRECT) {\n\t\t\tzv = Z_INDIRECT_P(zv);\n\t\t}\n\t\tref = Z_COUNTED_P(zv);\n\t\tGC_REFCOUNT(ref)--;\n\t\tgoto tail_call;\n\t}\n}\n```\n\n```c\nstatic void gc_scan(zend_refcounted *ref)\n{\n    HashTable *ht;\n\tBucket *p, *end;\n\tzval *zv;\n\ntail_call:\n\tif (GC_REF_GET_COLOR(ref) == GC_GREY) {\n\t\tif (GC_REFCOUNT(ref) > 0) {\n\t\t\t//所有refount--以后如果还>0，说明非垃圾\n\t\t\tgc_scan_black(ref);\n\t\t} else {\n\t\t\t//否则则为垃圾\n\t\t\tGC_REF_SET_COLOR(ref, GC_WHITE);\n\t\t\tif (GC_TYPE(ref) == IS_OBJECT) {\n\t\t\t\tzend_object_get_gc_t get_gc;\n\t\t\t\tzend_object *obj = (zend_object*)ref;\n\n\t\t\t\tif (EXPECTED(!(GC_FLAGS(ref) & IS_OBJ_FREE_CALLED) &&\n\t\t\t\t             (get_gc = obj->handlers->get_gc) != NULL)) {\n\t\t\t\t\tint n;\n\t\t\t\t\tzval *zv, *end;\n\t\t\t\t\tzval tmp;\n\n\t\t\t\t\tZVAL_OBJ(&tmp, obj);\n\t\t\t\t\tht = get_gc(&tmp, &zv, &n);\n\t\t\t\t\tend = zv + n;\n\t\t\t\t\tif (EXPECTED(!ht)) {\n\t\t\t\t\t\tif (!n) return;\n\t\t\t\t\t\twhile (!Z_REFCOUNTED_P(--end)) {\n\t\t\t\t\t\t\tif (zv == end) return;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\twhile (zv != end) {\n\t\t\t\t\t\tif (Z_REFCOUNTED_P(zv)) {\n\t\t\t\t\t\t\tref = Z_COUNTED_P(zv);\n\t\t\t\t\t\t\tgc_scan(ref);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tzv++;\n\t\t\t\t\t}\n\t\t\t\t\tif (EXPECTED(!ht)) {\n\t\t\t\t\t\tref = Z_COUNTED_P(zv);\n\t\t\t\t\t\tgoto tail_call;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} else if (GC_TYPE(ref) == IS_ARRAY) {\n\t\t\t\tif ((zend_array*)ref == &EG(symbol_table)) {\n\t\t\t\t\tGC_REF_SET_BLACK(ref);\n\t\t\t\t\treturn;\n\t\t\t\t} else {\n\t\t\t\t\tht = (zend_array*)ref;\n\t\t\t\t}\n\t\t\t} else if (GC_TYPE(ref) == IS_REFERENCE) {\n\t\t\t\tif (Z_REFCOUNTED(((zend_reference*)ref)->val)) {\n\t\t\t\t\tref = Z_COUNTED(((zend_reference*)ref)->val);\n\t\t\t\t\tgoto tail_call;\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t} else {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!ht->nNumUsed) return;\n\t\t\tp = ht->arData;\n\t\t\tend = p + ht->nNumUsed;\n\t\t\twhile (1) {\n\t\t\t\tend--;\n\t\t\t\tzv = &end->val;\n\t\t\t\tif (Z_TYPE_P(zv) == IS_INDIRECT) {\n\t\t\t\t\tzv = Z_INDIRECT_P(zv);\n\t\t\t\t}\n\t\t\t\tif (Z_REFCOUNTED_P(zv)) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (p == end) return;\n\t\t\t}\n\t\t\twhile (p != end) {\n\t\t\t\tzv = &p->val;\n\t\t\t\tif (Z_TYPE_P(zv) == IS_INDIRECT) {\n\t\t\t\t\tzv = Z_INDIRECT_P(zv);\n\t\t\t\t}\n\t\t\t\tif (Z_REFCOUNTED_P(zv)) {\n\t\t\t\t\tref = Z_COUNTED_P(zv);\n\t\t\t\t\tgc_scan(ref);\n\t\t\t\t}\n\t\t\t\tp++;\n\t\t\t}\n\t\t\tzv = &p->val;\n\t\t\tif (Z_TYPE_P(zv) == IS_INDIRECT) {\n\t\t\t\tzv = Z_INDIRECT_P(zv);\n\t\t\t}\n\t\t\tref = Z_COUNTED_P(zv);\n\t\t\tgoto tail_call;\n\t\t}\n\t}\n}\n```\n主要为三个函数：\n- `gc_mark_roots`队规遍历，对object、array所有元素的refcount--并将其标记为灰色\n- `gc_scan_roots`这个函数对节点信息的链表再次进行深度优先遍历，如果发现zval的refcount大于等于1，则对该zval和其包含的zval的refcount加1操作，这个是对非垃圾的一个信息还原，然后将这些zval颜色属性去掉(设置成black)。如果发现zval的refcount等于0，则就标记成白色，这些是后面将要清理掉的垃圾。\n- `gc_collect_roots` 遍历节点信息链表,将前面一个步骤中标记为白色的节点信息放到GC_G(zval_to_free)为入口的链表中，这个链表用来存放将要释放的垃圾。 然后释放掉全部的节点信息，缓冲区被清空。分析结束后将重新收集节点信息。\n\n","slug":"php垃圾回收","published":1,"updated":"2018-11-26T02:14:21.387Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqavhgdj000pzqjfvgud6afm","content":"<p>php是如何实现内存管理的?内存管理无非包括内存分配、内存回收、以及内存使用优化。</p>\n<ul>\n<li>内存使用的优化</li>\n<li>垃圾回收机制</li>\n<li>底层内存分配</li>\n</ul>\n<h2 id=\"内存使用的优化\"><a href=\"#内存使用的优化\" class=\"headerlink\" title=\"内存使用的优化\"></a>内存使用的优化</h2><h3 id=\"引用计数\"><a href=\"#引用计数\" class=\"headerlink\" title=\"引用计数\"></a>引用计数</h3><p>php的引用中有个引用结构体</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">```c</div><div class=\"line\">struct _zend_reference &#123;</div><div class=\"line\">    zend_refcondted_h gc;</div><div class=\"line\">    zval              val;  指向原来的value.</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">其中`zend_refcondted_h` 便是gc便是当前变量被引用的次数,这个参数会在变量回收的时候用到。</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">zend_refcondted_h :</div><div class=\"line\"></div><div class=\"line\">```c</div><div class=\"line\">typedef struct _zend_refcounted_h &#123;</div><div class=\"line\">\tuint32_t         refcount;\t\t\t/* reference counter 32-bit */</div><div class=\"line\">\tunion &#123;</div><div class=\"line\">\t\tstruct &#123;</div><div class=\"line\">\t\t\tZEND_ENDIAN_LOHI_3(</div><div class=\"line\">\t\t\t\tzend_uchar    type,</div><div class=\"line\">\t\t\t\tzend_uchar    flags,    /* used for strings &amp; objects */</div><div class=\"line\">\t\t\t\tuint16_t      gc_info)  /* keeps GC root number (or 0) and color */</div><div class=\"line\">\t\t&#125; v;</div><div class=\"line\">\t\tuint32_t type_info;</div><div class=\"line\">\t&#125; u;</div><div class=\"line\">&#125; zend_refcounted_h;</div></pre></td></tr></table></figure>\n<p>在实际中这个结构体到底是什么样的? 具体可以举例来看。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$a = <span class=\"string\">'this is string'</span>; <span class=\"comment\">// zend_array (refcount = 1)  只有$a引用了zend_array</span></div><div class=\"line\">$b = &amp;$a; <span class=\"comment\">//   zend_array (refcount = 2)  $a、$b引用了zend_array</span></div><div class=\"line\">$c = $b; <span class=\"comment\">// zend_array (refcount = 3)  $a、$b、$c引用了zend_array</span></div><div class=\"line\"><span class=\"keyword\">unset</span>($b); <span class=\"comment\">// zend_array (refcount = 2)  $a、$c引用了zend_array</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>并不是所有的变量类型都会使用引用计数, 例如 <code>整形</code>、<code>浮点型</code>、<code>布尔型</code>、<code>NUll</code>(在php中这是一个变量类型)等采用了深拷贝,<br>即只要这几种变量赋值, 就会申请一款一块内存写入一个新的变量结构（注意这里不是引用结构）,当然这些类型不会公用value。</p>\n</blockquote>\n<h3 id=\"写时复制\"><a href=\"#写时复制\" class=\"headerlink\" title=\"写时复制\"></a>写时复制</h3><p>当然只有引用计数是不够的, 因为变量会发生赋值的情况。所以在更改某一个变量时, 会对原来的变量进行拷贝并赋值。</p>\n<p>举个栗子:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$foo = time();</div><div class=\"line\">$bar = &amp;$b;</div><div class=\"line\">$si = $a;</div><div class=\"line\"></div><div class=\"line\">$c = &apos;123&apos;;</div></pre></td></tr></table></figure>\n<p>具体数据结构的引用计数情况如下图:</p>\n<p><img src=\"/photo/img/php内存管理/写时复制.png\" alt=\"image\"></p>\n<h2 id=\"内存回收\"><a href=\"#内存回收\" class=\"headerlink\" title=\"内存回收\"></a>内存回收</h2><h3 id=\"自动gc\"><a href=\"#自动gc\" class=\"headerlink\" title=\"自动gc\"></a>自动gc</h3><p>在zend数据接口中有一个gc.refount,他是自动gc的关键。</p>\n<p>在自动gc机制中,如果zval不在指向value且当前value的gc.refount为0时,会直接释放value。这种情况多发生于函数返回时（销毁所有局部变量）、变量修改时、以及unset操作的时候。</p>\n<h3 id=\"辣鸡回收\"><a href=\"#辣鸡回收\" class=\"headerlink\" title=\"辣鸡回收\"></a>辣鸡回收</h3><p>除了自动gc,还有一种是自动gc无法处理的垃圾, 这种情况称为<code>循环引用</code>。顾名思义也就是自身内部变量引用了自身, 这种情况常出现与object和array。当我该变量zval被销毁是, 与其对应的value gc.refcount -1,<br>但是因为有自身变量指向自身, 所以就陷入了一个循环:如果不销毁自身变量 value gc.refcount就无法自动gc, 只有自动gc才会销毁value。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">$a = [<span class=\"number\">1</span>];</div><div class=\"line\">$a[] = &amp;$a;</div><div class=\"line\"><span class=\"keyword\">unset</span>($a);</div></pre></td></tr></table></figure>\n<p><img src=\"/photo/img/php内存管理/自身引用.png\" alt=\"image\"></p>\n<p><code>unset($a)</code>执行以后</p>\n<p><img src=\"/photo/img/php内存管理/释放.png\" alt=\"image\"></p>\n<p>由于\b上述情况导致无法自动gc,所以需要引入另外一钟垃圾回收机制-垃圾回收器。<br>现在会存在两种情况的数据需要回收：</p>\n<ul>\n<li>当value的gc.refcount =0 是需要回收。</li>\n<li>当value的gc.refcount 减少不等于0，但是存在循环引用时。</li>\n</ul>\n<h3 id=\"回收机制\"><a href=\"#回收机制\" class=\"headerlink\" title=\"回收机制\"></a>回收机制</h3><p>当发生value gc.refcount减少时，垃圾回收机制会把可能是垃圾的value存起来， 当可能是辣鸡的value到达一定数量的时候启动垃圾鉴别程序，统一处理垃圾。当然这里的value类型只有object和array。</p>\n<p>垃圾兼备程序：<br>其实垃圾鉴别程序很简单，递归遍历自身value，查看是否存在指向自身的即可。</p>\n<p>code:<br>gc 初始化<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">ZEND_API void gc_init(void)</div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (GC_G(buf) == <span class=\"keyword\">NULL</span> &amp;&amp; GC_G(gc_enabled)) &#123;</div><div class=\"line\">\t\t<span class=\"comment\">//初始化buf\b内存区域，大小为sizeof(gc_root_buffer) * //GC_ROOT_BUFFER_MAX_ENTRIES</span></div><div class=\"line\">\t\tGC_G(buf) = (gc_root_buffer*) malloc(sizeof(gc_root_buffer) * GC_ROOT_BUFFER_MAX_ENTRIES);</div><div class=\"line\">\t\t<span class=\"comment\">//设置_zend_gc_globals.last_unused为\b\bbug入口位置</span></div><div class=\"line\">\t\tGC_G(last_unused) = &amp;GC_G(buf)[GC_ROOT_BUFFER_MAX_ENTRIES];</div><div class=\"line\">\t\t<span class=\"comment\">//初始化_zend_gc_globals的参数</span></div><div class=\"line\">\t\tgc_reset();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>垃圾回收及其依赖 <code>_zend_gc_globals</code></p>\n<p><code>_zend_gc_globals</code><br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> _zend_gc_globals &#123;</div><div class=\"line\">\tzend_bool         gc_enabled;</div><div class=\"line\">\tzend_bool         gc_active;</div><div class=\"line\">\tzend_bool         gc_full;</div><div class=\"line\"></div><div class=\"line\">\tgc_root_buffer   *buf;\t\t\t\t<span class=\"comment\">/* preallocated arrays of buffers   */</span></div><div class=\"line\">\tgc_root_buffer    roots;\t\t\t<span class=\"comment\">/* list of possible roots of cycles */</span></div><div class=\"line\">\tgc_root_buffer   *unused;\t\t\t<span class=\"comment\">/* list of unused buffers           */</span></div><div class=\"line\">\tgc_root_buffer   *first_unused;\t\t<span class=\"comment\">/* pointer to first unused buffer   */</span></div><div class=\"line\">\tgc_root_buffer   *last_unused;\t\t<span class=\"comment\">/* pointer to last unused buffer    */</span></div><div class=\"line\"></div><div class=\"line\">\tgc_root_buffer    to_free;\t\t\t<span class=\"comment\">/* list to free                     */</span></div><div class=\"line\">\tgc_root_buffer   *next_to_free;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">uint32_t</span> gc_runs;</div><div class=\"line\">\t<span class=\"keyword\">uint32_t</span> collected;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> GC_BENCH</span></div><div class=\"line\">\t<span class=\"keyword\">uint32_t</span> root_buf_length;</div><div class=\"line\">\t<span class=\"keyword\">uint32_t</span> root_buf_peak;</div><div class=\"line\">\t<span class=\"keyword\">uint32_t</span> zval_possible_root;</div><div class=\"line\">\t<span class=\"keyword\">uint32_t</span> zval_buffered;</div><div class=\"line\">\t<span class=\"keyword\">uint32_t</span> zval_remove_from_buffer;</div><div class=\"line\">\t<span class=\"keyword\">uint32_t</span> zval_marked_grey;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\"></div><div class=\"line\">\tgc_additional_buffer *additional_buffer;</div><div class=\"line\"></div><div class=\"line\">&#125; zend_gc_globals;</div></pre></td></tr></table></figure></p>\n<ul>\n<li><code>gc_enabled</code> 是否使使用gc</li>\n<li><code>gc_active</code>  是否在垃圾检查的过程中</li>\n<li><code>gc_full</code> buf缓冲区是否已满</li>\n<li><code>*buf</code> 与分配用于保存可能为垃圾的value</li>\n<li><code>roots</code> 指向buf最新加入的一个可能垃圾</li>\n<li><code>unused</code> 指向第未使用的buffer</li>\n<li><code>*first_unused</code> 指向第一个没用使用buffer</li>\n<li><code>*last_unused</code> 指向buffer的尾部</li>\n<li><code>to_free</code> 等待释放的buffer</li>\n<li><code>gc_runs</code>  统计gc运行的次数</li>\n<li><code>collected</code>  统计已经释放的垃圾数</li>\n</ul>\n<p>php垃圾回收中几个重要的颜色写在zeng_gc的备注中。<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">* BLACK  (GC_BLACK)   - In use or <span class=\"built_in\">free</span>.</div><div class=\"line\">* GREY   (GC_GREY)    - Possible member of cycle.</div><div class=\"line\">* WHITE  (GC_WHITE)   - Member of garbage cycle.</div><div class=\"line\">* PURPLE (GC_PURPLE)  - Possible root of cycle.</div></pre></td></tr></table></figure></p>\n<ul>\n<li>GC_WHITE 白色表示垃圾</li>\n<li>GC_PURPLE 紫色表示已放入缓冲区</li>\n<li>GC_GREY 灰色表示已经进行了一次refcount的减一操作</li>\n<li>GC_BLACK 黑色是默认颜色，正常</li>\n</ul>\n<p>gc过程中主要处理功能的函数<code>zend_gc_collect_cycles</code></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\">ZEND_API <span class=\"keyword\">void</span> ZEND_FASTCALL <span class=\"title\">gc_possible_root</span><span class=\"params\">(zend_refcounted *ref)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\tgc_root_buffer *newRoot;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> (UNEXPECTED(CG(unclean_shutdown)) || UNEXPECTED(GC_G(gc_active))) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tZEND_ASSERT(GC_TYPE(ref) == IS_ARRAY || GC_TYPE(ref) == IS_OBJECT);</div><div class=\"line\">\tZEND_ASSERT(EXPECTED(GC_REF_GET_COLOR(ref) == GC_BLACK));</div><div class=\"line\">\tZEND_ASSERT(!GC_ADDRESS(GC_INFO(ref)));</div><div class=\"line\"></div><div class=\"line\">\tGC_BENCH_INC(zval_possible_root);</div><div class=\"line\"></div><div class=\"line\">\tnewRoot = GC_G(unused);</div><div class=\"line\">\t<span class=\"keyword\">if</span> (newRoot) &#123;</div><div class=\"line\">\t\tGC_G(unused) = newRoot-&gt;prev;</div><div class=\"line\">\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (GC_G(first_unused) != GC_G(last_unused)) &#123;</div><div class=\"line\">\t\tnewRoot = GC_G(first_unused);</div><div class=\"line\">\t\tGC_G(first_unused)++;</div><div class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t<span class=\"comment\">//垃圾处理，当缓冲区满时，程序调用gc_collect_cycles函数，执行垃圾回收操作。 其中最关键的几步就是</span></div><div class=\"line\">\t\t<span class=\"comment\">//如果当前处于可以gc的状态</span></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (!GC_G(gc_enabled)) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tGC_REFCOUNT(ref)++;</div><div class=\"line\">\t\t<span class=\"comment\">//垃圾回收</span></div><div class=\"line\">\t\tgc_collect_cycles();</div><div class=\"line\">\t\tGC_REFCOUNT(ref)--;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (UNEXPECTED(GC_REFCOUNT(ref)) == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">\t\t\tzval_dtor_func(ref);</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (UNEXPECTED(GC_INFO(ref))) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tnewRoot = GC_G(unused);</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (!newRoot) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tGC_G(unused) = newRoot-&gt;prev;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tGC_TRACE_SET_COLOR(ref, GC_PURPLE);</div><div class=\"line\">\tGC_INFO(ref) = (newRoot - GC_G(buf)) | GC_PURPLE;</div><div class=\"line\">\tnewRoot-&gt;ref = ref;</div><div class=\"line\"></div><div class=\"line\">\tnewRoot-&gt;next = GC_G(roots).next;</div><div class=\"line\">\tnewRoot-&gt;prev = &amp;GC_G(roots);</div><div class=\"line\">\tGC_G(roots).next-&gt;prev = newRoot;</div><div class=\"line\">\tGC_G(roots).next = newRoot;</div><div class=\"line\"></div><div class=\"line\">\tGC_BENCH_INC(zval_buffered);</div><div class=\"line\">\tGC_BENCH_INC(root_buf_length);</div><div class=\"line\">\tGC_BENCH_PEAK(root_buf_peak, root_buf_length);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>\bdebug代码已删除</p>\n<ol>\n<li>\b深度优先对对象或者数据的每一个元素的<code>refcount--</code>并将其标记为灰色</li>\n<li>深度遍历root的每个每个变量，如果此时变量的<code>refcount</code>为0，则代表着改变量为垃圾，将其标记为垃圾，如果不为0，则将其标记为黑色（正常）。</li>\n<li>检查roots清除标记为白色的垃圾。</li>\n</ol>\n<p>//TODO 垃圾回收抽出来出来写。</p>\n<p>具体代码：<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div></pre></td><td class=\"code\"><pre><div class=\"line\">ZEND_API int zend_gc_collect_cycles(void)</div><div class=\"line\">&#123;</div><div class=\"line\">\tint count = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> (GC_G(roots).next != &amp;GC_G(roots)) &#123;</div><div class=\"line\">\t\tgc_root_buffer *current, *next, *orig_next_to_free;</div><div class=\"line\">\t\tzend_refcounted *p;</div><div class=\"line\">\t\tgc_root_buffer to_free;</div><div class=\"line\">\t\tuint32_t gc_flags = <span class=\"number\">0</span>;</div><div class=\"line\">\t\tgc_additional_buffer *additional_buffer_snapshot;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (GC_G(gc_active)) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\tGC_TRACE(<span class=\"string\">\"Collecting cycles\"</span>);</div><div class=\"line\">\t\t<span class=\"comment\">//标识gc运行了多少次</span></div><div class=\"line\">\t\tGC_G(gc_runs)++;</div><div class=\"line\">\t\t<span class=\"comment\">//标识当前正在gc</span></div><div class=\"line\">\t\tGC_G(gc_active) = <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\">\t\tGC_TRACE(<span class=\"string\">\"Marking roots\"</span>);</div><div class=\"line\">\t\t<span class=\"comment\">//重点</span></div><div class=\"line\">\t\tgc_mark_roots();</div><div class=\"line\">\t\tGC_TRACE(<span class=\"string\">\"Scanning roots\"</span>);</div><div class=\"line\">\t\t<span class=\"comment\">//重点</span></div><div class=\"line\">\t\tgc_scan_roots();</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">\t\tGC_TRACE(<span class=\"string\">\"Collecting roots\"</span>);</div><div class=\"line\">\t\tadditional_buffer_snapshot = GC_G(additional_buffer);</div><div class=\"line\">\t\tcount = gc_collect_roots(&amp;gc_flags);</div><div class=\"line\"></div><div class=\"line\">\t\tGC_G(gc_active) = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (GC_G(to_free).next == &amp;GC_G(to_free)) &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">/* nothing to free */</span></div><div class=\"line\">\t\t\tGC_TRACE(<span class=\"string\">\"Nothing to free\"</span>);</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"comment\">/* Copy global to_free list into local list */</span></div><div class=\"line\">\t\tto_free.next = GC_G(to_free).next;</div><div class=\"line\">\t\tto_free.prev = GC_G(to_free).prev;</div><div class=\"line\">\t\tto_free.next-&gt;prev = &amp;to_free;</div><div class=\"line\">\t\tto_free.prev-&gt;next = &amp;to_free;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"comment\">/* Free global list */</span></div><div class=\"line\">\t\tGC_G(to_free).next = &amp;GC_G(to_free);</div><div class=\"line\">\t\tGC_G(to_free).prev = &amp;GC_G(to_free);</div><div class=\"line\"></div><div class=\"line\">\t\torig_next_to_free = GC_G(next_to_free);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (gc_flags &amp; GC_HAS_DESTRUCTORS) &#123;</div><div class=\"line\">\t\t\tGC_TRACE(<span class=\"string\">\"Calling destructors\"</span>);</div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"comment\">/* Remember reference counters before calling destructors */</span></div><div class=\"line\">\t\t\tcurrent = to_free.next;</div><div class=\"line\">\t\t\t<span class=\"keyword\">while</span> (current != &amp;to_free) &#123;</div><div class=\"line\">\t\t\t\tcurrent-&gt;refcount = GC_REFCOUNT(current-&gt;ref);</div><div class=\"line\">\t\t\t\tcurrent = current-&gt;next;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"comment\">/* Call destructors */</span></div><div class=\"line\">\t\t\tcurrent = to_free.next;</div><div class=\"line\">\t\t\t<span class=\"keyword\">while</span> (current != &amp;to_free) &#123;</div><div class=\"line\">\t\t\t\tp = current-&gt;ref;</div><div class=\"line\">\t\t\t\tGC_G(next_to_free) = current-&gt;next;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (GC_TYPE(p) == IS_OBJECT) &#123;</div><div class=\"line\">\t\t\t\t\tzend_object *obj = (zend_object*)p;</div><div class=\"line\"></div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (!(GC_FLAGS(obj) &amp; IS_OBJ_DESTRUCTOR_CALLED)) &#123;</div><div class=\"line\">\t\t\t\t\t\tGC_TRACE_REF(obj, <span class=\"string\">\"calling destructor\"</span>);</div><div class=\"line\">\t\t\t\t\t\tGC_FLAGS(obj) |= IS_OBJ_DESTRUCTOR_CALLED;</div><div class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">if</span> (obj-&gt;handlers-&gt;dtor_obj</div><div class=\"line\">\t\t\t\t\t\t &amp;&amp; (obj-&gt;handlers-&gt;dtor_obj != zend_objects_destroy_object</div><div class=\"line\">\t\t\t\t\t\t  || obj-&gt;ce-&gt;destructor)) &#123;</div><div class=\"line\">\t\t\t\t\t\t\tGC_REFCOUNT(obj)++;</div><div class=\"line\">\t\t\t\t\t\t\tobj-&gt;handlers-&gt;dtor_obj(obj);</div><div class=\"line\">\t\t\t\t\t\t\tGC_REFCOUNT(obj)--;</div><div class=\"line\">\t\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\tcurrent = GC_G(next_to_free);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"comment\">/* Remove values captured in destructors */</span></div><div class=\"line\">\t\t\tcurrent = to_free.next;</div><div class=\"line\">\t\t\t<span class=\"keyword\">while</span> (current != &amp;to_free) &#123;</div><div class=\"line\">\t\t\t\tGC_G(next_to_free) = current-&gt;next;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (GC_REFCOUNT(current-&gt;ref) &gt; current-&gt;refcount) &#123;</div><div class=\"line\">\t\t\t\t\tgc_remove_nested_data_from_buffer(current-&gt;ref, current);</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\tcurrent = GC_G(next_to_free);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"comment\">/* Destroy zvals */</span></div><div class=\"line\">\t\tGC_TRACE(<span class=\"string\">\"Destroying zvals\"</span>);</div><div class=\"line\">\t\tGC_G(gc_active) = <span class=\"number\">1</span>;</div><div class=\"line\">\t\tcurrent = to_free.next;</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (current != &amp;to_free) &#123;</div><div class=\"line\">\t\t\tp = current-&gt;ref;</div><div class=\"line\">\t\t\tGC_G(next_to_free) = current-&gt;next;</div><div class=\"line\">\t\t\tGC_TRACE_REF(p, <span class=\"string\">\"destroying\"</span>);</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (GC_TYPE(p) == IS_OBJECT) &#123;</div><div class=\"line\">\t\t\t\tzend_object *obj = (zend_object*)p;</div><div class=\"line\"></div><div class=\"line\">\t\t\t\tEG(objects_store).object_buckets[obj-&gt;handle] = SET_OBJ_INVALID(obj);</div><div class=\"line\">\t\t\t\tGC_TYPE(obj) = IS_NULL;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (!(GC_FLAGS(obj) &amp; IS_OBJ_FREE_CALLED)) &#123;</div><div class=\"line\">\t\t\t\t\tGC_FLAGS(obj) |= IS_OBJ_FREE_CALLED;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (obj-&gt;handlers-&gt;free_obj) &#123;</div><div class=\"line\">\t\t\t\t\t\tGC_REFCOUNT(obj)++;</div><div class=\"line\">\t\t\t\t\t\tobj-&gt;handlers-&gt;free_obj(obj);</div><div class=\"line\">\t\t\t\t\t\tGC_REFCOUNT(obj)--;</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\tSET_OBJ_BUCKET_NUMBER(EG(objects_store).object_buckets[obj-&gt;handle], EG(objects_store).free_list_head);</div><div class=\"line\">\t\t\t\tEG(objects_store).free_list_head = obj-&gt;handle;</div><div class=\"line\">\t\t\t\tp = current-&gt;ref = (zend_refcounted*)(((char*)obj) - obj-&gt;handlers-&gt;offset);</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (GC_TYPE(p) == IS_ARRAY) &#123;</div><div class=\"line\">\t\t\t\tzend_array *arr = (zend_array*)p;</div><div class=\"line\"></div><div class=\"line\">\t\t\t\tGC_TYPE(arr) = IS_NULL;</div><div class=\"line\"></div><div class=\"line\">\t\t\t\t<span class=\"comment\">/* GC may destroy arrays with rc&gt;1. This is valid and safe. */</span></div><div class=\"line\">\t\t\t\tHT_ALLOW_COW_VIOLATION(arr);</div><div class=\"line\"></div><div class=\"line\">\t\t\t\tzend_hash_destroy(arr);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\tcurrent = GC_G(next_to_free);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"comment\">/* Free objects */</span></div><div class=\"line\">\t\tcurrent = to_free.next;</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (current != &amp;to_free) &#123;</div><div class=\"line\">\t\t\tnext = current-&gt;next;</div><div class=\"line\">\t\t\tp = current-&gt;ref;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (EXPECTED(current &gt;= GC_G(buf) &amp;&amp; current &lt; GC_G(buf) + GC_ROOT_BUFFER_MAX_ENTRIES)) &#123;</div><div class=\"line\">\t\t\t\tcurrent-&gt;prev = GC_G(unused);</div><div class=\"line\">\t\t\t\tGC_G(unused) = current;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\tefree(p);</div><div class=\"line\">\t\t\tcurrent = next;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (GC_G(additional_buffer) != additional_buffer_snapshot) &#123;</div><div class=\"line\">\t\t\tgc_additional_buffer *next = GC_G(additional_buffer)-&gt;next;</div><div class=\"line\">\t\t\tefree(GC_G(additional_buffer));</div><div class=\"line\">\t\t\tGC_G(additional_buffer) = next;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\tGC_TRACE(<span class=\"string\">\"Collection finished\"</span>);</div><div class=\"line\">\t\tGC_G(collected) += count;</div><div class=\"line\">\t\tGC_G(next_to_free) = orig_next_to_free;</div><div class=\"line\">\t\tGC_G(gc_active) = <span class=\"number\">0</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">return</span> count;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">gc_mark_roots</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\tgc_root_buffer *current = GC_G(roots).next;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">while</span> (current != &amp;GC_G(roots)) &#123;</div><div class=\"line\">\t\t<span class=\"comment\">//GC_PURPLE 标识在缓冲区</span></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (GC_REF_GET_COLOR(current-&gt;ref) == GC_PURPLE) &#123;</div><div class=\"line\">\t\t\tgc_mark_grey(current-&gt;ref);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tcurrent = current-&gt;next;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">gc_mark_grey</span><span class=\"params\">(zend_refcounted *ref)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    HashTable *ht;</div><div class=\"line\">\tBucket *p, *end;</div><div class=\"line\">\tzval *zv;</div><div class=\"line\"></div><div class=\"line\">tail_call:</div><div class=\"line\">\t<span class=\"keyword\">if</span> (GC_REF_GET_COLOR(ref) != GC_GREY) &#123;</div><div class=\"line\">\t\tht = <span class=\"literal\">NULL</span>;</div><div class=\"line\">\t\tGC_BENCH_INC(zval_marked_grey);</div><div class=\"line\">\t\tGC_REF_SET_COLOR(ref, GC_GREY);</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (GC_TYPE(ref) == IS_OBJECT) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">zend_object_get_gc_t</span> get_gc;</div><div class=\"line\">\t\t\tzend_object *obj = (zend_object*)ref;</div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (EXPECTED(!(GC_FLAGS(ref) &amp; IS_OBJ_FREE_CALLED) &amp;&amp;</div><div class=\"line\">\t\t                 (get_gc = obj-&gt;handlers-&gt;get_gc) != <span class=\"literal\">NULL</span>)) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> n;</div><div class=\"line\">\t\t\t\tzval *zv, *end;</div><div class=\"line\">\t\t\t\tzval tmp;</div><div class=\"line\"></div><div class=\"line\">\t\t\t\tZVAL_OBJ(&amp;tmp, obj);</div><div class=\"line\">\t\t\t\tht = get_gc(&amp;tmp, &amp;zv, &amp;n);</div><div class=\"line\">\t\t\t\tend = zv + n;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (EXPECTED(!ht)) &#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (!n) <span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">while</span> (!Z_REFCOUNTED_P(--end)) &#123;</div><div class=\"line\">\t\t\t\t\t\t<span class=\"comment\">//表明当前object size为0</span></div><div class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">if</span> (zv == end) <span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">while</span> (zv != end) &#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"comment\">//循环对每个元素进行--</span></div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (Z_REFCOUNTED_P(zv)) &#123;</div><div class=\"line\">\t\t\t\t\t\tref = Z_COUNTED_P(zv);</div><div class=\"line\">\t\t\t\t\t\tGC_REFCOUNT(ref)--;</div><div class=\"line\">\t\t\t\t\t\t<span class=\"comment\">//refcount已经减过，标记为灰色</span></div><div class=\"line\">\t\t\t\t\t\tgc_mark_grey(ref);</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t\tzv++;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (EXPECTED(!ht)) &#123;</div><div class=\"line\">\t\t\t\t\tref = Z_COUNTED_P(zv);</div><div class=\"line\">\t\t\t\t\tGC_REFCOUNT(ref)--;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">goto</span> tail_call;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (GC_TYPE(ref) == IS_ARRAY) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (((zend_array*)ref) == &amp;EG(symbol_table)) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"comment\">//标识是正常非垃圾</span></div><div class=\"line\">\t\t\t\tGC_REF_SET_BLACK(ref);</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t\tht = (zend_array*)ref;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (GC_TYPE(ref) == IS_REFERENCE) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (Z_REFCOUNTED(((zend_reference*)ref)-&gt;val)) &#123;</div><div class=\"line\">\t\t\t\tref = Z_COUNTED(((zend_reference*)ref)-&gt;val);</div><div class=\"line\">\t\t\t\tGC_REFCOUNT(ref)--;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">goto</span> tail_call;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (!ht-&gt;nNumUsed) <span class=\"keyword\">return</span>;</div><div class=\"line\">\t\tp = ht-&gt;arData;</div><div class=\"line\">\t\tend = p + ht-&gt;nNumUsed;</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (<span class=\"number\">1</span>) &#123;</div><div class=\"line\">\t\t\tend--;</div><div class=\"line\">\t\t\tzv = &amp;end-&gt;val;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (Z_TYPE_P(zv) == IS_INDIRECT) &#123;</div><div class=\"line\">\t\t\t\tzv = Z_INDIRECT_P(zv);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (Z_REFCOUNTED_P(zv)) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (p == end) <span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (p != end) &#123;</div><div class=\"line\">\t\t\tzv = &amp;p-&gt;val;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (Z_TYPE_P(zv) == IS_INDIRECT) &#123;</div><div class=\"line\">\t\t\t\tzv = Z_INDIRECT_P(zv);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (Z_REFCOUNTED_P(zv)) &#123;</div><div class=\"line\">\t\t\t\tref = Z_COUNTED_P(zv);</div><div class=\"line\">\t\t\t\tGC_REFCOUNT(ref)--;</div><div class=\"line\">\t\t\t\tgc_mark_grey(ref);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\tp++;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tzv = &amp;p-&gt;val;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (Z_TYPE_P(zv) == IS_INDIRECT) &#123;</div><div class=\"line\">\t\t\tzv = Z_INDIRECT_P(zv);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tref = Z_COUNTED_P(zv);</div><div class=\"line\">\t\tGC_REFCOUNT(ref)--;</div><div class=\"line\">\t\t<span class=\"keyword\">goto</span> tail_call;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">gc_scan</span><span class=\"params\">(zend_refcounted *ref)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    HashTable *ht;</div><div class=\"line\">\tBucket *p, *end;</div><div class=\"line\">\tzval *zv;</div><div class=\"line\"></div><div class=\"line\">tail_call:</div><div class=\"line\">\t<span class=\"keyword\">if</span> (GC_REF_GET_COLOR(ref) == GC_GREY) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (GC_REFCOUNT(ref) &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">//所有refount--以后如果还&gt;0，说明非垃圾</span></div><div class=\"line\">\t\t\tgc_scan_black(ref);</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">//否则则为垃圾</span></div><div class=\"line\">\t\t\tGC_REF_SET_COLOR(ref, GC_WHITE);</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (GC_TYPE(ref) == IS_OBJECT) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">zend_object_get_gc_t</span> get_gc;</div><div class=\"line\">\t\t\t\tzend_object *obj = (zend_object*)ref;</div><div class=\"line\"></div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (EXPECTED(!(GC_FLAGS(ref) &amp; IS_OBJ_FREE_CALLED) &amp;&amp;</div><div class=\"line\">\t\t\t\t             (get_gc = obj-&gt;handlers-&gt;get_gc) != <span class=\"literal\">NULL</span>)) &#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">int</span> n;</div><div class=\"line\">\t\t\t\t\tzval *zv, *end;</div><div class=\"line\">\t\t\t\t\tzval tmp;</div><div class=\"line\"></div><div class=\"line\">\t\t\t\t\tZVAL_OBJ(&amp;tmp, obj);</div><div class=\"line\">\t\t\t\t\tht = get_gc(&amp;tmp, &amp;zv, &amp;n);</div><div class=\"line\">\t\t\t\t\tend = zv + n;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (EXPECTED(!ht)) &#123;</div><div class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">if</span> (!n) <span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">while</span> (!Z_REFCOUNTED_P(--end)) &#123;</div><div class=\"line\">\t\t\t\t\t\t\t<span class=\"keyword\">if</span> (zv == end) <span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">while</span> (zv != end) &#123;</div><div class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">if</span> (Z_REFCOUNTED_P(zv)) &#123;</div><div class=\"line\">\t\t\t\t\t\t\tref = Z_COUNTED_P(zv);</div><div class=\"line\">\t\t\t\t\t\t\tgc_scan(ref);</div><div class=\"line\">\t\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t\t\tzv++;</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (EXPECTED(!ht)) &#123;</div><div class=\"line\">\t\t\t\t\t\tref = Z_COUNTED_P(zv);</div><div class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">goto</span> tail_call;</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (GC_TYPE(ref) == IS_ARRAY) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> ((zend_array*)ref == &amp;EG(symbol_table)) &#123;</div><div class=\"line\">\t\t\t\t\tGC_REF_SET_BLACK(ref);</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t\t\tht = (zend_array*)ref;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (GC_TYPE(ref) == IS_REFERENCE) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (Z_REFCOUNTED(((zend_reference*)ref)-&gt;val)) &#123;</div><div class=\"line\">\t\t\t\t\tref = Z_COUNTED(((zend_reference*)ref)-&gt;val);</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">goto</span> tail_call;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!ht-&gt;nNumUsed) <span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t\tp = ht-&gt;arData;</div><div class=\"line\">\t\t\tend = p + ht-&gt;nNumUsed;</div><div class=\"line\">\t\t\t<span class=\"keyword\">while</span> (<span class=\"number\">1</span>) &#123;</div><div class=\"line\">\t\t\t\tend--;</div><div class=\"line\">\t\t\t\tzv = &amp;end-&gt;val;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (Z_TYPE_P(zv) == IS_INDIRECT) &#123;</div><div class=\"line\">\t\t\t\t\tzv = Z_INDIRECT_P(zv);</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (Z_REFCOUNTED_P(zv)) &#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (p == end) <span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">while</span> (p != end) &#123;</div><div class=\"line\">\t\t\t\tzv = &amp;p-&gt;val;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (Z_TYPE_P(zv) == IS_INDIRECT) &#123;</div><div class=\"line\">\t\t\t\t\tzv = Z_INDIRECT_P(zv);</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (Z_REFCOUNTED_P(zv)) &#123;</div><div class=\"line\">\t\t\t\t\tref = Z_COUNTED_P(zv);</div><div class=\"line\">\t\t\t\t\tgc_scan(ref);</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\tp++;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\tzv = &amp;p-&gt;val;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (Z_TYPE_P(zv) == IS_INDIRECT) &#123;</div><div class=\"line\">\t\t\t\tzv = Z_INDIRECT_P(zv);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\tref = Z_COUNTED_P(zv);</div><div class=\"line\">\t\t\t<span class=\"keyword\">goto</span> tail_call;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>主要为三个函数：</p>\n<ul>\n<li><code>gc_mark_roots</code>队规遍历，对object、array所有元素的refcount–并将其标记为灰色</li>\n<li><code>gc_scan_roots</code>这个函数对节点信息的链表再次进行深度优先遍历，如果发现zval的refcount大于等于1，则对该zval和其包含的zval的refcount加1操作，这个是对非垃圾的一个信息还原，然后将这些zval颜色属性去掉(设置成black)。如果发现zval的refcount等于0，则就标记成白色，这些是后面将要清理掉的垃圾。</li>\n<li><code>gc_collect_roots</code> 遍历节点信息链表,将前面一个步骤中标记为白色的节点信息放到GC_G(zval_to_free)为入口的链表中，这个链表用来存放将要释放的垃圾。 然后释放掉全部的节点信息，缓冲区被清空。分析结束后将重新收集节点信息。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>php是如何实现内存管理的?内存管理无非包括内存分配、内存回收、以及内存使用优化。</p>\n<ul>\n<li>内存使用的优化</li>\n<li>垃圾回收机制</li>\n<li>底层内存分配</li>\n</ul>\n<h2 id=\"内存使用的优化\"><a href=\"#内存使用的优化\" class=\"headerlink\" title=\"内存使用的优化\"></a>内存使用的优化</h2><h3 id=\"引用计数\"><a href=\"#引用计数\" class=\"headerlink\" title=\"引用计数\"></a>引用计数</h3><p>php的引用中有个引用结构体</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">```c</div><div class=\"line\">struct _zend_reference &#123;</div><div class=\"line\">    zend_refcondted_h gc;</div><div class=\"line\">    zval              val;  指向原来的value.</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">其中`zend_refcondted_h` 便是gc便是当前变量被引用的次数,这个参数会在变量回收的时候用到。</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">zend_refcondted_h :</div><div class=\"line\"></div><div class=\"line\">```c</div><div class=\"line\">typedef struct _zend_refcounted_h &#123;</div><div class=\"line\">\tuint32_t         refcount;\t\t\t/* reference counter 32-bit */</div><div class=\"line\">\tunion &#123;</div><div class=\"line\">\t\tstruct &#123;</div><div class=\"line\">\t\t\tZEND_ENDIAN_LOHI_3(</div><div class=\"line\">\t\t\t\tzend_uchar    type,</div><div class=\"line\">\t\t\t\tzend_uchar    flags,    /* used for strings &amp; objects */</div><div class=\"line\">\t\t\t\tuint16_t      gc_info)  /* keeps GC root number (or 0) and color */</div><div class=\"line\">\t\t&#125; v;</div><div class=\"line\">\t\tuint32_t type_info;</div><div class=\"line\">\t&#125; u;</div><div class=\"line\">&#125; zend_refcounted_h;</div></pre></td></tr></table></figure>\n<p>在实际中这个结构体到底是什么样的? 具体可以举例来看。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$a = <span class=\"string\">'this is string'</span>; <span class=\"comment\">// zend_array (refcount = 1)  只有$a引用了zend_array</span></div><div class=\"line\">$b = &amp;$a; <span class=\"comment\">//   zend_array (refcount = 2)  $a、$b引用了zend_array</span></div><div class=\"line\">$c = $b; <span class=\"comment\">// zend_array (refcount = 3)  $a、$b、$c引用了zend_array</span></div><div class=\"line\"><span class=\"keyword\">unset</span>($b); <span class=\"comment\">// zend_array (refcount = 2)  $a、$c引用了zend_array</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>并不是所有的变量类型都会使用引用计数, 例如 <code>整形</code>、<code>浮点型</code>、<code>布尔型</code>、<code>NUll</code>(在php中这是一个变量类型)等采用了深拷贝,<br>即只要这几种变量赋值, 就会申请一款一块内存写入一个新的变量结构（注意这里不是引用结构）,当然这些类型不会公用value。</p>\n</blockquote>\n<h3 id=\"写时复制\"><a href=\"#写时复制\" class=\"headerlink\" title=\"写时复制\"></a>写时复制</h3><p>当然只有引用计数是不够的, 因为变量会发生赋值的情况。所以在更改某一个变量时, 会对原来的变量进行拷贝并赋值。</p>\n<p>举个栗子:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$foo = time();</div><div class=\"line\">$bar = &amp;$b;</div><div class=\"line\">$si = $a;</div><div class=\"line\"></div><div class=\"line\">$c = &apos;123&apos;;</div></pre></td></tr></table></figure>\n<p>具体数据结构的引用计数情况如下图:</p>\n<p><img src=\"/photo/img/php内存管理/写时复制.png\" alt=\"image\"></p>\n<h2 id=\"内存回收\"><a href=\"#内存回收\" class=\"headerlink\" title=\"内存回收\"></a>内存回收</h2><h3 id=\"自动gc\"><a href=\"#自动gc\" class=\"headerlink\" title=\"自动gc\"></a>自动gc</h3><p>在zend数据接口中有一个gc.refount,他是自动gc的关键。</p>\n<p>在自动gc机制中,如果zval不在指向value且当前value的gc.refount为0时,会直接释放value。这种情况多发生于函数返回时（销毁所有局部变量）、变量修改时、以及unset操作的时候。</p>\n<h3 id=\"辣鸡回收\"><a href=\"#辣鸡回收\" class=\"headerlink\" title=\"辣鸡回收\"></a>辣鸡回收</h3><p>除了自动gc,还有一种是自动gc无法处理的垃圾, 这种情况称为<code>循环引用</code>。顾名思义也就是自身内部变量引用了自身, 这种情况常出现与object和array。当我该变量zval被销毁是, 与其对应的value gc.refcount -1,<br>但是因为有自身变量指向自身, 所以就陷入了一个循环:如果不销毁自身变量 value gc.refcount就无法自动gc, 只有自动gc才会销毁value。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">$a = [<span class=\"number\">1</span>];</div><div class=\"line\">$a[] = &amp;$a;</div><div class=\"line\"><span class=\"keyword\">unset</span>($a);</div></pre></td></tr></table></figure>\n<p><img src=\"/photo/img/php内存管理/自身引用.png\" alt=\"image\"></p>\n<p><code>unset($a)</code>执行以后</p>\n<p><img src=\"/photo/img/php内存管理/释放.png\" alt=\"image\"></p>\n<p>由于\b上述情况导致无法自动gc,所以需要引入另外一钟垃圾回收机制-垃圾回收器。<br>现在会存在两种情况的数据需要回收：</p>\n<ul>\n<li>当value的gc.refcount =0 是需要回收。</li>\n<li>当value的gc.refcount 减少不等于0，但是存在循环引用时。</li>\n</ul>\n<h3 id=\"回收机制\"><a href=\"#回收机制\" class=\"headerlink\" title=\"回收机制\"></a>回收机制</h3><p>当发生value gc.refcount减少时，垃圾回收机制会把可能是垃圾的value存起来， 当可能是辣鸡的value到达一定数量的时候启动垃圾鉴别程序，统一处理垃圾。当然这里的value类型只有object和array。</p>\n<p>垃圾兼备程序：<br>其实垃圾鉴别程序很简单，递归遍历自身value，查看是否存在指向自身的即可。</p>\n<p>code:<br>gc 初始化<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">ZEND_API void gc_init(void)</div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (GC_G(buf) == <span class=\"keyword\">NULL</span> &amp;&amp; GC_G(gc_enabled)) &#123;</div><div class=\"line\">\t\t<span class=\"comment\">//初始化buf\b内存区域，大小为sizeof(gc_root_buffer) * //GC_ROOT_BUFFER_MAX_ENTRIES</span></div><div class=\"line\">\t\tGC_G(buf) = (gc_root_buffer*) malloc(sizeof(gc_root_buffer) * GC_ROOT_BUFFER_MAX_ENTRIES);</div><div class=\"line\">\t\t<span class=\"comment\">//设置_zend_gc_globals.last_unused为\b\bbug入口位置</span></div><div class=\"line\">\t\tGC_G(last_unused) = &amp;GC_G(buf)[GC_ROOT_BUFFER_MAX_ENTRIES];</div><div class=\"line\">\t\t<span class=\"comment\">//初始化_zend_gc_globals的参数</span></div><div class=\"line\">\t\tgc_reset();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>垃圾回收及其依赖 <code>_zend_gc_globals</code></p>\n<p><code>_zend_gc_globals</code><br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> _zend_gc_globals &#123;</div><div class=\"line\">\tzend_bool         gc_enabled;</div><div class=\"line\">\tzend_bool         gc_active;</div><div class=\"line\">\tzend_bool         gc_full;</div><div class=\"line\"></div><div class=\"line\">\tgc_root_buffer   *buf;\t\t\t\t<span class=\"comment\">/* preallocated arrays of buffers   */</span></div><div class=\"line\">\tgc_root_buffer    roots;\t\t\t<span class=\"comment\">/* list of possible roots of cycles */</span></div><div class=\"line\">\tgc_root_buffer   *unused;\t\t\t<span class=\"comment\">/* list of unused buffers           */</span></div><div class=\"line\">\tgc_root_buffer   *first_unused;\t\t<span class=\"comment\">/* pointer to first unused buffer   */</span></div><div class=\"line\">\tgc_root_buffer   *last_unused;\t\t<span class=\"comment\">/* pointer to last unused buffer    */</span></div><div class=\"line\"></div><div class=\"line\">\tgc_root_buffer    to_free;\t\t\t<span class=\"comment\">/* list to free                     */</span></div><div class=\"line\">\tgc_root_buffer   *next_to_free;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">uint32_t</span> gc_runs;</div><div class=\"line\">\t<span class=\"keyword\">uint32_t</span> collected;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> GC_BENCH</span></div><div class=\"line\">\t<span class=\"keyword\">uint32_t</span> root_buf_length;</div><div class=\"line\">\t<span class=\"keyword\">uint32_t</span> root_buf_peak;</div><div class=\"line\">\t<span class=\"keyword\">uint32_t</span> zval_possible_root;</div><div class=\"line\">\t<span class=\"keyword\">uint32_t</span> zval_buffered;</div><div class=\"line\">\t<span class=\"keyword\">uint32_t</span> zval_remove_from_buffer;</div><div class=\"line\">\t<span class=\"keyword\">uint32_t</span> zval_marked_grey;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\"></div><div class=\"line\">\tgc_additional_buffer *additional_buffer;</div><div class=\"line\"></div><div class=\"line\">&#125; zend_gc_globals;</div></pre></td></tr></table></figure></p>\n<ul>\n<li><code>gc_enabled</code> 是否使使用gc</li>\n<li><code>gc_active</code>  是否在垃圾检查的过程中</li>\n<li><code>gc_full</code> buf缓冲区是否已满</li>\n<li><code>*buf</code> 与分配用于保存可能为垃圾的value</li>\n<li><code>roots</code> 指向buf最新加入的一个可能垃圾</li>\n<li><code>unused</code> 指向第未使用的buffer</li>\n<li><code>*first_unused</code> 指向第一个没用使用buffer</li>\n<li><code>*last_unused</code> 指向buffer的尾部</li>\n<li><code>to_free</code> 等待释放的buffer</li>\n<li><code>gc_runs</code>  统计gc运行的次数</li>\n<li><code>collected</code>  统计已经释放的垃圾数</li>\n</ul>\n<p>php垃圾回收中几个重要的颜色写在zeng_gc的备注中。<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">* BLACK  (GC_BLACK)   - In use or <span class=\"built_in\">free</span>.</div><div class=\"line\">* GREY   (GC_GREY)    - Possible member of cycle.</div><div class=\"line\">* WHITE  (GC_WHITE)   - Member of garbage cycle.</div><div class=\"line\">* PURPLE (GC_PURPLE)  - Possible root of cycle.</div></pre></td></tr></table></figure></p>\n<ul>\n<li>GC_WHITE 白色表示垃圾</li>\n<li>GC_PURPLE 紫色表示已放入缓冲区</li>\n<li>GC_GREY 灰色表示已经进行了一次refcount的减一操作</li>\n<li>GC_BLACK 黑色是默认颜色，正常</li>\n</ul>\n<p>gc过程中主要处理功能的函数<code>zend_gc_collect_cycles</code></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\">ZEND_API <span class=\"keyword\">void</span> ZEND_FASTCALL <span class=\"title\">gc_possible_root</span><span class=\"params\">(zend_refcounted *ref)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\tgc_root_buffer *newRoot;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> (UNEXPECTED(CG(unclean_shutdown)) || UNEXPECTED(GC_G(gc_active))) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tZEND_ASSERT(GC_TYPE(ref) == IS_ARRAY || GC_TYPE(ref) == IS_OBJECT);</div><div class=\"line\">\tZEND_ASSERT(EXPECTED(GC_REF_GET_COLOR(ref) == GC_BLACK));</div><div class=\"line\">\tZEND_ASSERT(!GC_ADDRESS(GC_INFO(ref)));</div><div class=\"line\"></div><div class=\"line\">\tGC_BENCH_INC(zval_possible_root);</div><div class=\"line\"></div><div class=\"line\">\tnewRoot = GC_G(unused);</div><div class=\"line\">\t<span class=\"keyword\">if</span> (newRoot) &#123;</div><div class=\"line\">\t\tGC_G(unused) = newRoot-&gt;prev;</div><div class=\"line\">\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (GC_G(first_unused) != GC_G(last_unused)) &#123;</div><div class=\"line\">\t\tnewRoot = GC_G(first_unused);</div><div class=\"line\">\t\tGC_G(first_unused)++;</div><div class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t<span class=\"comment\">//垃圾处理，当缓冲区满时，程序调用gc_collect_cycles函数，执行垃圾回收操作。 其中最关键的几步就是</span></div><div class=\"line\">\t\t<span class=\"comment\">//如果当前处于可以gc的状态</span></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (!GC_G(gc_enabled)) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tGC_REFCOUNT(ref)++;</div><div class=\"line\">\t\t<span class=\"comment\">//垃圾回收</span></div><div class=\"line\">\t\tgc_collect_cycles();</div><div class=\"line\">\t\tGC_REFCOUNT(ref)--;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (UNEXPECTED(GC_REFCOUNT(ref)) == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">\t\t\tzval_dtor_func(ref);</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (UNEXPECTED(GC_INFO(ref))) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tnewRoot = GC_G(unused);</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (!newRoot) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tGC_G(unused) = newRoot-&gt;prev;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tGC_TRACE_SET_COLOR(ref, GC_PURPLE);</div><div class=\"line\">\tGC_INFO(ref) = (newRoot - GC_G(buf)) | GC_PURPLE;</div><div class=\"line\">\tnewRoot-&gt;ref = ref;</div><div class=\"line\"></div><div class=\"line\">\tnewRoot-&gt;next = GC_G(roots).next;</div><div class=\"line\">\tnewRoot-&gt;prev = &amp;GC_G(roots);</div><div class=\"line\">\tGC_G(roots).next-&gt;prev = newRoot;</div><div class=\"line\">\tGC_G(roots).next = newRoot;</div><div class=\"line\"></div><div class=\"line\">\tGC_BENCH_INC(zval_buffered);</div><div class=\"line\">\tGC_BENCH_INC(root_buf_length);</div><div class=\"line\">\tGC_BENCH_PEAK(root_buf_peak, root_buf_length);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>\bdebug代码已删除</p>\n<ol>\n<li>\b深度优先对对象或者数据的每一个元素的<code>refcount--</code>并将其标记为灰色</li>\n<li>深度遍历root的每个每个变量，如果此时变量的<code>refcount</code>为0，则代表着改变量为垃圾，将其标记为垃圾，如果不为0，则将其标记为黑色（正常）。</li>\n<li>检查roots清除标记为白色的垃圾。</li>\n</ol>\n<p>//TODO 垃圾回收抽出来出来写。</p>\n<p>具体代码：<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div></pre></td><td class=\"code\"><pre><div class=\"line\">ZEND_API int zend_gc_collect_cycles(void)</div><div class=\"line\">&#123;</div><div class=\"line\">\tint count = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> (GC_G(roots).next != &amp;GC_G(roots)) &#123;</div><div class=\"line\">\t\tgc_root_buffer *current, *next, *orig_next_to_free;</div><div class=\"line\">\t\tzend_refcounted *p;</div><div class=\"line\">\t\tgc_root_buffer to_free;</div><div class=\"line\">\t\tuint32_t gc_flags = <span class=\"number\">0</span>;</div><div class=\"line\">\t\tgc_additional_buffer *additional_buffer_snapshot;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (GC_G(gc_active)) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\tGC_TRACE(<span class=\"string\">\"Collecting cycles\"</span>);</div><div class=\"line\">\t\t<span class=\"comment\">//标识gc运行了多少次</span></div><div class=\"line\">\t\tGC_G(gc_runs)++;</div><div class=\"line\">\t\t<span class=\"comment\">//标识当前正在gc</span></div><div class=\"line\">\t\tGC_G(gc_active) = <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\">\t\tGC_TRACE(<span class=\"string\">\"Marking roots\"</span>);</div><div class=\"line\">\t\t<span class=\"comment\">//重点</span></div><div class=\"line\">\t\tgc_mark_roots();</div><div class=\"line\">\t\tGC_TRACE(<span class=\"string\">\"Scanning roots\"</span>);</div><div class=\"line\">\t\t<span class=\"comment\">//重点</span></div><div class=\"line\">\t\tgc_scan_roots();</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">\t\tGC_TRACE(<span class=\"string\">\"Collecting roots\"</span>);</div><div class=\"line\">\t\tadditional_buffer_snapshot = GC_G(additional_buffer);</div><div class=\"line\">\t\tcount = gc_collect_roots(&amp;gc_flags);</div><div class=\"line\"></div><div class=\"line\">\t\tGC_G(gc_active) = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (GC_G(to_free).next == &amp;GC_G(to_free)) &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">/* nothing to free */</span></div><div class=\"line\">\t\t\tGC_TRACE(<span class=\"string\">\"Nothing to free\"</span>);</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"comment\">/* Copy global to_free list into local list */</span></div><div class=\"line\">\t\tto_free.next = GC_G(to_free).next;</div><div class=\"line\">\t\tto_free.prev = GC_G(to_free).prev;</div><div class=\"line\">\t\tto_free.next-&gt;prev = &amp;to_free;</div><div class=\"line\">\t\tto_free.prev-&gt;next = &amp;to_free;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"comment\">/* Free global list */</span></div><div class=\"line\">\t\tGC_G(to_free).next = &amp;GC_G(to_free);</div><div class=\"line\">\t\tGC_G(to_free).prev = &amp;GC_G(to_free);</div><div class=\"line\"></div><div class=\"line\">\t\torig_next_to_free = GC_G(next_to_free);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (gc_flags &amp; GC_HAS_DESTRUCTORS) &#123;</div><div class=\"line\">\t\t\tGC_TRACE(<span class=\"string\">\"Calling destructors\"</span>);</div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"comment\">/* Remember reference counters before calling destructors */</span></div><div class=\"line\">\t\t\tcurrent = to_free.next;</div><div class=\"line\">\t\t\t<span class=\"keyword\">while</span> (current != &amp;to_free) &#123;</div><div class=\"line\">\t\t\t\tcurrent-&gt;refcount = GC_REFCOUNT(current-&gt;ref);</div><div class=\"line\">\t\t\t\tcurrent = current-&gt;next;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"comment\">/* Call destructors */</span></div><div class=\"line\">\t\t\tcurrent = to_free.next;</div><div class=\"line\">\t\t\t<span class=\"keyword\">while</span> (current != &amp;to_free) &#123;</div><div class=\"line\">\t\t\t\tp = current-&gt;ref;</div><div class=\"line\">\t\t\t\tGC_G(next_to_free) = current-&gt;next;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (GC_TYPE(p) == IS_OBJECT) &#123;</div><div class=\"line\">\t\t\t\t\tzend_object *obj = (zend_object*)p;</div><div class=\"line\"></div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (!(GC_FLAGS(obj) &amp; IS_OBJ_DESTRUCTOR_CALLED)) &#123;</div><div class=\"line\">\t\t\t\t\t\tGC_TRACE_REF(obj, <span class=\"string\">\"calling destructor\"</span>);</div><div class=\"line\">\t\t\t\t\t\tGC_FLAGS(obj) |= IS_OBJ_DESTRUCTOR_CALLED;</div><div class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">if</span> (obj-&gt;handlers-&gt;dtor_obj</div><div class=\"line\">\t\t\t\t\t\t &amp;&amp; (obj-&gt;handlers-&gt;dtor_obj != zend_objects_destroy_object</div><div class=\"line\">\t\t\t\t\t\t  || obj-&gt;ce-&gt;destructor)) &#123;</div><div class=\"line\">\t\t\t\t\t\t\tGC_REFCOUNT(obj)++;</div><div class=\"line\">\t\t\t\t\t\t\tobj-&gt;handlers-&gt;dtor_obj(obj);</div><div class=\"line\">\t\t\t\t\t\t\tGC_REFCOUNT(obj)--;</div><div class=\"line\">\t\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\tcurrent = GC_G(next_to_free);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"comment\">/* Remove values captured in destructors */</span></div><div class=\"line\">\t\t\tcurrent = to_free.next;</div><div class=\"line\">\t\t\t<span class=\"keyword\">while</span> (current != &amp;to_free) &#123;</div><div class=\"line\">\t\t\t\tGC_G(next_to_free) = current-&gt;next;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (GC_REFCOUNT(current-&gt;ref) &gt; current-&gt;refcount) &#123;</div><div class=\"line\">\t\t\t\t\tgc_remove_nested_data_from_buffer(current-&gt;ref, current);</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\tcurrent = GC_G(next_to_free);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"comment\">/* Destroy zvals */</span></div><div class=\"line\">\t\tGC_TRACE(<span class=\"string\">\"Destroying zvals\"</span>);</div><div class=\"line\">\t\tGC_G(gc_active) = <span class=\"number\">1</span>;</div><div class=\"line\">\t\tcurrent = to_free.next;</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (current != &amp;to_free) &#123;</div><div class=\"line\">\t\t\tp = current-&gt;ref;</div><div class=\"line\">\t\t\tGC_G(next_to_free) = current-&gt;next;</div><div class=\"line\">\t\t\tGC_TRACE_REF(p, <span class=\"string\">\"destroying\"</span>);</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (GC_TYPE(p) == IS_OBJECT) &#123;</div><div class=\"line\">\t\t\t\tzend_object *obj = (zend_object*)p;</div><div class=\"line\"></div><div class=\"line\">\t\t\t\tEG(objects_store).object_buckets[obj-&gt;handle] = SET_OBJ_INVALID(obj);</div><div class=\"line\">\t\t\t\tGC_TYPE(obj) = IS_NULL;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (!(GC_FLAGS(obj) &amp; IS_OBJ_FREE_CALLED)) &#123;</div><div class=\"line\">\t\t\t\t\tGC_FLAGS(obj) |= IS_OBJ_FREE_CALLED;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (obj-&gt;handlers-&gt;free_obj) &#123;</div><div class=\"line\">\t\t\t\t\t\tGC_REFCOUNT(obj)++;</div><div class=\"line\">\t\t\t\t\t\tobj-&gt;handlers-&gt;free_obj(obj);</div><div class=\"line\">\t\t\t\t\t\tGC_REFCOUNT(obj)--;</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\tSET_OBJ_BUCKET_NUMBER(EG(objects_store).object_buckets[obj-&gt;handle], EG(objects_store).free_list_head);</div><div class=\"line\">\t\t\t\tEG(objects_store).free_list_head = obj-&gt;handle;</div><div class=\"line\">\t\t\t\tp = current-&gt;ref = (zend_refcounted*)(((char*)obj) - obj-&gt;handlers-&gt;offset);</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (GC_TYPE(p) == IS_ARRAY) &#123;</div><div class=\"line\">\t\t\t\tzend_array *arr = (zend_array*)p;</div><div class=\"line\"></div><div class=\"line\">\t\t\t\tGC_TYPE(arr) = IS_NULL;</div><div class=\"line\"></div><div class=\"line\">\t\t\t\t<span class=\"comment\">/* GC may destroy arrays with rc&gt;1. This is valid and safe. */</span></div><div class=\"line\">\t\t\t\tHT_ALLOW_COW_VIOLATION(arr);</div><div class=\"line\"></div><div class=\"line\">\t\t\t\tzend_hash_destroy(arr);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\tcurrent = GC_G(next_to_free);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"comment\">/* Free objects */</span></div><div class=\"line\">\t\tcurrent = to_free.next;</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (current != &amp;to_free) &#123;</div><div class=\"line\">\t\t\tnext = current-&gt;next;</div><div class=\"line\">\t\t\tp = current-&gt;ref;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (EXPECTED(current &gt;= GC_G(buf) &amp;&amp; current &lt; GC_G(buf) + GC_ROOT_BUFFER_MAX_ENTRIES)) &#123;</div><div class=\"line\">\t\t\t\tcurrent-&gt;prev = GC_G(unused);</div><div class=\"line\">\t\t\t\tGC_G(unused) = current;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\tefree(p);</div><div class=\"line\">\t\t\tcurrent = next;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (GC_G(additional_buffer) != additional_buffer_snapshot) &#123;</div><div class=\"line\">\t\t\tgc_additional_buffer *next = GC_G(additional_buffer)-&gt;next;</div><div class=\"line\">\t\t\tefree(GC_G(additional_buffer));</div><div class=\"line\">\t\t\tGC_G(additional_buffer) = next;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\tGC_TRACE(<span class=\"string\">\"Collection finished\"</span>);</div><div class=\"line\">\t\tGC_G(collected) += count;</div><div class=\"line\">\t\tGC_G(next_to_free) = orig_next_to_free;</div><div class=\"line\">\t\tGC_G(gc_active) = <span class=\"number\">0</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">return</span> count;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">gc_mark_roots</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\tgc_root_buffer *current = GC_G(roots).next;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">while</span> (current != &amp;GC_G(roots)) &#123;</div><div class=\"line\">\t\t<span class=\"comment\">//GC_PURPLE 标识在缓冲区</span></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (GC_REF_GET_COLOR(current-&gt;ref) == GC_PURPLE) &#123;</div><div class=\"line\">\t\t\tgc_mark_grey(current-&gt;ref);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tcurrent = current-&gt;next;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">gc_mark_grey</span><span class=\"params\">(zend_refcounted *ref)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    HashTable *ht;</div><div class=\"line\">\tBucket *p, *end;</div><div class=\"line\">\tzval *zv;</div><div class=\"line\"></div><div class=\"line\">tail_call:</div><div class=\"line\">\t<span class=\"keyword\">if</span> (GC_REF_GET_COLOR(ref) != GC_GREY) &#123;</div><div class=\"line\">\t\tht = <span class=\"literal\">NULL</span>;</div><div class=\"line\">\t\tGC_BENCH_INC(zval_marked_grey);</div><div class=\"line\">\t\tGC_REF_SET_COLOR(ref, GC_GREY);</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (GC_TYPE(ref) == IS_OBJECT) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">zend_object_get_gc_t</span> get_gc;</div><div class=\"line\">\t\t\tzend_object *obj = (zend_object*)ref;</div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (EXPECTED(!(GC_FLAGS(ref) &amp; IS_OBJ_FREE_CALLED) &amp;&amp;</div><div class=\"line\">\t\t                 (get_gc = obj-&gt;handlers-&gt;get_gc) != <span class=\"literal\">NULL</span>)) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> n;</div><div class=\"line\">\t\t\t\tzval *zv, *end;</div><div class=\"line\">\t\t\t\tzval tmp;</div><div class=\"line\"></div><div class=\"line\">\t\t\t\tZVAL_OBJ(&amp;tmp, obj);</div><div class=\"line\">\t\t\t\tht = get_gc(&amp;tmp, &amp;zv, &amp;n);</div><div class=\"line\">\t\t\t\tend = zv + n;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (EXPECTED(!ht)) &#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (!n) <span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">while</span> (!Z_REFCOUNTED_P(--end)) &#123;</div><div class=\"line\">\t\t\t\t\t\t<span class=\"comment\">//表明当前object size为0</span></div><div class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">if</span> (zv == end) <span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">while</span> (zv != end) &#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"comment\">//循环对每个元素进行--</span></div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (Z_REFCOUNTED_P(zv)) &#123;</div><div class=\"line\">\t\t\t\t\t\tref = Z_COUNTED_P(zv);</div><div class=\"line\">\t\t\t\t\t\tGC_REFCOUNT(ref)--;</div><div class=\"line\">\t\t\t\t\t\t<span class=\"comment\">//refcount已经减过，标记为灰色</span></div><div class=\"line\">\t\t\t\t\t\tgc_mark_grey(ref);</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t\tzv++;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (EXPECTED(!ht)) &#123;</div><div class=\"line\">\t\t\t\t\tref = Z_COUNTED_P(zv);</div><div class=\"line\">\t\t\t\t\tGC_REFCOUNT(ref)--;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">goto</span> tail_call;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (GC_TYPE(ref) == IS_ARRAY) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (((zend_array*)ref) == &amp;EG(symbol_table)) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"comment\">//标识是正常非垃圾</span></div><div class=\"line\">\t\t\t\tGC_REF_SET_BLACK(ref);</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t\tht = (zend_array*)ref;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (GC_TYPE(ref) == IS_REFERENCE) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (Z_REFCOUNTED(((zend_reference*)ref)-&gt;val)) &#123;</div><div class=\"line\">\t\t\t\tref = Z_COUNTED(((zend_reference*)ref)-&gt;val);</div><div class=\"line\">\t\t\t\tGC_REFCOUNT(ref)--;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">goto</span> tail_call;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (!ht-&gt;nNumUsed) <span class=\"keyword\">return</span>;</div><div class=\"line\">\t\tp = ht-&gt;arData;</div><div class=\"line\">\t\tend = p + ht-&gt;nNumUsed;</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (<span class=\"number\">1</span>) &#123;</div><div class=\"line\">\t\t\tend--;</div><div class=\"line\">\t\t\tzv = &amp;end-&gt;val;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (Z_TYPE_P(zv) == IS_INDIRECT) &#123;</div><div class=\"line\">\t\t\t\tzv = Z_INDIRECT_P(zv);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (Z_REFCOUNTED_P(zv)) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (p == end) <span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">while</span> (p != end) &#123;</div><div class=\"line\">\t\t\tzv = &amp;p-&gt;val;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (Z_TYPE_P(zv) == IS_INDIRECT) &#123;</div><div class=\"line\">\t\t\t\tzv = Z_INDIRECT_P(zv);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (Z_REFCOUNTED_P(zv)) &#123;</div><div class=\"line\">\t\t\t\tref = Z_COUNTED_P(zv);</div><div class=\"line\">\t\t\t\tGC_REFCOUNT(ref)--;</div><div class=\"line\">\t\t\t\tgc_mark_grey(ref);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\tp++;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tzv = &amp;p-&gt;val;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (Z_TYPE_P(zv) == IS_INDIRECT) &#123;</div><div class=\"line\">\t\t\tzv = Z_INDIRECT_P(zv);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tref = Z_COUNTED_P(zv);</div><div class=\"line\">\t\tGC_REFCOUNT(ref)--;</div><div class=\"line\">\t\t<span class=\"keyword\">goto</span> tail_call;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">gc_scan</span><span class=\"params\">(zend_refcounted *ref)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    HashTable *ht;</div><div class=\"line\">\tBucket *p, *end;</div><div class=\"line\">\tzval *zv;</div><div class=\"line\"></div><div class=\"line\">tail_call:</div><div class=\"line\">\t<span class=\"keyword\">if</span> (GC_REF_GET_COLOR(ref) == GC_GREY) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (GC_REFCOUNT(ref) &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">//所有refount--以后如果还&gt;0，说明非垃圾</span></div><div class=\"line\">\t\t\tgc_scan_black(ref);</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">//否则则为垃圾</span></div><div class=\"line\">\t\t\tGC_REF_SET_COLOR(ref, GC_WHITE);</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (GC_TYPE(ref) == IS_OBJECT) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">zend_object_get_gc_t</span> get_gc;</div><div class=\"line\">\t\t\t\tzend_object *obj = (zend_object*)ref;</div><div class=\"line\"></div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (EXPECTED(!(GC_FLAGS(ref) &amp; IS_OBJ_FREE_CALLED) &amp;&amp;</div><div class=\"line\">\t\t\t\t             (get_gc = obj-&gt;handlers-&gt;get_gc) != <span class=\"literal\">NULL</span>)) &#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">int</span> n;</div><div class=\"line\">\t\t\t\t\tzval *zv, *end;</div><div class=\"line\">\t\t\t\t\tzval tmp;</div><div class=\"line\"></div><div class=\"line\">\t\t\t\t\tZVAL_OBJ(&amp;tmp, obj);</div><div class=\"line\">\t\t\t\t\tht = get_gc(&amp;tmp, &amp;zv, &amp;n);</div><div class=\"line\">\t\t\t\t\tend = zv + n;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (EXPECTED(!ht)) &#123;</div><div class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">if</span> (!n) <span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">while</span> (!Z_REFCOUNTED_P(--end)) &#123;</div><div class=\"line\">\t\t\t\t\t\t\t<span class=\"keyword\">if</span> (zv == end) <span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">while</span> (zv != end) &#123;</div><div class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">if</span> (Z_REFCOUNTED_P(zv)) &#123;</div><div class=\"line\">\t\t\t\t\t\t\tref = Z_COUNTED_P(zv);</div><div class=\"line\">\t\t\t\t\t\t\tgc_scan(ref);</div><div class=\"line\">\t\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t\t\tzv++;</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (EXPECTED(!ht)) &#123;</div><div class=\"line\">\t\t\t\t\t\tref = Z_COUNTED_P(zv);</div><div class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">goto</span> tail_call;</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (GC_TYPE(ref) == IS_ARRAY) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> ((zend_array*)ref == &amp;EG(symbol_table)) &#123;</div><div class=\"line\">\t\t\t\t\tGC_REF_SET_BLACK(ref);</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t\t\tht = (zend_array*)ref;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (GC_TYPE(ref) == IS_REFERENCE) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (Z_REFCOUNTED(((zend_reference*)ref)-&gt;val)) &#123;</div><div class=\"line\">\t\t\t\t\tref = Z_COUNTED(((zend_reference*)ref)-&gt;val);</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">goto</span> tail_call;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!ht-&gt;nNumUsed) <span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t\tp = ht-&gt;arData;</div><div class=\"line\">\t\t\tend = p + ht-&gt;nNumUsed;</div><div class=\"line\">\t\t\t<span class=\"keyword\">while</span> (<span class=\"number\">1</span>) &#123;</div><div class=\"line\">\t\t\t\tend--;</div><div class=\"line\">\t\t\t\tzv = &amp;end-&gt;val;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (Z_TYPE_P(zv) == IS_INDIRECT) &#123;</div><div class=\"line\">\t\t\t\t\tzv = Z_INDIRECT_P(zv);</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (Z_REFCOUNTED_P(zv)) &#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (p == end) <span class=\"keyword\">return</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">while</span> (p != end) &#123;</div><div class=\"line\">\t\t\t\tzv = &amp;p-&gt;val;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (Z_TYPE_P(zv) == IS_INDIRECT) &#123;</div><div class=\"line\">\t\t\t\t\tzv = Z_INDIRECT_P(zv);</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (Z_REFCOUNTED_P(zv)) &#123;</div><div class=\"line\">\t\t\t\t\tref = Z_COUNTED_P(zv);</div><div class=\"line\">\t\t\t\t\tgc_scan(ref);</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\tp++;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\tzv = &amp;p-&gt;val;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (Z_TYPE_P(zv) == IS_INDIRECT) &#123;</div><div class=\"line\">\t\t\t\tzv = Z_INDIRECT_P(zv);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\tref = Z_COUNTED_P(zv);</div><div class=\"line\">\t\t\t<span class=\"keyword\">goto</span> tail_call;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>主要为三个函数：</p>\n<ul>\n<li><code>gc_mark_roots</code>队规遍历，对object、array所有元素的refcount–并将其标记为灰色</li>\n<li><code>gc_scan_roots</code>这个函数对节点信息的链表再次进行深度优先遍历，如果发现zval的refcount大于等于1，则对该zval和其包含的zval的refcount加1操作，这个是对非垃圾的一个信息还原，然后将这些zval颜色属性去掉(设置成black)。如果发现zval的refcount等于0，则就标记成白色，这些是后面将要清理掉的垃圾。</li>\n<li><code>gc_collect_roots</code> 遍历节点信息链表,将前面一个步骤中标记为白色的节点信息放到GC_G(zval_to_free)为入口的链表中，这个链表用来存放将要释放的垃圾。 然后释放掉全部的节点信息，缓冲区被清空。分析结束后将重新收集节点信息。</li>\n</ul>\n"},{"title":"php数组实现","date":"2018-08-20T12:00:08.000Z","_content":"\nphp的数组依赖于hashtable实现的。\n\nTimes33的算法很简单，就是不断的乘33,下边是times33算法:\n\n## Times33(hash)\n\n```php\n<?php\nfunction myHash($str) {\n    // hash(i) = hash(i-1) * 33 + str[i]\n    $hash = 5381;\n    $s    = md5($str); //相比其它版本，进行了md5加密\n    $seed = 5;\n    $len  = 32;//加密后长度32\n    for ($i = 0; $i < $len; $i++) {\n        // (hash << 5) + hash 相当于 hash * 33\n        //$hash = sprintf(\"%u\", $hash * 33) + ord($s{$i});\n        //$hash = ($hash * 33 + ord($s{$i})) & 0x7FFFFFFF;\n        $hash = ($hash << $seed) + $hash + ord($s{$i});\n    }\n \n    return $hash & 0x7FFFFFFF;\n}\n```\n\n其中`<<` 表示左移,每次左移表示x2例如:\n\n```php\n<?php\n$num = 2;\n\necho $num << 2;\n```\n\n所以($hash << $seed)表示 `$hash * 32` ,同时加上$hash,也就表示 `$hash * 33`了。ord()函数返回字符串的首个字符的 ASCII 值。\n最后`$hash & 0x7FFFFFFF` 表示与整形的最大值与操作(`0x7FFFF111FFF`二进制为`1111111111111111111111111111`),\n这个与操作会截取超过整形二进制部分,所以times33计算出来的值不会超过整形的最大值。\n\n## 为什么要用hashtable实现php数组?\n\n因为散列表是根据关键建码值直接进项访问的数据结构。在key和value之间有一个映射函数,可以根据key直接索引到对应的value值,它并\n不会使用一般的对比操作,而是直接使用`内存的起始位置和偏移位置`进行寻址,所以会比正常的寻址要快。\n\n\n## 散列表结构\n\n```c\nstruct _zend_array {\n\tzend_refcounted_h gc;\n\tunion {\n\t\tstruct {\n\t\t\tZEND_ENDIAN_LOHI_4(\n\t\t\t\tzend_uchar    flags,\n\t\t\t\tzend_uchar    nApplyCount,\n\t\t\t\tzend_uchar    nIteratorsCount,\n\t\t\t\tzend_uchar    reserve)\n\t\t} v;\n\t\tuint32_t flags;\n\t} u;\n\tuint32_t          nTableMask;\n\tBucket           *arData;\n\tuint32_t          nNumUsed;\n\tuint32_t          nNumOfElements;\n\tuint32_t          nTableSize;\n\tuint32_t          nInternalPointer;\n\tzend_long         nNextFreeElement;\n\tdtor_func_t       pDestructor;\n};\n```\n主要字段介绍:\n\n- gc 引用次数,垃圾回收时会用到。\n- union u 就不介绍了。\n- arData 存储元素的数组,内存是连续的,arData指向第一个元素。\n- nTableMask nTableSize的负数。\n- nTableSize 数组长度,为2的n此房。\n- nNumUsed 当前使用的Bucket数。\n- nNumOfElements 当前所有的Bucket数。\n- nNextFreeElement 下一个被使用的Bucket($a[] = '')\n- pDestructor 删除某个元素是会使用\n\n\n## Bucket结构\n```c\ntypedef struct _Bucket {\n\tzval              val;\n\tzend_ulong        h;                /* hash value (or numeric index)   */\n\tzend_string      *key;              /* string key or NULL for numerics */\n} Bucket;\n```\n\n- h hash出来的值(times33)\n- *key 存储元素的key\n- val 具体值,是个zval\n\n## 如何实现\n\nphp中实现散列表实现主要使用`存储元素数组`和 `映射函数`（也可以称作散列函数）和`映射表`\n\n\n#### 举个具体的栗子:\n 如果我们要在php代码中声明一个数组会发生什么?下边分析下php是如何实现数组的。\n ```php\n <?php\n $arr= [\n \t'a' => '111',\n \t'b' => '222',\n \t'c' => 'ccc'\n ];\n ```\n1. 首先肯定是初始化。\n2. 接下来将每个元素对应的值依照顺序拷贝到 Bucket里。\n3. 然后利用映射函数对求值,根据算出来的值将其对应的bucket的地址写到该值对应的映射这表里。\n\n具体操作如下图:\n![image](/photo/img/php数组实现/php数组具体实现.png)\n\n当然我们这里的映射是理想映射,因为在映射的计算过程中可能存在冲突,后续会介绍映射函数,以及如何解映射函数计算后的冲突。\n\n\n### 初始化\n\n```c\nZEND_API void ZEND_FASTCALL _zend_hash_init(HashTable *ht, uint32_t nSize, dtor_func_t pDestructor, zend_bool persistent ZEND_FILE_LINE_DC)\n{\n\tGC_REFCOUNT(ht) = 1; //设置引用次数\n\tGC_TYPE_INFO(ht) = IS_ARRAY; //设置数据类型\n\tht->u.flags = (persistent ? HASH_FLAG_PERSISTENT : 0) | HASH_FLAG_APPLY_PROTECTION | HASH_FLAG_STATIC_KEYS;\n\tht->nTableMask = HT_MIN_MASK;\n\tHT_SET_DATA_ADDR(ht, &uninitialized_bucket);\n\tht->nNumUsed = 0;\n\tht->nNumOfElements = 0;\n\tht->nInternalPointer = HT_INVALID_IDX;\n\tht->nNextFreeElement = 0;\n\tht->pDestructor = pDestructor;\n\tht->nTableSize = zend_hash_check_size(nSize);\n}\n```\n初始化的时候主要是对hashtable中各个成员的进行初始化设置,而且在这个时候不会给arData分配内存,只有在开始插入数据的时候才会\n为arData分配内存。\n\n\n\n## 映射函数\n\n映射函数其实就是一次`hash`操作和和一次`|`操作.\nhash操作就是上边锁提到得到times33操作,`|`操作是计算出来的hash值与nTableSize进行计算。\n```\nnIndex = ket->h | nTableMask;\n```\n因为nTableMask是nTableSize的负数,所以计算出来的nIndex值区间应该为[-1,nTableMask]。\n\n此处待补充 为什么会在[-1, nTableMask] 区间内。\n\n### 写入数据\n\n在初始化的时候并不会对arData分配内存,只有在写入的时候才会真正分配内存\n\n```c\nstatic void zend_always_inline zend_hash_real_init_ex(HashTable *ht, int packed)\n{\n\tHT_ASSERT(GC_REFCOUNT(ht) == 1);\n\tZEND_ASSERT(!((ht)->u.flags & HASH_FLAG_INITIALIZED));\n\tif (packed) {\n\t\tHT_SET_DATA_ADDR(ht, pemalloc(HT_SIZE(ht), (ht)->u.flags & HASH_FLAG_PERSISTENT));\n\t\t(ht)->u.flags |= HASH_FLAG_INITIALIZED | HASH_FLAG_PACKED;\n\t\tHT_HASH_RESET_PACKED(ht);\n\t} else {\n\t\t(ht)->nTableMask = -(ht)->nTableSize;\n\t\tHT_SET_DATA_ADDR(ht, pemalloc(HT_SIZE(ht), (ht)->u.flags & HASH_FLAG_PERSISTENT));\n\t\t(ht)->u.flags |= HASH_FLAG_INITIALIZED;\n\t\tif (EXPECTED(ht->nTableMask == -8)) {\n\t\t\tBucket *arData = ht->arData;\n\n\t\t\tHT_HASH_EX(arData, -8) = -1;\n\t\t\tHT_HASH_EX(arData, -7) = -1;\n\t\t\tHT_HASH_EX(arData, -6) = -1;\n\t\t\tHT_HASH_EX(arData, -5) = -1;\n\t\t\tHT_HASH_EX(arData, -4) = -1;\n\t\t\tHT_HASH_EX(arData, -3) = -1;\n\t\t\tHT_HASH_EX(arData, -2) = -1;\n\t\t\tHT_HASH_EX(arData, -1) = -1;\n\t\t} else {\n\t\t\tHT_HASH_RESET(ht);\n\t\t}\n\t}\n}\n```\n分配具体的内存\n\n```c\n#define HT_SIZE_EX(nTableSize, nTableMask) \\\n\t(HT_DATA_SIZE((nTableSize)) + HT_HASH_SIZE((nTableMask)))\n```\n\n```\n#define HT_HASH_SIZE(nTableMask) \\\n\t(((size_t)(uint32_t)-(int32_t)(nTableMask)) * sizeof(uint32_t))\n\n#define HT_DATA_SIZE(nTableSize) \\\n\t((size_t)(nTableSize) * sizeof(Bucket))\n```\n\n可以看到在分配具体分配内存的时候会分配 nTableSize*(Bucket+uint32_t)大小的内存。\n讲道理只需要分配nTableSize*Bucket大小内存就可以了,为什么会多余出来 nTableSize*uint32_t内存呢?\n因为nTableSize*uint32_t就是`映射表`所占内存大小。所以说Bucket会和映射表一次申请内存。\n写完成写入操作以后会将`*arData` 指向第一个Bucket。\n\n具体在内存里的结果如图所示:\n![image](/photo/img/php数组实现/hashtable.png)\n\n\n`映射表`在初始化的时候所有值都是-1,只有在被赋值时候会写入对应`Bucket`所在链表的偏移量。;\nht->arData 指向第一个`Bucket`的位置,在赋值的时候会按照列表顺序,将值写入`Bucket`的value里,然后会根据\n映射函数算出值当做偏移量找到对应`映射表`的元素,然后将当前`Bucket`写入此元素。\n\nps nTableSize 为2的次方倍。\n\n\n\n## 冲突\n\n如果`nIndex = ket->h | nTableMask` 算出来的值冲突了怎么办? 首先`映射表`的每个元素不是链表,所以导致无法存储多个元素。\n在php中是这样处理冲突的:\n首先`映射表`的所有元素初始化值为 -1 ,当前\n如果用冲突会将新算出来的值对应的`Bucket`覆盖原来旧的`Bucket`,然后将旧的`Bucket`迁移到新的`Bucket`,\n并将旧的`Bucket`的u2.next(默认为-1) 指向新`Bucket`。\n\n如图\n![image](/photo/img/php数组实现/链表冲突.png)\n\n \n## 查找\n\nphp再查找一个数组元素是,首先会根据其key 获取到计算后hash值'ket->h',然后根据映射函数算出当前元素在`映射表`中的偏移量,利用当前位置+偏移量找到`映射表`的元素,再根据其内的偏量找到对应`Bucket`链表的首个元素位置,最后遍历该链表核对key值,找到对应的值。\n\n具体实现函数:\n```c\nstatic zend_always_inline Bucket *zend_hash_find_bucket(const HashTable *ht, zend_string *key)\n{\n\tzend_ulong h;\n\tuint32_t nIndex;\n\tuint32_t idx;\n\tBucket *p, *arData;\n\n\th = zend_string_hash_val(key);\n\tarData = ht->arData;\n\tnIndex = h | ht->nTableMask;\n\tidx = HT_HASH_EX(arData, nIndex);\n\twhile (EXPECTED(idx != HT_INVALID_IDX)) {\n\t\tp = HT_HASH_TO_BUCKET_EX(arData, idx);\n\t\tif (EXPECTED(p->key == key)) { /* check for the same interned string */\n\t\t\treturn p;\n\t\t} else if (EXPECTED(p->h == h) &&\n\t\t     EXPECTED(p->key) &&\n\t\t     EXPECTED(ZSTR_LEN(p->key) == ZSTR_LEN(key)) &&\n\t\t     EXPECTED(memcmp(ZSTR_VAL(p->key), ZSTR_VAL(key), ZSTR_LEN(key)) == 0)) {\n\t\t\treturn p;\n\t\t}\n\t\tidx = Z_NEXT(p->val);\n\t}\n\treturn NULL;\n}\n```\n\n## 扩容\n\n数组的容量在初始化的时候已经确定了大小,就是nTableSize。当然映射函数也是根据 nTableMask 来计算的。\n所以我们扩容时候必须重新计算索引,也就是`映射表`里的值。\n具体扩容规则:\n首先当需要扩容时,会计算当前`Bucket`链表里删除元素数量占总表元素数量的比例,如果没有超过阈值则申请分配一个原来数组大小两倍的新素组,把元素复制到新数组上,然后重新建立索引。\n\n阈值判断:\n```c\nht->nNumUsed > ht->nNumOfElements + (ht->nNumOfElements >> 5\n```\n\n处理过程:\n```c\nstatic void ZEND_FASTCALL zend_hash_do_resize(HashTable *ht)\n{\n\n\tIS_CONSISTENT(ht);\n\tHT_ASSERT(GC_REFCOUNT(ht) == 1);\n\n\tif (ht->nNumUsed > ht->nNumOfElements + (ht->nNumOfElements >> 5)) { /* additional term is there to amortize the cost of compaction */\n\t\tHANDLE_BLOCK_INTERRUPTIONS();\n\t\tzend_hash_rehash(ht);\n\t\tHANDLE_UNBLOCK_INTERRUPTIONS();\n\t} else if (ht->nTableSize < HT_MAX_SIZE) {\t/* Let's double the table size */\n\t\tvoid *new_data, *old_data = HT_GET_DATA_ADDR(ht);\n\t\tuint32_t nSize = ht->nTableSize + ht->nTableSize;\n\t\tBucket *old_buckets = ht->arData;\n\n\t\tHANDLE_BLOCK_INTERRUPTIONS();\n\t\tnew_data = pemalloc(HT_SIZE_EX(nSize, -nSize), ht->u.flags & HASH_FLAG_PERSISTENT);\n\t\tht->nTableSize = nSize;\n\t\tht->nTableMask = -ht->nTableSize;\n\t\tHT_SET_DATA_ADDR(ht, new_data);\n\t\tmemcpy(ht->arData, old_buckets, sizeof(Bucket) * ht->nNumUsed);\n\t\tpefree(old_data, ht->u.flags & HASH_FLAG_PERSISTENT);\n\t\tzend_hash_rehash(ht);\n\t\tHANDLE_UNBLOCK_INTERRUPTIONS();\n\t} else {\n\t\tzend_error_noreturn(E_ERROR, \"Possible integer overflow in memory allocation (%zu * %zu + %zu)\", ht->nTableSize * 2, sizeof(Bucket) + sizeof(uint32_t), sizeof(Bucket));\n\t}\n}\n\n```\n在处理的过程中还会把已经删除的`Bucket`给删除。\n\n具体的操作在`zend_hash.c`文件里。\n如果超过阈值,则会把已经删除`Bucket`移除,然后把又有后边的元素往前移动,补上空缺的`Bucket`,当然索引也会重建。\n\n\n\n\n## 参考\n- [time33 ](https://www.cnblogs.com/52fhy/p/5007456.html)\n- [2.1 变量的内部实现](https://github.com/pangudashu/php7-internal/blob/master/2/zval.md)\n\n\n\n\n\n","source":"_posts/php数组实现.md","raw":"---\ntitle: php数组实现\ndate: 2018-08-20 20:00:08\ntags:\n---\n\nphp的数组依赖于hashtable实现的。\n\nTimes33的算法很简单，就是不断的乘33,下边是times33算法:\n\n## Times33(hash)\n\n```php\n<?php\nfunction myHash($str) {\n    // hash(i) = hash(i-1) * 33 + str[i]\n    $hash = 5381;\n    $s    = md5($str); //相比其它版本，进行了md5加密\n    $seed = 5;\n    $len  = 32;//加密后长度32\n    for ($i = 0; $i < $len; $i++) {\n        // (hash << 5) + hash 相当于 hash * 33\n        //$hash = sprintf(\"%u\", $hash * 33) + ord($s{$i});\n        //$hash = ($hash * 33 + ord($s{$i})) & 0x7FFFFFFF;\n        $hash = ($hash << $seed) + $hash + ord($s{$i});\n    }\n \n    return $hash & 0x7FFFFFFF;\n}\n```\n\n其中`<<` 表示左移,每次左移表示x2例如:\n\n```php\n<?php\n$num = 2;\n\necho $num << 2;\n```\n\n所以($hash << $seed)表示 `$hash * 32` ,同时加上$hash,也就表示 `$hash * 33`了。ord()函数返回字符串的首个字符的 ASCII 值。\n最后`$hash & 0x7FFFFFFF` 表示与整形的最大值与操作(`0x7FFFF111FFF`二进制为`1111111111111111111111111111`),\n这个与操作会截取超过整形二进制部分,所以times33计算出来的值不会超过整形的最大值。\n\n## 为什么要用hashtable实现php数组?\n\n因为散列表是根据关键建码值直接进项访问的数据结构。在key和value之间有一个映射函数,可以根据key直接索引到对应的value值,它并\n不会使用一般的对比操作,而是直接使用`内存的起始位置和偏移位置`进行寻址,所以会比正常的寻址要快。\n\n\n## 散列表结构\n\n```c\nstruct _zend_array {\n\tzend_refcounted_h gc;\n\tunion {\n\t\tstruct {\n\t\t\tZEND_ENDIAN_LOHI_4(\n\t\t\t\tzend_uchar    flags,\n\t\t\t\tzend_uchar    nApplyCount,\n\t\t\t\tzend_uchar    nIteratorsCount,\n\t\t\t\tzend_uchar    reserve)\n\t\t} v;\n\t\tuint32_t flags;\n\t} u;\n\tuint32_t          nTableMask;\n\tBucket           *arData;\n\tuint32_t          nNumUsed;\n\tuint32_t          nNumOfElements;\n\tuint32_t          nTableSize;\n\tuint32_t          nInternalPointer;\n\tzend_long         nNextFreeElement;\n\tdtor_func_t       pDestructor;\n};\n```\n主要字段介绍:\n\n- gc 引用次数,垃圾回收时会用到。\n- union u 就不介绍了。\n- arData 存储元素的数组,内存是连续的,arData指向第一个元素。\n- nTableMask nTableSize的负数。\n- nTableSize 数组长度,为2的n此房。\n- nNumUsed 当前使用的Bucket数。\n- nNumOfElements 当前所有的Bucket数。\n- nNextFreeElement 下一个被使用的Bucket($a[] = '')\n- pDestructor 删除某个元素是会使用\n\n\n## Bucket结构\n```c\ntypedef struct _Bucket {\n\tzval              val;\n\tzend_ulong        h;                /* hash value (or numeric index)   */\n\tzend_string      *key;              /* string key or NULL for numerics */\n} Bucket;\n```\n\n- h hash出来的值(times33)\n- *key 存储元素的key\n- val 具体值,是个zval\n\n## 如何实现\n\nphp中实现散列表实现主要使用`存储元素数组`和 `映射函数`（也可以称作散列函数）和`映射表`\n\n\n#### 举个具体的栗子:\n 如果我们要在php代码中声明一个数组会发生什么?下边分析下php是如何实现数组的。\n ```php\n <?php\n $arr= [\n \t'a' => '111',\n \t'b' => '222',\n \t'c' => 'ccc'\n ];\n ```\n1. 首先肯定是初始化。\n2. 接下来将每个元素对应的值依照顺序拷贝到 Bucket里。\n3. 然后利用映射函数对求值,根据算出来的值将其对应的bucket的地址写到该值对应的映射这表里。\n\n具体操作如下图:\n![image](/photo/img/php数组实现/php数组具体实现.png)\n\n当然我们这里的映射是理想映射,因为在映射的计算过程中可能存在冲突,后续会介绍映射函数,以及如何解映射函数计算后的冲突。\n\n\n### 初始化\n\n```c\nZEND_API void ZEND_FASTCALL _zend_hash_init(HashTable *ht, uint32_t nSize, dtor_func_t pDestructor, zend_bool persistent ZEND_FILE_LINE_DC)\n{\n\tGC_REFCOUNT(ht) = 1; //设置引用次数\n\tGC_TYPE_INFO(ht) = IS_ARRAY; //设置数据类型\n\tht->u.flags = (persistent ? HASH_FLAG_PERSISTENT : 0) | HASH_FLAG_APPLY_PROTECTION | HASH_FLAG_STATIC_KEYS;\n\tht->nTableMask = HT_MIN_MASK;\n\tHT_SET_DATA_ADDR(ht, &uninitialized_bucket);\n\tht->nNumUsed = 0;\n\tht->nNumOfElements = 0;\n\tht->nInternalPointer = HT_INVALID_IDX;\n\tht->nNextFreeElement = 0;\n\tht->pDestructor = pDestructor;\n\tht->nTableSize = zend_hash_check_size(nSize);\n}\n```\n初始化的时候主要是对hashtable中各个成员的进行初始化设置,而且在这个时候不会给arData分配内存,只有在开始插入数据的时候才会\n为arData分配内存。\n\n\n\n## 映射函数\n\n映射函数其实就是一次`hash`操作和和一次`|`操作.\nhash操作就是上边锁提到得到times33操作,`|`操作是计算出来的hash值与nTableSize进行计算。\n```\nnIndex = ket->h | nTableMask;\n```\n因为nTableMask是nTableSize的负数,所以计算出来的nIndex值区间应该为[-1,nTableMask]。\n\n此处待补充 为什么会在[-1, nTableMask] 区间内。\n\n### 写入数据\n\n在初始化的时候并不会对arData分配内存,只有在写入的时候才会真正分配内存\n\n```c\nstatic void zend_always_inline zend_hash_real_init_ex(HashTable *ht, int packed)\n{\n\tHT_ASSERT(GC_REFCOUNT(ht) == 1);\n\tZEND_ASSERT(!((ht)->u.flags & HASH_FLAG_INITIALIZED));\n\tif (packed) {\n\t\tHT_SET_DATA_ADDR(ht, pemalloc(HT_SIZE(ht), (ht)->u.flags & HASH_FLAG_PERSISTENT));\n\t\t(ht)->u.flags |= HASH_FLAG_INITIALIZED | HASH_FLAG_PACKED;\n\t\tHT_HASH_RESET_PACKED(ht);\n\t} else {\n\t\t(ht)->nTableMask = -(ht)->nTableSize;\n\t\tHT_SET_DATA_ADDR(ht, pemalloc(HT_SIZE(ht), (ht)->u.flags & HASH_FLAG_PERSISTENT));\n\t\t(ht)->u.flags |= HASH_FLAG_INITIALIZED;\n\t\tif (EXPECTED(ht->nTableMask == -8)) {\n\t\t\tBucket *arData = ht->arData;\n\n\t\t\tHT_HASH_EX(arData, -8) = -1;\n\t\t\tHT_HASH_EX(arData, -7) = -1;\n\t\t\tHT_HASH_EX(arData, -6) = -1;\n\t\t\tHT_HASH_EX(arData, -5) = -1;\n\t\t\tHT_HASH_EX(arData, -4) = -1;\n\t\t\tHT_HASH_EX(arData, -3) = -1;\n\t\t\tHT_HASH_EX(arData, -2) = -1;\n\t\t\tHT_HASH_EX(arData, -1) = -1;\n\t\t} else {\n\t\t\tHT_HASH_RESET(ht);\n\t\t}\n\t}\n}\n```\n分配具体的内存\n\n```c\n#define HT_SIZE_EX(nTableSize, nTableMask) \\\n\t(HT_DATA_SIZE((nTableSize)) + HT_HASH_SIZE((nTableMask)))\n```\n\n```\n#define HT_HASH_SIZE(nTableMask) \\\n\t(((size_t)(uint32_t)-(int32_t)(nTableMask)) * sizeof(uint32_t))\n\n#define HT_DATA_SIZE(nTableSize) \\\n\t((size_t)(nTableSize) * sizeof(Bucket))\n```\n\n可以看到在分配具体分配内存的时候会分配 nTableSize*(Bucket+uint32_t)大小的内存。\n讲道理只需要分配nTableSize*Bucket大小内存就可以了,为什么会多余出来 nTableSize*uint32_t内存呢?\n因为nTableSize*uint32_t就是`映射表`所占内存大小。所以说Bucket会和映射表一次申请内存。\n写完成写入操作以后会将`*arData` 指向第一个Bucket。\n\n具体在内存里的结果如图所示:\n![image](/photo/img/php数组实现/hashtable.png)\n\n\n`映射表`在初始化的时候所有值都是-1,只有在被赋值时候会写入对应`Bucket`所在链表的偏移量。;\nht->arData 指向第一个`Bucket`的位置,在赋值的时候会按照列表顺序,将值写入`Bucket`的value里,然后会根据\n映射函数算出值当做偏移量找到对应`映射表`的元素,然后将当前`Bucket`写入此元素。\n\nps nTableSize 为2的次方倍。\n\n\n\n## 冲突\n\n如果`nIndex = ket->h | nTableMask` 算出来的值冲突了怎么办? 首先`映射表`的每个元素不是链表,所以导致无法存储多个元素。\n在php中是这样处理冲突的:\n首先`映射表`的所有元素初始化值为 -1 ,当前\n如果用冲突会将新算出来的值对应的`Bucket`覆盖原来旧的`Bucket`,然后将旧的`Bucket`迁移到新的`Bucket`,\n并将旧的`Bucket`的u2.next(默认为-1) 指向新`Bucket`。\n\n如图\n![image](/photo/img/php数组实现/链表冲突.png)\n\n \n## 查找\n\nphp再查找一个数组元素是,首先会根据其key 获取到计算后hash值'ket->h',然后根据映射函数算出当前元素在`映射表`中的偏移量,利用当前位置+偏移量找到`映射表`的元素,再根据其内的偏量找到对应`Bucket`链表的首个元素位置,最后遍历该链表核对key值,找到对应的值。\n\n具体实现函数:\n```c\nstatic zend_always_inline Bucket *zend_hash_find_bucket(const HashTable *ht, zend_string *key)\n{\n\tzend_ulong h;\n\tuint32_t nIndex;\n\tuint32_t idx;\n\tBucket *p, *arData;\n\n\th = zend_string_hash_val(key);\n\tarData = ht->arData;\n\tnIndex = h | ht->nTableMask;\n\tidx = HT_HASH_EX(arData, nIndex);\n\twhile (EXPECTED(idx != HT_INVALID_IDX)) {\n\t\tp = HT_HASH_TO_BUCKET_EX(arData, idx);\n\t\tif (EXPECTED(p->key == key)) { /* check for the same interned string */\n\t\t\treturn p;\n\t\t} else if (EXPECTED(p->h == h) &&\n\t\t     EXPECTED(p->key) &&\n\t\t     EXPECTED(ZSTR_LEN(p->key) == ZSTR_LEN(key)) &&\n\t\t     EXPECTED(memcmp(ZSTR_VAL(p->key), ZSTR_VAL(key), ZSTR_LEN(key)) == 0)) {\n\t\t\treturn p;\n\t\t}\n\t\tidx = Z_NEXT(p->val);\n\t}\n\treturn NULL;\n}\n```\n\n## 扩容\n\n数组的容量在初始化的时候已经确定了大小,就是nTableSize。当然映射函数也是根据 nTableMask 来计算的。\n所以我们扩容时候必须重新计算索引,也就是`映射表`里的值。\n具体扩容规则:\n首先当需要扩容时,会计算当前`Bucket`链表里删除元素数量占总表元素数量的比例,如果没有超过阈值则申请分配一个原来数组大小两倍的新素组,把元素复制到新数组上,然后重新建立索引。\n\n阈值判断:\n```c\nht->nNumUsed > ht->nNumOfElements + (ht->nNumOfElements >> 5\n```\n\n处理过程:\n```c\nstatic void ZEND_FASTCALL zend_hash_do_resize(HashTable *ht)\n{\n\n\tIS_CONSISTENT(ht);\n\tHT_ASSERT(GC_REFCOUNT(ht) == 1);\n\n\tif (ht->nNumUsed > ht->nNumOfElements + (ht->nNumOfElements >> 5)) { /* additional term is there to amortize the cost of compaction */\n\t\tHANDLE_BLOCK_INTERRUPTIONS();\n\t\tzend_hash_rehash(ht);\n\t\tHANDLE_UNBLOCK_INTERRUPTIONS();\n\t} else if (ht->nTableSize < HT_MAX_SIZE) {\t/* Let's double the table size */\n\t\tvoid *new_data, *old_data = HT_GET_DATA_ADDR(ht);\n\t\tuint32_t nSize = ht->nTableSize + ht->nTableSize;\n\t\tBucket *old_buckets = ht->arData;\n\n\t\tHANDLE_BLOCK_INTERRUPTIONS();\n\t\tnew_data = pemalloc(HT_SIZE_EX(nSize, -nSize), ht->u.flags & HASH_FLAG_PERSISTENT);\n\t\tht->nTableSize = nSize;\n\t\tht->nTableMask = -ht->nTableSize;\n\t\tHT_SET_DATA_ADDR(ht, new_data);\n\t\tmemcpy(ht->arData, old_buckets, sizeof(Bucket) * ht->nNumUsed);\n\t\tpefree(old_data, ht->u.flags & HASH_FLAG_PERSISTENT);\n\t\tzend_hash_rehash(ht);\n\t\tHANDLE_UNBLOCK_INTERRUPTIONS();\n\t} else {\n\t\tzend_error_noreturn(E_ERROR, \"Possible integer overflow in memory allocation (%zu * %zu + %zu)\", ht->nTableSize * 2, sizeof(Bucket) + sizeof(uint32_t), sizeof(Bucket));\n\t}\n}\n\n```\n在处理的过程中还会把已经删除的`Bucket`给删除。\n\n具体的操作在`zend_hash.c`文件里。\n如果超过阈值,则会把已经删除`Bucket`移除,然后把又有后边的元素往前移动,补上空缺的`Bucket`,当然索引也会重建。\n\n\n\n\n## 参考\n- [time33 ](https://www.cnblogs.com/52fhy/p/5007456.html)\n- [2.1 变量的内部实现](https://github.com/pangudashu/php7-internal/blob/master/2/zval.md)\n\n\n\n\n\n","slug":"php数组实现","published":1,"updated":"2018-12-11T03:30:15.730Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqavhgdk000qzqjft294rtjv","content":"<p>php的数组依赖于hashtable实现的。</p>\n<p>Times33的算法很简单，就是不断的乘33,下边是times33算法:</p>\n<h2 id=\"Times33-hash\"><a href=\"#Times33-hash\" class=\"headerlink\" title=\"Times33(hash)\"></a>Times33(hash)</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myHash</span><span class=\"params\">($str)</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// hash(i) = hash(i-1) * 33 + str[i]</span></div><div class=\"line\">    $hash = <span class=\"number\">5381</span>;</div><div class=\"line\">    $s    = md5($str); <span class=\"comment\">//相比其它版本，进行了md5加密</span></div><div class=\"line\">    $seed = <span class=\"number\">5</span>;</div><div class=\"line\">    $len  = <span class=\"number\">32</span>;<span class=\"comment\">//加密后长度32</span></div><div class=\"line\">    <span class=\"keyword\">for</span> ($i = <span class=\"number\">0</span>; $i &lt; $len; $i++) &#123;</div><div class=\"line\">        <span class=\"comment\">// (hash &lt;&lt; 5) + hash 相当于 hash * 33</span></div><div class=\"line\">        <span class=\"comment\">//$hash = sprintf(\"%u\", $hash * 33) + ord($s&#123;$i&#125;);</span></div><div class=\"line\">        <span class=\"comment\">//$hash = ($hash * 33 + ord($s&#123;$i&#125;)) &amp; 0x7FFFFFFF;</span></div><div class=\"line\">        $hash = ($hash &lt;&lt; $seed) + $hash + ord($s&#123;$i&#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"keyword\">return</span> $hash &amp; <span class=\"number\">0x7FFFFFFF</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>其中<code>&lt;&lt;</code> 表示左移,每次左移表示x2例如:</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">$num = <span class=\"number\">2</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">echo</span> $num &lt;&lt; <span class=\"number\">2</span>;</div></pre></td></tr></table></figure>\n<p>所以($hash &lt;&lt; $seed)表示 <code>$hash * 32</code> ,同时加上$hash,也就表示 <code>$hash * 33</code>了。ord()函数返回字符串的首个字符的 ASCII 值。<br>最后<code>$hash &amp; 0x7FFFFFFF</code> 表示与整形的最大值与操作(<code>0x7FFFF111FFF</code>二进制为<code>1111111111111111111111111111</code>),<br>这个与操作会截取超过整形二进制部分,所以times33计算出来的值不会超过整形的最大值。</p>\n<h2 id=\"为什么要用hashtable实现php数组\"><a href=\"#为什么要用hashtable实现php数组\" class=\"headerlink\" title=\"为什么要用hashtable实现php数组?\"></a>为什么要用hashtable实现php数组?</h2><p>因为散列表是根据关键建码值直接进项访问的数据结构。在key和value之间有一个映射函数,可以根据key直接索引到对应的value值,它并<br>不会使用一般的对比操作,而是直接使用<code>内存的起始位置和偏移位置</code>进行寻址,所以会比正常的寻址要快。</p>\n<h2 id=\"散列表结构\"><a href=\"#散列表结构\" class=\"headerlink\" title=\"散列表结构\"></a>散列表结构</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">struct</span> _zend_array &#123;</div><div class=\"line\">\tzend_refcounted_h gc;</div><div class=\"line\">\t<span class=\"keyword\">union</span> &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">\t\t\tZEND_ENDIAN_LOHI_4(</div><div class=\"line\">\t\t\t\tzend_uchar    flags,</div><div class=\"line\">\t\t\t\tzend_uchar    nApplyCount,</div><div class=\"line\">\t\t\t\tzend_uchar    nIteratorsCount,</div><div class=\"line\">\t\t\t\tzend_uchar    reserve)</div><div class=\"line\">\t\t&#125; v;</div><div class=\"line\">\t\t<span class=\"keyword\">uint32_t</span> flags;</div><div class=\"line\">\t&#125; u;</div><div class=\"line\">\t<span class=\"keyword\">uint32_t</span>          nTableMask;</div><div class=\"line\">\tBucket           *arData;</div><div class=\"line\">\t<span class=\"keyword\">uint32_t</span>          nNumUsed;</div><div class=\"line\">\t<span class=\"keyword\">uint32_t</span>          nNumOfElements;</div><div class=\"line\">\t<span class=\"keyword\">uint32_t</span>          nTableSize;</div><div class=\"line\">\t<span class=\"keyword\">uint32_t</span>          nInternalPointer;</div><div class=\"line\">\tzend_long         nNextFreeElement;</div><div class=\"line\">\t<span class=\"keyword\">dtor_func_t</span>       pDestructor;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>主要字段介绍:</p>\n<ul>\n<li>gc 引用次数,垃圾回收时会用到。</li>\n<li>union u 就不介绍了。</li>\n<li>arData 存储元素的数组,内存是连续的,arData指向第一个元素。</li>\n<li>nTableMask nTableSize的负数。</li>\n<li>nTableSize 数组长度,为2的n此房。</li>\n<li>nNumUsed 当前使用的Bucket数。</li>\n<li>nNumOfElements 当前所有的Bucket数。</li>\n<li>nNextFreeElement 下一个被使用的Bucket($a[] = ‘’)</li>\n<li>pDestructor 删除某个元素是会使用</li>\n</ul>\n<h2 id=\"Bucket结构\"><a href=\"#Bucket结构\" class=\"headerlink\" title=\"Bucket结构\"></a>Bucket结构</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> _Bucket &#123;</div><div class=\"line\">\tzval              val;</div><div class=\"line\">\tzend_ulong        h;                <span class=\"comment\">/* hash value (or numeric index)   */</span></div><div class=\"line\">\tzend_string      *key;              <span class=\"comment\">/* string key or NULL for numerics */</span></div><div class=\"line\">&#125; Bucket;</div></pre></td></tr></table></figure>\n<ul>\n<li>h hash出来的值(times33)</li>\n<li>*key 存储元素的key</li>\n<li>val 具体值,是个zval</li>\n</ul>\n<h2 id=\"如何实现\"><a href=\"#如何实现\" class=\"headerlink\" title=\"如何实现\"></a>如何实现</h2><p>php中实现散列表实现主要使用<code>存储元素数组</code>和 <code>映射函数</code>（也可以称作散列函数）和<code>映射表</code></p>\n<h4 id=\"举个具体的栗子\"><a href=\"#举个具体的栗子\" class=\"headerlink\" title=\"举个具体的栗子:\"></a>举个具体的栗子:</h4><p> 如果我们要在php代码中声明一个数组会发生什么?下边分析下php是如何实现数组的。<br> <figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">$arr= [</div><div class=\"line\">\t<span class=\"string\">'a'</span> =&gt; <span class=\"string\">'111'</span>,</div><div class=\"line\">\t<span class=\"string\">'b'</span> =&gt; <span class=\"string\">'222'</span>,</div><div class=\"line\">\t<span class=\"string\">'c'</span> =&gt; <span class=\"string\">'ccc'</span></div><div class=\"line\">];</div></pre></td></tr></table></figure></p>\n<ol>\n<li>首先肯定是初始化。</li>\n<li>接下来将每个元素对应的值依照顺序拷贝到 Bucket里。</li>\n<li>然后利用映射函数对求值,根据算出来的值将其对应的bucket的地址写到该值对应的映射这表里。</li>\n</ol>\n<p>具体操作如下图:<br><img src=\"/photo/img/php数组实现/php数组具体实现.png\" alt=\"image\"></p>\n<p>当然我们这里的映射是理想映射,因为在映射的计算过程中可能存在冲突,后续会介绍映射函数,以及如何解映射函数计算后的冲突。</p>\n<h3 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">ZEND_API <span class=\"keyword\">void</span> ZEND_FASTCALL _zend_hash_init(HashTable *ht, <span class=\"keyword\">uint32_t</span> nSize, <span class=\"keyword\">dtor_func_t</span> pDestructor, zend_bool persistent ZEND_FILE_LINE_DC)</div><div class=\"line\">&#123;</div><div class=\"line\">\tGC_REFCOUNT(ht) = <span class=\"number\">1</span>; <span class=\"comment\">//设置引用次数</span></div><div class=\"line\">\tGC_TYPE_INFO(ht) = IS_ARRAY; <span class=\"comment\">//设置数据类型</span></div><div class=\"line\">\tht-&gt;u.flags = (persistent ? HASH_FLAG_PERSISTENT : <span class=\"number\">0</span>) | HASH_FLAG_APPLY_PROTECTION | HASH_FLAG_STATIC_KEYS;</div><div class=\"line\">\tht-&gt;nTableMask = HT_MIN_MASK;</div><div class=\"line\">\tHT_SET_DATA_ADDR(ht, &amp;uninitialized_bucket);</div><div class=\"line\">\tht-&gt;nNumUsed = <span class=\"number\">0</span>;</div><div class=\"line\">\tht-&gt;nNumOfElements = <span class=\"number\">0</span>;</div><div class=\"line\">\tht-&gt;nInternalPointer = HT_INVALID_IDX;</div><div class=\"line\">\tht-&gt;nNextFreeElement = <span class=\"number\">0</span>;</div><div class=\"line\">\tht-&gt;pDestructor = pDestructor;</div><div class=\"line\">\tht-&gt;nTableSize = zend_hash_check_size(nSize);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>初始化的时候主要是对hashtable中各个成员的进行初始化设置,而且在这个时候不会给arData分配内存,只有在开始插入数据的时候才会<br>为arData分配内存。</p>\n<h2 id=\"映射函数\"><a href=\"#映射函数\" class=\"headerlink\" title=\"映射函数\"></a>映射函数</h2><p>映射函数其实就是一次<code>hash</code>操作和和一次<code>|</code>操作.<br>hash操作就是上边锁提到得到times33操作,<code>|</code>操作是计算出来的hash值与nTableSize进行计算。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">nIndex = ket-&gt;h | nTableMask;</div></pre></td></tr></table></figure></p>\n<p>因为nTableMask是nTableSize的负数,所以计算出来的nIndex值区间应该为[-1,nTableMask]。</p>\n<p>此处待补充 为什么会在[-1, nTableMask] 区间内。</p>\n<h3 id=\"写入数据\"><a href=\"#写入数据\" class=\"headerlink\" title=\"写入数据\"></a>写入数据</h3><p>在初始化的时候并不会对arData分配内存,只有在写入的时候才会真正分配内存</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> zend_always_inline <span class=\"title\">zend_hash_real_init_ex</span><span class=\"params\">(HashTable *ht, <span class=\"keyword\">int</span> packed)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\tHT_ASSERT(GC_REFCOUNT(ht) == <span class=\"number\">1</span>);</div><div class=\"line\">\tZEND_ASSERT(!((ht)-&gt;u.flags &amp; HASH_FLAG_INITIALIZED));</div><div class=\"line\">\t<span class=\"keyword\">if</span> (packed) &#123;</div><div class=\"line\">\t\tHT_SET_DATA_ADDR(ht, pemalloc(HT_SIZE(ht), (ht)-&gt;u.flags &amp; HASH_FLAG_PERSISTENT));</div><div class=\"line\">\t\t(ht)-&gt;u.flags |= HASH_FLAG_INITIALIZED | HASH_FLAG_PACKED;</div><div class=\"line\">\t\tHT_HASH_RESET_PACKED(ht);</div><div class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t(ht)-&gt;nTableMask = -(ht)-&gt;nTableSize;</div><div class=\"line\">\t\tHT_SET_DATA_ADDR(ht, pemalloc(HT_SIZE(ht), (ht)-&gt;u.flags &amp; HASH_FLAG_PERSISTENT));</div><div class=\"line\">\t\t(ht)-&gt;u.flags |= HASH_FLAG_INITIALIZED;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (EXPECTED(ht-&gt;nTableMask == <span class=\"number\">-8</span>)) &#123;</div><div class=\"line\">\t\t\tBucket *arData = ht-&gt;arData;</div><div class=\"line\"></div><div class=\"line\">\t\t\tHT_HASH_EX(arData, <span class=\"number\">-8</span>) = <span class=\"number\">-1</span>;</div><div class=\"line\">\t\t\tHT_HASH_EX(arData, <span class=\"number\">-7</span>) = <span class=\"number\">-1</span>;</div><div class=\"line\">\t\t\tHT_HASH_EX(arData, <span class=\"number\">-6</span>) = <span class=\"number\">-1</span>;</div><div class=\"line\">\t\t\tHT_HASH_EX(arData, <span class=\"number\">-5</span>) = <span class=\"number\">-1</span>;</div><div class=\"line\">\t\t\tHT_HASH_EX(arData, <span class=\"number\">-4</span>) = <span class=\"number\">-1</span>;</div><div class=\"line\">\t\t\tHT_HASH_EX(arData, <span class=\"number\">-3</span>) = <span class=\"number\">-1</span>;</div><div class=\"line\">\t\t\tHT_HASH_EX(arData, <span class=\"number\">-2</span>) = <span class=\"number\">-1</span>;</div><div class=\"line\">\t\t\tHT_HASH_EX(arData, <span class=\"number\">-1</span>) = <span class=\"number\">-1</span>;</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\tHT_HASH_RESET(ht);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>分配具体的内存</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> HT_SIZE_EX(nTableSize, nTableMask) \\</span></div><div class=\"line\">\t(HT_DATA_SIZE((nTableSize)) + HT_HASH_SIZE((nTableMask)))</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">#define HT_HASH_SIZE(nTableMask) \\</div><div class=\"line\">\t(((size_t)(uint32_t)-(int32_t)(nTableMask)) * sizeof(uint32_t))</div><div class=\"line\"></div><div class=\"line\">#define HT_DATA_SIZE(nTableSize) \\</div><div class=\"line\">\t((size_t)(nTableSize) * sizeof(Bucket))</div></pre></td></tr></table></figure>\n<p>可以看到在分配具体分配内存的时候会分配 nTableSize<em>(Bucket+uint32_t)大小的内存。<br>讲道理只需要分配nTableSize</em>Bucket大小内存就可以了,为什么会多余出来 nTableSize<em>uint32_t内存呢?<br>因为nTableSize</em>uint32_t就是<code>映射表</code>所占内存大小。所以说Bucket会和映射表一次申请内存。<br>写完成写入操作以后会将<code>*arData</code> 指向第一个Bucket。</p>\n<p>具体在内存里的结果如图所示:<br><img src=\"/photo/img/php数组实现/hashtable.png\" alt=\"image\"></p>\n<p><code>映射表</code>在初始化的时候所有值都是-1,只有在被赋值时候会写入对应<code>Bucket</code>所在链表的偏移量。;<br>ht-&gt;arData 指向第一个<code>Bucket</code>的位置,在赋值的时候会按照列表顺序,将值写入<code>Bucket</code>的value里,然后会根据<br>映射函数算出值当做偏移量找到对应<code>映射表</code>的元素,然后将当前<code>Bucket</code>写入此元素。</p>\n<p>ps nTableSize 为2的次方倍。</p>\n<h2 id=\"冲突\"><a href=\"#冲突\" class=\"headerlink\" title=\"冲突\"></a>冲突</h2><p>如果<code>nIndex = ket-&gt;h | nTableMask</code> 算出来的值冲突了怎么办? 首先<code>映射表</code>的每个元素不是链表,所以导致无法存储多个元素。<br>在php中是这样处理冲突的:<br>首先<code>映射表</code>的所有元素初始化值为 -1 ,当前<br>如果用冲突会将新算出来的值对应的<code>Bucket</code>覆盖原来旧的<code>Bucket</code>,然后将旧的<code>Bucket</code>迁移到新的<code>Bucket</code>,<br>并将旧的<code>Bucket</code>的u2.next(默认为-1) 指向新<code>Bucket</code>。</p>\n<p>如图<br><img src=\"/photo/img/php数组实现/链表冲突.png\" alt=\"image\"></p>\n<h2 id=\"查找\"><a href=\"#查找\" class=\"headerlink\" title=\"查找\"></a>查找</h2><p>php再查找一个数组元素是,首先会根据其key 获取到计算后hash值’ket-&gt;h’,然后根据映射函数算出当前元素在<code>映射表</code>中的偏移量,利用当前位置+偏移量找到<code>映射表</code>的元素,再根据其内的偏量找到对应<code>Bucket</code>链表的首个元素位置,最后遍历该链表核对key值,找到对应的值。</p>\n<p>具体实现函数:<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> zend_always_inline Bucket *<span class=\"title\">zend_hash_find_bucket</span><span class=\"params\">(<span class=\"keyword\">const</span> HashTable *ht, zend_string *key)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\tzend_ulong h;</div><div class=\"line\">\t<span class=\"keyword\">uint32_t</span> nIndex;</div><div class=\"line\">\t<span class=\"keyword\">uint32_t</span> idx;</div><div class=\"line\">\tBucket *p, *arData;</div><div class=\"line\"></div><div class=\"line\">\th = zend_string_hash_val(key);</div><div class=\"line\">\tarData = ht-&gt;arData;</div><div class=\"line\">\tnIndex = h | ht-&gt;nTableMask;</div><div class=\"line\">\tidx = HT_HASH_EX(arData, nIndex);</div><div class=\"line\">\t<span class=\"keyword\">while</span> (EXPECTED(idx != HT_INVALID_IDX)) &#123;</div><div class=\"line\">\t\tp = HT_HASH_TO_BUCKET_EX(arData, idx);</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (EXPECTED(p-&gt;key == key)) &#123; <span class=\"comment\">/* check for the same interned string */</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> p;</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (EXPECTED(p-&gt;h == h) &amp;&amp;</div><div class=\"line\">\t\t     EXPECTED(p-&gt;key) &amp;&amp;</div><div class=\"line\">\t\t     EXPECTED(ZSTR_LEN(p-&gt;key) == ZSTR_LEN(key)) &amp;&amp;</div><div class=\"line\">\t\t     EXPECTED(<span class=\"built_in\">memcmp</span>(ZSTR_VAL(p-&gt;key), ZSTR_VAL(key), ZSTR_LEN(key)) == <span class=\"number\">0</span>)) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> p;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tidx = Z_NEXT(p-&gt;val);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"扩容\"><a href=\"#扩容\" class=\"headerlink\" title=\"扩容\"></a>扩容</h2><p>数组的容量在初始化的时候已经确定了大小,就是nTableSize。当然映射函数也是根据 nTableMask 来计算的。<br>所以我们扩容时候必须重新计算索引,也就是<code>映射表</code>里的值。<br>具体扩容规则:<br>首先当需要扩容时,会计算当前<code>Bucket</code>链表里删除元素数量占总表元素数量的比例,如果没有超过阈值则申请分配一个原来数组大小两倍的新素组,把元素复制到新数组上,然后重新建立索引。</p>\n<p>阈值判断:<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ht-&gt;nNumUsed &gt; ht-&gt;nNumOfElements + (ht-&gt;nNumOfElements &gt;&gt; <span class=\"number\">5</span></div></pre></td></tr></table></figure></p>\n<p>处理过程:<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> ZEND_FASTCALL <span class=\"title\">zend_hash_do_resize</span><span class=\"params\">(HashTable *ht)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\"></div><div class=\"line\">\tIS_CONSISTENT(ht);</div><div class=\"line\">\tHT_ASSERT(GC_REFCOUNT(ht) == <span class=\"number\">1</span>);</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> (ht-&gt;nNumUsed &gt; ht-&gt;nNumOfElements + (ht-&gt;nNumOfElements &gt;&gt; <span class=\"number\">5</span>)) &#123; <span class=\"comment\">/* additional term is there to amortize the cost of compaction */</span></div><div class=\"line\">\t\tHANDLE_BLOCK_INTERRUPTIONS();</div><div class=\"line\">\t\tzend_hash_rehash(ht);</div><div class=\"line\">\t\tHANDLE_UNBLOCK_INTERRUPTIONS();</div><div class=\"line\">\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (ht-&gt;nTableSize &lt; HT_MAX_SIZE) &#123;\t<span class=\"comment\">/* Let's double the table size */</span></div><div class=\"line\">\t\t<span class=\"keyword\">void</span> *new_data, *old_data = HT_GET_DATA_ADDR(ht);</div><div class=\"line\">\t\t<span class=\"keyword\">uint32_t</span> nSize = ht-&gt;nTableSize + ht-&gt;nTableSize;</div><div class=\"line\">\t\tBucket *old_buckets = ht-&gt;arData;</div><div class=\"line\"></div><div class=\"line\">\t\tHANDLE_BLOCK_INTERRUPTIONS();</div><div class=\"line\">\t\tnew_data = pemalloc(HT_SIZE_EX(nSize, -nSize), ht-&gt;u.flags &amp; HASH_FLAG_PERSISTENT);</div><div class=\"line\">\t\tht-&gt;nTableSize = nSize;</div><div class=\"line\">\t\tht-&gt;nTableMask = -ht-&gt;nTableSize;</div><div class=\"line\">\t\tHT_SET_DATA_ADDR(ht, new_data);</div><div class=\"line\">\t\t<span class=\"built_in\">memcpy</span>(ht-&gt;arData, old_buckets, <span class=\"keyword\">sizeof</span>(Bucket) * ht-&gt;nNumUsed);</div><div class=\"line\">\t\tpefree(old_data, ht-&gt;u.flags &amp; HASH_FLAG_PERSISTENT);</div><div class=\"line\">\t\tzend_hash_rehash(ht);</div><div class=\"line\">\t\tHANDLE_UNBLOCK_INTERRUPTIONS();</div><div class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\tzend_error_noreturn(E_ERROR, <span class=\"string\">\"Possible integer overflow in memory allocation (%zu * %zu + %zu)\"</span>, ht-&gt;nTableSize * <span class=\"number\">2</span>, <span class=\"keyword\">sizeof</span>(Bucket) + <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">uint32_t</span>), <span class=\"keyword\">sizeof</span>(Bucket));</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在处理的过程中还会把已经删除的<code>Bucket</code>给删除。</p>\n<p>具体的操作在<code>zend_hash.c</code>文件里。<br>如果超过阈值,则会把已经删除<code>Bucket</code>移除,然后把又有后边的元素往前移动,补上空缺的<code>Bucket</code>,当然索引也会重建。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://www.cnblogs.com/52fhy/p/5007456.html\" target=\"_blank\" rel=\"noopener\">time33 </a></li>\n<li><a href=\"https://github.com/pangudashu/php7-internal/blob/master/2/zval.md\" target=\"_blank\" rel=\"noopener\">2.1 变量的内部实现</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>php的数组依赖于hashtable实现的。</p>\n<p>Times33的算法很简单，就是不断的乘33,下边是times33算法:</p>\n<h2 id=\"Times33-hash\"><a href=\"#Times33-hash\" class=\"headerlink\" title=\"Times33(hash)\"></a>Times33(hash)</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myHash</span><span class=\"params\">($str)</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// hash(i) = hash(i-1) * 33 + str[i]</span></div><div class=\"line\">    $hash = <span class=\"number\">5381</span>;</div><div class=\"line\">    $s    = md5($str); <span class=\"comment\">//相比其它版本，进行了md5加密</span></div><div class=\"line\">    $seed = <span class=\"number\">5</span>;</div><div class=\"line\">    $len  = <span class=\"number\">32</span>;<span class=\"comment\">//加密后长度32</span></div><div class=\"line\">    <span class=\"keyword\">for</span> ($i = <span class=\"number\">0</span>; $i &lt; $len; $i++) &#123;</div><div class=\"line\">        <span class=\"comment\">// (hash &lt;&lt; 5) + hash 相当于 hash * 33</span></div><div class=\"line\">        <span class=\"comment\">//$hash = sprintf(\"%u\", $hash * 33) + ord($s&#123;$i&#125;);</span></div><div class=\"line\">        <span class=\"comment\">//$hash = ($hash * 33 + ord($s&#123;$i&#125;)) &amp; 0x7FFFFFFF;</span></div><div class=\"line\">        $hash = ($hash &lt;&lt; $seed) + $hash + ord($s&#123;$i&#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"keyword\">return</span> $hash &amp; <span class=\"number\">0x7FFFFFFF</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>其中<code>&lt;&lt;</code> 表示左移,每次左移表示x2例如:</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">$num = <span class=\"number\">2</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">echo</span> $num &lt;&lt; <span class=\"number\">2</span>;</div></pre></td></tr></table></figure>\n<p>所以($hash &lt;&lt; $seed)表示 <code>$hash * 32</code> ,同时加上$hash,也就表示 <code>$hash * 33</code>了。ord()函数返回字符串的首个字符的 ASCII 值。<br>最后<code>$hash &amp; 0x7FFFFFFF</code> 表示与整形的最大值与操作(<code>0x7FFFF111FFF</code>二进制为<code>1111111111111111111111111111</code>),<br>这个与操作会截取超过整形二进制部分,所以times33计算出来的值不会超过整形的最大值。</p>\n<h2 id=\"为什么要用hashtable实现php数组\"><a href=\"#为什么要用hashtable实现php数组\" class=\"headerlink\" title=\"为什么要用hashtable实现php数组?\"></a>为什么要用hashtable实现php数组?</h2><p>因为散列表是根据关键建码值直接进项访问的数据结构。在key和value之间有一个映射函数,可以根据key直接索引到对应的value值,它并<br>不会使用一般的对比操作,而是直接使用<code>内存的起始位置和偏移位置</code>进行寻址,所以会比正常的寻址要快。</p>\n<h2 id=\"散列表结构\"><a href=\"#散列表结构\" class=\"headerlink\" title=\"散列表结构\"></a>散列表结构</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">struct</span> _zend_array &#123;</div><div class=\"line\">\tzend_refcounted_h gc;</div><div class=\"line\">\t<span class=\"keyword\">union</span> &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">\t\t\tZEND_ENDIAN_LOHI_4(</div><div class=\"line\">\t\t\t\tzend_uchar    flags,</div><div class=\"line\">\t\t\t\tzend_uchar    nApplyCount,</div><div class=\"line\">\t\t\t\tzend_uchar    nIteratorsCount,</div><div class=\"line\">\t\t\t\tzend_uchar    reserve)</div><div class=\"line\">\t\t&#125; v;</div><div class=\"line\">\t\t<span class=\"keyword\">uint32_t</span> flags;</div><div class=\"line\">\t&#125; u;</div><div class=\"line\">\t<span class=\"keyword\">uint32_t</span>          nTableMask;</div><div class=\"line\">\tBucket           *arData;</div><div class=\"line\">\t<span class=\"keyword\">uint32_t</span>          nNumUsed;</div><div class=\"line\">\t<span class=\"keyword\">uint32_t</span>          nNumOfElements;</div><div class=\"line\">\t<span class=\"keyword\">uint32_t</span>          nTableSize;</div><div class=\"line\">\t<span class=\"keyword\">uint32_t</span>          nInternalPointer;</div><div class=\"line\">\tzend_long         nNextFreeElement;</div><div class=\"line\">\t<span class=\"keyword\">dtor_func_t</span>       pDestructor;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>主要字段介绍:</p>\n<ul>\n<li>gc 引用次数,垃圾回收时会用到。</li>\n<li>union u 就不介绍了。</li>\n<li>arData 存储元素的数组,内存是连续的,arData指向第一个元素。</li>\n<li>nTableMask nTableSize的负数。</li>\n<li>nTableSize 数组长度,为2的n此房。</li>\n<li>nNumUsed 当前使用的Bucket数。</li>\n<li>nNumOfElements 当前所有的Bucket数。</li>\n<li>nNextFreeElement 下一个被使用的Bucket($a[] = ‘’)</li>\n<li>pDestructor 删除某个元素是会使用</li>\n</ul>\n<h2 id=\"Bucket结构\"><a href=\"#Bucket结构\" class=\"headerlink\" title=\"Bucket结构\"></a>Bucket结构</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> _Bucket &#123;</div><div class=\"line\">\tzval              val;</div><div class=\"line\">\tzend_ulong        h;                <span class=\"comment\">/* hash value (or numeric index)   */</span></div><div class=\"line\">\tzend_string      *key;              <span class=\"comment\">/* string key or NULL for numerics */</span></div><div class=\"line\">&#125; Bucket;</div></pre></td></tr></table></figure>\n<ul>\n<li>h hash出来的值(times33)</li>\n<li>*key 存储元素的key</li>\n<li>val 具体值,是个zval</li>\n</ul>\n<h2 id=\"如何实现\"><a href=\"#如何实现\" class=\"headerlink\" title=\"如何实现\"></a>如何实现</h2><p>php中实现散列表实现主要使用<code>存储元素数组</code>和 <code>映射函数</code>（也可以称作散列函数）和<code>映射表</code></p>\n<h4 id=\"举个具体的栗子\"><a href=\"#举个具体的栗子\" class=\"headerlink\" title=\"举个具体的栗子:\"></a>举个具体的栗子:</h4><p> 如果我们要在php代码中声明一个数组会发生什么?下边分析下php是如何实现数组的。<br> <figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">$arr= [</div><div class=\"line\">\t<span class=\"string\">'a'</span> =&gt; <span class=\"string\">'111'</span>,</div><div class=\"line\">\t<span class=\"string\">'b'</span> =&gt; <span class=\"string\">'222'</span>,</div><div class=\"line\">\t<span class=\"string\">'c'</span> =&gt; <span class=\"string\">'ccc'</span></div><div class=\"line\">];</div></pre></td></tr></table></figure></p>\n<ol>\n<li>首先肯定是初始化。</li>\n<li>接下来将每个元素对应的值依照顺序拷贝到 Bucket里。</li>\n<li>然后利用映射函数对求值,根据算出来的值将其对应的bucket的地址写到该值对应的映射这表里。</li>\n</ol>\n<p>具体操作如下图:<br><img src=\"/photo/img/php数组实现/php数组具体实现.png\" alt=\"image\"></p>\n<p>当然我们这里的映射是理想映射,因为在映射的计算过程中可能存在冲突,后续会介绍映射函数,以及如何解映射函数计算后的冲突。</p>\n<h3 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">ZEND_API <span class=\"keyword\">void</span> ZEND_FASTCALL _zend_hash_init(HashTable *ht, <span class=\"keyword\">uint32_t</span> nSize, <span class=\"keyword\">dtor_func_t</span> pDestructor, zend_bool persistent ZEND_FILE_LINE_DC)</div><div class=\"line\">&#123;</div><div class=\"line\">\tGC_REFCOUNT(ht) = <span class=\"number\">1</span>; <span class=\"comment\">//设置引用次数</span></div><div class=\"line\">\tGC_TYPE_INFO(ht) = IS_ARRAY; <span class=\"comment\">//设置数据类型</span></div><div class=\"line\">\tht-&gt;u.flags = (persistent ? HASH_FLAG_PERSISTENT : <span class=\"number\">0</span>) | HASH_FLAG_APPLY_PROTECTION | HASH_FLAG_STATIC_KEYS;</div><div class=\"line\">\tht-&gt;nTableMask = HT_MIN_MASK;</div><div class=\"line\">\tHT_SET_DATA_ADDR(ht, &amp;uninitialized_bucket);</div><div class=\"line\">\tht-&gt;nNumUsed = <span class=\"number\">0</span>;</div><div class=\"line\">\tht-&gt;nNumOfElements = <span class=\"number\">0</span>;</div><div class=\"line\">\tht-&gt;nInternalPointer = HT_INVALID_IDX;</div><div class=\"line\">\tht-&gt;nNextFreeElement = <span class=\"number\">0</span>;</div><div class=\"line\">\tht-&gt;pDestructor = pDestructor;</div><div class=\"line\">\tht-&gt;nTableSize = zend_hash_check_size(nSize);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>初始化的时候主要是对hashtable中各个成员的进行初始化设置,而且在这个时候不会给arData分配内存,只有在开始插入数据的时候才会<br>为arData分配内存。</p>\n<h2 id=\"映射函数\"><a href=\"#映射函数\" class=\"headerlink\" title=\"映射函数\"></a>映射函数</h2><p>映射函数其实就是一次<code>hash</code>操作和和一次<code>|</code>操作.<br>hash操作就是上边锁提到得到times33操作,<code>|</code>操作是计算出来的hash值与nTableSize进行计算。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">nIndex = ket-&gt;h | nTableMask;</div></pre></td></tr></table></figure></p>\n<p>因为nTableMask是nTableSize的负数,所以计算出来的nIndex值区间应该为[-1,nTableMask]。</p>\n<p>此处待补充 为什么会在[-1, nTableMask] 区间内。</p>\n<h3 id=\"写入数据\"><a href=\"#写入数据\" class=\"headerlink\" title=\"写入数据\"></a>写入数据</h3><p>在初始化的时候并不会对arData分配内存,只有在写入的时候才会真正分配内存</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> zend_always_inline <span class=\"title\">zend_hash_real_init_ex</span><span class=\"params\">(HashTable *ht, <span class=\"keyword\">int</span> packed)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\tHT_ASSERT(GC_REFCOUNT(ht) == <span class=\"number\">1</span>);</div><div class=\"line\">\tZEND_ASSERT(!((ht)-&gt;u.flags &amp; HASH_FLAG_INITIALIZED));</div><div class=\"line\">\t<span class=\"keyword\">if</span> (packed) &#123;</div><div class=\"line\">\t\tHT_SET_DATA_ADDR(ht, pemalloc(HT_SIZE(ht), (ht)-&gt;u.flags &amp; HASH_FLAG_PERSISTENT));</div><div class=\"line\">\t\t(ht)-&gt;u.flags |= HASH_FLAG_INITIALIZED | HASH_FLAG_PACKED;</div><div class=\"line\">\t\tHT_HASH_RESET_PACKED(ht);</div><div class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t(ht)-&gt;nTableMask = -(ht)-&gt;nTableSize;</div><div class=\"line\">\t\tHT_SET_DATA_ADDR(ht, pemalloc(HT_SIZE(ht), (ht)-&gt;u.flags &amp; HASH_FLAG_PERSISTENT));</div><div class=\"line\">\t\t(ht)-&gt;u.flags |= HASH_FLAG_INITIALIZED;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (EXPECTED(ht-&gt;nTableMask == <span class=\"number\">-8</span>)) &#123;</div><div class=\"line\">\t\t\tBucket *arData = ht-&gt;arData;</div><div class=\"line\"></div><div class=\"line\">\t\t\tHT_HASH_EX(arData, <span class=\"number\">-8</span>) = <span class=\"number\">-1</span>;</div><div class=\"line\">\t\t\tHT_HASH_EX(arData, <span class=\"number\">-7</span>) = <span class=\"number\">-1</span>;</div><div class=\"line\">\t\t\tHT_HASH_EX(arData, <span class=\"number\">-6</span>) = <span class=\"number\">-1</span>;</div><div class=\"line\">\t\t\tHT_HASH_EX(arData, <span class=\"number\">-5</span>) = <span class=\"number\">-1</span>;</div><div class=\"line\">\t\t\tHT_HASH_EX(arData, <span class=\"number\">-4</span>) = <span class=\"number\">-1</span>;</div><div class=\"line\">\t\t\tHT_HASH_EX(arData, <span class=\"number\">-3</span>) = <span class=\"number\">-1</span>;</div><div class=\"line\">\t\t\tHT_HASH_EX(arData, <span class=\"number\">-2</span>) = <span class=\"number\">-1</span>;</div><div class=\"line\">\t\t\tHT_HASH_EX(arData, <span class=\"number\">-1</span>) = <span class=\"number\">-1</span>;</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\tHT_HASH_RESET(ht);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>分配具体的内存</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> HT_SIZE_EX(nTableSize, nTableMask) \\</span></div><div class=\"line\">\t(HT_DATA_SIZE((nTableSize)) + HT_HASH_SIZE((nTableMask)))</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">#define HT_HASH_SIZE(nTableMask) \\</div><div class=\"line\">\t(((size_t)(uint32_t)-(int32_t)(nTableMask)) * sizeof(uint32_t))</div><div class=\"line\"></div><div class=\"line\">#define HT_DATA_SIZE(nTableSize) \\</div><div class=\"line\">\t((size_t)(nTableSize) * sizeof(Bucket))</div></pre></td></tr></table></figure>\n<p>可以看到在分配具体分配内存的时候会分配 nTableSize<em>(Bucket+uint32_t)大小的内存。<br>讲道理只需要分配nTableSize</em>Bucket大小内存就可以了,为什么会多余出来 nTableSize<em>uint32_t内存呢?<br>因为nTableSize</em>uint32_t就是<code>映射表</code>所占内存大小。所以说Bucket会和映射表一次申请内存。<br>写完成写入操作以后会将<code>*arData</code> 指向第一个Bucket。</p>\n<p>具体在内存里的结果如图所示:<br><img src=\"/photo/img/php数组实现/hashtable.png\" alt=\"image\"></p>\n<p><code>映射表</code>在初始化的时候所有值都是-1,只有在被赋值时候会写入对应<code>Bucket</code>所在链表的偏移量。;<br>ht-&gt;arData 指向第一个<code>Bucket</code>的位置,在赋值的时候会按照列表顺序,将值写入<code>Bucket</code>的value里,然后会根据<br>映射函数算出值当做偏移量找到对应<code>映射表</code>的元素,然后将当前<code>Bucket</code>写入此元素。</p>\n<p>ps nTableSize 为2的次方倍。</p>\n<h2 id=\"冲突\"><a href=\"#冲突\" class=\"headerlink\" title=\"冲突\"></a>冲突</h2><p>如果<code>nIndex = ket-&gt;h | nTableMask</code> 算出来的值冲突了怎么办? 首先<code>映射表</code>的每个元素不是链表,所以导致无法存储多个元素。<br>在php中是这样处理冲突的:<br>首先<code>映射表</code>的所有元素初始化值为 -1 ,当前<br>如果用冲突会将新算出来的值对应的<code>Bucket</code>覆盖原来旧的<code>Bucket</code>,然后将旧的<code>Bucket</code>迁移到新的<code>Bucket</code>,<br>并将旧的<code>Bucket</code>的u2.next(默认为-1) 指向新<code>Bucket</code>。</p>\n<p>如图<br><img src=\"/photo/img/php数组实现/链表冲突.png\" alt=\"image\"></p>\n<h2 id=\"查找\"><a href=\"#查找\" class=\"headerlink\" title=\"查找\"></a>查找</h2><p>php再查找一个数组元素是,首先会根据其key 获取到计算后hash值’ket-&gt;h’,然后根据映射函数算出当前元素在<code>映射表</code>中的偏移量,利用当前位置+偏移量找到<code>映射表</code>的元素,再根据其内的偏量找到对应<code>Bucket</code>链表的首个元素位置,最后遍历该链表核对key值,找到对应的值。</p>\n<p>具体实现函数:<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> zend_always_inline Bucket *<span class=\"title\">zend_hash_find_bucket</span><span class=\"params\">(<span class=\"keyword\">const</span> HashTable *ht, zend_string *key)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\tzend_ulong h;</div><div class=\"line\">\t<span class=\"keyword\">uint32_t</span> nIndex;</div><div class=\"line\">\t<span class=\"keyword\">uint32_t</span> idx;</div><div class=\"line\">\tBucket *p, *arData;</div><div class=\"line\"></div><div class=\"line\">\th = zend_string_hash_val(key);</div><div class=\"line\">\tarData = ht-&gt;arData;</div><div class=\"line\">\tnIndex = h | ht-&gt;nTableMask;</div><div class=\"line\">\tidx = HT_HASH_EX(arData, nIndex);</div><div class=\"line\">\t<span class=\"keyword\">while</span> (EXPECTED(idx != HT_INVALID_IDX)) &#123;</div><div class=\"line\">\t\tp = HT_HASH_TO_BUCKET_EX(arData, idx);</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (EXPECTED(p-&gt;key == key)) &#123; <span class=\"comment\">/* check for the same interned string */</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> p;</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (EXPECTED(p-&gt;h == h) &amp;&amp;</div><div class=\"line\">\t\t     EXPECTED(p-&gt;key) &amp;&amp;</div><div class=\"line\">\t\t     EXPECTED(ZSTR_LEN(p-&gt;key) == ZSTR_LEN(key)) &amp;&amp;</div><div class=\"line\">\t\t     EXPECTED(<span class=\"built_in\">memcmp</span>(ZSTR_VAL(p-&gt;key), ZSTR_VAL(key), ZSTR_LEN(key)) == <span class=\"number\">0</span>)) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> p;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tidx = Z_NEXT(p-&gt;val);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"扩容\"><a href=\"#扩容\" class=\"headerlink\" title=\"扩容\"></a>扩容</h2><p>数组的容量在初始化的时候已经确定了大小,就是nTableSize。当然映射函数也是根据 nTableMask 来计算的。<br>所以我们扩容时候必须重新计算索引,也就是<code>映射表</code>里的值。<br>具体扩容规则:<br>首先当需要扩容时,会计算当前<code>Bucket</code>链表里删除元素数量占总表元素数量的比例,如果没有超过阈值则申请分配一个原来数组大小两倍的新素组,把元素复制到新数组上,然后重新建立索引。</p>\n<p>阈值判断:<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ht-&gt;nNumUsed &gt; ht-&gt;nNumOfElements + (ht-&gt;nNumOfElements &gt;&gt; <span class=\"number\">5</span></div></pre></td></tr></table></figure></p>\n<p>处理过程:<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> ZEND_FASTCALL <span class=\"title\">zend_hash_do_resize</span><span class=\"params\">(HashTable *ht)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\"></div><div class=\"line\">\tIS_CONSISTENT(ht);</div><div class=\"line\">\tHT_ASSERT(GC_REFCOUNT(ht) == <span class=\"number\">1</span>);</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> (ht-&gt;nNumUsed &gt; ht-&gt;nNumOfElements + (ht-&gt;nNumOfElements &gt;&gt; <span class=\"number\">5</span>)) &#123; <span class=\"comment\">/* additional term is there to amortize the cost of compaction */</span></div><div class=\"line\">\t\tHANDLE_BLOCK_INTERRUPTIONS();</div><div class=\"line\">\t\tzend_hash_rehash(ht);</div><div class=\"line\">\t\tHANDLE_UNBLOCK_INTERRUPTIONS();</div><div class=\"line\">\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (ht-&gt;nTableSize &lt; HT_MAX_SIZE) &#123;\t<span class=\"comment\">/* Let's double the table size */</span></div><div class=\"line\">\t\t<span class=\"keyword\">void</span> *new_data, *old_data = HT_GET_DATA_ADDR(ht);</div><div class=\"line\">\t\t<span class=\"keyword\">uint32_t</span> nSize = ht-&gt;nTableSize + ht-&gt;nTableSize;</div><div class=\"line\">\t\tBucket *old_buckets = ht-&gt;arData;</div><div class=\"line\"></div><div class=\"line\">\t\tHANDLE_BLOCK_INTERRUPTIONS();</div><div class=\"line\">\t\tnew_data = pemalloc(HT_SIZE_EX(nSize, -nSize), ht-&gt;u.flags &amp; HASH_FLAG_PERSISTENT);</div><div class=\"line\">\t\tht-&gt;nTableSize = nSize;</div><div class=\"line\">\t\tht-&gt;nTableMask = -ht-&gt;nTableSize;</div><div class=\"line\">\t\tHT_SET_DATA_ADDR(ht, new_data);</div><div class=\"line\">\t\t<span class=\"built_in\">memcpy</span>(ht-&gt;arData, old_buckets, <span class=\"keyword\">sizeof</span>(Bucket) * ht-&gt;nNumUsed);</div><div class=\"line\">\t\tpefree(old_data, ht-&gt;u.flags &amp; HASH_FLAG_PERSISTENT);</div><div class=\"line\">\t\tzend_hash_rehash(ht);</div><div class=\"line\">\t\tHANDLE_UNBLOCK_INTERRUPTIONS();</div><div class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\tzend_error_noreturn(E_ERROR, <span class=\"string\">\"Possible integer overflow in memory allocation (%zu * %zu + %zu)\"</span>, ht-&gt;nTableSize * <span class=\"number\">2</span>, <span class=\"keyword\">sizeof</span>(Bucket) + <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">uint32_t</span>), <span class=\"keyword\">sizeof</span>(Bucket));</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在处理的过程中还会把已经删除的<code>Bucket</code>给删除。</p>\n<p>具体的操作在<code>zend_hash.c</code>文件里。<br>如果超过阈值,则会把已经删除<code>Bucket</code>移除,然后把又有后边的元素往前移动,补上空缺的<code>Bucket</code>,当然索引也会重建。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://www.cnblogs.com/52fhy/p/5007456.html\" target=\"_blank\" rel=\"noopener\">time33 </a></li>\n<li><a href=\"https://github.com/pangudashu/php7-internal/blob/master/2/zval.md\" target=\"_blank\" rel=\"noopener\">2.1 变量的内部实现</a></li>\n</ul>\n"},{"title":"php的引用","date":"2018-08-12T14:18:07.000Z","_content":"\n### &\n\n&是php中的引用,他并不一种独立的数据类型,而是指向其他数据类型的数据结构,和C语言的指针类似。\n\n具体作用为:当我们修改引用类型变量是,其修改的将作用于实际引用的变量上。\n\n如果当我们使用&符号生成一个引用变量时,首先会为&操作生成一个zend_reference结构,zend_reference就是引用\n类型的结构体,他内嵌一个zval,然后此结构的体zval的value指向原来zval的value上。然后将原来zval的变量\n类型变为IS_REFERENCE,原来zval的value执行新创建zend_reference结构。\n索引&的作用就是新生成zend_reference,然后将其指向原来的zval的value上,顺便把原来zval的变量类型变化为引用类型。\n\n```c\nstruct _zend_reference {\n    zend_refcondted_h gc;\n    zval              val;  指向原来的value.\n};\n```\n\n### 举个栗子\n\n```\n    $a = time(); //步骤1\n    $b = &$a;    //步骤2\n```\n\n**步骤1**\n\n现在`$a = time()`是他们的数据结构指向为:\n\n![image](/photo/img/php引用/未引用前.png)\n\n此时数据结构,一直指针指向是这个样子。\n\n**步骤2**\n\n![image](/photo/img/php引用/引用后.png)\n\n\n也就是说PHP的引用在使用后新生成一个引用类型机构,然后将引用类型结构指向越来的value,最后将原来zval的value\n指向新生成的结构体,并将其变量类型变为引用类型,IS_REFERENCE。当然随之改变的还有计数。\n","source":"_posts/php的&符号.md","raw":"---\ntitle: 'php的引用'\ndate: 2018-08-12 22:18:07\ntags:\n---\n\n### &\n\n&是php中的引用,他并不一种独立的数据类型,而是指向其他数据类型的数据结构,和C语言的指针类似。\n\n具体作用为:当我们修改引用类型变量是,其修改的将作用于实际引用的变量上。\n\n如果当我们使用&符号生成一个引用变量时,首先会为&操作生成一个zend_reference结构,zend_reference就是引用\n类型的结构体,他内嵌一个zval,然后此结构的体zval的value指向原来zval的value上。然后将原来zval的变量\n类型变为IS_REFERENCE,原来zval的value执行新创建zend_reference结构。\n索引&的作用就是新生成zend_reference,然后将其指向原来的zval的value上,顺便把原来zval的变量类型变化为引用类型。\n\n```c\nstruct _zend_reference {\n    zend_refcondted_h gc;\n    zval              val;  指向原来的value.\n};\n```\n\n### 举个栗子\n\n```\n    $a = time(); //步骤1\n    $b = &$a;    //步骤2\n```\n\n**步骤1**\n\n现在`$a = time()`是他们的数据结构指向为:\n\n![image](/photo/img/php引用/未引用前.png)\n\n此时数据结构,一直指针指向是这个样子。\n\n**步骤2**\n\n![image](/photo/img/php引用/引用后.png)\n\n\n也就是说PHP的引用在使用后新生成一个引用类型机构,然后将引用类型结构指向越来的value,最后将原来zval的value\n指向新生成的结构体,并将其变量类型变为引用类型,IS_REFERENCE。当然随之改变的还有计数。\n","slug":"php的&符号","published":1,"updated":"2018-10-30T02:20:15.100Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqavhgdk000rzqjfnhxf484r","content":"<h3 id=\"amp\"><a href=\"#amp\" class=\"headerlink\" title=\"&amp;\"></a>&amp;</h3><p>&amp;是php中的引用,他并不一种独立的数据类型,而是指向其他数据类型的数据结构,和C语言的指针类似。</p>\n<p>具体作用为:当我们修改引用类型变量是,其修改的将作用于实际引用的变量上。</p>\n<p>如果当我们使用&amp;符号生成一个引用变量时,首先会为&amp;操作生成一个zend_reference结构,zend_reference就是引用<br>类型的结构体,他内嵌一个zval,然后此结构的体zval的value指向原来zval的value上。然后将原来zval的变量<br>类型变为IS_REFERENCE,原来zval的value执行新创建zend_reference结构。<br>索引&amp;的作用就是新生成zend_reference,然后将其指向原来的zval的value上,顺便把原来zval的变量类型变化为引用类型。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">struct</span> _zend_reference &#123;</div><div class=\"line\">    zend_refcondted_h gc;</div><div class=\"line\">    zval              val;  指向原来的value.</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h3 id=\"举个栗子\"><a href=\"#举个栗子\" class=\"headerlink\" title=\"举个栗子\"></a>举个栗子</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$a = time(); //步骤1</div><div class=\"line\">$b = &amp;$a;    //步骤2</div></pre></td></tr></table></figure>\n<p><strong>步骤1</strong></p>\n<p>现在<code>$a = time()</code>是他们的数据结构指向为:</p>\n<p><img src=\"/photo/img/php引用/未引用前.png\" alt=\"image\"></p>\n<p>此时数据结构,一直指针指向是这个样子。</p>\n<p><strong>步骤2</strong></p>\n<p><img src=\"/photo/img/php引用/引用后.png\" alt=\"image\"></p>\n<p>也就是说PHP的引用在使用后新生成一个引用类型机构,然后将引用类型结构指向越来的value,最后将原来zval的value<br>指向新生成的结构体,并将其变量类型变为引用类型,IS_REFERENCE。当然随之改变的还有计数。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"amp\"><a href=\"#amp\" class=\"headerlink\" title=\"&amp;\"></a>&amp;</h3><p>&amp;是php中的引用,他并不一种独立的数据类型,而是指向其他数据类型的数据结构,和C语言的指针类似。</p>\n<p>具体作用为:当我们修改引用类型变量是,其修改的将作用于实际引用的变量上。</p>\n<p>如果当我们使用&amp;符号生成一个引用变量时,首先会为&amp;操作生成一个zend_reference结构,zend_reference就是引用<br>类型的结构体,他内嵌一个zval,然后此结构的体zval的value指向原来zval的value上。然后将原来zval的变量<br>类型变为IS_REFERENCE,原来zval的value执行新创建zend_reference结构。<br>索引&amp;的作用就是新生成zend_reference,然后将其指向原来的zval的value上,顺便把原来zval的变量类型变化为引用类型。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">struct</span> _zend_reference &#123;</div><div class=\"line\">    zend_refcondted_h gc;</div><div class=\"line\">    zval              val;  指向原来的value.</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h3 id=\"举个栗子\"><a href=\"#举个栗子\" class=\"headerlink\" title=\"举个栗子\"></a>举个栗子</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$a = time(); //步骤1</div><div class=\"line\">$b = &amp;$a;    //步骤2</div></pre></td></tr></table></figure>\n<p><strong>步骤1</strong></p>\n<p>现在<code>$a = time()</code>是他们的数据结构指向为:</p>\n<p><img src=\"/photo/img/php引用/未引用前.png\" alt=\"image\"></p>\n<p>此时数据结构,一直指针指向是这个样子。</p>\n<p><strong>步骤2</strong></p>\n<p><img src=\"/photo/img/php引用/引用后.png\" alt=\"image\"></p>\n<p>也就是说PHP的引用在使用后新生成一个引用类型机构,然后将引用类型结构指向越来的value,最后将原来zval的value<br>指向新生成的结构体,并将其变量类型变为引用类型,IS_REFERENCE。当然随之改变的还有计数。</p>\n"},{"title":"php闭包","date":"2018-08-25T06:50:55.000Z","_content":"在看guzzle包的时候看大到了一段有意思的代码, 简化以后类似于下边:\n\n```php\n<?php\n/**\n* \n*/\nclass test \n{\n\tpublic  $handler;\n\tpublic function __construct(callable $handler = null)\n\t{\n\t\t$this->handler = $handler;\n\t}\n\n\tpublic static function create(callable $handler)\n\t{\n\t\treturn new self($handler);\n\t}\n\n\tpublic function __invoke($request,$options)\n\t{\n\t\t$func = $this->handler;\n\t    return $func($request, $options);\n\t}\n\n\n\tpublic function test1()\n\t{\n\t\treturn [$this, 'exec1'];\n\t}\n\n\tpublic function exec1($a,$b)\n\t{\n\t\techo ($a+$b);\n\t}\n}\n\n$test = new test();\n\n\n\n$obj = test::create($test->test1());\n\n$obj(1,4);\n\n\n```\n\n- php文档是这样描述闭包的\n\n\n`PHP是将函数以string形式传递的。 可以使用任何内置或用户自定义函数，但除了语言结构例如：array()，echo，empty()，eval()，exit()，isset()，list()，print 或 unset()。\n \n 一个已实例化的 object 的方法被作为 array 传递，下标 0 包含该 object，下标 1 包含方法名。 在同一个类里可以访问 protected 和 private 方法。\n \n 静态类方法也可不经实例化该类的对象而传递，只要在下标 0 中包含类名而不是对象。自 PHP 5.2.3 起，也可以传递 'ClassName::methodName'。\n \n 除了普通的用户自定义函数外，也可传递 匿名函数 给回调参数。`\n \n 除了上边的这些可以作为callable参数的类型,还有一个是拥有__invoke()的实例化对象。\n\n\n所以实例化的对象可以使用 `[$obj,'functionName']` 当做闭包去传递。\n`$obj = test::create($test->test1());`将我们的`test1`方法赋值给新实例化的对象里。\n\n\n- 魔术方法`__invoke()`表示:\n\n当尝试以调用函数的方式调用一个对象时，__invoke() 方法会被自动调用。\n\n\n所以我们调用`$obj()`函数时会调用到__invoke()里,最后调用到我们一开始注册的函数。\n\n\n\nps\n```\nclass test \n{\n\tpublic  $handler;\n\tpublic function __construct(callable $handler = null)\n\t{\n\t\t$this->handler = $handler;\n\t}\n\n\tpublic static function create(callable $handler)\n\t{\n\t\treturn new self($handler);\n\t}\n\n\tpublic function __invoke($request,$options)\n\t{\n\t\t$func = $this->handler;\n\t    return $func($request, $options);\n\t}\n\n\n\tpublic function test1()\n\t{\n\t\treturn [$this, 'exec1'];\n\t}\n\n\tpublic function exec1($a,$b)\n\t{\n\t\techo ($a+$b);\n\t}\n}\n\n$test = new test();\n\n\n\n$blj = test::create($test->test1());\n$blj(1,4);\n//测试对象是否可以作为callable类型参数\n\n\n$test = test::create(new test());\n```","source":"_posts/php闭包.md","raw":"---\ntitle: php闭包\ndate: 2018-08-25 14:50:55\ntags:\n---\n在看guzzle包的时候看大到了一段有意思的代码, 简化以后类似于下边:\n\n```php\n<?php\n/**\n* \n*/\nclass test \n{\n\tpublic  $handler;\n\tpublic function __construct(callable $handler = null)\n\t{\n\t\t$this->handler = $handler;\n\t}\n\n\tpublic static function create(callable $handler)\n\t{\n\t\treturn new self($handler);\n\t}\n\n\tpublic function __invoke($request,$options)\n\t{\n\t\t$func = $this->handler;\n\t    return $func($request, $options);\n\t}\n\n\n\tpublic function test1()\n\t{\n\t\treturn [$this, 'exec1'];\n\t}\n\n\tpublic function exec1($a,$b)\n\t{\n\t\techo ($a+$b);\n\t}\n}\n\n$test = new test();\n\n\n\n$obj = test::create($test->test1());\n\n$obj(1,4);\n\n\n```\n\n- php文档是这样描述闭包的\n\n\n`PHP是将函数以string形式传递的。 可以使用任何内置或用户自定义函数，但除了语言结构例如：array()，echo，empty()，eval()，exit()，isset()，list()，print 或 unset()。\n \n 一个已实例化的 object 的方法被作为 array 传递，下标 0 包含该 object，下标 1 包含方法名。 在同一个类里可以访问 protected 和 private 方法。\n \n 静态类方法也可不经实例化该类的对象而传递，只要在下标 0 中包含类名而不是对象。自 PHP 5.2.3 起，也可以传递 'ClassName::methodName'。\n \n 除了普通的用户自定义函数外，也可传递 匿名函数 给回调参数。`\n \n 除了上边的这些可以作为callable参数的类型,还有一个是拥有__invoke()的实例化对象。\n\n\n所以实例化的对象可以使用 `[$obj,'functionName']` 当做闭包去传递。\n`$obj = test::create($test->test1());`将我们的`test1`方法赋值给新实例化的对象里。\n\n\n- 魔术方法`__invoke()`表示:\n\n当尝试以调用函数的方式调用一个对象时，__invoke() 方法会被自动调用。\n\n\n所以我们调用`$obj()`函数时会调用到__invoke()里,最后调用到我们一开始注册的函数。\n\n\n\nps\n```\nclass test \n{\n\tpublic  $handler;\n\tpublic function __construct(callable $handler = null)\n\t{\n\t\t$this->handler = $handler;\n\t}\n\n\tpublic static function create(callable $handler)\n\t{\n\t\treturn new self($handler);\n\t}\n\n\tpublic function __invoke($request,$options)\n\t{\n\t\t$func = $this->handler;\n\t    return $func($request, $options);\n\t}\n\n\n\tpublic function test1()\n\t{\n\t\treturn [$this, 'exec1'];\n\t}\n\n\tpublic function exec1($a,$b)\n\t{\n\t\techo ($a+$b);\n\t}\n}\n\n$test = new test();\n\n\n\n$blj = test::create($test->test1());\n$blj(1,4);\n//测试对象是否可以作为callable类型参数\n\n\n$test = test::create(new test());\n```","slug":"php闭包","published":1,"updated":"2018-08-25T08:24:48.893Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqavhgdm000tzqjfl8cq0yjj","content":"<p>在看guzzle包的时候看大到了一段有意思的代码, 简化以后类似于下边:</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">* </div><div class=\"line\">*/</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test</span> </span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">public</span>  $handler;</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">(callable $handler = null)</span></span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">$this</span>-&gt;handler = $handler;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">create</span><span class=\"params\">(callable $handler)</span></span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"keyword\">self</span>($handler);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__invoke</span><span class=\"params\">($request,$options)</span></span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t$func = <span class=\"keyword\">$this</span>-&gt;handler;</div><div class=\"line\">\t    <span class=\"keyword\">return</span> $func($request, $options);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test1</span><span class=\"params\">()</span></span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> [<span class=\"keyword\">$this</span>, <span class=\"string\">'exec1'</span>];</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">exec1</span><span class=\"params\">($a,$b)</span></span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">echo</span> ($a+$b);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">$test = <span class=\"keyword\">new</span> test();</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">$obj = test::create($test-&gt;test1());</div><div class=\"line\"></div><div class=\"line\">$obj(<span class=\"number\">1</span>,<span class=\"number\">4</span>);</div></pre></td></tr></table></figure>\n<ul>\n<li>php文档是这样描述闭包的</li>\n</ul>\n<p>`PHP是将函数以string形式传递的。 可以使用任何内置或用户自定义函数，但除了语言结构例如：array()，echo，empty()，eval()，exit()，isset()，list()，print 或 unset()。</p>\n<p> 一个已实例化的 object 的方法被作为 array 传递，下标 0 包含该 object，下标 1 包含方法名。 在同一个类里可以访问 protected 和 private 方法。</p>\n<p> 静态类方法也可不经实例化该类的对象而传递，只要在下标 0 中包含类名而不是对象。自 PHP 5.2.3 起，也可以传递 ‘ClassName::methodName’。</p>\n<p> 除了普通的用户自定义函数外，也可传递 匿名函数 给回调参数。`</p>\n<p> 除了上边的这些可以作为callable参数的类型,还有一个是拥有__invoke()的实例化对象。</p>\n<p>所以实例化的对象可以使用 <code>[$obj,&#39;functionName&#39;]</code> 当做闭包去传递。<br><code>$obj = test::create($test-&gt;test1());</code>将我们的<code>test1</code>方法赋值给新实例化的对象里。</p>\n<ul>\n<li>魔术方法<code>__invoke()</code>表示:</li>\n</ul>\n<p>当尝试以调用函数的方式调用一个对象时，__invoke() 方法会被自动调用。</p>\n<p>所以我们调用<code>$obj()</code>函数时会调用到__invoke()里,最后调用到我们一开始注册的函数。</p>\n<p>ps<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\">class test </div><div class=\"line\">&#123;</div><div class=\"line\">\tpublic  $handler;</div><div class=\"line\">\tpublic function __construct(callable $handler = null)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t$this-&gt;handler = $handler;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tpublic static function create(callable $handler)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\treturn new self($handler);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tpublic function __invoke($request,$options)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t$func = $this-&gt;handler;</div><div class=\"line\">\t    return $func($request, $options);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">\tpublic function test1()</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\treturn [$this, &apos;exec1&apos;];</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tpublic function exec1($a,$b)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\techo ($a+$b);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">$test = new test();</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">$blj = test::create($test-&gt;test1());</div><div class=\"line\">$blj(1,4);</div><div class=\"line\">//测试对象是否可以作为callable类型参数</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">$test = test::create(new test());</div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>在看guzzle包的时候看大到了一段有意思的代码, 简化以后类似于下边:</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">* </div><div class=\"line\">*/</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test</span> </span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">public</span>  $handler;</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">(callable $handler = null)</span></span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">$this</span>-&gt;handler = $handler;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">create</span><span class=\"params\">(callable $handler)</span></span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"keyword\">self</span>($handler);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__invoke</span><span class=\"params\">($request,$options)</span></span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t$func = <span class=\"keyword\">$this</span>-&gt;handler;</div><div class=\"line\">\t    <span class=\"keyword\">return</span> $func($request, $options);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test1</span><span class=\"params\">()</span></span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> [<span class=\"keyword\">$this</span>, <span class=\"string\">'exec1'</span>];</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">exec1</span><span class=\"params\">($a,$b)</span></span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">echo</span> ($a+$b);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">$test = <span class=\"keyword\">new</span> test();</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">$obj = test::create($test-&gt;test1());</div><div class=\"line\"></div><div class=\"line\">$obj(<span class=\"number\">1</span>,<span class=\"number\">4</span>);</div></pre></td></tr></table></figure>\n<ul>\n<li>php文档是这样描述闭包的</li>\n</ul>\n<p>`PHP是将函数以string形式传递的。 可以使用任何内置或用户自定义函数，但除了语言结构例如：array()，echo，empty()，eval()，exit()，isset()，list()，print 或 unset()。</p>\n<p> 一个已实例化的 object 的方法被作为 array 传递，下标 0 包含该 object，下标 1 包含方法名。 在同一个类里可以访问 protected 和 private 方法。</p>\n<p> 静态类方法也可不经实例化该类的对象而传递，只要在下标 0 中包含类名而不是对象。自 PHP 5.2.3 起，也可以传递 ‘ClassName::methodName’。</p>\n<p> 除了普通的用户自定义函数外，也可传递 匿名函数 给回调参数。`</p>\n<p> 除了上边的这些可以作为callable参数的类型,还有一个是拥有__invoke()的实例化对象。</p>\n<p>所以实例化的对象可以使用 <code>[$obj,&#39;functionName&#39;]</code> 当做闭包去传递。<br><code>$obj = test::create($test-&gt;test1());</code>将我们的<code>test1</code>方法赋值给新实例化的对象里。</p>\n<ul>\n<li>魔术方法<code>__invoke()</code>表示:</li>\n</ul>\n<p>当尝试以调用函数的方式调用一个对象时，__invoke() 方法会被自动调用。</p>\n<p>所以我们调用<code>$obj()</code>函数时会调用到__invoke()里,最后调用到我们一开始注册的函数。</p>\n<p>ps<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\">class test </div><div class=\"line\">&#123;</div><div class=\"line\">\tpublic  $handler;</div><div class=\"line\">\tpublic function __construct(callable $handler = null)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t$this-&gt;handler = $handler;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tpublic static function create(callable $handler)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\treturn new self($handler);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tpublic function __invoke($request,$options)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t$func = $this-&gt;handler;</div><div class=\"line\">\t    return $func($request, $options);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">\tpublic function test1()</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\treturn [$this, &apos;exec1&apos;];</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tpublic function exec1($a,$b)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\techo ($a+$b);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">$test = new test();</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">$blj = test::create($test-&gt;test1());</div><div class=\"line\">$blj(1,4);</div><div class=\"line\">//测试对象是否可以作为callable类型参数</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">$test = test::create(new test());</div></pre></td></tr></table></figure></p>\n"},{"title":"python学习笔记一","date":"2018-07-06T09:43:01.000Z","_content":"\n在php里数组分为索引数组和关联数组\n但是在python里这两者数组确实不同的数据类型\nlist:\ndata = [1,2,3,4,5]\n字典\n{data:1}","source":"_posts/python学习笔记一.md","raw":"---\ntitle: python学习笔记一\ndate: 2018-07-06 17:43:01\ntags:\n---\n\n在php里数组分为索引数组和关联数组\n但是在python里这两者数组确实不同的数据类型\nlist:\ndata = [1,2,3,4,5]\n字典\n{data:1}","slug":"python学习笔记一","published":1,"updated":"2018-08-19T12:31:04.532Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqavhgdo000uzqjfxt3syebp","content":"<p>在php里数组分为索引数组和关联数组<br>但是在python里这两者数组确实不同的数据类型<br>list:<br>data = [1,2,3,4,5]<br>字典<br>{data:1}</p>\n","site":{"data":{}},"excerpt":"","more":"<p>在php里数组分为索引数组和关联数组<br>但是在python里这两者数组确实不同的数据类型<br>list:<br>data = [1,2,3,4,5]<br>字典<br>{data:1}</p>\n"},{"title":"solr-增删改查","date":"2018-06-21T12:21:18.000Z","_content":"## 背景\nsolr 版本 5.3.1\n### 1.删除数据\nsolr 提供多重删除数据方式, 从控制页删除数据是一种方式,主要用于人工删除少量数据\neg:\n![image](/photo/img/solr-增删改查/DingTalk20180621202319.png)\n\n执行删除操作之前:\n\n![image](/photo/img/solr-增删改查/执行删除前数据.png)\n\n删除操作只需在控制页Document Type 选择XML选项,然后输入一下内容提交即可。\n\n```\n<commit/>\n<delete><query>id:change.me1</query></delete>\n<commit/>\n```\n\n具体执行,以及http请求:\n\n![image](/photo/img/solr-增删改查/执行删除操作.png)\n\n最后为执行删除后的结果:\n\n![image](/photo/img/solr-增删改查/执行删除操作结果.png)\n\n\n### 新增数据\n\n#### json 方式添加数据\n\n同样在solr的控制页面,选在Document Type为json。\n\n输入:\n\n```\n{\"id\":\"ceshi2\",\"title\":\"这是一个测试\"}\n```\n\n\n![image](/photo/img/solr-增删改查/新增数据.png)\n\n可以看出来solr是已http请求的方式请求 solr server,所以我们用程序去查询solr数据是,也可json的方式去查询。\n当然solr支持xml等多种功能。（solr支持从数据库导入数据）\n具体查询规则（目前还没找到,找到后补充）:\n\n执行结果\n\n![image](/photo/img/solr-增删改查/执行结果.png)\n\n\n### 更新数据\n\n第一个问题:solr不支持局部更新。\n所有的更新操作对于solr来说都是一次数据的删除和插入,例如:\n\n![image](/photo/img/solr-增删改查/更新操作.png)\n\n同事又说支持局部更新,但是我还没有找到相关文档,这个带求证","source":"_posts/solr-从控制页面删除数据.md","raw":"---\ntitle: solr-增删改查\ndate: 2018-06-21 20:21:18\ntags:\n---\n## 背景\nsolr 版本 5.3.1\n### 1.删除数据\nsolr 提供多重删除数据方式, 从控制页删除数据是一种方式,主要用于人工删除少量数据\neg:\n![image](/photo/img/solr-增删改查/DingTalk20180621202319.png)\n\n执行删除操作之前:\n\n![image](/photo/img/solr-增删改查/执行删除前数据.png)\n\n删除操作只需在控制页Document Type 选择XML选项,然后输入一下内容提交即可。\n\n```\n<commit/>\n<delete><query>id:change.me1</query></delete>\n<commit/>\n```\n\n具体执行,以及http请求:\n\n![image](/photo/img/solr-增删改查/执行删除操作.png)\n\n最后为执行删除后的结果:\n\n![image](/photo/img/solr-增删改查/执行删除操作结果.png)\n\n\n### 新增数据\n\n#### json 方式添加数据\n\n同样在solr的控制页面,选在Document Type为json。\n\n输入:\n\n```\n{\"id\":\"ceshi2\",\"title\":\"这是一个测试\"}\n```\n\n\n![image](/photo/img/solr-增删改查/新增数据.png)\n\n可以看出来solr是已http请求的方式请求 solr server,所以我们用程序去查询solr数据是,也可json的方式去查询。\n当然solr支持xml等多种功能。（solr支持从数据库导入数据）\n具体查询规则（目前还没找到,找到后补充）:\n\n执行结果\n\n![image](/photo/img/solr-增删改查/执行结果.png)\n\n\n### 更新数据\n\n第一个问题:solr不支持局部更新。\n所有的更新操作对于solr来说都是一次数据的删除和插入,例如:\n\n![image](/photo/img/solr-增删改查/更新操作.png)\n\n同事又说支持局部更新,但是我还没有找到相关文档,这个带求证","slug":"solr-从控制页面删除数据","published":1,"updated":"2018-09-18T09:30:55.557Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqavhgdr000vzqjfbj1b20qn","content":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>solr 版本 5.3.1</p>\n<h3 id=\"1-删除数据\"><a href=\"#1-删除数据\" class=\"headerlink\" title=\"1.删除数据\"></a>1.删除数据</h3><p>solr 提供多重删除数据方式, 从控制页删除数据是一种方式,主要用于人工删除少量数据<br>eg:<br><img src=\"/photo/img/solr-增删改查/DingTalk20180621202319.png\" alt=\"image\"></p>\n<p>执行删除操作之前:</p>\n<p><img src=\"/photo/img/solr-增删改查/执行删除前数据.png\" alt=\"image\"></p>\n<p>删除操作只需在控制页Document Type 选择XML选项,然后输入一下内容提交即可。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;commit/&gt;</div><div class=\"line\">&lt;delete&gt;&lt;query&gt;id:change.me1&lt;/query&gt;&lt;/delete&gt;</div><div class=\"line\">&lt;commit/&gt;</div></pre></td></tr></table></figure>\n<p>具体执行,以及http请求:</p>\n<p><img src=\"/photo/img/solr-增删改查/执行删除操作.png\" alt=\"image\"></p>\n<p>最后为执行删除后的结果:</p>\n<p><img src=\"/photo/img/solr-增删改查/执行删除操作结果.png\" alt=\"image\"></p>\n<h3 id=\"新增数据\"><a href=\"#新增数据\" class=\"headerlink\" title=\"新增数据\"></a>新增数据</h3><h4 id=\"json-方式添加数据\"><a href=\"#json-方式添加数据\" class=\"headerlink\" title=\"json 方式添加数据\"></a>json 方式添加数据</h4><p>同样在solr的控制页面,选在Document Type为json。</p>\n<p>输入:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;&quot;id&quot;:&quot;ceshi2&quot;,&quot;title&quot;:&quot;这是一个测试&quot;&#125;</div></pre></td></tr></table></figure>\n<p><img src=\"/photo/img/solr-增删改查/新增数据.png\" alt=\"image\"></p>\n<p>可以看出来solr是已http请求的方式请求 solr server,所以我们用程序去查询solr数据是,也可json的方式去查询。<br>当然solr支持xml等多种功能。（solr支持从数据库导入数据）<br>具体查询规则（目前还没找到,找到后补充）:</p>\n<p>执行结果</p>\n<p><img src=\"/photo/img/solr-增删改查/执行结果.png\" alt=\"image\"></p>\n<h3 id=\"更新数据\"><a href=\"#更新数据\" class=\"headerlink\" title=\"更新数据\"></a>更新数据</h3><p>第一个问题:solr不支持局部更新。<br>所有的更新操作对于solr来说都是一次数据的删除和插入,例如:</p>\n<p><img src=\"/photo/img/solr-增删改查/更新操作.png\" alt=\"image\"></p>\n<p>同事又说支持局部更新,但是我还没有找到相关文档,这个带求证</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>solr 版本 5.3.1</p>\n<h3 id=\"1-删除数据\"><a href=\"#1-删除数据\" class=\"headerlink\" title=\"1.删除数据\"></a>1.删除数据</h3><p>solr 提供多重删除数据方式, 从控制页删除数据是一种方式,主要用于人工删除少量数据<br>eg:<br><img src=\"/photo/img/solr-增删改查/DingTalk20180621202319.png\" alt=\"image\"></p>\n<p>执行删除操作之前:</p>\n<p><img src=\"/photo/img/solr-增删改查/执行删除前数据.png\" alt=\"image\"></p>\n<p>删除操作只需在控制页Document Type 选择XML选项,然后输入一下内容提交即可。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;commit/&gt;</div><div class=\"line\">&lt;delete&gt;&lt;query&gt;id:change.me1&lt;/query&gt;&lt;/delete&gt;</div><div class=\"line\">&lt;commit/&gt;</div></pre></td></tr></table></figure>\n<p>具体执行,以及http请求:</p>\n<p><img src=\"/photo/img/solr-增删改查/执行删除操作.png\" alt=\"image\"></p>\n<p>最后为执行删除后的结果:</p>\n<p><img src=\"/photo/img/solr-增删改查/执行删除操作结果.png\" alt=\"image\"></p>\n<h3 id=\"新增数据\"><a href=\"#新增数据\" class=\"headerlink\" title=\"新增数据\"></a>新增数据</h3><h4 id=\"json-方式添加数据\"><a href=\"#json-方式添加数据\" class=\"headerlink\" title=\"json 方式添加数据\"></a>json 方式添加数据</h4><p>同样在solr的控制页面,选在Document Type为json。</p>\n<p>输入:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;&quot;id&quot;:&quot;ceshi2&quot;,&quot;title&quot;:&quot;这是一个测试&quot;&#125;</div></pre></td></tr></table></figure>\n<p><img src=\"/photo/img/solr-增删改查/新增数据.png\" alt=\"image\"></p>\n<p>可以看出来solr是已http请求的方式请求 solr server,所以我们用程序去查询solr数据是,也可json的方式去查询。<br>当然solr支持xml等多种功能。（solr支持从数据库导入数据）<br>具体查询规则（目前还没找到,找到后补充）:</p>\n<p>执行结果</p>\n<p><img src=\"/photo/img/solr-增删改查/执行结果.png\" alt=\"image\"></p>\n<h3 id=\"更新数据\"><a href=\"#更新数据\" class=\"headerlink\" title=\"更新数据\"></a>更新数据</h3><p>第一个问题:solr不支持局部更新。<br>所有的更新操作对于solr来说都是一次数据的删除和插入,例如:</p>\n<p><img src=\"/photo/img/solr-增删改查/更新操作.png\" alt=\"image\"></p>\n<p>同事又说支持局部更新,但是我还没有找到相关文档,这个带求证</p>\n"},{"title":"swagger","date":"2018-08-06T07:30:13.000Z","_content":"\nswagger 是什么鬼? \nswagger像是个接口生成、管理、mock、测试的框架。主要功能:\n - 支持API自动生成同步的在线文档\n - 这些文档可用于项目内部API审核\n - 方便测试人员了解API\n - 这些文档可作为客户产品文档的一部分进行发布\n - 可以mock接口方便调试\n支持API规范生成代码，生成的客户端和服务器端骨架代码可以加速开发和测试速度\n## \nswagger-ui 一个是一个管理接口的服务,它可以根据swagger.json模拟接口返回。\n### 搭建swagger-ui\n\n克隆swagger-ui\n\n`git clone https://github.com/swagger-api/swagger-ui.git`\n\n配置nginx 服务\n\n```\n server {\n        listen       8090;\n        server_name  www.swagger-ui.com;\n        autoindex on;\n        #charset koi8-r;\n\n       # access_log  logs/host.access.log  main;\n        root  /Users/lijian/Desktop/code/web_code/swagger/swagger-ui/dist;\n        location / {\n\n            index  index.php index.html index.htm;\n            try_files $uri $uri/ /index.php?$query_string;\n        }\n\n        #error_page  404              /404.html;\n\n        # redirect server error pages to the static page /50x.html\n        #\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html {\n            root   html;\n        }\n        location ~ \\.php$ {\n\n            fastcgi_pass   127.0.0.1:9000;\n            fastcgi_index  index.php;\n            fastcgi_split_path_info    ^(.+\\.php)(/.+)$;\n            fastcgi_param PATH_TRANSLATED $document_root$fastcgi_path_info;\n    fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;\n            include        fastcgi_params;\n        }\n\n    }\n```\n\n重启NGINX \n`nginx -s reload`\n\n样子如下:\n\n![image](/photo/img/swagger-ui/WX20180807-095949.png)\n\n\n## swagger.json\n\nswagger.json,swagger-ui能够将swagger.json解析为对应的可处理的接口文档。\n\n效果如上图所示。\n最终要的一点在于 `http://localhost:8091/swagger.json`该url为被解析的json地址。\n\n当然如果我们需要管理不同项目的项目,可以单独配置个服务用来管理swagger.json。\n\n\n## swagger-php\n\ngithub 地址: `https://github.com/zircote/swagger-php`\n\n首先我们需要在项目里引入swagger-php 扩展包。\n\n`composer global require zircote/swagger-php`\n\n按照swagger文档写swagger备注:\neg:\n\n```SWG\n    /**\n     * @SWG\\Post(\n     *     path=\"/guestbook/appmsg\",\n     *     summary=\"访客留言\",\n     *     tags={\"new\", \"guests\"},\n     *     description=\"访客留言\",\n     *     operationId=\"appmsg\",\n     *     @SWG\\Parameter(\n     *         description=\"msg\",\n     *         format=\"string\",\n     *         in=\"formData\",\n     *         name=\"msg\",\n     *         required=true,\n     *         type=\"string\",\n     *     ),\n     *     @SWG\\Parameter(\n     *         description=\"email\",\n     *         format=\"string\",\n     *         in=\"formData\",\n     *         name=\"email\",\n     *         required=true,\n     *         type=\"string\",\n     *\n     *     ),\n     *     consumes={\"multipart/form-data\", \"application/x-www-form-urlencoded\"},\n     *     produces={\"application/json\"},\n     *     @SWG\\Response(\n     *         response=\"200\",\n     *         description=\"返回成功\",\n     *     ),\n     * )\n     *\n     */\n    \n    /**\n     *   @SWG\\Get(\n     *     path=\"/get/feedback\",\n     *     summary=\"留言表\",\n     *     tags={\"getList\"},\n     *     descriptionId=\"appmsglist\",\n     *     @SWG\\Parameter(\n     *          description=\"Id\",\n     *          format=\"integer\",\n     *          in=\"formData\",\n     *          name=\"user_id\",\n     *          required=\"true\",\n     *          type=\"integer\"\n        *      ),\n     *      @SWG\\Parameter(\n     *          description=\"phone\",\n     *          format=\"integer\",\n     *          in=\"formData\",\n     *          name=\"user_id\",\n     *          required=\"true\",\n     *          type=\"integer\"\n     *        ),\n     *     consumes={\"multipart/form-data\", \"application/x-www-form-urlencode\"},\n     *     produces={\"application/json\"},\n     *     @SWG\\Response(\n     *        response=\"200\",\n     *        description=\"返回成功\",\n     *     )\n     * )\n     *\n     */\n```\n\n写完以后运行:\n\n`./vendor/zircote/swagger-php/bin/swagger app/Business/Hera/HeraMockApi.php -o ./../../swagger_json/rrc/swagger.json\n`\n第一个为swagger.json的生成器,第二个为目标文件,第三个为生成文件。\n\n然后我们在swagger-ui 引入生成的json即可。\n\n\n","source":"_posts/swagger.md","raw":"---\ntitle: swagger\ndate: 2018-08-06 15:30:13\ntags:\n---\n\nswagger 是什么鬼? \nswagger像是个接口生成、管理、mock、测试的框架。主要功能:\n - 支持API自动生成同步的在线文档\n - 这些文档可用于项目内部API审核\n - 方便测试人员了解API\n - 这些文档可作为客户产品文档的一部分进行发布\n - 可以mock接口方便调试\n支持API规范生成代码，生成的客户端和服务器端骨架代码可以加速开发和测试速度\n## \nswagger-ui 一个是一个管理接口的服务,它可以根据swagger.json模拟接口返回。\n### 搭建swagger-ui\n\n克隆swagger-ui\n\n`git clone https://github.com/swagger-api/swagger-ui.git`\n\n配置nginx 服务\n\n```\n server {\n        listen       8090;\n        server_name  www.swagger-ui.com;\n        autoindex on;\n        #charset koi8-r;\n\n       # access_log  logs/host.access.log  main;\n        root  /Users/lijian/Desktop/code/web_code/swagger/swagger-ui/dist;\n        location / {\n\n            index  index.php index.html index.htm;\n            try_files $uri $uri/ /index.php?$query_string;\n        }\n\n        #error_page  404              /404.html;\n\n        # redirect server error pages to the static page /50x.html\n        #\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html {\n            root   html;\n        }\n        location ~ \\.php$ {\n\n            fastcgi_pass   127.0.0.1:9000;\n            fastcgi_index  index.php;\n            fastcgi_split_path_info    ^(.+\\.php)(/.+)$;\n            fastcgi_param PATH_TRANSLATED $document_root$fastcgi_path_info;\n    fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;\n            include        fastcgi_params;\n        }\n\n    }\n```\n\n重启NGINX \n`nginx -s reload`\n\n样子如下:\n\n![image](/photo/img/swagger-ui/WX20180807-095949.png)\n\n\n## swagger.json\n\nswagger.json,swagger-ui能够将swagger.json解析为对应的可处理的接口文档。\n\n效果如上图所示。\n最终要的一点在于 `http://localhost:8091/swagger.json`该url为被解析的json地址。\n\n当然如果我们需要管理不同项目的项目,可以单独配置个服务用来管理swagger.json。\n\n\n## swagger-php\n\ngithub 地址: `https://github.com/zircote/swagger-php`\n\n首先我们需要在项目里引入swagger-php 扩展包。\n\n`composer global require zircote/swagger-php`\n\n按照swagger文档写swagger备注:\neg:\n\n```SWG\n    /**\n     * @SWG\\Post(\n     *     path=\"/guestbook/appmsg\",\n     *     summary=\"访客留言\",\n     *     tags={\"new\", \"guests\"},\n     *     description=\"访客留言\",\n     *     operationId=\"appmsg\",\n     *     @SWG\\Parameter(\n     *         description=\"msg\",\n     *         format=\"string\",\n     *         in=\"formData\",\n     *         name=\"msg\",\n     *         required=true,\n     *         type=\"string\",\n     *     ),\n     *     @SWG\\Parameter(\n     *         description=\"email\",\n     *         format=\"string\",\n     *         in=\"formData\",\n     *         name=\"email\",\n     *         required=true,\n     *         type=\"string\",\n     *\n     *     ),\n     *     consumes={\"multipart/form-data\", \"application/x-www-form-urlencoded\"},\n     *     produces={\"application/json\"},\n     *     @SWG\\Response(\n     *         response=\"200\",\n     *         description=\"返回成功\",\n     *     ),\n     * )\n     *\n     */\n    \n    /**\n     *   @SWG\\Get(\n     *     path=\"/get/feedback\",\n     *     summary=\"留言表\",\n     *     tags={\"getList\"},\n     *     descriptionId=\"appmsglist\",\n     *     @SWG\\Parameter(\n     *          description=\"Id\",\n     *          format=\"integer\",\n     *          in=\"formData\",\n     *          name=\"user_id\",\n     *          required=\"true\",\n     *          type=\"integer\"\n        *      ),\n     *      @SWG\\Parameter(\n     *          description=\"phone\",\n     *          format=\"integer\",\n     *          in=\"formData\",\n     *          name=\"user_id\",\n     *          required=\"true\",\n     *          type=\"integer\"\n     *        ),\n     *     consumes={\"multipart/form-data\", \"application/x-www-form-urlencode\"},\n     *     produces={\"application/json\"},\n     *     @SWG\\Response(\n     *        response=\"200\",\n     *        description=\"返回成功\",\n     *     )\n     * )\n     *\n     */\n```\n\n写完以后运行:\n\n`./vendor/zircote/swagger-php/bin/swagger app/Business/Hera/HeraMockApi.php -o ./../../swagger_json/rrc/swagger.json\n`\n第一个为swagger.json的生成器,第二个为目标文件,第三个为生成文件。\n\n然后我们在swagger-ui 引入生成的json即可。\n\n\n","slug":"swagger","published":1,"updated":"2018-08-07T03:33:16.945Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqavhgds000wzqjfw0rgszp7","content":"<p>swagger 是什么鬼?<br>swagger像是个接口生成、管理、mock、测试的框架。主要功能:</p>\n<ul>\n<li>支持API自动生成同步的在线文档</li>\n<li>这些文档可用于项目内部API审核</li>\n<li>方便测试人员了解API</li>\n<li>这些文档可作为客户产品文档的一部分进行发布</li>\n<li>可以mock接口方便调试<br>支持API规范生成代码，生成的客户端和服务器端骨架代码可以加速开发和测试速度<br>##<br>swagger-ui 一个是一个管理接口的服务,它可以根据swagger.json模拟接口返回。<h3 id=\"搭建swagger-ui\"><a href=\"#搭建swagger-ui\" class=\"headerlink\" title=\"搭建swagger-ui\"></a>搭建swagger-ui</h3></li>\n</ul>\n<p>克隆swagger-ui</p>\n<p><code>git clone https://github.com/swagger-api/swagger-ui.git</code></p>\n<p>配置nginx 服务</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\">server &#123;</div><div class=\"line\">       listen       8090;</div><div class=\"line\">       server_name  www.swagger-ui.com;</div><div class=\"line\">       autoindex on;</div><div class=\"line\">       #charset koi8-r;</div><div class=\"line\"></div><div class=\"line\">      # access_log  logs/host.access.log  main;</div><div class=\"line\">       root  /Users/lijian/Desktop/code/web_code/swagger/swagger-ui/dist;</div><div class=\"line\">       location / &#123;</div><div class=\"line\"></div><div class=\"line\">           index  index.php index.html index.htm;</div><div class=\"line\">           try_files $uri $uri/ /index.php?$query_string;</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       #error_page  404              /404.html;</div><div class=\"line\"></div><div class=\"line\">       # redirect server error pages to the static page /50x.html</div><div class=\"line\">       #</div><div class=\"line\">       error_page   500 502 503 504  /50x.html;</div><div class=\"line\">       location = /50x.html &#123;</div><div class=\"line\">           root   html;</div><div class=\"line\">       &#125;</div><div class=\"line\">       location ~ \\.php$ &#123;</div><div class=\"line\"></div><div class=\"line\">           fastcgi_pass   127.0.0.1:9000;</div><div class=\"line\">           fastcgi_index  index.php;</div><div class=\"line\">           fastcgi_split_path_info    ^(.+\\.php)(/.+)$;</div><div class=\"line\">           fastcgi_param PATH_TRANSLATED $document_root$fastcgi_path_info;</div><div class=\"line\">   fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;</div><div class=\"line\">           include        fastcgi_params;</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<p>重启NGINX<br><code>nginx -s reload</code></p>\n<p>样子如下:</p>\n<p><img src=\"/photo/img/swagger-ui/WX20180807-095949.png\" alt=\"image\"></p>\n<h2 id=\"swagger-json\"><a href=\"#swagger-json\" class=\"headerlink\" title=\"swagger.json\"></a>swagger.json</h2><p>swagger.json,swagger-ui能够将swagger.json解析为对应的可处理的接口文档。</p>\n<p>效果如上图所示。<br>最终要的一点在于 <code>http://localhost:8091/swagger.json</code>该url为被解析的json地址。</p>\n<p>当然如果我们需要管理不同项目的项目,可以单独配置个服务用来管理swagger.json。</p>\n<h2 id=\"swagger-php\"><a href=\"#swagger-php\" class=\"headerlink\" title=\"swagger-php\"></a>swagger-php</h2><p>github 地址: <code>https://github.com/zircote/swagger-php</code></p>\n<p>首先我们需要在项目里引入swagger-php 扩展包。</p>\n<p><code>composer global require zircote/swagger-php</code></p>\n<p>按照swagger文档写swagger备注:<br>eg:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**</div><div class=\"line\"> * @SWG\\Post(</div><div class=\"line\"> *     path=&quot;/guestbook/appmsg&quot;,</div><div class=\"line\"> *     summary=&quot;访客留言&quot;,</div><div class=\"line\"> *     tags=&#123;&quot;new&quot;, &quot;guests&quot;&#125;,</div><div class=\"line\"> *     description=&quot;访客留言&quot;,</div><div class=\"line\"> *     operationId=&quot;appmsg&quot;,</div><div class=\"line\"> *     @SWG\\Parameter(</div><div class=\"line\"> *         description=&quot;msg&quot;,</div><div class=\"line\"> *         format=&quot;string&quot;,</div><div class=\"line\"> *         in=&quot;formData&quot;,</div><div class=\"line\"> *         name=&quot;msg&quot;,</div><div class=\"line\"> *         required=true,</div><div class=\"line\"> *         type=&quot;string&quot;,</div><div class=\"line\"> *     ),</div><div class=\"line\"> *     @SWG\\Parameter(</div><div class=\"line\"> *         description=&quot;email&quot;,</div><div class=\"line\"> *         format=&quot;string&quot;,</div><div class=\"line\"> *         in=&quot;formData&quot;,</div><div class=\"line\"> *         name=&quot;email&quot;,</div><div class=\"line\"> *         required=true,</div><div class=\"line\"> *         type=&quot;string&quot;,</div><div class=\"line\"> *</div><div class=\"line\"> *     ),</div><div class=\"line\"> *     consumes=&#123;&quot;multipart/form-data&quot;, &quot;application/x-www-form-urlencoded&quot;&#125;,</div><div class=\"line\"> *     produces=&#123;&quot;application/json&quot;&#125;,</div><div class=\"line\"> *     @SWG\\Response(</div><div class=\"line\"> *         response=&quot;200&quot;,</div><div class=\"line\"> *         description=&quot;返回成功&quot;,</div><div class=\"line\"> *     ),</div><div class=\"line\"> * )</div><div class=\"line\"> *</div><div class=\"line\"> */</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> *   @SWG\\Get(</div><div class=\"line\"> *     path=&quot;/get/feedback&quot;,</div><div class=\"line\"> *     summary=&quot;留言表&quot;,</div><div class=\"line\"> *     tags=&#123;&quot;getList&quot;&#125;,</div><div class=\"line\"> *     descriptionId=&quot;appmsglist&quot;,</div><div class=\"line\"> *     @SWG\\Parameter(</div><div class=\"line\"> *          description=&quot;Id&quot;,</div><div class=\"line\"> *          format=&quot;integer&quot;,</div><div class=\"line\"> *          in=&quot;formData&quot;,</div><div class=\"line\"> *          name=&quot;user_id&quot;,</div><div class=\"line\"> *          required=&quot;true&quot;,</div><div class=\"line\"> *          type=&quot;integer&quot;</div><div class=\"line\">    *      ),</div><div class=\"line\"> *      @SWG\\Parameter(</div><div class=\"line\"> *          description=&quot;phone&quot;,</div><div class=\"line\"> *          format=&quot;integer&quot;,</div><div class=\"line\"> *          in=&quot;formData&quot;,</div><div class=\"line\"> *          name=&quot;user_id&quot;,</div><div class=\"line\"> *          required=&quot;true&quot;,</div><div class=\"line\"> *          type=&quot;integer&quot;</div><div class=\"line\"> *        ),</div><div class=\"line\"> *     consumes=&#123;&quot;multipart/form-data&quot;, &quot;application/x-www-form-urlencode&quot;&#125;,</div><div class=\"line\"> *     produces=&#123;&quot;application/json&quot;&#125;,</div><div class=\"line\"> *     @SWG\\Response(</div><div class=\"line\"> *        response=&quot;200&quot;,</div><div class=\"line\"> *        description=&quot;返回成功&quot;,</div><div class=\"line\"> *     )</div><div class=\"line\"> * )</div><div class=\"line\"> *</div><div class=\"line\"> */</div></pre></td></tr></table></figure>\n<p>写完以后运行:</p>\n<p><code>./vendor/zircote/swagger-php/bin/swagger app/Business/Hera/HeraMockApi.php -o ./../../swagger_json/rrc/swagger.json</code><br>第一个为swagger.json的生成器,第二个为目标文件,第三个为生成文件。</p>\n<p>然后我们在swagger-ui 引入生成的json即可。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>swagger 是什么鬼?<br>swagger像是个接口生成、管理、mock、测试的框架。主要功能:</p>\n<ul>\n<li>支持API自动生成同步的在线文档</li>\n<li>这些文档可用于项目内部API审核</li>\n<li>方便测试人员了解API</li>\n<li>这些文档可作为客户产品文档的一部分进行发布</li>\n<li>可以mock接口方便调试<br>支持API规范生成代码，生成的客户端和服务器端骨架代码可以加速开发和测试速度<br>##<br>swagger-ui 一个是一个管理接口的服务,它可以根据swagger.json模拟接口返回。<h3 id=\"搭建swagger-ui\"><a href=\"#搭建swagger-ui\" class=\"headerlink\" title=\"搭建swagger-ui\"></a>搭建swagger-ui</h3></li>\n</ul>\n<p>克隆swagger-ui</p>\n<p><code>git clone https://github.com/swagger-api/swagger-ui.git</code></p>\n<p>配置nginx 服务</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\">server &#123;</div><div class=\"line\">       listen       8090;</div><div class=\"line\">       server_name  www.swagger-ui.com;</div><div class=\"line\">       autoindex on;</div><div class=\"line\">       #charset koi8-r;</div><div class=\"line\"></div><div class=\"line\">      # access_log  logs/host.access.log  main;</div><div class=\"line\">       root  /Users/lijian/Desktop/code/web_code/swagger/swagger-ui/dist;</div><div class=\"line\">       location / &#123;</div><div class=\"line\"></div><div class=\"line\">           index  index.php index.html index.htm;</div><div class=\"line\">           try_files $uri $uri/ /index.php?$query_string;</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       #error_page  404              /404.html;</div><div class=\"line\"></div><div class=\"line\">       # redirect server error pages to the static page /50x.html</div><div class=\"line\">       #</div><div class=\"line\">       error_page   500 502 503 504  /50x.html;</div><div class=\"line\">       location = /50x.html &#123;</div><div class=\"line\">           root   html;</div><div class=\"line\">       &#125;</div><div class=\"line\">       location ~ \\.php$ &#123;</div><div class=\"line\"></div><div class=\"line\">           fastcgi_pass   127.0.0.1:9000;</div><div class=\"line\">           fastcgi_index  index.php;</div><div class=\"line\">           fastcgi_split_path_info    ^(.+\\.php)(/.+)$;</div><div class=\"line\">           fastcgi_param PATH_TRANSLATED $document_root$fastcgi_path_info;</div><div class=\"line\">   fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;</div><div class=\"line\">           include        fastcgi_params;</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<p>重启NGINX<br><code>nginx -s reload</code></p>\n<p>样子如下:</p>\n<p><img src=\"/photo/img/swagger-ui/WX20180807-095949.png\" alt=\"image\"></p>\n<h2 id=\"swagger-json\"><a href=\"#swagger-json\" class=\"headerlink\" title=\"swagger.json\"></a>swagger.json</h2><p>swagger.json,swagger-ui能够将swagger.json解析为对应的可处理的接口文档。</p>\n<p>效果如上图所示。<br>最终要的一点在于 <code>http://localhost:8091/swagger.json</code>该url为被解析的json地址。</p>\n<p>当然如果我们需要管理不同项目的项目,可以单独配置个服务用来管理swagger.json。</p>\n<h2 id=\"swagger-php\"><a href=\"#swagger-php\" class=\"headerlink\" title=\"swagger-php\"></a>swagger-php</h2><p>github 地址: <code>https://github.com/zircote/swagger-php</code></p>\n<p>首先我们需要在项目里引入swagger-php 扩展包。</p>\n<p><code>composer global require zircote/swagger-php</code></p>\n<p>按照swagger文档写swagger备注:<br>eg:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**</div><div class=\"line\"> * @SWG\\Post(</div><div class=\"line\"> *     path=&quot;/guestbook/appmsg&quot;,</div><div class=\"line\"> *     summary=&quot;访客留言&quot;,</div><div class=\"line\"> *     tags=&#123;&quot;new&quot;, &quot;guests&quot;&#125;,</div><div class=\"line\"> *     description=&quot;访客留言&quot;,</div><div class=\"line\"> *     operationId=&quot;appmsg&quot;,</div><div class=\"line\"> *     @SWG\\Parameter(</div><div class=\"line\"> *         description=&quot;msg&quot;,</div><div class=\"line\"> *         format=&quot;string&quot;,</div><div class=\"line\"> *         in=&quot;formData&quot;,</div><div class=\"line\"> *         name=&quot;msg&quot;,</div><div class=\"line\"> *         required=true,</div><div class=\"line\"> *         type=&quot;string&quot;,</div><div class=\"line\"> *     ),</div><div class=\"line\"> *     @SWG\\Parameter(</div><div class=\"line\"> *         description=&quot;email&quot;,</div><div class=\"line\"> *         format=&quot;string&quot;,</div><div class=\"line\"> *         in=&quot;formData&quot;,</div><div class=\"line\"> *         name=&quot;email&quot;,</div><div class=\"line\"> *         required=true,</div><div class=\"line\"> *         type=&quot;string&quot;,</div><div class=\"line\"> *</div><div class=\"line\"> *     ),</div><div class=\"line\"> *     consumes=&#123;&quot;multipart/form-data&quot;, &quot;application/x-www-form-urlencoded&quot;&#125;,</div><div class=\"line\"> *     produces=&#123;&quot;application/json&quot;&#125;,</div><div class=\"line\"> *     @SWG\\Response(</div><div class=\"line\"> *         response=&quot;200&quot;,</div><div class=\"line\"> *         description=&quot;返回成功&quot;,</div><div class=\"line\"> *     ),</div><div class=\"line\"> * )</div><div class=\"line\"> *</div><div class=\"line\"> */</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> *   @SWG\\Get(</div><div class=\"line\"> *     path=&quot;/get/feedback&quot;,</div><div class=\"line\"> *     summary=&quot;留言表&quot;,</div><div class=\"line\"> *     tags=&#123;&quot;getList&quot;&#125;,</div><div class=\"line\"> *     descriptionId=&quot;appmsglist&quot;,</div><div class=\"line\"> *     @SWG\\Parameter(</div><div class=\"line\"> *          description=&quot;Id&quot;,</div><div class=\"line\"> *          format=&quot;integer&quot;,</div><div class=\"line\"> *          in=&quot;formData&quot;,</div><div class=\"line\"> *          name=&quot;user_id&quot;,</div><div class=\"line\"> *          required=&quot;true&quot;,</div><div class=\"line\"> *          type=&quot;integer&quot;</div><div class=\"line\">    *      ),</div><div class=\"line\"> *      @SWG\\Parameter(</div><div class=\"line\"> *          description=&quot;phone&quot;,</div><div class=\"line\"> *          format=&quot;integer&quot;,</div><div class=\"line\"> *          in=&quot;formData&quot;,</div><div class=\"line\"> *          name=&quot;user_id&quot;,</div><div class=\"line\"> *          required=&quot;true&quot;,</div><div class=\"line\"> *          type=&quot;integer&quot;</div><div class=\"line\"> *        ),</div><div class=\"line\"> *     consumes=&#123;&quot;multipart/form-data&quot;, &quot;application/x-www-form-urlencode&quot;&#125;,</div><div class=\"line\"> *     produces=&#123;&quot;application/json&quot;&#125;,</div><div class=\"line\"> *     @SWG\\Response(</div><div class=\"line\"> *        response=&quot;200&quot;,</div><div class=\"line\"> *        description=&quot;返回成功&quot;,</div><div class=\"line\"> *     )</div><div class=\"line\"> * )</div><div class=\"line\"> *</div><div class=\"line\"> */</div></pre></td></tr></table></figure>\n<p>写完以后运行:</p>\n<p><code>./vendor/zircote/swagger-php/bin/swagger app/Business/Hera/HeraMockApi.php -o ./../../swagger_json/rrc/swagger.json</code><br>第一个为swagger.json的生成器,第二个为目标文件,第三个为生成文件。</p>\n<p>然后我们在swagger-ui 引入生成的json即可。</p>\n"},{"title":"一次HTTP请求","date":"2016-11-20T12:09:23.000Z","_content":"\n#一次完整的HTTP请求，以及请求方式的区别\n\n-----\n今天在对接业务组mas时候遇到一个很少遇到的问题，发送一个一个不但参数的POST的请求。\n在我的印象里传参好像必带名字，因为就像一个你不认识的人要来你家，你肯定不会让他进来的。\n所以重新缕了一下POST请求，冲冲能。\n\n##一次HTTP请求的过程\n\n访问某个网址，例如我们访问www.baidu.com\n浏览器会和百度的服务器进行三次握手（中间的域名解析等暂不考虑）\n然后是程序层面的信息请求与提交\n\n三次握手->get或者post请求\n\n1） Client首先发送一个连接试探，ACK=0 表示确认号无效，SYN = 1 表示这是一个连接请求或连接接受报文，同时表示这个数据报不能携带数据，seq = x 表示Client自己的初始序号（seq = 0 就代表这是第0号包），这时候Client进入syn_sent状态，表示客户端等待服务器的回复\n\n2） Server监听到连接请求报文后，如同意建立连接，则向Client发送确认。TCP报文首部中的SYN 和 ACK都置1 ，ack = x + 1表示期望收到对方下一个报文段的第一个数据字节序号是x+1，同时表明x为止的所有数据都已正确收到（ack=1其实是ack=0+1,也就是期望客户端的第1个包），seq = y 表示Server 自己的初始序号（seq=0就代表这是服务器这边发出的第0号包）。这时服务器进入syn_rcvd，表示服务器已经收到Client的连接请求，等待client的确认。\n\n3） Client收到确认后还需再次发送确认，同时携带要发送给Server的数据。ACK 置1 表示确认号ack= y + 1 有效（代表期望收到服务器的第1个包），Client自己的序号seq= x + 1（表示这就是我的第1个包，相对于第0个包来说的），一旦收到Client的确认之后，这个TCP连接就进入Established状态，就可以发起http请求了。\n\n## post请求\nHTTP 协议是以 ASCII 码传输，建立在TCP/IP协议之上的应用层规范，规范把 HTTP 请求分为三个部分：状态行、请求头、消息主体。类似于下面这样：\n<method> <request-url> <version>\n<headers>\n<entity-body></entity-body></headers></version></request-url></method>\n协议规定 POST 提交的数据必须放在消息主体（entity-body）中，但协议并没有规定数据必须使用什么编码方式。实际上，开发者完全可以自己决定消息主体的格式，只要最后发送的 HTTP 请求满足上面的格式就可以。\n\n但是，数据发送出去，还要服务端解析成功才有意义。一般服务端语言如 php、python 等，以及它们的 framework，都内置了自动解析常见数据格式的功能。服务端通常是根据请求头（headers）中的 Content-Type 字段来获知请求中的消息主体是用何种方式编码，再对主体进行解析。所以说到 POST 提交数据方案，包含了 Content-Type 和消息主体编码方式两部分。下面就正式开始介绍它们。\n\n\nheader\nContent-Type，内容类型，一般是指网页中存在的Content-Type，用于定义网络文件的类型和网页的编码，决定文件接收方将以什么形式、什么编码读取这个文件.\n当然还有UA等其他头信息，\n\nContent-Type对照表：http://tool.oschina.net/commons\n\n说几种常见的Content-Type\n\n1.application/x-www-form-urlencoded\n这个就是我们常见form表格提的方式\n\n2.multipart/form-data\n\n这又是一个常见的 POST 数据提交的方式。我们使用表单上传文件时，必须让 form 的 enctyped 等于这个值。直接来看一个请求示例\n\n3.application/json\n\napplication/json 这个 Content-Type 作为响应头大家肯定不陌生。实际上，现在越来越多的人把它作为请求头，用来告诉服务端消息主体是序列化后的 JSON 字符串。由于 JSON 规范的流行，除了低版本 IE 之外的各大浏览器都原生支持 JSON.stringify，服务端语言也都有处理 JSON 的函数，使用 JSON 不会遇上什么麻烦。\n\nso 用这种格式就可以传递非Key Val的数据\n","source":"_posts/一次HTTP请求.md","raw":"---\ntitle: 一次HTTP请求\ndate: 2016-11-20 20:09:23\ntags:\n---\n\n#一次完整的HTTP请求，以及请求方式的区别\n\n-----\n今天在对接业务组mas时候遇到一个很少遇到的问题，发送一个一个不但参数的POST的请求。\n在我的印象里传参好像必带名字，因为就像一个你不认识的人要来你家，你肯定不会让他进来的。\n所以重新缕了一下POST请求，冲冲能。\n\n##一次HTTP请求的过程\n\n访问某个网址，例如我们访问www.baidu.com\n浏览器会和百度的服务器进行三次握手（中间的域名解析等暂不考虑）\n然后是程序层面的信息请求与提交\n\n三次握手->get或者post请求\n\n1） Client首先发送一个连接试探，ACK=0 表示确认号无效，SYN = 1 表示这是一个连接请求或连接接受报文，同时表示这个数据报不能携带数据，seq = x 表示Client自己的初始序号（seq = 0 就代表这是第0号包），这时候Client进入syn_sent状态，表示客户端等待服务器的回复\n\n2） Server监听到连接请求报文后，如同意建立连接，则向Client发送确认。TCP报文首部中的SYN 和 ACK都置1 ，ack = x + 1表示期望收到对方下一个报文段的第一个数据字节序号是x+1，同时表明x为止的所有数据都已正确收到（ack=1其实是ack=0+1,也就是期望客户端的第1个包），seq = y 表示Server 自己的初始序号（seq=0就代表这是服务器这边发出的第0号包）。这时服务器进入syn_rcvd，表示服务器已经收到Client的连接请求，等待client的确认。\n\n3） Client收到确认后还需再次发送确认，同时携带要发送给Server的数据。ACK 置1 表示确认号ack= y + 1 有效（代表期望收到服务器的第1个包），Client自己的序号seq= x + 1（表示这就是我的第1个包，相对于第0个包来说的），一旦收到Client的确认之后，这个TCP连接就进入Established状态，就可以发起http请求了。\n\n## post请求\nHTTP 协议是以 ASCII 码传输，建立在TCP/IP协议之上的应用层规范，规范把 HTTP 请求分为三个部分：状态行、请求头、消息主体。类似于下面这样：\n<method> <request-url> <version>\n<headers>\n<entity-body></entity-body></headers></version></request-url></method>\n协议规定 POST 提交的数据必须放在消息主体（entity-body）中，但协议并没有规定数据必须使用什么编码方式。实际上，开发者完全可以自己决定消息主体的格式，只要最后发送的 HTTP 请求满足上面的格式就可以。\n\n但是，数据发送出去，还要服务端解析成功才有意义。一般服务端语言如 php、python 等，以及它们的 framework，都内置了自动解析常见数据格式的功能。服务端通常是根据请求头（headers）中的 Content-Type 字段来获知请求中的消息主体是用何种方式编码，再对主体进行解析。所以说到 POST 提交数据方案，包含了 Content-Type 和消息主体编码方式两部分。下面就正式开始介绍它们。\n\n\nheader\nContent-Type，内容类型，一般是指网页中存在的Content-Type，用于定义网络文件的类型和网页的编码，决定文件接收方将以什么形式、什么编码读取这个文件.\n当然还有UA等其他头信息，\n\nContent-Type对照表：http://tool.oschina.net/commons\n\n说几种常见的Content-Type\n\n1.application/x-www-form-urlencoded\n这个就是我们常见form表格提的方式\n\n2.multipart/form-data\n\n这又是一个常见的 POST 数据提交的方式。我们使用表单上传文件时，必须让 form 的 enctyped 等于这个值。直接来看一个请求示例\n\n3.application/json\n\napplication/json 这个 Content-Type 作为响应头大家肯定不陌生。实际上，现在越来越多的人把它作为请求头，用来告诉服务端消息主体是序列化后的 JSON 字符串。由于 JSON 规范的流行，除了低版本 IE 之外的各大浏览器都原生支持 JSON.stringify，服务端语言也都有处理 JSON 的函数，使用 JSON 不会遇上什么麻烦。\n\nso 用这种格式就可以传递非Key Val的数据\n","slug":"一次HTTP请求","published":1,"updated":"2018-11-10T09:01:27.815Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqavhgdt000xzqjfrmr6ohuc","content":"<p>#一次完整的HTTP请求，以及请求方式的区别</p>\n<hr>\n<p>今天在对接业务组mas时候遇到一个很少遇到的问题，发送一个一个不但参数的POST的请求。<br>在我的印象里传参好像必带名字，因为就像一个你不认识的人要来你家，你肯定不会让他进来的。<br>所以重新缕了一下POST请求，冲冲能。</p>\n<p>##一次HTTP请求的过程</p>\n<p>访问某个网址，例如我们访问www.baidu.com<br>浏览器会和百度的服务器进行三次握手（中间的域名解析等暂不考虑）<br>然后是程序层面的信息请求与提交</p>\n<p>三次握手-&gt;get或者post请求</p>\n<p>1） Client首先发送一个连接试探，ACK=0 表示确认号无效，SYN = 1 表示这是一个连接请求或连接接受报文，同时表示这个数据报不能携带数据，seq = x 表示Client自己的初始序号（seq = 0 就代表这是第0号包），这时候Client进入syn_sent状态，表示客户端等待服务器的回复</p>\n<p>2） Server监听到连接请求报文后，如同意建立连接，则向Client发送确认。TCP报文首部中的SYN 和 ACK都置1 ，ack = x + 1表示期望收到对方下一个报文段的第一个数据字节序号是x+1，同时表明x为止的所有数据都已正确收到（ack=1其实是ack=0+1,也就是期望客户端的第1个包），seq = y 表示Server 自己的初始序号（seq=0就代表这是服务器这边发出的第0号包）。这时服务器进入syn_rcvd，表示服务器已经收到Client的连接请求，等待client的确认。</p>\n<p>3） Client收到确认后还需再次发送确认，同时携带要发送给Server的数据。ACK 置1 表示确认号ack= y + 1 有效（代表期望收到服务器的第1个包），Client自己的序号seq= x + 1（表示这就是我的第1个包，相对于第0个包来说的），一旦收到Client的确认之后，这个TCP连接就进入Established状态，就可以发起http请求了。</p>\n<h2 id=\"post请求\"><a href=\"#post请求\" class=\"headerlink\" title=\"post请求\"></a>post请求</h2><p>HTTP 协议是以 ASCII 码传输，建立在TCP/IP协议之上的应用层规范，规范把 HTTP 请求分为三个部分：状态行、请求头、消息主体。类似于下面这样：</p>\n<p><method> <request-url> <version></version></request-url></method></p>\n<p><headers></headers></p>\n<p><entity-body></entity-body><br>协议规定 POST 提交的数据必须放在消息主体（entity-body）中，但协议并没有规定数据必须使用什么编码方式。实际上，开发者完全可以自己决定消息主体的格式，只要最后发送的 HTTP 请求满足上面的格式就可以。</p>\n<p>但是，数据发送出去，还要服务端解析成功才有意义。一般服务端语言如 php、python 等，以及它们的 framework，都内置了自动解析常见数据格式的功能。服务端通常是根据请求头（headers）中的 Content-Type 字段来获知请求中的消息主体是用何种方式编码，再对主体进行解析。所以说到 POST 提交数据方案，包含了 Content-Type 和消息主体编码方式两部分。下面就正式开始介绍它们。</p>\n<p>header<br>Content-Type，内容类型，一般是指网页中存在的Content-Type，用于定义网络文件的类型和网页的编码，决定文件接收方将以什么形式、什么编码读取这个文件.<br>当然还有UA等其他头信息，</p>\n<p>Content-Type对照表：<a href=\"http://tool.oschina.net/commons\" target=\"_blank\" rel=\"noopener\">http://tool.oschina.net/commons</a></p>\n<p>说几种常见的Content-Type</p>\n<p>1.application/x-www-form-urlencoded<br>这个就是我们常见form表格提的方式</p>\n<p>2.multipart/form-data</p>\n<p>这又是一个常见的 POST 数据提交的方式。我们使用表单上传文件时，必须让 form 的 enctyped 等于这个值。直接来看一个请求示例</p>\n<p>3.application/json</p>\n<p>application/json 这个 Content-Type 作为响应头大家肯定不陌生。实际上，现在越来越多的人把它作为请求头，用来告诉服务端消息主体是序列化后的 JSON 字符串。由于 JSON 规范的流行，除了低版本 IE 之外的各大浏览器都原生支持 JSON.stringify，服务端语言也都有处理 JSON 的函数，使用 JSON 不会遇上什么麻烦。</p>\n<p>so 用这种格式就可以传递非Key Val的数据</p>\n","site":{"data":{}},"excerpt":"","more":"<p>#一次完整的HTTP请求，以及请求方式的区别</p>\n<hr>\n<p>今天在对接业务组mas时候遇到一个很少遇到的问题，发送一个一个不但参数的POST的请求。<br>在我的印象里传参好像必带名字，因为就像一个你不认识的人要来你家，你肯定不会让他进来的。<br>所以重新缕了一下POST请求，冲冲能。</p>\n<p>##一次HTTP请求的过程</p>\n<p>访问某个网址，例如我们访问www.baidu.com<br>浏览器会和百度的服务器进行三次握手（中间的域名解析等暂不考虑）<br>然后是程序层面的信息请求与提交</p>\n<p>三次握手-&gt;get或者post请求</p>\n<p>1） Client首先发送一个连接试探，ACK=0 表示确认号无效，SYN = 1 表示这是一个连接请求或连接接受报文，同时表示这个数据报不能携带数据，seq = x 表示Client自己的初始序号（seq = 0 就代表这是第0号包），这时候Client进入syn_sent状态，表示客户端等待服务器的回复</p>\n<p>2） Server监听到连接请求报文后，如同意建立连接，则向Client发送确认。TCP报文首部中的SYN 和 ACK都置1 ，ack = x + 1表示期望收到对方下一个报文段的第一个数据字节序号是x+1，同时表明x为止的所有数据都已正确收到（ack=1其实是ack=0+1,也就是期望客户端的第1个包），seq = y 表示Server 自己的初始序号（seq=0就代表这是服务器这边发出的第0号包）。这时服务器进入syn_rcvd，表示服务器已经收到Client的连接请求，等待client的确认。</p>\n<p>3） Client收到确认后还需再次发送确认，同时携带要发送给Server的数据。ACK 置1 表示确认号ack= y + 1 有效（代表期望收到服务器的第1个包），Client自己的序号seq= x + 1（表示这就是我的第1个包，相对于第0个包来说的），一旦收到Client的确认之后，这个TCP连接就进入Established状态，就可以发起http请求了。</p>\n<h2 id=\"post请求\"><a href=\"#post请求\" class=\"headerlink\" title=\"post请求\"></a>post请求</h2><p>HTTP 协议是以 ASCII 码传输，建立在TCP/IP协议之上的应用层规范，规范把 HTTP 请求分为三个部分：状态行、请求头、消息主体。类似于下面这样：</p>\n<p><method> <request-url> <version></version></request-url></method></p>\n<p><headers></headers></p>\n<p><entity-body></entity-body><br>协议规定 POST 提交的数据必须放在消息主体（entity-body）中，但协议并没有规定数据必须使用什么编码方式。实际上，开发者完全可以自己决定消息主体的格式，只要最后发送的 HTTP 请求满足上面的格式就可以。</p>\n<p>但是，数据发送出去，还要服务端解析成功才有意义。一般服务端语言如 php、python 等，以及它们的 framework，都内置了自动解析常见数据格式的功能。服务端通常是根据请求头（headers）中的 Content-Type 字段来获知请求中的消息主体是用何种方式编码，再对主体进行解析。所以说到 POST 提交数据方案，包含了 Content-Type 和消息主体编码方式两部分。下面就正式开始介绍它们。</p>\n<p>header<br>Content-Type，内容类型，一般是指网页中存在的Content-Type，用于定义网络文件的类型和网页的编码，决定文件接收方将以什么形式、什么编码读取这个文件.<br>当然还有UA等其他头信息，</p>\n<p>Content-Type对照表：<a href=\"http://tool.oschina.net/commons\" target=\"_blank\" rel=\"noopener\">http://tool.oschina.net/commons</a></p>\n<p>说几种常见的Content-Type</p>\n<p>1.application/x-www-form-urlencoded<br>这个就是我们常见form表格提的方式</p>\n<p>2.multipart/form-data</p>\n<p>这又是一个常见的 POST 数据提交的方式。我们使用表单上传文件时，必须让 form 的 enctyped 等于这个值。直接来看一个请求示例</p>\n<p>3.application/json</p>\n<p>application/json 这个 Content-Type 作为响应头大家肯定不陌生。实际上，现在越来越多的人把它作为请求头，用来告诉服务端消息主体是序列化后的 JSON 字符串。由于 JSON 规范的流行，除了低版本 IE 之外的各大浏览器都原生支持 JSON.stringify，服务端语言也都有处理 JSON 的函数，使用 JSON 不会遇上什么麻烦。</p>\n<p>so 用这种格式就可以传递非Key Val的数据</p>\n"},{"title":"websocket订阅火币成交记录","date":"2018-06-19T10:15:57.000Z","_content":"# python3\n## 单线程：\n### 文件一：\n```python\n# -*- coding: utf-8 -*-\n#author: maxie_lj\nimport _thread\nfrom websocket import create_connection\nfrom mysqlOpertion import connect_mysql\nimport gzip\nimport time\nimport json\n\n# 链接\ndef connect():\n    while(1):\n        try:\n            print('')\n            # 挂代理\n            ws = create_connection(\"wss://www.huobi.br.com/-/s/pro/ws\")\n            #print('链接成功')\n            return ws\n            break\n        except Exception as err:\n            #print(err)\n            #print('connect ws error,retry...')\n            time.sleep(1)\n\n\ndef getsubconfig():\n    # 统计参数\n    tradeStr=[\n              \"\"\"{\"sub\": \"market.elfusdt.trade.detail\",\"id\": \"id1\"}\"\"\",\n              \"\"\"{\"sub\": \"market.btcusdt.trade.detail\",\"id\": \"id2\"}\"\"\",\n              \"\"\"{\"sub\": \"market.htusdt.trade.detail\",\"id\": \"id3\"}\"\"\",\n              \"\"\"{\"sub\": \"market.swftcbtc.trade.detail\",\"id\": \"id4\"}\"\"\",\n              \"\"\"{\"sub\": \"market.topcbtc.trade.detail\",\"id\": \"id6\"}\"\"\",\n              \"\"\"{\"sub\": \"market.bchusdt.trade.detail\",\"id\": \"id7\"}\"\"\",\n              \"\"\"{\"sub\": \"market.ethusdt.trade.detail\",\"id\": \"id8\"}\"\"\",\n              \"\"\"{\"sub\": \"market.etcusdt.trade.detail\",\"id\": \"id9\"}\"\"\",\n              \"\"\"{\"sub\": \"market.eosusdt.trade.detail\",\"id\": \"id9\"}\"\"\",\n              \"\"\"{\"sub\": \"market.ltcusdt.trade.detail\",\"id\": \"id9\"}\"\"\"\n              ]\n    return tradeStr\n\n# 订阅\ndef sub(ws,tradeStr):\n    ws.send(tradeStr)\n\n# 获取返回\ndef getResponse(ws,tradeStr):\n    db = connect_mysql.connect()\n    while 1 :\n        try :\n            compressData=ws.recv()\n        except Exception :\n            #print('链接异常')\n            run(tradeStr,1)\n        try :\n            result=gzip.decompress(compressData).decode('utf-8')\n        except:\n            #print('丢包解析异常')\n            continue\n        if result[:7] == '{\"ping\"':\n            ts=result[8:21]\n            #print('心跳包',ts)\n            pong='{\"pong\":'+ts+'}'\n            ws.send(pong)\n        else:\n            if result[:5] == '{\"ch\"':\n                result = json.loads(result)\n                #print(result)\n                #print('------------------------------------------------------')\n                n = 0\n                while n < len(result['tick']['data']) :\n                    connect_mysql.commit('%s' % result['ch'].split('.')[1],result['tick']['data'][n]['price'],result['tick']['data'][n]['amount'],\"'%s'\" % result[\"tick\"][\"data\"][n][\"direction\"], \"'%s'\" % result['ch'].split('.')[1],db);\n                    n += 1\n\ndef subCoin(tradeStr):\n    ws=connect()\n    sub(ws,tradeStr)\n    getResponse(ws,tradeStr)\n\ndef run(tradeStr,test):\n    subCoin(tradeStr)\n\ndef main():\n    tradeStr=getsubconfig()\n    try :\n        tradeStr = getsubconfig()\n        i = 0\n        while i < len(tradeStr) :\n            _thread.start_new_thread( run, (tradeStr[i],i) )\n            i += 1\n    except Exception as err :\n        print(err)\n    while 1:\n        pass\n\n\nif __name__ == '__main__':\n    main()\n```\n\n# 多线程版本：\n## 文件一：\n\n```python\n# -*- coding: utf-8 -*-\n#author: maxie_lj\nimport _thread\nfrom websocket import create_connection\nfrom test1 import connect_mysql\nimport gzip\nimport time\nimport json\n\n# 链接数据库\ndef connect():\n    while(1):\n        try:\n            ws = create_connection(\"wss://www.huobi.br.com/-/s/pro/ws\")\n            # print('链接成功')\n            return ws\n            break\n        except Exception as err:\n            print(err)\n            #print('connect ws error,retry...')\n            time.sleep(1)\n\n\ndef getsubconfig():\n    # 统计参数\n    tradeStr=[\n              \"\"\"{\"sub\": \"market.elfusdt.trade.detail\"}\"\"\",\n              \"\"\"{\"sub\": \"market.btcusdt.trade.detail\"}\"\"\",\n              \"\"\"{\"sub\": \"market.htusdt.trade.detail\"}\"\"\",\n              \"\"\"{\"sub\": \"market.swftcbtc.trade.detail\"}\"\"\",\n              \"\"\"{\"sub\": \"market.topcbtc.trade.detail\"}\"\"\",\n              \"\"\"{\"sub\": \"market.bchusdt.trade.detail\"}\"\"\",\n              \"\"\"{\"sub\": \"market.ethusdt.trade.detail\"}\"\"\",\n              \"\"\"{\"sub\": \"market.etcusdt.trade.detail\"}\"\"\",\n              \"\"\"{\"sub\": \"market.eosusdt.trade.detail\"}\"\"\",\n              \"\"\"{\"sub\": \"market.ltcusdt.trade.detail\"}\"\"\"\n              ]\n    return tradeStr\n\n# 订阅\ndef sub(ws,tradeStr):\n    ws.send(tradeStr)\n\n# 获取返回\ndef getResponse(ws):\n    db = connect_mysql.connect()\n    while 1 :\n        try :\n            compressData=ws.recv()\n        except Exception :\n            ws=connect()\n            subCoin(ws)\n            print('链接异常')\n        try :\n            result=gzip.decompress(compressData).decode('utf-8')\n        except:\n            print('丢包解析异常')\n            continue\n        if result[:7] == '{\"ping\"':\n            ts=result[8:21]\n            #print('心跳包',ts)\n            pong='{\"pong\":'+ts+'}'\n            ws.send(pong)\n        else:\n            if result[:5] == '{\"ch\"':\n                result = json.loads(result)\n                print(result)\n                #print('------------------------------------------------------')\n                n = 0\n                while n < len(result['tick']['data']) :\n                    connect_mysql.commit('%s' % result['ch'].split('.')[1],result['tick']['data'][n]['price'],result['tick']['data'][n]['amount'],\"'%s'\" % result[\"tick\"][\"data\"][n][\"direction\"], \"'%s'\" % result['ch'].split('.')[1],db);\n                    n += 1\n\n# 订阅\ndef subCoin(ws):\n    tradeStr=getsubconfig()\n    i = 0\n    while i < len(tradeStr) :\n            sub(ws,tradeStr[i])\n            i += 1\n# 主函数\ndef main():\n    ws=connect()\n    subCoin(ws)\n    getResponse(ws)\n\n\nif __name__ == '__main__':\n    main()\n```\n\n\n```\n### 文件二:\n\n```python\nimport json\nimport pymysql\nimport time\n\nclass connect_mysql():\n    db = ''\n    def connect() :\n            db = connect_mysql.db = pymysql.connect(\"localhost\", \"root\", \"root\", \"huobi\", charset='utf8' )\n            return db\n\n    def commit(table, price, amount, action, coin_type, db) :\n\n        try:\n            cursor = db.cursor()\n            sql = \"INSERT INTO %s_success_order(action,order_amount, price, coin_type)VALUES (%s, %.10f, %.10f,%s )\" % (table,action, amount, price,coin_type )\n            cursor.execute(sql)\n           # 提交到数据库执行\n            db.commit()\n        except Exception as e:\n            db = connect_mysql.db = pymysql.connect(\"localhost\", \"root\", \"root\", \"huobi\", charset='utf8' )\n            commit(table, price, amount, action, coin_type, db)\n        return\n\n\n    def connect_close() :\n        connect_mysql.db.close()\n```\n\n\n文件二是单线程和多线程版的公用文件\n\n\n\n\n\n\n# shell 脚本\n```shell\n#!/bin/bash\ntotal=1\navaliable=`ps -ef | grep -w huobi.py | grep -v grep | wc -l`\ndiff=`expr $total - $avaliable`\n#echo $diff >> /home/script/diff.text\n#echo $total >> /home/script/diff.text\n#echo $avaliable >> /home/script/diff.text\nif [ $diff -gt 0 ];then\n        for((i=0;i<$diff;i++));do\n                 /usr/local/bin/python3 /home/script/huobi.py >> /home/script/huobi.out\n        done\nfi\n```\n\n# crontab 配置\n```powershell\nMAILTO=\"\"\n\n* * * * * sudo /bin/bash /home/script/huobi.sh\n```\n\n**注意事项**：\n在写shell脚本时，尽量用绝对路径。\n","source":"_posts/websocket订阅火币成交记录.md","raw":"---\ntitle: websocket订阅火币成交记录\ndate: 2018-06-19 18:15:57\ntags: python, shell, crond\n---\n# python3\n## 单线程：\n### 文件一：\n```python\n# -*- coding: utf-8 -*-\n#author: maxie_lj\nimport _thread\nfrom websocket import create_connection\nfrom mysqlOpertion import connect_mysql\nimport gzip\nimport time\nimport json\n\n# 链接\ndef connect():\n    while(1):\n        try:\n            print('')\n            # 挂代理\n            ws = create_connection(\"wss://www.huobi.br.com/-/s/pro/ws\")\n            #print('链接成功')\n            return ws\n            break\n        except Exception as err:\n            #print(err)\n            #print('connect ws error,retry...')\n            time.sleep(1)\n\n\ndef getsubconfig():\n    # 统计参数\n    tradeStr=[\n              \"\"\"{\"sub\": \"market.elfusdt.trade.detail\",\"id\": \"id1\"}\"\"\",\n              \"\"\"{\"sub\": \"market.btcusdt.trade.detail\",\"id\": \"id2\"}\"\"\",\n              \"\"\"{\"sub\": \"market.htusdt.trade.detail\",\"id\": \"id3\"}\"\"\",\n              \"\"\"{\"sub\": \"market.swftcbtc.trade.detail\",\"id\": \"id4\"}\"\"\",\n              \"\"\"{\"sub\": \"market.topcbtc.trade.detail\",\"id\": \"id6\"}\"\"\",\n              \"\"\"{\"sub\": \"market.bchusdt.trade.detail\",\"id\": \"id7\"}\"\"\",\n              \"\"\"{\"sub\": \"market.ethusdt.trade.detail\",\"id\": \"id8\"}\"\"\",\n              \"\"\"{\"sub\": \"market.etcusdt.trade.detail\",\"id\": \"id9\"}\"\"\",\n              \"\"\"{\"sub\": \"market.eosusdt.trade.detail\",\"id\": \"id9\"}\"\"\",\n              \"\"\"{\"sub\": \"market.ltcusdt.trade.detail\",\"id\": \"id9\"}\"\"\"\n              ]\n    return tradeStr\n\n# 订阅\ndef sub(ws,tradeStr):\n    ws.send(tradeStr)\n\n# 获取返回\ndef getResponse(ws,tradeStr):\n    db = connect_mysql.connect()\n    while 1 :\n        try :\n            compressData=ws.recv()\n        except Exception :\n            #print('链接异常')\n            run(tradeStr,1)\n        try :\n            result=gzip.decompress(compressData).decode('utf-8')\n        except:\n            #print('丢包解析异常')\n            continue\n        if result[:7] == '{\"ping\"':\n            ts=result[8:21]\n            #print('心跳包',ts)\n            pong='{\"pong\":'+ts+'}'\n            ws.send(pong)\n        else:\n            if result[:5] == '{\"ch\"':\n                result = json.loads(result)\n                #print(result)\n                #print('------------------------------------------------------')\n                n = 0\n                while n < len(result['tick']['data']) :\n                    connect_mysql.commit('%s' % result['ch'].split('.')[1],result['tick']['data'][n]['price'],result['tick']['data'][n]['amount'],\"'%s'\" % result[\"tick\"][\"data\"][n][\"direction\"], \"'%s'\" % result['ch'].split('.')[1],db);\n                    n += 1\n\ndef subCoin(tradeStr):\n    ws=connect()\n    sub(ws,tradeStr)\n    getResponse(ws,tradeStr)\n\ndef run(tradeStr,test):\n    subCoin(tradeStr)\n\ndef main():\n    tradeStr=getsubconfig()\n    try :\n        tradeStr = getsubconfig()\n        i = 0\n        while i < len(tradeStr) :\n            _thread.start_new_thread( run, (tradeStr[i],i) )\n            i += 1\n    except Exception as err :\n        print(err)\n    while 1:\n        pass\n\n\nif __name__ == '__main__':\n    main()\n```\n\n# 多线程版本：\n## 文件一：\n\n```python\n# -*- coding: utf-8 -*-\n#author: maxie_lj\nimport _thread\nfrom websocket import create_connection\nfrom test1 import connect_mysql\nimport gzip\nimport time\nimport json\n\n# 链接数据库\ndef connect():\n    while(1):\n        try:\n            ws = create_connection(\"wss://www.huobi.br.com/-/s/pro/ws\")\n            # print('链接成功')\n            return ws\n            break\n        except Exception as err:\n            print(err)\n            #print('connect ws error,retry...')\n            time.sleep(1)\n\n\ndef getsubconfig():\n    # 统计参数\n    tradeStr=[\n              \"\"\"{\"sub\": \"market.elfusdt.trade.detail\"}\"\"\",\n              \"\"\"{\"sub\": \"market.btcusdt.trade.detail\"}\"\"\",\n              \"\"\"{\"sub\": \"market.htusdt.trade.detail\"}\"\"\",\n              \"\"\"{\"sub\": \"market.swftcbtc.trade.detail\"}\"\"\",\n              \"\"\"{\"sub\": \"market.topcbtc.trade.detail\"}\"\"\",\n              \"\"\"{\"sub\": \"market.bchusdt.trade.detail\"}\"\"\",\n              \"\"\"{\"sub\": \"market.ethusdt.trade.detail\"}\"\"\",\n              \"\"\"{\"sub\": \"market.etcusdt.trade.detail\"}\"\"\",\n              \"\"\"{\"sub\": \"market.eosusdt.trade.detail\"}\"\"\",\n              \"\"\"{\"sub\": \"market.ltcusdt.trade.detail\"}\"\"\"\n              ]\n    return tradeStr\n\n# 订阅\ndef sub(ws,tradeStr):\n    ws.send(tradeStr)\n\n# 获取返回\ndef getResponse(ws):\n    db = connect_mysql.connect()\n    while 1 :\n        try :\n            compressData=ws.recv()\n        except Exception :\n            ws=connect()\n            subCoin(ws)\n            print('链接异常')\n        try :\n            result=gzip.decompress(compressData).decode('utf-8')\n        except:\n            print('丢包解析异常')\n            continue\n        if result[:7] == '{\"ping\"':\n            ts=result[8:21]\n            #print('心跳包',ts)\n            pong='{\"pong\":'+ts+'}'\n            ws.send(pong)\n        else:\n            if result[:5] == '{\"ch\"':\n                result = json.loads(result)\n                print(result)\n                #print('------------------------------------------------------')\n                n = 0\n                while n < len(result['tick']['data']) :\n                    connect_mysql.commit('%s' % result['ch'].split('.')[1],result['tick']['data'][n]['price'],result['tick']['data'][n]['amount'],\"'%s'\" % result[\"tick\"][\"data\"][n][\"direction\"], \"'%s'\" % result['ch'].split('.')[1],db);\n                    n += 1\n\n# 订阅\ndef subCoin(ws):\n    tradeStr=getsubconfig()\n    i = 0\n    while i < len(tradeStr) :\n            sub(ws,tradeStr[i])\n            i += 1\n# 主函数\ndef main():\n    ws=connect()\n    subCoin(ws)\n    getResponse(ws)\n\n\nif __name__ == '__main__':\n    main()\n```\n\n\n```\n### 文件二:\n\n```python\nimport json\nimport pymysql\nimport time\n\nclass connect_mysql():\n    db = ''\n    def connect() :\n            db = connect_mysql.db = pymysql.connect(\"localhost\", \"root\", \"root\", \"huobi\", charset='utf8' )\n            return db\n\n    def commit(table, price, amount, action, coin_type, db) :\n\n        try:\n            cursor = db.cursor()\n            sql = \"INSERT INTO %s_success_order(action,order_amount, price, coin_type)VALUES (%s, %.10f, %.10f,%s )\" % (table,action, amount, price,coin_type )\n            cursor.execute(sql)\n           # 提交到数据库执行\n            db.commit()\n        except Exception as e:\n            db = connect_mysql.db = pymysql.connect(\"localhost\", \"root\", \"root\", \"huobi\", charset='utf8' )\n            commit(table, price, amount, action, coin_type, db)\n        return\n\n\n    def connect_close() :\n        connect_mysql.db.close()\n```\n\n\n文件二是单线程和多线程版的公用文件\n\n\n\n\n\n\n# shell 脚本\n```shell\n#!/bin/bash\ntotal=1\navaliable=`ps -ef | grep -w huobi.py | grep -v grep | wc -l`\ndiff=`expr $total - $avaliable`\n#echo $diff >> /home/script/diff.text\n#echo $total >> /home/script/diff.text\n#echo $avaliable >> /home/script/diff.text\nif [ $diff -gt 0 ];then\n        for((i=0;i<$diff;i++));do\n                 /usr/local/bin/python3 /home/script/huobi.py >> /home/script/huobi.out\n        done\nfi\n```\n\n# crontab 配置\n```powershell\nMAILTO=\"\"\n\n* * * * * sudo /bin/bash /home/script/huobi.sh\n```\n\n**注意事项**：\n在写shell脚本时，尽量用绝对路径。\n","slug":"websocket订阅火币成交记录","published":1,"updated":"2018-06-19T10:19:48.515Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqavhgdv000yzqjf3gytt84x","content":"<h1 id=\"python3\"><a href=\"#python3\" class=\"headerlink\" title=\"python3\"></a>python3</h1><h2 id=\"单线程：\"><a href=\"#单线程：\" class=\"headerlink\" title=\"单线程：\"></a>单线程：</h2><h3 id=\"文件一：\"><a href=\"#文件一：\" class=\"headerlink\" title=\"文件一：\"></a>文件一：</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></div><div class=\"line\"><span class=\"comment\">#author: maxie_lj</span></div><div class=\"line\"><span class=\"keyword\">import</span> _thread</div><div class=\"line\"><span class=\"keyword\">from</span> websocket <span class=\"keyword\">import</span> create_connection</div><div class=\"line\"><span class=\"keyword\">from</span> mysqlOpertion <span class=\"keyword\">import</span> connect_mysql</div><div class=\"line\"><span class=\"keyword\">import</span> gzip</div><div class=\"line\"><span class=\"keyword\">import</span> time</div><div class=\"line\"><span class=\"keyword\">import</span> json</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 链接</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">connect</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"number\">1</span>):</div><div class=\"line\">        <span class=\"keyword\">try</span>:</div><div class=\"line\">            print(<span class=\"string\">''</span>)</div><div class=\"line\">            <span class=\"comment\"># 挂代理</span></div><div class=\"line\">            ws = create_connection(<span class=\"string\">\"wss://www.huobi.br.com/-/s/pro/ws\"</span>)</div><div class=\"line\">            <span class=\"comment\">#print('链接成功')</span></div><div class=\"line\">            <span class=\"keyword\">return</span> ws</div><div class=\"line\">            <span class=\"keyword\">break</span></div><div class=\"line\">        <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> err:</div><div class=\"line\">            <span class=\"comment\">#print(err)</span></div><div class=\"line\">            <span class=\"comment\">#print('connect ws error,retry...')</span></div><div class=\"line\">            time.sleep(<span class=\"number\">1</span>)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getsubconfig</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"comment\"># 统计参数</span></div><div class=\"line\">    tradeStr=[</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.elfusdt.trade.detail\",\"id\": \"id1\"&#125;\"\"\"</span>,</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.btcusdt.trade.detail\",\"id\": \"id2\"&#125;\"\"\"</span>,</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.htusdt.trade.detail\",\"id\": \"id3\"&#125;\"\"\"</span>,</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.swftcbtc.trade.detail\",\"id\": \"id4\"&#125;\"\"\"</span>,</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.topcbtc.trade.detail\",\"id\": \"id6\"&#125;\"\"\"</span>,</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.bchusdt.trade.detail\",\"id\": \"id7\"&#125;\"\"\"</span>,</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.ethusdt.trade.detail\",\"id\": \"id8\"&#125;\"\"\"</span>,</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.etcusdt.trade.detail\",\"id\": \"id9\"&#125;\"\"\"</span>,</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.eosusdt.trade.detail\",\"id\": \"id9\"&#125;\"\"\"</span>,</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.ltcusdt.trade.detail\",\"id\": \"id9\"&#125;\"\"\"</span></div><div class=\"line\">              ]</div><div class=\"line\">    <span class=\"keyword\">return</span> tradeStr</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 订阅</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sub</span><span class=\"params\">(ws,tradeStr)</span>:</span></div><div class=\"line\">    ws.send(tradeStr)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 获取返回</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getResponse</span><span class=\"params\">(ws,tradeStr)</span>:</span></div><div class=\"line\">    db = connect_mysql.connect()</div><div class=\"line\">    <span class=\"keyword\">while</span> <span class=\"number\">1</span> :</div><div class=\"line\">        <span class=\"keyword\">try</span> :</div><div class=\"line\">            compressData=ws.recv()</div><div class=\"line\">        <span class=\"keyword\">except</span> Exception :</div><div class=\"line\">            <span class=\"comment\">#print('链接异常')</span></div><div class=\"line\">            run(tradeStr,<span class=\"number\">1</span>)</div><div class=\"line\">        <span class=\"keyword\">try</span> :</div><div class=\"line\">            result=gzip.decompress(compressData).decode(<span class=\"string\">'utf-8'</span>)</div><div class=\"line\">        <span class=\"keyword\">except</span>:</div><div class=\"line\">            <span class=\"comment\">#print('丢包解析异常')</span></div><div class=\"line\">            <span class=\"keyword\">continue</span></div><div class=\"line\">        <span class=\"keyword\">if</span> result[:<span class=\"number\">7</span>] == <span class=\"string\">'&#123;\"ping\"'</span>:</div><div class=\"line\">            ts=result[<span class=\"number\">8</span>:<span class=\"number\">21</span>]</div><div class=\"line\">            <span class=\"comment\">#print('心跳包',ts)</span></div><div class=\"line\">            pong=<span class=\"string\">'&#123;\"pong\":'</span>+ts+<span class=\"string\">'&#125;'</span></div><div class=\"line\">            ws.send(pong)</div><div class=\"line\">        <span class=\"keyword\">else</span>:</div><div class=\"line\">            <span class=\"keyword\">if</span> result[:<span class=\"number\">5</span>] == <span class=\"string\">'&#123;\"ch\"'</span>:</div><div class=\"line\">                result = json.loads(result)</div><div class=\"line\">                <span class=\"comment\">#print(result)</span></div><div class=\"line\">                <span class=\"comment\">#print('------------------------------------------------------')</span></div><div class=\"line\">                n = <span class=\"number\">0</span></div><div class=\"line\">                <span class=\"keyword\">while</span> n &lt; len(result[<span class=\"string\">'tick'</span>][<span class=\"string\">'data'</span>]) :</div><div class=\"line\">                    connect_mysql.commit(<span class=\"string\">'%s'</span> % result[<span class=\"string\">'ch'</span>].split(<span class=\"string\">'.'</span>)[<span class=\"number\">1</span>],result[<span class=\"string\">'tick'</span>][<span class=\"string\">'data'</span>][n][<span class=\"string\">'price'</span>],result[<span class=\"string\">'tick'</span>][<span class=\"string\">'data'</span>][n][<span class=\"string\">'amount'</span>],<span class=\"string\">\"'%s'\"</span> % result[<span class=\"string\">\"tick\"</span>][<span class=\"string\">\"data\"</span>][n][<span class=\"string\">\"direction\"</span>], <span class=\"string\">\"'%s'\"</span> % result[<span class=\"string\">'ch'</span>].split(<span class=\"string\">'.'</span>)[<span class=\"number\">1</span>],db);</div><div class=\"line\">                    n += <span class=\"number\">1</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">subCoin</span><span class=\"params\">(tradeStr)</span>:</span></div><div class=\"line\">    ws=connect()</div><div class=\"line\">    sub(ws,tradeStr)</div><div class=\"line\">    getResponse(ws,tradeStr)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span><span class=\"params\">(tradeStr,test)</span>:</span></div><div class=\"line\">    subCoin(tradeStr)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    tradeStr=getsubconfig()</div><div class=\"line\">    <span class=\"keyword\">try</span> :</div><div class=\"line\">        tradeStr = getsubconfig()</div><div class=\"line\">        i = <span class=\"number\">0</span></div><div class=\"line\">        <span class=\"keyword\">while</span> i &lt; len(tradeStr) :</div><div class=\"line\">            _thread.start_new_thread( run, (tradeStr[i],i) )</div><div class=\"line\">            i += <span class=\"number\">1</span></div><div class=\"line\">    <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> err :</div><div class=\"line\">        print(err)</div><div class=\"line\">    <span class=\"keyword\">while</span> <span class=\"number\">1</span>:</div><div class=\"line\">        <span class=\"keyword\">pass</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    main()</div></pre></td></tr></table></figure>\n<h1 id=\"多线程版本：\"><a href=\"#多线程版本：\" class=\"headerlink\" title=\"多线程版本：\"></a>多线程版本：</h1><h2 id=\"文件一：-1\"><a href=\"#文件一：-1\" class=\"headerlink\" title=\"文件一：\"></a>文件一：</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></div><div class=\"line\"><span class=\"comment\">#author: maxie_lj</span></div><div class=\"line\"><span class=\"keyword\">import</span> _thread</div><div class=\"line\"><span class=\"keyword\">from</span> websocket <span class=\"keyword\">import</span> create_connection</div><div class=\"line\"><span class=\"keyword\">from</span> test1 <span class=\"keyword\">import</span> connect_mysql</div><div class=\"line\"><span class=\"keyword\">import</span> gzip</div><div class=\"line\"><span class=\"keyword\">import</span> time</div><div class=\"line\"><span class=\"keyword\">import</span> json</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 链接数据库</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">connect</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"number\">1</span>):</div><div class=\"line\">        <span class=\"keyword\">try</span>:</div><div class=\"line\">            ws = create_connection(<span class=\"string\">\"wss://www.huobi.br.com/-/s/pro/ws\"</span>)</div><div class=\"line\">            <span class=\"comment\"># print('链接成功')</span></div><div class=\"line\">            <span class=\"keyword\">return</span> ws</div><div class=\"line\">            <span class=\"keyword\">break</span></div><div class=\"line\">        <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> err:</div><div class=\"line\">            print(err)</div><div class=\"line\">            <span class=\"comment\">#print('connect ws error,retry...')</span></div><div class=\"line\">            time.sleep(<span class=\"number\">1</span>)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getsubconfig</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"comment\"># 统计参数</span></div><div class=\"line\">    tradeStr=[</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.elfusdt.trade.detail\"&#125;\"\"\"</span>,</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.btcusdt.trade.detail\"&#125;\"\"\"</span>,</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.htusdt.trade.detail\"&#125;\"\"\"</span>,</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.swftcbtc.trade.detail\"&#125;\"\"\"</span>,</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.topcbtc.trade.detail\"&#125;\"\"\"</span>,</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.bchusdt.trade.detail\"&#125;\"\"\"</span>,</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.ethusdt.trade.detail\"&#125;\"\"\"</span>,</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.etcusdt.trade.detail\"&#125;\"\"\"</span>,</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.eosusdt.trade.detail\"&#125;\"\"\"</span>,</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.ltcusdt.trade.detail\"&#125;\"\"\"</span></div><div class=\"line\">              ]</div><div class=\"line\">    <span class=\"keyword\">return</span> tradeStr</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 订阅</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sub</span><span class=\"params\">(ws,tradeStr)</span>:</span></div><div class=\"line\">    ws.send(tradeStr)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 获取返回</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getResponse</span><span class=\"params\">(ws)</span>:</span></div><div class=\"line\">    db = connect_mysql.connect()</div><div class=\"line\">    <span class=\"keyword\">while</span> <span class=\"number\">1</span> :</div><div class=\"line\">        <span class=\"keyword\">try</span> :</div><div class=\"line\">            compressData=ws.recv()</div><div class=\"line\">        <span class=\"keyword\">except</span> Exception :</div><div class=\"line\">            ws=connect()</div><div class=\"line\">            subCoin(ws)</div><div class=\"line\">            print(<span class=\"string\">'链接异常'</span>)</div><div class=\"line\">        <span class=\"keyword\">try</span> :</div><div class=\"line\">            result=gzip.decompress(compressData).decode(<span class=\"string\">'utf-8'</span>)</div><div class=\"line\">        <span class=\"keyword\">except</span>:</div><div class=\"line\">            print(<span class=\"string\">'丢包解析异常'</span>)</div><div class=\"line\">            <span class=\"keyword\">continue</span></div><div class=\"line\">        <span class=\"keyword\">if</span> result[:<span class=\"number\">7</span>] == <span class=\"string\">'&#123;\"ping\"'</span>:</div><div class=\"line\">            ts=result[<span class=\"number\">8</span>:<span class=\"number\">21</span>]</div><div class=\"line\">            <span class=\"comment\">#print('心跳包',ts)</span></div><div class=\"line\">            pong=<span class=\"string\">'&#123;\"pong\":'</span>+ts+<span class=\"string\">'&#125;'</span></div><div class=\"line\">            ws.send(pong)</div><div class=\"line\">        <span class=\"keyword\">else</span>:</div><div class=\"line\">            <span class=\"keyword\">if</span> result[:<span class=\"number\">5</span>] == <span class=\"string\">'&#123;\"ch\"'</span>:</div><div class=\"line\">                result = json.loads(result)</div><div class=\"line\">                print(result)</div><div class=\"line\">                <span class=\"comment\">#print('------------------------------------------------------')</span></div><div class=\"line\">                n = <span class=\"number\">0</span></div><div class=\"line\">                <span class=\"keyword\">while</span> n &lt; len(result[<span class=\"string\">'tick'</span>][<span class=\"string\">'data'</span>]) :</div><div class=\"line\">                    connect_mysql.commit(<span class=\"string\">'%s'</span> % result[<span class=\"string\">'ch'</span>].split(<span class=\"string\">'.'</span>)[<span class=\"number\">1</span>],result[<span class=\"string\">'tick'</span>][<span class=\"string\">'data'</span>][n][<span class=\"string\">'price'</span>],result[<span class=\"string\">'tick'</span>][<span class=\"string\">'data'</span>][n][<span class=\"string\">'amount'</span>],<span class=\"string\">\"'%s'\"</span> % result[<span class=\"string\">\"tick\"</span>][<span class=\"string\">\"data\"</span>][n][<span class=\"string\">\"direction\"</span>], <span class=\"string\">\"'%s'\"</span> % result[<span class=\"string\">'ch'</span>].split(<span class=\"string\">'.'</span>)[<span class=\"number\">1</span>],db);</div><div class=\"line\">                    n += <span class=\"number\">1</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 订阅</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">subCoin</span><span class=\"params\">(ws)</span>:</span></div><div class=\"line\">    tradeStr=getsubconfig()</div><div class=\"line\">    i = <span class=\"number\">0</span></div><div class=\"line\">    <span class=\"keyword\">while</span> i &lt; len(tradeStr) :</div><div class=\"line\">            sub(ws,tradeStr[i])</div><div class=\"line\">            i += <span class=\"number\">1</span></div><div class=\"line\"><span class=\"comment\"># 主函数</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    ws=connect()</div><div class=\"line\">    subCoin(ws)</div><div class=\"line\">    getResponse(ws)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    main()</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">### 文件二:</div><div class=\"line\"></div><div class=\"line\">```python</div><div class=\"line\">import json</div><div class=\"line\">import pymysql</div><div class=\"line\">import time</div><div class=\"line\"></div><div class=\"line\">class connect_mysql():</div><div class=\"line\">    db = &apos;&apos;</div><div class=\"line\">    def connect() :</div><div class=\"line\">            db = connect_mysql.db = pymysql.connect(&quot;localhost&quot;, &quot;root&quot;, &quot;root&quot;, &quot;huobi&quot;, charset=&apos;utf8&apos; )</div><div class=\"line\">            return db</div><div class=\"line\"></div><div class=\"line\">    def commit(table, price, amount, action, coin_type, db) :</div><div class=\"line\"></div><div class=\"line\">        try:</div><div class=\"line\">            cursor = db.cursor()</div><div class=\"line\">            sql = &quot;INSERT INTO %s_success_order(action,order_amount, price, coin_type)VALUES (%s, %.10f, %.10f,%s )&quot; % (table,action, amount, price,coin_type )</div><div class=\"line\">            cursor.execute(sql)</div><div class=\"line\">           # 提交到数据库执行</div><div class=\"line\">            db.commit()</div><div class=\"line\">        except Exception as e:</div><div class=\"line\">            db = connect_mysql.db = pymysql.connect(&quot;localhost&quot;, &quot;root&quot;, &quot;root&quot;, &quot;huobi&quot;, charset=&apos;utf8&apos; )</div><div class=\"line\">            commit(table, price, amount, action, coin_type, db)</div><div class=\"line\">        return</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    def connect_close() :</div><div class=\"line\">        connect_mysql.db.close()</div></pre></td></tr></table></figure>\n<p>文件二是单线程和多线程版的公用文件</p>\n<h1 id=\"shell-脚本\"><a href=\"#shell-脚本\" class=\"headerlink\" title=\"shell 脚本\"></a>shell 脚本</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">#!/bin/bash</div><div class=\"line\">total=1</div><div class=\"line\">avaliable=`ps -ef | grep -w huobi.py | grep -v grep | wc -l`</div><div class=\"line\">diff=`expr $total - $avaliable`</div><div class=\"line\">#echo $diff &gt;&gt; /home/script/diff.text</div><div class=\"line\">#echo $total &gt;&gt; /home/script/diff.text</div><div class=\"line\">#echo $avaliable &gt;&gt; /home/script/diff.text</div><div class=\"line\">if [ $diff -gt 0 ];then</div><div class=\"line\">        for((i=0;i&lt;$diff;i++));do</div><div class=\"line\">                 /usr/local/bin/python3 /home/script/huobi.py &gt;&gt; /home/script/huobi.out</div><div class=\"line\">        done</div><div class=\"line\">fi</div></pre></td></tr></table></figure>\n<h1 id=\"crontab-配置\"><a href=\"#crontab-配置\" class=\"headerlink\" title=\"crontab 配置\"></a>crontab 配置</h1><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">MAILTO=<span class=\"string\">\"\"</span></div><div class=\"line\"></div><div class=\"line\">* * * * * sudo /bin/bash /home/script/huobi.sh</div></pre></td></tr></table></figure>\n<p><strong>注意事项</strong>：<br>在写shell脚本时，尽量用绝对路径。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"python3\"><a href=\"#python3\" class=\"headerlink\" title=\"python3\"></a>python3</h1><h2 id=\"单线程：\"><a href=\"#单线程：\" class=\"headerlink\" title=\"单线程：\"></a>单线程：</h2><h3 id=\"文件一：\"><a href=\"#文件一：\" class=\"headerlink\" title=\"文件一：\"></a>文件一：</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></div><div class=\"line\"><span class=\"comment\">#author: maxie_lj</span></div><div class=\"line\"><span class=\"keyword\">import</span> _thread</div><div class=\"line\"><span class=\"keyword\">from</span> websocket <span class=\"keyword\">import</span> create_connection</div><div class=\"line\"><span class=\"keyword\">from</span> mysqlOpertion <span class=\"keyword\">import</span> connect_mysql</div><div class=\"line\"><span class=\"keyword\">import</span> gzip</div><div class=\"line\"><span class=\"keyword\">import</span> time</div><div class=\"line\"><span class=\"keyword\">import</span> json</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 链接</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">connect</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"number\">1</span>):</div><div class=\"line\">        <span class=\"keyword\">try</span>:</div><div class=\"line\">            print(<span class=\"string\">''</span>)</div><div class=\"line\">            <span class=\"comment\"># 挂代理</span></div><div class=\"line\">            ws = create_connection(<span class=\"string\">\"wss://www.huobi.br.com/-/s/pro/ws\"</span>)</div><div class=\"line\">            <span class=\"comment\">#print('链接成功')</span></div><div class=\"line\">            <span class=\"keyword\">return</span> ws</div><div class=\"line\">            <span class=\"keyword\">break</span></div><div class=\"line\">        <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> err:</div><div class=\"line\">            <span class=\"comment\">#print(err)</span></div><div class=\"line\">            <span class=\"comment\">#print('connect ws error,retry...')</span></div><div class=\"line\">            time.sleep(<span class=\"number\">1</span>)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getsubconfig</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"comment\"># 统计参数</span></div><div class=\"line\">    tradeStr=[</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.elfusdt.trade.detail\",\"id\": \"id1\"&#125;\"\"\"</span>,</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.btcusdt.trade.detail\",\"id\": \"id2\"&#125;\"\"\"</span>,</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.htusdt.trade.detail\",\"id\": \"id3\"&#125;\"\"\"</span>,</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.swftcbtc.trade.detail\",\"id\": \"id4\"&#125;\"\"\"</span>,</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.topcbtc.trade.detail\",\"id\": \"id6\"&#125;\"\"\"</span>,</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.bchusdt.trade.detail\",\"id\": \"id7\"&#125;\"\"\"</span>,</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.ethusdt.trade.detail\",\"id\": \"id8\"&#125;\"\"\"</span>,</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.etcusdt.trade.detail\",\"id\": \"id9\"&#125;\"\"\"</span>,</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.eosusdt.trade.detail\",\"id\": \"id9\"&#125;\"\"\"</span>,</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.ltcusdt.trade.detail\",\"id\": \"id9\"&#125;\"\"\"</span></div><div class=\"line\">              ]</div><div class=\"line\">    <span class=\"keyword\">return</span> tradeStr</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 订阅</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sub</span><span class=\"params\">(ws,tradeStr)</span>:</span></div><div class=\"line\">    ws.send(tradeStr)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 获取返回</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getResponse</span><span class=\"params\">(ws,tradeStr)</span>:</span></div><div class=\"line\">    db = connect_mysql.connect()</div><div class=\"line\">    <span class=\"keyword\">while</span> <span class=\"number\">1</span> :</div><div class=\"line\">        <span class=\"keyword\">try</span> :</div><div class=\"line\">            compressData=ws.recv()</div><div class=\"line\">        <span class=\"keyword\">except</span> Exception :</div><div class=\"line\">            <span class=\"comment\">#print('链接异常')</span></div><div class=\"line\">            run(tradeStr,<span class=\"number\">1</span>)</div><div class=\"line\">        <span class=\"keyword\">try</span> :</div><div class=\"line\">            result=gzip.decompress(compressData).decode(<span class=\"string\">'utf-8'</span>)</div><div class=\"line\">        <span class=\"keyword\">except</span>:</div><div class=\"line\">            <span class=\"comment\">#print('丢包解析异常')</span></div><div class=\"line\">            <span class=\"keyword\">continue</span></div><div class=\"line\">        <span class=\"keyword\">if</span> result[:<span class=\"number\">7</span>] == <span class=\"string\">'&#123;\"ping\"'</span>:</div><div class=\"line\">            ts=result[<span class=\"number\">8</span>:<span class=\"number\">21</span>]</div><div class=\"line\">            <span class=\"comment\">#print('心跳包',ts)</span></div><div class=\"line\">            pong=<span class=\"string\">'&#123;\"pong\":'</span>+ts+<span class=\"string\">'&#125;'</span></div><div class=\"line\">            ws.send(pong)</div><div class=\"line\">        <span class=\"keyword\">else</span>:</div><div class=\"line\">            <span class=\"keyword\">if</span> result[:<span class=\"number\">5</span>] == <span class=\"string\">'&#123;\"ch\"'</span>:</div><div class=\"line\">                result = json.loads(result)</div><div class=\"line\">                <span class=\"comment\">#print(result)</span></div><div class=\"line\">                <span class=\"comment\">#print('------------------------------------------------------')</span></div><div class=\"line\">                n = <span class=\"number\">0</span></div><div class=\"line\">                <span class=\"keyword\">while</span> n &lt; len(result[<span class=\"string\">'tick'</span>][<span class=\"string\">'data'</span>]) :</div><div class=\"line\">                    connect_mysql.commit(<span class=\"string\">'%s'</span> % result[<span class=\"string\">'ch'</span>].split(<span class=\"string\">'.'</span>)[<span class=\"number\">1</span>],result[<span class=\"string\">'tick'</span>][<span class=\"string\">'data'</span>][n][<span class=\"string\">'price'</span>],result[<span class=\"string\">'tick'</span>][<span class=\"string\">'data'</span>][n][<span class=\"string\">'amount'</span>],<span class=\"string\">\"'%s'\"</span> % result[<span class=\"string\">\"tick\"</span>][<span class=\"string\">\"data\"</span>][n][<span class=\"string\">\"direction\"</span>], <span class=\"string\">\"'%s'\"</span> % result[<span class=\"string\">'ch'</span>].split(<span class=\"string\">'.'</span>)[<span class=\"number\">1</span>],db);</div><div class=\"line\">                    n += <span class=\"number\">1</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">subCoin</span><span class=\"params\">(tradeStr)</span>:</span></div><div class=\"line\">    ws=connect()</div><div class=\"line\">    sub(ws,tradeStr)</div><div class=\"line\">    getResponse(ws,tradeStr)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span><span class=\"params\">(tradeStr,test)</span>:</span></div><div class=\"line\">    subCoin(tradeStr)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    tradeStr=getsubconfig()</div><div class=\"line\">    <span class=\"keyword\">try</span> :</div><div class=\"line\">        tradeStr = getsubconfig()</div><div class=\"line\">        i = <span class=\"number\">0</span></div><div class=\"line\">        <span class=\"keyword\">while</span> i &lt; len(tradeStr) :</div><div class=\"line\">            _thread.start_new_thread( run, (tradeStr[i],i) )</div><div class=\"line\">            i += <span class=\"number\">1</span></div><div class=\"line\">    <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> err :</div><div class=\"line\">        print(err)</div><div class=\"line\">    <span class=\"keyword\">while</span> <span class=\"number\">1</span>:</div><div class=\"line\">        <span class=\"keyword\">pass</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    main()</div></pre></td></tr></table></figure>\n<h1 id=\"多线程版本：\"><a href=\"#多线程版本：\" class=\"headerlink\" title=\"多线程版本：\"></a>多线程版本：</h1><h2 id=\"文件一：-1\"><a href=\"#文件一：-1\" class=\"headerlink\" title=\"文件一：\"></a>文件一：</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></div><div class=\"line\"><span class=\"comment\">#author: maxie_lj</span></div><div class=\"line\"><span class=\"keyword\">import</span> _thread</div><div class=\"line\"><span class=\"keyword\">from</span> websocket <span class=\"keyword\">import</span> create_connection</div><div class=\"line\"><span class=\"keyword\">from</span> test1 <span class=\"keyword\">import</span> connect_mysql</div><div class=\"line\"><span class=\"keyword\">import</span> gzip</div><div class=\"line\"><span class=\"keyword\">import</span> time</div><div class=\"line\"><span class=\"keyword\">import</span> json</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 链接数据库</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">connect</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"number\">1</span>):</div><div class=\"line\">        <span class=\"keyword\">try</span>:</div><div class=\"line\">            ws = create_connection(<span class=\"string\">\"wss://www.huobi.br.com/-/s/pro/ws\"</span>)</div><div class=\"line\">            <span class=\"comment\"># print('链接成功')</span></div><div class=\"line\">            <span class=\"keyword\">return</span> ws</div><div class=\"line\">            <span class=\"keyword\">break</span></div><div class=\"line\">        <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> err:</div><div class=\"line\">            print(err)</div><div class=\"line\">            <span class=\"comment\">#print('connect ws error,retry...')</span></div><div class=\"line\">            time.sleep(<span class=\"number\">1</span>)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getsubconfig</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"comment\"># 统计参数</span></div><div class=\"line\">    tradeStr=[</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.elfusdt.trade.detail\"&#125;\"\"\"</span>,</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.btcusdt.trade.detail\"&#125;\"\"\"</span>,</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.htusdt.trade.detail\"&#125;\"\"\"</span>,</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.swftcbtc.trade.detail\"&#125;\"\"\"</span>,</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.topcbtc.trade.detail\"&#125;\"\"\"</span>,</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.bchusdt.trade.detail\"&#125;\"\"\"</span>,</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.ethusdt.trade.detail\"&#125;\"\"\"</span>,</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.etcusdt.trade.detail\"&#125;\"\"\"</span>,</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.eosusdt.trade.detail\"&#125;\"\"\"</span>,</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.ltcusdt.trade.detail\"&#125;\"\"\"</span></div><div class=\"line\">              ]</div><div class=\"line\">    <span class=\"keyword\">return</span> tradeStr</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 订阅</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sub</span><span class=\"params\">(ws,tradeStr)</span>:</span></div><div class=\"line\">    ws.send(tradeStr)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 获取返回</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getResponse</span><span class=\"params\">(ws)</span>:</span></div><div class=\"line\">    db = connect_mysql.connect()</div><div class=\"line\">    <span class=\"keyword\">while</span> <span class=\"number\">1</span> :</div><div class=\"line\">        <span class=\"keyword\">try</span> :</div><div class=\"line\">            compressData=ws.recv()</div><div class=\"line\">        <span class=\"keyword\">except</span> Exception :</div><div class=\"line\">            ws=connect()</div><div class=\"line\">            subCoin(ws)</div><div class=\"line\">            print(<span class=\"string\">'链接异常'</span>)</div><div class=\"line\">        <span class=\"keyword\">try</span> :</div><div class=\"line\">            result=gzip.decompress(compressData).decode(<span class=\"string\">'utf-8'</span>)</div><div class=\"line\">        <span class=\"keyword\">except</span>:</div><div class=\"line\">            print(<span class=\"string\">'丢包解析异常'</span>)</div><div class=\"line\">            <span class=\"keyword\">continue</span></div><div class=\"line\">        <span class=\"keyword\">if</span> result[:<span class=\"number\">7</span>] == <span class=\"string\">'&#123;\"ping\"'</span>:</div><div class=\"line\">            ts=result[<span class=\"number\">8</span>:<span class=\"number\">21</span>]</div><div class=\"line\">            <span class=\"comment\">#print('心跳包',ts)</span></div><div class=\"line\">            pong=<span class=\"string\">'&#123;\"pong\":'</span>+ts+<span class=\"string\">'&#125;'</span></div><div class=\"line\">            ws.send(pong)</div><div class=\"line\">        <span class=\"keyword\">else</span>:</div><div class=\"line\">            <span class=\"keyword\">if</span> result[:<span class=\"number\">5</span>] == <span class=\"string\">'&#123;\"ch\"'</span>:</div><div class=\"line\">                result = json.loads(result)</div><div class=\"line\">                print(result)</div><div class=\"line\">                <span class=\"comment\">#print('------------------------------------------------------')</span></div><div class=\"line\">                n = <span class=\"number\">0</span></div><div class=\"line\">                <span class=\"keyword\">while</span> n &lt; len(result[<span class=\"string\">'tick'</span>][<span class=\"string\">'data'</span>]) :</div><div class=\"line\">                    connect_mysql.commit(<span class=\"string\">'%s'</span> % result[<span class=\"string\">'ch'</span>].split(<span class=\"string\">'.'</span>)[<span class=\"number\">1</span>],result[<span class=\"string\">'tick'</span>][<span class=\"string\">'data'</span>][n][<span class=\"string\">'price'</span>],result[<span class=\"string\">'tick'</span>][<span class=\"string\">'data'</span>][n][<span class=\"string\">'amount'</span>],<span class=\"string\">\"'%s'\"</span> % result[<span class=\"string\">\"tick\"</span>][<span class=\"string\">\"data\"</span>][n][<span class=\"string\">\"direction\"</span>], <span class=\"string\">\"'%s'\"</span> % result[<span class=\"string\">'ch'</span>].split(<span class=\"string\">'.'</span>)[<span class=\"number\">1</span>],db);</div><div class=\"line\">                    n += <span class=\"number\">1</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 订阅</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">subCoin</span><span class=\"params\">(ws)</span>:</span></div><div class=\"line\">    tradeStr=getsubconfig()</div><div class=\"line\">    i = <span class=\"number\">0</span></div><div class=\"line\">    <span class=\"keyword\">while</span> i &lt; len(tradeStr) :</div><div class=\"line\">            sub(ws,tradeStr[i])</div><div class=\"line\">            i += <span class=\"number\">1</span></div><div class=\"line\"><span class=\"comment\"># 主函数</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    ws=connect()</div><div class=\"line\">    subCoin(ws)</div><div class=\"line\">    getResponse(ws)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    main()</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">### 文件二:</div><div class=\"line\"></div><div class=\"line\">```python</div><div class=\"line\">import json</div><div class=\"line\">import pymysql</div><div class=\"line\">import time</div><div class=\"line\"></div><div class=\"line\">class connect_mysql():</div><div class=\"line\">    db = &apos;&apos;</div><div class=\"line\">    def connect() :</div><div class=\"line\">            db = connect_mysql.db = pymysql.connect(&quot;localhost&quot;, &quot;root&quot;, &quot;root&quot;, &quot;huobi&quot;, charset=&apos;utf8&apos; )</div><div class=\"line\">            return db</div><div class=\"line\"></div><div class=\"line\">    def commit(table, price, amount, action, coin_type, db) :</div><div class=\"line\"></div><div class=\"line\">        try:</div><div class=\"line\">            cursor = db.cursor()</div><div class=\"line\">            sql = &quot;INSERT INTO %s_success_order(action,order_amount, price, coin_type)VALUES (%s, %.10f, %.10f,%s )&quot; % (table,action, amount, price,coin_type )</div><div class=\"line\">            cursor.execute(sql)</div><div class=\"line\">           # 提交到数据库执行</div><div class=\"line\">            db.commit()</div><div class=\"line\">        except Exception as e:</div><div class=\"line\">            db = connect_mysql.db = pymysql.connect(&quot;localhost&quot;, &quot;root&quot;, &quot;root&quot;, &quot;huobi&quot;, charset=&apos;utf8&apos; )</div><div class=\"line\">            commit(table, price, amount, action, coin_type, db)</div><div class=\"line\">        return</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    def connect_close() :</div><div class=\"line\">        connect_mysql.db.close()</div></pre></td></tr></table></figure>\n<p>文件二是单线程和多线程版的公用文件</p>\n<h1 id=\"shell-脚本\"><a href=\"#shell-脚本\" class=\"headerlink\" title=\"shell 脚本\"></a>shell 脚本</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">#!/bin/bash</div><div class=\"line\">total=1</div><div class=\"line\">avaliable=`ps -ef | grep -w huobi.py | grep -v grep | wc -l`</div><div class=\"line\">diff=`expr $total - $avaliable`</div><div class=\"line\">#echo $diff &gt;&gt; /home/script/diff.text</div><div class=\"line\">#echo $total &gt;&gt; /home/script/diff.text</div><div class=\"line\">#echo $avaliable &gt;&gt; /home/script/diff.text</div><div class=\"line\">if [ $diff -gt 0 ];then</div><div class=\"line\">        for((i=0;i&lt;$diff;i++));do</div><div class=\"line\">                 /usr/local/bin/python3 /home/script/huobi.py &gt;&gt; /home/script/huobi.out</div><div class=\"line\">        done</div><div class=\"line\">fi</div></pre></td></tr></table></figure>\n<h1 id=\"crontab-配置\"><a href=\"#crontab-配置\" class=\"headerlink\" title=\"crontab 配置\"></a>crontab 配置</h1><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">MAILTO=<span class=\"string\">\"\"</span></div><div class=\"line\"></div><div class=\"line\">* * * * * sudo /bin/bash /home/script/huobi.sh</div></pre></td></tr></table></figure>\n<p><strong>注意事项</strong>：<br>在写shell脚本时，尽量用绝对路径。</p>\n"},{"title":"使用guzzle并行请求","date":"2018-09-28T09:10:05.000Z","_content":"\n## 背景\n\n由于拍卖项目特有的点特, 会导致在开拍是有瞬时的高流量。\n后端系统会每个出价排序, 由于高qps导致排序会有重复的情况,。为了解决遮掩样的问题, \n就写了一个分布式锁, 用于解决排序冲突。用guzzle写了一个压测脚本。\n\n\n## 实现\n\n首先压测是为了同一时刻发送指定数量的请求到目标接口。\n所以串行话的请求是无法\nguzzle 支持用pool实现并行的请求。\n官方文档 :\n\n[官方文档支持](https://guzzle-cn.readthedocs.io/zh_CN/latest/quickstart.html?highlight=Pool)\n\n文档中并没有提示如何发送POST请求, 顾琢磨一下:\n\n\n并行方式请求:\n\n```php\n  $client = new Client(['base_uri' => '10.171.22.45:5005', 'timeout' => 10]);\n    \n        $requests = function ($total) {\n            $uri = 'api/v1/bid';\n            for ($i = 0; $i < $total; $i++) {\n                yield new Request('POST', $uri, ['Content-type' => 'application/json'],json_encode([\n                    'car_dealer_id'=> (string)rand(1,20000),\n                    'bid_price' => \"4\",\n                    'car_id' => \"206431344\",\n                    'fr' => 'bd_other',\n                    'platform' => 'MO',\n                    'source' => 'C2B竞价',\n                    'sale_type' => '卖车',\n                    'car_dealer_city' => '深圳',\n                    'app_version' => \"3.2\"\n                ]));\n            }\n        };\n    \n        $pool = new Pool($client, $requests(100), [\n            'concurrency' => 5,\n            'fulfilled' => function ($response, $index) {\n                var_dump($response->getBody()->getContents());\n            },\n            'rejected' => function ($reason, $index) {\n                var_dump($reason->getMessage());\n            },\n        ]);\n    \n        $promise = $pool->promise();\n        $promise->wait();\n```\n![image](/photo/img/guzzle压测/并行.png)\n![image](/photo/img/guzzle压测/逻辑上并行-100次.png)\n![image](/photo/img/guzzle压测/逻辑上并行-100次结束.png)\n\n\n串行:\n\n```php\n        for ($i =1 ; $i<20;$i++) {\n            echo time();\n            $org_res[] = $this->client->request('POST', 'api/v1/bid',['form_params'=>\n                [\n                    'car_dealer_id'=> rand(1,20000),\n                    'bid_price' => 4,\n                    'car_id' => 206431332,\n                    'fr' => 'bd_other',\n                    'platform' => 'MO',\n                    'source' => 'C2B竞价',\n                    'sale_type' => '卖车',\n                    'car_dealer_city' => '深圳',\n                    'app_version' => 3.2\n                ]]);\n        }\n\n        foreach ($org_res as $val) {\n            $resdata = $val->getBody()->getContents();\n        }\n        var_dump($resdata);\n        die;\n```\n\n请求结果:\n\n![image](/photo/img/guzzle压测/串行.png)\n\n![image](/photo/img/guzzle压测/逻辑上的串行-100次.png)\n\n## 两者区别\n\n- 从性能上来看,20次请求, 并行请求耗时2秒, 串行请求3秒。\n- 当请求加到100次的时候, 并行请求耗时6秒, 串行请求耗时27秒,这个时候就能体现出并行和串行的却别相差21秒。\n\n\n为什么会有这么差距,再上一张图和代码,打印出来开始结束时间。\n\n并行:\n```php\n       并行请求\n        echo '总的开始:'.microtime().'<br>';\n        $client = new Client(['base_uri' => '10.171.22.45:5005', 'timeout' => 10]);\n        $requests = function ($total) {\n            $uri = 'api/v1/bid';\n            for ($i = 0; $i < $total; $i++) {\n                $car_dealer_id = (string)rand(1,1000000);\n                echo '开始'.microtime().' car_dealer_id:'.$car_dealer_id.\"<br>\";\n                yield new Request('POST', $uri, ['Content-type' => 'application/json'],json_encode([\n                    'car_dealer_id'=> (string)$car_dealer_id,\n                    'bid_price' => \"4\",\n                    'car_id' => \"206431344\",\n                    'fr' => 'bd_other',\n                    'platform' => 'MO',\n                    'source' => 'C2B竞价',\n                    'sale_type' => '卖车',\n                    'car_dealer_city' => '深圳',\n                    'app_version' => \"3.2\"\n                ]));\n            }\n        };\n\n        $pool = new Pool($client, $requests(100), [\n            'concurrency' => 5,\n            'fulfilled' => function ($response, $index) {\n                var_dump($response->getBody()->getContents());\n                echo microtime().\"<br>\";\n            },\n            'rejected' => function ($reason, $index) {\n                var_dump($reason->getMessage());\n                echo microtime();\n            },\n        ]);\n\n        $promise = $pool->promise();\n\n        $promise->wait();\n        echo '总的结束:'.microtime().'<br>';\n```\n\n100次请求的返回结果\n\n![image](/photo/img/guzzle压测/带时间的并行请求结果.png)\n\n串行:\n\n```php\n     for ($i =1 ; $i<100;$i++) {\n            echo '开始时间'.microtime().\"<br>\";\n            $ret = $this->client->request('POST', 'api/v1/bid',['form_params'=>\n                [\n                    'car_dealer_id'=> rand(1,2000000),\n                    'bid_price' => 4,\n                    'car_id' => 206431332,\n                    'fr' => 'bd_other',\n                    'platform' => 'MO',\n                    'source' => 'C2B竞价',\n                    'sale_type' => '卖车',\n                    'car_dealer_city' => '深圳',\n                    'app_version' => 3.2\n                ]]);\n            $org_res[] = $ret;\n            echo '结束时间'.microtime().\"<br>\";\n            var_export($ret->getBody()->getContents());\n        }\n\n//        foreach ($org_res as $val) {\n//            $resdata[] = $val->getBody()->getContents();\n//        }\n//        var_dump($resdata);\n        die;\n```\n\n100次请求的返回结果\n\n![image](/photo/img/guzzle压测/带时间的串行请求结果.png)\n\n\n- 所以可以看出,并行请求是先生成所有请求（这个上限和concurrency 参数有关）,再等待结果。如果达到当前并行的上线,就等待请求结束再生成新的请求。\n- 串行请求为请求,等待结果然后在请求。\n\n\n所以如果请求量很大的话,尽量还是用并行请求。","source":"_posts/使用guzzle并行请求.md","raw":"---\ntitle: 使用guzzle并行请求\ndate: 2018-09-28 17:10:05\ntags: 压测\n---\n\n## 背景\n\n由于拍卖项目特有的点特, 会导致在开拍是有瞬时的高流量。\n后端系统会每个出价排序, 由于高qps导致排序会有重复的情况,。为了解决遮掩样的问题, \n就写了一个分布式锁, 用于解决排序冲突。用guzzle写了一个压测脚本。\n\n\n## 实现\n\n首先压测是为了同一时刻发送指定数量的请求到目标接口。\n所以串行话的请求是无法\nguzzle 支持用pool实现并行的请求。\n官方文档 :\n\n[官方文档支持](https://guzzle-cn.readthedocs.io/zh_CN/latest/quickstart.html?highlight=Pool)\n\n文档中并没有提示如何发送POST请求, 顾琢磨一下:\n\n\n并行方式请求:\n\n```php\n  $client = new Client(['base_uri' => '10.171.22.45:5005', 'timeout' => 10]);\n    \n        $requests = function ($total) {\n            $uri = 'api/v1/bid';\n            for ($i = 0; $i < $total; $i++) {\n                yield new Request('POST', $uri, ['Content-type' => 'application/json'],json_encode([\n                    'car_dealer_id'=> (string)rand(1,20000),\n                    'bid_price' => \"4\",\n                    'car_id' => \"206431344\",\n                    'fr' => 'bd_other',\n                    'platform' => 'MO',\n                    'source' => 'C2B竞价',\n                    'sale_type' => '卖车',\n                    'car_dealer_city' => '深圳',\n                    'app_version' => \"3.2\"\n                ]));\n            }\n        };\n    \n        $pool = new Pool($client, $requests(100), [\n            'concurrency' => 5,\n            'fulfilled' => function ($response, $index) {\n                var_dump($response->getBody()->getContents());\n            },\n            'rejected' => function ($reason, $index) {\n                var_dump($reason->getMessage());\n            },\n        ]);\n    \n        $promise = $pool->promise();\n        $promise->wait();\n```\n![image](/photo/img/guzzle压测/并行.png)\n![image](/photo/img/guzzle压测/逻辑上并行-100次.png)\n![image](/photo/img/guzzle压测/逻辑上并行-100次结束.png)\n\n\n串行:\n\n```php\n        for ($i =1 ; $i<20;$i++) {\n            echo time();\n            $org_res[] = $this->client->request('POST', 'api/v1/bid',['form_params'=>\n                [\n                    'car_dealer_id'=> rand(1,20000),\n                    'bid_price' => 4,\n                    'car_id' => 206431332,\n                    'fr' => 'bd_other',\n                    'platform' => 'MO',\n                    'source' => 'C2B竞价',\n                    'sale_type' => '卖车',\n                    'car_dealer_city' => '深圳',\n                    'app_version' => 3.2\n                ]]);\n        }\n\n        foreach ($org_res as $val) {\n            $resdata = $val->getBody()->getContents();\n        }\n        var_dump($resdata);\n        die;\n```\n\n请求结果:\n\n![image](/photo/img/guzzle压测/串行.png)\n\n![image](/photo/img/guzzle压测/逻辑上的串行-100次.png)\n\n## 两者区别\n\n- 从性能上来看,20次请求, 并行请求耗时2秒, 串行请求3秒。\n- 当请求加到100次的时候, 并行请求耗时6秒, 串行请求耗时27秒,这个时候就能体现出并行和串行的却别相差21秒。\n\n\n为什么会有这么差距,再上一张图和代码,打印出来开始结束时间。\n\n并行:\n```php\n       并行请求\n        echo '总的开始:'.microtime().'<br>';\n        $client = new Client(['base_uri' => '10.171.22.45:5005', 'timeout' => 10]);\n        $requests = function ($total) {\n            $uri = 'api/v1/bid';\n            for ($i = 0; $i < $total; $i++) {\n                $car_dealer_id = (string)rand(1,1000000);\n                echo '开始'.microtime().' car_dealer_id:'.$car_dealer_id.\"<br>\";\n                yield new Request('POST', $uri, ['Content-type' => 'application/json'],json_encode([\n                    'car_dealer_id'=> (string)$car_dealer_id,\n                    'bid_price' => \"4\",\n                    'car_id' => \"206431344\",\n                    'fr' => 'bd_other',\n                    'platform' => 'MO',\n                    'source' => 'C2B竞价',\n                    'sale_type' => '卖车',\n                    'car_dealer_city' => '深圳',\n                    'app_version' => \"3.2\"\n                ]));\n            }\n        };\n\n        $pool = new Pool($client, $requests(100), [\n            'concurrency' => 5,\n            'fulfilled' => function ($response, $index) {\n                var_dump($response->getBody()->getContents());\n                echo microtime().\"<br>\";\n            },\n            'rejected' => function ($reason, $index) {\n                var_dump($reason->getMessage());\n                echo microtime();\n            },\n        ]);\n\n        $promise = $pool->promise();\n\n        $promise->wait();\n        echo '总的结束:'.microtime().'<br>';\n```\n\n100次请求的返回结果\n\n![image](/photo/img/guzzle压测/带时间的并行请求结果.png)\n\n串行:\n\n```php\n     for ($i =1 ; $i<100;$i++) {\n            echo '开始时间'.microtime().\"<br>\";\n            $ret = $this->client->request('POST', 'api/v1/bid',['form_params'=>\n                [\n                    'car_dealer_id'=> rand(1,2000000),\n                    'bid_price' => 4,\n                    'car_id' => 206431332,\n                    'fr' => 'bd_other',\n                    'platform' => 'MO',\n                    'source' => 'C2B竞价',\n                    'sale_type' => '卖车',\n                    'car_dealer_city' => '深圳',\n                    'app_version' => 3.2\n                ]]);\n            $org_res[] = $ret;\n            echo '结束时间'.microtime().\"<br>\";\n            var_export($ret->getBody()->getContents());\n        }\n\n//        foreach ($org_res as $val) {\n//            $resdata[] = $val->getBody()->getContents();\n//        }\n//        var_dump($resdata);\n        die;\n```\n\n100次请求的返回结果\n\n![image](/photo/img/guzzle压测/带时间的串行请求结果.png)\n\n\n- 所以可以看出,并行请求是先生成所有请求（这个上限和concurrency 参数有关）,再等待结果。如果达到当前并行的上线,就等待请求结束再生成新的请求。\n- 串行请求为请求,等待结果然后在请求。\n\n\n所以如果请求量很大的话,尽量还是用并行请求。","slug":"使用guzzle并行请求","published":1,"updated":"2018-11-09T01:53:42.848Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqavhgdw000zzqjfiqvlwztz","content":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>由于拍卖项目特有的点特, 会导致在开拍是有瞬时的高流量。<br>后端系统会每个出价排序, 由于高qps导致排序会有重复的情况,。为了解决遮掩样的问题,<br>就写了一个分布式锁, 用于解决排序冲突。用guzzle写了一个压测脚本。</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><p>首先压测是为了同一时刻发送指定数量的请求到目标接口。<br>所以串行话的请求是无法<br>guzzle 支持用pool实现并行的请求。<br>官方文档 :</p>\n<p><a href=\"https://guzzle-cn.readthedocs.io/zh_CN/latest/quickstart.html?highlight=Pool\" target=\"_blank\" rel=\"noopener\">官方文档支持</a></p>\n<p>文档中并没有提示如何发送POST请求, 顾琢磨一下:</p>\n<p>并行方式请求:</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">$client = <span class=\"keyword\">new</span> Client([<span class=\"string\">'base_uri'</span> =&gt; <span class=\"string\">'10.171.22.45:5005'</span>, <span class=\"string\">'timeout'</span> =&gt; <span class=\"number\">10</span>]);</div><div class=\"line\">  </div><div class=\"line\">      $requests = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">($total)</span> </span>&#123;</div><div class=\"line\">          $uri = <span class=\"string\">'api/v1/bid'</span>;</div><div class=\"line\">          <span class=\"keyword\">for</span> ($i = <span class=\"number\">0</span>; $i &lt; $total; $i++) &#123;</div><div class=\"line\">              <span class=\"keyword\">yield</span> <span class=\"keyword\">new</span> Request(<span class=\"string\">'POST'</span>, $uri, [<span class=\"string\">'Content-type'</span> =&gt; <span class=\"string\">'application/json'</span>],json_encode([</div><div class=\"line\">                  <span class=\"string\">'car_dealer_id'</span>=&gt; (string)rand(<span class=\"number\">1</span>,<span class=\"number\">20000</span>),</div><div class=\"line\">                  <span class=\"string\">'bid_price'</span> =&gt; <span class=\"string\">\"4\"</span>,</div><div class=\"line\">                  <span class=\"string\">'car_id'</span> =&gt; <span class=\"string\">\"206431344\"</span>,</div><div class=\"line\">                  <span class=\"string\">'fr'</span> =&gt; <span class=\"string\">'bd_other'</span>,</div><div class=\"line\">                  <span class=\"string\">'platform'</span> =&gt; <span class=\"string\">'MO'</span>,</div><div class=\"line\">                  <span class=\"string\">'source'</span> =&gt; <span class=\"string\">'C2B竞价'</span>,</div><div class=\"line\">                  <span class=\"string\">'sale_type'</span> =&gt; <span class=\"string\">'卖车'</span>,</div><div class=\"line\">                  <span class=\"string\">'car_dealer_city'</span> =&gt; <span class=\"string\">'深圳'</span>,</div><div class=\"line\">                  <span class=\"string\">'app_version'</span> =&gt; <span class=\"string\">\"3.2\"</span></div><div class=\"line\">              ]));</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125;;</div><div class=\"line\">  </div><div class=\"line\">      $pool = <span class=\"keyword\">new</span> Pool($client, $requests(<span class=\"number\">100</span>), [</div><div class=\"line\">          <span class=\"string\">'concurrency'</span> =&gt; <span class=\"number\">5</span>,</div><div class=\"line\">          <span class=\"string\">'fulfilled'</span> =&gt; <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">($response, $index)</span> </span>&#123;</div><div class=\"line\">              var_dump($response-&gt;getBody()-&gt;getContents());</div><div class=\"line\">          &#125;,</div><div class=\"line\">          <span class=\"string\">'rejected'</span> =&gt; <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">($reason, $index)</span> </span>&#123;</div><div class=\"line\">              var_dump($reason-&gt;getMessage());</div><div class=\"line\">          &#125;,</div><div class=\"line\">      ]);</div><div class=\"line\">  </div><div class=\"line\">      $promise = $pool-&gt;promise();</div><div class=\"line\">      $promise-&gt;wait();</div></pre></td></tr></table></figure>\n<p><img src=\"/photo/img/guzzle压测/并行.png\" alt=\"image\"><br><img src=\"/photo/img/guzzle压测/逻辑上并行-100次.png\" alt=\"image\"><br><img src=\"/photo/img/guzzle压测/逻辑上并行-100次结束.png\" alt=\"image\"></p>\n<p>串行:</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> ($i =<span class=\"number\">1</span> ; $i&lt;<span class=\"number\">20</span>;$i++) &#123;</div><div class=\"line\">    <span class=\"keyword\">echo</span> time();</div><div class=\"line\">    $org_res[] = <span class=\"keyword\">$this</span>-&gt;client-&gt;request(<span class=\"string\">'POST'</span>, <span class=\"string\">'api/v1/bid'</span>,[<span class=\"string\">'form_params'</span>=&gt;</div><div class=\"line\">        [</div><div class=\"line\">            <span class=\"string\">'car_dealer_id'</span>=&gt; rand(<span class=\"number\">1</span>,<span class=\"number\">20000</span>),</div><div class=\"line\">            <span class=\"string\">'bid_price'</span> =&gt; <span class=\"number\">4</span>,</div><div class=\"line\">            <span class=\"string\">'car_id'</span> =&gt; <span class=\"number\">206431332</span>,</div><div class=\"line\">            <span class=\"string\">'fr'</span> =&gt; <span class=\"string\">'bd_other'</span>,</div><div class=\"line\">            <span class=\"string\">'platform'</span> =&gt; <span class=\"string\">'MO'</span>,</div><div class=\"line\">            <span class=\"string\">'source'</span> =&gt; <span class=\"string\">'C2B竞价'</span>,</div><div class=\"line\">            <span class=\"string\">'sale_type'</span> =&gt; <span class=\"string\">'卖车'</span>,</div><div class=\"line\">            <span class=\"string\">'car_dealer_city'</span> =&gt; <span class=\"string\">'深圳'</span>,</div><div class=\"line\">            <span class=\"string\">'app_version'</span> =&gt; <span class=\"number\">3.2</span></div><div class=\"line\">        ]]);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">foreach</span> ($org_res <span class=\"keyword\">as</span> $val) &#123;</div><div class=\"line\">    $resdata = $val-&gt;getBody()-&gt;getContents();</div><div class=\"line\">&#125;</div><div class=\"line\">var_dump($resdata);</div><div class=\"line\"><span class=\"keyword\">die</span>;</div></pre></td></tr></table></figure>\n<p>请求结果:</p>\n<p><img src=\"/photo/img/guzzle压测/串行.png\" alt=\"image\"></p>\n<p><img src=\"/photo/img/guzzle压测/逻辑上的串行-100次.png\" alt=\"image\"></p>\n<h2 id=\"两者区别\"><a href=\"#两者区别\" class=\"headerlink\" title=\"两者区别\"></a>两者区别</h2><ul>\n<li>从性能上来看,20次请求, 并行请求耗时2秒, 串行请求3秒。</li>\n<li>当请求加到100次的时候, 并行请求耗时6秒, 串行请求耗时27秒,这个时候就能体现出并行和串行的却别相差21秒。</li>\n</ul>\n<p>为什么会有这么差距,再上一张图和代码,打印出来开始结束时间。</p>\n<p>并行:<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\">并行请求</div><div class=\"line\"> <span class=\"keyword\">echo</span> <span class=\"string\">'总的开始:'</span>.microtime().<span class=\"string\">'&lt;br&gt;'</span>;</div><div class=\"line\"> $client = <span class=\"keyword\">new</span> Client([<span class=\"string\">'base_uri'</span> =&gt; <span class=\"string\">'10.171.22.45:5005'</span>, <span class=\"string\">'timeout'</span> =&gt; <span class=\"number\">10</span>]);</div><div class=\"line\"> $requests = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">($total)</span> </span>&#123;</div><div class=\"line\">     $uri = <span class=\"string\">'api/v1/bid'</span>;</div><div class=\"line\">     <span class=\"keyword\">for</span> ($i = <span class=\"number\">0</span>; $i &lt; $total; $i++) &#123;</div><div class=\"line\">         $car_dealer_id = (string)rand(<span class=\"number\">1</span>,<span class=\"number\">1000000</span>);</div><div class=\"line\">         <span class=\"keyword\">echo</span> <span class=\"string\">'开始'</span>.microtime().<span class=\"string\">' car_dealer_id:'</span>.$car_dealer_id.<span class=\"string\">\"&lt;br&gt;\"</span>;</div><div class=\"line\">         <span class=\"keyword\">yield</span> <span class=\"keyword\">new</span> Request(<span class=\"string\">'POST'</span>, $uri, [<span class=\"string\">'Content-type'</span> =&gt; <span class=\"string\">'application/json'</span>],json_encode([</div><div class=\"line\">             <span class=\"string\">'car_dealer_id'</span>=&gt; (string)$car_dealer_id,</div><div class=\"line\">             <span class=\"string\">'bid_price'</span> =&gt; <span class=\"string\">\"4\"</span>,</div><div class=\"line\">             <span class=\"string\">'car_id'</span> =&gt; <span class=\"string\">\"206431344\"</span>,</div><div class=\"line\">             <span class=\"string\">'fr'</span> =&gt; <span class=\"string\">'bd_other'</span>,</div><div class=\"line\">             <span class=\"string\">'platform'</span> =&gt; <span class=\"string\">'MO'</span>,</div><div class=\"line\">             <span class=\"string\">'source'</span> =&gt; <span class=\"string\">'C2B竞价'</span>,</div><div class=\"line\">             <span class=\"string\">'sale_type'</span> =&gt; <span class=\"string\">'卖车'</span>,</div><div class=\"line\">             <span class=\"string\">'car_dealer_city'</span> =&gt; <span class=\"string\">'深圳'</span>,</div><div class=\"line\">             <span class=\"string\">'app_version'</span> =&gt; <span class=\"string\">\"3.2\"</span></div><div class=\"line\">         ]));</div><div class=\"line\">     &#125;</div><div class=\"line\"> &#125;;</div><div class=\"line\"></div><div class=\"line\"> $pool = <span class=\"keyword\">new</span> Pool($client, $requests(<span class=\"number\">100</span>), [</div><div class=\"line\">     <span class=\"string\">'concurrency'</span> =&gt; <span class=\"number\">5</span>,</div><div class=\"line\">     <span class=\"string\">'fulfilled'</span> =&gt; <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">($response, $index)</span> </span>&#123;</div><div class=\"line\">         var_dump($response-&gt;getBody()-&gt;getContents());</div><div class=\"line\">         <span class=\"keyword\">echo</span> microtime().<span class=\"string\">\"&lt;br&gt;\"</span>;</div><div class=\"line\">     &#125;,</div><div class=\"line\">     <span class=\"string\">'rejected'</span> =&gt; <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">($reason, $index)</span> </span>&#123;</div><div class=\"line\">         var_dump($reason-&gt;getMessage());</div><div class=\"line\">         <span class=\"keyword\">echo</span> microtime();</div><div class=\"line\">     &#125;,</div><div class=\"line\"> ]);</div><div class=\"line\"></div><div class=\"line\"> $promise = $pool-&gt;promise();</div><div class=\"line\"></div><div class=\"line\"> $promise-&gt;wait();</div><div class=\"line\"> <span class=\"keyword\">echo</span> <span class=\"string\">'总的结束:'</span>.microtime().<span class=\"string\">'&lt;br&gt;'</span>;</div></pre></td></tr></table></figure></p>\n<p>100次请求的返回结果</p>\n<p><img src=\"/photo/img/guzzle压测/带时间的并行请求结果.png\" alt=\"image\"></p>\n<p>串行:</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">     <span class=\"keyword\">for</span> ($i =<span class=\"number\">1</span> ; $i&lt;<span class=\"number\">100</span>;$i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">'开始时间'</span>.microtime().<span class=\"string\">\"&lt;br&gt;\"</span>;</div><div class=\"line\">            $ret = <span class=\"keyword\">$this</span>-&gt;client-&gt;request(<span class=\"string\">'POST'</span>, <span class=\"string\">'api/v1/bid'</span>,[<span class=\"string\">'form_params'</span>=&gt;</div><div class=\"line\">                [</div><div class=\"line\">                    <span class=\"string\">'car_dealer_id'</span>=&gt; rand(<span class=\"number\">1</span>,<span class=\"number\">2000000</span>),</div><div class=\"line\">                    <span class=\"string\">'bid_price'</span> =&gt; <span class=\"number\">4</span>,</div><div class=\"line\">                    <span class=\"string\">'car_id'</span> =&gt; <span class=\"number\">206431332</span>,</div><div class=\"line\">                    <span class=\"string\">'fr'</span> =&gt; <span class=\"string\">'bd_other'</span>,</div><div class=\"line\">                    <span class=\"string\">'platform'</span> =&gt; <span class=\"string\">'MO'</span>,</div><div class=\"line\">                    <span class=\"string\">'source'</span> =&gt; <span class=\"string\">'C2B竞价'</span>,</div><div class=\"line\">                    <span class=\"string\">'sale_type'</span> =&gt; <span class=\"string\">'卖车'</span>,</div><div class=\"line\">                    <span class=\"string\">'car_dealer_city'</span> =&gt; <span class=\"string\">'深圳'</span>,</div><div class=\"line\">                    <span class=\"string\">'app_version'</span> =&gt; <span class=\"number\">3.2</span></div><div class=\"line\">                ]]);</div><div class=\"line\">            $org_res[] = $ret;</div><div class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">'结束时间'</span>.microtime().<span class=\"string\">\"&lt;br&gt;\"</span>;</div><div class=\"line\">            var_export($ret-&gt;getBody()-&gt;getContents());</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//        foreach ($org_res as $val) &#123;</span></div><div class=\"line\"><span class=\"comment\">//            $resdata[] = $val-&gt;getBody()-&gt;getContents();</span></div><div class=\"line\"><span class=\"comment\">//        &#125;</span></div><div class=\"line\"><span class=\"comment\">//        var_dump($resdata);</span></div><div class=\"line\">        <span class=\"keyword\">die</span>;</div></pre></td></tr></table></figure>\n<p>100次请求的返回结果</p>\n<p><img src=\"/photo/img/guzzle压测/带时间的串行请求结果.png\" alt=\"image\"></p>\n<ul>\n<li>所以可以看出,并行请求是先生成所有请求（这个上限和concurrency 参数有关）,再等待结果。如果达到当前并行的上线,就等待请求结束再生成新的请求。</li>\n<li>串行请求为请求,等待结果然后在请求。</li>\n</ul>\n<p>所以如果请求量很大的话,尽量还是用并行请求。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>由于拍卖项目特有的点特, 会导致在开拍是有瞬时的高流量。<br>后端系统会每个出价排序, 由于高qps导致排序会有重复的情况,。为了解决遮掩样的问题,<br>就写了一个分布式锁, 用于解决排序冲突。用guzzle写了一个压测脚本。</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><p>首先压测是为了同一时刻发送指定数量的请求到目标接口。<br>所以串行话的请求是无法<br>guzzle 支持用pool实现并行的请求。<br>官方文档 :</p>\n<p><a href=\"https://guzzle-cn.readthedocs.io/zh_CN/latest/quickstart.html?highlight=Pool\" target=\"_blank\" rel=\"noopener\">官方文档支持</a></p>\n<p>文档中并没有提示如何发送POST请求, 顾琢磨一下:</p>\n<p>并行方式请求:</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">$client = <span class=\"keyword\">new</span> Client([<span class=\"string\">'base_uri'</span> =&gt; <span class=\"string\">'10.171.22.45:5005'</span>, <span class=\"string\">'timeout'</span> =&gt; <span class=\"number\">10</span>]);</div><div class=\"line\">  </div><div class=\"line\">      $requests = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">($total)</span> </span>&#123;</div><div class=\"line\">          $uri = <span class=\"string\">'api/v1/bid'</span>;</div><div class=\"line\">          <span class=\"keyword\">for</span> ($i = <span class=\"number\">0</span>; $i &lt; $total; $i++) &#123;</div><div class=\"line\">              <span class=\"keyword\">yield</span> <span class=\"keyword\">new</span> Request(<span class=\"string\">'POST'</span>, $uri, [<span class=\"string\">'Content-type'</span> =&gt; <span class=\"string\">'application/json'</span>],json_encode([</div><div class=\"line\">                  <span class=\"string\">'car_dealer_id'</span>=&gt; (string)rand(<span class=\"number\">1</span>,<span class=\"number\">20000</span>),</div><div class=\"line\">                  <span class=\"string\">'bid_price'</span> =&gt; <span class=\"string\">\"4\"</span>,</div><div class=\"line\">                  <span class=\"string\">'car_id'</span> =&gt; <span class=\"string\">\"206431344\"</span>,</div><div class=\"line\">                  <span class=\"string\">'fr'</span> =&gt; <span class=\"string\">'bd_other'</span>,</div><div class=\"line\">                  <span class=\"string\">'platform'</span> =&gt; <span class=\"string\">'MO'</span>,</div><div class=\"line\">                  <span class=\"string\">'source'</span> =&gt; <span class=\"string\">'C2B竞价'</span>,</div><div class=\"line\">                  <span class=\"string\">'sale_type'</span> =&gt; <span class=\"string\">'卖车'</span>,</div><div class=\"line\">                  <span class=\"string\">'car_dealer_city'</span> =&gt; <span class=\"string\">'深圳'</span>,</div><div class=\"line\">                  <span class=\"string\">'app_version'</span> =&gt; <span class=\"string\">\"3.2\"</span></div><div class=\"line\">              ]));</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125;;</div><div class=\"line\">  </div><div class=\"line\">      $pool = <span class=\"keyword\">new</span> Pool($client, $requests(<span class=\"number\">100</span>), [</div><div class=\"line\">          <span class=\"string\">'concurrency'</span> =&gt; <span class=\"number\">5</span>,</div><div class=\"line\">          <span class=\"string\">'fulfilled'</span> =&gt; <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">($response, $index)</span> </span>&#123;</div><div class=\"line\">              var_dump($response-&gt;getBody()-&gt;getContents());</div><div class=\"line\">          &#125;,</div><div class=\"line\">          <span class=\"string\">'rejected'</span> =&gt; <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">($reason, $index)</span> </span>&#123;</div><div class=\"line\">              var_dump($reason-&gt;getMessage());</div><div class=\"line\">          &#125;,</div><div class=\"line\">      ]);</div><div class=\"line\">  </div><div class=\"line\">      $promise = $pool-&gt;promise();</div><div class=\"line\">      $promise-&gt;wait();</div></pre></td></tr></table></figure>\n<p><img src=\"/photo/img/guzzle压测/并行.png\" alt=\"image\"><br><img src=\"/photo/img/guzzle压测/逻辑上并行-100次.png\" alt=\"image\"><br><img src=\"/photo/img/guzzle压测/逻辑上并行-100次结束.png\" alt=\"image\"></p>\n<p>串行:</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> ($i =<span class=\"number\">1</span> ; $i&lt;<span class=\"number\">20</span>;$i++) &#123;</div><div class=\"line\">    <span class=\"keyword\">echo</span> time();</div><div class=\"line\">    $org_res[] = <span class=\"keyword\">$this</span>-&gt;client-&gt;request(<span class=\"string\">'POST'</span>, <span class=\"string\">'api/v1/bid'</span>,[<span class=\"string\">'form_params'</span>=&gt;</div><div class=\"line\">        [</div><div class=\"line\">            <span class=\"string\">'car_dealer_id'</span>=&gt; rand(<span class=\"number\">1</span>,<span class=\"number\">20000</span>),</div><div class=\"line\">            <span class=\"string\">'bid_price'</span> =&gt; <span class=\"number\">4</span>,</div><div class=\"line\">            <span class=\"string\">'car_id'</span> =&gt; <span class=\"number\">206431332</span>,</div><div class=\"line\">            <span class=\"string\">'fr'</span> =&gt; <span class=\"string\">'bd_other'</span>,</div><div class=\"line\">            <span class=\"string\">'platform'</span> =&gt; <span class=\"string\">'MO'</span>,</div><div class=\"line\">            <span class=\"string\">'source'</span> =&gt; <span class=\"string\">'C2B竞价'</span>,</div><div class=\"line\">            <span class=\"string\">'sale_type'</span> =&gt; <span class=\"string\">'卖车'</span>,</div><div class=\"line\">            <span class=\"string\">'car_dealer_city'</span> =&gt; <span class=\"string\">'深圳'</span>,</div><div class=\"line\">            <span class=\"string\">'app_version'</span> =&gt; <span class=\"number\">3.2</span></div><div class=\"line\">        ]]);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">foreach</span> ($org_res <span class=\"keyword\">as</span> $val) &#123;</div><div class=\"line\">    $resdata = $val-&gt;getBody()-&gt;getContents();</div><div class=\"line\">&#125;</div><div class=\"line\">var_dump($resdata);</div><div class=\"line\"><span class=\"keyword\">die</span>;</div></pre></td></tr></table></figure>\n<p>请求结果:</p>\n<p><img src=\"/photo/img/guzzle压测/串行.png\" alt=\"image\"></p>\n<p><img src=\"/photo/img/guzzle压测/逻辑上的串行-100次.png\" alt=\"image\"></p>\n<h2 id=\"两者区别\"><a href=\"#两者区别\" class=\"headerlink\" title=\"两者区别\"></a>两者区别</h2><ul>\n<li>从性能上来看,20次请求, 并行请求耗时2秒, 串行请求3秒。</li>\n<li>当请求加到100次的时候, 并行请求耗时6秒, 串行请求耗时27秒,这个时候就能体现出并行和串行的却别相差21秒。</li>\n</ul>\n<p>为什么会有这么差距,再上一张图和代码,打印出来开始结束时间。</p>\n<p>并行:<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\">并行请求</div><div class=\"line\"> <span class=\"keyword\">echo</span> <span class=\"string\">'总的开始:'</span>.microtime().<span class=\"string\">'&lt;br&gt;'</span>;</div><div class=\"line\"> $client = <span class=\"keyword\">new</span> Client([<span class=\"string\">'base_uri'</span> =&gt; <span class=\"string\">'10.171.22.45:5005'</span>, <span class=\"string\">'timeout'</span> =&gt; <span class=\"number\">10</span>]);</div><div class=\"line\"> $requests = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">($total)</span> </span>&#123;</div><div class=\"line\">     $uri = <span class=\"string\">'api/v1/bid'</span>;</div><div class=\"line\">     <span class=\"keyword\">for</span> ($i = <span class=\"number\">0</span>; $i &lt; $total; $i++) &#123;</div><div class=\"line\">         $car_dealer_id = (string)rand(<span class=\"number\">1</span>,<span class=\"number\">1000000</span>);</div><div class=\"line\">         <span class=\"keyword\">echo</span> <span class=\"string\">'开始'</span>.microtime().<span class=\"string\">' car_dealer_id:'</span>.$car_dealer_id.<span class=\"string\">\"&lt;br&gt;\"</span>;</div><div class=\"line\">         <span class=\"keyword\">yield</span> <span class=\"keyword\">new</span> Request(<span class=\"string\">'POST'</span>, $uri, [<span class=\"string\">'Content-type'</span> =&gt; <span class=\"string\">'application/json'</span>],json_encode([</div><div class=\"line\">             <span class=\"string\">'car_dealer_id'</span>=&gt; (string)$car_dealer_id,</div><div class=\"line\">             <span class=\"string\">'bid_price'</span> =&gt; <span class=\"string\">\"4\"</span>,</div><div class=\"line\">             <span class=\"string\">'car_id'</span> =&gt; <span class=\"string\">\"206431344\"</span>,</div><div class=\"line\">             <span class=\"string\">'fr'</span> =&gt; <span class=\"string\">'bd_other'</span>,</div><div class=\"line\">             <span class=\"string\">'platform'</span> =&gt; <span class=\"string\">'MO'</span>,</div><div class=\"line\">             <span class=\"string\">'source'</span> =&gt; <span class=\"string\">'C2B竞价'</span>,</div><div class=\"line\">             <span class=\"string\">'sale_type'</span> =&gt; <span class=\"string\">'卖车'</span>,</div><div class=\"line\">             <span class=\"string\">'car_dealer_city'</span> =&gt; <span class=\"string\">'深圳'</span>,</div><div class=\"line\">             <span class=\"string\">'app_version'</span> =&gt; <span class=\"string\">\"3.2\"</span></div><div class=\"line\">         ]));</div><div class=\"line\">     &#125;</div><div class=\"line\"> &#125;;</div><div class=\"line\"></div><div class=\"line\"> $pool = <span class=\"keyword\">new</span> Pool($client, $requests(<span class=\"number\">100</span>), [</div><div class=\"line\">     <span class=\"string\">'concurrency'</span> =&gt; <span class=\"number\">5</span>,</div><div class=\"line\">     <span class=\"string\">'fulfilled'</span> =&gt; <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">($response, $index)</span> </span>&#123;</div><div class=\"line\">         var_dump($response-&gt;getBody()-&gt;getContents());</div><div class=\"line\">         <span class=\"keyword\">echo</span> microtime().<span class=\"string\">\"&lt;br&gt;\"</span>;</div><div class=\"line\">     &#125;,</div><div class=\"line\">     <span class=\"string\">'rejected'</span> =&gt; <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">($reason, $index)</span> </span>&#123;</div><div class=\"line\">         var_dump($reason-&gt;getMessage());</div><div class=\"line\">         <span class=\"keyword\">echo</span> microtime();</div><div class=\"line\">     &#125;,</div><div class=\"line\"> ]);</div><div class=\"line\"></div><div class=\"line\"> $promise = $pool-&gt;promise();</div><div class=\"line\"></div><div class=\"line\"> $promise-&gt;wait();</div><div class=\"line\"> <span class=\"keyword\">echo</span> <span class=\"string\">'总的结束:'</span>.microtime().<span class=\"string\">'&lt;br&gt;'</span>;</div></pre></td></tr></table></figure></p>\n<p>100次请求的返回结果</p>\n<p><img src=\"/photo/img/guzzle压测/带时间的并行请求结果.png\" alt=\"image\"></p>\n<p>串行:</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">     <span class=\"keyword\">for</span> ($i =<span class=\"number\">1</span> ; $i&lt;<span class=\"number\">100</span>;$i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">'开始时间'</span>.microtime().<span class=\"string\">\"&lt;br&gt;\"</span>;</div><div class=\"line\">            $ret = <span class=\"keyword\">$this</span>-&gt;client-&gt;request(<span class=\"string\">'POST'</span>, <span class=\"string\">'api/v1/bid'</span>,[<span class=\"string\">'form_params'</span>=&gt;</div><div class=\"line\">                [</div><div class=\"line\">                    <span class=\"string\">'car_dealer_id'</span>=&gt; rand(<span class=\"number\">1</span>,<span class=\"number\">2000000</span>),</div><div class=\"line\">                    <span class=\"string\">'bid_price'</span> =&gt; <span class=\"number\">4</span>,</div><div class=\"line\">                    <span class=\"string\">'car_id'</span> =&gt; <span class=\"number\">206431332</span>,</div><div class=\"line\">                    <span class=\"string\">'fr'</span> =&gt; <span class=\"string\">'bd_other'</span>,</div><div class=\"line\">                    <span class=\"string\">'platform'</span> =&gt; <span class=\"string\">'MO'</span>,</div><div class=\"line\">                    <span class=\"string\">'source'</span> =&gt; <span class=\"string\">'C2B竞价'</span>,</div><div class=\"line\">                    <span class=\"string\">'sale_type'</span> =&gt; <span class=\"string\">'卖车'</span>,</div><div class=\"line\">                    <span class=\"string\">'car_dealer_city'</span> =&gt; <span class=\"string\">'深圳'</span>,</div><div class=\"line\">                    <span class=\"string\">'app_version'</span> =&gt; <span class=\"number\">3.2</span></div><div class=\"line\">                ]]);</div><div class=\"line\">            $org_res[] = $ret;</div><div class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">'结束时间'</span>.microtime().<span class=\"string\">\"&lt;br&gt;\"</span>;</div><div class=\"line\">            var_export($ret-&gt;getBody()-&gt;getContents());</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//        foreach ($org_res as $val) &#123;</span></div><div class=\"line\"><span class=\"comment\">//            $resdata[] = $val-&gt;getBody()-&gt;getContents();</span></div><div class=\"line\"><span class=\"comment\">//        &#125;</span></div><div class=\"line\"><span class=\"comment\">//        var_dump($resdata);</span></div><div class=\"line\">        <span class=\"keyword\">die</span>;</div></pre></td></tr></table></figure>\n<p>100次请求的返回结果</p>\n<p><img src=\"/photo/img/guzzle压测/带时间的串行请求结果.png\" alt=\"image\"></p>\n<ul>\n<li>所以可以看出,并行请求是先生成所有请求（这个上限和concurrency 参数有关）,再等待结果。如果达到当前并行的上线,就等待请求结束再生成新的请求。</li>\n<li>串行请求为请求,等待结果然后在请求。</li>\n</ul>\n<p>所以如果请求量很大的话,尽量还是用并行请求。</p>\n"},{"title":"Item2使用sz rz命令从服务下载上传文件","date":"2018-07-12T13:27:37.000Z","_content":"\n## 背景\n如何从linux服务下载/上传文件\n\n - 使用scp命令\n - 使用sz命令\n\n\n这里主要介绍使用sz命令下载文件\n\n## 安装\n - 安装lrzsz `hobrew install llssz`\n - 在本地编写shell用于接受sz命令下载下来的文件\n\n上传shell\n\n`iterm2-send-zmodem.sh`\n```\n    #!/bin/bash\n    \n    \n    #Author: Matt Mastracci (matthew@mastracci.com)\n    \n    \n    # AppleScript from http://stackoverflow.com/questions/4309087/cancel-button-on-osascript-in-a-bash-script\n    \n    \n    # licensed under cc-wiki with attribution required\n    \n    \n    # Remainder of script public domain\n    \n    \n    osascript -e 'tell application \"iTerm2\" to version' > /dev/null 2>&1 && NAME=iTerm2 || NAME=iTerm\n    if [[ $NAME = \"iTerm\" ]]; then\n        FILE=`osascript -e 'tell application \"iTerm\" to activate' -e 'tell application \"iTerm\" to set thefile to choose file with prompt \"Choose a file to send\"' -e \"do shell script (\\\"echo \\\"&(quoted form of POSIX path of thefile as Unicode text)&\\\"\\\")\"`\n    else\n        FILE=`osascript -e 'tell application \"iTerm2\" to activate' -e 'tell application \"iTerm2\" to set thefile to choose file with prompt \"Choose a file to send\"' -e \"do shell script (\\\"echo \\\"&(quoted form of POSIX path of thefile as Unicode text)&\\\"\\\")\"`\n    fi\n    if [[ $FILE = \"\" ]]; then\n        echo Cancelled.\n        # Send ZModem cancel\n        echo -e \\\\x18\\\\x18\\\\x18\\\\x18\\\\x18\n        sleep 1\n        echo\n        echo \\# Cancelled transfer\n    else\n        /usr/local/bin/sz \"$FILE\" -e -b\n        sleep 1\n        echo\n        echo \\# Received $FILE\n    fi  \n```\n\n下载shell\n\n`iterm2-recv-zmodem.sh`\n\n```\n    #!/bin/bash\n    # Author: Matt Mastracci (matthew@mastracci.com)\n    # AppleScript from http://stackoverflow.com/questions/4309087/cancel-button-on-osascript-in-a-bash-script\n    # licensed under cc-wiki with attribution required \n    # Remainder of script public domain\n\n    osascript -e 'tell application \"iTerm2\" to version' > /dev/null 2>&1 && NAME=iTerm2 || NAME=iTerm\n    if [[ $NAME = \"iTerm\" ]]; then\n        FILE=`osascript -e 'tell application \"iTerm\" to activate' -e 'tell application \"iTerm\" to set thefile to choose folder with prompt \"Choose a folder to place received files in\"' -e \"do shell script (\\\"echo \\\"&(quoted form of POSIX path of thefile as Unicode text)&\\\"\\\")\"`\n    else\n        FILE=`osascript -e 'tell application \"iTerm2\" to activate' -e 'tell application \"iTerm2\" to set thefile to choose folder with prompt \"Choose a folder to place received files in\"' -e \"do shell script (\\\"echo \\\"&(quoted form of POSIX path of thefile as Unicode text)&\\\"\\\")\"`\n    fi\n\n    if [[ $FILE = \"\" ]]; then\n        echo Cancelled.\n        # Send ZModem cancel\n        echo -e \\\\x18\\\\x18\\\\x18\\\\x18\\\\x18\n        sleep 1\n        echo\n        echo \\# Cancelled transfer\n    else\n        cd \"$FILE\"\n        /usr/local/bin/rz -E -e -b\n        sleep 1\n        echo\n        echo\n        echo \\# Sent \\-\\> $FILE\n    fi\n```\n## 配置iterm2\n\n- 设置Iterm2的Tirgger特性，profiles-default-editProfiles-Advanced中的Tirgger\n\n```\n    添加两条trigger，分别设置Regular expression，Action，Parameters，Instant如下：\n        1.第一条\n            Regular expression: rz waiting to receive.\\*\\*B0100\n            Action: Run Silent Coprocess\n            Parameters: /usr/local/bin/iterm2-send-zmodem.sh\n            Instant: checked\n        2.第二条\n            Regular expression: \\*\\*B00000000000000\n            Action: Run Silent Coprocess\n            Parameters: /usr/local/bin/iterm2-recv-zmodem.sh\n            Instant: checked\n```\n\n**备注**:注意两个文件的权限","source":"_posts/使用sz-rz命令从服务下载上传文件.md","raw":"---\ntitle: Item2使用sz rz命令从服务下载上传文件\ndate: 2018-07-12 21:27:37\ntags:\n---\n\n## 背景\n如何从linux服务下载/上传文件\n\n - 使用scp命令\n - 使用sz命令\n\n\n这里主要介绍使用sz命令下载文件\n\n## 安装\n - 安装lrzsz `hobrew install llssz`\n - 在本地编写shell用于接受sz命令下载下来的文件\n\n上传shell\n\n`iterm2-send-zmodem.sh`\n```\n    #!/bin/bash\n    \n    \n    #Author: Matt Mastracci (matthew@mastracci.com)\n    \n    \n    # AppleScript from http://stackoverflow.com/questions/4309087/cancel-button-on-osascript-in-a-bash-script\n    \n    \n    # licensed under cc-wiki with attribution required\n    \n    \n    # Remainder of script public domain\n    \n    \n    osascript -e 'tell application \"iTerm2\" to version' > /dev/null 2>&1 && NAME=iTerm2 || NAME=iTerm\n    if [[ $NAME = \"iTerm\" ]]; then\n        FILE=`osascript -e 'tell application \"iTerm\" to activate' -e 'tell application \"iTerm\" to set thefile to choose file with prompt \"Choose a file to send\"' -e \"do shell script (\\\"echo \\\"&(quoted form of POSIX path of thefile as Unicode text)&\\\"\\\")\"`\n    else\n        FILE=`osascript -e 'tell application \"iTerm2\" to activate' -e 'tell application \"iTerm2\" to set thefile to choose file with prompt \"Choose a file to send\"' -e \"do shell script (\\\"echo \\\"&(quoted form of POSIX path of thefile as Unicode text)&\\\"\\\")\"`\n    fi\n    if [[ $FILE = \"\" ]]; then\n        echo Cancelled.\n        # Send ZModem cancel\n        echo -e \\\\x18\\\\x18\\\\x18\\\\x18\\\\x18\n        sleep 1\n        echo\n        echo \\# Cancelled transfer\n    else\n        /usr/local/bin/sz \"$FILE\" -e -b\n        sleep 1\n        echo\n        echo \\# Received $FILE\n    fi  \n```\n\n下载shell\n\n`iterm2-recv-zmodem.sh`\n\n```\n    #!/bin/bash\n    # Author: Matt Mastracci (matthew@mastracci.com)\n    # AppleScript from http://stackoverflow.com/questions/4309087/cancel-button-on-osascript-in-a-bash-script\n    # licensed under cc-wiki with attribution required \n    # Remainder of script public domain\n\n    osascript -e 'tell application \"iTerm2\" to version' > /dev/null 2>&1 && NAME=iTerm2 || NAME=iTerm\n    if [[ $NAME = \"iTerm\" ]]; then\n        FILE=`osascript -e 'tell application \"iTerm\" to activate' -e 'tell application \"iTerm\" to set thefile to choose folder with prompt \"Choose a folder to place received files in\"' -e \"do shell script (\\\"echo \\\"&(quoted form of POSIX path of thefile as Unicode text)&\\\"\\\")\"`\n    else\n        FILE=`osascript -e 'tell application \"iTerm2\" to activate' -e 'tell application \"iTerm2\" to set thefile to choose folder with prompt \"Choose a folder to place received files in\"' -e \"do shell script (\\\"echo \\\"&(quoted form of POSIX path of thefile as Unicode text)&\\\"\\\")\"`\n    fi\n\n    if [[ $FILE = \"\" ]]; then\n        echo Cancelled.\n        # Send ZModem cancel\n        echo -e \\\\x18\\\\x18\\\\x18\\\\x18\\\\x18\n        sleep 1\n        echo\n        echo \\# Cancelled transfer\n    else\n        cd \"$FILE\"\n        /usr/local/bin/rz -E -e -b\n        sleep 1\n        echo\n        echo\n        echo \\# Sent \\-\\> $FILE\n    fi\n```\n## 配置iterm2\n\n- 设置Iterm2的Tirgger特性，profiles-default-editProfiles-Advanced中的Tirgger\n\n```\n    添加两条trigger，分别设置Regular expression，Action，Parameters，Instant如下：\n        1.第一条\n            Regular expression: rz waiting to receive.\\*\\*B0100\n            Action: Run Silent Coprocess\n            Parameters: /usr/local/bin/iterm2-send-zmodem.sh\n            Instant: checked\n        2.第二条\n            Regular expression: \\*\\*B00000000000000\n            Action: Run Silent Coprocess\n            Parameters: /usr/local/bin/iterm2-recv-zmodem.sh\n            Instant: checked\n```\n\n**备注**:注意两个文件的权限","slug":"使用sz-rz命令从服务下载上传文件","published":1,"updated":"2018-07-12T13:42:45.196Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqavhgdy0011zqjf7kncysky","content":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>如何从linux服务下载/上传文件</p>\n<ul>\n<li>使用scp命令</li>\n<li>使用sz命令</li>\n</ul>\n<p>这里主要介绍使用sz命令下载文件</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><ul>\n<li>安装lrzsz <code>hobrew install llssz</code></li>\n<li>在本地编写shell用于接受sz命令下载下来的文件</li>\n</ul>\n<p>上传shell</p>\n<p><code>iterm2-send-zmodem.sh</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\">#!/bin/bash</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">#Author: Matt Mastracci (matthew@mastracci.com)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"># AppleScript from http://stackoverflow.com/questions/4309087/cancel-button-on-osascript-in-a-bash-script</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"># licensed under cc-wiki with attribution required</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"># Remainder of script public domain</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">osascript -e &apos;tell application &quot;iTerm2&quot; to version&apos; &gt; /dev/null 2&gt;&amp;1 &amp;&amp; NAME=iTerm2 || NAME=iTerm</div><div class=\"line\">if [[ $NAME = &quot;iTerm&quot; ]]; then</div><div class=\"line\">    FILE=`osascript -e &apos;tell application &quot;iTerm&quot; to activate&apos; -e &apos;tell application &quot;iTerm&quot; to set thefile to choose file with prompt &quot;Choose a file to send&quot;&apos; -e &quot;do shell script (\\&quot;echo \\&quot;&amp;(quoted form of POSIX path of thefile as Unicode text)&amp;\\&quot;\\&quot;)&quot;`</div><div class=\"line\">else</div><div class=\"line\">    FILE=`osascript -e &apos;tell application &quot;iTerm2&quot; to activate&apos; -e &apos;tell application &quot;iTerm2&quot; to set thefile to choose file with prompt &quot;Choose a file to send&quot;&apos; -e &quot;do shell script (\\&quot;echo \\&quot;&amp;(quoted form of POSIX path of thefile as Unicode text)&amp;\\&quot;\\&quot;)&quot;`</div><div class=\"line\">fi</div><div class=\"line\">if [[ $FILE = &quot;&quot; ]]; then</div><div class=\"line\">    echo Cancelled.</div><div class=\"line\">    # Send ZModem cancel</div><div class=\"line\">    echo -e \\\\x18\\\\x18\\\\x18\\\\x18\\\\x18</div><div class=\"line\">    sleep 1</div><div class=\"line\">    echo</div><div class=\"line\">    echo \\# Cancelled transfer</div><div class=\"line\">else</div><div class=\"line\">    /usr/local/bin/sz &quot;$FILE&quot; -e -b</div><div class=\"line\">    sleep 1</div><div class=\"line\">    echo</div><div class=\"line\">    echo \\# Received $FILE</div><div class=\"line\">fi</div></pre></td></tr></table></figure></p>\n<p>下载shell</p>\n<p><code>iterm2-recv-zmodem.sh</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">#!/bin/bash</div><div class=\"line\"># Author: Matt Mastracci (matthew@mastracci.com)</div><div class=\"line\"># AppleScript from http://stackoverflow.com/questions/4309087/cancel-button-on-osascript-in-a-bash-script</div><div class=\"line\"># licensed under cc-wiki with attribution required </div><div class=\"line\"># Remainder of script public domain</div><div class=\"line\"></div><div class=\"line\">osascript -e &apos;tell application &quot;iTerm2&quot; to version&apos; &gt; /dev/null 2&gt;&amp;1 &amp;&amp; NAME=iTerm2 || NAME=iTerm</div><div class=\"line\">if [[ $NAME = &quot;iTerm&quot; ]]; then</div><div class=\"line\">    FILE=`osascript -e &apos;tell application &quot;iTerm&quot; to activate&apos; -e &apos;tell application &quot;iTerm&quot; to set thefile to choose folder with prompt &quot;Choose a folder to place received files in&quot;&apos; -e &quot;do shell script (\\&quot;echo \\&quot;&amp;(quoted form of POSIX path of thefile as Unicode text)&amp;\\&quot;\\&quot;)&quot;`</div><div class=\"line\">else</div><div class=\"line\">    FILE=`osascript -e &apos;tell application &quot;iTerm2&quot; to activate&apos; -e &apos;tell application &quot;iTerm2&quot; to set thefile to choose folder with prompt &quot;Choose a folder to place received files in&quot;&apos; -e &quot;do shell script (\\&quot;echo \\&quot;&amp;(quoted form of POSIX path of thefile as Unicode text)&amp;\\&quot;\\&quot;)&quot;`</div><div class=\"line\">fi</div><div class=\"line\"></div><div class=\"line\">if [[ $FILE = &quot;&quot; ]]; then</div><div class=\"line\">    echo Cancelled.</div><div class=\"line\">    # Send ZModem cancel</div><div class=\"line\">    echo -e \\\\x18\\\\x18\\\\x18\\\\x18\\\\x18</div><div class=\"line\">    sleep 1</div><div class=\"line\">    echo</div><div class=\"line\">    echo \\# Cancelled transfer</div><div class=\"line\">else</div><div class=\"line\">    cd &quot;$FILE&quot;</div><div class=\"line\">    /usr/local/bin/rz -E -e -b</div><div class=\"line\">    sleep 1</div><div class=\"line\">    echo</div><div class=\"line\">    echo</div><div class=\"line\">    echo \\# Sent \\-\\&gt; $FILE</div><div class=\"line\">fi</div></pre></td></tr></table></figure>\n<h2 id=\"配置iterm2\"><a href=\"#配置iterm2\" class=\"headerlink\" title=\"配置iterm2\"></a>配置iterm2</h2><ul>\n<li>设置Iterm2的Tirgger特性，profiles-default-editProfiles-Advanced中的Tirgger</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">添加两条trigger，分别设置Regular expression，Action，Parameters，Instant如下：</div><div class=\"line\">    1.第一条</div><div class=\"line\">        Regular expression: rz waiting to receive.\\*\\*B0100</div><div class=\"line\">        Action: Run Silent Coprocess</div><div class=\"line\">        Parameters: /usr/local/bin/iterm2-send-zmodem.sh</div><div class=\"line\">        Instant: checked</div><div class=\"line\">    2.第二条</div><div class=\"line\">        Regular expression: \\*\\*B00000000000000</div><div class=\"line\">        Action: Run Silent Coprocess</div><div class=\"line\">        Parameters: /usr/local/bin/iterm2-recv-zmodem.sh</div><div class=\"line\">        Instant: checked</div></pre></td></tr></table></figure>\n<p><strong>备注</strong>:注意两个文件的权限</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>如何从linux服务下载/上传文件</p>\n<ul>\n<li>使用scp命令</li>\n<li>使用sz命令</li>\n</ul>\n<p>这里主要介绍使用sz命令下载文件</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><ul>\n<li>安装lrzsz <code>hobrew install llssz</code></li>\n<li>在本地编写shell用于接受sz命令下载下来的文件</li>\n</ul>\n<p>上传shell</p>\n<p><code>iterm2-send-zmodem.sh</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\">#!/bin/bash</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">#Author: Matt Mastracci (matthew@mastracci.com)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"># AppleScript from http://stackoverflow.com/questions/4309087/cancel-button-on-osascript-in-a-bash-script</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"># licensed under cc-wiki with attribution required</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"># Remainder of script public domain</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">osascript -e &apos;tell application &quot;iTerm2&quot; to version&apos; &gt; /dev/null 2&gt;&amp;1 &amp;&amp; NAME=iTerm2 || NAME=iTerm</div><div class=\"line\">if [[ $NAME = &quot;iTerm&quot; ]]; then</div><div class=\"line\">    FILE=`osascript -e &apos;tell application &quot;iTerm&quot; to activate&apos; -e &apos;tell application &quot;iTerm&quot; to set thefile to choose file with prompt &quot;Choose a file to send&quot;&apos; -e &quot;do shell script (\\&quot;echo \\&quot;&amp;(quoted form of POSIX path of thefile as Unicode text)&amp;\\&quot;\\&quot;)&quot;`</div><div class=\"line\">else</div><div class=\"line\">    FILE=`osascript -e &apos;tell application &quot;iTerm2&quot; to activate&apos; -e &apos;tell application &quot;iTerm2&quot; to set thefile to choose file with prompt &quot;Choose a file to send&quot;&apos; -e &quot;do shell script (\\&quot;echo \\&quot;&amp;(quoted form of POSIX path of thefile as Unicode text)&amp;\\&quot;\\&quot;)&quot;`</div><div class=\"line\">fi</div><div class=\"line\">if [[ $FILE = &quot;&quot; ]]; then</div><div class=\"line\">    echo Cancelled.</div><div class=\"line\">    # Send ZModem cancel</div><div class=\"line\">    echo -e \\\\x18\\\\x18\\\\x18\\\\x18\\\\x18</div><div class=\"line\">    sleep 1</div><div class=\"line\">    echo</div><div class=\"line\">    echo \\# Cancelled transfer</div><div class=\"line\">else</div><div class=\"line\">    /usr/local/bin/sz &quot;$FILE&quot; -e -b</div><div class=\"line\">    sleep 1</div><div class=\"line\">    echo</div><div class=\"line\">    echo \\# Received $FILE</div><div class=\"line\">fi</div></pre></td></tr></table></figure></p>\n<p>下载shell</p>\n<p><code>iterm2-recv-zmodem.sh</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">#!/bin/bash</div><div class=\"line\"># Author: Matt Mastracci (matthew@mastracci.com)</div><div class=\"line\"># AppleScript from http://stackoverflow.com/questions/4309087/cancel-button-on-osascript-in-a-bash-script</div><div class=\"line\"># licensed under cc-wiki with attribution required </div><div class=\"line\"># Remainder of script public domain</div><div class=\"line\"></div><div class=\"line\">osascript -e &apos;tell application &quot;iTerm2&quot; to version&apos; &gt; /dev/null 2&gt;&amp;1 &amp;&amp; NAME=iTerm2 || NAME=iTerm</div><div class=\"line\">if [[ $NAME = &quot;iTerm&quot; ]]; then</div><div class=\"line\">    FILE=`osascript -e &apos;tell application &quot;iTerm&quot; to activate&apos; -e &apos;tell application &quot;iTerm&quot; to set thefile to choose folder with prompt &quot;Choose a folder to place received files in&quot;&apos; -e &quot;do shell script (\\&quot;echo \\&quot;&amp;(quoted form of POSIX path of thefile as Unicode text)&amp;\\&quot;\\&quot;)&quot;`</div><div class=\"line\">else</div><div class=\"line\">    FILE=`osascript -e &apos;tell application &quot;iTerm2&quot; to activate&apos; -e &apos;tell application &quot;iTerm2&quot; to set thefile to choose folder with prompt &quot;Choose a folder to place received files in&quot;&apos; -e &quot;do shell script (\\&quot;echo \\&quot;&amp;(quoted form of POSIX path of thefile as Unicode text)&amp;\\&quot;\\&quot;)&quot;`</div><div class=\"line\">fi</div><div class=\"line\"></div><div class=\"line\">if [[ $FILE = &quot;&quot; ]]; then</div><div class=\"line\">    echo Cancelled.</div><div class=\"line\">    # Send ZModem cancel</div><div class=\"line\">    echo -e \\\\x18\\\\x18\\\\x18\\\\x18\\\\x18</div><div class=\"line\">    sleep 1</div><div class=\"line\">    echo</div><div class=\"line\">    echo \\# Cancelled transfer</div><div class=\"line\">else</div><div class=\"line\">    cd &quot;$FILE&quot;</div><div class=\"line\">    /usr/local/bin/rz -E -e -b</div><div class=\"line\">    sleep 1</div><div class=\"line\">    echo</div><div class=\"line\">    echo</div><div class=\"line\">    echo \\# Sent \\-\\&gt; $FILE</div><div class=\"line\">fi</div></pre></td></tr></table></figure>\n<h2 id=\"配置iterm2\"><a href=\"#配置iterm2\" class=\"headerlink\" title=\"配置iterm2\"></a>配置iterm2</h2><ul>\n<li>设置Iterm2的Tirgger特性，profiles-default-editProfiles-Advanced中的Tirgger</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">添加两条trigger，分别设置Regular expression，Action，Parameters，Instant如下：</div><div class=\"line\">    1.第一条</div><div class=\"line\">        Regular expression: rz waiting to receive.\\*\\*B0100</div><div class=\"line\">        Action: Run Silent Coprocess</div><div class=\"line\">        Parameters: /usr/local/bin/iterm2-send-zmodem.sh</div><div class=\"line\">        Instant: checked</div><div class=\"line\">    2.第二条</div><div class=\"line\">        Regular expression: \\*\\*B00000000000000</div><div class=\"line\">        Action: Run Silent Coprocess</div><div class=\"line\">        Parameters: /usr/local/bin/iterm2-recv-zmodem.sh</div><div class=\"line\">        Instant: checked</div></pre></td></tr></table></figure>\n<p><strong>备注</strong>:注意两个文件的权限</p>\n"},{"title":"微服务数据一致性和服务可靠性","grammar_cjkRuby":true,"_content":"\n![image](/photo/img/2018-06-19/servicePic1.png)\n\n  \n  ## 存在问题\n  我们的保证金服务现有结构是这个样子。\n在 1、2、3、4、5、6 各个阶段都会存在超时和异常问题，当负载少时，我们还可以手动人工处理，但是当数据量大的时候，问题或多的令人发指，沉浸于洗数据，无法自拔。。\n超时存在问题：\n1.当1、2、3 步骤超时时，下游服务可以忽略，当做执行失败，重试。\n2.当在环节4、5、6超时时，对于下游服务是也是执行失败，但是还可以重试么？\n\n\n## 如何提高服务可靠性\n对于上游服务，如何保证对下游提供可靠的服务。\n ### 补偿机制\n ![image](/photo/img/2018-06-19/servicePic5.png)\n 在服务间的调用失败时，可以记录失败调用，如队列，消费重试。但是前提一定是接口幂等。\n 但是这样并不能解决根本性问题，如果我们在调用保证金冻结服务时，失败此时我们冻结时报操作入队列，让队列异步消费，如果此时要解冻保证金，就会出现业务异常。\n \n **所以**补偿机制建议使用在 `不可避免的业务异常情况下使用`，我们应该尽可能的优化技术方案，来保证数据一致性，最后再采用补偿机制。\n ### 两段提交协议（2pc）\n![image](/photo/img/2018-06-19/servicePic4.png)\n\npreOperation 执行请求，在调用微服务前，执行预操作成功则表示此次操作可行。\n如果commit失败该如何处理？重新preOperetion嘛？如果接口幂等是否可以重复，commit？如何保证避免重复提交？\n在preOperation时，返回唯一操作ID，业务逻辑每个操作对应一个操作ID，commit失败就重试，当然前提是我们的上有服务接口幂等。\n\n![image](/photo/img/2018-06-19/servicePic3.png)\n即使是这样也会存在问题，如果保证金预操作成功，但是执行一直失败呢？我们必须提供回滚机制。\n![image](/photo/img/2018-06-19/servicePic2.png)\n1. 大量同步RPC依赖，如何保证自身服务可靠性？\n \t服务之间在调用的时候，会存在大量异常、超时。我该如何处理，认为这次是失败的？还是成功的？如果依赖的服务返回成功，才算成功的话，我改如何保证服务可靠性，该如何对我的下游服务提供可靠的服务。\n2. 调用依赖服务失败，如何降级处理？\n\t 在服务调用失败的时候，我的上游出错了，我该如何降级处理，我该重试？还是直接跳过，跳过后是否会造成微服务之间数据一致性问题。如果重试是否会造成重复提交，接口是否幂等？\n3. 是否还欠缺回滚机制？ \n","source":"_posts/微服务数据一致性和服务可靠性.md","raw":"---\ntitle: 微服务数据一致性和服务可靠性\ntags: 分布式,事务\ngrammar_cjkRuby: true\n---\n\n![image](/photo/img/2018-06-19/servicePic1.png)\n\n  \n  ## 存在问题\n  我们的保证金服务现有结构是这个样子。\n在 1、2、3、4、5、6 各个阶段都会存在超时和异常问题，当负载少时，我们还可以手动人工处理，但是当数据量大的时候，问题或多的令人发指，沉浸于洗数据，无法自拔。。\n超时存在问题：\n1.当1、2、3 步骤超时时，下游服务可以忽略，当做执行失败，重试。\n2.当在环节4、5、6超时时，对于下游服务是也是执行失败，但是还可以重试么？\n\n\n## 如何提高服务可靠性\n对于上游服务，如何保证对下游提供可靠的服务。\n ### 补偿机制\n ![image](/photo/img/2018-06-19/servicePic5.png)\n 在服务间的调用失败时，可以记录失败调用，如队列，消费重试。但是前提一定是接口幂等。\n 但是这样并不能解决根本性问题，如果我们在调用保证金冻结服务时，失败此时我们冻结时报操作入队列，让队列异步消费，如果此时要解冻保证金，就会出现业务异常。\n \n **所以**补偿机制建议使用在 `不可避免的业务异常情况下使用`，我们应该尽可能的优化技术方案，来保证数据一致性，最后再采用补偿机制。\n ### 两段提交协议（2pc）\n![image](/photo/img/2018-06-19/servicePic4.png)\n\npreOperation 执行请求，在调用微服务前，执行预操作成功则表示此次操作可行。\n如果commit失败该如何处理？重新preOperetion嘛？如果接口幂等是否可以重复，commit？如何保证避免重复提交？\n在preOperation时，返回唯一操作ID，业务逻辑每个操作对应一个操作ID，commit失败就重试，当然前提是我们的上有服务接口幂等。\n\n![image](/photo/img/2018-06-19/servicePic3.png)\n即使是这样也会存在问题，如果保证金预操作成功，但是执行一直失败呢？我们必须提供回滚机制。\n![image](/photo/img/2018-06-19/servicePic2.png)\n1. 大量同步RPC依赖，如何保证自身服务可靠性？\n \t服务之间在调用的时候，会存在大量异常、超时。我该如何处理，认为这次是失败的？还是成功的？如果依赖的服务返回成功，才算成功的话，我改如何保证服务可靠性，该如何对我的下游服务提供可靠的服务。\n2. 调用依赖服务失败，如何降级处理？\n\t 在服务调用失败的时候，我的上游出错了，我该如何降级处理，我该重试？还是直接跳过，跳过后是否会造成微服务之间数据一致性问题。如果重试是否会造成重复提交，接口是否幂等？\n3. 是否还欠缺回滚机制？ \n","slug":"微服务数据一致性和服务可靠性","published":1,"date":"2018-07-12T13:54:30.353Z","updated":"2018-07-12T13:54:30.353Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqavhgdz0012zqjfuldki3eh","content":"<p><img src=\"/photo/img/2018-06-19/servicePic1.png\" alt=\"image\"></p>\n<h2 id=\"存在问题\"><a href=\"#存在问题\" class=\"headerlink\" title=\"存在问题\"></a>存在问题</h2><p>  我们的保证金服务现有结构是这个样子。<br>在 1、2、3、4、5、6 各个阶段都会存在超时和异常问题，当负载少时，我们还可以手动人工处理，但是当数据量大的时候，问题或多的令人发指，沉浸于洗数据，无法自拔。。<br>超时存在问题：<br>1.当1、2、3 步骤超时时，下游服务可以忽略，当做执行失败，重试。<br>2.当在环节4、5、6超时时，对于下游服务是也是执行失败，但是还可以重试么？</p>\n<h2 id=\"如何提高服务可靠性\"><a href=\"#如何提高服务可靠性\" class=\"headerlink\" title=\"如何提高服务可靠性\"></a>如何提高服务可靠性</h2><p>对于上游服务，如何保证对下游提供可靠的服务。</p>\n<h3 id=\"补偿机制\"><a href=\"#补偿机制\" class=\"headerlink\" title=\"补偿机制\"></a>补偿机制</h3><p> <img src=\"/photo/img/2018-06-19/servicePic5.png\" alt=\"image\"><br> 在服务间的调用失败时，可以记录失败调用，如队列，消费重试。但是前提一定是接口幂等。<br> 但是这样并不能解决根本性问题，如果我们在调用保证金冻结服务时，失败此时我们冻结时报操作入队列，让队列异步消费，如果此时要解冻保证金，就会出现业务异常。</p>\n<p> <strong>所以</strong>补偿机制建议使用在 <code>不可避免的业务异常情况下使用</code>，我们应该尽可能的优化技术方案，来保证数据一致性，最后再采用补偿机制。</p>\n<h3 id=\"两段提交协议（2pc）\"><a href=\"#两段提交协议（2pc）\" class=\"headerlink\" title=\"两段提交协议（2pc）\"></a>两段提交协议（2pc）</h3><p><img src=\"/photo/img/2018-06-19/servicePic4.png\" alt=\"image\"></p>\n<p>preOperation 执行请求，在调用微服务前，执行预操作成功则表示此次操作可行。<br>如果commit失败该如何处理？重新preOperetion嘛？如果接口幂等是否可以重复，commit？如何保证避免重复提交？<br>在preOperation时，返回唯一操作ID，业务逻辑每个操作对应一个操作ID，commit失败就重试，当然前提是我们的上有服务接口幂等。</p>\n<p><img src=\"/photo/img/2018-06-19/servicePic3.png\" alt=\"image\"><br>即使是这样也会存在问题，如果保证金预操作成功，但是执行一直失败呢？我们必须提供回滚机制。<br><img src=\"/photo/img/2018-06-19/servicePic2.png\" alt=\"image\"></p>\n<ol>\n<li>大量同步RPC依赖，如何保证自身服务可靠性？<br>  服务之间在调用的时候，会存在大量异常、超时。我该如何处理，认为这次是失败的？还是成功的？如果依赖的服务返回成功，才算成功的话，我改如何保证服务可靠性，该如何对我的下游服务提供可靠的服务。</li>\n<li>调用依赖服务失败，如何降级处理？<br>  在服务调用失败的时候，我的上游出错了，我该如何降级处理，我该重试？还是直接跳过，跳过后是否会造成微服务之间数据一致性问题。如果重试是否会造成重复提交，接口是否幂等？</li>\n<li>是否还欠缺回滚机制？ </li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"/photo/img/2018-06-19/servicePic1.png\" alt=\"image\"></p>\n<h2 id=\"存在问题\"><a href=\"#存在问题\" class=\"headerlink\" title=\"存在问题\"></a>存在问题</h2><p>  我们的保证金服务现有结构是这个样子。<br>在 1、2、3、4、5、6 各个阶段都会存在超时和异常问题，当负载少时，我们还可以手动人工处理，但是当数据量大的时候，问题或多的令人发指，沉浸于洗数据，无法自拔。。<br>超时存在问题：<br>1.当1、2、3 步骤超时时，下游服务可以忽略，当做执行失败，重试。<br>2.当在环节4、5、6超时时，对于下游服务是也是执行失败，但是还可以重试么？</p>\n<h2 id=\"如何提高服务可靠性\"><a href=\"#如何提高服务可靠性\" class=\"headerlink\" title=\"如何提高服务可靠性\"></a>如何提高服务可靠性</h2><p>对于上游服务，如何保证对下游提供可靠的服务。</p>\n<h3 id=\"补偿机制\"><a href=\"#补偿机制\" class=\"headerlink\" title=\"补偿机制\"></a>补偿机制</h3><p> <img src=\"/photo/img/2018-06-19/servicePic5.png\" alt=\"image\"><br> 在服务间的调用失败时，可以记录失败调用，如队列，消费重试。但是前提一定是接口幂等。<br> 但是这样并不能解决根本性问题，如果我们在调用保证金冻结服务时，失败此时我们冻结时报操作入队列，让队列异步消费，如果此时要解冻保证金，就会出现业务异常。</p>\n<p> <strong>所以</strong>补偿机制建议使用在 <code>不可避免的业务异常情况下使用</code>，我们应该尽可能的优化技术方案，来保证数据一致性，最后再采用补偿机制。</p>\n<h3 id=\"两段提交协议（2pc）\"><a href=\"#两段提交协议（2pc）\" class=\"headerlink\" title=\"两段提交协议（2pc）\"></a>两段提交协议（2pc）</h3><p><img src=\"/photo/img/2018-06-19/servicePic4.png\" alt=\"image\"></p>\n<p>preOperation 执行请求，在调用微服务前，执行预操作成功则表示此次操作可行。<br>如果commit失败该如何处理？重新preOperetion嘛？如果接口幂等是否可以重复，commit？如何保证避免重复提交？<br>在preOperation时，返回唯一操作ID，业务逻辑每个操作对应一个操作ID，commit失败就重试，当然前提是我们的上有服务接口幂等。</p>\n<p><img src=\"/photo/img/2018-06-19/servicePic3.png\" alt=\"image\"><br>即使是这样也会存在问题，如果保证金预操作成功，但是执行一直失败呢？我们必须提供回滚机制。<br><img src=\"/photo/img/2018-06-19/servicePic2.png\" alt=\"image\"></p>\n<ol>\n<li>大量同步RPC依赖，如何保证自身服务可靠性？<br>  服务之间在调用的时候，会存在大量异常、超时。我该如何处理，认为这次是失败的？还是成功的？如果依赖的服务返回成功，才算成功的话，我改如何保证服务可靠性，该如何对我的下游服务提供可靠的服务。</li>\n<li>调用依赖服务失败，如何降级处理？<br>  在服务调用失败的时候，我的上游出错了，我该如何降级处理，我该重试？还是直接跳过，跳过后是否会造成微服务之间数据一致性问题。如果重试是否会造成重复提交，接口是否幂等？</li>\n<li>是否还欠缺回滚机制？ </li>\n</ol>\n"},{"title":"如何建立一个composer私有包","date":"2018-09-28T09:11:00.000Z","_content":"\n\n最近发现分布式锁在很多项目都有所用到,所以想把之前完成的代码封装成pear包,供大家使用。\n但是发现自己对composer并不是很熟悉,所以学习一番,在此记录以防自己忘记。\n\n\n\n## 新建仓库\n\n$ git clone git@gitlab.renrenche.com:web/jugg.git\n$ cd jugg\n\n\n## conmposer 初始化\n\ncomposer init \n\n```\n//包名\nPackage name (<vendor>/<name>) [lijian/test_composer]: jugg/jugg\n//描述\nDescription []: 基于redis的分布式锁\n//作者\nAuthor [, n to skip]: Maxie lj <xiaolijian110@163.com>\n//最小稳定版本\nMinimum Stability []: dev\n//遵循协议\nLicense []: MIT\n\n//依赖\nWould you like to define your dependencies (require) interactively [yes]? yes\n\nSearch for a package: php\n\nEnter the version constraint to require (or leave blank to use the latest version):\nUsing version ^7.0 for php\n```\n\n\n生成composer.json文件\n\n```\n{\n    \"name\": \"jugg/jugg\",\n    \"description\": \"基于redis的分布式锁\",\n    \"type\": \"library\",\n    \"require\": {\n        \"php\": \"^7.0\"\n    },\n    \"require-dev\": {\n        \"php\": \"7\"\n    },\n    \"license\": \"MIT\",\n    \"authors\": [\n        {\n            \"name\": \"Maxie lj\",\n            \"email\": \"xiaolijian110@163.com\"\n        }\n    ],\n    \"minimum-stability\": \"dev\"\n}\n```\n\n## 生成自动加载（psr-4）\n\n在composer.json 文件里添加\n```\n{\n    \"name\": \"jugg/jugg\",\n    \"description\": \"基于redis的分布式锁\",\n    \"type\": \"library\",\n    \"license\": \"MIT\",\n    \"authors\": [\n        {\n            \"name\": \"Maxie lj\",\n            \"email\": \"xiaolijian110@163.com\"\n        }\n    ],\n    \"autoload\": {\n    \"psr-4\": {\n      \"Jugg\\\\\": \"jugg\"\n    }\n    },\n    \"minimum-stability\": \"dev\"\n}\n\n```\n执行`composer install`\n\n就会生成一个自动加载文件\n\n![image](/photo/img/创建一个composer包/自动加载目录.png)\n\n然后我们就可以按照psr-4规范开发我们pear包了。\n\n\n\n## 测试\n\n我们可以在测试文件里引入autoload.php文件,这样就实现了自动加载。\n\n```php\nrequire './vendor/autoload.php';\n```\n\n这样就可以正常的测试了\n\n\n## 上传代码到gitlab或者github\n\n当我们开完的时候,需要将我们的代码上传到远程代码库。\n\n需要注意的事 一定不要讲.git文件上传。\n\n\n## 其他项目引入\n\n因为没有上传到pagelist,所以我们暂时是公司私有包。\n\n如果需要再项目里引入私有包,需要在项目的composer.json文件里添加。\n\n```\n\"jugg\": {\n        \"type\":\"package\",\n        \"package\": {\n          \"name\": \"jugg\",\n          \"version\": \"v1.1\",\n          \"source\": {\n            \"type\": \"git\",\n            \"url\": \"git@gitlab.renrenche.com:web/jugg.git\",\n            \"reference\": \"master\"\n          },\n          \"autoload\": {\n            \"psr-4\": {\n              \"Jugg\\\\\": \"jugg\"\n            }\n          }\n        }\n      }\n```\n\n完整文件:\n\n```\n{\n    \"name\": \"laravel/lumen\",\n    \"description\": \"The Laravel Lumen Framework.\",\n    \"keywords\": [\n        \"framework\",\n        \"laravel\",\n        \"lumen\"\n    ],\n    \"license\": \"MIT\",\n    \"type\": \"project\",\n    \"repositories\": {\n      \"packagist\": {\n        \"type\": \"composer\",\n        \"url\": \"https://packagist.phpcomposer.com\"\n      },\n        \"0\": {\n            \"type\": \"package\",\n            \"package\": {\n                \"name\": \"sdk/clusterproxy\",\n                \"version\": \"1.0.3\",\n                \"source\": {\n                    \"type\": \"git\",\n                    \"url\": \"git@gitlab.renrenche.com:sdk/clusterproxy.git\",\n                    \"reference\": \"master\"\n                },\n                \"autoload\": {\n                    \"psr-4\": {\n                        \"Cluster\\\\\": \"src/Cluster\"\n                    }\n                }\n            }\n        },\n      \"1\": {\n        \"type\": \"package\",\n        \"package\": {\n          \"name\": \"sdk/dingtalk-alarm-php-sdk\",\n          \"version\": \"1.0\",\n          \"source\": {\n            \"type\": \"git\",\n            \"url\": \"git@gitlab.renrenche.com:sdk/dingtalk-alarm-php-sdk.git\",\n            \"reference\": \"master\"\n          },\n          \"autoload\": {\n            \"psr-4\": {\n              \"Rrc\\\\\": \"src/Rrc/\"\n            }\n          }\n        }\n      },\n      \"2\": {\n        \"type\":\"package\",\n        \"package\": {\n          \"name\": \"sdk/prometheus-php-sdk\",\n          \"version\": \"1.0\",\n          \"source\": {\n            \"type\": \"git\",\n            \"url\": \"git@gitlab.renrenche.com:sdk/prometheus-php-sdk.git\",\n            \"reference\": \"master\"\n          },\n          \"autoload\": {\n            \"psr-4\": {\n              \"Rrc\\\\\": \"src/Rrc/\"\n            }\n          }\n        }\n      },\n      \"jugg\": {\n        \"type\":\"package\",\n        \"package\": {\n          \"name\": \"jugg\",\n          \"version\": \"v1.1\",\n          \"source\": {\n            \"type\": \"git\",\n            \"url\": \"git@gitlab.renrenche.com:web/jugg.git\",\n            \"reference\": \"master\"\n          },\n          \"autoload\": {\n            \"psr-4\": {\n              \"Jugg\\\\\": \"jugg\"\n            }\n          }\n        }\n      }\n    },\n    \"require\": {\n        \"php\": \">=7.0\",\n        \"laravel/lumen-framework\": \"5.5.*\",\n        \"vlucas/phpdotenv\": \"~2.2\",\n        \"guzzlehttp/guzzle\": \"^6.2\",\n        \"sdk/clusterproxy\": \"^1.0\",\n        \"illuminate/redis\": \"^5.3\",\n        \"peixinchen/mns\": \"^1.0\",\n        \"mockery/mockery\": \"^0.9.5\",\n        \"firebase/php-jwt\": \"^4.0\",\n        \"sdk/dingtalk-alarm-php-sdk\": \"^1.0\",\n        \"sdk/prometheus-php-sdk\": \"^1.0\",\n        \"predis/predis\": \"^1.1\",\n        \"solarium/solarium\": \"^3.8\",\n        \"mongodb/mongodb\": \"^1.3\",\n        \"jugg\": \"^1.0\"\n    },\n    \"require-dev\": {\n        \"fzaninotto/faker\": \"~1.4\",\n        \"phpunit/phpunit\": \"~6.0\",\n        \"mockery/mockery\": \"~0.9\",\n        \"phpstan/phpstan\": \"^0.9.2\"\n    },\n    \"autoload\": {\n        \"psr-4\": {\n            \"Rrc\\\\\": \"./\"\n        }\n    },\n    \"autoload-dev\": {\n        \"classmap\": [\n            \"tests/\",\n            \"database/\"\n        ]\n    },\n    \"scripts\": {\n        \"post-root-package-install\": [\n            \"php -r \\\"copy('.env.example', '.env');\\\"\"\n        ]\n    },\n    \"minimum-stability\": \"dev\",\n    \"prefer-stable\": true,\n    \"config\": {\n        \"optimize-autoloader\": true\n    }\n}\n\n```\n\n\n然后执行`composer require jugg<包名>` 就可以引入到项目里了。 ","source":"_posts/如何建立一个composer私有包.md","raw":"---\ntitle: 如何建立一个composer私有包\ndate: 2018-09-28 17:11:00\ntags:\n---\n\n\n最近发现分布式锁在很多项目都有所用到,所以想把之前完成的代码封装成pear包,供大家使用。\n但是发现自己对composer并不是很熟悉,所以学习一番,在此记录以防自己忘记。\n\n\n\n## 新建仓库\n\n$ git clone git@gitlab.renrenche.com:web/jugg.git\n$ cd jugg\n\n\n## conmposer 初始化\n\ncomposer init \n\n```\n//包名\nPackage name (<vendor>/<name>) [lijian/test_composer]: jugg/jugg\n//描述\nDescription []: 基于redis的分布式锁\n//作者\nAuthor [, n to skip]: Maxie lj <xiaolijian110@163.com>\n//最小稳定版本\nMinimum Stability []: dev\n//遵循协议\nLicense []: MIT\n\n//依赖\nWould you like to define your dependencies (require) interactively [yes]? yes\n\nSearch for a package: php\n\nEnter the version constraint to require (or leave blank to use the latest version):\nUsing version ^7.0 for php\n```\n\n\n生成composer.json文件\n\n```\n{\n    \"name\": \"jugg/jugg\",\n    \"description\": \"基于redis的分布式锁\",\n    \"type\": \"library\",\n    \"require\": {\n        \"php\": \"^7.0\"\n    },\n    \"require-dev\": {\n        \"php\": \"7\"\n    },\n    \"license\": \"MIT\",\n    \"authors\": [\n        {\n            \"name\": \"Maxie lj\",\n            \"email\": \"xiaolijian110@163.com\"\n        }\n    ],\n    \"minimum-stability\": \"dev\"\n}\n```\n\n## 生成自动加载（psr-4）\n\n在composer.json 文件里添加\n```\n{\n    \"name\": \"jugg/jugg\",\n    \"description\": \"基于redis的分布式锁\",\n    \"type\": \"library\",\n    \"license\": \"MIT\",\n    \"authors\": [\n        {\n            \"name\": \"Maxie lj\",\n            \"email\": \"xiaolijian110@163.com\"\n        }\n    ],\n    \"autoload\": {\n    \"psr-4\": {\n      \"Jugg\\\\\": \"jugg\"\n    }\n    },\n    \"minimum-stability\": \"dev\"\n}\n\n```\n执行`composer install`\n\n就会生成一个自动加载文件\n\n![image](/photo/img/创建一个composer包/自动加载目录.png)\n\n然后我们就可以按照psr-4规范开发我们pear包了。\n\n\n\n## 测试\n\n我们可以在测试文件里引入autoload.php文件,这样就实现了自动加载。\n\n```php\nrequire './vendor/autoload.php';\n```\n\n这样就可以正常的测试了\n\n\n## 上传代码到gitlab或者github\n\n当我们开完的时候,需要将我们的代码上传到远程代码库。\n\n需要注意的事 一定不要讲.git文件上传。\n\n\n## 其他项目引入\n\n因为没有上传到pagelist,所以我们暂时是公司私有包。\n\n如果需要再项目里引入私有包,需要在项目的composer.json文件里添加。\n\n```\n\"jugg\": {\n        \"type\":\"package\",\n        \"package\": {\n          \"name\": \"jugg\",\n          \"version\": \"v1.1\",\n          \"source\": {\n            \"type\": \"git\",\n            \"url\": \"git@gitlab.renrenche.com:web/jugg.git\",\n            \"reference\": \"master\"\n          },\n          \"autoload\": {\n            \"psr-4\": {\n              \"Jugg\\\\\": \"jugg\"\n            }\n          }\n        }\n      }\n```\n\n完整文件:\n\n```\n{\n    \"name\": \"laravel/lumen\",\n    \"description\": \"The Laravel Lumen Framework.\",\n    \"keywords\": [\n        \"framework\",\n        \"laravel\",\n        \"lumen\"\n    ],\n    \"license\": \"MIT\",\n    \"type\": \"project\",\n    \"repositories\": {\n      \"packagist\": {\n        \"type\": \"composer\",\n        \"url\": \"https://packagist.phpcomposer.com\"\n      },\n        \"0\": {\n            \"type\": \"package\",\n            \"package\": {\n                \"name\": \"sdk/clusterproxy\",\n                \"version\": \"1.0.3\",\n                \"source\": {\n                    \"type\": \"git\",\n                    \"url\": \"git@gitlab.renrenche.com:sdk/clusterproxy.git\",\n                    \"reference\": \"master\"\n                },\n                \"autoload\": {\n                    \"psr-4\": {\n                        \"Cluster\\\\\": \"src/Cluster\"\n                    }\n                }\n            }\n        },\n      \"1\": {\n        \"type\": \"package\",\n        \"package\": {\n          \"name\": \"sdk/dingtalk-alarm-php-sdk\",\n          \"version\": \"1.0\",\n          \"source\": {\n            \"type\": \"git\",\n            \"url\": \"git@gitlab.renrenche.com:sdk/dingtalk-alarm-php-sdk.git\",\n            \"reference\": \"master\"\n          },\n          \"autoload\": {\n            \"psr-4\": {\n              \"Rrc\\\\\": \"src/Rrc/\"\n            }\n          }\n        }\n      },\n      \"2\": {\n        \"type\":\"package\",\n        \"package\": {\n          \"name\": \"sdk/prometheus-php-sdk\",\n          \"version\": \"1.0\",\n          \"source\": {\n            \"type\": \"git\",\n            \"url\": \"git@gitlab.renrenche.com:sdk/prometheus-php-sdk.git\",\n            \"reference\": \"master\"\n          },\n          \"autoload\": {\n            \"psr-4\": {\n              \"Rrc\\\\\": \"src/Rrc/\"\n            }\n          }\n        }\n      },\n      \"jugg\": {\n        \"type\":\"package\",\n        \"package\": {\n          \"name\": \"jugg\",\n          \"version\": \"v1.1\",\n          \"source\": {\n            \"type\": \"git\",\n            \"url\": \"git@gitlab.renrenche.com:web/jugg.git\",\n            \"reference\": \"master\"\n          },\n          \"autoload\": {\n            \"psr-4\": {\n              \"Jugg\\\\\": \"jugg\"\n            }\n          }\n        }\n      }\n    },\n    \"require\": {\n        \"php\": \">=7.0\",\n        \"laravel/lumen-framework\": \"5.5.*\",\n        \"vlucas/phpdotenv\": \"~2.2\",\n        \"guzzlehttp/guzzle\": \"^6.2\",\n        \"sdk/clusterproxy\": \"^1.0\",\n        \"illuminate/redis\": \"^5.3\",\n        \"peixinchen/mns\": \"^1.0\",\n        \"mockery/mockery\": \"^0.9.5\",\n        \"firebase/php-jwt\": \"^4.0\",\n        \"sdk/dingtalk-alarm-php-sdk\": \"^1.0\",\n        \"sdk/prometheus-php-sdk\": \"^1.0\",\n        \"predis/predis\": \"^1.1\",\n        \"solarium/solarium\": \"^3.8\",\n        \"mongodb/mongodb\": \"^1.3\",\n        \"jugg\": \"^1.0\"\n    },\n    \"require-dev\": {\n        \"fzaninotto/faker\": \"~1.4\",\n        \"phpunit/phpunit\": \"~6.0\",\n        \"mockery/mockery\": \"~0.9\",\n        \"phpstan/phpstan\": \"^0.9.2\"\n    },\n    \"autoload\": {\n        \"psr-4\": {\n            \"Rrc\\\\\": \"./\"\n        }\n    },\n    \"autoload-dev\": {\n        \"classmap\": [\n            \"tests/\",\n            \"database/\"\n        ]\n    },\n    \"scripts\": {\n        \"post-root-package-install\": [\n            \"php -r \\\"copy('.env.example', '.env');\\\"\"\n        ]\n    },\n    \"minimum-stability\": \"dev\",\n    \"prefer-stable\": true,\n    \"config\": {\n        \"optimize-autoloader\": true\n    }\n}\n\n```\n\n\n然后执行`composer require jugg<包名>` 就可以引入到项目里了。 ","slug":"如何建立一个composer私有包","published":1,"updated":"2018-10-16T12:05:39.870Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqavhge00013zqjfokgjohc8","content":"<p>最近发现分布式锁在很多项目都有所用到,所以想把之前完成的代码封装成pear包,供大家使用。<br>但是发现自己对composer并不是很熟悉,所以学习一番,在此记录以防自己忘记。</p>\n<h2 id=\"新建仓库\"><a href=\"#新建仓库\" class=\"headerlink\" title=\"新建仓库\"></a>新建仓库</h2><p>$ git clone git@gitlab.renrenche.com:web/jugg.git<br>$ cd jugg</p>\n<h2 id=\"conmposer-初始化\"><a href=\"#conmposer-初始化\" class=\"headerlink\" title=\"conmposer 初始化\"></a>conmposer 初始化</h2><p>composer init </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">//包名</div><div class=\"line\">Package name (&lt;vendor&gt;/&lt;name&gt;) [lijian/test_composer]: jugg/jugg</div><div class=\"line\">//描述</div><div class=\"line\">Description []: 基于redis的分布式锁</div><div class=\"line\">//作者</div><div class=\"line\">Author [, n to skip]: Maxie lj &lt;xiaolijian110@163.com&gt;</div><div class=\"line\">//最小稳定版本</div><div class=\"line\">Minimum Stability []: dev</div><div class=\"line\">//遵循协议</div><div class=\"line\">License []: MIT</div><div class=\"line\"></div><div class=\"line\">//依赖</div><div class=\"line\">Would you like to define your dependencies (require) interactively [yes]? yes</div><div class=\"line\"></div><div class=\"line\">Search for a package: php</div><div class=\"line\"></div><div class=\"line\">Enter the version constraint to require (or leave blank to use the latest version):</div><div class=\"line\">Using version ^7.0 for php</div></pre></td></tr></table></figure>\n<p>生成composer.json文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    &quot;name&quot;: &quot;jugg/jugg&quot;,</div><div class=\"line\">    &quot;description&quot;: &quot;基于redis的分布式锁&quot;,</div><div class=\"line\">    &quot;type&quot;: &quot;library&quot;,</div><div class=\"line\">    &quot;require&quot;: &#123;</div><div class=\"line\">        &quot;php&quot;: &quot;^7.0&quot;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    &quot;require-dev&quot;: &#123;</div><div class=\"line\">        &quot;php&quot;: &quot;7&quot;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    &quot;license&quot;: &quot;MIT&quot;,</div><div class=\"line\">    &quot;authors&quot;: [</div><div class=\"line\">        &#123;</div><div class=\"line\">            &quot;name&quot;: &quot;Maxie lj&quot;,</div><div class=\"line\">            &quot;email&quot;: &quot;xiaolijian110@163.com&quot;</div><div class=\"line\">        &#125;</div><div class=\"line\">    ],</div><div class=\"line\">    &quot;minimum-stability&quot;: &quot;dev&quot;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"生成自动加载（psr-4）\"><a href=\"#生成自动加载（psr-4）\" class=\"headerlink\" title=\"生成自动加载（psr-4）\"></a>生成自动加载（psr-4）</h2><p>在composer.json 文件里添加<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    &quot;name&quot;: &quot;jugg/jugg&quot;,</div><div class=\"line\">    &quot;description&quot;: &quot;基于redis的分布式锁&quot;,</div><div class=\"line\">    &quot;type&quot;: &quot;library&quot;,</div><div class=\"line\">    &quot;license&quot;: &quot;MIT&quot;,</div><div class=\"line\">    &quot;authors&quot;: [</div><div class=\"line\">        &#123;</div><div class=\"line\">            &quot;name&quot;: &quot;Maxie lj&quot;,</div><div class=\"line\">            &quot;email&quot;: &quot;xiaolijian110@163.com&quot;</div><div class=\"line\">        &#125;</div><div class=\"line\">    ],</div><div class=\"line\">    &quot;autoload&quot;: &#123;</div><div class=\"line\">    &quot;psr-4&quot;: &#123;</div><div class=\"line\">      &quot;Jugg\\\\&quot;: &quot;jugg&quot;</div><div class=\"line\">    &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    &quot;minimum-stability&quot;: &quot;dev&quot;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>执行<code>composer install</code></p>\n<p>就会生成一个自动加载文件</p>\n<p><img src=\"/photo/img/创建一个composer包/自动加载目录.png\" alt=\"image\"></p>\n<p>然后我们就可以按照psr-4规范开发我们pear包了。</p>\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><p>我们可以在测试文件里引入autoload.php文件,这样就实现了自动加载。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">require</span> <span class=\"string\">'./vendor/autoload.php'</span>;</div></pre></td></tr></table></figure>\n<p>这样就可以正常的测试了</p>\n<h2 id=\"上传代码到gitlab或者github\"><a href=\"#上传代码到gitlab或者github\" class=\"headerlink\" title=\"上传代码到gitlab或者github\"></a>上传代码到gitlab或者github</h2><p>当我们开完的时候,需要将我们的代码上传到远程代码库。</p>\n<p>需要注意的事 一定不要讲.git文件上传。</p>\n<h2 id=\"其他项目引入\"><a href=\"#其他项目引入\" class=\"headerlink\" title=\"其他项目引入\"></a>其他项目引入</h2><p>因为没有上传到pagelist,所以我们暂时是公司私有包。</p>\n<p>如果需要再项目里引入私有包,需要在项目的composer.json文件里添加。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">&quot;jugg&quot;: &#123;</div><div class=\"line\">        &quot;type&quot;:&quot;package&quot;,</div><div class=\"line\">        &quot;package&quot;: &#123;</div><div class=\"line\">          &quot;name&quot;: &quot;jugg&quot;,</div><div class=\"line\">          &quot;version&quot;: &quot;v1.1&quot;,</div><div class=\"line\">          &quot;source&quot;: &#123;</div><div class=\"line\">            &quot;type&quot;: &quot;git&quot;,</div><div class=\"line\">            &quot;url&quot;: &quot;git@gitlab.renrenche.com:web/jugg.git&quot;,</div><div class=\"line\">            &quot;reference&quot;: &quot;master&quot;</div><div class=\"line\">          &#125;,</div><div class=\"line\">          &quot;autoload&quot;: &#123;</div><div class=\"line\">            &quot;psr-4&quot;: &#123;</div><div class=\"line\">              &quot;Jugg\\\\&quot;: &quot;jugg&quot;</div><div class=\"line\">            &#125;</div><div class=\"line\">          &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div></pre></td></tr></table></figure>\n<p>完整文件:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    &quot;name&quot;: &quot;laravel/lumen&quot;,</div><div class=\"line\">    &quot;description&quot;: &quot;The Laravel Lumen Framework.&quot;,</div><div class=\"line\">    &quot;keywords&quot;: [</div><div class=\"line\">        &quot;framework&quot;,</div><div class=\"line\">        &quot;laravel&quot;,</div><div class=\"line\">        &quot;lumen&quot;</div><div class=\"line\">    ],</div><div class=\"line\">    &quot;license&quot;: &quot;MIT&quot;,</div><div class=\"line\">    &quot;type&quot;: &quot;project&quot;,</div><div class=\"line\">    &quot;repositories&quot;: &#123;</div><div class=\"line\">      &quot;packagist&quot;: &#123;</div><div class=\"line\">        &quot;type&quot;: &quot;composer&quot;,</div><div class=\"line\">        &quot;url&quot;: &quot;https://packagist.phpcomposer.com&quot;</div><div class=\"line\">      &#125;,</div><div class=\"line\">        &quot;0&quot;: &#123;</div><div class=\"line\">            &quot;type&quot;: &quot;package&quot;,</div><div class=\"line\">            &quot;package&quot;: &#123;</div><div class=\"line\">                &quot;name&quot;: &quot;sdk/clusterproxy&quot;,</div><div class=\"line\">                &quot;version&quot;: &quot;1.0.3&quot;,</div><div class=\"line\">                &quot;source&quot;: &#123;</div><div class=\"line\">                    &quot;type&quot;: &quot;git&quot;,</div><div class=\"line\">                    &quot;url&quot;: &quot;git@gitlab.renrenche.com:sdk/clusterproxy.git&quot;,</div><div class=\"line\">                    &quot;reference&quot;: &quot;master&quot;</div><div class=\"line\">                &#125;,</div><div class=\"line\">                &quot;autoload&quot;: &#123;</div><div class=\"line\">                    &quot;psr-4&quot;: &#123;</div><div class=\"line\">                        &quot;Cluster\\\\&quot;: &quot;src/Cluster&quot;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;,</div><div class=\"line\">      &quot;1&quot;: &#123;</div><div class=\"line\">        &quot;type&quot;: &quot;package&quot;,</div><div class=\"line\">        &quot;package&quot;: &#123;</div><div class=\"line\">          &quot;name&quot;: &quot;sdk/dingtalk-alarm-php-sdk&quot;,</div><div class=\"line\">          &quot;version&quot;: &quot;1.0&quot;,</div><div class=\"line\">          &quot;source&quot;: &#123;</div><div class=\"line\">            &quot;type&quot;: &quot;git&quot;,</div><div class=\"line\">            &quot;url&quot;: &quot;git@gitlab.renrenche.com:sdk/dingtalk-alarm-php-sdk.git&quot;,</div><div class=\"line\">            &quot;reference&quot;: &quot;master&quot;</div><div class=\"line\">          &#125;,</div><div class=\"line\">          &quot;autoload&quot;: &#123;</div><div class=\"line\">            &quot;psr-4&quot;: &#123;</div><div class=\"line\">              &quot;Rrc\\\\&quot;: &quot;src/Rrc/&quot;</div><div class=\"line\">            &#125;</div><div class=\"line\">          &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;,</div><div class=\"line\">      &quot;2&quot;: &#123;</div><div class=\"line\">        &quot;type&quot;:&quot;package&quot;,</div><div class=\"line\">        &quot;package&quot;: &#123;</div><div class=\"line\">          &quot;name&quot;: &quot;sdk/prometheus-php-sdk&quot;,</div><div class=\"line\">          &quot;version&quot;: &quot;1.0&quot;,</div><div class=\"line\">          &quot;source&quot;: &#123;</div><div class=\"line\">            &quot;type&quot;: &quot;git&quot;,</div><div class=\"line\">            &quot;url&quot;: &quot;git@gitlab.renrenche.com:sdk/prometheus-php-sdk.git&quot;,</div><div class=\"line\">            &quot;reference&quot;: &quot;master&quot;</div><div class=\"line\">          &#125;,</div><div class=\"line\">          &quot;autoload&quot;: &#123;</div><div class=\"line\">            &quot;psr-4&quot;: &#123;</div><div class=\"line\">              &quot;Rrc\\\\&quot;: &quot;src/Rrc/&quot;</div><div class=\"line\">            &#125;</div><div class=\"line\">          &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;,</div><div class=\"line\">      &quot;jugg&quot;: &#123;</div><div class=\"line\">        &quot;type&quot;:&quot;package&quot;,</div><div class=\"line\">        &quot;package&quot;: &#123;</div><div class=\"line\">          &quot;name&quot;: &quot;jugg&quot;,</div><div class=\"line\">          &quot;version&quot;: &quot;v1.1&quot;,</div><div class=\"line\">          &quot;source&quot;: &#123;</div><div class=\"line\">            &quot;type&quot;: &quot;git&quot;,</div><div class=\"line\">            &quot;url&quot;: &quot;git@gitlab.renrenche.com:web/jugg.git&quot;,</div><div class=\"line\">            &quot;reference&quot;: &quot;master&quot;</div><div class=\"line\">          &#125;,</div><div class=\"line\">          &quot;autoload&quot;: &#123;</div><div class=\"line\">            &quot;psr-4&quot;: &#123;</div><div class=\"line\">              &quot;Jugg\\\\&quot;: &quot;jugg&quot;</div><div class=\"line\">            &#125;</div><div class=\"line\">          &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    &quot;require&quot;: &#123;</div><div class=\"line\">        &quot;php&quot;: &quot;&gt;=7.0&quot;,</div><div class=\"line\">        &quot;laravel/lumen-framework&quot;: &quot;5.5.*&quot;,</div><div class=\"line\">        &quot;vlucas/phpdotenv&quot;: &quot;~2.2&quot;,</div><div class=\"line\">        &quot;guzzlehttp/guzzle&quot;: &quot;^6.2&quot;,</div><div class=\"line\">        &quot;sdk/clusterproxy&quot;: &quot;^1.0&quot;,</div><div class=\"line\">        &quot;illuminate/redis&quot;: &quot;^5.3&quot;,</div><div class=\"line\">        &quot;peixinchen/mns&quot;: &quot;^1.0&quot;,</div><div class=\"line\">        &quot;mockery/mockery&quot;: &quot;^0.9.5&quot;,</div><div class=\"line\">        &quot;firebase/php-jwt&quot;: &quot;^4.0&quot;,</div><div class=\"line\">        &quot;sdk/dingtalk-alarm-php-sdk&quot;: &quot;^1.0&quot;,</div><div class=\"line\">        &quot;sdk/prometheus-php-sdk&quot;: &quot;^1.0&quot;,</div><div class=\"line\">        &quot;predis/predis&quot;: &quot;^1.1&quot;,</div><div class=\"line\">        &quot;solarium/solarium&quot;: &quot;^3.8&quot;,</div><div class=\"line\">        &quot;mongodb/mongodb&quot;: &quot;^1.3&quot;,</div><div class=\"line\">        &quot;jugg&quot;: &quot;^1.0&quot;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    &quot;require-dev&quot;: &#123;</div><div class=\"line\">        &quot;fzaninotto/faker&quot;: &quot;~1.4&quot;,</div><div class=\"line\">        &quot;phpunit/phpunit&quot;: &quot;~6.0&quot;,</div><div class=\"line\">        &quot;mockery/mockery&quot;: &quot;~0.9&quot;,</div><div class=\"line\">        &quot;phpstan/phpstan&quot;: &quot;^0.9.2&quot;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    &quot;autoload&quot;: &#123;</div><div class=\"line\">        &quot;psr-4&quot;: &#123;</div><div class=\"line\">            &quot;Rrc\\\\&quot;: &quot;./&quot;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    &quot;autoload-dev&quot;: &#123;</div><div class=\"line\">        &quot;classmap&quot;: [</div><div class=\"line\">            &quot;tests/&quot;,</div><div class=\"line\">            &quot;database/&quot;</div><div class=\"line\">        ]</div><div class=\"line\">    &#125;,</div><div class=\"line\">    &quot;scripts&quot;: &#123;</div><div class=\"line\">        &quot;post-root-package-install&quot;: [</div><div class=\"line\">            &quot;php -r \\&quot;copy(&apos;.env.example&apos;, &apos;.env&apos;);\\&quot;&quot;</div><div class=\"line\">        ]</div><div class=\"line\">    &#125;,</div><div class=\"line\">    &quot;minimum-stability&quot;: &quot;dev&quot;,</div><div class=\"line\">    &quot;prefer-stable&quot;: true,</div><div class=\"line\">    &quot;config&quot;: &#123;</div><div class=\"line\">        &quot;optimize-autoloader&quot;: true</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>然后执行<code>composer require jugg&lt;包名&gt;</code> 就可以引入到项目里了。 </p>\n","site":{"data":{}},"excerpt":"","more":"<p>最近发现分布式锁在很多项目都有所用到,所以想把之前完成的代码封装成pear包,供大家使用。<br>但是发现自己对composer并不是很熟悉,所以学习一番,在此记录以防自己忘记。</p>\n<h2 id=\"新建仓库\"><a href=\"#新建仓库\" class=\"headerlink\" title=\"新建仓库\"></a>新建仓库</h2><p>$ git clone git@gitlab.renrenche.com:web/jugg.git<br>$ cd jugg</p>\n<h2 id=\"conmposer-初始化\"><a href=\"#conmposer-初始化\" class=\"headerlink\" title=\"conmposer 初始化\"></a>conmposer 初始化</h2><p>composer init </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">//包名</div><div class=\"line\">Package name (&lt;vendor&gt;/&lt;name&gt;) [lijian/test_composer]: jugg/jugg</div><div class=\"line\">//描述</div><div class=\"line\">Description []: 基于redis的分布式锁</div><div class=\"line\">//作者</div><div class=\"line\">Author [, n to skip]: Maxie lj &lt;xiaolijian110@163.com&gt;</div><div class=\"line\">//最小稳定版本</div><div class=\"line\">Minimum Stability []: dev</div><div class=\"line\">//遵循协议</div><div class=\"line\">License []: MIT</div><div class=\"line\"></div><div class=\"line\">//依赖</div><div class=\"line\">Would you like to define your dependencies (require) interactively [yes]? yes</div><div class=\"line\"></div><div class=\"line\">Search for a package: php</div><div class=\"line\"></div><div class=\"line\">Enter the version constraint to require (or leave blank to use the latest version):</div><div class=\"line\">Using version ^7.0 for php</div></pre></td></tr></table></figure>\n<p>生成composer.json文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    &quot;name&quot;: &quot;jugg/jugg&quot;,</div><div class=\"line\">    &quot;description&quot;: &quot;基于redis的分布式锁&quot;,</div><div class=\"line\">    &quot;type&quot;: &quot;library&quot;,</div><div class=\"line\">    &quot;require&quot;: &#123;</div><div class=\"line\">        &quot;php&quot;: &quot;^7.0&quot;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    &quot;require-dev&quot;: &#123;</div><div class=\"line\">        &quot;php&quot;: &quot;7&quot;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    &quot;license&quot;: &quot;MIT&quot;,</div><div class=\"line\">    &quot;authors&quot;: [</div><div class=\"line\">        &#123;</div><div class=\"line\">            &quot;name&quot;: &quot;Maxie lj&quot;,</div><div class=\"line\">            &quot;email&quot;: &quot;xiaolijian110@163.com&quot;</div><div class=\"line\">        &#125;</div><div class=\"line\">    ],</div><div class=\"line\">    &quot;minimum-stability&quot;: &quot;dev&quot;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"生成自动加载（psr-4）\"><a href=\"#生成自动加载（psr-4）\" class=\"headerlink\" title=\"生成自动加载（psr-4）\"></a>生成自动加载（psr-4）</h2><p>在composer.json 文件里添加<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    &quot;name&quot;: &quot;jugg/jugg&quot;,</div><div class=\"line\">    &quot;description&quot;: &quot;基于redis的分布式锁&quot;,</div><div class=\"line\">    &quot;type&quot;: &quot;library&quot;,</div><div class=\"line\">    &quot;license&quot;: &quot;MIT&quot;,</div><div class=\"line\">    &quot;authors&quot;: [</div><div class=\"line\">        &#123;</div><div class=\"line\">            &quot;name&quot;: &quot;Maxie lj&quot;,</div><div class=\"line\">            &quot;email&quot;: &quot;xiaolijian110@163.com&quot;</div><div class=\"line\">        &#125;</div><div class=\"line\">    ],</div><div class=\"line\">    &quot;autoload&quot;: &#123;</div><div class=\"line\">    &quot;psr-4&quot;: &#123;</div><div class=\"line\">      &quot;Jugg\\\\&quot;: &quot;jugg&quot;</div><div class=\"line\">    &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    &quot;minimum-stability&quot;: &quot;dev&quot;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>执行<code>composer install</code></p>\n<p>就会生成一个自动加载文件</p>\n<p><img src=\"/photo/img/创建一个composer包/自动加载目录.png\" alt=\"image\"></p>\n<p>然后我们就可以按照psr-4规范开发我们pear包了。</p>\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><p>我们可以在测试文件里引入autoload.php文件,这样就实现了自动加载。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">require</span> <span class=\"string\">'./vendor/autoload.php'</span>;</div></pre></td></tr></table></figure>\n<p>这样就可以正常的测试了</p>\n<h2 id=\"上传代码到gitlab或者github\"><a href=\"#上传代码到gitlab或者github\" class=\"headerlink\" title=\"上传代码到gitlab或者github\"></a>上传代码到gitlab或者github</h2><p>当我们开完的时候,需要将我们的代码上传到远程代码库。</p>\n<p>需要注意的事 一定不要讲.git文件上传。</p>\n<h2 id=\"其他项目引入\"><a href=\"#其他项目引入\" class=\"headerlink\" title=\"其他项目引入\"></a>其他项目引入</h2><p>因为没有上传到pagelist,所以我们暂时是公司私有包。</p>\n<p>如果需要再项目里引入私有包,需要在项目的composer.json文件里添加。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">&quot;jugg&quot;: &#123;</div><div class=\"line\">        &quot;type&quot;:&quot;package&quot;,</div><div class=\"line\">        &quot;package&quot;: &#123;</div><div class=\"line\">          &quot;name&quot;: &quot;jugg&quot;,</div><div class=\"line\">          &quot;version&quot;: &quot;v1.1&quot;,</div><div class=\"line\">          &quot;source&quot;: &#123;</div><div class=\"line\">            &quot;type&quot;: &quot;git&quot;,</div><div class=\"line\">            &quot;url&quot;: &quot;git@gitlab.renrenche.com:web/jugg.git&quot;,</div><div class=\"line\">            &quot;reference&quot;: &quot;master&quot;</div><div class=\"line\">          &#125;,</div><div class=\"line\">          &quot;autoload&quot;: &#123;</div><div class=\"line\">            &quot;psr-4&quot;: &#123;</div><div class=\"line\">              &quot;Jugg\\\\&quot;: &quot;jugg&quot;</div><div class=\"line\">            &#125;</div><div class=\"line\">          &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div></pre></td></tr></table></figure>\n<p>完整文件:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    &quot;name&quot;: &quot;laravel/lumen&quot;,</div><div class=\"line\">    &quot;description&quot;: &quot;The Laravel Lumen Framework.&quot;,</div><div class=\"line\">    &quot;keywords&quot;: [</div><div class=\"line\">        &quot;framework&quot;,</div><div class=\"line\">        &quot;laravel&quot;,</div><div class=\"line\">        &quot;lumen&quot;</div><div class=\"line\">    ],</div><div class=\"line\">    &quot;license&quot;: &quot;MIT&quot;,</div><div class=\"line\">    &quot;type&quot;: &quot;project&quot;,</div><div class=\"line\">    &quot;repositories&quot;: &#123;</div><div class=\"line\">      &quot;packagist&quot;: &#123;</div><div class=\"line\">        &quot;type&quot;: &quot;composer&quot;,</div><div class=\"line\">        &quot;url&quot;: &quot;https://packagist.phpcomposer.com&quot;</div><div class=\"line\">      &#125;,</div><div class=\"line\">        &quot;0&quot;: &#123;</div><div class=\"line\">            &quot;type&quot;: &quot;package&quot;,</div><div class=\"line\">            &quot;package&quot;: &#123;</div><div class=\"line\">                &quot;name&quot;: &quot;sdk/clusterproxy&quot;,</div><div class=\"line\">                &quot;version&quot;: &quot;1.0.3&quot;,</div><div class=\"line\">                &quot;source&quot;: &#123;</div><div class=\"line\">                    &quot;type&quot;: &quot;git&quot;,</div><div class=\"line\">                    &quot;url&quot;: &quot;git@gitlab.renrenche.com:sdk/clusterproxy.git&quot;,</div><div class=\"line\">                    &quot;reference&quot;: &quot;master&quot;</div><div class=\"line\">                &#125;,</div><div class=\"line\">                &quot;autoload&quot;: &#123;</div><div class=\"line\">                    &quot;psr-4&quot;: &#123;</div><div class=\"line\">                        &quot;Cluster\\\\&quot;: &quot;src/Cluster&quot;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;,</div><div class=\"line\">      &quot;1&quot;: &#123;</div><div class=\"line\">        &quot;type&quot;: &quot;package&quot;,</div><div class=\"line\">        &quot;package&quot;: &#123;</div><div class=\"line\">          &quot;name&quot;: &quot;sdk/dingtalk-alarm-php-sdk&quot;,</div><div class=\"line\">          &quot;version&quot;: &quot;1.0&quot;,</div><div class=\"line\">          &quot;source&quot;: &#123;</div><div class=\"line\">            &quot;type&quot;: &quot;git&quot;,</div><div class=\"line\">            &quot;url&quot;: &quot;git@gitlab.renrenche.com:sdk/dingtalk-alarm-php-sdk.git&quot;,</div><div class=\"line\">            &quot;reference&quot;: &quot;master&quot;</div><div class=\"line\">          &#125;,</div><div class=\"line\">          &quot;autoload&quot;: &#123;</div><div class=\"line\">            &quot;psr-4&quot;: &#123;</div><div class=\"line\">              &quot;Rrc\\\\&quot;: &quot;src/Rrc/&quot;</div><div class=\"line\">            &#125;</div><div class=\"line\">          &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;,</div><div class=\"line\">      &quot;2&quot;: &#123;</div><div class=\"line\">        &quot;type&quot;:&quot;package&quot;,</div><div class=\"line\">        &quot;package&quot;: &#123;</div><div class=\"line\">          &quot;name&quot;: &quot;sdk/prometheus-php-sdk&quot;,</div><div class=\"line\">          &quot;version&quot;: &quot;1.0&quot;,</div><div class=\"line\">          &quot;source&quot;: &#123;</div><div class=\"line\">            &quot;type&quot;: &quot;git&quot;,</div><div class=\"line\">            &quot;url&quot;: &quot;git@gitlab.renrenche.com:sdk/prometheus-php-sdk.git&quot;,</div><div class=\"line\">            &quot;reference&quot;: &quot;master&quot;</div><div class=\"line\">          &#125;,</div><div class=\"line\">          &quot;autoload&quot;: &#123;</div><div class=\"line\">            &quot;psr-4&quot;: &#123;</div><div class=\"line\">              &quot;Rrc\\\\&quot;: &quot;src/Rrc/&quot;</div><div class=\"line\">            &#125;</div><div class=\"line\">          &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;,</div><div class=\"line\">      &quot;jugg&quot;: &#123;</div><div class=\"line\">        &quot;type&quot;:&quot;package&quot;,</div><div class=\"line\">        &quot;package&quot;: &#123;</div><div class=\"line\">          &quot;name&quot;: &quot;jugg&quot;,</div><div class=\"line\">          &quot;version&quot;: &quot;v1.1&quot;,</div><div class=\"line\">          &quot;source&quot;: &#123;</div><div class=\"line\">            &quot;type&quot;: &quot;git&quot;,</div><div class=\"line\">            &quot;url&quot;: &quot;git@gitlab.renrenche.com:web/jugg.git&quot;,</div><div class=\"line\">            &quot;reference&quot;: &quot;master&quot;</div><div class=\"line\">          &#125;,</div><div class=\"line\">          &quot;autoload&quot;: &#123;</div><div class=\"line\">            &quot;psr-4&quot;: &#123;</div><div class=\"line\">              &quot;Jugg\\\\&quot;: &quot;jugg&quot;</div><div class=\"line\">            &#125;</div><div class=\"line\">          &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    &quot;require&quot;: &#123;</div><div class=\"line\">        &quot;php&quot;: &quot;&gt;=7.0&quot;,</div><div class=\"line\">        &quot;laravel/lumen-framework&quot;: &quot;5.5.*&quot;,</div><div class=\"line\">        &quot;vlucas/phpdotenv&quot;: &quot;~2.2&quot;,</div><div class=\"line\">        &quot;guzzlehttp/guzzle&quot;: &quot;^6.2&quot;,</div><div class=\"line\">        &quot;sdk/clusterproxy&quot;: &quot;^1.0&quot;,</div><div class=\"line\">        &quot;illuminate/redis&quot;: &quot;^5.3&quot;,</div><div class=\"line\">        &quot;peixinchen/mns&quot;: &quot;^1.0&quot;,</div><div class=\"line\">        &quot;mockery/mockery&quot;: &quot;^0.9.5&quot;,</div><div class=\"line\">        &quot;firebase/php-jwt&quot;: &quot;^4.0&quot;,</div><div class=\"line\">        &quot;sdk/dingtalk-alarm-php-sdk&quot;: &quot;^1.0&quot;,</div><div class=\"line\">        &quot;sdk/prometheus-php-sdk&quot;: &quot;^1.0&quot;,</div><div class=\"line\">        &quot;predis/predis&quot;: &quot;^1.1&quot;,</div><div class=\"line\">        &quot;solarium/solarium&quot;: &quot;^3.8&quot;,</div><div class=\"line\">        &quot;mongodb/mongodb&quot;: &quot;^1.3&quot;,</div><div class=\"line\">        &quot;jugg&quot;: &quot;^1.0&quot;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    &quot;require-dev&quot;: &#123;</div><div class=\"line\">        &quot;fzaninotto/faker&quot;: &quot;~1.4&quot;,</div><div class=\"line\">        &quot;phpunit/phpunit&quot;: &quot;~6.0&quot;,</div><div class=\"line\">        &quot;mockery/mockery&quot;: &quot;~0.9&quot;,</div><div class=\"line\">        &quot;phpstan/phpstan&quot;: &quot;^0.9.2&quot;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    &quot;autoload&quot;: &#123;</div><div class=\"line\">        &quot;psr-4&quot;: &#123;</div><div class=\"line\">            &quot;Rrc\\\\&quot;: &quot;./&quot;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    &quot;autoload-dev&quot;: &#123;</div><div class=\"line\">        &quot;classmap&quot;: [</div><div class=\"line\">            &quot;tests/&quot;,</div><div class=\"line\">            &quot;database/&quot;</div><div class=\"line\">        ]</div><div class=\"line\">    &#125;,</div><div class=\"line\">    &quot;scripts&quot;: &#123;</div><div class=\"line\">        &quot;post-root-package-install&quot;: [</div><div class=\"line\">            &quot;php -r \\&quot;copy(&apos;.env.example&apos;, &apos;.env&apos;);\\&quot;&quot;</div><div class=\"line\">        ]</div><div class=\"line\">    &#125;,</div><div class=\"line\">    &quot;minimum-stability&quot;: &quot;dev&quot;,</div><div class=\"line\">    &quot;prefer-stable&quot;: true,</div><div class=\"line\">    &quot;config&quot;: &#123;</div><div class=\"line\">        &quot;optimize-autoloader&quot;: true</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>然后执行<code>composer require jugg&lt;包名&gt;</code> 就可以引入到项目里了。 </p>\n"},{"title":"数据库隔离级别","date":"2018-12-23T12:34:25.000Z","_content":"\nSQL标准规范中定义了四种数据库隔离级别。每种隔离级别带来的系统开销是不一样的。通常较低的隔离级别的系统开销会更低，可以执行更高的并发。\n\n## READ COMMITTED(未提交读)\n顾名思义，未提交读隔离级别中，事物的修改即使没有提交，对其他事务也是可见的。事务可以读取为未提交的数据，也成为`脏读`。READ COMMITED 性能上不会有跟很大的优势，但是却会导致很多的问题，在实际应用中很少使用。\n\neg:\n业务场景支付扣款。当用户统一时刻发生一笔充值500，和一笔扣款200业务时。 扣款读到是未执行的充值事务金额，账户余额500元，但是充值事务回滚了，这种情况下数据出现问题，所以未提交读是一种不可靠的事务。\n\n\n## READ COMMITED(提交读)\n多数数据库的隔离级是提交读(比如Sql Server , Oracle)，但是mysql不是。\n提交读的含义是：一个事务只能看到已经提交的事务所做的修改。也就是说事务和事务之前在提交前是相互不可见的。这个级别又称为不可重复读，因为每次读取的结果可能是不一样的。\n\neg:\n当我们拿着银行卡去消费时候，查询到卡里还有2000元，这时准备消费。与此同时这张卡的钱被老婆转账了（已经转出去2000元），当我们在扣款你的时候会提示余额不足。\n提交读避免了`脏读`，但是却产生了`不可重复读`（同一事务内）。\n\n## Repeatable read （重复读）\n\n重复读，保证了在同一个事务内读取同一条数据是不变的，但是却无法保证我们读取（同一事务内）同一表里的数据量是一致的。但是却会产生幻读（幻行）。\n\n例如消费记录表，我们在打印信用卡的消费记录时查询出来只有一条消费记录80（这是另外一个事务无法改变的），但是在我们打印的时候，老婆又消费了1000元（另外一个事务，但是没有对原来的80元进行修改），我们打印出来的结果是两条记录 80 +1000，这就是幻行。\n\n\n\n## Serializable （序列化）\nSerializable 通过强制事务串行执行避免了欢读。但是Serializable在执行的时候会对每一样的数据都加上锁，会导致大量的超时和锁竞争。只有在数据一致性非常重要，且并发不是很大情况选，可以选用这种隔离级别。\n\n\n## 几个名词\n\n### 脏读\n指的是在A事务内，多次读取同一一个数据。与此同时还有另外一个B事务对同一数据进行了修改，但是未提交。这时就会产生事务A两次读取的数据不一致，一个是事务B未执行前的数据，一个是读取事务B未提交的数据。\n\n### 不可重复读。\n指的是同一事务内，无法对同一个数据多次读取，因为两次读取可能是不一致的（因为没有对 数据写 加锁）。\n\n### 幻读\n\n幻读是在`可重复读`的隔离级别下产生的问题。`可重复读`虽然对数据加写锁，但是却没对表加锁，造成每次读取表的数据量是不一致的，所以又称`幻行`。\n","source":"_posts/数据库隔离级别.md","raw":"---\ntitle: 数据库隔离级别\ndate: 2018-12-23 20:34:25\ntags:\n---\n\nSQL标准规范中定义了四种数据库隔离级别。每种隔离级别带来的系统开销是不一样的。通常较低的隔离级别的系统开销会更低，可以执行更高的并发。\n\n## READ COMMITTED(未提交读)\n顾名思义，未提交读隔离级别中，事物的修改即使没有提交，对其他事务也是可见的。事务可以读取为未提交的数据，也成为`脏读`。READ COMMITED 性能上不会有跟很大的优势，但是却会导致很多的问题，在实际应用中很少使用。\n\neg:\n业务场景支付扣款。当用户统一时刻发生一笔充值500，和一笔扣款200业务时。 扣款读到是未执行的充值事务金额，账户余额500元，但是充值事务回滚了，这种情况下数据出现问题，所以未提交读是一种不可靠的事务。\n\n\n## READ COMMITED(提交读)\n多数数据库的隔离级是提交读(比如Sql Server , Oracle)，但是mysql不是。\n提交读的含义是：一个事务只能看到已经提交的事务所做的修改。也就是说事务和事务之前在提交前是相互不可见的。这个级别又称为不可重复读，因为每次读取的结果可能是不一样的。\n\neg:\n当我们拿着银行卡去消费时候，查询到卡里还有2000元，这时准备消费。与此同时这张卡的钱被老婆转账了（已经转出去2000元），当我们在扣款你的时候会提示余额不足。\n提交读避免了`脏读`，但是却产生了`不可重复读`（同一事务内）。\n\n## Repeatable read （重复读）\n\n重复读，保证了在同一个事务内读取同一条数据是不变的，但是却无法保证我们读取（同一事务内）同一表里的数据量是一致的。但是却会产生幻读（幻行）。\n\n例如消费记录表，我们在打印信用卡的消费记录时查询出来只有一条消费记录80（这是另外一个事务无法改变的），但是在我们打印的时候，老婆又消费了1000元（另外一个事务，但是没有对原来的80元进行修改），我们打印出来的结果是两条记录 80 +1000，这就是幻行。\n\n\n\n## Serializable （序列化）\nSerializable 通过强制事务串行执行避免了欢读。但是Serializable在执行的时候会对每一样的数据都加上锁，会导致大量的超时和锁竞争。只有在数据一致性非常重要，且并发不是很大情况选，可以选用这种隔离级别。\n\n\n## 几个名词\n\n### 脏读\n指的是在A事务内，多次读取同一一个数据。与此同时还有另外一个B事务对同一数据进行了修改，但是未提交。这时就会产生事务A两次读取的数据不一致，一个是事务B未执行前的数据，一个是读取事务B未提交的数据。\n\n### 不可重复读。\n指的是同一事务内，无法对同一个数据多次读取，因为两次读取可能是不一致的（因为没有对 数据写 加锁）。\n\n### 幻读\n\n幻读是在`可重复读`的隔离级别下产生的问题。`可重复读`虽然对数据加写锁，但是却没对表加锁，造成每次读取表的数据量是不一致的，所以又称`幻行`。\n","slug":"数据库隔离级别","published":1,"updated":"2018-12-23T12:34:25.229Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqavhge10016zqjffkmamiv6","content":"<p>SQL标准规范中定义了四种数据库隔离级别。每种隔离级别带来的系统开销是不一样的。通常较低的隔离级别的系统开销会更低，可以执行更高的并发。</p>\n<h2 id=\"READ-COMMITTED-未提交读\"><a href=\"#READ-COMMITTED-未提交读\" class=\"headerlink\" title=\"READ COMMITTED(未提交读)\"></a>READ COMMITTED(未提交读)</h2><p>顾名思义，未提交读隔离级别中，事物的修改即使没有提交，对其他事务也是可见的。事务可以读取为未提交的数据，也成为<code>脏读</code>。READ COMMITED 性能上不会有跟很大的优势，但是却会导致很多的问题，在实际应用中很少使用。</p>\n<p>eg:<br>业务场景支付扣款。当用户统一时刻发生一笔充值500，和一笔扣款200业务时。 扣款读到是未执行的充值事务金额，账户余额500元，但是充值事务回滚了，这种情况下数据出现问题，所以未提交读是一种不可靠的事务。</p>\n<h2 id=\"READ-COMMITED-提交读\"><a href=\"#READ-COMMITED-提交读\" class=\"headerlink\" title=\"READ COMMITED(提交读)\"></a>READ COMMITED(提交读)</h2><p>多数数据库的隔离级是提交读(比如Sql Server , Oracle)，但是mysql不是。<br>提交读的含义是：一个事务只能看到已经提交的事务所做的修改。也就是说事务和事务之前在提交前是相互不可见的。这个级别又称为不可重复读，因为每次读取的结果可能是不一样的。</p>\n<p>eg:<br>当我们拿着银行卡去消费时候，查询到卡里还有2000元，这时准备消费。与此同时这张卡的钱被老婆转账了（已经转出去2000元），当我们在扣款你的时候会提示余额不足。<br>提交读避免了<code>脏读</code>，但是却产生了<code>不可重复读</code>（同一事务内）。</p>\n<h2 id=\"Repeatable-read-（重复读）\"><a href=\"#Repeatable-read-（重复读）\" class=\"headerlink\" title=\"Repeatable read （重复读）\"></a>Repeatable read （重复读）</h2><p>重复读，保证了在同一个事务内读取同一条数据是不变的，但是却无法保证我们读取（同一事务内）同一表里的数据量是一致的。但是却会产生幻读（幻行）。</p>\n<p>例如消费记录表，我们在打印信用卡的消费记录时查询出来只有一条消费记录80（这是另外一个事务无法改变的），但是在我们打印的时候，老婆又消费了1000元（另外一个事务，但是没有对原来的80元进行修改），我们打印出来的结果是两条记录 80 +1000，这就是幻行。</p>\n<h2 id=\"Serializable-（序列化）\"><a href=\"#Serializable-（序列化）\" class=\"headerlink\" title=\"Serializable （序列化）\"></a>Serializable （序列化）</h2><p>Serializable 通过强制事务串行执行避免了欢读。但是Serializable在执行的时候会对每一样的数据都加上锁，会导致大量的超时和锁竞争。只有在数据一致性非常重要，且并发不是很大情况选，可以选用这种隔离级别。</p>\n<h2 id=\"几个名词\"><a href=\"#几个名词\" class=\"headerlink\" title=\"几个名词\"></a>几个名词</h2><h3 id=\"脏读\"><a href=\"#脏读\" class=\"headerlink\" title=\"脏读\"></a>脏读</h3><p>指的是在A事务内，多次读取同一一个数据。与此同时还有另外一个B事务对同一数据进行了修改，但是未提交。这时就会产生事务A两次读取的数据不一致，一个是事务B未执行前的数据，一个是读取事务B未提交的数据。</p>\n<h3 id=\"不可重复读。\"><a href=\"#不可重复读。\" class=\"headerlink\" title=\"不可重复读。\"></a>不可重复读。</h3><p>指的是同一事务内，无法对同一个数据多次读取，因为两次读取可能是不一致的（因为没有对 数据写 加锁）。</p>\n<h3 id=\"幻读\"><a href=\"#幻读\" class=\"headerlink\" title=\"幻读\"></a>幻读</h3><p>幻读是在<code>可重复读</code>的隔离级别下产生的问题。<code>可重复读</code>虽然对数据加写锁，但是却没对表加锁，造成每次读取表的数据量是不一致的，所以又称<code>幻行</code>。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>SQL标准规范中定义了四种数据库隔离级别。每种隔离级别带来的系统开销是不一样的。通常较低的隔离级别的系统开销会更低，可以执行更高的并发。</p>\n<h2 id=\"READ-COMMITTED-未提交读\"><a href=\"#READ-COMMITTED-未提交读\" class=\"headerlink\" title=\"READ COMMITTED(未提交读)\"></a>READ COMMITTED(未提交读)</h2><p>顾名思义，未提交读隔离级别中，事物的修改即使没有提交，对其他事务也是可见的。事务可以读取为未提交的数据，也成为<code>脏读</code>。READ COMMITED 性能上不会有跟很大的优势，但是却会导致很多的问题，在实际应用中很少使用。</p>\n<p>eg:<br>业务场景支付扣款。当用户统一时刻发生一笔充值500，和一笔扣款200业务时。 扣款读到是未执行的充值事务金额，账户余额500元，但是充值事务回滚了，这种情况下数据出现问题，所以未提交读是一种不可靠的事务。</p>\n<h2 id=\"READ-COMMITED-提交读\"><a href=\"#READ-COMMITED-提交读\" class=\"headerlink\" title=\"READ COMMITED(提交读)\"></a>READ COMMITED(提交读)</h2><p>多数数据库的隔离级是提交读(比如Sql Server , Oracle)，但是mysql不是。<br>提交读的含义是：一个事务只能看到已经提交的事务所做的修改。也就是说事务和事务之前在提交前是相互不可见的。这个级别又称为不可重复读，因为每次读取的结果可能是不一样的。</p>\n<p>eg:<br>当我们拿着银行卡去消费时候，查询到卡里还有2000元，这时准备消费。与此同时这张卡的钱被老婆转账了（已经转出去2000元），当我们在扣款你的时候会提示余额不足。<br>提交读避免了<code>脏读</code>，但是却产生了<code>不可重复读</code>（同一事务内）。</p>\n<h2 id=\"Repeatable-read-（重复读）\"><a href=\"#Repeatable-read-（重复读）\" class=\"headerlink\" title=\"Repeatable read （重复读）\"></a>Repeatable read （重复读）</h2><p>重复读，保证了在同一个事务内读取同一条数据是不变的，但是却无法保证我们读取（同一事务内）同一表里的数据量是一致的。但是却会产生幻读（幻行）。</p>\n<p>例如消费记录表，我们在打印信用卡的消费记录时查询出来只有一条消费记录80（这是另外一个事务无法改变的），但是在我们打印的时候，老婆又消费了1000元（另外一个事务，但是没有对原来的80元进行修改），我们打印出来的结果是两条记录 80 +1000，这就是幻行。</p>\n<h2 id=\"Serializable-（序列化）\"><a href=\"#Serializable-（序列化）\" class=\"headerlink\" title=\"Serializable （序列化）\"></a>Serializable （序列化）</h2><p>Serializable 通过强制事务串行执行避免了欢读。但是Serializable在执行的时候会对每一样的数据都加上锁，会导致大量的超时和锁竞争。只有在数据一致性非常重要，且并发不是很大情况选，可以选用这种隔离级别。</p>\n<h2 id=\"几个名词\"><a href=\"#几个名词\" class=\"headerlink\" title=\"几个名词\"></a>几个名词</h2><h3 id=\"脏读\"><a href=\"#脏读\" class=\"headerlink\" title=\"脏读\"></a>脏读</h3><p>指的是在A事务内，多次读取同一一个数据。与此同时还有另外一个B事务对同一数据进行了修改，但是未提交。这时就会产生事务A两次读取的数据不一致，一个是事务B未执行前的数据，一个是读取事务B未提交的数据。</p>\n<h3 id=\"不可重复读。\"><a href=\"#不可重复读。\" class=\"headerlink\" title=\"不可重复读。\"></a>不可重复读。</h3><p>指的是同一事务内，无法对同一个数据多次读取，因为两次读取可能是不一致的（因为没有对 数据写 加锁）。</p>\n<h3 id=\"幻读\"><a href=\"#幻读\" class=\"headerlink\" title=\"幻读\"></a>幻读</h3><p>幻读是在<code>可重复读</code>的隔离级别下产生的问题。<code>可重复读</code>虽然对数据加写锁，但是却没对表加锁，造成每次读取表的数据量是不一致的，所以又称<code>幻行</code>。</p>\n"},{"title":"设计模式1","date":"2018-08-01T12:53:15.000Z","_content":"## builder 模式\n\nbuilder 建造者模式,又称生成器模式。\n\n建造者模式是为了简化 使用多个建单的对象构建成一个复杂对象的 设计模式。 属于创建型模式。\n\n代码示例\n\n```php\n\n    publish class SmallWheel()\n    {\n        \n    }\n    \n    publish class BigWheel()\n    {\n        \n    }\n    \n    publish class SmallCar()\n    {\n        publish $wheel;\n    }\n    \n    publish class BigCar()\n    {\n        publish $wheel;\n    }\n\n```\n\n以上为零件。\n\n```php\n    \n    publish CarBuilder()\n    {\n        //创建小轿车\n        publish function getSmallCar()\n        {\n            $smallCar = new SmallCar();\n            $smallCar->whell = new SmallWheel();\n            return $smallCar;\n        }\n        \n        //创建大轿车\n        publish function getBigCar()\n        {\n            $bigCar = new BigCar();\n            $bigCar->whell = new BigWheel();\n            return $bigCar;\n        }\n    }\n```\n\n调度 \n\n```php\n\n    $carBuilder = new CArBuilder();\n    \n    $smallCar = $carBuilder->getSmallCar();\n    $bigCar = $carBuilder->getBigCar();\n```\n\n\n备注:\n\n建造者模式与工厂模式区别:\n工厂模式用于批量创建那哪一种类, 建造者模式更注重构建过程。\n\n\n## template method \n\n模板方法:定义一个抽象类或者/父类,由继承它的子类按照需求重写它的方法实现。\n\neg:\n\n```php\n\n    publish abstract class Car()\n    {\n        //强制子类实现\n        abstract public function run();\n        abstract public function turnOnTheLight();\n        //不强制\n        public function palyMusic()\n        {\n            return 'hengheng hahei';\n        }\n    }\n    \n```\n继承\n\n```php\n    public class SmaCar extends car \n    {\n        public function run()\n        {\n            return 'run';\n        }\n        \n        public funtion turnOnTheLight()\n        {\n            return 'turnOnTheLight';\n        }\n    }\n```\n    \n以上\n","source":"_posts/设计模式.md","raw":"---\ntitle: 设计模式1\ndate: 2018-08-01 20:53:15\ntags: builder template method\n---\n## builder 模式\n\nbuilder 建造者模式,又称生成器模式。\n\n建造者模式是为了简化 使用多个建单的对象构建成一个复杂对象的 设计模式。 属于创建型模式。\n\n代码示例\n\n```php\n\n    publish class SmallWheel()\n    {\n        \n    }\n    \n    publish class BigWheel()\n    {\n        \n    }\n    \n    publish class SmallCar()\n    {\n        publish $wheel;\n    }\n    \n    publish class BigCar()\n    {\n        publish $wheel;\n    }\n\n```\n\n以上为零件。\n\n```php\n    \n    publish CarBuilder()\n    {\n        //创建小轿车\n        publish function getSmallCar()\n        {\n            $smallCar = new SmallCar();\n            $smallCar->whell = new SmallWheel();\n            return $smallCar;\n        }\n        \n        //创建大轿车\n        publish function getBigCar()\n        {\n            $bigCar = new BigCar();\n            $bigCar->whell = new BigWheel();\n            return $bigCar;\n        }\n    }\n```\n\n调度 \n\n```php\n\n    $carBuilder = new CArBuilder();\n    \n    $smallCar = $carBuilder->getSmallCar();\n    $bigCar = $carBuilder->getBigCar();\n```\n\n\n备注:\n\n建造者模式与工厂模式区别:\n工厂模式用于批量创建那哪一种类, 建造者模式更注重构建过程。\n\n\n## template method \n\n模板方法:定义一个抽象类或者/父类,由继承它的子类按照需求重写它的方法实现。\n\neg:\n\n```php\n\n    publish abstract class Car()\n    {\n        //强制子类实现\n        abstract public function run();\n        abstract public function turnOnTheLight();\n        //不强制\n        public function palyMusic()\n        {\n            return 'hengheng hahei';\n        }\n    }\n    \n```\n继承\n\n```php\n    public class SmaCar extends car \n    {\n        public function run()\n        {\n            return 'run';\n        }\n        \n        public funtion turnOnTheLight()\n        {\n            return 'turnOnTheLight';\n        }\n    }\n```\n    \n以上\n","slug":"设计模式","published":1,"updated":"2018-08-02T10:12:34.678Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjqavhge20017zqjf6f45i1wl","content":"<h2 id=\"builder-模式\"><a href=\"#builder-模式\" class=\"headerlink\" title=\"builder 模式\"></a>builder 模式</h2><p>builder 建造者模式,又称生成器模式。</p>\n<p>建造者模式是为了简化 使用多个建单的对象构建成一个复杂对象的 设计模式。 属于创建型模式。</p>\n<p>代码示例</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">publish class SmallWheel()</div><div class=\"line\">&#123;</div><div class=\"line\">    </div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">publish class BigWheel()</div><div class=\"line\">&#123;</div><div class=\"line\">    </div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">publish class SmallCar()</div><div class=\"line\">&#123;</div><div class=\"line\">    publish $wheel;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">publish class BigCar()</div><div class=\"line\">&#123;</div><div class=\"line\">    publish $wheel;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>以上为零件。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">publish CarBuilder()</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">//创建小轿车</span></div><div class=\"line\">    publish <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getSmallCar</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        $smallCar = <span class=\"keyword\">new</span> SmallCar();</div><div class=\"line\">        $smallCar-&gt;whell = <span class=\"keyword\">new</span> SmallWheel();</div><div class=\"line\">        <span class=\"keyword\">return</span> $smallCar;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//创建大轿车</span></div><div class=\"line\">    publish <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getBigCar</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        $bigCar = <span class=\"keyword\">new</span> BigCar();</div><div class=\"line\">        $bigCar-&gt;whell = <span class=\"keyword\">new</span> BigWheel();</div><div class=\"line\">        <span class=\"keyword\">return</span> $bigCar;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>调度 </p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">$carBuilder = <span class=\"keyword\">new</span> CArBuilder();</div><div class=\"line\"></div><div class=\"line\">$smallCar = $carBuilder-&gt;getSmallCar();</div><div class=\"line\">$bigCar = $carBuilder-&gt;getBigCar();</div></pre></td></tr></table></figure>\n<p>备注:</p>\n<p>建造者模式与工厂模式区别:<br>工厂模式用于批量创建那哪一种类, 建造者模式更注重构建过程。</p>\n<h2 id=\"template-method\"><a href=\"#template-method\" class=\"headerlink\" title=\"template method\"></a>template method</h2><p>模板方法:定义一个抽象类或者/父类,由继承它的子类按照需求重写它的方法实现。</p>\n<p>eg:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">publish abstract class Car()</div><div class=\"line\">&#123;</div><div class=\"line\">    //强制子类实现</div><div class=\"line\">    abstract public function run();</div><div class=\"line\">    abstract public function turnOnTheLight();</div><div class=\"line\">    //不强制</div><div class=\"line\">    public function palyMusic()</div><div class=\"line\">    &#123;</div><div class=\"line\">        return 'hengheng hahei';</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>继承</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SmaCar</span> <span class=\"keyword\">extends</span> <span class=\"title\">car</span> </span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">run</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'run'</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">public</span> funtion turnOnTheLight()</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'turnOnTheLight'</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>以上</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"builder-模式\"><a href=\"#builder-模式\" class=\"headerlink\" title=\"builder 模式\"></a>builder 模式</h2><p>builder 建造者模式,又称生成器模式。</p>\n<p>建造者模式是为了简化 使用多个建单的对象构建成一个复杂对象的 设计模式。 属于创建型模式。</p>\n<p>代码示例</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">publish class SmallWheel()</div><div class=\"line\">&#123;</div><div class=\"line\">    </div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">publish class BigWheel()</div><div class=\"line\">&#123;</div><div class=\"line\">    </div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">publish class SmallCar()</div><div class=\"line\">&#123;</div><div class=\"line\">    publish $wheel;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">publish class BigCar()</div><div class=\"line\">&#123;</div><div class=\"line\">    publish $wheel;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>以上为零件。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">publish CarBuilder()</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">//创建小轿车</span></div><div class=\"line\">    publish <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getSmallCar</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        $smallCar = <span class=\"keyword\">new</span> SmallCar();</div><div class=\"line\">        $smallCar-&gt;whell = <span class=\"keyword\">new</span> SmallWheel();</div><div class=\"line\">        <span class=\"keyword\">return</span> $smallCar;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//创建大轿车</span></div><div class=\"line\">    publish <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getBigCar</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        $bigCar = <span class=\"keyword\">new</span> BigCar();</div><div class=\"line\">        $bigCar-&gt;whell = <span class=\"keyword\">new</span> BigWheel();</div><div class=\"line\">        <span class=\"keyword\">return</span> $bigCar;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>调度 </p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">$carBuilder = <span class=\"keyword\">new</span> CArBuilder();</div><div class=\"line\"></div><div class=\"line\">$smallCar = $carBuilder-&gt;getSmallCar();</div><div class=\"line\">$bigCar = $carBuilder-&gt;getBigCar();</div></pre></td></tr></table></figure>\n<p>备注:</p>\n<p>建造者模式与工厂模式区别:<br>工厂模式用于批量创建那哪一种类, 建造者模式更注重构建过程。</p>\n<h2 id=\"template-method\"><a href=\"#template-method\" class=\"headerlink\" title=\"template method\"></a>template method</h2><p>模板方法:定义一个抽象类或者/父类,由继承它的子类按照需求重写它的方法实现。</p>\n<p>eg:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">publish abstract class Car()</div><div class=\"line\">&#123;</div><div class=\"line\">    //强制子类实现</div><div class=\"line\">    abstract public function run();</div><div class=\"line\">    abstract public function turnOnTheLight();</div><div class=\"line\">    //不强制</div><div class=\"line\">    public function palyMusic()</div><div class=\"line\">    &#123;</div><div class=\"line\">        return 'hengheng hahei';</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>继承</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SmaCar</span> <span class=\"keyword\">extends</span> <span class=\"title\">car</span> </span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">run</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'run'</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">public</span> funtion turnOnTheLight()</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'turnOnTheLight'</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>以上</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cjqavhgdc000mzqjfc31p1b6s","tag_id":"cjqavhgdf000ozqjfxbqbmtbp","_id":"cjqavhgdl000szqjf8smnriae"},{"post_id":"cjqavhgdv000yzqjf3gytt84x","tag_id":"cjqavhgdy0010zqjfsheqge10","_id":"cjqavhge10015zqjf645oympc"},{"post_id":"cjqavhgdw000zzqjfiqvlwztz","tag_id":"cjqavhge10014zqjfaptbbmn4","_id":"cjqavhge40019zqjf9i2zi9g5"},{"post_id":"cjqavhgdz0012zqjfuldki3eh","tag_id":"cjqavhge30018zqjfpf4oquov","_id":"cjqavhge4001bzqjf1odk24kl"},{"post_id":"cjqavhge20017zqjf6f45i1wl","tag_id":"cjqavhge4001azqjf6215peyq","_id":"cjqavhge4001czqjfl8tg2qvg"}],"Tag":[{"name":"curl","_id":"cjqavhgdf000ozqjfxbqbmtbp"},{"name":"python, shell, crond","_id":"cjqavhgdy0010zqjfsheqge10"},{"name":"压测","_id":"cjqavhge10014zqjfaptbbmn4"},{"name":"分布式,事务","_id":"cjqavhge30018zqjfpf4oquov"},{"name":"builder template method","_id":"cjqavhge4001azqjf6215peyq"}]}}