{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/b325609689e6e350fab73951048aba5b_xl.jpg","path":"b325609689e6e350fab73951048aba5b_xl.jpg","modified":1,"renderable":0},{"_id":"themes/apollo/source/favicon.png","path":"favicon.png","modified":1,"renderable":1},{"_id":"themes/apollo/source/css/apollo.css","path":"css/apollo.css","modified":1,"renderable":1},{"_id":"themes/apollo/source/font/sourcesanspro.woff","path":"font/sourcesanspro.woff","modified":1,"renderable":1},{"_id":"themes/apollo/source/font/sourcesanspro.woff2","path":"font/sourcesanspro.woff2","modified":1,"renderable":1},{"_id":"themes/apollo/source/scss/apollo.scss","path":"scss/apollo.scss","modified":1,"renderable":1},{"_id":"source/photo/img/2018-06-19/servicePic1.png","path":"photo/img/2018-06-19/servicePic1.png","modified":1,"renderable":0},{"_id":"source/photo/img/2018-06-19/servicePic3.png","path":"photo/img/2018-06-19/servicePic3.png","modified":1,"renderable":0},{"_id":"source/photo/img/2018-06-19/servicePic4.png","path":"photo/img/2018-06-19/servicePic4.png","modified":1,"renderable":0},{"_id":"source/photo/img/2018-06-19/servicePic5.png","path":"photo/img/2018-06-19/servicePic5.png","modified":1,"renderable":0},{"_id":"source/photo/img/php引用/引用后.png","path":"photo/img/php引用/引用后.png","modified":1,"renderable":0},{"_id":"source/photo/img/php引用/未引用前.png","path":"photo/img/php引用/未引用前.png","modified":1,"renderable":0},{"_id":"source/photo/img/php数据结构/php数据结构.png","path":"photo/img/php数据结构/php数据结构.png","modified":1,"renderable":0},{"_id":"source/photo/img/php数据结构/zend_stirng内存中结构.png","path":"photo/img/php数据结构/zend_stirng内存中结构.png","modified":1,"renderable":0},{"_id":"source/photo/img/php数组实现/hashtable.png","path":"photo/img/php数组实现/hashtable.png","modified":1,"renderable":0},{"_id":"source/photo/img/php数组实现/php数组具体实现.png","path":"photo/img/php数组实现/php数组具体实现.png","modified":1,"renderable":0},{"_id":"source/photo/img/php数组实现/链表冲突.png","path":"photo/img/php数组实现/链表冲突.png","modified":1,"renderable":0},{"_id":"source/photo/img/2018-06-21/DingTalk20180621202319.png","path":"photo/img/2018-06-21/DingTalk20180621202319.png","modified":1,"renderable":0},{"_id":"source/photo/img/php-curl/DingTalk20180718203726.png","path":"photo/img/php-curl/DingTalk20180718203726.png","modified":1,"renderable":0},{"_id":"source/photo/img/php-curl/DingTalk20180718204055.png","path":"photo/img/php-curl/DingTalk20180718204055.png","modified":1,"renderable":0},{"_id":"source/photo/img/php-curl/DingTalk20180718204343.png","path":"photo/img/php-curl/DingTalk20180718204343.png","modified":1,"renderable":0},{"_id":"source/photo/img/php-curl/DingTalk20180718204411.png","path":"photo/img/php-curl/DingTalk20180718204411.png","modified":1,"renderable":0},{"_id":"source/photo/img/swagger-ui/WX20180807-095949.png","path":"photo/img/swagger-ui/WX20180807-095949.png","modified":1,"renderable":0},{"_id":"source/photo/img/2018-06-19/servicePic2.png","path":"photo/img/2018-06-19/servicePic2.png","modified":1,"renderable":0}],"Cache":[{"_id":"source/.DS_Store","hash":"3eaabdda02eee428ffc22809e22321baaa7a586a","modified":1533886383988},{"_id":"source/b325609689e6e350fab73951048aba5b_xl.jpg","hash":"f42904b1e5ce91bd3fae16b21c7928301e88c9da","modified":1482149562000},{"_id":"themes/apollo/.gitignore","hash":"a006beea0877a0aa3610ee00e73f62cb1d45125b","modified":1535771705317},{"_id":"themes/apollo/LICENSE","hash":"6e31ac9076bfc8f09ae47977419eee4edfb63e5b","modified":1535771705317},{"_id":"themes/apollo/README.md","hash":"201c76d030a98578ed5a6ad5c766a7bde91c32d3","modified":1535771705318},{"_id":"themes/apollo/_config.yml","hash":"1383a12bf0623d933dc65046ed97865a14ce92a2","modified":1535772137557},{"_id":"themes/apollo/gulpfile.js","hash":"857a026b6643a2cd52c65d4ae0dc7fe9618206ee","modified":1535771705319},{"_id":"themes/apollo/package.json","hash":"eb1e76ec0b7ed6c6c7b2bd32b4f1e1bbe15800ca","modified":1535771705323},{"_id":"source/_posts/Laravel学习笔记三控制器.md","hash":"1c867dbd385d104972d3cc806eb60bf7fb239c6d","modified":1529404554664},{"_id":"source/_posts/PHPExecel.md","hash":"fb2adabb0c5f7508b2d85d7690c9a9acaa549a9f","modified":1529404561359},{"_id":"source/_posts/github.md","hash":"36c360ca820cf33d4a74ce32c30c01200fe151d2","modified":1529404514525},{"_id":"source/_posts/hexo-git-github搭建博客.md","hash":"2047cc91dcd2e0a827f18915905a1582fc6d1602","modified":1529404536887},{"_id":"source/_posts/laravel学习笔记二路由.md","hash":"78721932a88de66b020ff507091e6b6a4dbdf33b","modified":1529404554670},{"_id":"source/_posts/laravel学习笔记四中间件.md","hash":"8df579e63e5712c01a8a01c050cf2f865c4764ab","modified":1529404554667},{"_id":"source/_posts/larave学习笔记.md","hash":"249ec1664f70a32dda03ff335385ab3d5d9a1bcb","modified":1531403767558},{"_id":"source/_posts/php-curl.md","hash":"50d22a201c3f045fc0bde4667ac59ccbfdce7cf0","modified":1531918079013},{"_id":"source/_posts/php内存分配.md","hash":"292e6aca5db3f63c3e8a818ef1ab3c8775a2c9e0","modified":1536758880782},{"_id":"source/_posts/php数据结构.md","hash":"798a76bb091577954b7664ff1c1ed21d676d462c","modified":1534759780292},{"_id":"source/_posts/php数组实现.md","hash":"78550dab4394b69852d90375aa36277500e58b51","modified":1535184830366},{"_id":"source/_posts/php的&符号.md","hash":"c0715d7b859ac54ae663550afb5d752386a210e3","modified":1534086693480},{"_id":"source/_posts/php闭包.md","hash":"624afb9dedb1664a58ecc3c9d23cac483930b254","modified":1535185488893},{"_id":"source/_posts/python学习笔记一.md","hash":"f215c012e63ccb8db18a1ffbda14313b77a65475","modified":1534681864532},{"_id":"source/_posts/solr-从控制页面删除数据.md","hash":"bd5f0b1077d5a67c7eac3b7d2c03945420eb390b","modified":1529584205551},{"_id":"source/_posts/swagger.md","hash":"86b69612b3922debf5572a8734c708f4db6edd2e","modified":1533612796945},{"_id":"source/_posts/websocket订阅火币成交记录.md","hash":"fb37c982c215d2d61ba7b3eedcf552353f4b25ee","modified":1529403588515},{"_id":"source/_posts/一次HTTP请求.md","hash":"8a68ebd419e24b248fd9c4e90cbfe4ee73e02d6a","modified":1511233313000},{"_id":"source/_posts/使用sz-rz命令从服务下载上传文件.md","hash":"5b317027a11cd4e4d2133d9987bde6247436837a","modified":1531402965196},{"_id":"source/_posts/微服务数据一致性和服务可靠性.md","hash":"ca8e5213faba5e723ed1ecd838791edb70893e8b","modified":1531403670353},{"_id":"source/_posts/我不是药神.md","hash":"b4899e35cf3195b9bfd3cd68c01fea79327ed172","modified":1531494535702},{"_id":"source/_posts/设计模式1.md","hash":"e4f2fcd812ba68f7d2b25ff962591fbab647733c","modified":1533204754678},{"_id":"source/photo/.DS_Store","hash":"9e74cad0a728bae4f90fca405f5ea1b7cb08d0ef","modified":1533886964267},{"_id":"source/photo/index.md","hash":"0aa76c50ad7e4c763eecba26bff548f2666b8f7f","modified":1482154790000},{"_id":"source/photo/output.json","hash":"b6f0c8376f879349bd41590b2d9301d2faf6b38e","modified":1482153780000},{"_id":"source/photo/tool.js","hash":"9166382c1d5e9dffac1cf484503a70488c720166","modified":1482049780000},{"_id":"themes/apollo/doc/doc-en.md","hash":"409e931a444c02a57b64a0a44dde6e66c1881ca0","modified":1535771705318},{"_id":"themes/apollo/doc/doc-zh.md","hash":"2a6a81840cdaf497969268a12d8f62c98cc38103","modified":1535771705319},{"_id":"themes/apollo/languages/en.yml","hash":"ca168b190932229884db1de755ec2f793c758a16","modified":1535771705319},{"_id":"themes/apollo/languages/zh-cn.yml","hash":"22a2d16fe8c0dddb016b5325b9b9c182a1b49ae1","modified":1535771705319},{"_id":"themes/apollo/layout/archive.jade","hash":"62797414355bf4474092bc3a32726c8340820ffb","modified":1535771705320},{"_id":"themes/apollo/layout/index.jade","hash":"55f2f1b4b5364a0e09cb18e1112664c6415fb881","modified":1535771705320},{"_id":"themes/apollo/layout/post.jade","hash":"245c26244c075c3632d1545c3b228ee9d112f15d","modified":1535771705323},{"_id":"themes/apollo/source/favicon.png","hash":"a9cdcb22d1e74d5480323e19d1983de5a6873b8c","modified":1535771705324},{"_id":"source/photo/img/.DS_Store","hash":"954e71b1659f5f8b55d77daace953aa786e5fc5c","modified":1533890645729},{"_id":"themes/apollo/layout/mixins/paginator.jade","hash":"f4ee2fb61a32e199b48cf93771749edc8a007391","modified":1535771705320},{"_id":"themes/apollo/layout/mixins/post.jade","hash":"f23c6c40e14cdf16783b3c2baf736c9dce18408c","modified":1535771705320},{"_id":"themes/apollo/layout/partial/comment.jade","hash":"ff0a2c269c2434da2ac5529872f1d6184a71f96d","modified":1535771705321},{"_id":"themes/apollo/layout/partial/copyright.jade","hash":"217f8b17054e5079f2d30bb7e2e4e36c0f2161b7","modified":1535771705321},{"_id":"themes/apollo/layout/partial/head.jade","hash":"43d2db73f0247a9a3ed00ecb95b537a872b7201a","modified":1535771705321},{"_id":"themes/apollo/layout/partial/layout.jade","hash":"529c2ec06cfbc3d5b6d66dd320db50dfab5577a6","modified":1535771705322},{"_id":"themes/apollo/layout/partial/nav.jade","hash":"f4842d9d3d763fbb823d112a6f49f24cc42a0ad4","modified":1535771705322},{"_id":"themes/apollo/layout/partial/scripts.jade","hash":"6bff591ae3d1ff6750f239c4c933ad61f009f36a","modified":1535771705322},{"_id":"themes/apollo/source/css/apollo.css","hash":"e07a11a5da5fc097f023e06a85575356066afd09","modified":1535771705324},{"_id":"themes/apollo/source/font/sourcesanspro.woff","hash":"a6722c9b6439b7a020a9be3d3178970757a9265c","modified":1535771705325},{"_id":"themes/apollo/source/font/sourcesanspro.woff2","hash":"da65f527a8da65d5eb6721626d28cfdb46ab104a","modified":1535771705325},{"_id":"themes/apollo/source/scss/apollo.scss","hash":"e0092f469264b55b25e0d441274f1c812147e7d1","modified":1535771705334},{"_id":"source/photo/img/2018-06-19/servicePic1.png","hash":"d70e7b5cc208e05b58b9716a1affb8a4018fc929","modified":1529404850000},{"_id":"source/photo/img/2018-06-19/servicePic3.png","hash":"17be50dacdca270537254810c882fad0cc060cb2","modified":1529409229000},{"_id":"source/photo/img/2018-06-19/servicePic4.png","hash":"85884fa22437134430169182e3ea72df03fd7e43","modified":1529409198000},{"_id":"source/photo/img/2018-06-19/servicePic5.png","hash":"523b397346c0042541a83d0ce9d5503e78b8b6d0","modified":1529409154000},{"_id":"source/photo/img/php引用/引用后.png","hash":"9597a3a0a657405cdd1202aff6b89c6310de3764","modified":1534086413000},{"_id":"source/photo/img/php引用/未引用前.png","hash":"754834c971f01ca2808ea626deafa39e9adeee8c","modified":1534084631000},{"_id":"source/photo/img/php数据结构/php数据结构.png","hash":"9d90514461188eeded55f8428baae352753f9a68","modified":1534751806000},{"_id":"source/photo/img/php数据结构/zend_stirng内存中结构.png","hash":"ba352ab7603161e9b22bab7346c7f36b09579f1d","modified":1534758784000},{"_id":"source/photo/img/php数组实现/hashtable.png","hash":"c2e5ad35cb5d5a8b906d6e1ffb3165584511d83e","modified":1534929454000},{"_id":"source/photo/img/php数组实现/php数组具体实现.png","hash":"a3bd58cf36844ad094ef214cb2be3e6e4d2998a9","modified":1535017614000},{"_id":"source/photo/img/php数组实现/链表冲突.png","hash":"8832a1cea6dc461fdf5da067b9451f2dbdd4a09a","modified":1535019084000},{"_id":"themes/apollo/source/scss/_partial/archive-post-list.scss","hash":"d2f740a7d48349b7536777c795f82ab740836d0f","modified":1535771705326},{"_id":"themes/apollo/source/scss/_partial/base.scss","hash":"ae967b2049ecb9b8c4e139ecce32fd9fb5358ac5","modified":1535771705328},{"_id":"themes/apollo/source/scss/_partial/copyright.scss","hash":"1309667e3000037170cfbb5b8c9c65f4ffcf6814","modified":1535771705328},{"_id":"themes/apollo/source/scss/_partial/footer.scss","hash":"094aca6e52f11b139ac7980ca03fa7b9d8fc7b2f","modified":1535771705330},{"_id":"themes/apollo/source/scss/_partial/header.scss","hash":"153bde88bf8ffeae4ffd813d8cc694dd83d33d94","modified":1535771705331},{"_id":"themes/apollo/source/scss/_partial/home-post-list.scss","hash":"6b5c59f3d2295944f934aee2c1156012a3306d5d","modified":1535771705331},{"_id":"themes/apollo/source/scss/_partial/mq.scss","hash":"fc5dda52cfbb10e27e2471e03f4606fb3d588225","modified":1535771705332},{"_id":"themes/apollo/source/scss/_partial/normalize.scss","hash":"fd0b27bed6f103ea95b08f698ea663ff576dbcf1","modified":1535771705332},{"_id":"themes/apollo/source/scss/_partial/post.scss","hash":"1998f207541a2590a5624549f96c5e65d136690a","modified":1535771705333},{"_id":"source/photo/img/2018-06-21/DingTalk20180621202319.png","hash":"5dfa9cb97017ed029184472ecbb11a9142704bed","modified":1529583800000},{"_id":"source/photo/img/php-curl/DingTalk20180718203726.png","hash":"c7f3e0a5e85439f98b330994c35ef3944254e5df","modified":1531917460000},{"_id":"source/photo/img/php-curl/DingTalk20180718204055.png","hash":"ebe305b6b44223e9e5d2761ad257d252b4dbfec0","modified":1531917656000},{"_id":"source/photo/img/php-curl/DingTalk20180718204343.png","hash":"2bea4819d0eab6d599bf82f1a06d16787f94ae66","modified":1531917827000},{"_id":"source/photo/img/php-curl/DingTalk20180718204411.png","hash":"faf427a5248d8466352ca960417ff6c97940ceec","modified":1531917852000},{"_id":"source/photo/img/swagger-ui/WX20180807-095949.png","hash":"da067d9351db2e6e4a28343c1cb5c2ca2c8cab1e","modified":1533607195437},{"_id":"source/photo/img/2018-06-19/servicePic2.png","hash":"eb24df666df5261869eee0f24b7285485789bd83","modified":1529409251000}],"Category":[],"Data":[],"Page":[{"title":"相册","noDate":"true","_content":"<link type=\"text/css\" href=\"/fancybox/jquery.fancybox.css\" rel=\"stylesheet\">\n<div class=\"instagram\"><section class=\"archives album\"><ul class=\"img-box-ul\"></ul></section></div>\n\t\n</div>\n<script src=\"/js/photo.js\"></script>\n<script src=\"/js/jquery-3.1.1.min.js\"></script>\n<script type=\"text/javascript\">\nfunction test() {\n\t$.getJSON(\"/photo/output.json\", function (data) {\n\t\tvar li=\"\";\n    \t for(i=0;i<=data.length-1;i++){\n    \t \tli += '<div style=\"width:250px;height:250px;float:left;margin-left:10px\"><img src=\"https://raw.githubusercontent.com/MaxieLj/blog/master/photos/' + data[i] + '\"  style=\"width:100%; height:100%;float:left\"/></div>'\n                   ;\n    \t }\n       li+='<div style=\"clear:both\"></div>'\n    \t $('.instagram').append(li);   \t\n    });\n    \n}\ntest();\n\n\t\n</script>","source":"photo/index.md","raw":"title: 相册\nnoDate: 'true'\n---\n<link type=\"text/css\" href=\"/fancybox/jquery.fancybox.css\" rel=\"stylesheet\">\n<div class=\"instagram\"><section class=\"archives album\"><ul class=\"img-box-ul\"></ul></section></div>\n\t\n</div>\n<script src=\"/js/photo.js\"></script>\n<script src=\"/js/jquery-3.1.1.min.js\"></script>\n<script type=\"text/javascript\">\nfunction test() {\n\t$.getJSON(\"/photo/output.json\", function (data) {\n\t\tvar li=\"\";\n    \t for(i=0;i<=data.length-1;i++){\n    \t \tli += '<div style=\"width:250px;height:250px;float:left;margin-left:10px\"><img src=\"https://raw.githubusercontent.com/MaxieLj/blog/master/photos/' + data[i] + '\"  style=\"width:100%; height:100%;float:left\"/></div>'\n                   ;\n    \t }\n       li+='<div style=\"clear:both\"></div>'\n    \t $('.instagram').append(li);   \t\n    });\n    \n}\ntest();\n\n\t\n</script>","date":"2017-11-16T14:35:24.000Z","updated":"2016-12-19T13:39:50.000Z","path":"photo/index.html","comments":1,"layout":"page","_id":"cjlz6uwgj00010uww9gorh3fl","content":"<p><link type=\"text/css\" href=\"/fancybox/jquery.fancybox.css\" rel=\"stylesheet\"></p>\n<div class=\"instagram\"><section class=\"archives album\"><ul class=\"img-box-ul\"></ul></section></div>\n\n<p></p>\n<script src=\"/js/photo.js\"></script>\n<script src=\"/js/jquery-3.1.1.min.js\"></script>\n<script type=\"text/javascript\">\nfunction test() {\n    $.getJSON(\"/photo/output.json\", function (data) {\n        var li=\"\";\n         for(i=0;i<=data.length-1;i++){\n             li += '<div style=\"width:250px;height:250px;float:left;margin-left:10px\"><img src=\"https://raw.githubusercontent.com/MaxieLj/blog/master/photos/' + data[i] + '\"  style=\"width:100%; height:100%;float:left\"/></div>'\n                   ;\n         }\n       li+='<div style=\"clear:both\"></div>'\n         $('.instagram').append(li);       \n    });\n\n}\ntest();\n\n\n</script>","site":{"data":{}},"excerpt":"","more":"<p><link type=\"text/css\" href=\"/fancybox/jquery.fancybox.css\" rel=\"stylesheet\"></p>\n<div class=\"instagram\"><section class=\"archives album\"><ul class=\"img-box-ul\"></ul></section></div>\n\n<p></p>\n<script src=\"/js/photo.js\"></script>\n<script src=\"/js/jquery-3.1.1.min.js\"></script>\n<script type=\"text/javascript\">\nfunction test() {\n    $.getJSON(\"/photo/output.json\", function (data) {\n        var li=\"\";\n         for(i=0;i<=data.length-1;i++){\n             li += '<div style=\"width:250px;height:250px;float:left;margin-left:10px\"><img src=\"https://raw.githubusercontent.com/MaxieLj/blog/master/photos/' + data[i] + '\"  style=\"width:100%; height:100%;float:left\"/></div>'\n                   ;\n         }\n       li+='<div style=\"clear:both\"></div>'\n         $('.instagram').append(li);       \n    });\n\n}\ntest();\n\n\n</script>"},{"_content":"[\n\t\"219305422169140726.jpg\",\n\t\"326320136918309177.jpg\",\n\t\"832021159053859552.jpg\",\n\t\"844103819611894943.jpg\"\n]","source":"photo/output.json","raw":"[\n\t\"219305422169140726.jpg\",\n\t\"326320136918309177.jpg\",\n\t\"832021159053859552.jpg\",\n\t\"844103819611894943.jpg\"\n]","date":"2017-11-16T14:35:24.000Z","updated":"2016-12-19T13:23:00.000Z","path":"photo/output.json","layout":"false","title":"","comments":1,"_id":"cjlz6uwgl00030uwwmfsaj49r","content":"[\"219305422169140726.jpg\",\"326320136918309177.jpg\",\"832021159053859552.jpg\",\"844103819611894943.jpg\"]","site":{"data":{}},"excerpt":"","more":"[\"219305422169140726.jpg\",\"326320136918309177.jpg\",\"832021159053859552.jpg\",\"844103819611894943.jpg\"]"},{"_content":"\"use strict\";\n    const fs = require(\"fs\");\n    const path = \"../../photos\";\n\n    fs.readdir(path, function (err, files) {\n        if (err) {\n            return;\n        }\n        let arr = [];\n        (function iterator(index) {\n            if (index == files.length) {\n                fs.writeFile(\"output.json\", JSON.stringify(arr, null, \"\\t\"));\n                return;\n            }\n\n            fs.stat(path + \"/\" + files[index], function (err, stats) {\n                if (err) {\n                    return;\n                }\n                if (stats.isFile()) {\n                    arr.push(files[index]);\n                }\n                iterator(index + 1);\n            })\n        }(0));\n    });","source":"photo/tool.js","raw":"\"use strict\";\n    const fs = require(\"fs\");\n    const path = \"../../photos\";\n\n    fs.readdir(path, function (err, files) {\n        if (err) {\n            return;\n        }\n        let arr = [];\n        (function iterator(index) {\n            if (index == files.length) {\n                fs.writeFile(\"output.json\", JSON.stringify(arr, null, \"\\t\"));\n                return;\n            }\n\n            fs.stat(path + \"/\" + files[index], function (err, stats) {\n                if (err) {\n                    return;\n                }\n                if (stats.isFile()) {\n                    arr.push(files[index]);\n                }\n                iterator(index + 1);\n            })\n        }(0));\n    });","date":"2017-11-16T14:35:24.000Z","updated":"2016-12-18T08:29:40.000Z","path":"photo/tool.js","layout":"false","title":"","comments":1,"_id":"cjlz6uwgo00050uww9v0200ud","content":"\"use strict\";\n    const fs = require(\"fs\");\n    const path = \"../../photos\";\n\n    fs.readdir(path, function (err, files) {\n        if (err) {\n            return;\n        }\n        let arr = [];\n        (function iterator(index) {\n            if (index == files.length) {\n                fs.writeFile(\"output.json\", JSON.stringify(arr, null, \"\\t\"));\n                return;\n            }\n\n            fs.stat(path + \"/\" + files[index], function (err, stats) {\n                if (err) {\n                    return;\n                }\n                if (stats.isFile()) {\n                    arr.push(files[index]);\n                }\n                iterator(index + 1);\n            })\n        }(0));\n    });","site":{"data":{}},"excerpt":"","more":"\"use strict\";\n    const fs = require(\"fs\");\n    const path = \"../../photos\";\n\n    fs.readdir(path, function (err, files) {\n        if (err) {\n            return;\n        }\n        let arr = [];\n        (function iterator(index) {\n            if (index == files.length) {\n                fs.writeFile(\"output.json\", JSON.stringify(arr, null, \"\\t\"));\n                return;\n            }\n\n            fs.stat(path + \"/\" + files[index], function (err, stats) {\n                if (err) {\n                    return;\n                }\n                if (stats.isFile()) {\n                    arr.push(files[index]);\n                }\n                iterator(index + 1);\n            })\n        }(0));\n    });"}],"Post":[{"title":"Laravel学习笔记三控制器","date":"2016-02-16T13:26:25.000Z","_content":"\n\n\n标签（空格分隔）： Laravel\n\n---\n\n关于laravel我们学习了如何配置laravel、以及路由。接下来让然是至关重要的控制器了。\n在MVC框架中，C是一个很重要的环节。用来处理我们的数据逻辑。\n\n我们之前在学习路由是后，是给Route::get()第二个参数一个闭包函数。当然能处理一些数据逻辑，但是如果我们所有的数据逻辑都放在路由文件，那么我们路由文件将会特别臃肿，而且我们的代码耦合度会特别高。这也就回到php面向过程的时代，这不是我们所想要的。\n\n在我们的面向对象的思维中，是把不同功能的代码封装成一个一个类，各自处理自己流水线上的数据。所以我们要通过路由把必要的参数传给我们的控制器去处理。\n\n在这里看到一个小插曲，Laravel官方文档说在上线前使用`php artisan route:cache`会让路由速度快上一百倍，我不知道这是不是吹牛逼。废话不多说我们开始我们的控制器学习吧。\n\n###控制器到路由###\n\n 在第一步我们需要把访问到路由的请求转到控制器。在Laravel中使用下边代码即可：\n ```Route::get('user/{id}', 'UserController@show');```\n  我们可以把客户的请求跳转到 App/Http/Controller下的UserController的show方法。\n  \n  在这里laravel给我们提供很好的工具让我们来创建控制器。使用`php artisan make:controller NameController` 。默认会出现App/Http/Controller 路径下。并且还有一些级基础代码。\n```<?php\n\nnamespace App\\Http\\Controllers;\n\nuse Illuminate\\Http\\Request;\nuse App\\Http\\Controllers\\Controller;\n\nclass NameController extends Controller\n{\n    //\n}\n```\n\n###传递参数到控制器###\n\n我们看到在自动生成代码中我们看到引入了`Request` 类。这个类要讲起来其实可以单独讲，但是我们学到控制器就稍微讲一下，不然没法传递参数。如下\n```\n public function index(Request $request){\n    \t$name = $request->input('name');\n\n    }\n```\n用该方法可以获取到我们想要的参数。\n\n\n","source":"_posts/Laravel学习笔记三控制器.md","raw":"---\ntitle: 'Laravel学习笔记三控制器'\ndate: 2016-02-16 21:26:25\ntags:\n---\n\n\n\n标签（空格分隔）： Laravel\n\n---\n\n关于laravel我们学习了如何配置laravel、以及路由。接下来让然是至关重要的控制器了。\n在MVC框架中，C是一个很重要的环节。用来处理我们的数据逻辑。\n\n我们之前在学习路由是后，是给Route::get()第二个参数一个闭包函数。当然能处理一些数据逻辑，但是如果我们所有的数据逻辑都放在路由文件，那么我们路由文件将会特别臃肿，而且我们的代码耦合度会特别高。这也就回到php面向过程的时代，这不是我们所想要的。\n\n在我们的面向对象的思维中，是把不同功能的代码封装成一个一个类，各自处理自己流水线上的数据。所以我们要通过路由把必要的参数传给我们的控制器去处理。\n\n在这里看到一个小插曲，Laravel官方文档说在上线前使用`php artisan route:cache`会让路由速度快上一百倍，我不知道这是不是吹牛逼。废话不多说我们开始我们的控制器学习吧。\n\n###控制器到路由###\n\n 在第一步我们需要把访问到路由的请求转到控制器。在Laravel中使用下边代码即可：\n ```Route::get('user/{id}', 'UserController@show');```\n  我们可以把客户的请求跳转到 App/Http/Controller下的UserController的show方法。\n  \n  在这里laravel给我们提供很好的工具让我们来创建控制器。使用`php artisan make:controller NameController` 。默认会出现App/Http/Controller 路径下。并且还有一些级基础代码。\n```<?php\n\nnamespace App\\Http\\Controllers;\n\nuse Illuminate\\Http\\Request;\nuse App\\Http\\Controllers\\Controller;\n\nclass NameController extends Controller\n{\n    //\n}\n```\n\n###传递参数到控制器###\n\n我们看到在自动生成代码中我们看到引入了`Request` 类。这个类要讲起来其实可以单独讲，但是我们学到控制器就稍微讲一下，不然没法传递参数。如下\n```\n public function index(Request $request){\n    \t$name = $request->input('name');\n\n    }\n```\n用该方法可以获取到我们想要的参数。\n\n\n","slug":"Laravel学习笔记三控制器","published":1,"updated":"2018-06-19T10:35:54.664Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlz6uwgf00000uwwwkarelzd","content":"<p>标签（空格分隔）： Laravel</p>\n<hr>\n<p>关于laravel我们学习了如何配置laravel、以及路由。接下来让然是至关重要的控制器了。<br>在MVC框架中，C是一个很重要的环节。用来处理我们的数据逻辑。</p>\n<p>我们之前在学习路由是后，是给Route::get()第二个参数一个闭包函数。当然能处理一些数据逻辑，但是如果我们所有的数据逻辑都放在路由文件，那么我们路由文件将会特别臃肿，而且我们的代码耦合度会特别高。这也就回到php面向过程的时代，这不是我们所想要的。</p>\n<p>在我们的面向对象的思维中，是把不同功能的代码封装成一个一个类，各自处理自己流水线上的数据。所以我们要通过路由把必要的参数传给我们的控制器去处理。</p>\n<p>在这里看到一个小插曲，Laravel官方文档说在上线前使用<code>php artisan route:cache</code>会让路由速度快上一百倍，我不知道这是不是吹牛逼。废话不多说我们开始我们的控制器学习吧。</p>\n<p>###控制器到路由###</p>\n<p> 在第一步我们需要把访问到路由的请求转到控制器。在Laravel中使用下边代码即可：<br> <figure class=\"highlight plain\"><figcaption><span>'UserController@show');```</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">  我们可以把客户的请求跳转到 App/Http/Controller下的UserController的show方法。</div><div class=\"line\">  </div><div class=\"line\">  在这里laravel给我们提供很好的工具让我们来创建控制器。使用`php artisan make:controller NameController` 。默认会出现App/Http/Controller 路径下。并且还有一些级基础代码。</div><div class=\"line\">```&lt;?php</div><div class=\"line\"></div><div class=\"line\">namespace App\\Http\\Controllers;</div><div class=\"line\"></div><div class=\"line\">use Illuminate\\Http\\Request;</div><div class=\"line\">use App\\Http\\Controllers\\Controller;</div><div class=\"line\"></div><div class=\"line\">class NameController extends Controller</div><div class=\"line\">&#123;</div><div class=\"line\">    //</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>###传递参数到控制器###</p>\n<p>我们看到在自动生成代码中我们看到引入了<code>Request</code> 类。这个类要讲起来其实可以单独讲，但是我们学到控制器就稍微讲一下，不然没法传递参数。如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">public function index(Request $request)&#123;</div><div class=\"line\">   \t$name = $request-&gt;input(&apos;name&apos;);</div><div class=\"line\"></div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p>用该方法可以获取到我们想要的参数。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>标签（空格分隔）： Laravel</p>\n<hr>\n<p>关于laravel我们学习了如何配置laravel、以及路由。接下来让然是至关重要的控制器了。<br>在MVC框架中，C是一个很重要的环节。用来处理我们的数据逻辑。</p>\n<p>我们之前在学习路由是后，是给Route::get()第二个参数一个闭包函数。当然能处理一些数据逻辑，但是如果我们所有的数据逻辑都放在路由文件，那么我们路由文件将会特别臃肿，而且我们的代码耦合度会特别高。这也就回到php面向过程的时代，这不是我们所想要的。</p>\n<p>在我们的面向对象的思维中，是把不同功能的代码封装成一个一个类，各自处理自己流水线上的数据。所以我们要通过路由把必要的参数传给我们的控制器去处理。</p>\n<p>在这里看到一个小插曲，Laravel官方文档说在上线前使用<code>php artisan route:cache</code>会让路由速度快上一百倍，我不知道这是不是吹牛逼。废话不多说我们开始我们的控制器学习吧。</p>\n<p>###控制器到路由###</p>\n<p> 在第一步我们需要把访问到路由的请求转到控制器。在Laravel中使用下边代码即可：<br> <figure class=\"highlight plain\"><figcaption><span>'UserController@show');```</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">  我们可以把客户的请求跳转到 App/Http/Controller下的UserController的show方法。</div><div class=\"line\">  </div><div class=\"line\">  在这里laravel给我们提供很好的工具让我们来创建控制器。使用`php artisan make:controller NameController` 。默认会出现App/Http/Controller 路径下。并且还有一些级基础代码。</div><div class=\"line\">```&lt;?php</div><div class=\"line\"></div><div class=\"line\">namespace App\\Http\\Controllers;</div><div class=\"line\"></div><div class=\"line\">use Illuminate\\Http\\Request;</div><div class=\"line\">use App\\Http\\Controllers\\Controller;</div><div class=\"line\"></div><div class=\"line\">class NameController extends Controller</div><div class=\"line\">&#123;</div><div class=\"line\">    //</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>###传递参数到控制器###</p>\n<p>我们看到在自动生成代码中我们看到引入了<code>Request</code> 类。这个类要讲起来其实可以单独讲，但是我们学到控制器就稍微讲一下，不然没法传递参数。如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">public function index(Request $request)&#123;</div><div class=\"line\">   \t$name = $request-&gt;input(&apos;name&apos;);</div><div class=\"line\"></div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p>用该方法可以获取到我们想要的参数。</p>\n"},{"title":"PHPExcel","date":"2017-10-30T02:42:03.000Z","_content":"# PHPEXcel\n----\n## 背景\n在工作中我们肯定会遇到由于后端管理系统不完善，而导致运营同学无法从管理系统获取想要的数据。亦或程序设计之初没有考虑到完善，导致一些必要的数据没有录入，希望后续补充批量导入。在这个时候我们就需要获取从数据批量导出数据或者导入数据，而无论导入还是导出数据，我们都希望是Excel格式。\n\n## 根据Execel生成sql\n\n\n1.PHPExcel\n\n准备：我们需要从github获取PHPExcel工具包。地址 `https://github.com/PHPOffice/PHPExcel` \n\n打开PHPExcel文件夹，看下代码结构。我们需要的主要代码在`Classes`文件下，我们只需要引入`PHPExcel.php`即可。\n\n代码实现\n```php\ninclude './code/web_code/PHPExcel/Classes/PHPExcel.php';//引入必要的第三方依赖\n$inputFileType = 'Excel2007';//设置Excel的版本\n$inputFileName = './targe.xlsx';// 需要导入文件地址\n\n\n$currentsheet = $objPHPExcel->getSheet(0); //选择Excel页\n$maxColumn = $currentsheet->getHighestColumn(); //获取当前页的最大列数\n$maxRow = $currentsheet->getHighestRow(); //获取当前页的最大行数\n\n//循环拼接sql\nfor ($i=2; $i< $maxRow; $i++) { \n    //过滤条件\n     if(is_null($currentsheet->getCell('J'.$i)->getValue())||$currentsheet->getCell('J'.$i)->getValue()== '已退款' || $currentsheet->getCell('J'.$i)->getValue() == '待退款' || $currentsheet->getCell('J'.$i)->getValue() == '已经申请退款' || $currentsheet->getCell('J'.$i)->getValue() == '退了' ||$currentsheet->getCell('J'.$i)->getValue() == '没有电话' || $currentsheet->getCell('J'.$i)->getValue() == '0') {\n\n        continue;\n     }\n     //过滤条件\n     if(!is_numeric($currentsheet->getCell('J'.$i)->getValue())||$currentsheet->getCell('J'.$i)->getValue() == '0' || empty($currentsheet->getCell('J'.$i)->getValue()) || $currentsheet->getCell('J'.$i)->getValue() == '') {\n        continue;\n     }\n\n    $sql_bd_name .= ' WHEN '.$currentsheet->getCell('A'.$i)->getValue().' THEN '.$currentsheet->getCell('J'.$i)->getValue();\n    $sql_bd_name .= ','.$currentsheet->getCell('A'.$i)->getValue();\n    $res +=1;\n}\n\n//输入，当然这里无论我们用fopen或者其他的输入当属都可以，这里我把结果打到了控制台。\necho $sql_bd_name;\necho $res \n\n```\n\n\n我们生成的sql是`WHEN`  `THEN`的样式，完整语句应该是 update tablename set seller_jn_activity CASE id\nWHEN 1 TEHN 2 \nEND,\nbd_jn_activity CASE id\nwhen 2 THEN 3\nEND\nWHERE in (1,2,3)\n\n发现数据清洗其实是一件很麻烦的事。","source":"_posts/PHPExecel.md","raw":"---\ntitle: PHPExcel\ndate: 2017-10-30 10:42:03\ntags:\n---\n# PHPEXcel\n----\n## 背景\n在工作中我们肯定会遇到由于后端管理系统不完善，而导致运营同学无法从管理系统获取想要的数据。亦或程序设计之初没有考虑到完善，导致一些必要的数据没有录入，希望后续补充批量导入。在这个时候我们就需要获取从数据批量导出数据或者导入数据，而无论导入还是导出数据，我们都希望是Excel格式。\n\n## 根据Execel生成sql\n\n\n1.PHPExcel\n\n准备：我们需要从github获取PHPExcel工具包。地址 `https://github.com/PHPOffice/PHPExcel` \n\n打开PHPExcel文件夹，看下代码结构。我们需要的主要代码在`Classes`文件下，我们只需要引入`PHPExcel.php`即可。\n\n代码实现\n```php\ninclude './code/web_code/PHPExcel/Classes/PHPExcel.php';//引入必要的第三方依赖\n$inputFileType = 'Excel2007';//设置Excel的版本\n$inputFileName = './targe.xlsx';// 需要导入文件地址\n\n\n$currentsheet = $objPHPExcel->getSheet(0); //选择Excel页\n$maxColumn = $currentsheet->getHighestColumn(); //获取当前页的最大列数\n$maxRow = $currentsheet->getHighestRow(); //获取当前页的最大行数\n\n//循环拼接sql\nfor ($i=2; $i< $maxRow; $i++) { \n    //过滤条件\n     if(is_null($currentsheet->getCell('J'.$i)->getValue())||$currentsheet->getCell('J'.$i)->getValue()== '已退款' || $currentsheet->getCell('J'.$i)->getValue() == '待退款' || $currentsheet->getCell('J'.$i)->getValue() == '已经申请退款' || $currentsheet->getCell('J'.$i)->getValue() == '退了' ||$currentsheet->getCell('J'.$i)->getValue() == '没有电话' || $currentsheet->getCell('J'.$i)->getValue() == '0') {\n\n        continue;\n     }\n     //过滤条件\n     if(!is_numeric($currentsheet->getCell('J'.$i)->getValue())||$currentsheet->getCell('J'.$i)->getValue() == '0' || empty($currentsheet->getCell('J'.$i)->getValue()) || $currentsheet->getCell('J'.$i)->getValue() == '') {\n        continue;\n     }\n\n    $sql_bd_name .= ' WHEN '.$currentsheet->getCell('A'.$i)->getValue().' THEN '.$currentsheet->getCell('J'.$i)->getValue();\n    $sql_bd_name .= ','.$currentsheet->getCell('A'.$i)->getValue();\n    $res +=1;\n}\n\n//输入，当然这里无论我们用fopen或者其他的输入当属都可以，这里我把结果打到了控制台。\necho $sql_bd_name;\necho $res \n\n```\n\n\n我们生成的sql是`WHEN`  `THEN`的样式，完整语句应该是 update tablename set seller_jn_activity CASE id\nWHEN 1 TEHN 2 \nEND,\nbd_jn_activity CASE id\nwhen 2 THEN 3\nEND\nWHERE in (1,2,3)\n\n发现数据清洗其实是一件很麻烦的事。","slug":"PHPExecel","published":1,"updated":"2018-06-19T10:36:01.359Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlz6uwgj00020uwww6i38n6t","content":"<h1 id=\"PHPEXcel\"><a href=\"#PHPEXcel\" class=\"headerlink\" title=\"PHPEXcel\"></a>PHPEXcel</h1><hr>\n<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>在工作中我们肯定会遇到由于后端管理系统不完善，而导致运营同学无法从管理系统获取想要的数据。亦或程序设计之初没有考虑到完善，导致一些必要的数据没有录入，希望后续补充批量导入。在这个时候我们就需要获取从数据批量导出数据或者导入数据，而无论导入还是导出数据，我们都希望是Excel格式。</p>\n<h2 id=\"根据Execel生成sql\"><a href=\"#根据Execel生成sql\" class=\"headerlink\" title=\"根据Execel生成sql\"></a>根据Execel生成sql</h2><p>1.PHPExcel</p>\n<p>准备：我们需要从github获取PHPExcel工具包。地址 <code>https://github.com/PHPOffice/PHPExcel</code> </p>\n<p>打开PHPExcel文件夹，看下代码结构。我们需要的主要代码在<code>Classes</code>文件下，我们只需要引入<code>PHPExcel.php</code>即可。</p>\n<p>代码实现<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">include</span> <span class=\"string\">'./code/web_code/PHPExcel/Classes/PHPExcel.php'</span>;<span class=\"comment\">//引入必要的第三方依赖</span></div><div class=\"line\">$inputFileType = <span class=\"string\">'Excel2007'</span>;<span class=\"comment\">//设置Excel的版本</span></div><div class=\"line\">$inputFileName = <span class=\"string\">'./targe.xlsx'</span>;<span class=\"comment\">// 需要导入文件地址</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">$currentsheet = $objPHPExcel-&gt;getSheet(<span class=\"number\">0</span>); <span class=\"comment\">//选择Excel页</span></div><div class=\"line\">$maxColumn = $currentsheet-&gt;getHighestColumn(); <span class=\"comment\">//获取当前页的最大列数</span></div><div class=\"line\">$maxRow = $currentsheet-&gt;getHighestRow(); <span class=\"comment\">//获取当前页的最大行数</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//循环拼接sql</span></div><div class=\"line\"><span class=\"keyword\">for</span> ($i=<span class=\"number\">2</span>; $i&lt; $maxRow; $i++) &#123; </div><div class=\"line\">    <span class=\"comment\">//过滤条件</span></div><div class=\"line\">     <span class=\"keyword\">if</span>(is_null($currentsheet-&gt;getCell(<span class=\"string\">'J'</span>.$i)-&gt;getValue())||$currentsheet-&gt;getCell(<span class=\"string\">'J'</span>.$i)-&gt;getValue()== <span class=\"string\">'已退款'</span> || $currentsheet-&gt;getCell(<span class=\"string\">'J'</span>.$i)-&gt;getValue() == <span class=\"string\">'待退款'</span> || $currentsheet-&gt;getCell(<span class=\"string\">'J'</span>.$i)-&gt;getValue() == <span class=\"string\">'已经申请退款'</span> || $currentsheet-&gt;getCell(<span class=\"string\">'J'</span>.$i)-&gt;getValue() == <span class=\"string\">'退了'</span> ||$currentsheet-&gt;getCell(<span class=\"string\">'J'</span>.$i)-&gt;getValue() == <span class=\"string\">'没有电话'</span> || $currentsheet-&gt;getCell(<span class=\"string\">'J'</span>.$i)-&gt;getValue() == <span class=\"string\">'0'</span>) &#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">continue</span>;</div><div class=\"line\">     &#125;</div><div class=\"line\">     <span class=\"comment\">//过滤条件</span></div><div class=\"line\">     <span class=\"keyword\">if</span>(!is_numeric($currentsheet-&gt;getCell(<span class=\"string\">'J'</span>.$i)-&gt;getValue())||$currentsheet-&gt;getCell(<span class=\"string\">'J'</span>.$i)-&gt;getValue() == <span class=\"string\">'0'</span> || <span class=\"keyword\">empty</span>($currentsheet-&gt;getCell(<span class=\"string\">'J'</span>.$i)-&gt;getValue()) || $currentsheet-&gt;getCell(<span class=\"string\">'J'</span>.$i)-&gt;getValue() == <span class=\"string\">''</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">continue</span>;</div><div class=\"line\">     &#125;</div><div class=\"line\"></div><div class=\"line\">    $sql_bd_name .= <span class=\"string\">' WHEN '</span>.$currentsheet-&gt;getCell(<span class=\"string\">'A'</span>.$i)-&gt;getValue().<span class=\"string\">' THEN '</span>.$currentsheet-&gt;getCell(<span class=\"string\">'J'</span>.$i)-&gt;getValue();</div><div class=\"line\">    $sql_bd_name .= <span class=\"string\">','</span>.$currentsheet-&gt;getCell(<span class=\"string\">'A'</span>.$i)-&gt;getValue();</div><div class=\"line\">    $res +=<span class=\"number\">1</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//输入，当然这里无论我们用fopen或者其他的输入当属都可以，这里我把结果打到了控制台。</span></div><div class=\"line\"><span class=\"keyword\">echo</span> $sql_bd_name;</div><div class=\"line\"><span class=\"keyword\">echo</span> $res</div></pre></td></tr></table></figure></p>\n<p>我们生成的sql是<code>WHEN</code>  <code>THEN</code>的样式，完整语句应该是 update tablename set seller_jn_activity CASE id<br>WHEN 1 TEHN 2<br>END,<br>bd_jn_activity CASE id<br>when 2 THEN 3<br>END<br>WHERE in (1,2,3)</p>\n<p>发现数据清洗其实是一件很麻烦的事。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"PHPEXcel\"><a href=\"#PHPEXcel\" class=\"headerlink\" title=\"PHPEXcel\"></a>PHPEXcel</h1><hr>\n<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>在工作中我们肯定会遇到由于后端管理系统不完善，而导致运营同学无法从管理系统获取想要的数据。亦或程序设计之初没有考虑到完善，导致一些必要的数据没有录入，希望后续补充批量导入。在这个时候我们就需要获取从数据批量导出数据或者导入数据，而无论导入还是导出数据，我们都希望是Excel格式。</p>\n<h2 id=\"根据Execel生成sql\"><a href=\"#根据Execel生成sql\" class=\"headerlink\" title=\"根据Execel生成sql\"></a>根据Execel生成sql</h2><p>1.PHPExcel</p>\n<p>准备：我们需要从github获取PHPExcel工具包。地址 <code>https://github.com/PHPOffice/PHPExcel</code> </p>\n<p>打开PHPExcel文件夹，看下代码结构。我们需要的主要代码在<code>Classes</code>文件下，我们只需要引入<code>PHPExcel.php</code>即可。</p>\n<p>代码实现<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">include</span> <span class=\"string\">'./code/web_code/PHPExcel/Classes/PHPExcel.php'</span>;<span class=\"comment\">//引入必要的第三方依赖</span></div><div class=\"line\">$inputFileType = <span class=\"string\">'Excel2007'</span>;<span class=\"comment\">//设置Excel的版本</span></div><div class=\"line\">$inputFileName = <span class=\"string\">'./targe.xlsx'</span>;<span class=\"comment\">// 需要导入文件地址</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">$currentsheet = $objPHPExcel-&gt;getSheet(<span class=\"number\">0</span>); <span class=\"comment\">//选择Excel页</span></div><div class=\"line\">$maxColumn = $currentsheet-&gt;getHighestColumn(); <span class=\"comment\">//获取当前页的最大列数</span></div><div class=\"line\">$maxRow = $currentsheet-&gt;getHighestRow(); <span class=\"comment\">//获取当前页的最大行数</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//循环拼接sql</span></div><div class=\"line\"><span class=\"keyword\">for</span> ($i=<span class=\"number\">2</span>; $i&lt; $maxRow; $i++) &#123; </div><div class=\"line\">    <span class=\"comment\">//过滤条件</span></div><div class=\"line\">     <span class=\"keyword\">if</span>(is_null($currentsheet-&gt;getCell(<span class=\"string\">'J'</span>.$i)-&gt;getValue())||$currentsheet-&gt;getCell(<span class=\"string\">'J'</span>.$i)-&gt;getValue()== <span class=\"string\">'已退款'</span> || $currentsheet-&gt;getCell(<span class=\"string\">'J'</span>.$i)-&gt;getValue() == <span class=\"string\">'待退款'</span> || $currentsheet-&gt;getCell(<span class=\"string\">'J'</span>.$i)-&gt;getValue() == <span class=\"string\">'已经申请退款'</span> || $currentsheet-&gt;getCell(<span class=\"string\">'J'</span>.$i)-&gt;getValue() == <span class=\"string\">'退了'</span> ||$currentsheet-&gt;getCell(<span class=\"string\">'J'</span>.$i)-&gt;getValue() == <span class=\"string\">'没有电话'</span> || $currentsheet-&gt;getCell(<span class=\"string\">'J'</span>.$i)-&gt;getValue() == <span class=\"string\">'0'</span>) &#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">continue</span>;</div><div class=\"line\">     &#125;</div><div class=\"line\">     <span class=\"comment\">//过滤条件</span></div><div class=\"line\">     <span class=\"keyword\">if</span>(!is_numeric($currentsheet-&gt;getCell(<span class=\"string\">'J'</span>.$i)-&gt;getValue())||$currentsheet-&gt;getCell(<span class=\"string\">'J'</span>.$i)-&gt;getValue() == <span class=\"string\">'0'</span> || <span class=\"keyword\">empty</span>($currentsheet-&gt;getCell(<span class=\"string\">'J'</span>.$i)-&gt;getValue()) || $currentsheet-&gt;getCell(<span class=\"string\">'J'</span>.$i)-&gt;getValue() == <span class=\"string\">''</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">continue</span>;</div><div class=\"line\">     &#125;</div><div class=\"line\"></div><div class=\"line\">    $sql_bd_name .= <span class=\"string\">' WHEN '</span>.$currentsheet-&gt;getCell(<span class=\"string\">'A'</span>.$i)-&gt;getValue().<span class=\"string\">' THEN '</span>.$currentsheet-&gt;getCell(<span class=\"string\">'J'</span>.$i)-&gt;getValue();</div><div class=\"line\">    $sql_bd_name .= <span class=\"string\">','</span>.$currentsheet-&gt;getCell(<span class=\"string\">'A'</span>.$i)-&gt;getValue();</div><div class=\"line\">    $res +=<span class=\"number\">1</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//输入，当然这里无论我们用fopen或者其他的输入当属都可以，这里我把结果打到了控制台。</span></div><div class=\"line\"><span class=\"keyword\">echo</span> $sql_bd_name;</div><div class=\"line\"><span class=\"keyword\">echo</span> $res</div></pre></td></tr></table></figure></p>\n<p>我们生成的sql是<code>WHEN</code>  <code>THEN</code>的样式，完整语句应该是 update tablename set seller_jn_activity CASE id<br>WHEN 1 TEHN 2<br>END,<br>bd_jn_activity CASE id<br>when 2 THEN 3<br>END<br>WHERE in (1,2,3)</p>\n<p>发现数据清洗其实是一件很麻烦的事。</p>\n"},{"layout":"git","title":"github","date":"2015-06-26T14:04:09.000Z","_content":"#关于Git的使用  \n------\n\n## Git的安装和使用 ##\n 准备工作：\n> * 下载git 客户端 [链接地址][1]\n\n下载完毕后，安装一路一下一步。\n安装完成之后我们开始使用Git\n使用前我们需要告诉Git，我们是谁。所以需要配置一些信息，来确定我们的身份。\n\n ```\n git config –global user.name “用户名”\n git config –global user.email “邮箱”\n ```\n第一条命令用来告诉 git 我们的名字（以后链接github）\n第二条命令用来告诉git 我们的邮箱\n\n到此我们就可以使用Git了\n\n## 链接github ##\n如果我们希望把自己的项目托管在github我们就需要再做一些配置\n\n首先我们需要生成ssh,使用以下命令\n```\nssh-keygen –t rsa –C\n```\n\n 1. 然后他提示的默认路径生成一些文件，或者你自己配置路径。 在生成过程中会让你输入密码，可以不输入，一路回车\n    生成完毕后，会在你选择路径下生成两个文件 一个是 .rsa 一个是 .pub 我们这里只需要.pub里的内容 复制里边的内容\n 2. 接下来我们需要把文件里的key添加到我们的github账号里。 首先我们登陆我们的github账号。 然后在设置里 NEW SSH KEY 添加描述然后把我们的key复制到里边即可。\n\n不过在提交之前我们还需要做一些配置来确定我们需要把当前库的代码推送到github账号的哪个库里\n```\ngit remote add origin git@github.com:aaa/xxx\n```\n在上边的配置的命令中，aaa表示的我们的github账号。xxx使我们的库文件。\n以后就可以使用git来进行版本管理和推送到github里了。\n正常操作代码\n```\ngit status\ngit add .\ngit commit -a 'message'\ngit push\n```\n提交完毕。\n\n如果我们需要在其他电脑上使用我们托管的代码，我们需要使用\n```\ngit pull\n\n```\n或者\n```\ngit colne 'address'\n```\n来从github上获取我们所需要的代码\n\n如果在配置过程中出现错误，按照提示的代码解决即可。\n当然在此如果我们直接使用了\n```\ngit commit -a\n```\n会弹出来vim窗口，在这里写一些vim的命令\n在非insert状态下我们使用ctrl+d来批量选择#，然后按d删除\n\n在飞插入模式写:wq 保存并推出\n  [1]: https://git-scm.com/download/win","source":"_posts/github.md","raw":"layout: git\ntitle: github\ndate: 2015-06-26 22:04:09\ntags:\n---\n#关于Git的使用  \n------\n\n## Git的安装和使用 ##\n 准备工作：\n> * 下载git 客户端 [链接地址][1]\n\n下载完毕后，安装一路一下一步。\n安装完成之后我们开始使用Git\n使用前我们需要告诉Git，我们是谁。所以需要配置一些信息，来确定我们的身份。\n\n ```\n git config –global user.name “用户名”\n git config –global user.email “邮箱”\n ```\n第一条命令用来告诉 git 我们的名字（以后链接github）\n第二条命令用来告诉git 我们的邮箱\n\n到此我们就可以使用Git了\n\n## 链接github ##\n如果我们希望把自己的项目托管在github我们就需要再做一些配置\n\n首先我们需要生成ssh,使用以下命令\n```\nssh-keygen –t rsa –C\n```\n\n 1. 然后他提示的默认路径生成一些文件，或者你自己配置路径。 在生成过程中会让你输入密码，可以不输入，一路回车\n    生成完毕后，会在你选择路径下生成两个文件 一个是 .rsa 一个是 .pub 我们这里只需要.pub里的内容 复制里边的内容\n 2. 接下来我们需要把文件里的key添加到我们的github账号里。 首先我们登陆我们的github账号。 然后在设置里 NEW SSH KEY 添加描述然后把我们的key复制到里边即可。\n\n不过在提交之前我们还需要做一些配置来确定我们需要把当前库的代码推送到github账号的哪个库里\n```\ngit remote add origin git@github.com:aaa/xxx\n```\n在上边的配置的命令中，aaa表示的我们的github账号。xxx使我们的库文件。\n以后就可以使用git来进行版本管理和推送到github里了。\n正常操作代码\n```\ngit status\ngit add .\ngit commit -a 'message'\ngit push\n```\n提交完毕。\n\n如果我们需要在其他电脑上使用我们托管的代码，我们需要使用\n```\ngit pull\n\n```\n或者\n```\ngit colne 'address'\n```\n来从github上获取我们所需要的代码\n\n如果在配置过程中出现错误，按照提示的代码解决即可。\n当然在此如果我们直接使用了\n```\ngit commit -a\n```\n会弹出来vim窗口，在这里写一些vim的命令\n在非insert状态下我们使用ctrl+d来批量选择#，然后按d删除\n\n在飞插入模式写:wq 保存并推出\n  [1]: https://git-scm.com/download/win","slug":"github","published":1,"updated":"2018-06-19T10:35:14.525Z","comments":1,"photos":[],"link":"","_id":"cjlz6uwgn00040uww2gtuoqhd","content":"<h2 id=\"关于Git的使用\"><a href=\"#关于Git的使用\" class=\"headerlink\" title=\"#关于Git的使用  \"></a>#关于Git的使用  </h2><h2 id=\"Git的安装和使用\"><a href=\"#Git的安装和使用\" class=\"headerlink\" title=\"Git的安装和使用\"></a>Git的安装和使用</h2><p> 准备工作：</p>\n<blockquote>\n<ul>\n<li>下载git 客户端 <a href=\"https://git-scm.com/download/win\" target=\"_blank\" rel=\"noopener\">链接地址</a></li>\n</ul>\n</blockquote>\n<p>下载完毕后，安装一路一下一步。<br>安装完成之后我们开始使用Git<br>使用前我们需要告诉Git，我们是谁。所以需要配置一些信息，来确定我们的身份。</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git config –global user.name “用户名”</div><div class=\"line\">git config –global user.email “邮箱”</div></pre></td></tr></table></figure>\n<p>第一条命令用来告诉 git 我们的名字（以后链接github）<br>第二条命令用来告诉git 我们的邮箱</p>\n<p>到此我们就可以使用Git了</p>\n<h2 id=\"链接github\"><a href=\"#链接github\" class=\"headerlink\" title=\"链接github\"></a>链接github</h2><p>如果我们希望把自己的项目托管在github我们就需要再做一些配置</p>\n<p>首先我们需要生成ssh,使用以下命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ssh-keygen –t rsa –C</div></pre></td></tr></table></figure></p>\n<ol>\n<li>然后他提示的默认路径生成一些文件，或者你自己配置路径。 在生成过程中会让你输入密码，可以不输入，一路回车<br>生成完毕后，会在你选择路径下生成两个文件 一个是 .rsa 一个是 .pub 我们这里只需要.pub里的内容 复制里边的内容</li>\n<li>接下来我们需要把文件里的key添加到我们的github账号里。 首先我们登陆我们的github账号。 然后在设置里 NEW SSH KEY 添加描述然后把我们的key复制到里边即可。</li>\n</ol>\n<p>不过在提交之前我们还需要做一些配置来确定我们需要把当前库的代码推送到github账号的哪个库里<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git remote add origin git@github.com:aaa/xxx</div></pre></td></tr></table></figure></p>\n<p>在上边的配置的命令中，aaa表示的我们的github账号。xxx使我们的库文件。<br>以后就可以使用git来进行版本管理和推送到github里了。<br>正常操作代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">git status</div><div class=\"line\">git add .</div><div class=\"line\">git commit -a &apos;message&apos;</div><div class=\"line\">git push</div></pre></td></tr></table></figure></p>\n<p>提交完毕。</p>\n<p>如果我们需要在其他电脑上使用我们托管的代码，我们需要使用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git pull</div></pre></td></tr></table></figure></p>\n<p>或者<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git colne &apos;address&apos;</div></pre></td></tr></table></figure></p>\n<p>来从github上获取我们所需要的代码</p>\n<p>如果在配置过程中出现错误，按照提示的代码解决即可。<br>当然在此如果我们直接使用了<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git commit -a</div></pre></td></tr></table></figure></p>\n<p>会弹出来vim窗口，在这里写一些vim的命令<br>在非insert状态下我们使用ctrl+d来批量选择#，然后按d删除</p>\n<p>在飞插入模式写:wq 保存并推出</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"关于Git的使用\"><a href=\"#关于Git的使用\" class=\"headerlink\" title=\"#关于Git的使用  \"></a>#关于Git的使用  </h2><h2 id=\"Git的安装和使用\"><a href=\"#Git的安装和使用\" class=\"headerlink\" title=\"Git的安装和使用\"></a>Git的安装和使用</h2><p> 准备工作：</p>\n<blockquote>\n<ul>\n<li>下载git 客户端 <a href=\"https://git-scm.com/download/win\" target=\"_blank\" rel=\"noopener\">链接地址</a></li>\n</ul>\n</blockquote>\n<p>下载完毕后，安装一路一下一步。<br>安装完成之后我们开始使用Git<br>使用前我们需要告诉Git，我们是谁。所以需要配置一些信息，来确定我们的身份。</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git config –global user.name “用户名”</div><div class=\"line\">git config –global user.email “邮箱”</div></pre></td></tr></table></figure>\n<p>第一条命令用来告诉 git 我们的名字（以后链接github）<br>第二条命令用来告诉git 我们的邮箱</p>\n<p>到此我们就可以使用Git了</p>\n<h2 id=\"链接github\"><a href=\"#链接github\" class=\"headerlink\" title=\"链接github\"></a>链接github</h2><p>如果我们希望把自己的项目托管在github我们就需要再做一些配置</p>\n<p>首先我们需要生成ssh,使用以下命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ssh-keygen –t rsa –C</div></pre></td></tr></table></figure></p>\n<ol>\n<li>然后他提示的默认路径生成一些文件，或者你自己配置路径。 在生成过程中会让你输入密码，可以不输入，一路回车<br>生成完毕后，会在你选择路径下生成两个文件 一个是 .rsa 一个是 .pub 我们这里只需要.pub里的内容 复制里边的内容</li>\n<li>接下来我们需要把文件里的key添加到我们的github账号里。 首先我们登陆我们的github账号。 然后在设置里 NEW SSH KEY 添加描述然后把我们的key复制到里边即可。</li>\n</ol>\n<p>不过在提交之前我们还需要做一些配置来确定我们需要把当前库的代码推送到github账号的哪个库里<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git remote add origin git@github.com:aaa/xxx</div></pre></td></tr></table></figure></p>\n<p>在上边的配置的命令中，aaa表示的我们的github账号。xxx使我们的库文件。<br>以后就可以使用git来进行版本管理和推送到github里了。<br>正常操作代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">git status</div><div class=\"line\">git add .</div><div class=\"line\">git commit -a &apos;message&apos;</div><div class=\"line\">git push</div></pre></td></tr></table></figure></p>\n<p>提交完毕。</p>\n<p>如果我们需要在其他电脑上使用我们托管的代码，我们需要使用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git pull</div></pre></td></tr></table></figure></p>\n<p>或者<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git colne &apos;address&apos;</div></pre></td></tr></table></figure></p>\n<p>来从github上获取我们所需要的代码</p>\n<p>如果在配置过程中出现错误，按照提示的代码解决即可。<br>当然在此如果我们直接使用了<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git commit -a</div></pre></td></tr></table></figure></p>\n<p>会弹出来vim窗口，在这里写一些vim的命令<br>在非insert状态下我们使用ctrl+d来批量选择#，然后按d删除</p>\n<p>在飞插入模式写:wq 保存并推出</p>\n"},{"title":"hexo git github搭建博客","date":"2015-06-02T13:48:07.000Z","_content":"\n\n------\n\n在经搭建个人博客、csnd写博客、博客园写博客一系列折腾之后最终决定用 git github hexo 来搭建自己的个人博。我这样做的原因最主要就这么几点：\n\n> * github的大环境。（装逼）\n> * 免费稳定1\n> * 有一定的技术含量，我个人喜欢折腾。\n> * 为了保持使用git的习惯，顺带看看新的技术，跟上时代潮流。\n\n**\n\n开始\n--\n\n**\n需求环境\n 1. git [git下载地址][1]\n 2. node.js [node.js下载地址][2]\n\n两个安装都是一路下一步\n## 验证软件正确安装 ##\n\n    git --version\n    node -v\n    npm -v\n如果显示版本信息，怎安装成功。\n## 安装hexo ##\n在这里如果被墙的可以使用淘宝镜像cnpm 具体怎么操作可以自行百度，这里不多做解释。\n不过一般不会被墙，我使用npm。运行下边的命令安装hexo：\n被墙请使用命令：\n\n    npm install -g cnpm --registry=https://registry.npm.taobao.org\n\n以下是没有被墙的命令，被墙把npm换成cnpm即可。安装hexo\n\n    npm install hexo-cli -g\n\n安装完成后，验证是否安装成功。\n\n    hexo -v\n新建文件夹yourblog,输入命令\n\n    $ hexo init blog\n    $ cd blog\n新建博客\n\n    $ hexo new \"Hello Hexo\"\n生成静态页面\n\n    $ hexo generate\n运行服务\n\n    $ hexo server\n\n然后打开浏览器输入 localhost:4000 即可访问本地静态页面。\n\n\n## 接下来我们把本地静态页面PUSH到github ##\n\n - 首先你要有github账号。\n - 新建一个github.io的库\n - 设置本地github配置参数\n - 经本地静态页面push到github\n\n\n----------\n **github设置**\n\n新建github账号就不在这里陈述了，如果有同学不会使用git将代码push到github的话可以参考 [廖雪峰的官网][3]\n我们来直接进行第二不，创建一个github.io库。\n首先登陆我们的github账号点击`new repository`,然后输入youname.github.io\n**git设置**\n设置git配置信息\n\n\n    $ git config --global user.name \"你的用户名\"\n    $ git config --global user.email \"你的邮箱\"\n    \n\n**hexo 设置**\n    安装hexo git插件\n\n    npm install hexo-deployer-git --save\n\n然后打开博客根目录的_config.yml文件\n大致内容是这个样子的\n\n```\n# Hexo Configuration\n## Docs: https://hexo.io/docs/configuration.html\n## Source: https://github.com/hexojs/hexo/\n\n# Site\ntitle: 和女票抢可乐\nsubtitle:\ndescription:\nauthor: MaxieLj\nlanguage:\ntimezone:\n\n# URL\n## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'\nurl: http://yoursite.com\nroot: /\npermalink: :year/:month/:day/:title/\npermalink_defaults:\n\n# Directory\nsource_dir: source\npublic_dir: public\ntag_dir: tags\narchive_dir: archives\ncategory_dir: categories\ncode_dir: downloads/code\ni18n_dir: :lang\nskip_render:\n\n# Writing\nnew_post_name: :title.md # File name of new posts\ndefault_layout: post\ntitlecase: false # Transform title into titlecase\nexternal_link: true # Open external links in new tab\nfilename_case: 0\nrender_drafts: false\npost_asset_folder: false\nrelative_link: false\nfuture: true\nhighlight:\n  enable: true\n  line_number: true\n  auto_detect: false\n  tab_replace:\n\n# Category & Tag\ndefault_category: uncategorized\ncategory_map:\ntag_map:\n\n# Date / Time format\n## Hexo uses Moment.js to parse and display date\n## You can customize the date format as defined in\n## http://momentjs.com/docs/#/displaying/format/\ndate_format: YYYY-MM-DD\ntime_format: HH:mm:ss\n\n# Pagination\n## Set per_page to 0 to disable pagination\nper_page: 10\npagination_dir: page\n\n# Extensions\n## Plugins: https://hexo.io/plugins/\n## Themes: https://hexo.io/themes/\ntheme: yilia\n\n# Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n  repository: https://github.com/MaxieLj/MaxieLj.github.io.git\n  branch: master\n\njsonContent:\n  meta: false\n  pages: false\n  posts:\n    title: true\n    date: true\n    path: true\n    text: true\n    raw: false\n    content: false\n    slug: false\n    updated: false\n    comments: false\n    link: false\n    permalink: false\n    excerpt: false\n    categories: false\n    tags: true\n```\n我们只需要在尾部添加：\n```\ndeploy:\n  type: git\n  repository: https://github.com/MaxieLj/MaxieLj.github.io.git\n  branch: master\n```\n\n然后我们运行\n\n    $ hexo g\n生成静态文件\n然后推送到github\n\n    $ hexo d\n然后访问youname.github.io就可以看到生成的静态页面了\n当然我们一般是在本地调试好再用 hexo d推送到github\n\n\n  [1]: https://git-scm.com/downloads\n  [2]: https://nodejs.org/en/\n  [3]: http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000","source":"_posts/hexo-git-github搭建博客.md","raw":"---\ntitle: hexo git github搭建博客\ndate: 2015-06-02 21:48:07\ntags:\n---\n\n\n------\n\n在经搭建个人博客、csnd写博客、博客园写博客一系列折腾之后最终决定用 git github hexo 来搭建自己的个人博。我这样做的原因最主要就这么几点：\n\n> * github的大环境。（装逼）\n> * 免费稳定1\n> * 有一定的技术含量，我个人喜欢折腾。\n> * 为了保持使用git的习惯，顺带看看新的技术，跟上时代潮流。\n\n**\n\n开始\n--\n\n**\n需求环境\n 1. git [git下载地址][1]\n 2. node.js [node.js下载地址][2]\n\n两个安装都是一路下一步\n## 验证软件正确安装 ##\n\n    git --version\n    node -v\n    npm -v\n如果显示版本信息，怎安装成功。\n## 安装hexo ##\n在这里如果被墙的可以使用淘宝镜像cnpm 具体怎么操作可以自行百度，这里不多做解释。\n不过一般不会被墙，我使用npm。运行下边的命令安装hexo：\n被墙请使用命令：\n\n    npm install -g cnpm --registry=https://registry.npm.taobao.org\n\n以下是没有被墙的命令，被墙把npm换成cnpm即可。安装hexo\n\n    npm install hexo-cli -g\n\n安装完成后，验证是否安装成功。\n\n    hexo -v\n新建文件夹yourblog,输入命令\n\n    $ hexo init blog\n    $ cd blog\n新建博客\n\n    $ hexo new \"Hello Hexo\"\n生成静态页面\n\n    $ hexo generate\n运行服务\n\n    $ hexo server\n\n然后打开浏览器输入 localhost:4000 即可访问本地静态页面。\n\n\n## 接下来我们把本地静态页面PUSH到github ##\n\n - 首先你要有github账号。\n - 新建一个github.io的库\n - 设置本地github配置参数\n - 经本地静态页面push到github\n\n\n----------\n **github设置**\n\n新建github账号就不在这里陈述了，如果有同学不会使用git将代码push到github的话可以参考 [廖雪峰的官网][3]\n我们来直接进行第二不，创建一个github.io库。\n首先登陆我们的github账号点击`new repository`,然后输入youname.github.io\n**git设置**\n设置git配置信息\n\n\n    $ git config --global user.name \"你的用户名\"\n    $ git config --global user.email \"你的邮箱\"\n    \n\n**hexo 设置**\n    安装hexo git插件\n\n    npm install hexo-deployer-git --save\n\n然后打开博客根目录的_config.yml文件\n大致内容是这个样子的\n\n```\n# Hexo Configuration\n## Docs: https://hexo.io/docs/configuration.html\n## Source: https://github.com/hexojs/hexo/\n\n# Site\ntitle: 和女票抢可乐\nsubtitle:\ndescription:\nauthor: MaxieLj\nlanguage:\ntimezone:\n\n# URL\n## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'\nurl: http://yoursite.com\nroot: /\npermalink: :year/:month/:day/:title/\npermalink_defaults:\n\n# Directory\nsource_dir: source\npublic_dir: public\ntag_dir: tags\narchive_dir: archives\ncategory_dir: categories\ncode_dir: downloads/code\ni18n_dir: :lang\nskip_render:\n\n# Writing\nnew_post_name: :title.md # File name of new posts\ndefault_layout: post\ntitlecase: false # Transform title into titlecase\nexternal_link: true # Open external links in new tab\nfilename_case: 0\nrender_drafts: false\npost_asset_folder: false\nrelative_link: false\nfuture: true\nhighlight:\n  enable: true\n  line_number: true\n  auto_detect: false\n  tab_replace:\n\n# Category & Tag\ndefault_category: uncategorized\ncategory_map:\ntag_map:\n\n# Date / Time format\n## Hexo uses Moment.js to parse and display date\n## You can customize the date format as defined in\n## http://momentjs.com/docs/#/displaying/format/\ndate_format: YYYY-MM-DD\ntime_format: HH:mm:ss\n\n# Pagination\n## Set per_page to 0 to disable pagination\nper_page: 10\npagination_dir: page\n\n# Extensions\n## Plugins: https://hexo.io/plugins/\n## Themes: https://hexo.io/themes/\ntheme: yilia\n\n# Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n  repository: https://github.com/MaxieLj/MaxieLj.github.io.git\n  branch: master\n\njsonContent:\n  meta: false\n  pages: false\n  posts:\n    title: true\n    date: true\n    path: true\n    text: true\n    raw: false\n    content: false\n    slug: false\n    updated: false\n    comments: false\n    link: false\n    permalink: false\n    excerpt: false\n    categories: false\n    tags: true\n```\n我们只需要在尾部添加：\n```\ndeploy:\n  type: git\n  repository: https://github.com/MaxieLj/MaxieLj.github.io.git\n  branch: master\n```\n\n然后我们运行\n\n    $ hexo g\n生成静态文件\n然后推送到github\n\n    $ hexo d\n然后访问youname.github.io就可以看到生成的静态页面了\n当然我们一般是在本地调试好再用 hexo d推送到github\n\n\n  [1]: https://git-scm.com/downloads\n  [2]: https://nodejs.org/en/\n  [3]: http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000","slug":"hexo-git-github搭建博客","published":1,"updated":"2018-06-19T10:35:36.887Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlz6uwgo00060uww7erb7h6b","content":"<hr>\n<p>在经搭建个人博客、csnd写博客、博客园写博客一系列折腾之后最终决定用 git github hexo 来搭建自己的个人博。我这样做的原因最主要就这么几点：</p>\n<blockquote>\n<ul>\n<li>github的大环境。（装逼）</li>\n<li>免费稳定1</li>\n<li>有一定的技术含量，我个人喜欢折腾。</li>\n<li>为了保持使用git的习惯，顺带看看新的技术，跟上时代潮流。</li>\n</ul>\n</blockquote>\n<p>**</p>\n<h2 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h2><p>**<br>需求环境</p>\n<ol>\n<li>git <a href=\"https://git-scm.com/downloads\" target=\"_blank\" rel=\"noopener\">git下载地址</a></li>\n<li>node.js <a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"noopener\">node.js下载地址</a></li>\n</ol>\n<p>两个安装都是一路下一步</p>\n<h2 id=\"验证软件正确安装\"><a href=\"#验证软件正确安装\" class=\"headerlink\" title=\"验证软件正确安装\"></a>验证软件正确安装</h2><pre><code>git --version\nnode -v\nnpm -v\n</code></pre><p>如果显示版本信息，怎安装成功。</p>\n<h2 id=\"安装hexo\"><a href=\"#安装hexo\" class=\"headerlink\" title=\"安装hexo\"></a>安装hexo</h2><p>在这里如果被墙的可以使用淘宝镜像cnpm 具体怎么操作可以自行百度，这里不多做解释。<br>不过一般不会被墙，我使用npm。运行下边的命令安装hexo：<br>被墙请使用命令：</p>\n<pre><code>npm install -g cnpm --registry=https://registry.npm.taobao.org\n</code></pre><p>以下是没有被墙的命令，被墙把npm换成cnpm即可。安装hexo</p>\n<pre><code>npm install hexo-cli -g\n</code></pre><p>安装完成后，验证是否安装成功。</p>\n<pre><code>hexo -v\n</code></pre><p>新建文件夹yourblog,输入命令</p>\n<pre><code>$ hexo init blog\n$ cd blog\n</code></pre><p>新建博客</p>\n<pre><code>$ hexo new &quot;Hello Hexo&quot;\n</code></pre><p>生成静态页面</p>\n<pre><code>$ hexo generate\n</code></pre><p>运行服务</p>\n<pre><code>$ hexo server\n</code></pre><p>然后打开浏览器输入 localhost:4000 即可访问本地静态页面。</p>\n<h2 id=\"接下来我们把本地静态页面PUSH到github\"><a href=\"#接下来我们把本地静态页面PUSH到github\" class=\"headerlink\" title=\"接下来我们把本地静态页面PUSH到github\"></a>接下来我们把本地静态页面PUSH到github</h2><ul>\n<li>首先你要有github账号。</li>\n<li>新建一个github.io的库</li>\n<li>设置本地github配置参数</li>\n<li>经本地静态页面push到github</li>\n</ul>\n<hr>\n<p> <strong>github设置</strong></p>\n<p>新建github账号就不在这里陈述了，如果有同学不会使用git将代码push到github的话可以参考 <a href=\"http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000\" target=\"_blank\" rel=\"noopener\">廖雪峰的官网</a><br>我们来直接进行第二不，创建一个github.io库。<br>首先登陆我们的github账号点击<code>new repository</code>,然后输入youname.github.io<br><strong>git设置</strong><br>设置git配置信息</p>\n<pre><code>$ git config --global user.name &quot;你的用户名&quot;\n$ git config --global user.email &quot;你的邮箱&quot;\n</code></pre><p><strong>hexo 设置</strong><br>    安装hexo git插件</p>\n<pre><code>npm install hexo-deployer-git --save\n</code></pre><p>然后打开博客根目录的_config.yml文件<br>大致内容是这个样子的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Hexo Configuration</div><div class=\"line\">## Docs: https://hexo.io/docs/configuration.html</div><div class=\"line\">## Source: https://github.com/hexojs/hexo/</div><div class=\"line\"></div><div class=\"line\"># Site</div><div class=\"line\">title: 和女票抢可乐</div><div class=\"line\">subtitle:</div><div class=\"line\">description:</div><div class=\"line\">author: MaxieLj</div><div class=\"line\">language:</div><div class=\"line\">timezone:</div><div class=\"line\"></div><div class=\"line\"># URL</div><div class=\"line\">## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;</div><div class=\"line\">url: http://yoursite.com</div><div class=\"line\">root: /</div><div class=\"line\">permalink: :year/:month/:day/:title/</div><div class=\"line\">permalink_defaults:</div><div class=\"line\"></div><div class=\"line\"># Directory</div><div class=\"line\">source_dir: source</div><div class=\"line\">public_dir: public</div><div class=\"line\">tag_dir: tags</div><div class=\"line\">archive_dir: archives</div><div class=\"line\">category_dir: categories</div><div class=\"line\">code_dir: downloads/code</div><div class=\"line\">i18n_dir: :lang</div><div class=\"line\">skip_render:</div><div class=\"line\"></div><div class=\"line\"># Writing</div><div class=\"line\">new_post_name: :title.md # File name of new posts</div><div class=\"line\">default_layout: post</div><div class=\"line\">titlecase: false # Transform title into titlecase</div><div class=\"line\">external_link: true # Open external links in new tab</div><div class=\"line\">filename_case: 0</div><div class=\"line\">render_drafts: false</div><div class=\"line\">post_asset_folder: false</div><div class=\"line\">relative_link: false</div><div class=\"line\">future: true</div><div class=\"line\">highlight:</div><div class=\"line\">  enable: true</div><div class=\"line\">  line_number: true</div><div class=\"line\">  auto_detect: false</div><div class=\"line\">  tab_replace:</div><div class=\"line\"></div><div class=\"line\"># Category &amp; Tag</div><div class=\"line\">default_category: uncategorized</div><div class=\"line\">category_map:</div><div class=\"line\">tag_map:</div><div class=\"line\"></div><div class=\"line\"># Date / Time format</div><div class=\"line\">## Hexo uses Moment.js to parse and display date</div><div class=\"line\">## You can customize the date format as defined in</div><div class=\"line\">## http://momentjs.com/docs/#/displaying/format/</div><div class=\"line\">date_format: YYYY-MM-DD</div><div class=\"line\">time_format: HH:mm:ss</div><div class=\"line\"></div><div class=\"line\"># Pagination</div><div class=\"line\">## Set per_page to 0 to disable pagination</div><div class=\"line\">per_page: 10</div><div class=\"line\">pagination_dir: page</div><div class=\"line\"></div><div class=\"line\"># Extensions</div><div class=\"line\">## Plugins: https://hexo.io/plugins/</div><div class=\"line\">## Themes: https://hexo.io/themes/</div><div class=\"line\">theme: yilia</div><div class=\"line\"></div><div class=\"line\"># Deployment</div><div class=\"line\">## Docs: https://hexo.io/docs/deployment.html</div><div class=\"line\">deploy:</div><div class=\"line\">  type: git</div><div class=\"line\">  repository: https://github.com/MaxieLj/MaxieLj.github.io.git</div><div class=\"line\">  branch: master</div><div class=\"line\"></div><div class=\"line\">jsonContent:</div><div class=\"line\">  meta: false</div><div class=\"line\">  pages: false</div><div class=\"line\">  posts:</div><div class=\"line\">    title: true</div><div class=\"line\">    date: true</div><div class=\"line\">    path: true</div><div class=\"line\">    text: true</div><div class=\"line\">    raw: false</div><div class=\"line\">    content: false</div><div class=\"line\">    slug: false</div><div class=\"line\">    updated: false</div><div class=\"line\">    comments: false</div><div class=\"line\">    link: false</div><div class=\"line\">    permalink: false</div><div class=\"line\">    excerpt: false</div><div class=\"line\">    categories: false</div><div class=\"line\">    tags: true</div></pre></td></tr></table></figure>\n<p>我们只需要在尾部添加：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">deploy:</div><div class=\"line\">  type: git</div><div class=\"line\">  repository: https://github.com/MaxieLj/MaxieLj.github.io.git</div><div class=\"line\">  branch: master</div></pre></td></tr></table></figure></p>\n<p>然后我们运行</p>\n<pre><code>$ hexo g\n</code></pre><p>生成静态文件<br>然后推送到github</p>\n<pre><code>$ hexo d\n</code></pre><p>然后访问youname.github.io就可以看到生成的静态页面了<br>当然我们一般是在本地调试好再用 hexo d推送到github</p>\n","site":{"data":{}},"excerpt":"","more":"<hr>\n<p>在经搭建个人博客、csnd写博客、博客园写博客一系列折腾之后最终决定用 git github hexo 来搭建自己的个人博。我这样做的原因最主要就这么几点：</p>\n<blockquote>\n<ul>\n<li>github的大环境。（装逼）</li>\n<li>免费稳定1</li>\n<li>有一定的技术含量，我个人喜欢折腾。</li>\n<li>为了保持使用git的习惯，顺带看看新的技术，跟上时代潮流。</li>\n</ul>\n</blockquote>\n<p>**</p>\n<h2 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h2><p>**<br>需求环境</p>\n<ol>\n<li>git <a href=\"https://git-scm.com/downloads\" target=\"_blank\" rel=\"noopener\">git下载地址</a></li>\n<li>node.js <a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"noopener\">node.js下载地址</a></li>\n</ol>\n<p>两个安装都是一路下一步</p>\n<h2 id=\"验证软件正确安装\"><a href=\"#验证软件正确安装\" class=\"headerlink\" title=\"验证软件正确安装\"></a>验证软件正确安装</h2><pre><code>git --version\nnode -v\nnpm -v\n</code></pre><p>如果显示版本信息，怎安装成功。</p>\n<h2 id=\"安装hexo\"><a href=\"#安装hexo\" class=\"headerlink\" title=\"安装hexo\"></a>安装hexo</h2><p>在这里如果被墙的可以使用淘宝镜像cnpm 具体怎么操作可以自行百度，这里不多做解释。<br>不过一般不会被墙，我使用npm。运行下边的命令安装hexo：<br>被墙请使用命令：</p>\n<pre><code>npm install -g cnpm --registry=https://registry.npm.taobao.org\n</code></pre><p>以下是没有被墙的命令，被墙把npm换成cnpm即可。安装hexo</p>\n<pre><code>npm install hexo-cli -g\n</code></pre><p>安装完成后，验证是否安装成功。</p>\n<pre><code>hexo -v\n</code></pre><p>新建文件夹yourblog,输入命令</p>\n<pre><code>$ hexo init blog\n$ cd blog\n</code></pre><p>新建博客</p>\n<pre><code>$ hexo new &quot;Hello Hexo&quot;\n</code></pre><p>生成静态页面</p>\n<pre><code>$ hexo generate\n</code></pre><p>运行服务</p>\n<pre><code>$ hexo server\n</code></pre><p>然后打开浏览器输入 localhost:4000 即可访问本地静态页面。</p>\n<h2 id=\"接下来我们把本地静态页面PUSH到github\"><a href=\"#接下来我们把本地静态页面PUSH到github\" class=\"headerlink\" title=\"接下来我们把本地静态页面PUSH到github\"></a>接下来我们把本地静态页面PUSH到github</h2><ul>\n<li>首先你要有github账号。</li>\n<li>新建一个github.io的库</li>\n<li>设置本地github配置参数</li>\n<li>经本地静态页面push到github</li>\n</ul>\n<hr>\n<p> <strong>github设置</strong></p>\n<p>新建github账号就不在这里陈述了，如果有同学不会使用git将代码push到github的话可以参考 <a href=\"http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000\" target=\"_blank\" rel=\"noopener\">廖雪峰的官网</a><br>我们来直接进行第二不，创建一个github.io库。<br>首先登陆我们的github账号点击<code>new repository</code>,然后输入youname.github.io<br><strong>git设置</strong><br>设置git配置信息</p>\n<pre><code>$ git config --global user.name &quot;你的用户名&quot;\n$ git config --global user.email &quot;你的邮箱&quot;\n</code></pre><p><strong>hexo 设置</strong><br>    安装hexo git插件</p>\n<pre><code>npm install hexo-deployer-git --save\n</code></pre><p>然后打开博客根目录的_config.yml文件<br>大致内容是这个样子的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Hexo Configuration</div><div class=\"line\">## Docs: https://hexo.io/docs/configuration.html</div><div class=\"line\">## Source: https://github.com/hexojs/hexo/</div><div class=\"line\"></div><div class=\"line\"># Site</div><div class=\"line\">title: 和女票抢可乐</div><div class=\"line\">subtitle:</div><div class=\"line\">description:</div><div class=\"line\">author: MaxieLj</div><div class=\"line\">language:</div><div class=\"line\">timezone:</div><div class=\"line\"></div><div class=\"line\"># URL</div><div class=\"line\">## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;</div><div class=\"line\">url: http://yoursite.com</div><div class=\"line\">root: /</div><div class=\"line\">permalink: :year/:month/:day/:title/</div><div class=\"line\">permalink_defaults:</div><div class=\"line\"></div><div class=\"line\"># Directory</div><div class=\"line\">source_dir: source</div><div class=\"line\">public_dir: public</div><div class=\"line\">tag_dir: tags</div><div class=\"line\">archive_dir: archives</div><div class=\"line\">category_dir: categories</div><div class=\"line\">code_dir: downloads/code</div><div class=\"line\">i18n_dir: :lang</div><div class=\"line\">skip_render:</div><div class=\"line\"></div><div class=\"line\"># Writing</div><div class=\"line\">new_post_name: :title.md # File name of new posts</div><div class=\"line\">default_layout: post</div><div class=\"line\">titlecase: false # Transform title into titlecase</div><div class=\"line\">external_link: true # Open external links in new tab</div><div class=\"line\">filename_case: 0</div><div class=\"line\">render_drafts: false</div><div class=\"line\">post_asset_folder: false</div><div class=\"line\">relative_link: false</div><div class=\"line\">future: true</div><div class=\"line\">highlight:</div><div class=\"line\">  enable: true</div><div class=\"line\">  line_number: true</div><div class=\"line\">  auto_detect: false</div><div class=\"line\">  tab_replace:</div><div class=\"line\"></div><div class=\"line\"># Category &amp; Tag</div><div class=\"line\">default_category: uncategorized</div><div class=\"line\">category_map:</div><div class=\"line\">tag_map:</div><div class=\"line\"></div><div class=\"line\"># Date / Time format</div><div class=\"line\">## Hexo uses Moment.js to parse and display date</div><div class=\"line\">## You can customize the date format as defined in</div><div class=\"line\">## http://momentjs.com/docs/#/displaying/format/</div><div class=\"line\">date_format: YYYY-MM-DD</div><div class=\"line\">time_format: HH:mm:ss</div><div class=\"line\"></div><div class=\"line\"># Pagination</div><div class=\"line\">## Set per_page to 0 to disable pagination</div><div class=\"line\">per_page: 10</div><div class=\"line\">pagination_dir: page</div><div class=\"line\"></div><div class=\"line\"># Extensions</div><div class=\"line\">## Plugins: https://hexo.io/plugins/</div><div class=\"line\">## Themes: https://hexo.io/themes/</div><div class=\"line\">theme: yilia</div><div class=\"line\"></div><div class=\"line\"># Deployment</div><div class=\"line\">## Docs: https://hexo.io/docs/deployment.html</div><div class=\"line\">deploy:</div><div class=\"line\">  type: git</div><div class=\"line\">  repository: https://github.com/MaxieLj/MaxieLj.github.io.git</div><div class=\"line\">  branch: master</div><div class=\"line\"></div><div class=\"line\">jsonContent:</div><div class=\"line\">  meta: false</div><div class=\"line\">  pages: false</div><div class=\"line\">  posts:</div><div class=\"line\">    title: true</div><div class=\"line\">    date: true</div><div class=\"line\">    path: true</div><div class=\"line\">    text: true</div><div class=\"line\">    raw: false</div><div class=\"line\">    content: false</div><div class=\"line\">    slug: false</div><div class=\"line\">    updated: false</div><div class=\"line\">    comments: false</div><div class=\"line\">    link: false</div><div class=\"line\">    permalink: false</div><div class=\"line\">    excerpt: false</div><div class=\"line\">    categories: false</div><div class=\"line\">    tags: true</div></pre></td></tr></table></figure>\n<p>我们只需要在尾部添加：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">deploy:</div><div class=\"line\">  type: git</div><div class=\"line\">  repository: https://github.com/MaxieLj/MaxieLj.github.io.git</div><div class=\"line\">  branch: master</div></pre></td></tr></table></figure></p>\n<p>然后我们运行</p>\n<pre><code>$ hexo g\n</code></pre><p>生成静态文件<br>然后推送到github</p>\n<pre><code>$ hexo d\n</code></pre><p>然后访问youname.github.io就可以看到生成的静态页面了<br>当然我们一般是在本地调试好再用 hexo d推送到github</p>\n"},{"title":"'laravel学习笔记二路由'","date":"2016-02-09T14:09:19.000Z","_content":"laravel框架安装好之后我们就要开始熟悉laravel框架的内部结构。\n我们主要是从这个几个方便来学习laravel：\n\n - route 路由\n - controller 控制器\n - blade 模板\n - model 模型\n  \n今天我们主要讲路由。\n\n### laravel-route\n可能我们在学习laravel之前已经接触过一些框架例如：yii，tp,ci。\n但是他们都没有laravel所带的路由系统强大，我们现在开始介绍laravel框架的路由。\n### 闭包\n最基本的路由接受的是一个闭包函数，直接返回值，例如：\n```\nRoure::get('/',funcition(){\nreturn 'this is Route'})\n```\n\n我们在 **/routes/web.php** 里注册该路由即可返回 `this us Route`。当然laravel路由所能接受的请求方式不仅仅是get还要post put 等等法法，示例如下\n```\nRoute::get($uri, $callback);\nRoute::post($uri, $callback);\nRoute::put($uri, $callback);\nRoute::patch($uri, $callback);\nRoute::delete($uri, $callback);\nRoute::options($uri, $callback);\n```\n### 带参数访问###\n\n```\nRoure::get('/{id}',function($id){\nreturn 'user id is '.$id\n})\n```\n 当然也可以带多参数访问\n \n```\n Route::get('/id/{id}/name/{name}',function($id,$name){\n //\n })\n```\n 让然也可以传递一个可选参数 ,但是我们需要用`？`来标记该参数，还给予他默认值\n```\nRoute::get('/name/{name}?',function($name='Maxie'){\n//\n})\n```\n### 路由命名###\n```\nRoure::get('/',funcition(){\nreturn 'this is Route'})->name('index')\n```\n我们可以给路由命名一个名字，让我们在模板中使用rul函数可以解析到我们所命名的路由`url('index')`。这些我们在模板中在细讲\n\n### 路由群组###\n路由群组是一个很好东西，我们在开发中很定会给我们的项目分不同模块。例如用户模块，商户模块。这时候我么会给他们加上不同的命名空间，我们可以通过路由群组把我们注册的路由也分类，很方便我们的访问。例如：\n```\nRoute::groun(['namespace'=>'user'],function(){\n//我们可以在此注册我们的路由，路由控制器路由会在App/Http/Controller/user 下\n})\n```\n 当让我们可以在群组里继续注册群组，在这里我们不多做演示。\n \n## 路由绑定到控制器##\n\n这是我们最关键的地方，一般我们通过访问URI都会想传递参数给我们的控制器，当然laravel还给我们提供了中间件让我们在路路由控制器之间或者路由玉模板之前做一个参数处理或者过滤，我们在此不做演示。后边我们会详细解释，现在我们详细解释路由有绑定到控制器，想必这是你我最关系的。\n路由绑定到控制器只需要：\n```\nRoure::get('/','UserController@showProfile')\n```\n这样既可绑定我么你的路由到控制器。\n\n## 路由绑定绑定到视图##\n有很多的访问不需要我们做处理，只需展示一些东西既可，我么你可以直接把路由绑定到视图\n\n```\nRoute::get('/',function(){\nreturn view('welcom')\n})\n\n这也是我们刚刚配置完laravel时候路由web.php唯一注册一个路由\n```\n\n \n ","source":"_posts/laravel学习笔记二路由.md","raw":"---\ntitle: '''laravel学习笔记二路由'''\ndate: 2016-02-09 22:09:19\ntags:\n---\nlaravel框架安装好之后我们就要开始熟悉laravel框架的内部结构。\n我们主要是从这个几个方便来学习laravel：\n\n - route 路由\n - controller 控制器\n - blade 模板\n - model 模型\n  \n今天我们主要讲路由。\n\n### laravel-route\n可能我们在学习laravel之前已经接触过一些框架例如：yii，tp,ci。\n但是他们都没有laravel所带的路由系统强大，我们现在开始介绍laravel框架的路由。\n### 闭包\n最基本的路由接受的是一个闭包函数，直接返回值，例如：\n```\nRoure::get('/',funcition(){\nreturn 'this is Route'})\n```\n\n我们在 **/routes/web.php** 里注册该路由即可返回 `this us Route`。当然laravel路由所能接受的请求方式不仅仅是get还要post put 等等法法，示例如下\n```\nRoute::get($uri, $callback);\nRoute::post($uri, $callback);\nRoute::put($uri, $callback);\nRoute::patch($uri, $callback);\nRoute::delete($uri, $callback);\nRoute::options($uri, $callback);\n```\n### 带参数访问###\n\n```\nRoure::get('/{id}',function($id){\nreturn 'user id is '.$id\n})\n```\n 当然也可以带多参数访问\n \n```\n Route::get('/id/{id}/name/{name}',function($id,$name){\n //\n })\n```\n 让然也可以传递一个可选参数 ,但是我们需要用`？`来标记该参数，还给予他默认值\n```\nRoute::get('/name/{name}?',function($name='Maxie'){\n//\n})\n```\n### 路由命名###\n```\nRoure::get('/',funcition(){\nreturn 'this is Route'})->name('index')\n```\n我们可以给路由命名一个名字，让我们在模板中使用rul函数可以解析到我们所命名的路由`url('index')`。这些我们在模板中在细讲\n\n### 路由群组###\n路由群组是一个很好东西，我们在开发中很定会给我们的项目分不同模块。例如用户模块，商户模块。这时候我么会给他们加上不同的命名空间，我们可以通过路由群组把我们注册的路由也分类，很方便我们的访问。例如：\n```\nRoute::groun(['namespace'=>'user'],function(){\n//我们可以在此注册我们的路由，路由控制器路由会在App/Http/Controller/user 下\n})\n```\n 当让我们可以在群组里继续注册群组，在这里我们不多做演示。\n \n## 路由绑定到控制器##\n\n这是我们最关键的地方，一般我们通过访问URI都会想传递参数给我们的控制器，当然laravel还给我们提供了中间件让我们在路路由控制器之间或者路由玉模板之前做一个参数处理或者过滤，我们在此不做演示。后边我们会详细解释，现在我们详细解释路由有绑定到控制器，想必这是你我最关系的。\n路由绑定到控制器只需要：\n```\nRoure::get('/','UserController@showProfile')\n```\n这样既可绑定我么你的路由到控制器。\n\n## 路由绑定绑定到视图##\n有很多的访问不需要我们做处理，只需展示一些东西既可，我么你可以直接把路由绑定到视图\n\n```\nRoute::get('/',function(){\nreturn view('welcom')\n})\n\n这也是我们刚刚配置完laravel时候路由web.php唯一注册一个路由\n```\n\n \n ","slug":"laravel学习笔记二路由","published":1,"updated":"2018-06-19T10:35:54.670Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlz6uwgp00070uwwda642ifc","content":"<p>laravel框架安装好之后我们就要开始熟悉laravel框架的内部结构。<br>我们主要是从这个几个方便来学习laravel：</p>\n<ul>\n<li>route 路由</li>\n<li>controller 控制器</li>\n<li>blade 模板</li>\n<li>model 模型</li>\n</ul>\n<p>今天我们主要讲路由。</p>\n<h3 id=\"laravel-route\"><a href=\"#laravel-route\" class=\"headerlink\" title=\"laravel-route\"></a>laravel-route</h3><p>可能我们在学习laravel之前已经接触过一些框架例如：yii，tp,ci。<br>但是他们都没有laravel所带的路由系统强大，我们现在开始介绍laravel框架的路由。</p>\n<h3 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h3><p>最基本的路由接受的是一个闭包函数，直接返回值，例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Roure::get(&apos;/&apos;,funcition()&#123;</div><div class=\"line\">return &apos;this is Route&apos;&#125;)</div></pre></td></tr></table></figure></p>\n<p>我们在 <strong>/routes/web.php</strong> 里注册该路由即可返回 <code>this us Route</code>。当然laravel路由所能接受的请求方式不仅仅是get还要post put 等等法法，示例如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">Route::get($uri, $callback);</div><div class=\"line\">Route::post($uri, $callback);</div><div class=\"line\">Route::put($uri, $callback);</div><div class=\"line\">Route::patch($uri, $callback);</div><div class=\"line\">Route::delete($uri, $callback);</div><div class=\"line\">Route::options($uri, $callback);</div></pre></td></tr></table></figure></p>\n<h3 id=\"带参数访问\"><a href=\"#带参数访问\" class=\"headerlink\" title=\"带参数访问\"></a>带参数访问</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Roure::get(&apos;/&#123;id&#125;&apos;,function($id)&#123;</div><div class=\"line\">return &apos;user id is &apos;.$id</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p> 当然也可以带多参数访问</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Route::get(&apos;/id/&#123;id&#125;/name/&#123;name&#125;&apos;,function($id,$name)&#123;</div><div class=\"line\">//</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p> 让然也可以传递一个可选参数 ,但是我们需要用<code>？</code>来标记该参数，还给予他默认值<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Route::get(&apos;/name/&#123;name&#125;?&apos;,function($name=&apos;Maxie&apos;)&#123;</div><div class=\"line\">//</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<h3 id=\"路由命名\"><a href=\"#路由命名\" class=\"headerlink\" title=\"路由命名\"></a>路由命名</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Roure::get(&apos;/&apos;,funcition()&#123;</div><div class=\"line\">return &apos;this is Route&apos;&#125;)-&gt;name(&apos;index&apos;)</div></pre></td></tr></table></figure>\n<p>我们可以给路由命名一个名字，让我们在模板中使用rul函数可以解析到我们所命名的路由<code>url(&#39;index&#39;)</code>。这些我们在模板中在细讲</p>\n<h3 id=\"路由群组\"><a href=\"#路由群组\" class=\"headerlink\" title=\"路由群组\"></a>路由群组</h3><p>路由群组是一个很好东西，我们在开发中很定会给我们的项目分不同模块。例如用户模块，商户模块。这时候我么会给他们加上不同的命名空间，我们可以通过路由群组把我们注册的路由也分类，很方便我们的访问。例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Route::groun([&apos;namespace&apos;=&gt;&apos;user&apos;],function()&#123;</div><div class=\"line\">//我们可以在此注册我们的路由，路由控制器路由会在App/Http/Controller/user 下</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p> 当让我们可以在群组里继续注册群组，在这里我们不多做演示。</p>\n<h2 id=\"路由绑定到控制器\"><a href=\"#路由绑定到控制器\" class=\"headerlink\" title=\"路由绑定到控制器\"></a>路由绑定到控制器</h2><p>这是我们最关键的地方，一般我们通过访问URI都会想传递参数给我们的控制器，当然laravel还给我们提供了中间件让我们在路路由控制器之间或者路由玉模板之前做一个参数处理或者过滤，我们在此不做演示。后边我们会详细解释，现在我们详细解释路由有绑定到控制器，想必这是你我最关系的。<br>路由绑定到控制器只需要：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Roure::get(&apos;/&apos;,&apos;UserController@showProfile&apos;)</div></pre></td></tr></table></figure></p>\n<p>这样既可绑定我么你的路由到控制器。</p>\n<h2 id=\"路由绑定绑定到视图\"><a href=\"#路由绑定绑定到视图\" class=\"headerlink\" title=\"路由绑定绑定到视图\"></a>路由绑定绑定到视图</h2><p>有很多的访问不需要我们做处理，只需展示一些东西既可，我么你可以直接把路由绑定到视图</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Route::get(&apos;/&apos;,function()&#123;</div><div class=\"line\">return view(&apos;welcom&apos;)</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">这也是我们刚刚配置完laravel时候路由web.php唯一注册一个路由</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>laravel框架安装好之后我们就要开始熟悉laravel框架的内部结构。<br>我们主要是从这个几个方便来学习laravel：</p>\n<ul>\n<li>route 路由</li>\n<li>controller 控制器</li>\n<li>blade 模板</li>\n<li>model 模型</li>\n</ul>\n<p>今天我们主要讲路由。</p>\n<h3 id=\"laravel-route\"><a href=\"#laravel-route\" class=\"headerlink\" title=\"laravel-route\"></a>laravel-route</h3><p>可能我们在学习laravel之前已经接触过一些框架例如：yii，tp,ci。<br>但是他们都没有laravel所带的路由系统强大，我们现在开始介绍laravel框架的路由。</p>\n<h3 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h3><p>最基本的路由接受的是一个闭包函数，直接返回值，例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Roure::get(&apos;/&apos;,funcition()&#123;</div><div class=\"line\">return &apos;this is Route&apos;&#125;)</div></pre></td></tr></table></figure></p>\n<p>我们在 <strong>/routes/web.php</strong> 里注册该路由即可返回 <code>this us Route</code>。当然laravel路由所能接受的请求方式不仅仅是get还要post put 等等法法，示例如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">Route::get($uri, $callback);</div><div class=\"line\">Route::post($uri, $callback);</div><div class=\"line\">Route::put($uri, $callback);</div><div class=\"line\">Route::patch($uri, $callback);</div><div class=\"line\">Route::delete($uri, $callback);</div><div class=\"line\">Route::options($uri, $callback);</div></pre></td></tr></table></figure></p>\n<h3 id=\"带参数访问\"><a href=\"#带参数访问\" class=\"headerlink\" title=\"带参数访问\"></a>带参数访问</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Roure::get(&apos;/&#123;id&#125;&apos;,function($id)&#123;</div><div class=\"line\">return &apos;user id is &apos;.$id</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p> 当然也可以带多参数访问</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Route::get(&apos;/id/&#123;id&#125;/name/&#123;name&#125;&apos;,function($id,$name)&#123;</div><div class=\"line\">//</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p> 让然也可以传递一个可选参数 ,但是我们需要用<code>？</code>来标记该参数，还给予他默认值<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Route::get(&apos;/name/&#123;name&#125;?&apos;,function($name=&apos;Maxie&apos;)&#123;</div><div class=\"line\">//</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<h3 id=\"路由命名\"><a href=\"#路由命名\" class=\"headerlink\" title=\"路由命名\"></a>路由命名</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Roure::get(&apos;/&apos;,funcition()&#123;</div><div class=\"line\">return &apos;this is Route&apos;&#125;)-&gt;name(&apos;index&apos;)</div></pre></td></tr></table></figure>\n<p>我们可以给路由命名一个名字，让我们在模板中使用rul函数可以解析到我们所命名的路由<code>url(&#39;index&#39;)</code>。这些我们在模板中在细讲</p>\n<h3 id=\"路由群组\"><a href=\"#路由群组\" class=\"headerlink\" title=\"路由群组\"></a>路由群组</h3><p>路由群组是一个很好东西，我们在开发中很定会给我们的项目分不同模块。例如用户模块，商户模块。这时候我么会给他们加上不同的命名空间，我们可以通过路由群组把我们注册的路由也分类，很方便我们的访问。例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Route::groun([&apos;namespace&apos;=&gt;&apos;user&apos;],function()&#123;</div><div class=\"line\">//我们可以在此注册我们的路由，路由控制器路由会在App/Http/Controller/user 下</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p> 当让我们可以在群组里继续注册群组，在这里我们不多做演示。</p>\n<h2 id=\"路由绑定到控制器\"><a href=\"#路由绑定到控制器\" class=\"headerlink\" title=\"路由绑定到控制器\"></a>路由绑定到控制器</h2><p>这是我们最关键的地方，一般我们通过访问URI都会想传递参数给我们的控制器，当然laravel还给我们提供了中间件让我们在路路由控制器之间或者路由玉模板之前做一个参数处理或者过滤，我们在此不做演示。后边我们会详细解释，现在我们详细解释路由有绑定到控制器，想必这是你我最关系的。<br>路由绑定到控制器只需要：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Roure::get(&apos;/&apos;,&apos;UserController@showProfile&apos;)</div></pre></td></tr></table></figure></p>\n<p>这样既可绑定我么你的路由到控制器。</p>\n<h2 id=\"路由绑定绑定到视图\"><a href=\"#路由绑定绑定到视图\" class=\"headerlink\" title=\"路由绑定绑定到视图\"></a>路由绑定绑定到视图</h2><p>有很多的访问不需要我们做处理，只需展示一些东西既可，我么你可以直接把路由绑定到视图</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Route::get(&apos;/&apos;,function()&#123;</div><div class=\"line\">return view(&apos;welcom&apos;)</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">这也是我们刚刚配置完laravel时候路由web.php唯一注册一个路由</div></pre></td></tr></table></figure>\n"},{"title":"'laravel学习笔记四中间件'","date":"2016-03-02T11:44:12.000Z","_content":" # Laravel 学习笔记四Http中间件\n\n标签（空格分隔）： laravel\n\n---\n \n \n ### 简介###\n  关于中间件，从字面意思上我们很好理解中间件的意思。就是存在两个节点之间的节点。这里我们所描述的节点是`Route`和`Controller`。\n  \n  \n  一次正产给的请求是客户端发送请求，服务端接受请求，然后对参数做一些判断然后处理逻辑。任何请求都会从进入控制器开始就直接进入真正的逻辑处理，我们会先判断请求参数是否正确，以防止黑客攻击。比较常见的处理逻辑反馈有403、503页面。这些是我们在接受参数后对参数进行处理，从而反馈到客户端。如果我们传递参数较多，对参数筛选很严格的话，就会出现很多对参数判断的代码，以及当一些对参数判断的代码需要复用时候我们无法将其从控制器中分离出来，这些都是我们平常工作中饭经常遇到的问题。这是`中间件`就能很好地处理这个问题了。\n  \n  间件的作用是在请求从`Route`进入控制器是时，我们可以先将请求引入到中间件中，对数据做些处理，然后才引入到控制器中，或者直接反馈给客户端。这样我们的控制器可以专心于数据逻辑，从而代码简洁，以及参数判断代码会得到复用，很大的提升工作效率。\n\n\n \n ### 创建一个控制器###\n\n第一步我们来创建一个中间件。在`larval`中，自带了一条命令用来创建中间件。`php artisan make:middleware CheckAge` 。我们可以用此命令创建一个`CheckAge`的中间，用来过滤用户的年龄。穿件代码如下：\n\n```\n<?php\n\nnamespace App\\Http\\Middleware;\n\nuse Closure;\n\nclass CheckAge\n{\n    /**\n     * 运行请求过滤器。\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @param  \\Closure  $next\n     * @return mixed\n     */\n    public function handle($request, Closure $next)\n    {\n        if ($request->age <= 200) {\n            return redirect('home');\n        }\n\n        return $next($request);\n    }\n\n}\n```\n 当然在这里少不了路由的代码，我们的请求先到路由，然后到中间件最后到控制器。\n```\nRoute::get('getuser/user/{id}/age/{age}',UserController@getUser)->middleware('CheckAge');\n```\n 在这段代码中我们把所有请求age大于200的重定向到`home`中，佛则就继续，这样就是实现了参数过滤。这就是中间件的基本作用。\n \n# 注册中间件###\n\n \n 我们的中间件在使用前，是需要注册的。否则我们无法正常调用到我们的中间件。这个注册文件在`app/Http/Kernel.php`中。我们打开这个文件。\n\n\n```\n<?php\n\nnamespace App\\Http;\n\nuse Illuminate\\Foundation\\Http\\Kernel as HttpKernel;\n\nclass Kernel extends HttpKernel\n{\n    // 这里注册是全局的中间件，在所有的都需要经过这个中间件来过滤信息，无论是来之web的请求还是API的///请求\n    protected $middleware = [\n        \\Illuminate\\Foundation\\Http\\Middleware\\CheckForMaintenanceMode::class,\n    ];\n\n    // 中间件群组，在这里我们可以注册中间件群组，用来给请求批量的添加空间。这里laravel中web请求默认     //都必须经过web群组的中间的过滤，api请求需要经过api群组的中间件过滤。使用实例在下边已经给出。\n    protected $middlewareGroups = [\n        'web' => [\n            \\App\\Http\\Middleware\\EncryptCookies::class,\n            \\Illuminate\\Cookie\\Middleware\\AddQueuedCookiesToResponse::class,\n            \\Illuminate\\Session\\Middleware\\StartSession::class,\n            \\Illuminate\\View\\Middleware\\ShareErrorsFromSession::class,\n            \\App\\Http\\Middleware\\VerifyCsrfToken::class,\n        ],\n\n        'api' => [\n            'throttle:60,1',\n        ],\n    ];\n    \n    // 非全局的中间件，单独给某些路由指定下面的中间件（用户自己编写）。\n    protected $routeMiddleware = [\n        'auth' => \\App\\Http\\Middleware\\Authenticate::class,\n        'auth.basic' => \\Illuminate\\Auth\\Middleware\\AuthenticateWithBasicAuth::class,\n        'can' => \\Illuminate\\Foundation\\Http\\Middleware\\Authorize::class,\n        'guest' => \\App\\Http\\Middleware\\RedirectIfAuthenticated::class,\n        'throttle' => \\Illuminate\\Routing\\Middleware\\ThrottleRequests::class,\n    ];\n}\n```\n群组使用\n```\nRoute::group(['middleware' => ['web']], function () {\n    //\n})\n```\n\n我们可以看出这个`Kernel.php`文件中有是哪个属性，分别为 `protected $middleware` `protected $middlewareGroups` `protected $routeMiddleware` 这三个属性分别用来注册`全局中间件` `群组中间件` `和自定义中间件`。\n\n### 特殊中间件###\n\n在中间件中用连个比较特殊的中间件，分别为`前置中间件` `和后置中间件`。顾名思义，前置中间件就是在请求前运作的，后置中间件就是在请求后运作的。这有什么用呢？我们可以在这里举一个栗子：\n\n在正常的项目中我们肯定要记录一些数据操作记录，用来跟踪每次请求的逻辑处理。方便我们在项目出现bug时候跟踪数据。\n在laravel中我们用下面函数来进行sql语句的记录：\n```\nDB::enableQueryLog();\nDB::getQueryLog();\n```\n\n我们可以将`DB::enableQueryLog()` 放在需要记录sql语句的请求的前置中间件中，用来开启sql记录。将`DB::getQueryLog()`放在需要记录请求的后置中间件中，记录所执行的sql。\n\n这就是中间件的作用。\n\n\n### 中间件参数###\n\n在调取中间件时，我们可以穿的附加参数。例如：\n```\n<?php\n\nnamespace App\\Http\\Middleware;\n\nuse Closure;\n\nclass CheckRole\n{\n    /**\n     * 处理传入的请求\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @param  \\Closure  $next\n     * @param  string  $role\n     * @return mixed\n     */\n    public function handle($request, Closure $next, $role)\n    {\n        if (! $request->user()->hasRole($role)) {\n            // Redirect...\n        }\n\n        return $next($request);\n    }\n\n}\n```\n传递指定参数可以:隔开\n```\nRoute::put('post/{id}', function ($id) {\n    //\n})->middleware('role:editor');\n```\n\n好了，本节就到此为止了。\n\n\n\n\n\n","source":"_posts/laravel学习笔记四中间件.md","raw":"---\ntitle: '''laravel学习笔记四中间件'''\ndate: 2016-03-02 19:44:12\ntags:\n---\n # Laravel 学习笔记四Http中间件\n\n标签（空格分隔）： laravel\n\n---\n \n \n ### 简介###\n  关于中间件，从字面意思上我们很好理解中间件的意思。就是存在两个节点之间的节点。这里我们所描述的节点是`Route`和`Controller`。\n  \n  \n  一次正产给的请求是客户端发送请求，服务端接受请求，然后对参数做一些判断然后处理逻辑。任何请求都会从进入控制器开始就直接进入真正的逻辑处理，我们会先判断请求参数是否正确，以防止黑客攻击。比较常见的处理逻辑反馈有403、503页面。这些是我们在接受参数后对参数进行处理，从而反馈到客户端。如果我们传递参数较多，对参数筛选很严格的话，就会出现很多对参数判断的代码，以及当一些对参数判断的代码需要复用时候我们无法将其从控制器中分离出来，这些都是我们平常工作中饭经常遇到的问题。这是`中间件`就能很好地处理这个问题了。\n  \n  间件的作用是在请求从`Route`进入控制器是时，我们可以先将请求引入到中间件中，对数据做些处理，然后才引入到控制器中，或者直接反馈给客户端。这样我们的控制器可以专心于数据逻辑，从而代码简洁，以及参数判断代码会得到复用，很大的提升工作效率。\n\n\n \n ### 创建一个控制器###\n\n第一步我们来创建一个中间件。在`larval`中，自带了一条命令用来创建中间件。`php artisan make:middleware CheckAge` 。我们可以用此命令创建一个`CheckAge`的中间，用来过滤用户的年龄。穿件代码如下：\n\n```\n<?php\n\nnamespace App\\Http\\Middleware;\n\nuse Closure;\n\nclass CheckAge\n{\n    /**\n     * 运行请求过滤器。\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @param  \\Closure  $next\n     * @return mixed\n     */\n    public function handle($request, Closure $next)\n    {\n        if ($request->age <= 200) {\n            return redirect('home');\n        }\n\n        return $next($request);\n    }\n\n}\n```\n 当然在这里少不了路由的代码，我们的请求先到路由，然后到中间件最后到控制器。\n```\nRoute::get('getuser/user/{id}/age/{age}',UserController@getUser)->middleware('CheckAge');\n```\n 在这段代码中我们把所有请求age大于200的重定向到`home`中，佛则就继续，这样就是实现了参数过滤。这就是中间件的基本作用。\n \n# 注册中间件###\n\n \n 我们的中间件在使用前，是需要注册的。否则我们无法正常调用到我们的中间件。这个注册文件在`app/Http/Kernel.php`中。我们打开这个文件。\n\n\n```\n<?php\n\nnamespace App\\Http;\n\nuse Illuminate\\Foundation\\Http\\Kernel as HttpKernel;\n\nclass Kernel extends HttpKernel\n{\n    // 这里注册是全局的中间件，在所有的都需要经过这个中间件来过滤信息，无论是来之web的请求还是API的///请求\n    protected $middleware = [\n        \\Illuminate\\Foundation\\Http\\Middleware\\CheckForMaintenanceMode::class,\n    ];\n\n    // 中间件群组，在这里我们可以注册中间件群组，用来给请求批量的添加空间。这里laravel中web请求默认     //都必须经过web群组的中间的过滤，api请求需要经过api群组的中间件过滤。使用实例在下边已经给出。\n    protected $middlewareGroups = [\n        'web' => [\n            \\App\\Http\\Middleware\\EncryptCookies::class,\n            \\Illuminate\\Cookie\\Middleware\\AddQueuedCookiesToResponse::class,\n            \\Illuminate\\Session\\Middleware\\StartSession::class,\n            \\Illuminate\\View\\Middleware\\ShareErrorsFromSession::class,\n            \\App\\Http\\Middleware\\VerifyCsrfToken::class,\n        ],\n\n        'api' => [\n            'throttle:60,1',\n        ],\n    ];\n    \n    // 非全局的中间件，单独给某些路由指定下面的中间件（用户自己编写）。\n    protected $routeMiddleware = [\n        'auth' => \\App\\Http\\Middleware\\Authenticate::class,\n        'auth.basic' => \\Illuminate\\Auth\\Middleware\\AuthenticateWithBasicAuth::class,\n        'can' => \\Illuminate\\Foundation\\Http\\Middleware\\Authorize::class,\n        'guest' => \\App\\Http\\Middleware\\RedirectIfAuthenticated::class,\n        'throttle' => \\Illuminate\\Routing\\Middleware\\ThrottleRequests::class,\n    ];\n}\n```\n群组使用\n```\nRoute::group(['middleware' => ['web']], function () {\n    //\n})\n```\n\n我们可以看出这个`Kernel.php`文件中有是哪个属性，分别为 `protected $middleware` `protected $middlewareGroups` `protected $routeMiddleware` 这三个属性分别用来注册`全局中间件` `群组中间件` `和自定义中间件`。\n\n### 特殊中间件###\n\n在中间件中用连个比较特殊的中间件，分别为`前置中间件` `和后置中间件`。顾名思义，前置中间件就是在请求前运作的，后置中间件就是在请求后运作的。这有什么用呢？我们可以在这里举一个栗子：\n\n在正常的项目中我们肯定要记录一些数据操作记录，用来跟踪每次请求的逻辑处理。方便我们在项目出现bug时候跟踪数据。\n在laravel中我们用下面函数来进行sql语句的记录：\n```\nDB::enableQueryLog();\nDB::getQueryLog();\n```\n\n我们可以将`DB::enableQueryLog()` 放在需要记录sql语句的请求的前置中间件中，用来开启sql记录。将`DB::getQueryLog()`放在需要记录请求的后置中间件中，记录所执行的sql。\n\n这就是中间件的作用。\n\n\n### 中间件参数###\n\n在调取中间件时，我们可以穿的附加参数。例如：\n```\n<?php\n\nnamespace App\\Http\\Middleware;\n\nuse Closure;\n\nclass CheckRole\n{\n    /**\n     * 处理传入的请求\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @param  \\Closure  $next\n     * @param  string  $role\n     * @return mixed\n     */\n    public function handle($request, Closure $next, $role)\n    {\n        if (! $request->user()->hasRole($role)) {\n            // Redirect...\n        }\n\n        return $next($request);\n    }\n\n}\n```\n传递指定参数可以:隔开\n```\nRoute::put('post/{id}', function ($id) {\n    //\n})->middleware('role:editor');\n```\n\n好了，本节就到此为止了。\n\n\n\n\n\n","slug":"laravel学习笔记四中间件","published":1,"updated":"2018-06-19T10:35:54.667Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlz6uwgr00080uwwpep9k7pw","content":"<h1 id=\"Laravel-学习笔记四Http中间件\"><a href=\"#Laravel-学习笔记四Http中间件\" class=\"headerlink\" title=\"Laravel 学习笔记四Http中间件\"></a>Laravel 学习笔记四Http中间件</h1><p>标签（空格分隔）： laravel</p>\n<hr>\n<h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>  关于中间件，从字面意思上我们很好理解中间件的意思。就是存在两个节点之间的节点。这里我们所描述的节点是<code>Route</code>和<code>Controller</code>。</p>\n<p>  一次正产给的请求是客户端发送请求，服务端接受请求，然后对参数做一些判断然后处理逻辑。任何请求都会从进入控制器开始就直接进入真正的逻辑处理，我们会先判断请求参数是否正确，以防止黑客攻击。比较常见的处理逻辑反馈有403、503页面。这些是我们在接受参数后对参数进行处理，从而反馈到客户端。如果我们传递参数较多，对参数筛选很严格的话，就会出现很多对参数判断的代码，以及当一些对参数判断的代码需要复用时候我们无法将其从控制器中分离出来，这些都是我们平常工作中饭经常遇到的问题。这是<code>中间件</code>就能很好地处理这个问题了。</p>\n<p>  间件的作用是在请求从<code>Route</code>进入控制器是时，我们可以先将请求引入到中间件中，对数据做些处理，然后才引入到控制器中，或者直接反馈给客户端。这样我们的控制器可以专心于数据逻辑，从而代码简洁，以及参数判断代码会得到复用，很大的提升工作效率。</p>\n<h3 id=\"创建一个控制器\"><a href=\"#创建一个控制器\" class=\"headerlink\" title=\"创建一个控制器\"></a>创建一个控制器</h3><p>第一步我们来创建一个中间件。在<code>larval</code>中，自带了一条命令用来创建中间件。<code>php artisan make:middleware CheckAge</code> 。我们可以用此命令创建一个<code>CheckAge</code>的中间，用来过滤用户的年龄。穿件代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?php</div><div class=\"line\"></div><div class=\"line\">namespace App\\Http\\Middleware;</div><div class=\"line\"></div><div class=\"line\">use Closure;</div><div class=\"line\"></div><div class=\"line\">class CheckAge</div><div class=\"line\">&#123;</div><div class=\"line\">    /**</div><div class=\"line\">     * 运行请求过滤器。</div><div class=\"line\">     *</div><div class=\"line\">     * @param  \\Illuminate\\Http\\Request  $request</div><div class=\"line\">     * @param  \\Closure  $next</div><div class=\"line\">     * @return mixed</div><div class=\"line\">     */</div><div class=\"line\">    public function handle($request, Closure $next)</div><div class=\"line\">    &#123;</div><div class=\"line\">        if ($request-&gt;age &lt;= 200) &#123;</div><div class=\"line\">            return redirect(&apos;home&apos;);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        return $next($request);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p> 当然在这里少不了路由的代码，我们的请求先到路由，然后到中间件最后到控制器。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Route::get(&apos;getuser/user/&#123;id&#125;/age/&#123;age&#125;&apos;,UserController@getUser)-&gt;middleware(&apos;CheckAge&apos;);</div></pre></td></tr></table></figure></p>\n<p> 在这段代码中我们把所有请求age大于200的重定向到<code>home</code>中，佛则就继续，这样就是实现了参数过滤。这就是中间件的基本作用。</p>\n<h1 id=\"注册中间件\"><a href=\"#注册中间件\" class=\"headerlink\" title=\"注册中间件\"></a>注册中间件</h1><p> 我们的中间件在使用前，是需要注册的。否则我们无法正常调用到我们的中间件。这个注册文件在<code>app/Http/Kernel.php</code>中。我们打开这个文件。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?php</div><div class=\"line\"></div><div class=\"line\">namespace App\\Http;</div><div class=\"line\"></div><div class=\"line\">use Illuminate\\Foundation\\Http\\Kernel as HttpKernel;</div><div class=\"line\"></div><div class=\"line\">class Kernel extends HttpKernel</div><div class=\"line\">&#123;</div><div class=\"line\">    // 这里注册是全局的中间件，在所有的都需要经过这个中间件来过滤信息，无论是来之web的请求还是API的///请求</div><div class=\"line\">    protected $middleware = [</div><div class=\"line\">        \\Illuminate\\Foundation\\Http\\Middleware\\CheckForMaintenanceMode::class,</div><div class=\"line\">    ];</div><div class=\"line\"></div><div class=\"line\">    // 中间件群组，在这里我们可以注册中间件群组，用来给请求批量的添加空间。这里laravel中web请求默认     //都必须经过web群组的中间的过滤，api请求需要经过api群组的中间件过滤。使用实例在下边已经给出。</div><div class=\"line\">    protected $middlewareGroups = [</div><div class=\"line\">        &apos;web&apos; =&gt; [</div><div class=\"line\">            \\App\\Http\\Middleware\\EncryptCookies::class,</div><div class=\"line\">            \\Illuminate\\Cookie\\Middleware\\AddQueuedCookiesToResponse::class,</div><div class=\"line\">            \\Illuminate\\Session\\Middleware\\StartSession::class,</div><div class=\"line\">            \\Illuminate\\View\\Middleware\\ShareErrorsFromSession::class,</div><div class=\"line\">            \\App\\Http\\Middleware\\VerifyCsrfToken::class,</div><div class=\"line\">        ],</div><div class=\"line\"></div><div class=\"line\">        &apos;api&apos; =&gt; [</div><div class=\"line\">            &apos;throttle:60,1&apos;,</div><div class=\"line\">        ],</div><div class=\"line\">    ];</div><div class=\"line\">    </div><div class=\"line\">    // 非全局的中间件，单独给某些路由指定下面的中间件（用户自己编写）。</div><div class=\"line\">    protected $routeMiddleware = [</div><div class=\"line\">        &apos;auth&apos; =&gt; \\App\\Http\\Middleware\\Authenticate::class,</div><div class=\"line\">        &apos;auth.basic&apos; =&gt; \\Illuminate\\Auth\\Middleware\\AuthenticateWithBasicAuth::class,</div><div class=\"line\">        &apos;can&apos; =&gt; \\Illuminate\\Foundation\\Http\\Middleware\\Authorize::class,</div><div class=\"line\">        &apos;guest&apos; =&gt; \\App\\Http\\Middleware\\RedirectIfAuthenticated::class,</div><div class=\"line\">        &apos;throttle&apos; =&gt; \\Illuminate\\Routing\\Middleware\\ThrottleRequests::class,</div><div class=\"line\">    ];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>群组使用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Route::group([&apos;middleware&apos; =&gt; [&apos;web&apos;]], function () &#123;</div><div class=\"line\">    //</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>我们可以看出这个<code>Kernel.php</code>文件中有是哪个属性，分别为 <code>protected $middleware</code> <code>protected $middlewareGroups</code> <code>protected $routeMiddleware</code> 这三个属性分别用来注册<code>全局中间件</code> <code>群组中间件</code> <code>和自定义中间件</code>。</p>\n<h3 id=\"特殊中间件\"><a href=\"#特殊中间件\" class=\"headerlink\" title=\"特殊中间件\"></a>特殊中间件</h3><p>在中间件中用连个比较特殊的中间件，分别为<code>前置中间件</code> <code>和后置中间件</code>。顾名思义，前置中间件就是在请求前运作的，后置中间件就是在请求后运作的。这有什么用呢？我们可以在这里举一个栗子：</p>\n<p>在正常的项目中我们肯定要记录一些数据操作记录，用来跟踪每次请求的逻辑处理。方便我们在项目出现bug时候跟踪数据。<br>在laravel中我们用下面函数来进行sql语句的记录：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">DB::enableQueryLog();</div><div class=\"line\">DB::getQueryLog();</div></pre></td></tr></table></figure></p>\n<p>我们可以将<code>DB::enableQueryLog()</code> 放在需要记录sql语句的请求的前置中间件中，用来开启sql记录。将<code>DB::getQueryLog()</code>放在需要记录请求的后置中间件中，记录所执行的sql。</p>\n<p>这就是中间件的作用。</p>\n<h3 id=\"中间件参数\"><a href=\"#中间件参数\" class=\"headerlink\" title=\"中间件参数\"></a>中间件参数</h3><p>在调取中间件时，我们可以穿的附加参数。例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?php</div><div class=\"line\"></div><div class=\"line\">namespace App\\Http\\Middleware;</div><div class=\"line\"></div><div class=\"line\">use Closure;</div><div class=\"line\"></div><div class=\"line\">class CheckRole</div><div class=\"line\">&#123;</div><div class=\"line\">    /**</div><div class=\"line\">     * 处理传入的请求</div><div class=\"line\">     *</div><div class=\"line\">     * @param  \\Illuminate\\Http\\Request  $request</div><div class=\"line\">     * @param  \\Closure  $next</div><div class=\"line\">     * @param  string  $role</div><div class=\"line\">     * @return mixed</div><div class=\"line\">     */</div><div class=\"line\">    public function handle($request, Closure $next, $role)</div><div class=\"line\">    &#123;</div><div class=\"line\">        if (! $request-&gt;user()-&gt;hasRole($role)) &#123;</div><div class=\"line\">            // Redirect...</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        return $next($request);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>传递指定参数可以:隔开<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Route::put(&apos;post/&#123;id&#125;&apos;, function ($id) &#123;</div><div class=\"line\">    //</div><div class=\"line\">&#125;)-&gt;middleware(&apos;role:editor&apos;);</div></pre></td></tr></table></figure></p>\n<p>好了，本节就到此为止了。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Laravel-学习笔记四Http中间件\"><a href=\"#Laravel-学习笔记四Http中间件\" class=\"headerlink\" title=\"Laravel 学习笔记四Http中间件\"></a>Laravel 学习笔记四Http中间件</h1><p>标签（空格分隔）： laravel</p>\n<hr>\n<h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>  关于中间件，从字面意思上我们很好理解中间件的意思。就是存在两个节点之间的节点。这里我们所描述的节点是<code>Route</code>和<code>Controller</code>。</p>\n<p>  一次正产给的请求是客户端发送请求，服务端接受请求，然后对参数做一些判断然后处理逻辑。任何请求都会从进入控制器开始就直接进入真正的逻辑处理，我们会先判断请求参数是否正确，以防止黑客攻击。比较常见的处理逻辑反馈有403、503页面。这些是我们在接受参数后对参数进行处理，从而反馈到客户端。如果我们传递参数较多，对参数筛选很严格的话，就会出现很多对参数判断的代码，以及当一些对参数判断的代码需要复用时候我们无法将其从控制器中分离出来，这些都是我们平常工作中饭经常遇到的问题。这是<code>中间件</code>就能很好地处理这个问题了。</p>\n<p>  间件的作用是在请求从<code>Route</code>进入控制器是时，我们可以先将请求引入到中间件中，对数据做些处理，然后才引入到控制器中，或者直接反馈给客户端。这样我们的控制器可以专心于数据逻辑，从而代码简洁，以及参数判断代码会得到复用，很大的提升工作效率。</p>\n<h3 id=\"创建一个控制器\"><a href=\"#创建一个控制器\" class=\"headerlink\" title=\"创建一个控制器\"></a>创建一个控制器</h3><p>第一步我们来创建一个中间件。在<code>larval</code>中，自带了一条命令用来创建中间件。<code>php artisan make:middleware CheckAge</code> 。我们可以用此命令创建一个<code>CheckAge</code>的中间，用来过滤用户的年龄。穿件代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?php</div><div class=\"line\"></div><div class=\"line\">namespace App\\Http\\Middleware;</div><div class=\"line\"></div><div class=\"line\">use Closure;</div><div class=\"line\"></div><div class=\"line\">class CheckAge</div><div class=\"line\">&#123;</div><div class=\"line\">    /**</div><div class=\"line\">     * 运行请求过滤器。</div><div class=\"line\">     *</div><div class=\"line\">     * @param  \\Illuminate\\Http\\Request  $request</div><div class=\"line\">     * @param  \\Closure  $next</div><div class=\"line\">     * @return mixed</div><div class=\"line\">     */</div><div class=\"line\">    public function handle($request, Closure $next)</div><div class=\"line\">    &#123;</div><div class=\"line\">        if ($request-&gt;age &lt;= 200) &#123;</div><div class=\"line\">            return redirect(&apos;home&apos;);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        return $next($request);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p> 当然在这里少不了路由的代码，我们的请求先到路由，然后到中间件最后到控制器。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Route::get(&apos;getuser/user/&#123;id&#125;/age/&#123;age&#125;&apos;,UserController@getUser)-&gt;middleware(&apos;CheckAge&apos;);</div></pre></td></tr></table></figure></p>\n<p> 在这段代码中我们把所有请求age大于200的重定向到<code>home</code>中，佛则就继续，这样就是实现了参数过滤。这就是中间件的基本作用。</p>\n<h1 id=\"注册中间件\"><a href=\"#注册中间件\" class=\"headerlink\" title=\"注册中间件\"></a>注册中间件</h1><p> 我们的中间件在使用前，是需要注册的。否则我们无法正常调用到我们的中间件。这个注册文件在<code>app/Http/Kernel.php</code>中。我们打开这个文件。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?php</div><div class=\"line\"></div><div class=\"line\">namespace App\\Http;</div><div class=\"line\"></div><div class=\"line\">use Illuminate\\Foundation\\Http\\Kernel as HttpKernel;</div><div class=\"line\"></div><div class=\"line\">class Kernel extends HttpKernel</div><div class=\"line\">&#123;</div><div class=\"line\">    // 这里注册是全局的中间件，在所有的都需要经过这个中间件来过滤信息，无论是来之web的请求还是API的///请求</div><div class=\"line\">    protected $middleware = [</div><div class=\"line\">        \\Illuminate\\Foundation\\Http\\Middleware\\CheckForMaintenanceMode::class,</div><div class=\"line\">    ];</div><div class=\"line\"></div><div class=\"line\">    // 中间件群组，在这里我们可以注册中间件群组，用来给请求批量的添加空间。这里laravel中web请求默认     //都必须经过web群组的中间的过滤，api请求需要经过api群组的中间件过滤。使用实例在下边已经给出。</div><div class=\"line\">    protected $middlewareGroups = [</div><div class=\"line\">        &apos;web&apos; =&gt; [</div><div class=\"line\">            \\App\\Http\\Middleware\\EncryptCookies::class,</div><div class=\"line\">            \\Illuminate\\Cookie\\Middleware\\AddQueuedCookiesToResponse::class,</div><div class=\"line\">            \\Illuminate\\Session\\Middleware\\StartSession::class,</div><div class=\"line\">            \\Illuminate\\View\\Middleware\\ShareErrorsFromSession::class,</div><div class=\"line\">            \\App\\Http\\Middleware\\VerifyCsrfToken::class,</div><div class=\"line\">        ],</div><div class=\"line\"></div><div class=\"line\">        &apos;api&apos; =&gt; [</div><div class=\"line\">            &apos;throttle:60,1&apos;,</div><div class=\"line\">        ],</div><div class=\"line\">    ];</div><div class=\"line\">    </div><div class=\"line\">    // 非全局的中间件，单独给某些路由指定下面的中间件（用户自己编写）。</div><div class=\"line\">    protected $routeMiddleware = [</div><div class=\"line\">        &apos;auth&apos; =&gt; \\App\\Http\\Middleware\\Authenticate::class,</div><div class=\"line\">        &apos;auth.basic&apos; =&gt; \\Illuminate\\Auth\\Middleware\\AuthenticateWithBasicAuth::class,</div><div class=\"line\">        &apos;can&apos; =&gt; \\Illuminate\\Foundation\\Http\\Middleware\\Authorize::class,</div><div class=\"line\">        &apos;guest&apos; =&gt; \\App\\Http\\Middleware\\RedirectIfAuthenticated::class,</div><div class=\"line\">        &apos;throttle&apos; =&gt; \\Illuminate\\Routing\\Middleware\\ThrottleRequests::class,</div><div class=\"line\">    ];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>群组使用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Route::group([&apos;middleware&apos; =&gt; [&apos;web&apos;]], function () &#123;</div><div class=\"line\">    //</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>我们可以看出这个<code>Kernel.php</code>文件中有是哪个属性，分别为 <code>protected $middleware</code> <code>protected $middlewareGroups</code> <code>protected $routeMiddleware</code> 这三个属性分别用来注册<code>全局中间件</code> <code>群组中间件</code> <code>和自定义中间件</code>。</p>\n<h3 id=\"特殊中间件\"><a href=\"#特殊中间件\" class=\"headerlink\" title=\"特殊中间件\"></a>特殊中间件</h3><p>在中间件中用连个比较特殊的中间件，分别为<code>前置中间件</code> <code>和后置中间件</code>。顾名思义，前置中间件就是在请求前运作的，后置中间件就是在请求后运作的。这有什么用呢？我们可以在这里举一个栗子：</p>\n<p>在正常的项目中我们肯定要记录一些数据操作记录，用来跟踪每次请求的逻辑处理。方便我们在项目出现bug时候跟踪数据。<br>在laravel中我们用下面函数来进行sql语句的记录：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">DB::enableQueryLog();</div><div class=\"line\">DB::getQueryLog();</div></pre></td></tr></table></figure></p>\n<p>我们可以将<code>DB::enableQueryLog()</code> 放在需要记录sql语句的请求的前置中间件中，用来开启sql记录。将<code>DB::getQueryLog()</code>放在需要记录请求的后置中间件中，记录所执行的sql。</p>\n<p>这就是中间件的作用。</p>\n<h3 id=\"中间件参数\"><a href=\"#中间件参数\" class=\"headerlink\" title=\"中间件参数\"></a>中间件参数</h3><p>在调取中间件时，我们可以穿的附加参数。例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?php</div><div class=\"line\"></div><div class=\"line\">namespace App\\Http\\Middleware;</div><div class=\"line\"></div><div class=\"line\">use Closure;</div><div class=\"line\"></div><div class=\"line\">class CheckRole</div><div class=\"line\">&#123;</div><div class=\"line\">    /**</div><div class=\"line\">     * 处理传入的请求</div><div class=\"line\">     *</div><div class=\"line\">     * @param  \\Illuminate\\Http\\Request  $request</div><div class=\"line\">     * @param  \\Closure  $next</div><div class=\"line\">     * @param  string  $role</div><div class=\"line\">     * @return mixed</div><div class=\"line\">     */</div><div class=\"line\">    public function handle($request, Closure $next, $role)</div><div class=\"line\">    &#123;</div><div class=\"line\">        if (! $request-&gt;user()-&gt;hasRole($role)) &#123;</div><div class=\"line\">            // Redirect...</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        return $next($request);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>传递指定参数可以:隔开<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Route::put(&apos;post/&#123;id&#125;&apos;, function ($id) &#123;</div><div class=\"line\">    //</div><div class=\"line\">&#125;)-&gt;middleware(&apos;role:editor&apos;);</div></pre></td></tr></table></figure></p>\n<p>好了，本节就到此为止了。</p>\n"},{"layout":"'laravel","title":"laravel学习笔记","date":"2016-02-08T14:10:05.000Z","_content":"# laravel-  学习笔记\n------\n\n \n\n## laravel 配置篇 ##\nlavel 有三种安装方法：\n\n - 使用composer安装\n - 使用laravel安装器安装\n - 下载解压安装\n \n###  composer ###\n先说第一种，使用composer安装，使用 composer create-project 进行安装\n```\ncomposer create-project --prefer-dist laravel/laravel blog\n```\n### laravel安装器### \n\n 使用laravel安装器首先需要安装laravel安装器，让我们来使用composer安装laravel安装器\n\n```\ncomposer global require \"laravel/installer\"\n```\n\n当然我们在使用laravel安装器安装laravel之前，需要配置PATH环境变量，不然系统找不到laravel安装器\nlaravel安装器默认位置\nWindows:\n`C:\\Users\\admin\\AppData\\Roaming\\Composer\\vendor\\bin`\nlinux:\n`~/.composer/vendor/bin`\n\n\n### 下载解压安装 ###\n因为composer可能被墙，所以golaravel给出了已经集成了所有以来的laravel意见安装包\n下载地址为`http://www.golaravel.com/download/`\n\n\n# 配置\nlaravel所有的配置文件都在根目录conf文件夹下\n当然我们不能忽视的一个很重的一点，就是要设置laravel的应用key，如果不加以设置，我的会话和其他需要加密的信息将会不安全，让然我们通过composer或者laravel安装器安装的laravel不需要进行配置，因为在我们安装laravel时候composer和laravel已经给我们配置好了，所以通过第三种方法安装laravel的，需要为laravel配置新的key，生成key的方法是，在laravel根目录输入`key:generate`.\nlaravel所有的配置都是conf文件夹下的，但是为了方便配置，laravel调用根目录的.env,我们配置框架最关键的数据库信息卸载根目录的.env文件里\n\n# 开发服务器\n\nlaravel为我们提供了一个简单的开发服务器，当我需要时只需要在跟路面输入命令`php artisan serve`即可。但是这毕竟是开发使用过的，不能再生产环境中使用。\n#laravel其他\nlaravel还为我们提供很多其他功能，具体我就不在此赘述，需要请看官网。\n","source":"_posts/larave学习笔记.md","raw":"layout: '''laravel'\ntitle: laravel学习笔记\ndate: 2016-02-08 22:10:05\ntags:\n---\n# laravel-  学习笔记\n------\n\n \n\n## laravel 配置篇 ##\nlavel 有三种安装方法：\n\n - 使用composer安装\n - 使用laravel安装器安装\n - 下载解压安装\n \n###  composer ###\n先说第一种，使用composer安装，使用 composer create-project 进行安装\n```\ncomposer create-project --prefer-dist laravel/laravel blog\n```\n### laravel安装器### \n\n 使用laravel安装器首先需要安装laravel安装器，让我们来使用composer安装laravel安装器\n\n```\ncomposer global require \"laravel/installer\"\n```\n\n当然我们在使用laravel安装器安装laravel之前，需要配置PATH环境变量，不然系统找不到laravel安装器\nlaravel安装器默认位置\nWindows:\n`C:\\Users\\admin\\AppData\\Roaming\\Composer\\vendor\\bin`\nlinux:\n`~/.composer/vendor/bin`\n\n\n### 下载解压安装 ###\n因为composer可能被墙，所以golaravel给出了已经集成了所有以来的laravel意见安装包\n下载地址为`http://www.golaravel.com/download/`\n\n\n# 配置\nlaravel所有的配置文件都在根目录conf文件夹下\n当然我们不能忽视的一个很重的一点，就是要设置laravel的应用key，如果不加以设置，我的会话和其他需要加密的信息将会不安全，让然我们通过composer或者laravel安装器安装的laravel不需要进行配置，因为在我们安装laravel时候composer和laravel已经给我们配置好了，所以通过第三种方法安装laravel的，需要为laravel配置新的key，生成key的方法是，在laravel根目录输入`key:generate`.\nlaravel所有的配置都是conf文件夹下的，但是为了方便配置，laravel调用根目录的.env,我们配置框架最关键的数据库信息卸载根目录的.env文件里\n\n# 开发服务器\n\nlaravel为我们提供了一个简单的开发服务器，当我需要时只需要在跟路面输入命令`php artisan serve`即可。但是这毕竟是开发使用过的，不能再生产环境中使用。\n#laravel其他\nlaravel还为我们提供很多其他功能，具体我就不在此赘述，需要请看官网。\n","slug":"larave学习笔记","published":1,"updated":"2018-07-12T13:56:07.558Z","comments":1,"photos":[],"link":"","_id":"cjlz6uwgs00090uwwtrfqnjy0","content":"<h1 id=\"laravel-学习笔记\"><a href=\"#laravel-学习笔记\" class=\"headerlink\" title=\"laravel-  学习笔记\"></a>laravel-  学习笔记</h1><hr>\n<h2 id=\"laravel-配置篇\"><a href=\"#laravel-配置篇\" class=\"headerlink\" title=\"laravel 配置篇\"></a>laravel 配置篇</h2><p>lavel 有三种安装方法：</p>\n<ul>\n<li>使用composer安装</li>\n<li>使用laravel安装器安装</li>\n<li>下载解压安装</li>\n</ul>\n<h3 id=\"composer\"><a href=\"#composer\" class=\"headerlink\" title=\"composer\"></a>composer</h3><p>先说第一种，使用composer安装，使用 composer create-project 进行安装<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">composer create-project --prefer-dist laravel/laravel blog</div></pre></td></tr></table></figure></p>\n<h3 id=\"laravel安装器\"><a href=\"#laravel安装器\" class=\"headerlink\" title=\"laravel安装器\"></a>laravel安装器</h3><p> 使用laravel安装器首先需要安装laravel安装器，让我们来使用composer安装laravel安装器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">composer global require &quot;laravel/installer&quot;</div></pre></td></tr></table></figure>\n<p>当然我们在使用laravel安装器安装laravel之前，需要配置PATH环境变量，不然系统找不到laravel安装器<br>laravel安装器默认位置<br>Windows:<br><code>C:\\Users\\admin\\AppData\\Roaming\\Composer\\vendor\\bin</code><br>linux:<br><code>~/.composer/vendor/bin</code></p>\n<h3 id=\"下载解压安装\"><a href=\"#下载解压安装\" class=\"headerlink\" title=\"下载解压安装\"></a>下载解压安装</h3><p>因为composer可能被墙，所以golaravel给出了已经集成了所有以来的laravel意见安装包<br>下载地址为<code>http://www.golaravel.com/download/</code></p>\n<h1 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h1><p>laravel所有的配置文件都在根目录conf文件夹下<br>当然我们不能忽视的一个很重的一点，就是要设置laravel的应用key，如果不加以设置，我的会话和其他需要加密的信息将会不安全，让然我们通过composer或者laravel安装器安装的laravel不需要进行配置，因为在我们安装laravel时候composer和laravel已经给我们配置好了，所以通过第三种方法安装laravel的，需要为laravel配置新的key，生成key的方法是，在laravel根目录输入<code>key:generate</code>.<br>laravel所有的配置都是conf文件夹下的，但是为了方便配置，laravel调用根目录的.env,我们配置框架最关键的数据库信息卸载根目录的.env文件里</p>\n<h1 id=\"开发服务器\"><a href=\"#开发服务器\" class=\"headerlink\" title=\"开发服务器\"></a>开发服务器</h1><p>laravel为我们提供了一个简单的开发服务器，当我需要时只需要在跟路面输入命令<code>php artisan serve</code>即可。但是这毕竟是开发使用过的，不能再生产环境中使用。</p>\n<p>#laravel其他<br>laravel还为我们提供很多其他功能，具体我就不在此赘述，需要请看官网。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"laravel-学习笔记\"><a href=\"#laravel-学习笔记\" class=\"headerlink\" title=\"laravel-  学习笔记\"></a>laravel-  学习笔记</h1><hr>\n<h2 id=\"laravel-配置篇\"><a href=\"#laravel-配置篇\" class=\"headerlink\" title=\"laravel 配置篇\"></a>laravel 配置篇</h2><p>lavel 有三种安装方法：</p>\n<ul>\n<li>使用composer安装</li>\n<li>使用laravel安装器安装</li>\n<li>下载解压安装</li>\n</ul>\n<h3 id=\"composer\"><a href=\"#composer\" class=\"headerlink\" title=\"composer\"></a>composer</h3><p>先说第一种，使用composer安装，使用 composer create-project 进行安装<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">composer create-project --prefer-dist laravel/laravel blog</div></pre></td></tr></table></figure></p>\n<h3 id=\"laravel安装器\"><a href=\"#laravel安装器\" class=\"headerlink\" title=\"laravel安装器\"></a>laravel安装器</h3><p> 使用laravel安装器首先需要安装laravel安装器，让我们来使用composer安装laravel安装器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">composer global require &quot;laravel/installer&quot;</div></pre></td></tr></table></figure>\n<p>当然我们在使用laravel安装器安装laravel之前，需要配置PATH环境变量，不然系统找不到laravel安装器<br>laravel安装器默认位置<br>Windows:<br><code>C:\\Users\\admin\\AppData\\Roaming\\Composer\\vendor\\bin</code><br>linux:<br><code>~/.composer/vendor/bin</code></p>\n<h3 id=\"下载解压安装\"><a href=\"#下载解压安装\" class=\"headerlink\" title=\"下载解压安装\"></a>下载解压安装</h3><p>因为composer可能被墙，所以golaravel给出了已经集成了所有以来的laravel意见安装包<br>下载地址为<code>http://www.golaravel.com/download/</code></p>\n<h1 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h1><p>laravel所有的配置文件都在根目录conf文件夹下<br>当然我们不能忽视的一个很重的一点，就是要设置laravel的应用key，如果不加以设置，我的会话和其他需要加密的信息将会不安全，让然我们通过composer或者laravel安装器安装的laravel不需要进行配置，因为在我们安装laravel时候composer和laravel已经给我们配置好了，所以通过第三种方法安装laravel的，需要为laravel配置新的key，生成key的方法是，在laravel根目录输入<code>key:generate</code>.<br>laravel所有的配置都是conf文件夹下的，但是为了方便配置，laravel调用根目录的.env,我们配置框架最关键的数据库信息卸载根目录的.env文件里</p>\n<h1 id=\"开发服务器\"><a href=\"#开发服务器\" class=\"headerlink\" title=\"开发服务器\"></a>开发服务器</h1><p>laravel为我们提供了一个简单的开发服务器，当我需要时只需要在跟路面输入命令<code>php artisan serve</code>即可。但是这毕竟是开发使用过的，不能再生产环境中使用。</p>\n<p>#laravel其他<br>laravel还为我们提供很多其他功能，具体我就不在此赘述，需要请看官网。</p>\n"},{"title":"php curl","date":"2015-07-18T12:28:10.000Z","_content":"\n\n### 参数1\n\ncurl_setopt \nCURLOPT_RETURNTRANSFER 表示是否直接输出到控制台\n eg:\n \n```php\n$curl = curl_init();\ncurl_setopt($curl, CURLOPT_URL, 'http://baidu.com');\ncurl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);\ncurl_setopt($curl, CURLOPT_HEADER, 0);\n// curl_setopt($curl, CURLOPT_POST, 1);\n$ret = curl_exec($curl);\n// var_dump($ret);\n```\n\n输出结果为:\n\n![image](/photo/img/php-curl/DingTalk20180718203726.png)\n\n打开参数\n\n```\n<?php\n$curl = curl_init();\ncurl_setopt($curl, CURLOPT_URL, 'http://baidu.com');\ncurl_setopt($curl, CURLOPT_RETURNTRANSFER, 0);\ncurl_setopt($curl, CURLOPT_HEADER, 0);\n// curl_setopt($curl, CURLOPT_POST, 1);\n$ret = curl_exec($curl);\n// var_dump($ret);\n```\n\n输出结果\n\n![image](/photo/img/php-curl/DingTalk20180718204055.png)\n\n\n### 参数2\n\nCURLOPT_HEADER\nCURLOPT_HEADER 表示是否输出头信息\n\n```\n<?php\n$curl = curl_init();\ncurl_setopt($curl, CURLOPT_URL, 'http://baidu.com');\ncurl_setopt($curl, CURLOPT_RETURNTRANSFER, 0);\ncurl_setopt($curl, CURLOPT_HEADER, 1);\n// curl_setopt($curl, CURLOPT_POST, 1);\n$ret = curl_exec($curl);\n// var_dump($ret);\n```\n返回结果\n![image](/photo/img/php-curl/DingTalk20180718204343.png)\n\n```\n<?php\n$curl = curl_init();\ncurl_setopt($curl, CURLOPT_URL, 'http://baidu.com');\ncurl_setopt($curl, CURLOPT_RETURNTRANSFER, 0);\ncurl_setopt($curl, CURLOPT_HEADER, 0);\n// curl_setopt($curl, CURLOPT_POST, 1);\n$ret = curl_exec($curl);\n// var_dump($ret);\n```\n返回结果\n![image](/photo/img/php-curl/DingTalk20180718204411.png)\n\n\n## get 与 post\n\n`get`\n```\n//初始化\n$curl = curl_init();\n//设置url\ncurl_setopt($curl, CURLOPT_URL, 'http://baidu.com');\ncurl_setopt($curl, CURLOPT_RETURNTRANSFER, 0);\ncurl_setopt($curl, CURLOPT_HEADER, 0);\n$ret = curl_exec($curl);\n//关闭\ncurl_close($curl);\n```\n\n`post`\n\n```\n//初始化\n$curl = curl_init();\n//设置url\ncurl_setopt($curl, CURLOPT_URL, 'http://baidu.com');\ncurl_setopt($curl, CURLOPT_RETURNTRANSFER, 0);\ncurl_setopt($curl, CURLOPT_HEADER, 0);\ncurl_setopt($curl, CURLOPT_POST, 1);\n$ret = curl_exec($curl);\n//关闭\ncurl_close($curl);\n```","source":"_posts/php-curl.md","raw":"---\ntitle: php curl\ndate: 2015-07-18 20:28:10\ntags: curl\n---\n\n\n### 参数1\n\ncurl_setopt \nCURLOPT_RETURNTRANSFER 表示是否直接输出到控制台\n eg:\n \n```php\n$curl = curl_init();\ncurl_setopt($curl, CURLOPT_URL, 'http://baidu.com');\ncurl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);\ncurl_setopt($curl, CURLOPT_HEADER, 0);\n// curl_setopt($curl, CURLOPT_POST, 1);\n$ret = curl_exec($curl);\n// var_dump($ret);\n```\n\n输出结果为:\n\n![image](/photo/img/php-curl/DingTalk20180718203726.png)\n\n打开参数\n\n```\n<?php\n$curl = curl_init();\ncurl_setopt($curl, CURLOPT_URL, 'http://baidu.com');\ncurl_setopt($curl, CURLOPT_RETURNTRANSFER, 0);\ncurl_setopt($curl, CURLOPT_HEADER, 0);\n// curl_setopt($curl, CURLOPT_POST, 1);\n$ret = curl_exec($curl);\n// var_dump($ret);\n```\n\n输出结果\n\n![image](/photo/img/php-curl/DingTalk20180718204055.png)\n\n\n### 参数2\n\nCURLOPT_HEADER\nCURLOPT_HEADER 表示是否输出头信息\n\n```\n<?php\n$curl = curl_init();\ncurl_setopt($curl, CURLOPT_URL, 'http://baidu.com');\ncurl_setopt($curl, CURLOPT_RETURNTRANSFER, 0);\ncurl_setopt($curl, CURLOPT_HEADER, 1);\n// curl_setopt($curl, CURLOPT_POST, 1);\n$ret = curl_exec($curl);\n// var_dump($ret);\n```\n返回结果\n![image](/photo/img/php-curl/DingTalk20180718204343.png)\n\n```\n<?php\n$curl = curl_init();\ncurl_setopt($curl, CURLOPT_URL, 'http://baidu.com');\ncurl_setopt($curl, CURLOPT_RETURNTRANSFER, 0);\ncurl_setopt($curl, CURLOPT_HEADER, 0);\n// curl_setopt($curl, CURLOPT_POST, 1);\n$ret = curl_exec($curl);\n// var_dump($ret);\n```\n返回结果\n![image](/photo/img/php-curl/DingTalk20180718204411.png)\n\n\n## get 与 post\n\n`get`\n```\n//初始化\n$curl = curl_init();\n//设置url\ncurl_setopt($curl, CURLOPT_URL, 'http://baidu.com');\ncurl_setopt($curl, CURLOPT_RETURNTRANSFER, 0);\ncurl_setopt($curl, CURLOPT_HEADER, 0);\n$ret = curl_exec($curl);\n//关闭\ncurl_close($curl);\n```\n\n`post`\n\n```\n//初始化\n$curl = curl_init();\n//设置url\ncurl_setopt($curl, CURLOPT_URL, 'http://baidu.com');\ncurl_setopt($curl, CURLOPT_RETURNTRANSFER, 0);\ncurl_setopt($curl, CURLOPT_HEADER, 0);\ncurl_setopt($curl, CURLOPT_POST, 1);\n$ret = curl_exec($curl);\n//关闭\ncurl_close($curl);\n```","slug":"php-curl","published":1,"updated":"2018-07-18T12:47:59.013Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlz6uwgt000a0uwwmhvozrv2","content":"<h3 id=\"参数1\"><a href=\"#参数1\" class=\"headerlink\" title=\"参数1\"></a>参数1</h3><p>curl_setopt<br>CURLOPT_RETURNTRANSFER 表示是否直接输出到控制台<br> eg:</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">$curl = curl_init();</div><div class=\"line\">curl_setopt($curl, CURLOPT_URL, <span class=\"string\">'http://baidu.com'</span>);</div><div class=\"line\">curl_setopt($curl, CURLOPT_RETURNTRANSFER, <span class=\"number\">1</span>);</div><div class=\"line\">curl_setopt($curl, CURLOPT_HEADER, <span class=\"number\">0</span>);</div><div class=\"line\"><span class=\"comment\">// curl_setopt($curl, CURLOPT_POST, 1);</span></div><div class=\"line\">$ret = curl_exec($curl);</div><div class=\"line\"><span class=\"comment\">// var_dump($ret);</span></div></pre></td></tr></table></figure>\n<p>输出结果为:</p>\n<p><img src=\"/photo/img/php-curl/DingTalk20180718203726.png\" alt=\"image\"></p>\n<p>打开参数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?php</div><div class=\"line\">$curl = curl_init();</div><div class=\"line\">curl_setopt($curl, CURLOPT_URL, &apos;http://baidu.com&apos;);</div><div class=\"line\">curl_setopt($curl, CURLOPT_RETURNTRANSFER, 0);</div><div class=\"line\">curl_setopt($curl, CURLOPT_HEADER, 0);</div><div class=\"line\">// curl_setopt($curl, CURLOPT_POST, 1);</div><div class=\"line\">$ret = curl_exec($curl);</div><div class=\"line\">// var_dump($ret);</div></pre></td></tr></table></figure>\n<p>输出结果</p>\n<p><img src=\"/photo/img/php-curl/DingTalk20180718204055.png\" alt=\"image\"></p>\n<h3 id=\"参数2\"><a href=\"#参数2\" class=\"headerlink\" title=\"参数2\"></a>参数2</h3><p>CURLOPT_HEADER<br>CURLOPT_HEADER 表示是否输出头信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?php</div><div class=\"line\">$curl = curl_init();</div><div class=\"line\">curl_setopt($curl, CURLOPT_URL, &apos;http://baidu.com&apos;);</div><div class=\"line\">curl_setopt($curl, CURLOPT_RETURNTRANSFER, 0);</div><div class=\"line\">curl_setopt($curl, CURLOPT_HEADER, 1);</div><div class=\"line\">// curl_setopt($curl, CURLOPT_POST, 1);</div><div class=\"line\">$ret = curl_exec($curl);</div><div class=\"line\">// var_dump($ret);</div></pre></td></tr></table></figure>\n<p>返回结果<br><img src=\"/photo/img/php-curl/DingTalk20180718204343.png\" alt=\"image\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?php</div><div class=\"line\">$curl = curl_init();</div><div class=\"line\">curl_setopt($curl, CURLOPT_URL, &apos;http://baidu.com&apos;);</div><div class=\"line\">curl_setopt($curl, CURLOPT_RETURNTRANSFER, 0);</div><div class=\"line\">curl_setopt($curl, CURLOPT_HEADER, 0);</div><div class=\"line\">// curl_setopt($curl, CURLOPT_POST, 1);</div><div class=\"line\">$ret = curl_exec($curl);</div><div class=\"line\">// var_dump($ret);</div></pre></td></tr></table></figure>\n<p>返回结果<br><img src=\"/photo/img/php-curl/DingTalk20180718204411.png\" alt=\"image\"></p>\n<h2 id=\"get-与-post\"><a href=\"#get-与-post\" class=\"headerlink\" title=\"get 与 post\"></a>get 与 post</h2><p><code>get</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">//初始化</div><div class=\"line\">$curl = curl_init();</div><div class=\"line\">//设置url</div><div class=\"line\">curl_setopt($curl, CURLOPT_URL, &apos;http://baidu.com&apos;);</div><div class=\"line\">curl_setopt($curl, CURLOPT_RETURNTRANSFER, 0);</div><div class=\"line\">curl_setopt($curl, CURLOPT_HEADER, 0);</div><div class=\"line\">$ret = curl_exec($curl);</div><div class=\"line\">//关闭</div><div class=\"line\">curl_close($curl);</div></pre></td></tr></table></figure></p>\n<p><code>post</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">//初始化</div><div class=\"line\">$curl = curl_init();</div><div class=\"line\">//设置url</div><div class=\"line\">curl_setopt($curl, CURLOPT_URL, &apos;http://baidu.com&apos;);</div><div class=\"line\">curl_setopt($curl, CURLOPT_RETURNTRANSFER, 0);</div><div class=\"line\">curl_setopt($curl, CURLOPT_HEADER, 0);</div><div class=\"line\">curl_setopt($curl, CURLOPT_POST, 1);</div><div class=\"line\">$ret = curl_exec($curl);</div><div class=\"line\">//关闭</div><div class=\"line\">curl_close($curl);</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"参数1\"><a href=\"#参数1\" class=\"headerlink\" title=\"参数1\"></a>参数1</h3><p>curl_setopt<br>CURLOPT_RETURNTRANSFER 表示是否直接输出到控制台<br> eg:</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">$curl = curl_init();</div><div class=\"line\">curl_setopt($curl, CURLOPT_URL, <span class=\"string\">'http://baidu.com'</span>);</div><div class=\"line\">curl_setopt($curl, CURLOPT_RETURNTRANSFER, <span class=\"number\">1</span>);</div><div class=\"line\">curl_setopt($curl, CURLOPT_HEADER, <span class=\"number\">0</span>);</div><div class=\"line\"><span class=\"comment\">// curl_setopt($curl, CURLOPT_POST, 1);</span></div><div class=\"line\">$ret = curl_exec($curl);</div><div class=\"line\"><span class=\"comment\">// var_dump($ret);</span></div></pre></td></tr></table></figure>\n<p>输出结果为:</p>\n<p><img src=\"/photo/img/php-curl/DingTalk20180718203726.png\" alt=\"image\"></p>\n<p>打开参数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?php</div><div class=\"line\">$curl = curl_init();</div><div class=\"line\">curl_setopt($curl, CURLOPT_URL, &apos;http://baidu.com&apos;);</div><div class=\"line\">curl_setopt($curl, CURLOPT_RETURNTRANSFER, 0);</div><div class=\"line\">curl_setopt($curl, CURLOPT_HEADER, 0);</div><div class=\"line\">// curl_setopt($curl, CURLOPT_POST, 1);</div><div class=\"line\">$ret = curl_exec($curl);</div><div class=\"line\">// var_dump($ret);</div></pre></td></tr></table></figure>\n<p>输出结果</p>\n<p><img src=\"/photo/img/php-curl/DingTalk20180718204055.png\" alt=\"image\"></p>\n<h3 id=\"参数2\"><a href=\"#参数2\" class=\"headerlink\" title=\"参数2\"></a>参数2</h3><p>CURLOPT_HEADER<br>CURLOPT_HEADER 表示是否输出头信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?php</div><div class=\"line\">$curl = curl_init();</div><div class=\"line\">curl_setopt($curl, CURLOPT_URL, &apos;http://baidu.com&apos;);</div><div class=\"line\">curl_setopt($curl, CURLOPT_RETURNTRANSFER, 0);</div><div class=\"line\">curl_setopt($curl, CURLOPT_HEADER, 1);</div><div class=\"line\">// curl_setopt($curl, CURLOPT_POST, 1);</div><div class=\"line\">$ret = curl_exec($curl);</div><div class=\"line\">// var_dump($ret);</div></pre></td></tr></table></figure>\n<p>返回结果<br><img src=\"/photo/img/php-curl/DingTalk20180718204343.png\" alt=\"image\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?php</div><div class=\"line\">$curl = curl_init();</div><div class=\"line\">curl_setopt($curl, CURLOPT_URL, &apos;http://baidu.com&apos;);</div><div class=\"line\">curl_setopt($curl, CURLOPT_RETURNTRANSFER, 0);</div><div class=\"line\">curl_setopt($curl, CURLOPT_HEADER, 0);</div><div class=\"line\">// curl_setopt($curl, CURLOPT_POST, 1);</div><div class=\"line\">$ret = curl_exec($curl);</div><div class=\"line\">// var_dump($ret);</div></pre></td></tr></table></figure>\n<p>返回结果<br><img src=\"/photo/img/php-curl/DingTalk20180718204411.png\" alt=\"image\"></p>\n<h2 id=\"get-与-post\"><a href=\"#get-与-post\" class=\"headerlink\" title=\"get 与 post\"></a>get 与 post</h2><p><code>get</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">//初始化</div><div class=\"line\">$curl = curl_init();</div><div class=\"line\">//设置url</div><div class=\"line\">curl_setopt($curl, CURLOPT_URL, &apos;http://baidu.com&apos;);</div><div class=\"line\">curl_setopt($curl, CURLOPT_RETURNTRANSFER, 0);</div><div class=\"line\">curl_setopt($curl, CURLOPT_HEADER, 0);</div><div class=\"line\">$ret = curl_exec($curl);</div><div class=\"line\">//关闭</div><div class=\"line\">curl_close($curl);</div></pre></td></tr></table></figure></p>\n<p><code>post</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">//初始化</div><div class=\"line\">$curl = curl_init();</div><div class=\"line\">//设置url</div><div class=\"line\">curl_setopt($curl, CURLOPT_URL, &apos;http://baidu.com&apos;);</div><div class=\"line\">curl_setopt($curl, CURLOPT_RETURNTRANSFER, 0);</div><div class=\"line\">curl_setopt($curl, CURLOPT_HEADER, 0);</div><div class=\"line\">curl_setopt($curl, CURLOPT_POST, 1);</div><div class=\"line\">$ret = curl_exec($curl);</div><div class=\"line\">//关闭</div><div class=\"line\">curl_close($curl);</div></pre></td></tr></table></figure>"},{"title":"php内存分配","date":"2018-09-12T13:28:00.000Z","_content":"","source":"_posts/php内存分配.md","raw":"---\ntitle: php内存分配\ndate: 2018-09-12 21:28:00\ntags:\n---\n","slug":"php内存分配","published":1,"updated":"2018-09-12T13:28:00.782Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlz6uwgu000b0uww36p15aiq","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"php数据结构","date":"2018-08-19T12:30:34.000Z","_content":"\n## 变量\n   \nphp是如何统一实现各种变量类型的? 这和php变量类型的实现是密不可分的。\n一个变量主要有三个要素:`变量名``变量类型``变量值`,他们在php变量类型实现中主要对应 zval zend_value 和\nzend的各种数据类型。\nphp中用$去声明一个变量,在声明的时候可以进行初始化,当然也可以不声明直接使用。一般来说,一个变量的定义包含\n两步:变量定义和变量初始化,在php中只定义不初始化是可以的。\n\n## 变量结构体\n\n```c\n// php zval结构\nstruct _zval_struct {\n\tzend_value        value; 指向具体的value\t\t\t/* value */\n\tunion {\n\t\tstruct {\n\t\t\tZEND_ENDIAN_LOHI_4(\n\t\t\t\tzend_uchar    type,\t\t\t/* active type */\n\t\t\t\tzend_uchar    type_flags,\n\t\t\t\tzend_uchar    const_flags,\n\t\t\t\tzend_uchar    reserved)\t    /* call info for EX(This) */\n\t\t} v;\n\t\tuint32_t type_info;\n\t} u1;\n\tunion {\n\t\tuint32_t     var_flags;\n\t\tuint32_t     next;                 /* hash collision chain */\n\t\tuint32_t     cache_slot;           /* literal cache slot */\n\t\tuint32_t     lineno;               /* line number (for ast nodes) */\n\t\tuint32_t     num_args;             /* arguments number for EX(This) */\n\t\tuint32_t     fe_pos;               /* foreach position */\n\t\tuint32_t     fe_iter_idx;          /* foreach iterator index */\n\t} u2;\n};\n```\n\n\n## 变量类型\n其中type 表示当前变量的类型,例如string array int等,以下为php中全部变量类型。\n其中type 是一个无符号类型的char,他的定义是这样的\n```c\ntypedef unsigned char zend_uchar;\n```\n\n\n```c\ntypedef union _zend_value {\n    \tzend_long         lval;\t\t\t\t/* long value */\n    \tdouble            dval;\t\t\t\t/* double value */\n    \tzend_refcounted  *counted;\n    \tzend_string      *str;\n    \tzend_array       *arr;\n    \tzend_object      *obj;\n    \tzend_resource    *res;\n    \tzend_reference   *ref;\n    \tzend_ast_ref     *ast;\n    \tzval             *zv;\n    \tvoid             *ptr;\n    \tzend_class_entry *ce;\n    \tzend_function    *func;\n    \tstruct {\n    \t\tuint32_t w1;\n    \t\tuint32_t w2;\n    \t} ww;\n    } zend_value;\n```\n\n- 在这些类型里不存在boolean类型,因为在php7中已经将boolean拆分为true和false.直接保存在type中,也就是说\nboolean没有_zend_value结构,直接通过type字段就可以确定boolean的值。\n- 从上边的结构体可以看出来 `zend_long`、`double` 类型不是指针类型,也就是说整形和浮点型正能进行深拷贝,\n并不能和其他说句类型一样进行 `引用计数`和`写时复制`。因为有`引用计数`和`写时复制`在变量赋值且不做修改时\n才能大量节省内存。\n\n\n以string类型为例,它在php中的结构类型应该是这样的:\n\n![image](/photo/img/php数据结构/php数据结构.png)\n\n_zend_string:\n```c\nstruct _zend_string {\n\tzend_refcounted_h gc;\n\tzend_ulong        h;                /* hash value */\n\tsize_t            len;\n\tchar              val[1];          /*字符串起始地址*/\n};\n```\n\n- 其中`gc` 字段表示这个结构体被引用的次数,垃圾回收的时候会用到。\n- h 字符串通过Times33计算出来的hashcode\n- len 字符串长度\n- val 字符串内容\n\n我们在这里都会有疑问,为什么存储字符串内容的时候没有使用char*类型,而用了一个数组类型来存储。zend_string\n在申请内存的时候会会申请malloc(sizeof(zend_string)+字符串长度),且val[0]存的是字符串最后一个字符安“\\0”\n\nzend_string结构在内存中如下所示:\n\n\n![image](/photo/img/php数据结构/zend_stirng内存中结构.png)\n\n当时也在char val[1]的地方疑惑了很久,再往上找了很多文章,其中\nNikita Popov(nikic，PHP 官方开发组成员，柏林科技大学的学生) 这样解释\n\n```\n如果你对 C 语言了解的不是很深入的话，可能会觉得 val 的定义有些奇怪：这个声明只有一个元素，但是显然我们想存储的字符串长度肯定大于一个字符的长度。这里其实使用的是结构体的一个『黑』\b方法：在声明数组时只定义一个元素，但是实际创建 zend_string 时再分配足够的内存来存储整个字符串。这样我们还是可以通过 val 访问完整的字符串。\n```\n\n\n## 参考:\n\n- [Internal value representation in PHP 7 - Part 2 ](https://nikic.github.io/2015/06/19/Internal-value-representation-in-PHP-7-part-2.html)\n- [[译]变量在 PHP7 内部的实现（二）](https://0x1.im/blog/php/Internal-value-representation-in-PHP-7-part-2.html)\n- [php内核分析——2.1 变量的内部实现](https://www.kancloud.cn/nickbai/php7/363268)\n","source":"_posts/php数据结构.md","raw":"---\ntitle: php数据结构\ndate: 2018-08-19 20:30:34\ntags:\n---\n\n## 变量\n   \nphp是如何统一实现各种变量类型的? 这和php变量类型的实现是密不可分的。\n一个变量主要有三个要素:`变量名``变量类型``变量值`,他们在php变量类型实现中主要对应 zval zend_value 和\nzend的各种数据类型。\nphp中用$去声明一个变量,在声明的时候可以进行初始化,当然也可以不声明直接使用。一般来说,一个变量的定义包含\n两步:变量定义和变量初始化,在php中只定义不初始化是可以的。\n\n## 变量结构体\n\n```c\n// php zval结构\nstruct _zval_struct {\n\tzend_value        value; 指向具体的value\t\t\t/* value */\n\tunion {\n\t\tstruct {\n\t\t\tZEND_ENDIAN_LOHI_4(\n\t\t\t\tzend_uchar    type,\t\t\t/* active type */\n\t\t\t\tzend_uchar    type_flags,\n\t\t\t\tzend_uchar    const_flags,\n\t\t\t\tzend_uchar    reserved)\t    /* call info for EX(This) */\n\t\t} v;\n\t\tuint32_t type_info;\n\t} u1;\n\tunion {\n\t\tuint32_t     var_flags;\n\t\tuint32_t     next;                 /* hash collision chain */\n\t\tuint32_t     cache_slot;           /* literal cache slot */\n\t\tuint32_t     lineno;               /* line number (for ast nodes) */\n\t\tuint32_t     num_args;             /* arguments number for EX(This) */\n\t\tuint32_t     fe_pos;               /* foreach position */\n\t\tuint32_t     fe_iter_idx;          /* foreach iterator index */\n\t} u2;\n};\n```\n\n\n## 变量类型\n其中type 表示当前变量的类型,例如string array int等,以下为php中全部变量类型。\n其中type 是一个无符号类型的char,他的定义是这样的\n```c\ntypedef unsigned char zend_uchar;\n```\n\n\n```c\ntypedef union _zend_value {\n    \tzend_long         lval;\t\t\t\t/* long value */\n    \tdouble            dval;\t\t\t\t/* double value */\n    \tzend_refcounted  *counted;\n    \tzend_string      *str;\n    \tzend_array       *arr;\n    \tzend_object      *obj;\n    \tzend_resource    *res;\n    \tzend_reference   *ref;\n    \tzend_ast_ref     *ast;\n    \tzval             *zv;\n    \tvoid             *ptr;\n    \tzend_class_entry *ce;\n    \tzend_function    *func;\n    \tstruct {\n    \t\tuint32_t w1;\n    \t\tuint32_t w2;\n    \t} ww;\n    } zend_value;\n```\n\n- 在这些类型里不存在boolean类型,因为在php7中已经将boolean拆分为true和false.直接保存在type中,也就是说\nboolean没有_zend_value结构,直接通过type字段就可以确定boolean的值。\n- 从上边的结构体可以看出来 `zend_long`、`double` 类型不是指针类型,也就是说整形和浮点型正能进行深拷贝,\n并不能和其他说句类型一样进行 `引用计数`和`写时复制`。因为有`引用计数`和`写时复制`在变量赋值且不做修改时\n才能大量节省内存。\n\n\n以string类型为例,它在php中的结构类型应该是这样的:\n\n![image](/photo/img/php数据结构/php数据结构.png)\n\n_zend_string:\n```c\nstruct _zend_string {\n\tzend_refcounted_h gc;\n\tzend_ulong        h;                /* hash value */\n\tsize_t            len;\n\tchar              val[1];          /*字符串起始地址*/\n};\n```\n\n- 其中`gc` 字段表示这个结构体被引用的次数,垃圾回收的时候会用到。\n- h 字符串通过Times33计算出来的hashcode\n- len 字符串长度\n- val 字符串内容\n\n我们在这里都会有疑问,为什么存储字符串内容的时候没有使用char*类型,而用了一个数组类型来存储。zend_string\n在申请内存的时候会会申请malloc(sizeof(zend_string)+字符串长度),且val[0]存的是字符串最后一个字符安“\\0”\n\nzend_string结构在内存中如下所示:\n\n\n![image](/photo/img/php数据结构/zend_stirng内存中结构.png)\n\n当时也在char val[1]的地方疑惑了很久,再往上找了很多文章,其中\nNikita Popov(nikic，PHP 官方开发组成员，柏林科技大学的学生) 这样解释\n\n```\n如果你对 C 语言了解的不是很深入的话，可能会觉得 val 的定义有些奇怪：这个声明只有一个元素，但是显然我们想存储的字符串长度肯定大于一个字符的长度。这里其实使用的是结构体的一个『黑』\b方法：在声明数组时只定义一个元素，但是实际创建 zend_string 时再分配足够的内存来存储整个字符串。这样我们还是可以通过 val 访问完整的字符串。\n```\n\n\n## 参考:\n\n- [Internal value representation in PHP 7 - Part 2 ](https://nikic.github.io/2015/06/19/Internal-value-representation-in-PHP-7-part-2.html)\n- [[译]变量在 PHP7 内部的实现（二）](https://0x1.im/blog/php/Internal-value-representation-in-PHP-7-part-2.html)\n- [php内核分析——2.1 变量的内部实现](https://www.kancloud.cn/nickbai/php7/363268)\n","slug":"php数据结构","published":1,"updated":"2018-08-20T10:09:40.292Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlz6uwgy000d0uww58xs0oo3","content":"<h2 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h2><p>php是如何统一实现各种变量类型的? 这和php变量类型的实现是密不可分的。<br>一个变量主要有三个要素:<code>变量名``变量类型``变量值</code>,他们在php变量类型实现中主要对应 zval zend_value 和<br>zend的各种数据类型。<br>php中用$去声明一个变量,在声明的时候可以进行初始化,当然也可以不声明直接使用。一般来说,一个变量的定义包含<br>两步:变量定义和变量初始化,在php中只定义不初始化是可以的。</p>\n<h2 id=\"变量结构体\"><a href=\"#变量结构体\" class=\"headerlink\" title=\"变量结构体\"></a>变量结构体</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// php zval结构</span></div><div class=\"line\"><span class=\"keyword\">struct</span> _zval_struct &#123;</div><div class=\"line\">\tzend_value        value; 指向具体的value\t\t\t<span class=\"comment\">/* value */</span></div><div class=\"line\">\t<span class=\"keyword\">union</span> &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">\t\t\tZEND_ENDIAN_LOHI_4(</div><div class=\"line\">\t\t\t\tzend_uchar    type,\t\t\t<span class=\"comment\">/* active type */</span></div><div class=\"line\">\t\t\t\tzend_uchar    type_flags,</div><div class=\"line\">\t\t\t\tzend_uchar    const_flags,</div><div class=\"line\">\t\t\t\tzend_uchar    reserved)\t    <span class=\"comment\">/* call info for EX(This) */</span></div><div class=\"line\">\t\t&#125; v;</div><div class=\"line\">\t\t<span class=\"keyword\">uint32_t</span> type_info;</div><div class=\"line\">\t&#125; u1;</div><div class=\"line\">\t<span class=\"keyword\">union</span> &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">uint32_t</span>     var_flags;</div><div class=\"line\">\t\t<span class=\"keyword\">uint32_t</span>     next;                 <span class=\"comment\">/* hash collision chain */</span></div><div class=\"line\">\t\t<span class=\"keyword\">uint32_t</span>     cache_slot;           <span class=\"comment\">/* literal cache slot */</span></div><div class=\"line\">\t\t<span class=\"keyword\">uint32_t</span>     lineno;               <span class=\"comment\">/* line number (for ast nodes) */</span></div><div class=\"line\">\t\t<span class=\"keyword\">uint32_t</span>     num_args;             <span class=\"comment\">/* arguments number for EX(This) */</span></div><div class=\"line\">\t\t<span class=\"keyword\">uint32_t</span>     fe_pos;               <span class=\"comment\">/* foreach position */</span></div><div class=\"line\">\t\t<span class=\"keyword\">uint32_t</span>     fe_iter_idx;          <span class=\"comment\">/* foreach iterator index */</span></div><div class=\"line\">\t&#125; u2;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h2 id=\"变量类型\"><a href=\"#变量类型\" class=\"headerlink\" title=\"变量类型\"></a>变量类型</h2><p>其中type 表示当前变量的类型,例如string array int等,以下为php中全部变量类型。<br>其中type 是一个无符号类型的char,他的定义是这样的<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> zend_uchar;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">union</span> _zend_value &#123;</div><div class=\"line\">    \tzend_long         lval;\t\t\t\t<span class=\"comment\">/* long value */</span></div><div class=\"line\">    \t<span class=\"keyword\">double</span>            dval;\t\t\t\t<span class=\"comment\">/* double value */</span></div><div class=\"line\">    \tzend_refcounted  *counted;</div><div class=\"line\">    \tzend_string      *str;</div><div class=\"line\">    \tzend_array       *arr;</div><div class=\"line\">    \tzend_object      *obj;</div><div class=\"line\">    \tzend_resource    *res;</div><div class=\"line\">    \tzend_reference   *ref;</div><div class=\"line\">    \tzend_ast_ref     *ast;</div><div class=\"line\">    \tzval             *zv;</div><div class=\"line\">    \t<span class=\"keyword\">void</span>             *ptr;</div><div class=\"line\">    \tzend_class_entry *ce;</div><div class=\"line\">    \tzend_function    *func;</div><div class=\"line\">    \t<span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">    \t\t<span class=\"keyword\">uint32_t</span> w1;</div><div class=\"line\">    \t\t<span class=\"keyword\">uint32_t</span> w2;</div><div class=\"line\">    \t&#125; ww;</div><div class=\"line\">    &#125; zend_value;</div></pre></td></tr></table></figure>\n<ul>\n<li>在这些类型里不存在boolean类型,因为在php7中已经将boolean拆分为true和false.直接保存在type中,也就是说<br>boolean没有_zend_value结构,直接通过type字段就可以确定boolean的值。</li>\n<li>从上边的结构体可以看出来 <code>zend_long</code>、<code>double</code> 类型不是指针类型,也就是说整形和浮点型正能进行深拷贝,<br>并不能和其他说句类型一样进行 <code>引用计数</code>和<code>写时复制</code>。因为有<code>引用计数</code>和<code>写时复制</code>在变量赋值且不做修改时<br>才能大量节省内存。</li>\n</ul>\n<p>以string类型为例,它在php中的结构类型应该是这样的:</p>\n<p><img src=\"/photo/img/php数据结构/php数据结构.png\" alt=\"image\"></p>\n<p>_zend_string:<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">struct</span> _zend_string &#123;</div><div class=\"line\">\tzend_refcounted_h gc;</div><div class=\"line\">\tzend_ulong        h;                <span class=\"comment\">/* hash value */</span></div><div class=\"line\">\t<span class=\"keyword\">size_t</span>            len;</div><div class=\"line\">\t<span class=\"keyword\">char</span>              val[<span class=\"number\">1</span>];          <span class=\"comment\">/*字符串起始地址*/</span></div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<ul>\n<li>其中<code>gc</code> 字段表示这个结构体被引用的次数,垃圾回收的时候会用到。</li>\n<li>h 字符串通过Times33计算出来的hashcode</li>\n<li>len 字符串长度</li>\n<li>val 字符串内容</li>\n</ul>\n<p>我们在这里都会有疑问,为什么存储字符串内容的时候没有使用char*类型,而用了一个数组类型来存储。zend_string<br>在申请内存的时候会会申请malloc(sizeof(zend_string)+字符串长度),且val[0]存的是字符串最后一个字符安“\\0”</p>\n<p>zend_string结构在内存中如下所示:</p>\n<p><img src=\"/photo/img/php数据结构/zend_stirng内存中结构.png\" alt=\"image\"></p>\n<p>当时也在char val[1]的地方疑惑了很久,再往上找了很多文章,其中<br>Nikita Popov(nikic，PHP 官方开发组成员，柏林科技大学的学生) 这样解释</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">如果你对 C 语言了解的不是很深入的话，可能会觉得 val 的定义有些奇怪：这个声明只有一个元素，但是显然我们想存储的字符串长度肯定大于一个字符的长度。这里其实使用的是结构体的一个『黑』\b方法：在声明数组时只定义一个元素，但是实际创建 zend_string 时再分配足够的内存来存储整个字符串。这样我们还是可以通过 val 访问完整的字符串。</div></pre></td></tr></table></figure>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考:\"></a>参考:</h2><ul>\n<li><a href=\"https://nikic.github.io/2015/06/19/Internal-value-representation-in-PHP-7-part-2.html\" target=\"_blank\" rel=\"noopener\">Internal value representation in PHP 7 - Part 2 </a></li>\n<li><a href=\"https://0x1.im/blog/php/Internal-value-representation-in-PHP-7-part-2.html\" target=\"_blank\" rel=\"noopener\">[译]变量在 PHP7 内部的实现（二）</a></li>\n<li><a href=\"https://www.kancloud.cn/nickbai/php7/363268\" target=\"_blank\" rel=\"noopener\">php内核分析——2.1 变量的内部实现</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h2><p>php是如何统一实现各种变量类型的? 这和php变量类型的实现是密不可分的。<br>一个变量主要有三个要素:<code>变量名``变量类型``变量值</code>,他们在php变量类型实现中主要对应 zval zend_value 和<br>zend的各种数据类型。<br>php中用$去声明一个变量,在声明的时候可以进行初始化,当然也可以不声明直接使用。一般来说,一个变量的定义包含<br>两步:变量定义和变量初始化,在php中只定义不初始化是可以的。</p>\n<h2 id=\"变量结构体\"><a href=\"#变量结构体\" class=\"headerlink\" title=\"变量结构体\"></a>变量结构体</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// php zval结构</span></div><div class=\"line\"><span class=\"keyword\">struct</span> _zval_struct &#123;</div><div class=\"line\">\tzend_value        value; 指向具体的value\t\t\t<span class=\"comment\">/* value */</span></div><div class=\"line\">\t<span class=\"keyword\">union</span> &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">\t\t\tZEND_ENDIAN_LOHI_4(</div><div class=\"line\">\t\t\t\tzend_uchar    type,\t\t\t<span class=\"comment\">/* active type */</span></div><div class=\"line\">\t\t\t\tzend_uchar    type_flags,</div><div class=\"line\">\t\t\t\tzend_uchar    const_flags,</div><div class=\"line\">\t\t\t\tzend_uchar    reserved)\t    <span class=\"comment\">/* call info for EX(This) */</span></div><div class=\"line\">\t\t&#125; v;</div><div class=\"line\">\t\t<span class=\"keyword\">uint32_t</span> type_info;</div><div class=\"line\">\t&#125; u1;</div><div class=\"line\">\t<span class=\"keyword\">union</span> &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">uint32_t</span>     var_flags;</div><div class=\"line\">\t\t<span class=\"keyword\">uint32_t</span>     next;                 <span class=\"comment\">/* hash collision chain */</span></div><div class=\"line\">\t\t<span class=\"keyword\">uint32_t</span>     cache_slot;           <span class=\"comment\">/* literal cache slot */</span></div><div class=\"line\">\t\t<span class=\"keyword\">uint32_t</span>     lineno;               <span class=\"comment\">/* line number (for ast nodes) */</span></div><div class=\"line\">\t\t<span class=\"keyword\">uint32_t</span>     num_args;             <span class=\"comment\">/* arguments number for EX(This) */</span></div><div class=\"line\">\t\t<span class=\"keyword\">uint32_t</span>     fe_pos;               <span class=\"comment\">/* foreach position */</span></div><div class=\"line\">\t\t<span class=\"keyword\">uint32_t</span>     fe_iter_idx;          <span class=\"comment\">/* foreach iterator index */</span></div><div class=\"line\">\t&#125; u2;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h2 id=\"变量类型\"><a href=\"#变量类型\" class=\"headerlink\" title=\"变量类型\"></a>变量类型</h2><p>其中type 表示当前变量的类型,例如string array int等,以下为php中全部变量类型。<br>其中type 是一个无符号类型的char,他的定义是这样的<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> zend_uchar;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">union</span> _zend_value &#123;</div><div class=\"line\">    \tzend_long         lval;\t\t\t\t<span class=\"comment\">/* long value */</span></div><div class=\"line\">    \t<span class=\"keyword\">double</span>            dval;\t\t\t\t<span class=\"comment\">/* double value */</span></div><div class=\"line\">    \tzend_refcounted  *counted;</div><div class=\"line\">    \tzend_string      *str;</div><div class=\"line\">    \tzend_array       *arr;</div><div class=\"line\">    \tzend_object      *obj;</div><div class=\"line\">    \tzend_resource    *res;</div><div class=\"line\">    \tzend_reference   *ref;</div><div class=\"line\">    \tzend_ast_ref     *ast;</div><div class=\"line\">    \tzval             *zv;</div><div class=\"line\">    \t<span class=\"keyword\">void</span>             *ptr;</div><div class=\"line\">    \tzend_class_entry *ce;</div><div class=\"line\">    \tzend_function    *func;</div><div class=\"line\">    \t<span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">    \t\t<span class=\"keyword\">uint32_t</span> w1;</div><div class=\"line\">    \t\t<span class=\"keyword\">uint32_t</span> w2;</div><div class=\"line\">    \t&#125; ww;</div><div class=\"line\">    &#125; zend_value;</div></pre></td></tr></table></figure>\n<ul>\n<li>在这些类型里不存在boolean类型,因为在php7中已经将boolean拆分为true和false.直接保存在type中,也就是说<br>boolean没有_zend_value结构,直接通过type字段就可以确定boolean的值。</li>\n<li>从上边的结构体可以看出来 <code>zend_long</code>、<code>double</code> 类型不是指针类型,也就是说整形和浮点型正能进行深拷贝,<br>并不能和其他说句类型一样进行 <code>引用计数</code>和<code>写时复制</code>。因为有<code>引用计数</code>和<code>写时复制</code>在变量赋值且不做修改时<br>才能大量节省内存。</li>\n</ul>\n<p>以string类型为例,它在php中的结构类型应该是这样的:</p>\n<p><img src=\"/photo/img/php数据结构/php数据结构.png\" alt=\"image\"></p>\n<p>_zend_string:<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">struct</span> _zend_string &#123;</div><div class=\"line\">\tzend_refcounted_h gc;</div><div class=\"line\">\tzend_ulong        h;                <span class=\"comment\">/* hash value */</span></div><div class=\"line\">\t<span class=\"keyword\">size_t</span>            len;</div><div class=\"line\">\t<span class=\"keyword\">char</span>              val[<span class=\"number\">1</span>];          <span class=\"comment\">/*字符串起始地址*/</span></div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<ul>\n<li>其中<code>gc</code> 字段表示这个结构体被引用的次数,垃圾回收的时候会用到。</li>\n<li>h 字符串通过Times33计算出来的hashcode</li>\n<li>len 字符串长度</li>\n<li>val 字符串内容</li>\n</ul>\n<p>我们在这里都会有疑问,为什么存储字符串内容的时候没有使用char*类型,而用了一个数组类型来存储。zend_string<br>在申请内存的时候会会申请malloc(sizeof(zend_string)+字符串长度),且val[0]存的是字符串最后一个字符安“\\0”</p>\n<p>zend_string结构在内存中如下所示:</p>\n<p><img src=\"/photo/img/php数据结构/zend_stirng内存中结构.png\" alt=\"image\"></p>\n<p>当时也在char val[1]的地方疑惑了很久,再往上找了很多文章,其中<br>Nikita Popov(nikic，PHP 官方开发组成员，柏林科技大学的学生) 这样解释</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">如果你对 C 语言了解的不是很深入的话，可能会觉得 val 的定义有些奇怪：这个声明只有一个元素，但是显然我们想存储的字符串长度肯定大于一个字符的长度。这里其实使用的是结构体的一个『黑』\b方法：在声明数组时只定义一个元素，但是实际创建 zend_string 时再分配足够的内存来存储整个字符串。这样我们还是可以通过 val 访问完整的字符串。</div></pre></td></tr></table></figure>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考:\"></a>参考:</h2><ul>\n<li><a href=\"https://nikic.github.io/2015/06/19/Internal-value-representation-in-PHP-7-part-2.html\" target=\"_blank\" rel=\"noopener\">Internal value representation in PHP 7 - Part 2 </a></li>\n<li><a href=\"https://0x1.im/blog/php/Internal-value-representation-in-PHP-7-part-2.html\" target=\"_blank\" rel=\"noopener\">[译]变量在 PHP7 内部的实现（二）</a></li>\n<li><a href=\"https://www.kancloud.cn/nickbai/php7/363268\" target=\"_blank\" rel=\"noopener\">php内核分析——2.1 变量的内部实现</a></li>\n</ul>\n"},{"title":"php数组实现","date":"2018-08-20T12:00:08.000Z","_content":"\n要说php的数组,就不得不讲hashtable,以为php的数组是强依赖于hashtable实现的。一般\n\nTimes33的算法很简单，就是不断的乘33,下边是times33算法:\n\n## Times33(hash)\n\n```php\n<?php\nfunction myHash($str) {\n    // hash(i) = hash(i-1) * 33 + str[i]\n    $hash = 5381;\n    $s    = md5($str); //相比其它版本，进行了md5加密\n    $seed = 5;\n    $len  = 32;//加密后长度32\n    for ($i = 0; $i < $len; $i++) {\n        // (hash << 5) + hash 相当于 hash * 33\n        //$hash = sprintf(\"%u\", $hash * 33) + ord($s{$i});\n        //$hash = ($hash * 33 + ord($s{$i})) & 0x7FFFFFFF;\n        $hash = ($hash << $seed) + $hash + ord($s{$i});\n    }\n \n    return $hash & 0x7FFFFFFF;\n}\n```\n\n其中`<<` 表示左移,每次左移表示x2例如:\n\n```php\n<?php\n$num = 2;\n\necho $num << 2;\n```\n\n所以($hash << $seed)表示 $hash *32 ,同时加上$hash,也就表示 $hash *33了。ord()函数返回字符串的首个字符的 ASCII 值。\n最后`$hash & 0x7FFFFFFF` 表示与整形的最大值与操作(`0x7FFFF111FFF`二进制为`1111111111111111111111111111`),\n这个与操作会截取超过整形二进制部分,所以times33计算出来的值不会超过整形的最大值。\n\n## 为什么要用hashtable实现php数组?\n\n因为散列表是根据关键建码值直接进项访问的数据结构。在key和value之间有一个映射函数,可以根据key直接索引到对应的value值,它并\n不会使用一般的对比操作,而是直接使用`内存的起始位置和偏移位置`进行寻址,所以会比正常的寻址要快。\n\n\n## 散列表结构\n\n```c\nstruct _zend_array {\n\tzend_refcounted_h gc;\n\tunion {\n\t\tstruct {\n\t\t\tZEND_ENDIAN_LOHI_4(\n\t\t\t\tzend_uchar    flags,\n\t\t\t\tzend_uchar    nApplyCount,\n\t\t\t\tzend_uchar    nIteratorsCount,\n\t\t\t\tzend_uchar    reserve)\n\t\t} v;\n\t\tuint32_t flags;\n\t} u;\n\tuint32_t          nTableMask;\n\tBucket           *arData;\n\tuint32_t          nNumUsed;\n\tuint32_t          nNumOfElements;\n\tuint32_t          nTableSize;\n\tuint32_t          nInternalPointer;\n\tzend_long         nNextFreeElement;\n\tdtor_func_t       pDestructor;\n};\n```\n主要字段介绍:\n\n- gc 引用次数,垃圾回收时会用到。\n- union u 就不介绍了。\n- arData 存储元素的数组,内存是连续的,arData指向第一个元素。\n- nTableMask nTableSize的负数。\n- nTableSize 数组长度,为2的n此房。\n- nNumUsed 当前使用的Bucket数。\n- nNumOfElements 当前所有的Bucket数。\n- nNextFreeElement 下一个被使用的Bucket($a[] = '')\n- pDestructor 删除某个元素是会使用\n\n\n## Bucket结构\n```c\ntypedef struct _Bucket {\n\tzval              val;\n\tzend_ulong        h;                /* hash value (or numeric index)   */\n\tzend_string      *key;              /* string key or NULL for numerics */\n} Bucket;\n```\n\n- h hash出来的值(times33)\n- *key 存储元素的key\n- val 具体值,是个zval\n\n## 如何实现\n\nphp中实现散列表实现主要使用`存储元素数组`和 `映射函数`（也可以称作散列函数）和`映射表`\n\n\n#### 举个具体的栗子:\n 如果我们要在php代码中声明一个数组会发生什么?下边分析下php是如何实现数组的。\n ```php\n <?php\n $arr= [\n \t'a' => '111',\n \t'b' => '222',\n \t'c' => 'ccc'\n ];\n ```\n1. 首先肯定是初始化。\n2. 接下来将每个元素对应的值依照顺序拷贝到 Bucket里。\n3. 然后利用映射函数对求值,根据算出来的值将其对应的bucket的地址写到该值对应的映射这表里。\n\n具体操作如下图:\n![image](/photo/img/php数组实现/php数组具体实现.png)\n\n当然我们这里的映射是理想映射,因为在映射的计算过程中可能存在冲突,后续会介绍映射函数,以及如何解映射函数计算后的冲突。\n\n\n### 初始化\n\n```c\nZEND_API void ZEND_FASTCALL _zend_hash_init(HashTable *ht, uint32_t nSize, dtor_func_t pDestructor, zend_bool persistent ZEND_FILE_LINE_DC)\n{\n\tGC_REFCOUNT(ht) = 1; //设置引用次数\n\tGC_TYPE_INFO(ht) = IS_ARRAY; //设置数据类型\n\tht->u.flags = (persistent ? HASH_FLAG_PERSISTENT : 0) | HASH_FLAG_APPLY_PROTECTION | HASH_FLAG_STATIC_KEYS;\n\tht->nTableMask = HT_MIN_MASK;\n\tHT_SET_DATA_ADDR(ht, &uninitialized_bucket);\n\tht->nNumUsed = 0;\n\tht->nNumOfElements = 0;\n\tht->nInternalPointer = HT_INVALID_IDX;\n\tht->nNextFreeElement = 0;\n\tht->pDestructor = pDestructor;\n\tht->nTableSize = zend_hash_check_size(nSize);\n}\n```\n初始化的时候主要是对hashtable中各个成员的进行初始化设置,而且在这个时候不会给arData分配内存,只有在开始插入数据的时候才会\n为arData分配内存。\n\n\n\n## 映射函数\n\n映射函数其实就是一次`hash`操作和和一次`|`操作.\nhash操作就是上边锁提到得到times33操作,`|`操作是计算出来的hash值与nTableSize进行计算。\n```\nnIndex = ket->h | nTableMask;\n```\n因为nTableMask是nTableSize的负数,所以计算出来的nIndex值区间应该为[-1,nTableMask]。\n\n此处待补充 为什么会在[-1, nTableMask] 区间内。\n\n### 写入数据\n\n在初始化的时候并不会对arData分配内存,只有在写入的时候才会真正分配内存\n\n```c\nstatic void zend_always_inline zend_hash_real_init_ex(HashTable *ht, int packed)\n{\n\tHT_ASSERT(GC_REFCOUNT(ht) == 1);\n\tZEND_ASSERT(!((ht)->u.flags & HASH_FLAG_INITIALIZED));\n\tif (packed) {\n\t\tHT_SET_DATA_ADDR(ht, pemalloc(HT_SIZE(ht), (ht)->u.flags & HASH_FLAG_PERSISTENT));\n\t\t(ht)->u.flags |= HASH_FLAG_INITIALIZED | HASH_FLAG_PACKED;\n\t\tHT_HASH_RESET_PACKED(ht);\n\t} else {\n\t\t(ht)->nTableMask = -(ht)->nTableSize;\n\t\tHT_SET_DATA_ADDR(ht, pemalloc(HT_SIZE(ht), (ht)->u.flags & HASH_FLAG_PERSISTENT));\n\t\t(ht)->u.flags |= HASH_FLAG_INITIALIZED;\n\t\tif (EXPECTED(ht->nTableMask == -8)) {\n\t\t\tBucket *arData = ht->arData;\n\n\t\t\tHT_HASH_EX(arData, -8) = -1;\n\t\t\tHT_HASH_EX(arData, -7) = -1;\n\t\t\tHT_HASH_EX(arData, -6) = -1;\n\t\t\tHT_HASH_EX(arData, -5) = -1;\n\t\t\tHT_HASH_EX(arData, -4) = -1;\n\t\t\tHT_HASH_EX(arData, -3) = -1;\n\t\t\tHT_HASH_EX(arData, -2) = -1;\n\t\t\tHT_HASH_EX(arData, -1) = -1;\n\t\t} else {\n\t\t\tHT_HASH_RESET(ht);\n\t\t}\n\t}\n}\n```\n分配具体的内存\n\n```c\n#define HT_SIZE_EX(nTableSize, nTableMask) \\\n\t(HT_DATA_SIZE((nTableSize)) + HT_HASH_SIZE((nTableMask)))\n```\n\n```\n#define HT_HASH_SIZE(nTableMask) \\\n\t(((size_t)(uint32_t)-(int32_t)(nTableMask)) * sizeof(uint32_t))\n\n#define HT_DATA_SIZE(nTableSize) \\\n\t((size_t)(nTableSize) * sizeof(Bucket))\n```\n\n可以看到在分配具体分配内存的时候会分配 nTableSize*(Bucket+uint32_t)大小的内存。\n讲道理只需要分配nTableSize*Bucket大小内存就可以了,为什么会多余出来 nTableSize*uint32_t内存呢?\n因为nTableSize*uint32_t就是`映射表`所占内存大小。所以说Bucket会和映射表一次申请内存。\n写完成写入操作以后会将`*arData` 指向第一个Bucket。\n\n具体在内存里的结果如图所示:\n![image](/photo/img/php数组实现/hashtable.png)\n\n\n`映射表`在初始化的时候所有值都是-1,只有在被赋值时候会写入对应`Bucket`所在链表的偏移量。;\nht->arData 指向第一个`Bucket`的位置,在赋值的时候会按照列表顺序,将值写入`Bucket`的value里,然后会根据\n映射函数算出值当做偏移量找到对应`映射表`的元素,然后将当前`Bucket`写入此元素。\n\nps nTableSize 为2的次方倍。\n\n\n\n## 冲突\n\n如果`nIndex = ket->h | nTableMask` 算出来的值冲突了怎么办? 首先`映射表`的每个元素不是链表,所以导致无法存储多个元素。\n在php中是这样处理冲突的:\n首先`映射表`的所有元素初始化值为 -1 ,当前\n如果用冲突会将新算出来的值对应的`Bucket`覆盖原来旧的`Bucket`,然后将旧的`Bucket`迁移到新的`Bucket`,\n并将旧的`Bucket`的u2.next(默认为-1) 指向新`Bucket`。\n\n如图\n![image](/photo/img/php数组实现/链表冲突.png)\n\n \n## 查找\n\nphp再查找一个数组元素是,首先会根据其key 获取到计算后hash值'ket->h',然后根据映射函数算出当前元素在`映射表`中的偏移量,利用当前位置+偏移量找到`映射表`的元素,再根据其内的偏量找到对应`Bucket`链表的首个元素位置,最后遍历该链表核对key值,找到对应的值。\n\n具体实现函数:\n```c\nstatic zend_always_inline Bucket *zend_hash_find_bucket(const HashTable *ht, zend_string *key)\n{\n\tzend_ulong h;\n\tuint32_t nIndex;\n\tuint32_t idx;\n\tBucket *p, *arData;\n\n\th = zend_string_hash_val(key);\n\tarData = ht->arData;\n\tnIndex = h | ht->nTableMask;\n\tidx = HT_HASH_EX(arData, nIndex);\n\twhile (EXPECTED(idx != HT_INVALID_IDX)) {\n\t\tp = HT_HASH_TO_BUCKET_EX(arData, idx);\n\t\tif (EXPECTED(p->key == key)) { /* check for the same interned string */\n\t\t\treturn p;\n\t\t} else if (EXPECTED(p->h == h) &&\n\t\t     EXPECTED(p->key) &&\n\t\t     EXPECTED(ZSTR_LEN(p->key) == ZSTR_LEN(key)) &&\n\t\t     EXPECTED(memcmp(ZSTR_VAL(p->key), ZSTR_VAL(key), ZSTR_LEN(key)) == 0)) {\n\t\t\treturn p;\n\t\t}\n\t\tidx = Z_NEXT(p->val);\n\t}\n\treturn NULL;\n}\n```\n\n## 扩容\n\n数组的容量在初始化的时候已经确定了大小,就是nTableSize。当然映射函数也是根据 nTableMask 来计算的。\n所以我们扩容时候必须重新计算索引,也就是`映射表`里的值。\n具体扩容规则:\n首先当需要扩容时,会计算当前`Bucket`链表里删除元素数量占总表元素数量的比例,如果没有超过阈值则申请分配一个原来数组大小两倍的新素组,把元素复制到新数组上,然后重新建立索引。\n\n阈值判断:\n```c\nht->nNumUsed > ht->nNumOfElements + (ht->nNumOfElements >> 5\n```\n\n处理过程:\n```c\nstatic void ZEND_FASTCALL zend_hash_do_resize(HashTable *ht)\n{\n\n\tIS_CONSISTENT(ht);\n\tHT_ASSERT(GC_REFCOUNT(ht) == 1);\n\n\tif (ht->nNumUsed > ht->nNumOfElements + (ht->nNumOfElements >> 5)) { /* additional term is there to amortize the cost of compaction */\n\t\tHANDLE_BLOCK_INTERRUPTIONS();\n\t\tzend_hash_rehash(ht);\n\t\tHANDLE_UNBLOCK_INTERRUPTIONS();\n\t} else if (ht->nTableSize < HT_MAX_SIZE) {\t/* Let's double the table size */\n\t\tvoid *new_data, *old_data = HT_GET_DATA_ADDR(ht);\n\t\tuint32_t nSize = ht->nTableSize + ht->nTableSize;\n\t\tBucket *old_buckets = ht->arData;\n\n\t\tHANDLE_BLOCK_INTERRUPTIONS();\n\t\tnew_data = pemalloc(HT_SIZE_EX(nSize, -nSize), ht->u.flags & HASH_FLAG_PERSISTENT);\n\t\tht->nTableSize = nSize;\n\t\tht->nTableMask = -ht->nTableSize;\n\t\tHT_SET_DATA_ADDR(ht, new_data);\n\t\tmemcpy(ht->arData, old_buckets, sizeof(Bucket) * ht->nNumUsed);\n\t\tpefree(old_data, ht->u.flags & HASH_FLAG_PERSISTENT);\n\t\tzend_hash_rehash(ht);\n\t\tHANDLE_UNBLOCK_INTERRUPTIONS();\n\t} else {\n\t\tzend_error_noreturn(E_ERROR, \"Possible integer overflow in memory allocation (%zu * %zu + %zu)\", ht->nTableSize * 2, sizeof(Bucket) + sizeof(uint32_t), sizeof(Bucket));\n\t}\n}\n\n```\n在处理的过程中还会把已经删除的`Bucket`给删除。\n\n具体的操作在`zend_hash.c`文件里。\n如果超过阈值,则会把已经删除`Bucket`移除,然后把又有后边的元素往前移动,不上空缺的`Bucket`,当然索引也会重建。\n\n\n\n\n## 参考\n- [time33 ](https://www.cnblogs.com/52fhy/p/5007456.html)\n- [2.1 变量的内部实现](https://github.com/pangudashu/php7-internal/blob/master/2/zval.md)\n\n\n\n\n\n","source":"_posts/php数组实现.md","raw":"---\ntitle: php数组实现\ndate: 2018-08-20 20:00:08\ntags:\n---\n\n要说php的数组,就不得不讲hashtable,以为php的数组是强依赖于hashtable实现的。一般\n\nTimes33的算法很简单，就是不断的乘33,下边是times33算法:\n\n## Times33(hash)\n\n```php\n<?php\nfunction myHash($str) {\n    // hash(i) = hash(i-1) * 33 + str[i]\n    $hash = 5381;\n    $s    = md5($str); //相比其它版本，进行了md5加密\n    $seed = 5;\n    $len  = 32;//加密后长度32\n    for ($i = 0; $i < $len; $i++) {\n        // (hash << 5) + hash 相当于 hash * 33\n        //$hash = sprintf(\"%u\", $hash * 33) + ord($s{$i});\n        //$hash = ($hash * 33 + ord($s{$i})) & 0x7FFFFFFF;\n        $hash = ($hash << $seed) + $hash + ord($s{$i});\n    }\n \n    return $hash & 0x7FFFFFFF;\n}\n```\n\n其中`<<` 表示左移,每次左移表示x2例如:\n\n```php\n<?php\n$num = 2;\n\necho $num << 2;\n```\n\n所以($hash << $seed)表示 $hash *32 ,同时加上$hash,也就表示 $hash *33了。ord()函数返回字符串的首个字符的 ASCII 值。\n最后`$hash & 0x7FFFFFFF` 表示与整形的最大值与操作(`0x7FFFF111FFF`二进制为`1111111111111111111111111111`),\n这个与操作会截取超过整形二进制部分,所以times33计算出来的值不会超过整形的最大值。\n\n## 为什么要用hashtable实现php数组?\n\n因为散列表是根据关键建码值直接进项访问的数据结构。在key和value之间有一个映射函数,可以根据key直接索引到对应的value值,它并\n不会使用一般的对比操作,而是直接使用`内存的起始位置和偏移位置`进行寻址,所以会比正常的寻址要快。\n\n\n## 散列表结构\n\n```c\nstruct _zend_array {\n\tzend_refcounted_h gc;\n\tunion {\n\t\tstruct {\n\t\t\tZEND_ENDIAN_LOHI_4(\n\t\t\t\tzend_uchar    flags,\n\t\t\t\tzend_uchar    nApplyCount,\n\t\t\t\tzend_uchar    nIteratorsCount,\n\t\t\t\tzend_uchar    reserve)\n\t\t} v;\n\t\tuint32_t flags;\n\t} u;\n\tuint32_t          nTableMask;\n\tBucket           *arData;\n\tuint32_t          nNumUsed;\n\tuint32_t          nNumOfElements;\n\tuint32_t          nTableSize;\n\tuint32_t          nInternalPointer;\n\tzend_long         nNextFreeElement;\n\tdtor_func_t       pDestructor;\n};\n```\n主要字段介绍:\n\n- gc 引用次数,垃圾回收时会用到。\n- union u 就不介绍了。\n- arData 存储元素的数组,内存是连续的,arData指向第一个元素。\n- nTableMask nTableSize的负数。\n- nTableSize 数组长度,为2的n此房。\n- nNumUsed 当前使用的Bucket数。\n- nNumOfElements 当前所有的Bucket数。\n- nNextFreeElement 下一个被使用的Bucket($a[] = '')\n- pDestructor 删除某个元素是会使用\n\n\n## Bucket结构\n```c\ntypedef struct _Bucket {\n\tzval              val;\n\tzend_ulong        h;                /* hash value (or numeric index)   */\n\tzend_string      *key;              /* string key or NULL for numerics */\n} Bucket;\n```\n\n- h hash出来的值(times33)\n- *key 存储元素的key\n- val 具体值,是个zval\n\n## 如何实现\n\nphp中实现散列表实现主要使用`存储元素数组`和 `映射函数`（也可以称作散列函数）和`映射表`\n\n\n#### 举个具体的栗子:\n 如果我们要在php代码中声明一个数组会发生什么?下边分析下php是如何实现数组的。\n ```php\n <?php\n $arr= [\n \t'a' => '111',\n \t'b' => '222',\n \t'c' => 'ccc'\n ];\n ```\n1. 首先肯定是初始化。\n2. 接下来将每个元素对应的值依照顺序拷贝到 Bucket里。\n3. 然后利用映射函数对求值,根据算出来的值将其对应的bucket的地址写到该值对应的映射这表里。\n\n具体操作如下图:\n![image](/photo/img/php数组实现/php数组具体实现.png)\n\n当然我们这里的映射是理想映射,因为在映射的计算过程中可能存在冲突,后续会介绍映射函数,以及如何解映射函数计算后的冲突。\n\n\n### 初始化\n\n```c\nZEND_API void ZEND_FASTCALL _zend_hash_init(HashTable *ht, uint32_t nSize, dtor_func_t pDestructor, zend_bool persistent ZEND_FILE_LINE_DC)\n{\n\tGC_REFCOUNT(ht) = 1; //设置引用次数\n\tGC_TYPE_INFO(ht) = IS_ARRAY; //设置数据类型\n\tht->u.flags = (persistent ? HASH_FLAG_PERSISTENT : 0) | HASH_FLAG_APPLY_PROTECTION | HASH_FLAG_STATIC_KEYS;\n\tht->nTableMask = HT_MIN_MASK;\n\tHT_SET_DATA_ADDR(ht, &uninitialized_bucket);\n\tht->nNumUsed = 0;\n\tht->nNumOfElements = 0;\n\tht->nInternalPointer = HT_INVALID_IDX;\n\tht->nNextFreeElement = 0;\n\tht->pDestructor = pDestructor;\n\tht->nTableSize = zend_hash_check_size(nSize);\n}\n```\n初始化的时候主要是对hashtable中各个成员的进行初始化设置,而且在这个时候不会给arData分配内存,只有在开始插入数据的时候才会\n为arData分配内存。\n\n\n\n## 映射函数\n\n映射函数其实就是一次`hash`操作和和一次`|`操作.\nhash操作就是上边锁提到得到times33操作,`|`操作是计算出来的hash值与nTableSize进行计算。\n```\nnIndex = ket->h | nTableMask;\n```\n因为nTableMask是nTableSize的负数,所以计算出来的nIndex值区间应该为[-1,nTableMask]。\n\n此处待补充 为什么会在[-1, nTableMask] 区间内。\n\n### 写入数据\n\n在初始化的时候并不会对arData分配内存,只有在写入的时候才会真正分配内存\n\n```c\nstatic void zend_always_inline zend_hash_real_init_ex(HashTable *ht, int packed)\n{\n\tHT_ASSERT(GC_REFCOUNT(ht) == 1);\n\tZEND_ASSERT(!((ht)->u.flags & HASH_FLAG_INITIALIZED));\n\tif (packed) {\n\t\tHT_SET_DATA_ADDR(ht, pemalloc(HT_SIZE(ht), (ht)->u.flags & HASH_FLAG_PERSISTENT));\n\t\t(ht)->u.flags |= HASH_FLAG_INITIALIZED | HASH_FLAG_PACKED;\n\t\tHT_HASH_RESET_PACKED(ht);\n\t} else {\n\t\t(ht)->nTableMask = -(ht)->nTableSize;\n\t\tHT_SET_DATA_ADDR(ht, pemalloc(HT_SIZE(ht), (ht)->u.flags & HASH_FLAG_PERSISTENT));\n\t\t(ht)->u.flags |= HASH_FLAG_INITIALIZED;\n\t\tif (EXPECTED(ht->nTableMask == -8)) {\n\t\t\tBucket *arData = ht->arData;\n\n\t\t\tHT_HASH_EX(arData, -8) = -1;\n\t\t\tHT_HASH_EX(arData, -7) = -1;\n\t\t\tHT_HASH_EX(arData, -6) = -1;\n\t\t\tHT_HASH_EX(arData, -5) = -1;\n\t\t\tHT_HASH_EX(arData, -4) = -1;\n\t\t\tHT_HASH_EX(arData, -3) = -1;\n\t\t\tHT_HASH_EX(arData, -2) = -1;\n\t\t\tHT_HASH_EX(arData, -1) = -1;\n\t\t} else {\n\t\t\tHT_HASH_RESET(ht);\n\t\t}\n\t}\n}\n```\n分配具体的内存\n\n```c\n#define HT_SIZE_EX(nTableSize, nTableMask) \\\n\t(HT_DATA_SIZE((nTableSize)) + HT_HASH_SIZE((nTableMask)))\n```\n\n```\n#define HT_HASH_SIZE(nTableMask) \\\n\t(((size_t)(uint32_t)-(int32_t)(nTableMask)) * sizeof(uint32_t))\n\n#define HT_DATA_SIZE(nTableSize) \\\n\t((size_t)(nTableSize) * sizeof(Bucket))\n```\n\n可以看到在分配具体分配内存的时候会分配 nTableSize*(Bucket+uint32_t)大小的内存。\n讲道理只需要分配nTableSize*Bucket大小内存就可以了,为什么会多余出来 nTableSize*uint32_t内存呢?\n因为nTableSize*uint32_t就是`映射表`所占内存大小。所以说Bucket会和映射表一次申请内存。\n写完成写入操作以后会将`*arData` 指向第一个Bucket。\n\n具体在内存里的结果如图所示:\n![image](/photo/img/php数组实现/hashtable.png)\n\n\n`映射表`在初始化的时候所有值都是-1,只有在被赋值时候会写入对应`Bucket`所在链表的偏移量。;\nht->arData 指向第一个`Bucket`的位置,在赋值的时候会按照列表顺序,将值写入`Bucket`的value里,然后会根据\n映射函数算出值当做偏移量找到对应`映射表`的元素,然后将当前`Bucket`写入此元素。\n\nps nTableSize 为2的次方倍。\n\n\n\n## 冲突\n\n如果`nIndex = ket->h | nTableMask` 算出来的值冲突了怎么办? 首先`映射表`的每个元素不是链表,所以导致无法存储多个元素。\n在php中是这样处理冲突的:\n首先`映射表`的所有元素初始化值为 -1 ,当前\n如果用冲突会将新算出来的值对应的`Bucket`覆盖原来旧的`Bucket`,然后将旧的`Bucket`迁移到新的`Bucket`,\n并将旧的`Bucket`的u2.next(默认为-1) 指向新`Bucket`。\n\n如图\n![image](/photo/img/php数组实现/链表冲突.png)\n\n \n## 查找\n\nphp再查找一个数组元素是,首先会根据其key 获取到计算后hash值'ket->h',然后根据映射函数算出当前元素在`映射表`中的偏移量,利用当前位置+偏移量找到`映射表`的元素,再根据其内的偏量找到对应`Bucket`链表的首个元素位置,最后遍历该链表核对key值,找到对应的值。\n\n具体实现函数:\n```c\nstatic zend_always_inline Bucket *zend_hash_find_bucket(const HashTable *ht, zend_string *key)\n{\n\tzend_ulong h;\n\tuint32_t nIndex;\n\tuint32_t idx;\n\tBucket *p, *arData;\n\n\th = zend_string_hash_val(key);\n\tarData = ht->arData;\n\tnIndex = h | ht->nTableMask;\n\tidx = HT_HASH_EX(arData, nIndex);\n\twhile (EXPECTED(idx != HT_INVALID_IDX)) {\n\t\tp = HT_HASH_TO_BUCKET_EX(arData, idx);\n\t\tif (EXPECTED(p->key == key)) { /* check for the same interned string */\n\t\t\treturn p;\n\t\t} else if (EXPECTED(p->h == h) &&\n\t\t     EXPECTED(p->key) &&\n\t\t     EXPECTED(ZSTR_LEN(p->key) == ZSTR_LEN(key)) &&\n\t\t     EXPECTED(memcmp(ZSTR_VAL(p->key), ZSTR_VAL(key), ZSTR_LEN(key)) == 0)) {\n\t\t\treturn p;\n\t\t}\n\t\tidx = Z_NEXT(p->val);\n\t}\n\treturn NULL;\n}\n```\n\n## 扩容\n\n数组的容量在初始化的时候已经确定了大小,就是nTableSize。当然映射函数也是根据 nTableMask 来计算的。\n所以我们扩容时候必须重新计算索引,也就是`映射表`里的值。\n具体扩容规则:\n首先当需要扩容时,会计算当前`Bucket`链表里删除元素数量占总表元素数量的比例,如果没有超过阈值则申请分配一个原来数组大小两倍的新素组,把元素复制到新数组上,然后重新建立索引。\n\n阈值判断:\n```c\nht->nNumUsed > ht->nNumOfElements + (ht->nNumOfElements >> 5\n```\n\n处理过程:\n```c\nstatic void ZEND_FASTCALL zend_hash_do_resize(HashTable *ht)\n{\n\n\tIS_CONSISTENT(ht);\n\tHT_ASSERT(GC_REFCOUNT(ht) == 1);\n\n\tif (ht->nNumUsed > ht->nNumOfElements + (ht->nNumOfElements >> 5)) { /* additional term is there to amortize the cost of compaction */\n\t\tHANDLE_BLOCK_INTERRUPTIONS();\n\t\tzend_hash_rehash(ht);\n\t\tHANDLE_UNBLOCK_INTERRUPTIONS();\n\t} else if (ht->nTableSize < HT_MAX_SIZE) {\t/* Let's double the table size */\n\t\tvoid *new_data, *old_data = HT_GET_DATA_ADDR(ht);\n\t\tuint32_t nSize = ht->nTableSize + ht->nTableSize;\n\t\tBucket *old_buckets = ht->arData;\n\n\t\tHANDLE_BLOCK_INTERRUPTIONS();\n\t\tnew_data = pemalloc(HT_SIZE_EX(nSize, -nSize), ht->u.flags & HASH_FLAG_PERSISTENT);\n\t\tht->nTableSize = nSize;\n\t\tht->nTableMask = -ht->nTableSize;\n\t\tHT_SET_DATA_ADDR(ht, new_data);\n\t\tmemcpy(ht->arData, old_buckets, sizeof(Bucket) * ht->nNumUsed);\n\t\tpefree(old_data, ht->u.flags & HASH_FLAG_PERSISTENT);\n\t\tzend_hash_rehash(ht);\n\t\tHANDLE_UNBLOCK_INTERRUPTIONS();\n\t} else {\n\t\tzend_error_noreturn(E_ERROR, \"Possible integer overflow in memory allocation (%zu * %zu + %zu)\", ht->nTableSize * 2, sizeof(Bucket) + sizeof(uint32_t), sizeof(Bucket));\n\t}\n}\n\n```\n在处理的过程中还会把已经删除的`Bucket`给删除。\n\n具体的操作在`zend_hash.c`文件里。\n如果超过阈值,则会把已经删除`Bucket`移除,然后把又有后边的元素往前移动,不上空缺的`Bucket`,当然索引也会重建。\n\n\n\n\n## 参考\n- [time33 ](https://www.cnblogs.com/52fhy/p/5007456.html)\n- [2.1 变量的内部实现](https://github.com/pangudashu/php7-internal/blob/master/2/zval.md)\n\n\n\n\n\n","slug":"php数组实现","published":1,"updated":"2018-08-25T08:13:50.366Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlz6uwgz000e0uwwd3uppluc","content":"<p>要说php的数组,就不得不讲hashtable,以为php的数组是强依赖于hashtable实现的。一般</p>\n<p>Times33的算法很简单，就是不断的乘33,下边是times33算法:</p>\n<h2 id=\"Times33-hash\"><a href=\"#Times33-hash\" class=\"headerlink\" title=\"Times33(hash)\"></a>Times33(hash)</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myHash</span><span class=\"params\">($str)</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// hash(i) = hash(i-1) * 33 + str[i]</span></div><div class=\"line\">    $hash = <span class=\"number\">5381</span>;</div><div class=\"line\">    $s    = md5($str); <span class=\"comment\">//相比其它版本，进行了md5加密</span></div><div class=\"line\">    $seed = <span class=\"number\">5</span>;</div><div class=\"line\">    $len  = <span class=\"number\">32</span>;<span class=\"comment\">//加密后长度32</span></div><div class=\"line\">    <span class=\"keyword\">for</span> ($i = <span class=\"number\">0</span>; $i &lt; $len; $i++) &#123;</div><div class=\"line\">        <span class=\"comment\">// (hash &lt;&lt; 5) + hash 相当于 hash * 33</span></div><div class=\"line\">        <span class=\"comment\">//$hash = sprintf(\"%u\", $hash * 33) + ord($s&#123;$i&#125;);</span></div><div class=\"line\">        <span class=\"comment\">//$hash = ($hash * 33 + ord($s&#123;$i&#125;)) &amp; 0x7FFFFFFF;</span></div><div class=\"line\">        $hash = ($hash &lt;&lt; $seed) + $hash + ord($s&#123;$i&#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"keyword\">return</span> $hash &amp; <span class=\"number\">0x7FFFFFFF</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>其中<code>&lt;&lt;</code> 表示左移,每次左移表示x2例如:</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">$num = <span class=\"number\">2</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">echo</span> $num &lt;&lt; <span class=\"number\">2</span>;</div></pre></td></tr></table></figure>\n<p>所以($hash &lt;&lt; $seed)表示 $hash <em>32 ,同时加上$hash,也就表示 $hash </em>33了。ord()函数返回字符串的首个字符的 ASCII 值。<br>最后<code>$hash &amp; 0x7FFFFFFF</code> 表示与整形的最大值与操作(<code>0x7FFFF111FFF</code>二进制为<code>1111111111111111111111111111</code>),<br>这个与操作会截取超过整形二进制部分,所以times33计算出来的值不会超过整形的最大值。</p>\n<h2 id=\"为什么要用hashtable实现php数组\"><a href=\"#为什么要用hashtable实现php数组\" class=\"headerlink\" title=\"为什么要用hashtable实现php数组?\"></a>为什么要用hashtable实现php数组?</h2><p>因为散列表是根据关键建码值直接进项访问的数据结构。在key和value之间有一个映射函数,可以根据key直接索引到对应的value值,它并<br>不会使用一般的对比操作,而是直接使用<code>内存的起始位置和偏移位置</code>进行寻址,所以会比正常的寻址要快。</p>\n<h2 id=\"散列表结构\"><a href=\"#散列表结构\" class=\"headerlink\" title=\"散列表结构\"></a>散列表结构</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">struct</span> _zend_array &#123;</div><div class=\"line\">\tzend_refcounted_h gc;</div><div class=\"line\">\t<span class=\"keyword\">union</span> &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">\t\t\tZEND_ENDIAN_LOHI_4(</div><div class=\"line\">\t\t\t\tzend_uchar    flags,</div><div class=\"line\">\t\t\t\tzend_uchar    nApplyCount,</div><div class=\"line\">\t\t\t\tzend_uchar    nIteratorsCount,</div><div class=\"line\">\t\t\t\tzend_uchar    reserve)</div><div class=\"line\">\t\t&#125; v;</div><div class=\"line\">\t\t<span class=\"keyword\">uint32_t</span> flags;</div><div class=\"line\">\t&#125; u;</div><div class=\"line\">\t<span class=\"keyword\">uint32_t</span>          nTableMask;</div><div class=\"line\">\tBucket           *arData;</div><div class=\"line\">\t<span class=\"keyword\">uint32_t</span>          nNumUsed;</div><div class=\"line\">\t<span class=\"keyword\">uint32_t</span>          nNumOfElements;</div><div class=\"line\">\t<span class=\"keyword\">uint32_t</span>          nTableSize;</div><div class=\"line\">\t<span class=\"keyword\">uint32_t</span>          nInternalPointer;</div><div class=\"line\">\tzend_long         nNextFreeElement;</div><div class=\"line\">\t<span class=\"keyword\">dtor_func_t</span>       pDestructor;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>主要字段介绍:</p>\n<ul>\n<li>gc 引用次数,垃圾回收时会用到。</li>\n<li>union u 就不介绍了。</li>\n<li>arData 存储元素的数组,内存是连续的,arData指向第一个元素。</li>\n<li>nTableMask nTableSize的负数。</li>\n<li>nTableSize 数组长度,为2的n此房。</li>\n<li>nNumUsed 当前使用的Bucket数。</li>\n<li>nNumOfElements 当前所有的Bucket数。</li>\n<li>nNextFreeElement 下一个被使用的Bucket($a[] = ‘’)</li>\n<li>pDestructor 删除某个元素是会使用</li>\n</ul>\n<h2 id=\"Bucket结构\"><a href=\"#Bucket结构\" class=\"headerlink\" title=\"Bucket结构\"></a>Bucket结构</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> _Bucket &#123;</div><div class=\"line\">\tzval              val;</div><div class=\"line\">\tzend_ulong        h;                <span class=\"comment\">/* hash value (or numeric index)   */</span></div><div class=\"line\">\tzend_string      *key;              <span class=\"comment\">/* string key or NULL for numerics */</span></div><div class=\"line\">&#125; Bucket;</div></pre></td></tr></table></figure>\n<ul>\n<li>h hash出来的值(times33)</li>\n<li>*key 存储元素的key</li>\n<li>val 具体值,是个zval</li>\n</ul>\n<h2 id=\"如何实现\"><a href=\"#如何实现\" class=\"headerlink\" title=\"如何实现\"></a>如何实现</h2><p>php中实现散列表实现主要使用<code>存储元素数组</code>和 <code>映射函数</code>（也可以称作散列函数）和<code>映射表</code></p>\n<h4 id=\"举个具体的栗子\"><a href=\"#举个具体的栗子\" class=\"headerlink\" title=\"举个具体的栗子:\"></a>举个具体的栗子:</h4><p> 如果我们要在php代码中声明一个数组会发生什么?下边分析下php是如何实现数组的。<br> <figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">$arr= [</div><div class=\"line\">\t<span class=\"string\">'a'</span> =&gt; <span class=\"string\">'111'</span>,</div><div class=\"line\">\t<span class=\"string\">'b'</span> =&gt; <span class=\"string\">'222'</span>,</div><div class=\"line\">\t<span class=\"string\">'c'</span> =&gt; <span class=\"string\">'ccc'</span></div><div class=\"line\">];</div></pre></td></tr></table></figure></p>\n<ol>\n<li>首先肯定是初始化。</li>\n<li>接下来将每个元素对应的值依照顺序拷贝到 Bucket里。</li>\n<li>然后利用映射函数对求值,根据算出来的值将其对应的bucket的地址写到该值对应的映射这表里。</li>\n</ol>\n<p>具体操作如下图:<br><img src=\"/photo/img/php数组实现/php数组具体实现.png\" alt=\"image\"></p>\n<p>当然我们这里的映射是理想映射,因为在映射的计算过程中可能存在冲突,后续会介绍映射函数,以及如何解映射函数计算后的冲突。</p>\n<h3 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">ZEND_API <span class=\"keyword\">void</span> ZEND_FASTCALL _zend_hash_init(HashTable *ht, <span class=\"keyword\">uint32_t</span> nSize, <span class=\"keyword\">dtor_func_t</span> pDestructor, zend_bool persistent ZEND_FILE_LINE_DC)</div><div class=\"line\">&#123;</div><div class=\"line\">\tGC_REFCOUNT(ht) = <span class=\"number\">1</span>; <span class=\"comment\">//设置引用次数</span></div><div class=\"line\">\tGC_TYPE_INFO(ht) = IS_ARRAY; <span class=\"comment\">//设置数据类型</span></div><div class=\"line\">\tht-&gt;u.flags = (persistent ? HASH_FLAG_PERSISTENT : <span class=\"number\">0</span>) | HASH_FLAG_APPLY_PROTECTION | HASH_FLAG_STATIC_KEYS;</div><div class=\"line\">\tht-&gt;nTableMask = HT_MIN_MASK;</div><div class=\"line\">\tHT_SET_DATA_ADDR(ht, &amp;uninitialized_bucket);</div><div class=\"line\">\tht-&gt;nNumUsed = <span class=\"number\">0</span>;</div><div class=\"line\">\tht-&gt;nNumOfElements = <span class=\"number\">0</span>;</div><div class=\"line\">\tht-&gt;nInternalPointer = HT_INVALID_IDX;</div><div class=\"line\">\tht-&gt;nNextFreeElement = <span class=\"number\">0</span>;</div><div class=\"line\">\tht-&gt;pDestructor = pDestructor;</div><div class=\"line\">\tht-&gt;nTableSize = zend_hash_check_size(nSize);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>初始化的时候主要是对hashtable中各个成员的进行初始化设置,而且在这个时候不会给arData分配内存,只有在开始插入数据的时候才会<br>为arData分配内存。</p>\n<h2 id=\"映射函数\"><a href=\"#映射函数\" class=\"headerlink\" title=\"映射函数\"></a>映射函数</h2><p>映射函数其实就是一次<code>hash</code>操作和和一次<code>|</code>操作.<br>hash操作就是上边锁提到得到times33操作,<code>|</code>操作是计算出来的hash值与nTableSize进行计算。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">nIndex = ket-&gt;h | nTableMask;</div></pre></td></tr></table></figure></p>\n<p>因为nTableMask是nTableSize的负数,所以计算出来的nIndex值区间应该为[-1,nTableMask]。</p>\n<p>此处待补充 为什么会在[-1, nTableMask] 区间内。</p>\n<h3 id=\"写入数据\"><a href=\"#写入数据\" class=\"headerlink\" title=\"写入数据\"></a>写入数据</h3><p>在初始化的时候并不会对arData分配内存,只有在写入的时候才会真正分配内存</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> zend_always_inline <span class=\"title\">zend_hash_real_init_ex</span><span class=\"params\">(HashTable *ht, <span class=\"keyword\">int</span> packed)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\tHT_ASSERT(GC_REFCOUNT(ht) == <span class=\"number\">1</span>);</div><div class=\"line\">\tZEND_ASSERT(!((ht)-&gt;u.flags &amp; HASH_FLAG_INITIALIZED));</div><div class=\"line\">\t<span class=\"keyword\">if</span> (packed) &#123;</div><div class=\"line\">\t\tHT_SET_DATA_ADDR(ht, pemalloc(HT_SIZE(ht), (ht)-&gt;u.flags &amp; HASH_FLAG_PERSISTENT));</div><div class=\"line\">\t\t(ht)-&gt;u.flags |= HASH_FLAG_INITIALIZED | HASH_FLAG_PACKED;</div><div class=\"line\">\t\tHT_HASH_RESET_PACKED(ht);</div><div class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t(ht)-&gt;nTableMask = -(ht)-&gt;nTableSize;</div><div class=\"line\">\t\tHT_SET_DATA_ADDR(ht, pemalloc(HT_SIZE(ht), (ht)-&gt;u.flags &amp; HASH_FLAG_PERSISTENT));</div><div class=\"line\">\t\t(ht)-&gt;u.flags |= HASH_FLAG_INITIALIZED;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (EXPECTED(ht-&gt;nTableMask == <span class=\"number\">-8</span>)) &#123;</div><div class=\"line\">\t\t\tBucket *arData = ht-&gt;arData;</div><div class=\"line\"></div><div class=\"line\">\t\t\tHT_HASH_EX(arData, <span class=\"number\">-8</span>) = <span class=\"number\">-1</span>;</div><div class=\"line\">\t\t\tHT_HASH_EX(arData, <span class=\"number\">-7</span>) = <span class=\"number\">-1</span>;</div><div class=\"line\">\t\t\tHT_HASH_EX(arData, <span class=\"number\">-6</span>) = <span class=\"number\">-1</span>;</div><div class=\"line\">\t\t\tHT_HASH_EX(arData, <span class=\"number\">-5</span>) = <span class=\"number\">-1</span>;</div><div class=\"line\">\t\t\tHT_HASH_EX(arData, <span class=\"number\">-4</span>) = <span class=\"number\">-1</span>;</div><div class=\"line\">\t\t\tHT_HASH_EX(arData, <span class=\"number\">-3</span>) = <span class=\"number\">-1</span>;</div><div class=\"line\">\t\t\tHT_HASH_EX(arData, <span class=\"number\">-2</span>) = <span class=\"number\">-1</span>;</div><div class=\"line\">\t\t\tHT_HASH_EX(arData, <span class=\"number\">-1</span>) = <span class=\"number\">-1</span>;</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\tHT_HASH_RESET(ht);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>分配具体的内存</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> HT_SIZE_EX(nTableSize, nTableMask) \\</span></div><div class=\"line\">\t(HT_DATA_SIZE((nTableSize)) + HT_HASH_SIZE((nTableMask)))</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">#define HT_HASH_SIZE(nTableMask) \\</div><div class=\"line\">\t(((size_t)(uint32_t)-(int32_t)(nTableMask)) * sizeof(uint32_t))</div><div class=\"line\"></div><div class=\"line\">#define HT_DATA_SIZE(nTableSize) \\</div><div class=\"line\">\t((size_t)(nTableSize) * sizeof(Bucket))</div></pre></td></tr></table></figure>\n<p>可以看到在分配具体分配内存的时候会分配 nTableSize<em>(Bucket+uint32_t)大小的内存。<br>讲道理只需要分配nTableSize</em>Bucket大小内存就可以了,为什么会多余出来 nTableSize<em>uint32_t内存呢?<br>因为nTableSize</em>uint32_t就是<code>映射表</code>所占内存大小。所以说Bucket会和映射表一次申请内存。<br>写完成写入操作以后会将<code>*arData</code> 指向第一个Bucket。</p>\n<p>具体在内存里的结果如图所示:<br><img src=\"/photo/img/php数组实现/hashtable.png\" alt=\"image\"></p>\n<p><code>映射表</code>在初始化的时候所有值都是-1,只有在被赋值时候会写入对应<code>Bucket</code>所在链表的偏移量。;<br>ht-&gt;arData 指向第一个<code>Bucket</code>的位置,在赋值的时候会按照列表顺序,将值写入<code>Bucket</code>的value里,然后会根据<br>映射函数算出值当做偏移量找到对应<code>映射表</code>的元素,然后将当前<code>Bucket</code>写入此元素。</p>\n<p>ps nTableSize 为2的次方倍。</p>\n<h2 id=\"冲突\"><a href=\"#冲突\" class=\"headerlink\" title=\"冲突\"></a>冲突</h2><p>如果<code>nIndex = ket-&gt;h | nTableMask</code> 算出来的值冲突了怎么办? 首先<code>映射表</code>的每个元素不是链表,所以导致无法存储多个元素。<br>在php中是这样处理冲突的:<br>首先<code>映射表</code>的所有元素初始化值为 -1 ,当前<br>如果用冲突会将新算出来的值对应的<code>Bucket</code>覆盖原来旧的<code>Bucket</code>,然后将旧的<code>Bucket</code>迁移到新的<code>Bucket</code>,<br>并将旧的<code>Bucket</code>的u2.next(默认为-1) 指向新<code>Bucket</code>。</p>\n<p>如图<br><img src=\"/photo/img/php数组实现/链表冲突.png\" alt=\"image\"></p>\n<h2 id=\"查找\"><a href=\"#查找\" class=\"headerlink\" title=\"查找\"></a>查找</h2><p>php再查找一个数组元素是,首先会根据其key 获取到计算后hash值’ket-&gt;h’,然后根据映射函数算出当前元素在<code>映射表</code>中的偏移量,利用当前位置+偏移量找到<code>映射表</code>的元素,再根据其内的偏量找到对应<code>Bucket</code>链表的首个元素位置,最后遍历该链表核对key值,找到对应的值。</p>\n<p>具体实现函数:<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> zend_always_inline Bucket *<span class=\"title\">zend_hash_find_bucket</span><span class=\"params\">(<span class=\"keyword\">const</span> HashTable *ht, zend_string *key)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\tzend_ulong h;</div><div class=\"line\">\t<span class=\"keyword\">uint32_t</span> nIndex;</div><div class=\"line\">\t<span class=\"keyword\">uint32_t</span> idx;</div><div class=\"line\">\tBucket *p, *arData;</div><div class=\"line\"></div><div class=\"line\">\th = zend_string_hash_val(key);</div><div class=\"line\">\tarData = ht-&gt;arData;</div><div class=\"line\">\tnIndex = h | ht-&gt;nTableMask;</div><div class=\"line\">\tidx = HT_HASH_EX(arData, nIndex);</div><div class=\"line\">\t<span class=\"keyword\">while</span> (EXPECTED(idx != HT_INVALID_IDX)) &#123;</div><div class=\"line\">\t\tp = HT_HASH_TO_BUCKET_EX(arData, idx);</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (EXPECTED(p-&gt;key == key)) &#123; <span class=\"comment\">/* check for the same interned string */</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> p;</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (EXPECTED(p-&gt;h == h) &amp;&amp;</div><div class=\"line\">\t\t     EXPECTED(p-&gt;key) &amp;&amp;</div><div class=\"line\">\t\t     EXPECTED(ZSTR_LEN(p-&gt;key) == ZSTR_LEN(key)) &amp;&amp;</div><div class=\"line\">\t\t     EXPECTED(<span class=\"built_in\">memcmp</span>(ZSTR_VAL(p-&gt;key), ZSTR_VAL(key), ZSTR_LEN(key)) == <span class=\"number\">0</span>)) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> p;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tidx = Z_NEXT(p-&gt;val);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"扩容\"><a href=\"#扩容\" class=\"headerlink\" title=\"扩容\"></a>扩容</h2><p>数组的容量在初始化的时候已经确定了大小,就是nTableSize。当然映射函数也是根据 nTableMask 来计算的。<br>所以我们扩容时候必须重新计算索引,也就是<code>映射表</code>里的值。<br>具体扩容规则:<br>首先当需要扩容时,会计算当前<code>Bucket</code>链表里删除元素数量占总表元素数量的比例,如果没有超过阈值则申请分配一个原来数组大小两倍的新素组,把元素复制到新数组上,然后重新建立索引。</p>\n<p>阈值判断:<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ht-&gt;nNumUsed &gt; ht-&gt;nNumOfElements + (ht-&gt;nNumOfElements &gt;&gt; <span class=\"number\">5</span></div></pre></td></tr></table></figure></p>\n<p>处理过程:<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> ZEND_FASTCALL <span class=\"title\">zend_hash_do_resize</span><span class=\"params\">(HashTable *ht)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\"></div><div class=\"line\">\tIS_CONSISTENT(ht);</div><div class=\"line\">\tHT_ASSERT(GC_REFCOUNT(ht) == <span class=\"number\">1</span>);</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> (ht-&gt;nNumUsed &gt; ht-&gt;nNumOfElements + (ht-&gt;nNumOfElements &gt;&gt; <span class=\"number\">5</span>)) &#123; <span class=\"comment\">/* additional term is there to amortize the cost of compaction */</span></div><div class=\"line\">\t\tHANDLE_BLOCK_INTERRUPTIONS();</div><div class=\"line\">\t\tzend_hash_rehash(ht);</div><div class=\"line\">\t\tHANDLE_UNBLOCK_INTERRUPTIONS();</div><div class=\"line\">\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (ht-&gt;nTableSize &lt; HT_MAX_SIZE) &#123;\t<span class=\"comment\">/* Let's double the table size */</span></div><div class=\"line\">\t\t<span class=\"keyword\">void</span> *new_data, *old_data = HT_GET_DATA_ADDR(ht);</div><div class=\"line\">\t\t<span class=\"keyword\">uint32_t</span> nSize = ht-&gt;nTableSize + ht-&gt;nTableSize;</div><div class=\"line\">\t\tBucket *old_buckets = ht-&gt;arData;</div><div class=\"line\"></div><div class=\"line\">\t\tHANDLE_BLOCK_INTERRUPTIONS();</div><div class=\"line\">\t\tnew_data = pemalloc(HT_SIZE_EX(nSize, -nSize), ht-&gt;u.flags &amp; HASH_FLAG_PERSISTENT);</div><div class=\"line\">\t\tht-&gt;nTableSize = nSize;</div><div class=\"line\">\t\tht-&gt;nTableMask = -ht-&gt;nTableSize;</div><div class=\"line\">\t\tHT_SET_DATA_ADDR(ht, new_data);</div><div class=\"line\">\t\t<span class=\"built_in\">memcpy</span>(ht-&gt;arData, old_buckets, <span class=\"keyword\">sizeof</span>(Bucket) * ht-&gt;nNumUsed);</div><div class=\"line\">\t\tpefree(old_data, ht-&gt;u.flags &amp; HASH_FLAG_PERSISTENT);</div><div class=\"line\">\t\tzend_hash_rehash(ht);</div><div class=\"line\">\t\tHANDLE_UNBLOCK_INTERRUPTIONS();</div><div class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\tzend_error_noreturn(E_ERROR, <span class=\"string\">\"Possible integer overflow in memory allocation (%zu * %zu + %zu)\"</span>, ht-&gt;nTableSize * <span class=\"number\">2</span>, <span class=\"keyword\">sizeof</span>(Bucket) + <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">uint32_t</span>), <span class=\"keyword\">sizeof</span>(Bucket));</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在处理的过程中还会把已经删除的<code>Bucket</code>给删除。</p>\n<p>具体的操作在<code>zend_hash.c</code>文件里。<br>如果超过阈值,则会把已经删除<code>Bucket</code>移除,然后把又有后边的元素往前移动,不上空缺的<code>Bucket</code>,当然索引也会重建。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://www.cnblogs.com/52fhy/p/5007456.html\" target=\"_blank\" rel=\"noopener\">time33 </a></li>\n<li><a href=\"https://github.com/pangudashu/php7-internal/blob/master/2/zval.md\" target=\"_blank\" rel=\"noopener\">2.1 变量的内部实现</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>要说php的数组,就不得不讲hashtable,以为php的数组是强依赖于hashtable实现的。一般</p>\n<p>Times33的算法很简单，就是不断的乘33,下边是times33算法:</p>\n<h2 id=\"Times33-hash\"><a href=\"#Times33-hash\" class=\"headerlink\" title=\"Times33(hash)\"></a>Times33(hash)</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myHash</span><span class=\"params\">($str)</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// hash(i) = hash(i-1) * 33 + str[i]</span></div><div class=\"line\">    $hash = <span class=\"number\">5381</span>;</div><div class=\"line\">    $s    = md5($str); <span class=\"comment\">//相比其它版本，进行了md5加密</span></div><div class=\"line\">    $seed = <span class=\"number\">5</span>;</div><div class=\"line\">    $len  = <span class=\"number\">32</span>;<span class=\"comment\">//加密后长度32</span></div><div class=\"line\">    <span class=\"keyword\">for</span> ($i = <span class=\"number\">0</span>; $i &lt; $len; $i++) &#123;</div><div class=\"line\">        <span class=\"comment\">// (hash &lt;&lt; 5) + hash 相当于 hash * 33</span></div><div class=\"line\">        <span class=\"comment\">//$hash = sprintf(\"%u\", $hash * 33) + ord($s&#123;$i&#125;);</span></div><div class=\"line\">        <span class=\"comment\">//$hash = ($hash * 33 + ord($s&#123;$i&#125;)) &amp; 0x7FFFFFFF;</span></div><div class=\"line\">        $hash = ($hash &lt;&lt; $seed) + $hash + ord($s&#123;$i&#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"keyword\">return</span> $hash &amp; <span class=\"number\">0x7FFFFFFF</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>其中<code>&lt;&lt;</code> 表示左移,每次左移表示x2例如:</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">$num = <span class=\"number\">2</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">echo</span> $num &lt;&lt; <span class=\"number\">2</span>;</div></pre></td></tr></table></figure>\n<p>所以($hash &lt;&lt; $seed)表示 $hash <em>32 ,同时加上$hash,也就表示 $hash </em>33了。ord()函数返回字符串的首个字符的 ASCII 值。<br>最后<code>$hash &amp; 0x7FFFFFFF</code> 表示与整形的最大值与操作(<code>0x7FFFF111FFF</code>二进制为<code>1111111111111111111111111111</code>),<br>这个与操作会截取超过整形二进制部分,所以times33计算出来的值不会超过整形的最大值。</p>\n<h2 id=\"为什么要用hashtable实现php数组\"><a href=\"#为什么要用hashtable实现php数组\" class=\"headerlink\" title=\"为什么要用hashtable实现php数组?\"></a>为什么要用hashtable实现php数组?</h2><p>因为散列表是根据关键建码值直接进项访问的数据结构。在key和value之间有一个映射函数,可以根据key直接索引到对应的value值,它并<br>不会使用一般的对比操作,而是直接使用<code>内存的起始位置和偏移位置</code>进行寻址,所以会比正常的寻址要快。</p>\n<h2 id=\"散列表结构\"><a href=\"#散列表结构\" class=\"headerlink\" title=\"散列表结构\"></a>散列表结构</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">struct</span> _zend_array &#123;</div><div class=\"line\">\tzend_refcounted_h gc;</div><div class=\"line\">\t<span class=\"keyword\">union</span> &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">\t\t\tZEND_ENDIAN_LOHI_4(</div><div class=\"line\">\t\t\t\tzend_uchar    flags,</div><div class=\"line\">\t\t\t\tzend_uchar    nApplyCount,</div><div class=\"line\">\t\t\t\tzend_uchar    nIteratorsCount,</div><div class=\"line\">\t\t\t\tzend_uchar    reserve)</div><div class=\"line\">\t\t&#125; v;</div><div class=\"line\">\t\t<span class=\"keyword\">uint32_t</span> flags;</div><div class=\"line\">\t&#125; u;</div><div class=\"line\">\t<span class=\"keyword\">uint32_t</span>          nTableMask;</div><div class=\"line\">\tBucket           *arData;</div><div class=\"line\">\t<span class=\"keyword\">uint32_t</span>          nNumUsed;</div><div class=\"line\">\t<span class=\"keyword\">uint32_t</span>          nNumOfElements;</div><div class=\"line\">\t<span class=\"keyword\">uint32_t</span>          nTableSize;</div><div class=\"line\">\t<span class=\"keyword\">uint32_t</span>          nInternalPointer;</div><div class=\"line\">\tzend_long         nNextFreeElement;</div><div class=\"line\">\t<span class=\"keyword\">dtor_func_t</span>       pDestructor;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>主要字段介绍:</p>\n<ul>\n<li>gc 引用次数,垃圾回收时会用到。</li>\n<li>union u 就不介绍了。</li>\n<li>arData 存储元素的数组,内存是连续的,arData指向第一个元素。</li>\n<li>nTableMask nTableSize的负数。</li>\n<li>nTableSize 数组长度,为2的n此房。</li>\n<li>nNumUsed 当前使用的Bucket数。</li>\n<li>nNumOfElements 当前所有的Bucket数。</li>\n<li>nNextFreeElement 下一个被使用的Bucket($a[] = ‘’)</li>\n<li>pDestructor 删除某个元素是会使用</li>\n</ul>\n<h2 id=\"Bucket结构\"><a href=\"#Bucket结构\" class=\"headerlink\" title=\"Bucket结构\"></a>Bucket结构</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> _Bucket &#123;</div><div class=\"line\">\tzval              val;</div><div class=\"line\">\tzend_ulong        h;                <span class=\"comment\">/* hash value (or numeric index)   */</span></div><div class=\"line\">\tzend_string      *key;              <span class=\"comment\">/* string key or NULL for numerics */</span></div><div class=\"line\">&#125; Bucket;</div></pre></td></tr></table></figure>\n<ul>\n<li>h hash出来的值(times33)</li>\n<li>*key 存储元素的key</li>\n<li>val 具体值,是个zval</li>\n</ul>\n<h2 id=\"如何实现\"><a href=\"#如何实现\" class=\"headerlink\" title=\"如何实现\"></a>如何实现</h2><p>php中实现散列表实现主要使用<code>存储元素数组</code>和 <code>映射函数</code>（也可以称作散列函数）和<code>映射表</code></p>\n<h4 id=\"举个具体的栗子\"><a href=\"#举个具体的栗子\" class=\"headerlink\" title=\"举个具体的栗子:\"></a>举个具体的栗子:</h4><p> 如果我们要在php代码中声明一个数组会发生什么?下边分析下php是如何实现数组的。<br> <figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">$arr= [</div><div class=\"line\">\t<span class=\"string\">'a'</span> =&gt; <span class=\"string\">'111'</span>,</div><div class=\"line\">\t<span class=\"string\">'b'</span> =&gt; <span class=\"string\">'222'</span>,</div><div class=\"line\">\t<span class=\"string\">'c'</span> =&gt; <span class=\"string\">'ccc'</span></div><div class=\"line\">];</div></pre></td></tr></table></figure></p>\n<ol>\n<li>首先肯定是初始化。</li>\n<li>接下来将每个元素对应的值依照顺序拷贝到 Bucket里。</li>\n<li>然后利用映射函数对求值,根据算出来的值将其对应的bucket的地址写到该值对应的映射这表里。</li>\n</ol>\n<p>具体操作如下图:<br><img src=\"/photo/img/php数组实现/php数组具体实现.png\" alt=\"image\"></p>\n<p>当然我们这里的映射是理想映射,因为在映射的计算过程中可能存在冲突,后续会介绍映射函数,以及如何解映射函数计算后的冲突。</p>\n<h3 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">ZEND_API <span class=\"keyword\">void</span> ZEND_FASTCALL _zend_hash_init(HashTable *ht, <span class=\"keyword\">uint32_t</span> nSize, <span class=\"keyword\">dtor_func_t</span> pDestructor, zend_bool persistent ZEND_FILE_LINE_DC)</div><div class=\"line\">&#123;</div><div class=\"line\">\tGC_REFCOUNT(ht) = <span class=\"number\">1</span>; <span class=\"comment\">//设置引用次数</span></div><div class=\"line\">\tGC_TYPE_INFO(ht) = IS_ARRAY; <span class=\"comment\">//设置数据类型</span></div><div class=\"line\">\tht-&gt;u.flags = (persistent ? HASH_FLAG_PERSISTENT : <span class=\"number\">0</span>) | HASH_FLAG_APPLY_PROTECTION | HASH_FLAG_STATIC_KEYS;</div><div class=\"line\">\tht-&gt;nTableMask = HT_MIN_MASK;</div><div class=\"line\">\tHT_SET_DATA_ADDR(ht, &amp;uninitialized_bucket);</div><div class=\"line\">\tht-&gt;nNumUsed = <span class=\"number\">0</span>;</div><div class=\"line\">\tht-&gt;nNumOfElements = <span class=\"number\">0</span>;</div><div class=\"line\">\tht-&gt;nInternalPointer = HT_INVALID_IDX;</div><div class=\"line\">\tht-&gt;nNextFreeElement = <span class=\"number\">0</span>;</div><div class=\"line\">\tht-&gt;pDestructor = pDestructor;</div><div class=\"line\">\tht-&gt;nTableSize = zend_hash_check_size(nSize);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>初始化的时候主要是对hashtable中各个成员的进行初始化设置,而且在这个时候不会给arData分配内存,只有在开始插入数据的时候才会<br>为arData分配内存。</p>\n<h2 id=\"映射函数\"><a href=\"#映射函数\" class=\"headerlink\" title=\"映射函数\"></a>映射函数</h2><p>映射函数其实就是一次<code>hash</code>操作和和一次<code>|</code>操作.<br>hash操作就是上边锁提到得到times33操作,<code>|</code>操作是计算出来的hash值与nTableSize进行计算。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">nIndex = ket-&gt;h | nTableMask;</div></pre></td></tr></table></figure></p>\n<p>因为nTableMask是nTableSize的负数,所以计算出来的nIndex值区间应该为[-1,nTableMask]。</p>\n<p>此处待补充 为什么会在[-1, nTableMask] 区间内。</p>\n<h3 id=\"写入数据\"><a href=\"#写入数据\" class=\"headerlink\" title=\"写入数据\"></a>写入数据</h3><p>在初始化的时候并不会对arData分配内存,只有在写入的时候才会真正分配内存</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> zend_always_inline <span class=\"title\">zend_hash_real_init_ex</span><span class=\"params\">(HashTable *ht, <span class=\"keyword\">int</span> packed)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\tHT_ASSERT(GC_REFCOUNT(ht) == <span class=\"number\">1</span>);</div><div class=\"line\">\tZEND_ASSERT(!((ht)-&gt;u.flags &amp; HASH_FLAG_INITIALIZED));</div><div class=\"line\">\t<span class=\"keyword\">if</span> (packed) &#123;</div><div class=\"line\">\t\tHT_SET_DATA_ADDR(ht, pemalloc(HT_SIZE(ht), (ht)-&gt;u.flags &amp; HASH_FLAG_PERSISTENT));</div><div class=\"line\">\t\t(ht)-&gt;u.flags |= HASH_FLAG_INITIALIZED | HASH_FLAG_PACKED;</div><div class=\"line\">\t\tHT_HASH_RESET_PACKED(ht);</div><div class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t(ht)-&gt;nTableMask = -(ht)-&gt;nTableSize;</div><div class=\"line\">\t\tHT_SET_DATA_ADDR(ht, pemalloc(HT_SIZE(ht), (ht)-&gt;u.flags &amp; HASH_FLAG_PERSISTENT));</div><div class=\"line\">\t\t(ht)-&gt;u.flags |= HASH_FLAG_INITIALIZED;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (EXPECTED(ht-&gt;nTableMask == <span class=\"number\">-8</span>)) &#123;</div><div class=\"line\">\t\t\tBucket *arData = ht-&gt;arData;</div><div class=\"line\"></div><div class=\"line\">\t\t\tHT_HASH_EX(arData, <span class=\"number\">-8</span>) = <span class=\"number\">-1</span>;</div><div class=\"line\">\t\t\tHT_HASH_EX(arData, <span class=\"number\">-7</span>) = <span class=\"number\">-1</span>;</div><div class=\"line\">\t\t\tHT_HASH_EX(arData, <span class=\"number\">-6</span>) = <span class=\"number\">-1</span>;</div><div class=\"line\">\t\t\tHT_HASH_EX(arData, <span class=\"number\">-5</span>) = <span class=\"number\">-1</span>;</div><div class=\"line\">\t\t\tHT_HASH_EX(arData, <span class=\"number\">-4</span>) = <span class=\"number\">-1</span>;</div><div class=\"line\">\t\t\tHT_HASH_EX(arData, <span class=\"number\">-3</span>) = <span class=\"number\">-1</span>;</div><div class=\"line\">\t\t\tHT_HASH_EX(arData, <span class=\"number\">-2</span>) = <span class=\"number\">-1</span>;</div><div class=\"line\">\t\t\tHT_HASH_EX(arData, <span class=\"number\">-1</span>) = <span class=\"number\">-1</span>;</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\tHT_HASH_RESET(ht);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>分配具体的内存</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> HT_SIZE_EX(nTableSize, nTableMask) \\</span></div><div class=\"line\">\t(HT_DATA_SIZE((nTableSize)) + HT_HASH_SIZE((nTableMask)))</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">#define HT_HASH_SIZE(nTableMask) \\</div><div class=\"line\">\t(((size_t)(uint32_t)-(int32_t)(nTableMask)) * sizeof(uint32_t))</div><div class=\"line\"></div><div class=\"line\">#define HT_DATA_SIZE(nTableSize) \\</div><div class=\"line\">\t((size_t)(nTableSize) * sizeof(Bucket))</div></pre></td></tr></table></figure>\n<p>可以看到在分配具体分配内存的时候会分配 nTableSize<em>(Bucket+uint32_t)大小的内存。<br>讲道理只需要分配nTableSize</em>Bucket大小内存就可以了,为什么会多余出来 nTableSize<em>uint32_t内存呢?<br>因为nTableSize</em>uint32_t就是<code>映射表</code>所占内存大小。所以说Bucket会和映射表一次申请内存。<br>写完成写入操作以后会将<code>*arData</code> 指向第一个Bucket。</p>\n<p>具体在内存里的结果如图所示:<br><img src=\"/photo/img/php数组实现/hashtable.png\" alt=\"image\"></p>\n<p><code>映射表</code>在初始化的时候所有值都是-1,只有在被赋值时候会写入对应<code>Bucket</code>所在链表的偏移量。;<br>ht-&gt;arData 指向第一个<code>Bucket</code>的位置,在赋值的时候会按照列表顺序,将值写入<code>Bucket</code>的value里,然后会根据<br>映射函数算出值当做偏移量找到对应<code>映射表</code>的元素,然后将当前<code>Bucket</code>写入此元素。</p>\n<p>ps nTableSize 为2的次方倍。</p>\n<h2 id=\"冲突\"><a href=\"#冲突\" class=\"headerlink\" title=\"冲突\"></a>冲突</h2><p>如果<code>nIndex = ket-&gt;h | nTableMask</code> 算出来的值冲突了怎么办? 首先<code>映射表</code>的每个元素不是链表,所以导致无法存储多个元素。<br>在php中是这样处理冲突的:<br>首先<code>映射表</code>的所有元素初始化值为 -1 ,当前<br>如果用冲突会将新算出来的值对应的<code>Bucket</code>覆盖原来旧的<code>Bucket</code>,然后将旧的<code>Bucket</code>迁移到新的<code>Bucket</code>,<br>并将旧的<code>Bucket</code>的u2.next(默认为-1) 指向新<code>Bucket</code>。</p>\n<p>如图<br><img src=\"/photo/img/php数组实现/链表冲突.png\" alt=\"image\"></p>\n<h2 id=\"查找\"><a href=\"#查找\" class=\"headerlink\" title=\"查找\"></a>查找</h2><p>php再查找一个数组元素是,首先会根据其key 获取到计算后hash值’ket-&gt;h’,然后根据映射函数算出当前元素在<code>映射表</code>中的偏移量,利用当前位置+偏移量找到<code>映射表</code>的元素,再根据其内的偏量找到对应<code>Bucket</code>链表的首个元素位置,最后遍历该链表核对key值,找到对应的值。</p>\n<p>具体实现函数:<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> zend_always_inline Bucket *<span class=\"title\">zend_hash_find_bucket</span><span class=\"params\">(<span class=\"keyword\">const</span> HashTable *ht, zend_string *key)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\tzend_ulong h;</div><div class=\"line\">\t<span class=\"keyword\">uint32_t</span> nIndex;</div><div class=\"line\">\t<span class=\"keyword\">uint32_t</span> idx;</div><div class=\"line\">\tBucket *p, *arData;</div><div class=\"line\"></div><div class=\"line\">\th = zend_string_hash_val(key);</div><div class=\"line\">\tarData = ht-&gt;arData;</div><div class=\"line\">\tnIndex = h | ht-&gt;nTableMask;</div><div class=\"line\">\tidx = HT_HASH_EX(arData, nIndex);</div><div class=\"line\">\t<span class=\"keyword\">while</span> (EXPECTED(idx != HT_INVALID_IDX)) &#123;</div><div class=\"line\">\t\tp = HT_HASH_TO_BUCKET_EX(arData, idx);</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (EXPECTED(p-&gt;key == key)) &#123; <span class=\"comment\">/* check for the same interned string */</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> p;</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (EXPECTED(p-&gt;h == h) &amp;&amp;</div><div class=\"line\">\t\t     EXPECTED(p-&gt;key) &amp;&amp;</div><div class=\"line\">\t\t     EXPECTED(ZSTR_LEN(p-&gt;key) == ZSTR_LEN(key)) &amp;&amp;</div><div class=\"line\">\t\t     EXPECTED(<span class=\"built_in\">memcmp</span>(ZSTR_VAL(p-&gt;key), ZSTR_VAL(key), ZSTR_LEN(key)) == <span class=\"number\">0</span>)) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> p;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tidx = Z_NEXT(p-&gt;val);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"扩容\"><a href=\"#扩容\" class=\"headerlink\" title=\"扩容\"></a>扩容</h2><p>数组的容量在初始化的时候已经确定了大小,就是nTableSize。当然映射函数也是根据 nTableMask 来计算的。<br>所以我们扩容时候必须重新计算索引,也就是<code>映射表</code>里的值。<br>具体扩容规则:<br>首先当需要扩容时,会计算当前<code>Bucket</code>链表里删除元素数量占总表元素数量的比例,如果没有超过阈值则申请分配一个原来数组大小两倍的新素组,把元素复制到新数组上,然后重新建立索引。</p>\n<p>阈值判断:<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ht-&gt;nNumUsed &gt; ht-&gt;nNumOfElements + (ht-&gt;nNumOfElements &gt;&gt; <span class=\"number\">5</span></div></pre></td></tr></table></figure></p>\n<p>处理过程:<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> ZEND_FASTCALL <span class=\"title\">zend_hash_do_resize</span><span class=\"params\">(HashTable *ht)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\"></div><div class=\"line\">\tIS_CONSISTENT(ht);</div><div class=\"line\">\tHT_ASSERT(GC_REFCOUNT(ht) == <span class=\"number\">1</span>);</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> (ht-&gt;nNumUsed &gt; ht-&gt;nNumOfElements + (ht-&gt;nNumOfElements &gt;&gt; <span class=\"number\">5</span>)) &#123; <span class=\"comment\">/* additional term is there to amortize the cost of compaction */</span></div><div class=\"line\">\t\tHANDLE_BLOCK_INTERRUPTIONS();</div><div class=\"line\">\t\tzend_hash_rehash(ht);</div><div class=\"line\">\t\tHANDLE_UNBLOCK_INTERRUPTIONS();</div><div class=\"line\">\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (ht-&gt;nTableSize &lt; HT_MAX_SIZE) &#123;\t<span class=\"comment\">/* Let's double the table size */</span></div><div class=\"line\">\t\t<span class=\"keyword\">void</span> *new_data, *old_data = HT_GET_DATA_ADDR(ht);</div><div class=\"line\">\t\t<span class=\"keyword\">uint32_t</span> nSize = ht-&gt;nTableSize + ht-&gt;nTableSize;</div><div class=\"line\">\t\tBucket *old_buckets = ht-&gt;arData;</div><div class=\"line\"></div><div class=\"line\">\t\tHANDLE_BLOCK_INTERRUPTIONS();</div><div class=\"line\">\t\tnew_data = pemalloc(HT_SIZE_EX(nSize, -nSize), ht-&gt;u.flags &amp; HASH_FLAG_PERSISTENT);</div><div class=\"line\">\t\tht-&gt;nTableSize = nSize;</div><div class=\"line\">\t\tht-&gt;nTableMask = -ht-&gt;nTableSize;</div><div class=\"line\">\t\tHT_SET_DATA_ADDR(ht, new_data);</div><div class=\"line\">\t\t<span class=\"built_in\">memcpy</span>(ht-&gt;arData, old_buckets, <span class=\"keyword\">sizeof</span>(Bucket) * ht-&gt;nNumUsed);</div><div class=\"line\">\t\tpefree(old_data, ht-&gt;u.flags &amp; HASH_FLAG_PERSISTENT);</div><div class=\"line\">\t\tzend_hash_rehash(ht);</div><div class=\"line\">\t\tHANDLE_UNBLOCK_INTERRUPTIONS();</div><div class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\tzend_error_noreturn(E_ERROR, <span class=\"string\">\"Possible integer overflow in memory allocation (%zu * %zu + %zu)\"</span>, ht-&gt;nTableSize * <span class=\"number\">2</span>, <span class=\"keyword\">sizeof</span>(Bucket) + <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">uint32_t</span>), <span class=\"keyword\">sizeof</span>(Bucket));</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在处理的过程中还会把已经删除的<code>Bucket</code>给删除。</p>\n<p>具体的操作在<code>zend_hash.c</code>文件里。<br>如果超过阈值,则会把已经删除<code>Bucket</code>移除,然后把又有后边的元素往前移动,不上空缺的<code>Bucket</code>,当然索引也会重建。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://www.cnblogs.com/52fhy/p/5007456.html\" target=\"_blank\" rel=\"noopener\">time33 </a></li>\n<li><a href=\"https://github.com/pangudashu/php7-internal/blob/master/2/zval.md\" target=\"_blank\" rel=\"noopener\">2.1 变量的内部实现</a></li>\n</ul>\n"},{"title":"php的引用","date":"2018-08-12T14:18:07.000Z","_content":"\n### &\n\n&是php中的引用,他并不一种独立的数据类型,而是指向其他数据类型的数据结构,和C语言的指针类似。\n\n具体作用为:当我们修改引用类型变量是,其修改的将作用于实际引用的变量上。\n\n如果当我们使用&符号生成一个引用变量时,首先会为&操作生成一个zend_reference结构,zend_reference就是引用\n类型的结构体,他内嵌一个zval,然后此结构的体zval的value指向原来zval的value上。然后将原来zval的变量\n类型变为IS_REFERENCE,原来zval的value执行新创建zend_reference结构。\n索引&的作用就是新生成zend_reference,然后将其指向原来的zval的value上,顺便把原来zval的变量类型变化为引用类型。\n\n```c\nstruct _zend_reference {\n    zend_refcondted_h gc;\n    zval              val;  指向原来的value.\n};\n```\n\n### 举个栗子\n\n```\n    $a = 'test'; //步骤1\n    $b = &$a;    //步骤2\n```\n\n**步骤1**\n\n现在`$a = ''test`是他们的数据结构指向为:\n\n![image](/photo/img/php引用/未引用前.png)\n\n此时数据结构,一直指针指向是这个样子。\n\n**步骤2**\n\n![image](/photo/img/php引用/引用后.png)\n\n\n也就是说PHP的引用在使用后新生成一个引用类型机构,然后将引用类型结构指向越来的value,最后将原来zval的value\n指向新生成的结构体,并将其变量类型变为引用类型,IS_REFERENCE。当然随之改变的还有计数。\n","source":"_posts/php的&符号.md","raw":"---\ntitle: 'php的引用'\ndate: 2018-08-12 22:18:07\ntags:\n---\n\n### &\n\n&是php中的引用,他并不一种独立的数据类型,而是指向其他数据类型的数据结构,和C语言的指针类似。\n\n具体作用为:当我们修改引用类型变量是,其修改的将作用于实际引用的变量上。\n\n如果当我们使用&符号生成一个引用变量时,首先会为&操作生成一个zend_reference结构,zend_reference就是引用\n类型的结构体,他内嵌一个zval,然后此结构的体zval的value指向原来zval的value上。然后将原来zval的变量\n类型变为IS_REFERENCE,原来zval的value执行新创建zend_reference结构。\n索引&的作用就是新生成zend_reference,然后将其指向原来的zval的value上,顺便把原来zval的变量类型变化为引用类型。\n\n```c\nstruct _zend_reference {\n    zend_refcondted_h gc;\n    zval              val;  指向原来的value.\n};\n```\n\n### 举个栗子\n\n```\n    $a = 'test'; //步骤1\n    $b = &$a;    //步骤2\n```\n\n**步骤1**\n\n现在`$a = ''test`是他们的数据结构指向为:\n\n![image](/photo/img/php引用/未引用前.png)\n\n此时数据结构,一直指针指向是这个样子。\n\n**步骤2**\n\n![image](/photo/img/php引用/引用后.png)\n\n\n也就是说PHP的引用在使用后新生成一个引用类型机构,然后将引用类型结构指向越来的value,最后将原来zval的value\n指向新生成的结构体,并将其变量类型变为引用类型,IS_REFERENCE。当然随之改变的还有计数。\n","slug":"php的&符号","published":1,"updated":"2018-08-12T15:11:33.480Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlz6uwh0000f0uww4zefrgxr","content":"<h3 id=\"amp\"><a href=\"#amp\" class=\"headerlink\" title=\"&amp;\"></a>&amp;</h3><p>&amp;是php中的引用,他并不一种独立的数据类型,而是指向其他数据类型的数据结构,和C语言的指针类似。</p>\n<p>具体作用为:当我们修改引用类型变量是,其修改的将作用于实际引用的变量上。</p>\n<p>如果当我们使用&amp;符号生成一个引用变量时,首先会为&amp;操作生成一个zend_reference结构,zend_reference就是引用<br>类型的结构体,他内嵌一个zval,然后此结构的体zval的value指向原来zval的value上。然后将原来zval的变量<br>类型变为IS_REFERENCE,原来zval的value执行新创建zend_reference结构。<br>索引&amp;的作用就是新生成zend_reference,然后将其指向原来的zval的value上,顺便把原来zval的变量类型变化为引用类型。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">struct</span> _zend_reference &#123;</div><div class=\"line\">    zend_refcondted_h gc;</div><div class=\"line\">    zval              val;  指向原来的value.</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h3 id=\"举个栗子\"><a href=\"#举个栗子\" class=\"headerlink\" title=\"举个栗子\"></a>举个栗子</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$a = &apos;test&apos;; //步骤1</div><div class=\"line\">$b = &amp;$a;    //步骤2</div></pre></td></tr></table></figure>\n<p><strong>步骤1</strong></p>\n<p>现在<code>$a = &#39;&#39;test</code>是他们的数据结构指向为:</p>\n<p><img src=\"/photo/img/php引用/未引用前.png\" alt=\"image\"></p>\n<p>此时数据结构,一直指针指向是这个样子。</p>\n<p><strong>步骤2</strong></p>\n<p><img src=\"/photo/img/php引用/引用后.png\" alt=\"image\"></p>\n<p>也就是说PHP的引用在使用后新生成一个引用类型机构,然后将引用类型结构指向越来的value,最后将原来zval的value<br>指向新生成的结构体,并将其变量类型变为引用类型,IS_REFERENCE。当然随之改变的还有计数。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"amp\"><a href=\"#amp\" class=\"headerlink\" title=\"&amp;\"></a>&amp;</h3><p>&amp;是php中的引用,他并不一种独立的数据类型,而是指向其他数据类型的数据结构,和C语言的指针类似。</p>\n<p>具体作用为:当我们修改引用类型变量是,其修改的将作用于实际引用的变量上。</p>\n<p>如果当我们使用&amp;符号生成一个引用变量时,首先会为&amp;操作生成一个zend_reference结构,zend_reference就是引用<br>类型的结构体,他内嵌一个zval,然后此结构的体zval的value指向原来zval的value上。然后将原来zval的变量<br>类型变为IS_REFERENCE,原来zval的value执行新创建zend_reference结构。<br>索引&amp;的作用就是新生成zend_reference,然后将其指向原来的zval的value上,顺便把原来zval的变量类型变化为引用类型。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">struct</span> _zend_reference &#123;</div><div class=\"line\">    zend_refcondted_h gc;</div><div class=\"line\">    zval              val;  指向原来的value.</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h3 id=\"举个栗子\"><a href=\"#举个栗子\" class=\"headerlink\" title=\"举个栗子\"></a>举个栗子</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$a = &apos;test&apos;; //步骤1</div><div class=\"line\">$b = &amp;$a;    //步骤2</div></pre></td></tr></table></figure>\n<p><strong>步骤1</strong></p>\n<p>现在<code>$a = &#39;&#39;test</code>是他们的数据结构指向为:</p>\n<p><img src=\"/photo/img/php引用/未引用前.png\" alt=\"image\"></p>\n<p>此时数据结构,一直指针指向是这个样子。</p>\n<p><strong>步骤2</strong></p>\n<p><img src=\"/photo/img/php引用/引用后.png\" alt=\"image\"></p>\n<p>也就是说PHP的引用在使用后新生成一个引用类型机构,然后将引用类型结构指向越来的value,最后将原来zval的value<br>指向新生成的结构体,并将其变量类型变为引用类型,IS_REFERENCE。当然随之改变的还有计数。</p>\n"},{"title":"php闭包","date":"2018-08-25T06:50:55.000Z","_content":"在看guzzle包的时候看大到了一段有意思的代码, 简化以后类似于下边:\n\n```php\n<?php\n/**\n* \n*/\nclass test \n{\n\tpublic  $handler;\n\tpublic function __construct(callable $handler = null)\n\t{\n\t\t$this->handler = $handler;\n\t}\n\n\tpublic static function create(callable $handler)\n\t{\n\t\treturn new self($handler);\n\t}\n\n\tpublic function __invoke($request,$options)\n\t{\n\t\t$func = $this->handler;\n\t    return $func($request, $options);\n\t}\n\n\n\tpublic function test1()\n\t{\n\t\treturn [$this, 'exec1'];\n\t}\n\n\tpublic function exec1($a,$b)\n\t{\n\t\techo ($a+$b);\n\t}\n}\n\n$test = new test();\n\n\n\n$obj = test::create($test->test1());\n\n$obj(1,4);\n\n\n```\n\n- php文档是这样描述闭包的\n\n\n`PHP是将函数以string形式传递的。 可以使用任何内置或用户自定义函数，但除了语言结构例如：array()，echo，empty()，eval()，exit()，isset()，list()，print 或 unset()。\n \n 一个已实例化的 object 的方法被作为 array 传递，下标 0 包含该 object，下标 1 包含方法名。 在同一个类里可以访问 protected 和 private 方法。\n \n 静态类方法也可不经实例化该类的对象而传递，只要在下标 0 中包含类名而不是对象。自 PHP 5.2.3 起，也可以传递 'ClassName::methodName'。\n \n 除了普通的用户自定义函数外，也可传递 匿名函数 给回调参数。`\n \n 除了上边的这些可以作为callable参数的类型,还有一个是拥有__invoke()的实例化对象。\n\n\n所以实例化的对象可以使用 `[$obj,'functionName']` 当做闭包去传递。\n`$obj = test::create($test->test1());`将我们的`test1`方法赋值给新实例化的对象里。\n\n\n- 魔术方法`__invoke()`表示:\n\n当尝试以调用函数的方式调用一个对象时，__invoke() 方法会被自动调用。\n\n\n所以我们调用`$obj()`函数时会调用到__invoke()里,最后调用到我们一开始注册的函数。\n\n\n\nps\n```\nclass test \n{\n\tpublic  $handler;\n\tpublic function __construct(callable $handler = null)\n\t{\n\t\t$this->handler = $handler;\n\t}\n\n\tpublic static function create(callable $handler)\n\t{\n\t\treturn new self($handler);\n\t}\n\n\tpublic function __invoke($request,$options)\n\t{\n\t\t$func = $this->handler;\n\t    return $func($request, $options);\n\t}\n\n\n\tpublic function test1()\n\t{\n\t\treturn [$this, 'exec1'];\n\t}\n\n\tpublic function exec1($a,$b)\n\t{\n\t\techo ($a+$b);\n\t}\n}\n\n$test = new test();\n\n\n\n$blj = test::create($test->test1());\n$blj(1,4);\n//测试对象是否可以作为callable类型参数\n\n\n$test = test::create(new test());\n```","source":"_posts/php闭包.md","raw":"---\ntitle: php闭包\ndate: 2018-08-25 14:50:55\ntags:\n---\n在看guzzle包的时候看大到了一段有意思的代码, 简化以后类似于下边:\n\n```php\n<?php\n/**\n* \n*/\nclass test \n{\n\tpublic  $handler;\n\tpublic function __construct(callable $handler = null)\n\t{\n\t\t$this->handler = $handler;\n\t}\n\n\tpublic static function create(callable $handler)\n\t{\n\t\treturn new self($handler);\n\t}\n\n\tpublic function __invoke($request,$options)\n\t{\n\t\t$func = $this->handler;\n\t    return $func($request, $options);\n\t}\n\n\n\tpublic function test1()\n\t{\n\t\treturn [$this, 'exec1'];\n\t}\n\n\tpublic function exec1($a,$b)\n\t{\n\t\techo ($a+$b);\n\t}\n}\n\n$test = new test();\n\n\n\n$obj = test::create($test->test1());\n\n$obj(1,4);\n\n\n```\n\n- php文档是这样描述闭包的\n\n\n`PHP是将函数以string形式传递的。 可以使用任何内置或用户自定义函数，但除了语言结构例如：array()，echo，empty()，eval()，exit()，isset()，list()，print 或 unset()。\n \n 一个已实例化的 object 的方法被作为 array 传递，下标 0 包含该 object，下标 1 包含方法名。 在同一个类里可以访问 protected 和 private 方法。\n \n 静态类方法也可不经实例化该类的对象而传递，只要在下标 0 中包含类名而不是对象。自 PHP 5.2.3 起，也可以传递 'ClassName::methodName'。\n \n 除了普通的用户自定义函数外，也可传递 匿名函数 给回调参数。`\n \n 除了上边的这些可以作为callable参数的类型,还有一个是拥有__invoke()的实例化对象。\n\n\n所以实例化的对象可以使用 `[$obj,'functionName']` 当做闭包去传递。\n`$obj = test::create($test->test1());`将我们的`test1`方法赋值给新实例化的对象里。\n\n\n- 魔术方法`__invoke()`表示:\n\n当尝试以调用函数的方式调用一个对象时，__invoke() 方法会被自动调用。\n\n\n所以我们调用`$obj()`函数时会调用到__invoke()里,最后调用到我们一开始注册的函数。\n\n\n\nps\n```\nclass test \n{\n\tpublic  $handler;\n\tpublic function __construct(callable $handler = null)\n\t{\n\t\t$this->handler = $handler;\n\t}\n\n\tpublic static function create(callable $handler)\n\t{\n\t\treturn new self($handler);\n\t}\n\n\tpublic function __invoke($request,$options)\n\t{\n\t\t$func = $this->handler;\n\t    return $func($request, $options);\n\t}\n\n\n\tpublic function test1()\n\t{\n\t\treturn [$this, 'exec1'];\n\t}\n\n\tpublic function exec1($a,$b)\n\t{\n\t\techo ($a+$b);\n\t}\n}\n\n$test = new test();\n\n\n\n$blj = test::create($test->test1());\n$blj(1,4);\n//测试对象是否可以作为callable类型参数\n\n\n$test = test::create(new test());\n```","slug":"php闭包","published":1,"updated":"2018-08-25T08:24:48.893Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlz6uwh2000h0uwws1kuaxm2","content":"<p>在看guzzle包的时候看大到了一段有意思的代码, 简化以后类似于下边:</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">* </div><div class=\"line\">*/</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test</span> </span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">public</span>  $handler;</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">(callable $handler = null)</span></span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">$this</span>-&gt;handler = $handler;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">create</span><span class=\"params\">(callable $handler)</span></span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"keyword\">self</span>($handler);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__invoke</span><span class=\"params\">($request,$options)</span></span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t$func = <span class=\"keyword\">$this</span>-&gt;handler;</div><div class=\"line\">\t    <span class=\"keyword\">return</span> $func($request, $options);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test1</span><span class=\"params\">()</span></span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> [<span class=\"keyword\">$this</span>, <span class=\"string\">'exec1'</span>];</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">exec1</span><span class=\"params\">($a,$b)</span></span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">echo</span> ($a+$b);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">$test = <span class=\"keyword\">new</span> test();</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">$obj = test::create($test-&gt;test1());</div><div class=\"line\"></div><div class=\"line\">$obj(<span class=\"number\">1</span>,<span class=\"number\">4</span>);</div></pre></td></tr></table></figure>\n<ul>\n<li>php文档是这样描述闭包的</li>\n</ul>\n<p>`PHP是将函数以string形式传递的。 可以使用任何内置或用户自定义函数，但除了语言结构例如：array()，echo，empty()，eval()，exit()，isset()，list()，print 或 unset()。</p>\n<p> 一个已实例化的 object 的方法被作为 array 传递，下标 0 包含该 object，下标 1 包含方法名。 在同一个类里可以访问 protected 和 private 方法。</p>\n<p> 静态类方法也可不经实例化该类的对象而传递，只要在下标 0 中包含类名而不是对象。自 PHP 5.2.3 起，也可以传递 ‘ClassName::methodName’。</p>\n<p> 除了普通的用户自定义函数外，也可传递 匿名函数 给回调参数。`</p>\n<p> 除了上边的这些可以作为callable参数的类型,还有一个是拥有__invoke()的实例化对象。</p>\n<p>所以实例化的对象可以使用 <code>[$obj,&#39;functionName&#39;]</code> 当做闭包去传递。<br><code>$obj = test::create($test-&gt;test1());</code>将我们的<code>test1</code>方法赋值给新实例化的对象里。</p>\n<ul>\n<li>魔术方法<code>__invoke()</code>表示:</li>\n</ul>\n<p>当尝试以调用函数的方式调用一个对象时，__invoke() 方法会被自动调用。</p>\n<p>所以我们调用<code>$obj()</code>函数时会调用到__invoke()里,最后调用到我们一开始注册的函数。</p>\n<p>ps<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\">class test </div><div class=\"line\">&#123;</div><div class=\"line\">\tpublic  $handler;</div><div class=\"line\">\tpublic function __construct(callable $handler = null)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t$this-&gt;handler = $handler;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tpublic static function create(callable $handler)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\treturn new self($handler);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tpublic function __invoke($request,$options)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t$func = $this-&gt;handler;</div><div class=\"line\">\t    return $func($request, $options);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">\tpublic function test1()</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\treturn [$this, &apos;exec1&apos;];</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tpublic function exec1($a,$b)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\techo ($a+$b);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">$test = new test();</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">$blj = test::create($test-&gt;test1());</div><div class=\"line\">$blj(1,4);</div><div class=\"line\">//测试对象是否可以作为callable类型参数</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">$test = test::create(new test());</div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>在看guzzle包的时候看大到了一段有意思的代码, 简化以后类似于下边:</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">* </div><div class=\"line\">*/</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">test</span> </span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">public</span>  $handler;</div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">(callable $handler = null)</span></span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">$this</span>-&gt;handler = $handler;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">create</span><span class=\"params\">(callable $handler)</span></span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"keyword\">self</span>($handler);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__invoke</span><span class=\"params\">($request,$options)</span></span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t$func = <span class=\"keyword\">$this</span>-&gt;handler;</div><div class=\"line\">\t    <span class=\"keyword\">return</span> $func($request, $options);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test1</span><span class=\"params\">()</span></span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> [<span class=\"keyword\">$this</span>, <span class=\"string\">'exec1'</span>];</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">exec1</span><span class=\"params\">($a,$b)</span></span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">echo</span> ($a+$b);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">$test = <span class=\"keyword\">new</span> test();</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">$obj = test::create($test-&gt;test1());</div><div class=\"line\"></div><div class=\"line\">$obj(<span class=\"number\">1</span>,<span class=\"number\">4</span>);</div></pre></td></tr></table></figure>\n<ul>\n<li>php文档是这样描述闭包的</li>\n</ul>\n<p>`PHP是将函数以string形式传递的。 可以使用任何内置或用户自定义函数，但除了语言结构例如：array()，echo，empty()，eval()，exit()，isset()，list()，print 或 unset()。</p>\n<p> 一个已实例化的 object 的方法被作为 array 传递，下标 0 包含该 object，下标 1 包含方法名。 在同一个类里可以访问 protected 和 private 方法。</p>\n<p> 静态类方法也可不经实例化该类的对象而传递，只要在下标 0 中包含类名而不是对象。自 PHP 5.2.3 起，也可以传递 ‘ClassName::methodName’。</p>\n<p> 除了普通的用户自定义函数外，也可传递 匿名函数 给回调参数。`</p>\n<p> 除了上边的这些可以作为callable参数的类型,还有一个是拥有__invoke()的实例化对象。</p>\n<p>所以实例化的对象可以使用 <code>[$obj,&#39;functionName&#39;]</code> 当做闭包去传递。<br><code>$obj = test::create($test-&gt;test1());</code>将我们的<code>test1</code>方法赋值给新实例化的对象里。</p>\n<ul>\n<li>魔术方法<code>__invoke()</code>表示:</li>\n</ul>\n<p>当尝试以调用函数的方式调用一个对象时，__invoke() 方法会被自动调用。</p>\n<p>所以我们调用<code>$obj()</code>函数时会调用到__invoke()里,最后调用到我们一开始注册的函数。</p>\n<p>ps<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\">class test </div><div class=\"line\">&#123;</div><div class=\"line\">\tpublic  $handler;</div><div class=\"line\">\tpublic function __construct(callable $handler = null)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t$this-&gt;handler = $handler;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tpublic static function create(callable $handler)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\treturn new self($handler);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tpublic function __invoke($request,$options)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t$func = $this-&gt;handler;</div><div class=\"line\">\t    return $func($request, $options);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">\tpublic function test1()</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\treturn [$this, &apos;exec1&apos;];</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tpublic function exec1($a,$b)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\techo ($a+$b);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">$test = new test();</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">$blj = test::create($test-&gt;test1());</div><div class=\"line\">$blj(1,4);</div><div class=\"line\">//测试对象是否可以作为callable类型参数</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">$test = test::create(new test());</div></pre></td></tr></table></figure></p>\n"},{"title":"python学习笔记一","date":"2018-07-06T09:43:01.000Z","_content":"\n在php里数组分为索引数组和关联数组\n但是在python里这两者数组确实不同的数据类型\nlist:\ndata = [1,2,3,4,5]\n字典\n{data:1}","source":"_posts/python学习笔记一.md","raw":"---\ntitle: python学习笔记一\ndate: 2018-07-06 17:43:01\ntags:\n---\n\n在php里数组分为索引数组和关联数组\n但是在python里这两者数组确实不同的数据类型\nlist:\ndata = [1,2,3,4,5]\n字典\n{data:1}","slug":"python学习笔记一","published":1,"updated":"2018-08-19T12:31:04.532Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlz6uwh4000i0uww21kvk65h","content":"<p>在php里数组分为索引数组和关联数组<br>但是在python里这两者数组确实不同的数据类型<br>list:<br>data = [1,2,3,4,5]<br>字典<br>{data:1}</p>\n","site":{"data":{}},"excerpt":"","more":"<p>在php里数组分为索引数组和关联数组<br>但是在python里这两者数组确实不同的数据类型<br>list:<br>data = [1,2,3,4,5]<br>字典<br>{data:1}</p>\n"},{"title":"solr-从控制页面删除数据","date":"2018-06-21T12:21:18.000Z","_content":"\n# 1.xml\n\n![image](/photo/img/2018-06-21/DingTalk20180621202319.png)\n\n```\n<delete><query>*:*</query></delete>\n<commit/>\n```","source":"_posts/solr-从控制页面删除数据.md","raw":"---\ntitle: solr-从控制页面删除数据\ndate: 2018-06-21 20:21:18\ntags:\n---\n\n# 1.xml\n\n![image](/photo/img/2018-06-21/DingTalk20180621202319.png)\n\n```\n<delete><query>*:*</query></delete>\n<commit/>\n```","slug":"solr-从控制页面删除数据","published":1,"updated":"2018-06-21T12:30:05.551Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlz6uwh4000j0uwwwqtqv3bb","content":"<h1 id=\"1-xml\"><a href=\"#1-xml\" class=\"headerlink\" title=\"1.xml\"></a>1.xml</h1><p><img src=\"/photo/img/2018-06-21/DingTalk20180621202319.png\" alt=\"image\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;delete&gt;&lt;query&gt;*:*&lt;/query&gt;&lt;/delete&gt;</div><div class=\"line\">&lt;commit/&gt;</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"1-xml\"><a href=\"#1-xml\" class=\"headerlink\" title=\"1.xml\"></a>1.xml</h1><p><img src=\"/photo/img/2018-06-21/DingTalk20180621202319.png\" alt=\"image\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;delete&gt;&lt;query&gt;*:*&lt;/query&gt;&lt;/delete&gt;</div><div class=\"line\">&lt;commit/&gt;</div></pre></td></tr></table></figure>"},{"title":"swagger","date":"2018-08-06T07:30:13.000Z","_content":"\nswagger 是什么鬼? \nswagger像是个接口生成、管理、mock、测试的框架。主要功能:\n - 支持API自动生成同步的在线文档\n - 这些文档可用于项目内部API审核\n - 方便测试人员了解API\n - 这些文档可作为客户产品文档的一部分进行发布\n - 可以mock接口方便调试\n支持API规范生成代码，生成的客户端和服务器端骨架代码可以加速开发和测试速度\n## \nswagger-ui 一个是一个管理接口的服务,它可以根据swagger.json模拟接口返回。\n### 搭建swagger-ui\n\n克隆swagger-ui\n\n`git clone https://github.com/swagger-api/swagger-ui.git`\n\n配置nginx 服务\n\n```\n server {\n        listen       8090;\n        server_name  www.swagger-ui.com;\n        autoindex on;\n        #charset koi8-r;\n\n       # access_log  logs/host.access.log  main;\n        root  /Users/lijian/Desktop/code/web_code/swagger/swagger-ui/dist;\n        location / {\n\n            index  index.php index.html index.htm;\n            try_files $uri $uri/ /index.php?$query_string;\n        }\n\n        #error_page  404              /404.html;\n\n        # redirect server error pages to the static page /50x.html\n        #\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html {\n            root   html;\n        }\n        location ~ \\.php$ {\n\n            fastcgi_pass   127.0.0.1:9000;\n            fastcgi_index  index.php;\n            fastcgi_split_path_info    ^(.+\\.php)(/.+)$;\n            fastcgi_param PATH_TRANSLATED $document_root$fastcgi_path_info;\n    fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;\n            include        fastcgi_params;\n        }\n\n    }\n```\n\n重启NGINX \n`nginx -s reload`\n\n样子如下:\n\n![image](/photo/img/swagger-ui/WX20180807-095949.png)\n\n\n## swagger.json\n\nswagger.json,swagger-ui能够将swagger.json解析为对应的可处理的接口文档。\n\n效果如上图所示。\n最终要的一点在于 `http://localhost:8091/swagger.json`该url为被解析的json地址。\n\n当然如果我们需要管理不同项目的项目,可以单独配置个服务用来管理swagger.json。\n\n\n## swagger-php\n\ngithub 地址: `https://github.com/zircote/swagger-php`\n\n首先我们需要在项目里引入swagger-php 扩展包。\n\n`composer global require zircote/swagger-php`\n\n按照swagger文档写swagger备注:\neg:\n\n```SWG\n    /**\n     * @SWG\\Post(\n     *     path=\"/guestbook/appmsg\",\n     *     summary=\"访客留言\",\n     *     tags={\"new\", \"guests\"},\n     *     description=\"访客留言\",\n     *     operationId=\"appmsg\",\n     *     @SWG\\Parameter(\n     *         description=\"msg\",\n     *         format=\"string\",\n     *         in=\"formData\",\n     *         name=\"msg\",\n     *         required=true,\n     *         type=\"string\",\n     *     ),\n     *     @SWG\\Parameter(\n     *         description=\"email\",\n     *         format=\"string\",\n     *         in=\"formData\",\n     *         name=\"email\",\n     *         required=true,\n     *         type=\"string\",\n     *\n     *     ),\n     *     consumes={\"multipart/form-data\", \"application/x-www-form-urlencoded\"},\n     *     produces={\"application/json\"},\n     *     @SWG\\Response(\n     *         response=\"200\",\n     *         description=\"返回成功\",\n     *     ),\n     * )\n     *\n     */\n    \n    /**\n     *   @SWG\\Get(\n     *     path=\"/get/feedback\",\n     *     summary=\"留言表\",\n     *     tags={\"getList\"},\n     *     descriptionId=\"appmsglist\",\n     *     @SWG\\Parameter(\n     *          description=\"Id\",\n     *          format=\"integer\",\n     *          in=\"formData\",\n     *          name=\"user_id\",\n     *          required=\"true\",\n     *          type=\"integer\"\n        *      ),\n     *      @SWG\\Parameter(\n     *          description=\"phone\",\n     *          format=\"integer\",\n     *          in=\"formData\",\n     *          name=\"user_id\",\n     *          required=\"true\",\n     *          type=\"integer\"\n     *        ),\n     *     consumes={\"multipart/form-data\", \"application/x-www-form-urlencode\"},\n     *     produces={\"application/json\"},\n     *     @SWG\\Response(\n     *        response=\"200\",\n     *        description=\"返回成功\",\n     *     )\n     * )\n     *\n     */\n```\n\n写完以后运行:\n\n`./vendor/zircote/swagger-php/bin/swagger app/Business/Hera/HeraMockApi.php -o ./../../swagger_json/rrc/swagger.json\n`\n第一个为swagger.json的生成器,第二个为目标文件,第三个为生成文件。\n\n然后我们在swagger-ui 引入生成的json即可。\n\n\n","source":"_posts/swagger.md","raw":"---\ntitle: swagger\ndate: 2018-08-06 15:30:13\ntags:\n---\n\nswagger 是什么鬼? \nswagger像是个接口生成、管理、mock、测试的框架。主要功能:\n - 支持API自动生成同步的在线文档\n - 这些文档可用于项目内部API审核\n - 方便测试人员了解API\n - 这些文档可作为客户产品文档的一部分进行发布\n - 可以mock接口方便调试\n支持API规范生成代码，生成的客户端和服务器端骨架代码可以加速开发和测试速度\n## \nswagger-ui 一个是一个管理接口的服务,它可以根据swagger.json模拟接口返回。\n### 搭建swagger-ui\n\n克隆swagger-ui\n\n`git clone https://github.com/swagger-api/swagger-ui.git`\n\n配置nginx 服务\n\n```\n server {\n        listen       8090;\n        server_name  www.swagger-ui.com;\n        autoindex on;\n        #charset koi8-r;\n\n       # access_log  logs/host.access.log  main;\n        root  /Users/lijian/Desktop/code/web_code/swagger/swagger-ui/dist;\n        location / {\n\n            index  index.php index.html index.htm;\n            try_files $uri $uri/ /index.php?$query_string;\n        }\n\n        #error_page  404              /404.html;\n\n        # redirect server error pages to the static page /50x.html\n        #\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html {\n            root   html;\n        }\n        location ~ \\.php$ {\n\n            fastcgi_pass   127.0.0.1:9000;\n            fastcgi_index  index.php;\n            fastcgi_split_path_info    ^(.+\\.php)(/.+)$;\n            fastcgi_param PATH_TRANSLATED $document_root$fastcgi_path_info;\n    fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;\n            include        fastcgi_params;\n        }\n\n    }\n```\n\n重启NGINX \n`nginx -s reload`\n\n样子如下:\n\n![image](/photo/img/swagger-ui/WX20180807-095949.png)\n\n\n## swagger.json\n\nswagger.json,swagger-ui能够将swagger.json解析为对应的可处理的接口文档。\n\n效果如上图所示。\n最终要的一点在于 `http://localhost:8091/swagger.json`该url为被解析的json地址。\n\n当然如果我们需要管理不同项目的项目,可以单独配置个服务用来管理swagger.json。\n\n\n## swagger-php\n\ngithub 地址: `https://github.com/zircote/swagger-php`\n\n首先我们需要在项目里引入swagger-php 扩展包。\n\n`composer global require zircote/swagger-php`\n\n按照swagger文档写swagger备注:\neg:\n\n```SWG\n    /**\n     * @SWG\\Post(\n     *     path=\"/guestbook/appmsg\",\n     *     summary=\"访客留言\",\n     *     tags={\"new\", \"guests\"},\n     *     description=\"访客留言\",\n     *     operationId=\"appmsg\",\n     *     @SWG\\Parameter(\n     *         description=\"msg\",\n     *         format=\"string\",\n     *         in=\"formData\",\n     *         name=\"msg\",\n     *         required=true,\n     *         type=\"string\",\n     *     ),\n     *     @SWG\\Parameter(\n     *         description=\"email\",\n     *         format=\"string\",\n     *         in=\"formData\",\n     *         name=\"email\",\n     *         required=true,\n     *         type=\"string\",\n     *\n     *     ),\n     *     consumes={\"multipart/form-data\", \"application/x-www-form-urlencoded\"},\n     *     produces={\"application/json\"},\n     *     @SWG\\Response(\n     *         response=\"200\",\n     *         description=\"返回成功\",\n     *     ),\n     * )\n     *\n     */\n    \n    /**\n     *   @SWG\\Get(\n     *     path=\"/get/feedback\",\n     *     summary=\"留言表\",\n     *     tags={\"getList\"},\n     *     descriptionId=\"appmsglist\",\n     *     @SWG\\Parameter(\n     *          description=\"Id\",\n     *          format=\"integer\",\n     *          in=\"formData\",\n     *          name=\"user_id\",\n     *          required=\"true\",\n     *          type=\"integer\"\n        *      ),\n     *      @SWG\\Parameter(\n     *          description=\"phone\",\n     *          format=\"integer\",\n     *          in=\"formData\",\n     *          name=\"user_id\",\n     *          required=\"true\",\n     *          type=\"integer\"\n     *        ),\n     *     consumes={\"multipart/form-data\", \"application/x-www-form-urlencode\"},\n     *     produces={\"application/json\"},\n     *     @SWG\\Response(\n     *        response=\"200\",\n     *        description=\"返回成功\",\n     *     )\n     * )\n     *\n     */\n```\n\n写完以后运行:\n\n`./vendor/zircote/swagger-php/bin/swagger app/Business/Hera/HeraMockApi.php -o ./../../swagger_json/rrc/swagger.json\n`\n第一个为swagger.json的生成器,第二个为目标文件,第三个为生成文件。\n\n然后我们在swagger-ui 引入生成的json即可。\n\n\n","slug":"swagger","published":1,"updated":"2018-08-07T03:33:16.945Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlz6uwh5000k0uww88mcbocy","content":"<p>swagger 是什么鬼?<br>swagger像是个接口生成、管理、mock、测试的框架。主要功能:</p>\n<ul>\n<li>支持API自动生成同步的在线文档</li>\n<li>这些文档可用于项目内部API审核</li>\n<li>方便测试人员了解API</li>\n<li>这些文档可作为客户产品文档的一部分进行发布</li>\n<li>可以mock接口方便调试<br>支持API规范生成代码，生成的客户端和服务器端骨架代码可以加速开发和测试速度<br>##<br>swagger-ui 一个是一个管理接口的服务,它可以根据swagger.json模拟接口返回。<h3 id=\"搭建swagger-ui\"><a href=\"#搭建swagger-ui\" class=\"headerlink\" title=\"搭建swagger-ui\"></a>搭建swagger-ui</h3></li>\n</ul>\n<p>克隆swagger-ui</p>\n<p><code>git clone https://github.com/swagger-api/swagger-ui.git</code></p>\n<p>配置nginx 服务</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\">server &#123;</div><div class=\"line\">       listen       8090;</div><div class=\"line\">       server_name  www.swagger-ui.com;</div><div class=\"line\">       autoindex on;</div><div class=\"line\">       #charset koi8-r;</div><div class=\"line\"></div><div class=\"line\">      # access_log  logs/host.access.log  main;</div><div class=\"line\">       root  /Users/lijian/Desktop/code/web_code/swagger/swagger-ui/dist;</div><div class=\"line\">       location / &#123;</div><div class=\"line\"></div><div class=\"line\">           index  index.php index.html index.htm;</div><div class=\"line\">           try_files $uri $uri/ /index.php?$query_string;</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       #error_page  404              /404.html;</div><div class=\"line\"></div><div class=\"line\">       # redirect server error pages to the static page /50x.html</div><div class=\"line\">       #</div><div class=\"line\">       error_page   500 502 503 504  /50x.html;</div><div class=\"line\">       location = /50x.html &#123;</div><div class=\"line\">           root   html;</div><div class=\"line\">       &#125;</div><div class=\"line\">       location ~ \\.php$ &#123;</div><div class=\"line\"></div><div class=\"line\">           fastcgi_pass   127.0.0.1:9000;</div><div class=\"line\">           fastcgi_index  index.php;</div><div class=\"line\">           fastcgi_split_path_info    ^(.+\\.php)(/.+)$;</div><div class=\"line\">           fastcgi_param PATH_TRANSLATED $document_root$fastcgi_path_info;</div><div class=\"line\">   fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;</div><div class=\"line\">           include        fastcgi_params;</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<p>重启NGINX<br><code>nginx -s reload</code></p>\n<p>样子如下:</p>\n<p><img src=\"/photo/img/swagger-ui/WX20180807-095949.png\" alt=\"image\"></p>\n<h2 id=\"swagger-json\"><a href=\"#swagger-json\" class=\"headerlink\" title=\"swagger.json\"></a>swagger.json</h2><p>swagger.json,swagger-ui能够将swagger.json解析为对应的可处理的接口文档。</p>\n<p>效果如上图所示。<br>最终要的一点在于 <code>http://localhost:8091/swagger.json</code>该url为被解析的json地址。</p>\n<p>当然如果我们需要管理不同项目的项目,可以单独配置个服务用来管理swagger.json。</p>\n<h2 id=\"swagger-php\"><a href=\"#swagger-php\" class=\"headerlink\" title=\"swagger-php\"></a>swagger-php</h2><p>github 地址: <code>https://github.com/zircote/swagger-php</code></p>\n<p>首先我们需要在项目里引入swagger-php 扩展包。</p>\n<p><code>composer global require zircote/swagger-php</code></p>\n<p>按照swagger文档写swagger备注:<br>eg:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**</div><div class=\"line\"> * @SWG\\Post(</div><div class=\"line\"> *     path=&quot;/guestbook/appmsg&quot;,</div><div class=\"line\"> *     summary=&quot;访客留言&quot;,</div><div class=\"line\"> *     tags=&#123;&quot;new&quot;, &quot;guests&quot;&#125;,</div><div class=\"line\"> *     description=&quot;访客留言&quot;,</div><div class=\"line\"> *     operationId=&quot;appmsg&quot;,</div><div class=\"line\"> *     @SWG\\Parameter(</div><div class=\"line\"> *         description=&quot;msg&quot;,</div><div class=\"line\"> *         format=&quot;string&quot;,</div><div class=\"line\"> *         in=&quot;formData&quot;,</div><div class=\"line\"> *         name=&quot;msg&quot;,</div><div class=\"line\"> *         required=true,</div><div class=\"line\"> *         type=&quot;string&quot;,</div><div class=\"line\"> *     ),</div><div class=\"line\"> *     @SWG\\Parameter(</div><div class=\"line\"> *         description=&quot;email&quot;,</div><div class=\"line\"> *         format=&quot;string&quot;,</div><div class=\"line\"> *         in=&quot;formData&quot;,</div><div class=\"line\"> *         name=&quot;email&quot;,</div><div class=\"line\"> *         required=true,</div><div class=\"line\"> *         type=&quot;string&quot;,</div><div class=\"line\"> *</div><div class=\"line\"> *     ),</div><div class=\"line\"> *     consumes=&#123;&quot;multipart/form-data&quot;, &quot;application/x-www-form-urlencoded&quot;&#125;,</div><div class=\"line\"> *     produces=&#123;&quot;application/json&quot;&#125;,</div><div class=\"line\"> *     @SWG\\Response(</div><div class=\"line\"> *         response=&quot;200&quot;,</div><div class=\"line\"> *         description=&quot;返回成功&quot;,</div><div class=\"line\"> *     ),</div><div class=\"line\"> * )</div><div class=\"line\"> *</div><div class=\"line\"> */</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> *   @SWG\\Get(</div><div class=\"line\"> *     path=&quot;/get/feedback&quot;,</div><div class=\"line\"> *     summary=&quot;留言表&quot;,</div><div class=\"line\"> *     tags=&#123;&quot;getList&quot;&#125;,</div><div class=\"line\"> *     descriptionId=&quot;appmsglist&quot;,</div><div class=\"line\"> *     @SWG\\Parameter(</div><div class=\"line\"> *          description=&quot;Id&quot;,</div><div class=\"line\"> *          format=&quot;integer&quot;,</div><div class=\"line\"> *          in=&quot;formData&quot;,</div><div class=\"line\"> *          name=&quot;user_id&quot;,</div><div class=\"line\"> *          required=&quot;true&quot;,</div><div class=\"line\"> *          type=&quot;integer&quot;</div><div class=\"line\">    *      ),</div><div class=\"line\"> *      @SWG\\Parameter(</div><div class=\"line\"> *          description=&quot;phone&quot;,</div><div class=\"line\"> *          format=&quot;integer&quot;,</div><div class=\"line\"> *          in=&quot;formData&quot;,</div><div class=\"line\"> *          name=&quot;user_id&quot;,</div><div class=\"line\"> *          required=&quot;true&quot;,</div><div class=\"line\"> *          type=&quot;integer&quot;</div><div class=\"line\"> *        ),</div><div class=\"line\"> *     consumes=&#123;&quot;multipart/form-data&quot;, &quot;application/x-www-form-urlencode&quot;&#125;,</div><div class=\"line\"> *     produces=&#123;&quot;application/json&quot;&#125;,</div><div class=\"line\"> *     @SWG\\Response(</div><div class=\"line\"> *        response=&quot;200&quot;,</div><div class=\"line\"> *        description=&quot;返回成功&quot;,</div><div class=\"line\"> *     )</div><div class=\"line\"> * )</div><div class=\"line\"> *</div><div class=\"line\"> */</div></pre></td></tr></table></figure>\n<p>写完以后运行:</p>\n<p><code>./vendor/zircote/swagger-php/bin/swagger app/Business/Hera/HeraMockApi.php -o ./../../swagger_json/rrc/swagger.json</code><br>第一个为swagger.json的生成器,第二个为目标文件,第三个为生成文件。</p>\n<p>然后我们在swagger-ui 引入生成的json即可。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>swagger 是什么鬼?<br>swagger像是个接口生成、管理、mock、测试的框架。主要功能:</p>\n<ul>\n<li>支持API自动生成同步的在线文档</li>\n<li>这些文档可用于项目内部API审核</li>\n<li>方便测试人员了解API</li>\n<li>这些文档可作为客户产品文档的一部分进行发布</li>\n<li>可以mock接口方便调试<br>支持API规范生成代码，生成的客户端和服务器端骨架代码可以加速开发和测试速度<br>##<br>swagger-ui 一个是一个管理接口的服务,它可以根据swagger.json模拟接口返回。<h3 id=\"搭建swagger-ui\"><a href=\"#搭建swagger-ui\" class=\"headerlink\" title=\"搭建swagger-ui\"></a>搭建swagger-ui</h3></li>\n</ul>\n<p>克隆swagger-ui</p>\n<p><code>git clone https://github.com/swagger-api/swagger-ui.git</code></p>\n<p>配置nginx 服务</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\">server &#123;</div><div class=\"line\">       listen       8090;</div><div class=\"line\">       server_name  www.swagger-ui.com;</div><div class=\"line\">       autoindex on;</div><div class=\"line\">       #charset koi8-r;</div><div class=\"line\"></div><div class=\"line\">      # access_log  logs/host.access.log  main;</div><div class=\"line\">       root  /Users/lijian/Desktop/code/web_code/swagger/swagger-ui/dist;</div><div class=\"line\">       location / &#123;</div><div class=\"line\"></div><div class=\"line\">           index  index.php index.html index.htm;</div><div class=\"line\">           try_files $uri $uri/ /index.php?$query_string;</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       #error_page  404              /404.html;</div><div class=\"line\"></div><div class=\"line\">       # redirect server error pages to the static page /50x.html</div><div class=\"line\">       #</div><div class=\"line\">       error_page   500 502 503 504  /50x.html;</div><div class=\"line\">       location = /50x.html &#123;</div><div class=\"line\">           root   html;</div><div class=\"line\">       &#125;</div><div class=\"line\">       location ~ \\.php$ &#123;</div><div class=\"line\"></div><div class=\"line\">           fastcgi_pass   127.0.0.1:9000;</div><div class=\"line\">           fastcgi_index  index.php;</div><div class=\"line\">           fastcgi_split_path_info    ^(.+\\.php)(/.+)$;</div><div class=\"line\">           fastcgi_param PATH_TRANSLATED $document_root$fastcgi_path_info;</div><div class=\"line\">   fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;</div><div class=\"line\">           include        fastcgi_params;</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<p>重启NGINX<br><code>nginx -s reload</code></p>\n<p>样子如下:</p>\n<p><img src=\"/photo/img/swagger-ui/WX20180807-095949.png\" alt=\"image\"></p>\n<h2 id=\"swagger-json\"><a href=\"#swagger-json\" class=\"headerlink\" title=\"swagger.json\"></a>swagger.json</h2><p>swagger.json,swagger-ui能够将swagger.json解析为对应的可处理的接口文档。</p>\n<p>效果如上图所示。<br>最终要的一点在于 <code>http://localhost:8091/swagger.json</code>该url为被解析的json地址。</p>\n<p>当然如果我们需要管理不同项目的项目,可以单独配置个服务用来管理swagger.json。</p>\n<h2 id=\"swagger-php\"><a href=\"#swagger-php\" class=\"headerlink\" title=\"swagger-php\"></a>swagger-php</h2><p>github 地址: <code>https://github.com/zircote/swagger-php</code></p>\n<p>首先我们需要在项目里引入swagger-php 扩展包。</p>\n<p><code>composer global require zircote/swagger-php</code></p>\n<p>按照swagger文档写swagger备注:<br>eg:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**</div><div class=\"line\"> * @SWG\\Post(</div><div class=\"line\"> *     path=&quot;/guestbook/appmsg&quot;,</div><div class=\"line\"> *     summary=&quot;访客留言&quot;,</div><div class=\"line\"> *     tags=&#123;&quot;new&quot;, &quot;guests&quot;&#125;,</div><div class=\"line\"> *     description=&quot;访客留言&quot;,</div><div class=\"line\"> *     operationId=&quot;appmsg&quot;,</div><div class=\"line\"> *     @SWG\\Parameter(</div><div class=\"line\"> *         description=&quot;msg&quot;,</div><div class=\"line\"> *         format=&quot;string&quot;,</div><div class=\"line\"> *         in=&quot;formData&quot;,</div><div class=\"line\"> *         name=&quot;msg&quot;,</div><div class=\"line\"> *         required=true,</div><div class=\"line\"> *         type=&quot;string&quot;,</div><div class=\"line\"> *     ),</div><div class=\"line\"> *     @SWG\\Parameter(</div><div class=\"line\"> *         description=&quot;email&quot;,</div><div class=\"line\"> *         format=&quot;string&quot;,</div><div class=\"line\"> *         in=&quot;formData&quot;,</div><div class=\"line\"> *         name=&quot;email&quot;,</div><div class=\"line\"> *         required=true,</div><div class=\"line\"> *         type=&quot;string&quot;,</div><div class=\"line\"> *</div><div class=\"line\"> *     ),</div><div class=\"line\"> *     consumes=&#123;&quot;multipart/form-data&quot;, &quot;application/x-www-form-urlencoded&quot;&#125;,</div><div class=\"line\"> *     produces=&#123;&quot;application/json&quot;&#125;,</div><div class=\"line\"> *     @SWG\\Response(</div><div class=\"line\"> *         response=&quot;200&quot;,</div><div class=\"line\"> *         description=&quot;返回成功&quot;,</div><div class=\"line\"> *     ),</div><div class=\"line\"> * )</div><div class=\"line\"> *</div><div class=\"line\"> */</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> *   @SWG\\Get(</div><div class=\"line\"> *     path=&quot;/get/feedback&quot;,</div><div class=\"line\"> *     summary=&quot;留言表&quot;,</div><div class=\"line\"> *     tags=&#123;&quot;getList&quot;&#125;,</div><div class=\"line\"> *     descriptionId=&quot;appmsglist&quot;,</div><div class=\"line\"> *     @SWG\\Parameter(</div><div class=\"line\"> *          description=&quot;Id&quot;,</div><div class=\"line\"> *          format=&quot;integer&quot;,</div><div class=\"line\"> *          in=&quot;formData&quot;,</div><div class=\"line\"> *          name=&quot;user_id&quot;,</div><div class=\"line\"> *          required=&quot;true&quot;,</div><div class=\"line\"> *          type=&quot;integer&quot;</div><div class=\"line\">    *      ),</div><div class=\"line\"> *      @SWG\\Parameter(</div><div class=\"line\"> *          description=&quot;phone&quot;,</div><div class=\"line\"> *          format=&quot;integer&quot;,</div><div class=\"line\"> *          in=&quot;formData&quot;,</div><div class=\"line\"> *          name=&quot;user_id&quot;,</div><div class=\"line\"> *          required=&quot;true&quot;,</div><div class=\"line\"> *          type=&quot;integer&quot;</div><div class=\"line\"> *        ),</div><div class=\"line\"> *     consumes=&#123;&quot;multipart/form-data&quot;, &quot;application/x-www-form-urlencode&quot;&#125;,</div><div class=\"line\"> *     produces=&#123;&quot;application/json&quot;&#125;,</div><div class=\"line\"> *     @SWG\\Response(</div><div class=\"line\"> *        response=&quot;200&quot;,</div><div class=\"line\"> *        description=&quot;返回成功&quot;,</div><div class=\"line\"> *     )</div><div class=\"line\"> * )</div><div class=\"line\"> *</div><div class=\"line\"> */</div></pre></td></tr></table></figure>\n<p>写完以后运行:</p>\n<p><code>./vendor/zircote/swagger-php/bin/swagger app/Business/Hera/HeraMockApi.php -o ./../../swagger_json/rrc/swagger.json</code><br>第一个为swagger.json的生成器,第二个为目标文件,第三个为生成文件。</p>\n<p>然后我们在swagger-ui 引入生成的json即可。</p>\n"},{"title":"websocket订阅火币成交记录","date":"2018-06-19T10:15:57.000Z","_content":"# python3\n## 单线程：\n### 文件一：\n```python\n# -*- coding: utf-8 -*-\n#author: maxie_lj\nimport _thread\nfrom websocket import create_connection\nfrom mysqlOpertion import connect_mysql\nimport gzip\nimport time\nimport json\n\n# 链接\ndef connect():\n    while(1):\n        try:\n            print('')\n            # 挂代理\n            ws = create_connection(\"wss://www.huobi.br.com/-/s/pro/ws\")\n            #print('链接成功')\n            return ws\n            break\n        except Exception as err:\n            #print(err)\n            #print('connect ws error,retry...')\n            time.sleep(1)\n\n\ndef getsubconfig():\n    # 统计参数\n    tradeStr=[\n              \"\"\"{\"sub\": \"market.elfusdt.trade.detail\",\"id\": \"id1\"}\"\"\",\n              \"\"\"{\"sub\": \"market.btcusdt.trade.detail\",\"id\": \"id2\"}\"\"\",\n              \"\"\"{\"sub\": \"market.htusdt.trade.detail\",\"id\": \"id3\"}\"\"\",\n              \"\"\"{\"sub\": \"market.swftcbtc.trade.detail\",\"id\": \"id4\"}\"\"\",\n              \"\"\"{\"sub\": \"market.topcbtc.trade.detail\",\"id\": \"id6\"}\"\"\",\n              \"\"\"{\"sub\": \"market.bchusdt.trade.detail\",\"id\": \"id7\"}\"\"\",\n              \"\"\"{\"sub\": \"market.ethusdt.trade.detail\",\"id\": \"id8\"}\"\"\",\n              \"\"\"{\"sub\": \"market.etcusdt.trade.detail\",\"id\": \"id9\"}\"\"\",\n              \"\"\"{\"sub\": \"market.eosusdt.trade.detail\",\"id\": \"id9\"}\"\"\",\n              \"\"\"{\"sub\": \"market.ltcusdt.trade.detail\",\"id\": \"id9\"}\"\"\"\n              ]\n    return tradeStr\n\n# 订阅\ndef sub(ws,tradeStr):\n    ws.send(tradeStr)\n\n# 获取返回\ndef getResponse(ws,tradeStr):\n    db = connect_mysql.connect()\n    while 1 :\n        try :\n            compressData=ws.recv()\n        except Exception :\n            #print('链接异常')\n            run(tradeStr,1)\n        try :\n            result=gzip.decompress(compressData).decode('utf-8')\n        except:\n            #print('丢包解析异常')\n            continue\n        if result[:7] == '{\"ping\"':\n            ts=result[8:21]\n            #print('心跳包',ts)\n            pong='{\"pong\":'+ts+'}'\n            ws.send(pong)\n        else:\n            if result[:5] == '{\"ch\"':\n                result = json.loads(result)\n                #print(result)\n                #print('------------------------------------------------------')\n                n = 0\n                while n < len(result['tick']['data']) :\n                    connect_mysql.commit('%s' % result['ch'].split('.')[1],result['tick']['data'][n]['price'],result['tick']['data'][n]['amount'],\"'%s'\" % result[\"tick\"][\"data\"][n][\"direction\"], \"'%s'\" % result['ch'].split('.')[1],db);\n                    n += 1\n\ndef subCoin(tradeStr):\n    ws=connect()\n    sub(ws,tradeStr)\n    getResponse(ws,tradeStr)\n\ndef run(tradeStr,test):\n    subCoin(tradeStr)\n\ndef main():\n    tradeStr=getsubconfig()\n    try :\n        tradeStr = getsubconfig()\n        i = 0\n        while i < len(tradeStr) :\n            _thread.start_new_thread( run, (tradeStr[i],i) )\n            i += 1\n    except Exception as err :\n        print(err)\n    while 1:\n        pass\n\n\nif __name__ == '__main__':\n    main()\n```\n\n# 多线程版本：\n## 文件一：\n\n```python\n# -*- coding: utf-8 -*-\n#author: maxie_lj\nimport _thread\nfrom websocket import create_connection\nfrom test1 import connect_mysql\nimport gzip\nimport time\nimport json\n\n# 链接数据库\ndef connect():\n    while(1):\n        try:\n            ws = create_connection(\"wss://www.huobi.br.com/-/s/pro/ws\")\n            # print('链接成功')\n            return ws\n            break\n        except Exception as err:\n            print(err)\n            #print('connect ws error,retry...')\n            time.sleep(1)\n\n\ndef getsubconfig():\n    # 统计参数\n    tradeStr=[\n              \"\"\"{\"sub\": \"market.elfusdt.trade.detail\"}\"\"\",\n              \"\"\"{\"sub\": \"market.btcusdt.trade.detail\"}\"\"\",\n              \"\"\"{\"sub\": \"market.htusdt.trade.detail\"}\"\"\",\n              \"\"\"{\"sub\": \"market.swftcbtc.trade.detail\"}\"\"\",\n              \"\"\"{\"sub\": \"market.topcbtc.trade.detail\"}\"\"\",\n              \"\"\"{\"sub\": \"market.bchusdt.trade.detail\"}\"\"\",\n              \"\"\"{\"sub\": \"market.ethusdt.trade.detail\"}\"\"\",\n              \"\"\"{\"sub\": \"market.etcusdt.trade.detail\"}\"\"\",\n              \"\"\"{\"sub\": \"market.eosusdt.trade.detail\"}\"\"\",\n              \"\"\"{\"sub\": \"market.ltcusdt.trade.detail\"}\"\"\"\n              ]\n    return tradeStr\n\n# 订阅\ndef sub(ws,tradeStr):\n    ws.send(tradeStr)\n\n# 获取返回\ndef getResponse(ws):\n    db = connect_mysql.connect()\n    while 1 :\n        try :\n            compressData=ws.recv()\n        except Exception :\n            ws=connect()\n            subCoin(ws)\n            print('链接异常')\n        try :\n            result=gzip.decompress(compressData).decode('utf-8')\n        except:\n            print('丢包解析异常')\n            continue\n        if result[:7] == '{\"ping\"':\n            ts=result[8:21]\n            #print('心跳包',ts)\n            pong='{\"pong\":'+ts+'}'\n            ws.send(pong)\n        else:\n            if result[:5] == '{\"ch\"':\n                result = json.loads(result)\n                print(result)\n                #print('------------------------------------------------------')\n                n = 0\n                while n < len(result['tick']['data']) :\n                    connect_mysql.commit('%s' % result['ch'].split('.')[1],result['tick']['data'][n]['price'],result['tick']['data'][n]['amount'],\"'%s'\" % result[\"tick\"][\"data\"][n][\"direction\"], \"'%s'\" % result['ch'].split('.')[1],db);\n                    n += 1\n\n# 订阅\ndef subCoin(ws):\n    tradeStr=getsubconfig()\n    i = 0\n    while i < len(tradeStr) :\n            sub(ws,tradeStr[i])\n            i += 1\n# 主函数\ndef main():\n    ws=connect()\n    subCoin(ws)\n    getResponse(ws)\n\n\nif __name__ == '__main__':\n    main()\n```\n\n\n```\n### 文件二:\n\n```python\nimport json\nimport pymysql\nimport time\n\nclass connect_mysql():\n    db = ''\n    def connect() :\n            db = connect_mysql.db = pymysql.connect(\"localhost\", \"root\", \"root\", \"huobi\", charset='utf8' )\n            return db\n\n    def commit(table, price, amount, action, coin_type, db) :\n\n        try:\n            cursor = db.cursor()\n            sql = \"INSERT INTO %s_success_order(action,order_amount, price, coin_type)VALUES (%s, %.10f, %.10f,%s )\" % (table,action, amount, price,coin_type )\n            cursor.execute(sql)\n           # 提交到数据库执行\n            db.commit()\n        except Exception as e:\n            db = connect_mysql.db = pymysql.connect(\"localhost\", \"root\", \"root\", \"huobi\", charset='utf8' )\n            commit(table, price, amount, action, coin_type, db)\n        return\n\n\n    def connect_close() :\n        connect_mysql.db.close()\n```\n\n\n文件二是单线程和多线程版的公用文件\n\n\n\n\n\n\n# shell 脚本\n```shell\n#!/bin/bash\ntotal=1\navaliable=`ps -ef | grep -w huobi.py | grep -v grep | wc -l`\ndiff=`expr $total - $avaliable`\n#echo $diff >> /home/script/diff.text\n#echo $total >> /home/script/diff.text\n#echo $avaliable >> /home/script/diff.text\nif [ $diff -gt 0 ];then\n        for((i=0;i<$diff;i++));do\n                 /usr/local/bin/python3 /home/script/huobi.py >> /home/script/huobi.out\n        done\nfi\n```\n\n# crontab 配置\n```powershell\nMAILTO=\"\"\n\n* * * * * sudo /bin/bash /home/script/huobi.sh\n```\n\n**注意事项**：\n在写shell脚本时，尽量用绝对路径。\n","source":"_posts/websocket订阅火币成交记录.md","raw":"---\ntitle: websocket订阅火币成交记录\ndate: 2018-06-19 18:15:57\ntags: python, shell, crond\n---\n# python3\n## 单线程：\n### 文件一：\n```python\n# -*- coding: utf-8 -*-\n#author: maxie_lj\nimport _thread\nfrom websocket import create_connection\nfrom mysqlOpertion import connect_mysql\nimport gzip\nimport time\nimport json\n\n# 链接\ndef connect():\n    while(1):\n        try:\n            print('')\n            # 挂代理\n            ws = create_connection(\"wss://www.huobi.br.com/-/s/pro/ws\")\n            #print('链接成功')\n            return ws\n            break\n        except Exception as err:\n            #print(err)\n            #print('connect ws error,retry...')\n            time.sleep(1)\n\n\ndef getsubconfig():\n    # 统计参数\n    tradeStr=[\n              \"\"\"{\"sub\": \"market.elfusdt.trade.detail\",\"id\": \"id1\"}\"\"\",\n              \"\"\"{\"sub\": \"market.btcusdt.trade.detail\",\"id\": \"id2\"}\"\"\",\n              \"\"\"{\"sub\": \"market.htusdt.trade.detail\",\"id\": \"id3\"}\"\"\",\n              \"\"\"{\"sub\": \"market.swftcbtc.trade.detail\",\"id\": \"id4\"}\"\"\",\n              \"\"\"{\"sub\": \"market.topcbtc.trade.detail\",\"id\": \"id6\"}\"\"\",\n              \"\"\"{\"sub\": \"market.bchusdt.trade.detail\",\"id\": \"id7\"}\"\"\",\n              \"\"\"{\"sub\": \"market.ethusdt.trade.detail\",\"id\": \"id8\"}\"\"\",\n              \"\"\"{\"sub\": \"market.etcusdt.trade.detail\",\"id\": \"id9\"}\"\"\",\n              \"\"\"{\"sub\": \"market.eosusdt.trade.detail\",\"id\": \"id9\"}\"\"\",\n              \"\"\"{\"sub\": \"market.ltcusdt.trade.detail\",\"id\": \"id9\"}\"\"\"\n              ]\n    return tradeStr\n\n# 订阅\ndef sub(ws,tradeStr):\n    ws.send(tradeStr)\n\n# 获取返回\ndef getResponse(ws,tradeStr):\n    db = connect_mysql.connect()\n    while 1 :\n        try :\n            compressData=ws.recv()\n        except Exception :\n            #print('链接异常')\n            run(tradeStr,1)\n        try :\n            result=gzip.decompress(compressData).decode('utf-8')\n        except:\n            #print('丢包解析异常')\n            continue\n        if result[:7] == '{\"ping\"':\n            ts=result[8:21]\n            #print('心跳包',ts)\n            pong='{\"pong\":'+ts+'}'\n            ws.send(pong)\n        else:\n            if result[:5] == '{\"ch\"':\n                result = json.loads(result)\n                #print(result)\n                #print('------------------------------------------------------')\n                n = 0\n                while n < len(result['tick']['data']) :\n                    connect_mysql.commit('%s' % result['ch'].split('.')[1],result['tick']['data'][n]['price'],result['tick']['data'][n]['amount'],\"'%s'\" % result[\"tick\"][\"data\"][n][\"direction\"], \"'%s'\" % result['ch'].split('.')[1],db);\n                    n += 1\n\ndef subCoin(tradeStr):\n    ws=connect()\n    sub(ws,tradeStr)\n    getResponse(ws,tradeStr)\n\ndef run(tradeStr,test):\n    subCoin(tradeStr)\n\ndef main():\n    tradeStr=getsubconfig()\n    try :\n        tradeStr = getsubconfig()\n        i = 0\n        while i < len(tradeStr) :\n            _thread.start_new_thread( run, (tradeStr[i],i) )\n            i += 1\n    except Exception as err :\n        print(err)\n    while 1:\n        pass\n\n\nif __name__ == '__main__':\n    main()\n```\n\n# 多线程版本：\n## 文件一：\n\n```python\n# -*- coding: utf-8 -*-\n#author: maxie_lj\nimport _thread\nfrom websocket import create_connection\nfrom test1 import connect_mysql\nimport gzip\nimport time\nimport json\n\n# 链接数据库\ndef connect():\n    while(1):\n        try:\n            ws = create_connection(\"wss://www.huobi.br.com/-/s/pro/ws\")\n            # print('链接成功')\n            return ws\n            break\n        except Exception as err:\n            print(err)\n            #print('connect ws error,retry...')\n            time.sleep(1)\n\n\ndef getsubconfig():\n    # 统计参数\n    tradeStr=[\n              \"\"\"{\"sub\": \"market.elfusdt.trade.detail\"}\"\"\",\n              \"\"\"{\"sub\": \"market.btcusdt.trade.detail\"}\"\"\",\n              \"\"\"{\"sub\": \"market.htusdt.trade.detail\"}\"\"\",\n              \"\"\"{\"sub\": \"market.swftcbtc.trade.detail\"}\"\"\",\n              \"\"\"{\"sub\": \"market.topcbtc.trade.detail\"}\"\"\",\n              \"\"\"{\"sub\": \"market.bchusdt.trade.detail\"}\"\"\",\n              \"\"\"{\"sub\": \"market.ethusdt.trade.detail\"}\"\"\",\n              \"\"\"{\"sub\": \"market.etcusdt.trade.detail\"}\"\"\",\n              \"\"\"{\"sub\": \"market.eosusdt.trade.detail\"}\"\"\",\n              \"\"\"{\"sub\": \"market.ltcusdt.trade.detail\"}\"\"\"\n              ]\n    return tradeStr\n\n# 订阅\ndef sub(ws,tradeStr):\n    ws.send(tradeStr)\n\n# 获取返回\ndef getResponse(ws):\n    db = connect_mysql.connect()\n    while 1 :\n        try :\n            compressData=ws.recv()\n        except Exception :\n            ws=connect()\n            subCoin(ws)\n            print('链接异常')\n        try :\n            result=gzip.decompress(compressData).decode('utf-8')\n        except:\n            print('丢包解析异常')\n            continue\n        if result[:7] == '{\"ping\"':\n            ts=result[8:21]\n            #print('心跳包',ts)\n            pong='{\"pong\":'+ts+'}'\n            ws.send(pong)\n        else:\n            if result[:5] == '{\"ch\"':\n                result = json.loads(result)\n                print(result)\n                #print('------------------------------------------------------')\n                n = 0\n                while n < len(result['tick']['data']) :\n                    connect_mysql.commit('%s' % result['ch'].split('.')[1],result['tick']['data'][n]['price'],result['tick']['data'][n]['amount'],\"'%s'\" % result[\"tick\"][\"data\"][n][\"direction\"], \"'%s'\" % result['ch'].split('.')[1],db);\n                    n += 1\n\n# 订阅\ndef subCoin(ws):\n    tradeStr=getsubconfig()\n    i = 0\n    while i < len(tradeStr) :\n            sub(ws,tradeStr[i])\n            i += 1\n# 主函数\ndef main():\n    ws=connect()\n    subCoin(ws)\n    getResponse(ws)\n\n\nif __name__ == '__main__':\n    main()\n```\n\n\n```\n### 文件二:\n\n```python\nimport json\nimport pymysql\nimport time\n\nclass connect_mysql():\n    db = ''\n    def connect() :\n            db = connect_mysql.db = pymysql.connect(\"localhost\", \"root\", \"root\", \"huobi\", charset='utf8' )\n            return db\n\n    def commit(table, price, amount, action, coin_type, db) :\n\n        try:\n            cursor = db.cursor()\n            sql = \"INSERT INTO %s_success_order(action,order_amount, price, coin_type)VALUES (%s, %.10f, %.10f,%s )\" % (table,action, amount, price,coin_type )\n            cursor.execute(sql)\n           # 提交到数据库执行\n            db.commit()\n        except Exception as e:\n            db = connect_mysql.db = pymysql.connect(\"localhost\", \"root\", \"root\", \"huobi\", charset='utf8' )\n            commit(table, price, amount, action, coin_type, db)\n        return\n\n\n    def connect_close() :\n        connect_mysql.db.close()\n```\n\n\n文件二是单线程和多线程版的公用文件\n\n\n\n\n\n\n# shell 脚本\n```shell\n#!/bin/bash\ntotal=1\navaliable=`ps -ef | grep -w huobi.py | grep -v grep | wc -l`\ndiff=`expr $total - $avaliable`\n#echo $diff >> /home/script/diff.text\n#echo $total >> /home/script/diff.text\n#echo $avaliable >> /home/script/diff.text\nif [ $diff -gt 0 ];then\n        for((i=0;i<$diff;i++));do\n                 /usr/local/bin/python3 /home/script/huobi.py >> /home/script/huobi.out\n        done\nfi\n```\n\n# crontab 配置\n```powershell\nMAILTO=\"\"\n\n* * * * * sudo /bin/bash /home/script/huobi.sh\n```\n\n**注意事项**：\n在写shell脚本时，尽量用绝对路径。\n","slug":"websocket订阅火币成交记录","published":1,"updated":"2018-06-19T10:19:48.515Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlz6uwh6000l0uwwyjepftw9","content":"<h1 id=\"python3\"><a href=\"#python3\" class=\"headerlink\" title=\"python3\"></a>python3</h1><h2 id=\"单线程：\"><a href=\"#单线程：\" class=\"headerlink\" title=\"单线程：\"></a>单线程：</h2><h3 id=\"文件一：\"><a href=\"#文件一：\" class=\"headerlink\" title=\"文件一：\"></a>文件一：</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></div><div class=\"line\"><span class=\"comment\">#author: maxie_lj</span></div><div class=\"line\"><span class=\"keyword\">import</span> _thread</div><div class=\"line\"><span class=\"keyword\">from</span> websocket <span class=\"keyword\">import</span> create_connection</div><div class=\"line\"><span class=\"keyword\">from</span> mysqlOpertion <span class=\"keyword\">import</span> connect_mysql</div><div class=\"line\"><span class=\"keyword\">import</span> gzip</div><div class=\"line\"><span class=\"keyword\">import</span> time</div><div class=\"line\"><span class=\"keyword\">import</span> json</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 链接</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">connect</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"number\">1</span>):</div><div class=\"line\">        <span class=\"keyword\">try</span>:</div><div class=\"line\">            print(<span class=\"string\">''</span>)</div><div class=\"line\">            <span class=\"comment\"># 挂代理</span></div><div class=\"line\">            ws = create_connection(<span class=\"string\">\"wss://www.huobi.br.com/-/s/pro/ws\"</span>)</div><div class=\"line\">            <span class=\"comment\">#print('链接成功')</span></div><div class=\"line\">            <span class=\"keyword\">return</span> ws</div><div class=\"line\">            <span class=\"keyword\">break</span></div><div class=\"line\">        <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> err:</div><div class=\"line\">            <span class=\"comment\">#print(err)</span></div><div class=\"line\">            <span class=\"comment\">#print('connect ws error,retry...')</span></div><div class=\"line\">            time.sleep(<span class=\"number\">1</span>)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getsubconfig</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"comment\"># 统计参数</span></div><div class=\"line\">    tradeStr=[</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.elfusdt.trade.detail\",\"id\": \"id1\"&#125;\"\"\"</span>,</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.btcusdt.trade.detail\",\"id\": \"id2\"&#125;\"\"\"</span>,</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.htusdt.trade.detail\",\"id\": \"id3\"&#125;\"\"\"</span>,</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.swftcbtc.trade.detail\",\"id\": \"id4\"&#125;\"\"\"</span>,</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.topcbtc.trade.detail\",\"id\": \"id6\"&#125;\"\"\"</span>,</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.bchusdt.trade.detail\",\"id\": \"id7\"&#125;\"\"\"</span>,</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.ethusdt.trade.detail\",\"id\": \"id8\"&#125;\"\"\"</span>,</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.etcusdt.trade.detail\",\"id\": \"id9\"&#125;\"\"\"</span>,</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.eosusdt.trade.detail\",\"id\": \"id9\"&#125;\"\"\"</span>,</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.ltcusdt.trade.detail\",\"id\": \"id9\"&#125;\"\"\"</span></div><div class=\"line\">              ]</div><div class=\"line\">    <span class=\"keyword\">return</span> tradeStr</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 订阅</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sub</span><span class=\"params\">(ws,tradeStr)</span>:</span></div><div class=\"line\">    ws.send(tradeStr)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 获取返回</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getResponse</span><span class=\"params\">(ws,tradeStr)</span>:</span></div><div class=\"line\">    db = connect_mysql.connect()</div><div class=\"line\">    <span class=\"keyword\">while</span> <span class=\"number\">1</span> :</div><div class=\"line\">        <span class=\"keyword\">try</span> :</div><div class=\"line\">            compressData=ws.recv()</div><div class=\"line\">        <span class=\"keyword\">except</span> Exception :</div><div class=\"line\">            <span class=\"comment\">#print('链接异常')</span></div><div class=\"line\">            run(tradeStr,<span class=\"number\">1</span>)</div><div class=\"line\">        <span class=\"keyword\">try</span> :</div><div class=\"line\">            result=gzip.decompress(compressData).decode(<span class=\"string\">'utf-8'</span>)</div><div class=\"line\">        <span class=\"keyword\">except</span>:</div><div class=\"line\">            <span class=\"comment\">#print('丢包解析异常')</span></div><div class=\"line\">            <span class=\"keyword\">continue</span></div><div class=\"line\">        <span class=\"keyword\">if</span> result[:<span class=\"number\">7</span>] == <span class=\"string\">'&#123;\"ping\"'</span>:</div><div class=\"line\">            ts=result[<span class=\"number\">8</span>:<span class=\"number\">21</span>]</div><div class=\"line\">            <span class=\"comment\">#print('心跳包',ts)</span></div><div class=\"line\">            pong=<span class=\"string\">'&#123;\"pong\":'</span>+ts+<span class=\"string\">'&#125;'</span></div><div class=\"line\">            ws.send(pong)</div><div class=\"line\">        <span class=\"keyword\">else</span>:</div><div class=\"line\">            <span class=\"keyword\">if</span> result[:<span class=\"number\">5</span>] == <span class=\"string\">'&#123;\"ch\"'</span>:</div><div class=\"line\">                result = json.loads(result)</div><div class=\"line\">                <span class=\"comment\">#print(result)</span></div><div class=\"line\">                <span class=\"comment\">#print('------------------------------------------------------')</span></div><div class=\"line\">                n = <span class=\"number\">0</span></div><div class=\"line\">                <span class=\"keyword\">while</span> n &lt; len(result[<span class=\"string\">'tick'</span>][<span class=\"string\">'data'</span>]) :</div><div class=\"line\">                    connect_mysql.commit(<span class=\"string\">'%s'</span> % result[<span class=\"string\">'ch'</span>].split(<span class=\"string\">'.'</span>)[<span class=\"number\">1</span>],result[<span class=\"string\">'tick'</span>][<span class=\"string\">'data'</span>][n][<span class=\"string\">'price'</span>],result[<span class=\"string\">'tick'</span>][<span class=\"string\">'data'</span>][n][<span class=\"string\">'amount'</span>],<span class=\"string\">\"'%s'\"</span> % result[<span class=\"string\">\"tick\"</span>][<span class=\"string\">\"data\"</span>][n][<span class=\"string\">\"direction\"</span>], <span class=\"string\">\"'%s'\"</span> % result[<span class=\"string\">'ch'</span>].split(<span class=\"string\">'.'</span>)[<span class=\"number\">1</span>],db);</div><div class=\"line\">                    n += <span class=\"number\">1</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">subCoin</span><span class=\"params\">(tradeStr)</span>:</span></div><div class=\"line\">    ws=connect()</div><div class=\"line\">    sub(ws,tradeStr)</div><div class=\"line\">    getResponse(ws,tradeStr)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span><span class=\"params\">(tradeStr,test)</span>:</span></div><div class=\"line\">    subCoin(tradeStr)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    tradeStr=getsubconfig()</div><div class=\"line\">    <span class=\"keyword\">try</span> :</div><div class=\"line\">        tradeStr = getsubconfig()</div><div class=\"line\">        i = <span class=\"number\">0</span></div><div class=\"line\">        <span class=\"keyword\">while</span> i &lt; len(tradeStr) :</div><div class=\"line\">            _thread.start_new_thread( run, (tradeStr[i],i) )</div><div class=\"line\">            i += <span class=\"number\">1</span></div><div class=\"line\">    <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> err :</div><div class=\"line\">        print(err)</div><div class=\"line\">    <span class=\"keyword\">while</span> <span class=\"number\">1</span>:</div><div class=\"line\">        <span class=\"keyword\">pass</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    main()</div></pre></td></tr></table></figure>\n<h1 id=\"多线程版本：\"><a href=\"#多线程版本：\" class=\"headerlink\" title=\"多线程版本：\"></a>多线程版本：</h1><h2 id=\"文件一：-1\"><a href=\"#文件一：-1\" class=\"headerlink\" title=\"文件一：\"></a>文件一：</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></div><div class=\"line\"><span class=\"comment\">#author: maxie_lj</span></div><div class=\"line\"><span class=\"keyword\">import</span> _thread</div><div class=\"line\"><span class=\"keyword\">from</span> websocket <span class=\"keyword\">import</span> create_connection</div><div class=\"line\"><span class=\"keyword\">from</span> test1 <span class=\"keyword\">import</span> connect_mysql</div><div class=\"line\"><span class=\"keyword\">import</span> gzip</div><div class=\"line\"><span class=\"keyword\">import</span> time</div><div class=\"line\"><span class=\"keyword\">import</span> json</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 链接数据库</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">connect</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"number\">1</span>):</div><div class=\"line\">        <span class=\"keyword\">try</span>:</div><div class=\"line\">            ws = create_connection(<span class=\"string\">\"wss://www.huobi.br.com/-/s/pro/ws\"</span>)</div><div class=\"line\">            <span class=\"comment\"># print('链接成功')</span></div><div class=\"line\">            <span class=\"keyword\">return</span> ws</div><div class=\"line\">            <span class=\"keyword\">break</span></div><div class=\"line\">        <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> err:</div><div class=\"line\">            print(err)</div><div class=\"line\">            <span class=\"comment\">#print('connect ws error,retry...')</span></div><div class=\"line\">            time.sleep(<span class=\"number\">1</span>)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getsubconfig</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"comment\"># 统计参数</span></div><div class=\"line\">    tradeStr=[</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.elfusdt.trade.detail\"&#125;\"\"\"</span>,</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.btcusdt.trade.detail\"&#125;\"\"\"</span>,</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.htusdt.trade.detail\"&#125;\"\"\"</span>,</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.swftcbtc.trade.detail\"&#125;\"\"\"</span>,</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.topcbtc.trade.detail\"&#125;\"\"\"</span>,</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.bchusdt.trade.detail\"&#125;\"\"\"</span>,</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.ethusdt.trade.detail\"&#125;\"\"\"</span>,</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.etcusdt.trade.detail\"&#125;\"\"\"</span>,</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.eosusdt.trade.detail\"&#125;\"\"\"</span>,</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.ltcusdt.trade.detail\"&#125;\"\"\"</span></div><div class=\"line\">              ]</div><div class=\"line\">    <span class=\"keyword\">return</span> tradeStr</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 订阅</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sub</span><span class=\"params\">(ws,tradeStr)</span>:</span></div><div class=\"line\">    ws.send(tradeStr)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 获取返回</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getResponse</span><span class=\"params\">(ws)</span>:</span></div><div class=\"line\">    db = connect_mysql.connect()</div><div class=\"line\">    <span class=\"keyword\">while</span> <span class=\"number\">1</span> :</div><div class=\"line\">        <span class=\"keyword\">try</span> :</div><div class=\"line\">            compressData=ws.recv()</div><div class=\"line\">        <span class=\"keyword\">except</span> Exception :</div><div class=\"line\">            ws=connect()</div><div class=\"line\">            subCoin(ws)</div><div class=\"line\">            print(<span class=\"string\">'链接异常'</span>)</div><div class=\"line\">        <span class=\"keyword\">try</span> :</div><div class=\"line\">            result=gzip.decompress(compressData).decode(<span class=\"string\">'utf-8'</span>)</div><div class=\"line\">        <span class=\"keyword\">except</span>:</div><div class=\"line\">            print(<span class=\"string\">'丢包解析异常'</span>)</div><div class=\"line\">            <span class=\"keyword\">continue</span></div><div class=\"line\">        <span class=\"keyword\">if</span> result[:<span class=\"number\">7</span>] == <span class=\"string\">'&#123;\"ping\"'</span>:</div><div class=\"line\">            ts=result[<span class=\"number\">8</span>:<span class=\"number\">21</span>]</div><div class=\"line\">            <span class=\"comment\">#print('心跳包',ts)</span></div><div class=\"line\">            pong=<span class=\"string\">'&#123;\"pong\":'</span>+ts+<span class=\"string\">'&#125;'</span></div><div class=\"line\">            ws.send(pong)</div><div class=\"line\">        <span class=\"keyword\">else</span>:</div><div class=\"line\">            <span class=\"keyword\">if</span> result[:<span class=\"number\">5</span>] == <span class=\"string\">'&#123;\"ch\"'</span>:</div><div class=\"line\">                result = json.loads(result)</div><div class=\"line\">                print(result)</div><div class=\"line\">                <span class=\"comment\">#print('------------------------------------------------------')</span></div><div class=\"line\">                n = <span class=\"number\">0</span></div><div class=\"line\">                <span class=\"keyword\">while</span> n &lt; len(result[<span class=\"string\">'tick'</span>][<span class=\"string\">'data'</span>]) :</div><div class=\"line\">                    connect_mysql.commit(<span class=\"string\">'%s'</span> % result[<span class=\"string\">'ch'</span>].split(<span class=\"string\">'.'</span>)[<span class=\"number\">1</span>],result[<span class=\"string\">'tick'</span>][<span class=\"string\">'data'</span>][n][<span class=\"string\">'price'</span>],result[<span class=\"string\">'tick'</span>][<span class=\"string\">'data'</span>][n][<span class=\"string\">'amount'</span>],<span class=\"string\">\"'%s'\"</span> % result[<span class=\"string\">\"tick\"</span>][<span class=\"string\">\"data\"</span>][n][<span class=\"string\">\"direction\"</span>], <span class=\"string\">\"'%s'\"</span> % result[<span class=\"string\">'ch'</span>].split(<span class=\"string\">'.'</span>)[<span class=\"number\">1</span>],db);</div><div class=\"line\">                    n += <span class=\"number\">1</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 订阅</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">subCoin</span><span class=\"params\">(ws)</span>:</span></div><div class=\"line\">    tradeStr=getsubconfig()</div><div class=\"line\">    i = <span class=\"number\">0</span></div><div class=\"line\">    <span class=\"keyword\">while</span> i &lt; len(tradeStr) :</div><div class=\"line\">            sub(ws,tradeStr[i])</div><div class=\"line\">            i += <span class=\"number\">1</span></div><div class=\"line\"><span class=\"comment\"># 主函数</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    ws=connect()</div><div class=\"line\">    subCoin(ws)</div><div class=\"line\">    getResponse(ws)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    main()</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">### 文件二:</div><div class=\"line\"></div><div class=\"line\">```python</div><div class=\"line\">import json</div><div class=\"line\">import pymysql</div><div class=\"line\">import time</div><div class=\"line\"></div><div class=\"line\">class connect_mysql():</div><div class=\"line\">    db = &apos;&apos;</div><div class=\"line\">    def connect() :</div><div class=\"line\">            db = connect_mysql.db = pymysql.connect(&quot;localhost&quot;, &quot;root&quot;, &quot;root&quot;, &quot;huobi&quot;, charset=&apos;utf8&apos; )</div><div class=\"line\">            return db</div><div class=\"line\"></div><div class=\"line\">    def commit(table, price, amount, action, coin_type, db) :</div><div class=\"line\"></div><div class=\"line\">        try:</div><div class=\"line\">            cursor = db.cursor()</div><div class=\"line\">            sql = &quot;INSERT INTO %s_success_order(action,order_amount, price, coin_type)VALUES (%s, %.10f, %.10f,%s )&quot; % (table,action, amount, price,coin_type )</div><div class=\"line\">            cursor.execute(sql)</div><div class=\"line\">           # 提交到数据库执行</div><div class=\"line\">            db.commit()</div><div class=\"line\">        except Exception as e:</div><div class=\"line\">            db = connect_mysql.db = pymysql.connect(&quot;localhost&quot;, &quot;root&quot;, &quot;root&quot;, &quot;huobi&quot;, charset=&apos;utf8&apos; )</div><div class=\"line\">            commit(table, price, amount, action, coin_type, db)</div><div class=\"line\">        return</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    def connect_close() :</div><div class=\"line\">        connect_mysql.db.close()</div></pre></td></tr></table></figure>\n<p>文件二是单线程和多线程版的公用文件</p>\n<h1 id=\"shell-脚本\"><a href=\"#shell-脚本\" class=\"headerlink\" title=\"shell 脚本\"></a>shell 脚本</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">#!/bin/bash</div><div class=\"line\">total=1</div><div class=\"line\">avaliable=`ps -ef | grep -w huobi.py | grep -v grep | wc -l`</div><div class=\"line\">diff=`expr $total - $avaliable`</div><div class=\"line\">#echo $diff &gt;&gt; /home/script/diff.text</div><div class=\"line\">#echo $total &gt;&gt; /home/script/diff.text</div><div class=\"line\">#echo $avaliable &gt;&gt; /home/script/diff.text</div><div class=\"line\">if [ $diff -gt 0 ];then</div><div class=\"line\">        for((i=0;i&lt;$diff;i++));do</div><div class=\"line\">                 /usr/local/bin/python3 /home/script/huobi.py &gt;&gt; /home/script/huobi.out</div><div class=\"line\">        done</div><div class=\"line\">fi</div></pre></td></tr></table></figure>\n<h1 id=\"crontab-配置\"><a href=\"#crontab-配置\" class=\"headerlink\" title=\"crontab 配置\"></a>crontab 配置</h1><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">MAILTO=<span class=\"string\">\"\"</span></div><div class=\"line\"></div><div class=\"line\">* * * * * sudo /bin/bash /home/script/huobi.sh</div></pre></td></tr></table></figure>\n<p><strong>注意事项</strong>：<br>在写shell脚本时，尽量用绝对路径。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"python3\"><a href=\"#python3\" class=\"headerlink\" title=\"python3\"></a>python3</h1><h2 id=\"单线程：\"><a href=\"#单线程：\" class=\"headerlink\" title=\"单线程：\"></a>单线程：</h2><h3 id=\"文件一：\"><a href=\"#文件一：\" class=\"headerlink\" title=\"文件一：\"></a>文件一：</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></div><div class=\"line\"><span class=\"comment\">#author: maxie_lj</span></div><div class=\"line\"><span class=\"keyword\">import</span> _thread</div><div class=\"line\"><span class=\"keyword\">from</span> websocket <span class=\"keyword\">import</span> create_connection</div><div class=\"line\"><span class=\"keyword\">from</span> mysqlOpertion <span class=\"keyword\">import</span> connect_mysql</div><div class=\"line\"><span class=\"keyword\">import</span> gzip</div><div class=\"line\"><span class=\"keyword\">import</span> time</div><div class=\"line\"><span class=\"keyword\">import</span> json</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 链接</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">connect</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"number\">1</span>):</div><div class=\"line\">        <span class=\"keyword\">try</span>:</div><div class=\"line\">            print(<span class=\"string\">''</span>)</div><div class=\"line\">            <span class=\"comment\"># 挂代理</span></div><div class=\"line\">            ws = create_connection(<span class=\"string\">\"wss://www.huobi.br.com/-/s/pro/ws\"</span>)</div><div class=\"line\">            <span class=\"comment\">#print('链接成功')</span></div><div class=\"line\">            <span class=\"keyword\">return</span> ws</div><div class=\"line\">            <span class=\"keyword\">break</span></div><div class=\"line\">        <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> err:</div><div class=\"line\">            <span class=\"comment\">#print(err)</span></div><div class=\"line\">            <span class=\"comment\">#print('connect ws error,retry...')</span></div><div class=\"line\">            time.sleep(<span class=\"number\">1</span>)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getsubconfig</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"comment\"># 统计参数</span></div><div class=\"line\">    tradeStr=[</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.elfusdt.trade.detail\",\"id\": \"id1\"&#125;\"\"\"</span>,</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.btcusdt.trade.detail\",\"id\": \"id2\"&#125;\"\"\"</span>,</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.htusdt.trade.detail\",\"id\": \"id3\"&#125;\"\"\"</span>,</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.swftcbtc.trade.detail\",\"id\": \"id4\"&#125;\"\"\"</span>,</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.topcbtc.trade.detail\",\"id\": \"id6\"&#125;\"\"\"</span>,</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.bchusdt.trade.detail\",\"id\": \"id7\"&#125;\"\"\"</span>,</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.ethusdt.trade.detail\",\"id\": \"id8\"&#125;\"\"\"</span>,</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.etcusdt.trade.detail\",\"id\": \"id9\"&#125;\"\"\"</span>,</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.eosusdt.trade.detail\",\"id\": \"id9\"&#125;\"\"\"</span>,</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.ltcusdt.trade.detail\",\"id\": \"id9\"&#125;\"\"\"</span></div><div class=\"line\">              ]</div><div class=\"line\">    <span class=\"keyword\">return</span> tradeStr</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 订阅</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sub</span><span class=\"params\">(ws,tradeStr)</span>:</span></div><div class=\"line\">    ws.send(tradeStr)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 获取返回</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getResponse</span><span class=\"params\">(ws,tradeStr)</span>:</span></div><div class=\"line\">    db = connect_mysql.connect()</div><div class=\"line\">    <span class=\"keyword\">while</span> <span class=\"number\">1</span> :</div><div class=\"line\">        <span class=\"keyword\">try</span> :</div><div class=\"line\">            compressData=ws.recv()</div><div class=\"line\">        <span class=\"keyword\">except</span> Exception :</div><div class=\"line\">            <span class=\"comment\">#print('链接异常')</span></div><div class=\"line\">            run(tradeStr,<span class=\"number\">1</span>)</div><div class=\"line\">        <span class=\"keyword\">try</span> :</div><div class=\"line\">            result=gzip.decompress(compressData).decode(<span class=\"string\">'utf-8'</span>)</div><div class=\"line\">        <span class=\"keyword\">except</span>:</div><div class=\"line\">            <span class=\"comment\">#print('丢包解析异常')</span></div><div class=\"line\">            <span class=\"keyword\">continue</span></div><div class=\"line\">        <span class=\"keyword\">if</span> result[:<span class=\"number\">7</span>] == <span class=\"string\">'&#123;\"ping\"'</span>:</div><div class=\"line\">            ts=result[<span class=\"number\">8</span>:<span class=\"number\">21</span>]</div><div class=\"line\">            <span class=\"comment\">#print('心跳包',ts)</span></div><div class=\"line\">            pong=<span class=\"string\">'&#123;\"pong\":'</span>+ts+<span class=\"string\">'&#125;'</span></div><div class=\"line\">            ws.send(pong)</div><div class=\"line\">        <span class=\"keyword\">else</span>:</div><div class=\"line\">            <span class=\"keyword\">if</span> result[:<span class=\"number\">5</span>] == <span class=\"string\">'&#123;\"ch\"'</span>:</div><div class=\"line\">                result = json.loads(result)</div><div class=\"line\">                <span class=\"comment\">#print(result)</span></div><div class=\"line\">                <span class=\"comment\">#print('------------------------------------------------------')</span></div><div class=\"line\">                n = <span class=\"number\">0</span></div><div class=\"line\">                <span class=\"keyword\">while</span> n &lt; len(result[<span class=\"string\">'tick'</span>][<span class=\"string\">'data'</span>]) :</div><div class=\"line\">                    connect_mysql.commit(<span class=\"string\">'%s'</span> % result[<span class=\"string\">'ch'</span>].split(<span class=\"string\">'.'</span>)[<span class=\"number\">1</span>],result[<span class=\"string\">'tick'</span>][<span class=\"string\">'data'</span>][n][<span class=\"string\">'price'</span>],result[<span class=\"string\">'tick'</span>][<span class=\"string\">'data'</span>][n][<span class=\"string\">'amount'</span>],<span class=\"string\">\"'%s'\"</span> % result[<span class=\"string\">\"tick\"</span>][<span class=\"string\">\"data\"</span>][n][<span class=\"string\">\"direction\"</span>], <span class=\"string\">\"'%s'\"</span> % result[<span class=\"string\">'ch'</span>].split(<span class=\"string\">'.'</span>)[<span class=\"number\">1</span>],db);</div><div class=\"line\">                    n += <span class=\"number\">1</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">subCoin</span><span class=\"params\">(tradeStr)</span>:</span></div><div class=\"line\">    ws=connect()</div><div class=\"line\">    sub(ws,tradeStr)</div><div class=\"line\">    getResponse(ws,tradeStr)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span><span class=\"params\">(tradeStr,test)</span>:</span></div><div class=\"line\">    subCoin(tradeStr)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    tradeStr=getsubconfig()</div><div class=\"line\">    <span class=\"keyword\">try</span> :</div><div class=\"line\">        tradeStr = getsubconfig()</div><div class=\"line\">        i = <span class=\"number\">0</span></div><div class=\"line\">        <span class=\"keyword\">while</span> i &lt; len(tradeStr) :</div><div class=\"line\">            _thread.start_new_thread( run, (tradeStr[i],i) )</div><div class=\"line\">            i += <span class=\"number\">1</span></div><div class=\"line\">    <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> err :</div><div class=\"line\">        print(err)</div><div class=\"line\">    <span class=\"keyword\">while</span> <span class=\"number\">1</span>:</div><div class=\"line\">        <span class=\"keyword\">pass</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    main()</div></pre></td></tr></table></figure>\n<h1 id=\"多线程版本：\"><a href=\"#多线程版本：\" class=\"headerlink\" title=\"多线程版本：\"></a>多线程版本：</h1><h2 id=\"文件一：-1\"><a href=\"#文件一：-1\" class=\"headerlink\" title=\"文件一：\"></a>文件一：</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></div><div class=\"line\"><span class=\"comment\">#author: maxie_lj</span></div><div class=\"line\"><span class=\"keyword\">import</span> _thread</div><div class=\"line\"><span class=\"keyword\">from</span> websocket <span class=\"keyword\">import</span> create_connection</div><div class=\"line\"><span class=\"keyword\">from</span> test1 <span class=\"keyword\">import</span> connect_mysql</div><div class=\"line\"><span class=\"keyword\">import</span> gzip</div><div class=\"line\"><span class=\"keyword\">import</span> time</div><div class=\"line\"><span class=\"keyword\">import</span> json</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 链接数据库</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">connect</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"number\">1</span>):</div><div class=\"line\">        <span class=\"keyword\">try</span>:</div><div class=\"line\">            ws = create_connection(<span class=\"string\">\"wss://www.huobi.br.com/-/s/pro/ws\"</span>)</div><div class=\"line\">            <span class=\"comment\"># print('链接成功')</span></div><div class=\"line\">            <span class=\"keyword\">return</span> ws</div><div class=\"line\">            <span class=\"keyword\">break</span></div><div class=\"line\">        <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> err:</div><div class=\"line\">            print(err)</div><div class=\"line\">            <span class=\"comment\">#print('connect ws error,retry...')</span></div><div class=\"line\">            time.sleep(<span class=\"number\">1</span>)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getsubconfig</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"comment\"># 统计参数</span></div><div class=\"line\">    tradeStr=[</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.elfusdt.trade.detail\"&#125;\"\"\"</span>,</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.btcusdt.trade.detail\"&#125;\"\"\"</span>,</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.htusdt.trade.detail\"&#125;\"\"\"</span>,</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.swftcbtc.trade.detail\"&#125;\"\"\"</span>,</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.topcbtc.trade.detail\"&#125;\"\"\"</span>,</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.bchusdt.trade.detail\"&#125;\"\"\"</span>,</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.ethusdt.trade.detail\"&#125;\"\"\"</span>,</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.etcusdt.trade.detail\"&#125;\"\"\"</span>,</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.eosusdt.trade.detail\"&#125;\"\"\"</span>,</div><div class=\"line\">              <span class=\"string\">\"\"\"&#123;\"sub\": \"market.ltcusdt.trade.detail\"&#125;\"\"\"</span></div><div class=\"line\">              ]</div><div class=\"line\">    <span class=\"keyword\">return</span> tradeStr</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 订阅</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sub</span><span class=\"params\">(ws,tradeStr)</span>:</span></div><div class=\"line\">    ws.send(tradeStr)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 获取返回</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getResponse</span><span class=\"params\">(ws)</span>:</span></div><div class=\"line\">    db = connect_mysql.connect()</div><div class=\"line\">    <span class=\"keyword\">while</span> <span class=\"number\">1</span> :</div><div class=\"line\">        <span class=\"keyword\">try</span> :</div><div class=\"line\">            compressData=ws.recv()</div><div class=\"line\">        <span class=\"keyword\">except</span> Exception :</div><div class=\"line\">            ws=connect()</div><div class=\"line\">            subCoin(ws)</div><div class=\"line\">            print(<span class=\"string\">'链接异常'</span>)</div><div class=\"line\">        <span class=\"keyword\">try</span> :</div><div class=\"line\">            result=gzip.decompress(compressData).decode(<span class=\"string\">'utf-8'</span>)</div><div class=\"line\">        <span class=\"keyword\">except</span>:</div><div class=\"line\">            print(<span class=\"string\">'丢包解析异常'</span>)</div><div class=\"line\">            <span class=\"keyword\">continue</span></div><div class=\"line\">        <span class=\"keyword\">if</span> result[:<span class=\"number\">7</span>] == <span class=\"string\">'&#123;\"ping\"'</span>:</div><div class=\"line\">            ts=result[<span class=\"number\">8</span>:<span class=\"number\">21</span>]</div><div class=\"line\">            <span class=\"comment\">#print('心跳包',ts)</span></div><div class=\"line\">            pong=<span class=\"string\">'&#123;\"pong\":'</span>+ts+<span class=\"string\">'&#125;'</span></div><div class=\"line\">            ws.send(pong)</div><div class=\"line\">        <span class=\"keyword\">else</span>:</div><div class=\"line\">            <span class=\"keyword\">if</span> result[:<span class=\"number\">5</span>] == <span class=\"string\">'&#123;\"ch\"'</span>:</div><div class=\"line\">                result = json.loads(result)</div><div class=\"line\">                print(result)</div><div class=\"line\">                <span class=\"comment\">#print('------------------------------------------------------')</span></div><div class=\"line\">                n = <span class=\"number\">0</span></div><div class=\"line\">                <span class=\"keyword\">while</span> n &lt; len(result[<span class=\"string\">'tick'</span>][<span class=\"string\">'data'</span>]) :</div><div class=\"line\">                    connect_mysql.commit(<span class=\"string\">'%s'</span> % result[<span class=\"string\">'ch'</span>].split(<span class=\"string\">'.'</span>)[<span class=\"number\">1</span>],result[<span class=\"string\">'tick'</span>][<span class=\"string\">'data'</span>][n][<span class=\"string\">'price'</span>],result[<span class=\"string\">'tick'</span>][<span class=\"string\">'data'</span>][n][<span class=\"string\">'amount'</span>],<span class=\"string\">\"'%s'\"</span> % result[<span class=\"string\">\"tick\"</span>][<span class=\"string\">\"data\"</span>][n][<span class=\"string\">\"direction\"</span>], <span class=\"string\">\"'%s'\"</span> % result[<span class=\"string\">'ch'</span>].split(<span class=\"string\">'.'</span>)[<span class=\"number\">1</span>],db);</div><div class=\"line\">                    n += <span class=\"number\">1</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 订阅</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">subCoin</span><span class=\"params\">(ws)</span>:</span></div><div class=\"line\">    tradeStr=getsubconfig()</div><div class=\"line\">    i = <span class=\"number\">0</span></div><div class=\"line\">    <span class=\"keyword\">while</span> i &lt; len(tradeStr) :</div><div class=\"line\">            sub(ws,tradeStr[i])</div><div class=\"line\">            i += <span class=\"number\">1</span></div><div class=\"line\"><span class=\"comment\"># 主函数</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    ws=connect()</div><div class=\"line\">    subCoin(ws)</div><div class=\"line\">    getResponse(ws)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    main()</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">### 文件二:</div><div class=\"line\"></div><div class=\"line\">```python</div><div class=\"line\">import json</div><div class=\"line\">import pymysql</div><div class=\"line\">import time</div><div class=\"line\"></div><div class=\"line\">class connect_mysql():</div><div class=\"line\">    db = &apos;&apos;</div><div class=\"line\">    def connect() :</div><div class=\"line\">            db = connect_mysql.db = pymysql.connect(&quot;localhost&quot;, &quot;root&quot;, &quot;root&quot;, &quot;huobi&quot;, charset=&apos;utf8&apos; )</div><div class=\"line\">            return db</div><div class=\"line\"></div><div class=\"line\">    def commit(table, price, amount, action, coin_type, db) :</div><div class=\"line\"></div><div class=\"line\">        try:</div><div class=\"line\">            cursor = db.cursor()</div><div class=\"line\">            sql = &quot;INSERT INTO %s_success_order(action,order_amount, price, coin_type)VALUES (%s, %.10f, %.10f,%s )&quot; % (table,action, amount, price,coin_type )</div><div class=\"line\">            cursor.execute(sql)</div><div class=\"line\">           # 提交到数据库执行</div><div class=\"line\">            db.commit()</div><div class=\"line\">        except Exception as e:</div><div class=\"line\">            db = connect_mysql.db = pymysql.connect(&quot;localhost&quot;, &quot;root&quot;, &quot;root&quot;, &quot;huobi&quot;, charset=&apos;utf8&apos; )</div><div class=\"line\">            commit(table, price, amount, action, coin_type, db)</div><div class=\"line\">        return</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    def connect_close() :</div><div class=\"line\">        connect_mysql.db.close()</div></pre></td></tr></table></figure>\n<p>文件二是单线程和多线程版的公用文件</p>\n<h1 id=\"shell-脚本\"><a href=\"#shell-脚本\" class=\"headerlink\" title=\"shell 脚本\"></a>shell 脚本</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">#!/bin/bash</div><div class=\"line\">total=1</div><div class=\"line\">avaliable=`ps -ef | grep -w huobi.py | grep -v grep | wc -l`</div><div class=\"line\">diff=`expr $total - $avaliable`</div><div class=\"line\">#echo $diff &gt;&gt; /home/script/diff.text</div><div class=\"line\">#echo $total &gt;&gt; /home/script/diff.text</div><div class=\"line\">#echo $avaliable &gt;&gt; /home/script/diff.text</div><div class=\"line\">if [ $diff -gt 0 ];then</div><div class=\"line\">        for((i=0;i&lt;$diff;i++));do</div><div class=\"line\">                 /usr/local/bin/python3 /home/script/huobi.py &gt;&gt; /home/script/huobi.out</div><div class=\"line\">        done</div><div class=\"line\">fi</div></pre></td></tr></table></figure>\n<h1 id=\"crontab-配置\"><a href=\"#crontab-配置\" class=\"headerlink\" title=\"crontab 配置\"></a>crontab 配置</h1><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">MAILTO=<span class=\"string\">\"\"</span></div><div class=\"line\"></div><div class=\"line\">* * * * * sudo /bin/bash /home/script/huobi.sh</div></pre></td></tr></table></figure>\n<p><strong>注意事项</strong>：<br>在写shell脚本时，尽量用绝对路径。</p>\n"},{"title":"一次HTTP请求","date":"2017-11-20T12:09:23.000Z","_content":"\n#一次完整的HTTP请求，以及请求方式的区别\n\n-----\n今天在对接业务组mas时候遇到一个很少遇到的问题，发送一个一个不但参数的POST的请求。\n在我的印象里传参好像必带名字，因为就像一个你不认识的人要来你家，你肯定不会让他进来的。\n所以重新缕了一下POST请求，冲冲能。\n\n##一次HTTP请求的过程\n\n访问某个网址，例如我们访问www.baidu.com\n浏览器会和百度的服务器进行三次握手（中间的域名解析等暂不考虑）\n然后是程序层面的信息请求与提交\n\n三次握手->get或者post请求\n\n1） Client首先发送一个连接试探，ACK=0 表示确认号无效，SYN = 1 表示这是一个连接请求或连接接受报文，同时表示这个数据报不能携带数据，seq = x 表示Client自己的初始序号（seq = 0 就代表这是第0号包），这时候Client进入syn_sent状态，表示客户端等待服务器的回复\n\n2） Server监听到连接请求报文后，如同意建立连接，则向Client发送确认。TCP报文首部中的SYN 和 ACK都置1 ，ack = x + 1表示期望收到对方下一个报文段的第一个数据字节序号是x+1，同时表明x为止的所有数据都已正确收到（ack=1其实是ack=0+1,也就是期望客户端的第1个包），seq = y 表示Server 自己的初始序号（seq=0就代表这是服务器这边发出的第0号包）。这时服务器进入syn_rcvd，表示服务器已经收到Client的连接请求，等待client的确认。\n\n3） Client收到确认后还需再次发送确认，同时携带要发送给Server的数据。ACK 置1 表示确认号ack= y + 1 有效（代表期望收到服务器的第1个包），Client自己的序号seq= x + 1（表示这就是我的第1个包，相对于第0个包来说的），一旦收到Client的确认之后，这个TCP连接就进入Established状态，就可以发起http请求了。\n\n## post请求\nHTTP 协议是以 ASCII 码传输，建立在TCP/IP协议之上的应用层规范，规范把 HTTP 请求分为三个部分：状态行、请求头、消息主体。类似于下面这样：\n<method> <request-url> <version>\n<headers>\n<entity-body></entity-body></headers></version></request-url></method>\n协议规定 POST 提交的数据必须放在消息主体（entity-body）中，但协议并没有规定数据必须使用什么编码方式。实际上，开发者完全可以自己决定消息主体的格式，只要最后发送的 HTTP 请求满足上面的格式就可以。\n\n但是，数据发送出去，还要服务端解析成功才有意义。一般服务端语言如 php、python 等，以及它们的 framework，都内置了自动解析常见数据格式的功能。服务端通常是根据请求头（headers）中的 Content-Type 字段来获知请求中的消息主体是用何种方式编码，再对主体进行解析。所以说到 POST 提交数据方案，包含了 Content-Type 和消息主体编码方式两部分。下面就正式开始介绍它们。\n\n\nheader\nContent-Type，内容类型，一般是指网页中存在的Content-Type，用于定义网络文件的类型和网页的编码，决定文件接收方将以什么形式、什么编码读取这个文件.\n当然还有UA等其他头信息，\n\nContent-Type对照表：http://tool.oschina.net/commons\n\n说几种常见的Content-Type\n\n1.application/x-www-form-urlencoded\n这个就是我们常见form表格提的方式\n\n2.multipart/form-data\n\n这又是一个常见的 POST 数据提交的方式。我们使用表单上传文件时，必须让 form 的 enctyped 等于这个值。直接来看一个请求示例\n\n3.application/json\n\napplication/json 这个 Content-Type 作为响应头大家肯定不陌生。实际上，现在越来越多的人把它作为请求头，用来告诉服务端消息主体是序列化后的 JSON 字符串。由于 JSON 规范的流行，除了低版本 IE 之外的各大浏览器都原生支持 JSON.stringify，服务端语言也都有处理 JSON 的函数，使用 JSON 不会遇上什么麻烦。\n\nso 用这种格式就可以传递非Key Val的数据\n","source":"_posts/一次HTTP请求.md","raw":"---\ntitle: 一次HTTP请求\ndate: 2017-11-20 20:09:23\ntags:\n---\n\n#一次完整的HTTP请求，以及请求方式的区别\n\n-----\n今天在对接业务组mas时候遇到一个很少遇到的问题，发送一个一个不但参数的POST的请求。\n在我的印象里传参好像必带名字，因为就像一个你不认识的人要来你家，你肯定不会让他进来的。\n所以重新缕了一下POST请求，冲冲能。\n\n##一次HTTP请求的过程\n\n访问某个网址，例如我们访问www.baidu.com\n浏览器会和百度的服务器进行三次握手（中间的域名解析等暂不考虑）\n然后是程序层面的信息请求与提交\n\n三次握手->get或者post请求\n\n1） Client首先发送一个连接试探，ACK=0 表示确认号无效，SYN = 1 表示这是一个连接请求或连接接受报文，同时表示这个数据报不能携带数据，seq = x 表示Client自己的初始序号（seq = 0 就代表这是第0号包），这时候Client进入syn_sent状态，表示客户端等待服务器的回复\n\n2） Server监听到连接请求报文后，如同意建立连接，则向Client发送确认。TCP报文首部中的SYN 和 ACK都置1 ，ack = x + 1表示期望收到对方下一个报文段的第一个数据字节序号是x+1，同时表明x为止的所有数据都已正确收到（ack=1其实是ack=0+1,也就是期望客户端的第1个包），seq = y 表示Server 自己的初始序号（seq=0就代表这是服务器这边发出的第0号包）。这时服务器进入syn_rcvd，表示服务器已经收到Client的连接请求，等待client的确认。\n\n3） Client收到确认后还需再次发送确认，同时携带要发送给Server的数据。ACK 置1 表示确认号ack= y + 1 有效（代表期望收到服务器的第1个包），Client自己的序号seq= x + 1（表示这就是我的第1个包，相对于第0个包来说的），一旦收到Client的确认之后，这个TCP连接就进入Established状态，就可以发起http请求了。\n\n## post请求\nHTTP 协议是以 ASCII 码传输，建立在TCP/IP协议之上的应用层规范，规范把 HTTP 请求分为三个部分：状态行、请求头、消息主体。类似于下面这样：\n<method> <request-url> <version>\n<headers>\n<entity-body></entity-body></headers></version></request-url></method>\n协议规定 POST 提交的数据必须放在消息主体（entity-body）中，但协议并没有规定数据必须使用什么编码方式。实际上，开发者完全可以自己决定消息主体的格式，只要最后发送的 HTTP 请求满足上面的格式就可以。\n\n但是，数据发送出去，还要服务端解析成功才有意义。一般服务端语言如 php、python 等，以及它们的 framework，都内置了自动解析常见数据格式的功能。服务端通常是根据请求头（headers）中的 Content-Type 字段来获知请求中的消息主体是用何种方式编码，再对主体进行解析。所以说到 POST 提交数据方案，包含了 Content-Type 和消息主体编码方式两部分。下面就正式开始介绍它们。\n\n\nheader\nContent-Type，内容类型，一般是指网页中存在的Content-Type，用于定义网络文件的类型和网页的编码，决定文件接收方将以什么形式、什么编码读取这个文件.\n当然还有UA等其他头信息，\n\nContent-Type对照表：http://tool.oschina.net/commons\n\n说几种常见的Content-Type\n\n1.application/x-www-form-urlencoded\n这个就是我们常见form表格提的方式\n\n2.multipart/form-data\n\n这又是一个常见的 POST 数据提交的方式。我们使用表单上传文件时，必须让 form 的 enctyped 等于这个值。直接来看一个请求示例\n\n3.application/json\n\napplication/json 这个 Content-Type 作为响应头大家肯定不陌生。实际上，现在越来越多的人把它作为请求头，用来告诉服务端消息主体是序列化后的 JSON 字符串。由于 JSON 规范的流行，除了低版本 IE 之外的各大浏览器都原生支持 JSON.stringify，服务端语言也都有处理 JSON 的函数，使用 JSON 不会遇上什么麻烦。\n\nso 用这种格式就可以传递非Key Val的数据\n","slug":"一次HTTP请求","published":1,"updated":"2017-11-21T03:01:53.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlz6uwh7000m0uwwyfjgf21t","content":"<p>#一次完整的HTTP请求，以及请求方式的区别</p>\n<hr>\n<p>今天在对接业务组mas时候遇到一个很少遇到的问题，发送一个一个不但参数的POST的请求。<br>在我的印象里传参好像必带名字，因为就像一个你不认识的人要来你家，你肯定不会让他进来的。<br>所以重新缕了一下POST请求，冲冲能。</p>\n<p>##一次HTTP请求的过程</p>\n<p>访问某个网址，例如我们访问www.baidu.com<br>浏览器会和百度的服务器进行三次握手（中间的域名解析等暂不考虑）<br>然后是程序层面的信息请求与提交</p>\n<p>三次握手-&gt;get或者post请求</p>\n<p>1） Client首先发送一个连接试探，ACK=0 表示确认号无效，SYN = 1 表示这是一个连接请求或连接接受报文，同时表示这个数据报不能携带数据，seq = x 表示Client自己的初始序号（seq = 0 就代表这是第0号包），这时候Client进入syn_sent状态，表示客户端等待服务器的回复</p>\n<p>2） Server监听到连接请求报文后，如同意建立连接，则向Client发送确认。TCP报文首部中的SYN 和 ACK都置1 ，ack = x + 1表示期望收到对方下一个报文段的第一个数据字节序号是x+1，同时表明x为止的所有数据都已正确收到（ack=1其实是ack=0+1,也就是期望客户端的第1个包），seq = y 表示Server 自己的初始序号（seq=0就代表这是服务器这边发出的第0号包）。这时服务器进入syn_rcvd，表示服务器已经收到Client的连接请求，等待client的确认。</p>\n<p>3） Client收到确认后还需再次发送确认，同时携带要发送给Server的数据。ACK 置1 表示确认号ack= y + 1 有效（代表期望收到服务器的第1个包），Client自己的序号seq= x + 1（表示这就是我的第1个包，相对于第0个包来说的），一旦收到Client的确认之后，这个TCP连接就进入Established状态，就可以发起http请求了。</p>\n<h2 id=\"post请求\"><a href=\"#post请求\" class=\"headerlink\" title=\"post请求\"></a>post请求</h2><p>HTTP 协议是以 ASCII 码传输，建立在TCP/IP协议之上的应用层规范，规范把 HTTP 请求分为三个部分：状态行、请求头、消息主体。类似于下面这样：</p>\n<p><method> <request-url> <version></version></request-url></method></p>\n<p><headers></headers></p>\n<p><entity-body></entity-body><br>协议规定 POST 提交的数据必须放在消息主体（entity-body）中，但协议并没有规定数据必须使用什么编码方式。实际上，开发者完全可以自己决定消息主体的格式，只要最后发送的 HTTP 请求满足上面的格式就可以。</p>\n<p>但是，数据发送出去，还要服务端解析成功才有意义。一般服务端语言如 php、python 等，以及它们的 framework，都内置了自动解析常见数据格式的功能。服务端通常是根据请求头（headers）中的 Content-Type 字段来获知请求中的消息主体是用何种方式编码，再对主体进行解析。所以说到 POST 提交数据方案，包含了 Content-Type 和消息主体编码方式两部分。下面就正式开始介绍它们。</p>\n<p>header<br>Content-Type，内容类型，一般是指网页中存在的Content-Type，用于定义网络文件的类型和网页的编码，决定文件接收方将以什么形式、什么编码读取这个文件.<br>当然还有UA等其他头信息，</p>\n<p>Content-Type对照表：<a href=\"http://tool.oschina.net/commons\" target=\"_blank\" rel=\"noopener\">http://tool.oschina.net/commons</a></p>\n<p>说几种常见的Content-Type</p>\n<p>1.application/x-www-form-urlencoded<br>这个就是我们常见form表格提的方式</p>\n<p>2.multipart/form-data</p>\n<p>这又是一个常见的 POST 数据提交的方式。我们使用表单上传文件时，必须让 form 的 enctyped 等于这个值。直接来看一个请求示例</p>\n<p>3.application/json</p>\n<p>application/json 这个 Content-Type 作为响应头大家肯定不陌生。实际上，现在越来越多的人把它作为请求头，用来告诉服务端消息主体是序列化后的 JSON 字符串。由于 JSON 规范的流行，除了低版本 IE 之外的各大浏览器都原生支持 JSON.stringify，服务端语言也都有处理 JSON 的函数，使用 JSON 不会遇上什么麻烦。</p>\n<p>so 用这种格式就可以传递非Key Val的数据</p>\n","site":{"data":{}},"excerpt":"","more":"<p>#一次完整的HTTP请求，以及请求方式的区别</p>\n<hr>\n<p>今天在对接业务组mas时候遇到一个很少遇到的问题，发送一个一个不但参数的POST的请求。<br>在我的印象里传参好像必带名字，因为就像一个你不认识的人要来你家，你肯定不会让他进来的。<br>所以重新缕了一下POST请求，冲冲能。</p>\n<p>##一次HTTP请求的过程</p>\n<p>访问某个网址，例如我们访问www.baidu.com<br>浏览器会和百度的服务器进行三次握手（中间的域名解析等暂不考虑）<br>然后是程序层面的信息请求与提交</p>\n<p>三次握手-&gt;get或者post请求</p>\n<p>1） Client首先发送一个连接试探，ACK=0 表示确认号无效，SYN = 1 表示这是一个连接请求或连接接受报文，同时表示这个数据报不能携带数据，seq = x 表示Client自己的初始序号（seq = 0 就代表这是第0号包），这时候Client进入syn_sent状态，表示客户端等待服务器的回复</p>\n<p>2） Server监听到连接请求报文后，如同意建立连接，则向Client发送确认。TCP报文首部中的SYN 和 ACK都置1 ，ack = x + 1表示期望收到对方下一个报文段的第一个数据字节序号是x+1，同时表明x为止的所有数据都已正确收到（ack=1其实是ack=0+1,也就是期望客户端的第1个包），seq = y 表示Server 自己的初始序号（seq=0就代表这是服务器这边发出的第0号包）。这时服务器进入syn_rcvd，表示服务器已经收到Client的连接请求，等待client的确认。</p>\n<p>3） Client收到确认后还需再次发送确认，同时携带要发送给Server的数据。ACK 置1 表示确认号ack= y + 1 有效（代表期望收到服务器的第1个包），Client自己的序号seq= x + 1（表示这就是我的第1个包，相对于第0个包来说的），一旦收到Client的确认之后，这个TCP连接就进入Established状态，就可以发起http请求了。</p>\n<h2 id=\"post请求\"><a href=\"#post请求\" class=\"headerlink\" title=\"post请求\"></a>post请求</h2><p>HTTP 协议是以 ASCII 码传输，建立在TCP/IP协议之上的应用层规范，规范把 HTTP 请求分为三个部分：状态行、请求头、消息主体。类似于下面这样：</p>\n<p><method> <request-url> <version></version></request-url></method></p>\n<p><headers></headers></p>\n<p><entity-body></entity-body><br>协议规定 POST 提交的数据必须放在消息主体（entity-body）中，但协议并没有规定数据必须使用什么编码方式。实际上，开发者完全可以自己决定消息主体的格式，只要最后发送的 HTTP 请求满足上面的格式就可以。</p>\n<p>但是，数据发送出去，还要服务端解析成功才有意义。一般服务端语言如 php、python 等，以及它们的 framework，都内置了自动解析常见数据格式的功能。服务端通常是根据请求头（headers）中的 Content-Type 字段来获知请求中的消息主体是用何种方式编码，再对主体进行解析。所以说到 POST 提交数据方案，包含了 Content-Type 和消息主体编码方式两部分。下面就正式开始介绍它们。</p>\n<p>header<br>Content-Type，内容类型，一般是指网页中存在的Content-Type，用于定义网络文件的类型和网页的编码，决定文件接收方将以什么形式、什么编码读取这个文件.<br>当然还有UA等其他头信息，</p>\n<p>Content-Type对照表：<a href=\"http://tool.oschina.net/commons\" target=\"_blank\" rel=\"noopener\">http://tool.oschina.net/commons</a></p>\n<p>说几种常见的Content-Type</p>\n<p>1.application/x-www-form-urlencoded<br>这个就是我们常见form表格提的方式</p>\n<p>2.multipart/form-data</p>\n<p>这又是一个常见的 POST 数据提交的方式。我们使用表单上传文件时，必须让 form 的 enctyped 等于这个值。直接来看一个请求示例</p>\n<p>3.application/json</p>\n<p>application/json 这个 Content-Type 作为响应头大家肯定不陌生。实际上，现在越来越多的人把它作为请求头，用来告诉服务端消息主体是序列化后的 JSON 字符串。由于 JSON 规范的流行，除了低版本 IE 之外的各大浏览器都原生支持 JSON.stringify，服务端语言也都有处理 JSON 的函数，使用 JSON 不会遇上什么麻烦。</p>\n<p>so 用这种格式就可以传递非Key Val的数据</p>\n"},{"title":"Item2使用sz rz命令从服务下载上传文件","date":"2018-07-12T13:27:37.000Z","_content":"\n## 背景\n如何从linux服务下载/上传文件\n\n - 使用scp命令\n - 使用sz命令\n\n\n这里主要介绍使用sz命令下载文件\n\n## 安装\n - 安装lrzsz `hobrew install llssz`\n - 在本地编写shell用于接受sz命令下载下来的文件\n\n上传shell\n\n`iterm2-send-zmodem.sh`\n```\n    #!/bin/bash\n    \n    \n    #Author: Matt Mastracci (matthew@mastracci.com)\n    \n    \n    # AppleScript from http://stackoverflow.com/questions/4309087/cancel-button-on-osascript-in-a-bash-script\n    \n    \n    # licensed under cc-wiki with attribution required\n    \n    \n    # Remainder of script public domain\n    \n    \n    osascript -e 'tell application \"iTerm2\" to version' > /dev/null 2>&1 && NAME=iTerm2 || NAME=iTerm\n    if [[ $NAME = \"iTerm\" ]]; then\n        FILE=`osascript -e 'tell application \"iTerm\" to activate' -e 'tell application \"iTerm\" to set thefile to choose file with prompt \"Choose a file to send\"' -e \"do shell script (\\\"echo \\\"&(quoted form of POSIX path of thefile as Unicode text)&\\\"\\\")\"`\n    else\n        FILE=`osascript -e 'tell application \"iTerm2\" to activate' -e 'tell application \"iTerm2\" to set thefile to choose file with prompt \"Choose a file to send\"' -e \"do shell script (\\\"echo \\\"&(quoted form of POSIX path of thefile as Unicode text)&\\\"\\\")\"`\n    fi\n    if [[ $FILE = \"\" ]]; then\n        echo Cancelled.\n        # Send ZModem cancel\n        echo -e \\\\x18\\\\x18\\\\x18\\\\x18\\\\x18\n        sleep 1\n        echo\n        echo \\# Cancelled transfer\n    else\n        /usr/local/bin/sz \"$FILE\" -e -b\n        sleep 1\n        echo\n        echo \\# Received $FILE\n    fi  \n```\n\n下载shell\n\n`iterm2-recv-zmodem.sh`\n\n```\n    #!/bin/bash\n    # Author: Matt Mastracci (matthew@mastracci.com)\n    # AppleScript from http://stackoverflow.com/questions/4309087/cancel-button-on-osascript-in-a-bash-script\n    # licensed under cc-wiki with attribution required \n    # Remainder of script public domain\n\n    osascript -e 'tell application \"iTerm2\" to version' > /dev/null 2>&1 && NAME=iTerm2 || NAME=iTerm\n    if [[ $NAME = \"iTerm\" ]]; then\n        FILE=`osascript -e 'tell application \"iTerm\" to activate' -e 'tell application \"iTerm\" to set thefile to choose folder with prompt \"Choose a folder to place received files in\"' -e \"do shell script (\\\"echo \\\"&(quoted form of POSIX path of thefile as Unicode text)&\\\"\\\")\"`\n    else\n        FILE=`osascript -e 'tell application \"iTerm2\" to activate' -e 'tell application \"iTerm2\" to set thefile to choose folder with prompt \"Choose a folder to place received files in\"' -e \"do shell script (\\\"echo \\\"&(quoted form of POSIX path of thefile as Unicode text)&\\\"\\\")\"`\n    fi\n\n    if [[ $FILE = \"\" ]]; then\n        echo Cancelled.\n        # Send ZModem cancel\n        echo -e \\\\x18\\\\x18\\\\x18\\\\x18\\\\x18\n        sleep 1\n        echo\n        echo \\# Cancelled transfer\n    else\n        cd \"$FILE\"\n        /usr/local/bin/rz -E -e -b\n        sleep 1\n        echo\n        echo\n        echo \\# Sent \\-\\> $FILE\n    fi\n```\n## 配置iterm2\n\n- 设置Iterm2的Tirgger特性，profiles-default-editProfiles-Advanced中的Tirgger\n\n```\n    添加两条trigger，分别设置Regular expression，Action，Parameters，Instant如下：\n        1.第一条\n            Regular expression: rz waiting to receive.\\*\\*B0100\n            Action: Run Silent Coprocess\n            Parameters: /usr/local/bin/iterm2-send-zmodem.sh\n            Instant: checked\n        2.第二条\n            Regular expression: \\*\\*B00000000000000\n            Action: Run Silent Coprocess\n            Parameters: /usr/local/bin/iterm2-recv-zmodem.sh\n            Instant: checked\n```\n\n**备注**:注意两个文件的权限","source":"_posts/使用sz-rz命令从服务下载上传文件.md","raw":"---\ntitle: Item2使用sz rz命令从服务下载上传文件\ndate: 2018-07-12 21:27:37\ntags:\n---\n\n## 背景\n如何从linux服务下载/上传文件\n\n - 使用scp命令\n - 使用sz命令\n\n\n这里主要介绍使用sz命令下载文件\n\n## 安装\n - 安装lrzsz `hobrew install llssz`\n - 在本地编写shell用于接受sz命令下载下来的文件\n\n上传shell\n\n`iterm2-send-zmodem.sh`\n```\n    #!/bin/bash\n    \n    \n    #Author: Matt Mastracci (matthew@mastracci.com)\n    \n    \n    # AppleScript from http://stackoverflow.com/questions/4309087/cancel-button-on-osascript-in-a-bash-script\n    \n    \n    # licensed under cc-wiki with attribution required\n    \n    \n    # Remainder of script public domain\n    \n    \n    osascript -e 'tell application \"iTerm2\" to version' > /dev/null 2>&1 && NAME=iTerm2 || NAME=iTerm\n    if [[ $NAME = \"iTerm\" ]]; then\n        FILE=`osascript -e 'tell application \"iTerm\" to activate' -e 'tell application \"iTerm\" to set thefile to choose file with prompt \"Choose a file to send\"' -e \"do shell script (\\\"echo \\\"&(quoted form of POSIX path of thefile as Unicode text)&\\\"\\\")\"`\n    else\n        FILE=`osascript -e 'tell application \"iTerm2\" to activate' -e 'tell application \"iTerm2\" to set thefile to choose file with prompt \"Choose a file to send\"' -e \"do shell script (\\\"echo \\\"&(quoted form of POSIX path of thefile as Unicode text)&\\\"\\\")\"`\n    fi\n    if [[ $FILE = \"\" ]]; then\n        echo Cancelled.\n        # Send ZModem cancel\n        echo -e \\\\x18\\\\x18\\\\x18\\\\x18\\\\x18\n        sleep 1\n        echo\n        echo \\# Cancelled transfer\n    else\n        /usr/local/bin/sz \"$FILE\" -e -b\n        sleep 1\n        echo\n        echo \\# Received $FILE\n    fi  \n```\n\n下载shell\n\n`iterm2-recv-zmodem.sh`\n\n```\n    #!/bin/bash\n    # Author: Matt Mastracci (matthew@mastracci.com)\n    # AppleScript from http://stackoverflow.com/questions/4309087/cancel-button-on-osascript-in-a-bash-script\n    # licensed under cc-wiki with attribution required \n    # Remainder of script public domain\n\n    osascript -e 'tell application \"iTerm2\" to version' > /dev/null 2>&1 && NAME=iTerm2 || NAME=iTerm\n    if [[ $NAME = \"iTerm\" ]]; then\n        FILE=`osascript -e 'tell application \"iTerm\" to activate' -e 'tell application \"iTerm\" to set thefile to choose folder with prompt \"Choose a folder to place received files in\"' -e \"do shell script (\\\"echo \\\"&(quoted form of POSIX path of thefile as Unicode text)&\\\"\\\")\"`\n    else\n        FILE=`osascript -e 'tell application \"iTerm2\" to activate' -e 'tell application \"iTerm2\" to set thefile to choose folder with prompt \"Choose a folder to place received files in\"' -e \"do shell script (\\\"echo \\\"&(quoted form of POSIX path of thefile as Unicode text)&\\\"\\\")\"`\n    fi\n\n    if [[ $FILE = \"\" ]]; then\n        echo Cancelled.\n        # Send ZModem cancel\n        echo -e \\\\x18\\\\x18\\\\x18\\\\x18\\\\x18\n        sleep 1\n        echo\n        echo \\# Cancelled transfer\n    else\n        cd \"$FILE\"\n        /usr/local/bin/rz -E -e -b\n        sleep 1\n        echo\n        echo\n        echo \\# Sent \\-\\> $FILE\n    fi\n```\n## 配置iterm2\n\n- 设置Iterm2的Tirgger特性，profiles-default-editProfiles-Advanced中的Tirgger\n\n```\n    添加两条trigger，分别设置Regular expression，Action，Parameters，Instant如下：\n        1.第一条\n            Regular expression: rz waiting to receive.\\*\\*B0100\n            Action: Run Silent Coprocess\n            Parameters: /usr/local/bin/iterm2-send-zmodem.sh\n            Instant: checked\n        2.第二条\n            Regular expression: \\*\\*B00000000000000\n            Action: Run Silent Coprocess\n            Parameters: /usr/local/bin/iterm2-recv-zmodem.sh\n            Instant: checked\n```\n\n**备注**:注意两个文件的权限","slug":"使用sz-rz命令从服务下载上传文件","published":1,"updated":"2018-07-12T13:42:45.196Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlz6uwh9000o0uwwq5aymb1y","content":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>如何从linux服务下载/上传文件</p>\n<ul>\n<li>使用scp命令</li>\n<li>使用sz命令</li>\n</ul>\n<p>这里主要介绍使用sz命令下载文件</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><ul>\n<li>安装lrzsz <code>hobrew install llssz</code></li>\n<li>在本地编写shell用于接受sz命令下载下来的文件</li>\n</ul>\n<p>上传shell</p>\n<p><code>iterm2-send-zmodem.sh</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\">#!/bin/bash</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">#Author: Matt Mastracci (matthew@mastracci.com)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"># AppleScript from http://stackoverflow.com/questions/4309087/cancel-button-on-osascript-in-a-bash-script</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"># licensed under cc-wiki with attribution required</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"># Remainder of script public domain</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">osascript -e &apos;tell application &quot;iTerm2&quot; to version&apos; &gt; /dev/null 2&gt;&amp;1 &amp;&amp; NAME=iTerm2 || NAME=iTerm</div><div class=\"line\">if [[ $NAME = &quot;iTerm&quot; ]]; then</div><div class=\"line\">    FILE=`osascript -e &apos;tell application &quot;iTerm&quot; to activate&apos; -e &apos;tell application &quot;iTerm&quot; to set thefile to choose file with prompt &quot;Choose a file to send&quot;&apos; -e &quot;do shell script (\\&quot;echo \\&quot;&amp;(quoted form of POSIX path of thefile as Unicode text)&amp;\\&quot;\\&quot;)&quot;`</div><div class=\"line\">else</div><div class=\"line\">    FILE=`osascript -e &apos;tell application &quot;iTerm2&quot; to activate&apos; -e &apos;tell application &quot;iTerm2&quot; to set thefile to choose file with prompt &quot;Choose a file to send&quot;&apos; -e &quot;do shell script (\\&quot;echo \\&quot;&amp;(quoted form of POSIX path of thefile as Unicode text)&amp;\\&quot;\\&quot;)&quot;`</div><div class=\"line\">fi</div><div class=\"line\">if [[ $FILE = &quot;&quot; ]]; then</div><div class=\"line\">    echo Cancelled.</div><div class=\"line\">    # Send ZModem cancel</div><div class=\"line\">    echo -e \\\\x18\\\\x18\\\\x18\\\\x18\\\\x18</div><div class=\"line\">    sleep 1</div><div class=\"line\">    echo</div><div class=\"line\">    echo \\# Cancelled transfer</div><div class=\"line\">else</div><div class=\"line\">    /usr/local/bin/sz &quot;$FILE&quot; -e -b</div><div class=\"line\">    sleep 1</div><div class=\"line\">    echo</div><div class=\"line\">    echo \\# Received $FILE</div><div class=\"line\">fi</div></pre></td></tr></table></figure></p>\n<p>下载shell</p>\n<p><code>iterm2-recv-zmodem.sh</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">#!/bin/bash</div><div class=\"line\"># Author: Matt Mastracci (matthew@mastracci.com)</div><div class=\"line\"># AppleScript from http://stackoverflow.com/questions/4309087/cancel-button-on-osascript-in-a-bash-script</div><div class=\"line\"># licensed under cc-wiki with attribution required </div><div class=\"line\"># Remainder of script public domain</div><div class=\"line\"></div><div class=\"line\">osascript -e &apos;tell application &quot;iTerm2&quot; to version&apos; &gt; /dev/null 2&gt;&amp;1 &amp;&amp; NAME=iTerm2 || NAME=iTerm</div><div class=\"line\">if [[ $NAME = &quot;iTerm&quot; ]]; then</div><div class=\"line\">    FILE=`osascript -e &apos;tell application &quot;iTerm&quot; to activate&apos; -e &apos;tell application &quot;iTerm&quot; to set thefile to choose folder with prompt &quot;Choose a folder to place received files in&quot;&apos; -e &quot;do shell script (\\&quot;echo \\&quot;&amp;(quoted form of POSIX path of thefile as Unicode text)&amp;\\&quot;\\&quot;)&quot;`</div><div class=\"line\">else</div><div class=\"line\">    FILE=`osascript -e &apos;tell application &quot;iTerm2&quot; to activate&apos; -e &apos;tell application &quot;iTerm2&quot; to set thefile to choose folder with prompt &quot;Choose a folder to place received files in&quot;&apos; -e &quot;do shell script (\\&quot;echo \\&quot;&amp;(quoted form of POSIX path of thefile as Unicode text)&amp;\\&quot;\\&quot;)&quot;`</div><div class=\"line\">fi</div><div class=\"line\"></div><div class=\"line\">if [[ $FILE = &quot;&quot; ]]; then</div><div class=\"line\">    echo Cancelled.</div><div class=\"line\">    # Send ZModem cancel</div><div class=\"line\">    echo -e \\\\x18\\\\x18\\\\x18\\\\x18\\\\x18</div><div class=\"line\">    sleep 1</div><div class=\"line\">    echo</div><div class=\"line\">    echo \\# Cancelled transfer</div><div class=\"line\">else</div><div class=\"line\">    cd &quot;$FILE&quot;</div><div class=\"line\">    /usr/local/bin/rz -E -e -b</div><div class=\"line\">    sleep 1</div><div class=\"line\">    echo</div><div class=\"line\">    echo</div><div class=\"line\">    echo \\# Sent \\-\\&gt; $FILE</div><div class=\"line\">fi</div></pre></td></tr></table></figure>\n<h2 id=\"配置iterm2\"><a href=\"#配置iterm2\" class=\"headerlink\" title=\"配置iterm2\"></a>配置iterm2</h2><ul>\n<li>设置Iterm2的Tirgger特性，profiles-default-editProfiles-Advanced中的Tirgger</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">添加两条trigger，分别设置Regular expression，Action，Parameters，Instant如下：</div><div class=\"line\">    1.第一条</div><div class=\"line\">        Regular expression: rz waiting to receive.\\*\\*B0100</div><div class=\"line\">        Action: Run Silent Coprocess</div><div class=\"line\">        Parameters: /usr/local/bin/iterm2-send-zmodem.sh</div><div class=\"line\">        Instant: checked</div><div class=\"line\">    2.第二条</div><div class=\"line\">        Regular expression: \\*\\*B00000000000000</div><div class=\"line\">        Action: Run Silent Coprocess</div><div class=\"line\">        Parameters: /usr/local/bin/iterm2-recv-zmodem.sh</div><div class=\"line\">        Instant: checked</div></pre></td></tr></table></figure>\n<p><strong>备注</strong>:注意两个文件的权限</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>如何从linux服务下载/上传文件</p>\n<ul>\n<li>使用scp命令</li>\n<li>使用sz命令</li>\n</ul>\n<p>这里主要介绍使用sz命令下载文件</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><ul>\n<li>安装lrzsz <code>hobrew install llssz</code></li>\n<li>在本地编写shell用于接受sz命令下载下来的文件</li>\n</ul>\n<p>上传shell</p>\n<p><code>iterm2-send-zmodem.sh</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\">#!/bin/bash</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">#Author: Matt Mastracci (matthew@mastracci.com)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"># AppleScript from http://stackoverflow.com/questions/4309087/cancel-button-on-osascript-in-a-bash-script</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"># licensed under cc-wiki with attribution required</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"># Remainder of script public domain</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">osascript -e &apos;tell application &quot;iTerm2&quot; to version&apos; &gt; /dev/null 2&gt;&amp;1 &amp;&amp; NAME=iTerm2 || NAME=iTerm</div><div class=\"line\">if [[ $NAME = &quot;iTerm&quot; ]]; then</div><div class=\"line\">    FILE=`osascript -e &apos;tell application &quot;iTerm&quot; to activate&apos; -e &apos;tell application &quot;iTerm&quot; to set thefile to choose file with prompt &quot;Choose a file to send&quot;&apos; -e &quot;do shell script (\\&quot;echo \\&quot;&amp;(quoted form of POSIX path of thefile as Unicode text)&amp;\\&quot;\\&quot;)&quot;`</div><div class=\"line\">else</div><div class=\"line\">    FILE=`osascript -e &apos;tell application &quot;iTerm2&quot; to activate&apos; -e &apos;tell application &quot;iTerm2&quot; to set thefile to choose file with prompt &quot;Choose a file to send&quot;&apos; -e &quot;do shell script (\\&quot;echo \\&quot;&amp;(quoted form of POSIX path of thefile as Unicode text)&amp;\\&quot;\\&quot;)&quot;`</div><div class=\"line\">fi</div><div class=\"line\">if [[ $FILE = &quot;&quot; ]]; then</div><div class=\"line\">    echo Cancelled.</div><div class=\"line\">    # Send ZModem cancel</div><div class=\"line\">    echo -e \\\\x18\\\\x18\\\\x18\\\\x18\\\\x18</div><div class=\"line\">    sleep 1</div><div class=\"line\">    echo</div><div class=\"line\">    echo \\# Cancelled transfer</div><div class=\"line\">else</div><div class=\"line\">    /usr/local/bin/sz &quot;$FILE&quot; -e -b</div><div class=\"line\">    sleep 1</div><div class=\"line\">    echo</div><div class=\"line\">    echo \\# Received $FILE</div><div class=\"line\">fi</div></pre></td></tr></table></figure></p>\n<p>下载shell</p>\n<p><code>iterm2-recv-zmodem.sh</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">#!/bin/bash</div><div class=\"line\"># Author: Matt Mastracci (matthew@mastracci.com)</div><div class=\"line\"># AppleScript from http://stackoverflow.com/questions/4309087/cancel-button-on-osascript-in-a-bash-script</div><div class=\"line\"># licensed under cc-wiki with attribution required </div><div class=\"line\"># Remainder of script public domain</div><div class=\"line\"></div><div class=\"line\">osascript -e &apos;tell application &quot;iTerm2&quot; to version&apos; &gt; /dev/null 2&gt;&amp;1 &amp;&amp; NAME=iTerm2 || NAME=iTerm</div><div class=\"line\">if [[ $NAME = &quot;iTerm&quot; ]]; then</div><div class=\"line\">    FILE=`osascript -e &apos;tell application &quot;iTerm&quot; to activate&apos; -e &apos;tell application &quot;iTerm&quot; to set thefile to choose folder with prompt &quot;Choose a folder to place received files in&quot;&apos; -e &quot;do shell script (\\&quot;echo \\&quot;&amp;(quoted form of POSIX path of thefile as Unicode text)&amp;\\&quot;\\&quot;)&quot;`</div><div class=\"line\">else</div><div class=\"line\">    FILE=`osascript -e &apos;tell application &quot;iTerm2&quot; to activate&apos; -e &apos;tell application &quot;iTerm2&quot; to set thefile to choose folder with prompt &quot;Choose a folder to place received files in&quot;&apos; -e &quot;do shell script (\\&quot;echo \\&quot;&amp;(quoted form of POSIX path of thefile as Unicode text)&amp;\\&quot;\\&quot;)&quot;`</div><div class=\"line\">fi</div><div class=\"line\"></div><div class=\"line\">if [[ $FILE = &quot;&quot; ]]; then</div><div class=\"line\">    echo Cancelled.</div><div class=\"line\">    # Send ZModem cancel</div><div class=\"line\">    echo -e \\\\x18\\\\x18\\\\x18\\\\x18\\\\x18</div><div class=\"line\">    sleep 1</div><div class=\"line\">    echo</div><div class=\"line\">    echo \\# Cancelled transfer</div><div class=\"line\">else</div><div class=\"line\">    cd &quot;$FILE&quot;</div><div class=\"line\">    /usr/local/bin/rz -E -e -b</div><div class=\"line\">    sleep 1</div><div class=\"line\">    echo</div><div class=\"line\">    echo</div><div class=\"line\">    echo \\# Sent \\-\\&gt; $FILE</div><div class=\"line\">fi</div></pre></td></tr></table></figure>\n<h2 id=\"配置iterm2\"><a href=\"#配置iterm2\" class=\"headerlink\" title=\"配置iterm2\"></a>配置iterm2</h2><ul>\n<li>设置Iterm2的Tirgger特性，profiles-default-editProfiles-Advanced中的Tirgger</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">添加两条trigger，分别设置Regular expression，Action，Parameters，Instant如下：</div><div class=\"line\">    1.第一条</div><div class=\"line\">        Regular expression: rz waiting to receive.\\*\\*B0100</div><div class=\"line\">        Action: Run Silent Coprocess</div><div class=\"line\">        Parameters: /usr/local/bin/iterm2-send-zmodem.sh</div><div class=\"line\">        Instant: checked</div><div class=\"line\">    2.第二条</div><div class=\"line\">        Regular expression: \\*\\*B00000000000000</div><div class=\"line\">        Action: Run Silent Coprocess</div><div class=\"line\">        Parameters: /usr/local/bin/iterm2-recv-zmodem.sh</div><div class=\"line\">        Instant: checked</div></pre></td></tr></table></figure>\n<p><strong>备注</strong>:注意两个文件的权限</p>\n"},{"title":"微服务数据一致性和服务可靠性","grammar_cjkRuby":true,"_content":"\n![image](/photo/img/2018-06-19/servicePic1.png)\n\n  \n  ## 存在问题\n  我们的保证金服务现有结构是这个样子。\n在 1、2、3、4、5、6 各个阶段都会存在超时和异常问题，当负载少时，我们还可以手动人工处理，但是当数据量大的时候，问题或多的令人发指，沉浸于洗数据，无法自拔。。\n超时存在问题：\n1.当1、2、3 步骤超时时，下游服务可以忽略，当做执行失败，重试。\n2.当在环节4、5、6超时时，对于下游服务是也是执行失败，但是还可以重试么？\n\n\n## 如何提高服务可靠性\n对于上游服务，如何保证对下游提供可靠的服务。\n ### 补偿机制\n ![image](/photo/img/2018-06-19/servicePic5.png)\n 在服务间的调用失败时，可以记录失败调用，如队列，消费重试。但是前提一定是接口幂等。\n 但是这样并不能解决根本性问题，如果我们在调用保证金冻结服务时，失败此时我们冻结时报操作入队列，让队列异步消费，如果此时要解冻保证金，就会出现业务异常。\n \n **所以**补偿机制建议使用在 `不可避免的业务异常情况下使用`，我们应该尽可能的优化技术方案，来保证数据一致性，最后再采用补偿机制。\n ### 两段提交协议（2pc）\n![image](/photo/img/2018-06-19/servicePic4.png)\n\npreOperation 执行请求，在调用微服务前，执行预操作成功则表示此次操作可行。\n如果commit失败该如何处理？重新preOperetion嘛？如果接口幂等是否可以重复，commit？如何保证避免重复提交？\n在preOperation时，返回唯一操作ID，业务逻辑每个操作对应一个操作ID，commit失败就重试，当然前提是我们的上有服务接口幂等。\n\n![image](/photo/img/2018-06-19/servicePic3.png)\n即使是这样也会存在问题，如果保证金预操作成功，但是执行一直失败呢？我们必须提供回滚机制。\n![image](/photo/img/2018-06-19/servicePic2.png)\n1. 大量同步RPC依赖，如何保证自身服务可靠性？\n \t服务之间在调用的时候，会存在大量异常、超时。我该如何处理，认为这次是失败的？还是成功的？如果依赖的服务返回成功，才算成功的话，我改如何保证服务可靠性，该如何对我的下游服务提供可靠的服务。\n2. 调用依赖服务失败，如何降级处理？\n\t 在服务调用失败的时候，我的上游出错了，我该如何降级处理，我该重试？还是直接跳过，跳过后是否会造成微服务之间数据一致性问题。如果重试是否会造成重复提交，接口是否幂等？\n3. 是否还欠缺回滚机制？ \n","source":"_posts/微服务数据一致性和服务可靠性.md","raw":"---\ntitle: 微服务数据一致性和服务可靠性\ntags: 分布式,事务\ngrammar_cjkRuby: true\n---\n\n![image](/photo/img/2018-06-19/servicePic1.png)\n\n  \n  ## 存在问题\n  我们的保证金服务现有结构是这个样子。\n在 1、2、3、4、5、6 各个阶段都会存在超时和异常问题，当负载少时，我们还可以手动人工处理，但是当数据量大的时候，问题或多的令人发指，沉浸于洗数据，无法自拔。。\n超时存在问题：\n1.当1、2、3 步骤超时时，下游服务可以忽略，当做执行失败，重试。\n2.当在环节4、5、6超时时，对于下游服务是也是执行失败，但是还可以重试么？\n\n\n## 如何提高服务可靠性\n对于上游服务，如何保证对下游提供可靠的服务。\n ### 补偿机制\n ![image](/photo/img/2018-06-19/servicePic5.png)\n 在服务间的调用失败时，可以记录失败调用，如队列，消费重试。但是前提一定是接口幂等。\n 但是这样并不能解决根本性问题，如果我们在调用保证金冻结服务时，失败此时我们冻结时报操作入队列，让队列异步消费，如果此时要解冻保证金，就会出现业务异常。\n \n **所以**补偿机制建议使用在 `不可避免的业务异常情况下使用`，我们应该尽可能的优化技术方案，来保证数据一致性，最后再采用补偿机制。\n ### 两段提交协议（2pc）\n![image](/photo/img/2018-06-19/servicePic4.png)\n\npreOperation 执行请求，在调用微服务前，执行预操作成功则表示此次操作可行。\n如果commit失败该如何处理？重新preOperetion嘛？如果接口幂等是否可以重复，commit？如何保证避免重复提交？\n在preOperation时，返回唯一操作ID，业务逻辑每个操作对应一个操作ID，commit失败就重试，当然前提是我们的上有服务接口幂等。\n\n![image](/photo/img/2018-06-19/servicePic3.png)\n即使是这样也会存在问题，如果保证金预操作成功，但是执行一直失败呢？我们必须提供回滚机制。\n![image](/photo/img/2018-06-19/servicePic2.png)\n1. 大量同步RPC依赖，如何保证自身服务可靠性？\n \t服务之间在调用的时候，会存在大量异常、超时。我该如何处理，认为这次是失败的？还是成功的？如果依赖的服务返回成功，才算成功的话，我改如何保证服务可靠性，该如何对我的下游服务提供可靠的服务。\n2. 调用依赖服务失败，如何降级处理？\n\t 在服务调用失败的时候，我的上游出错了，我该如何降级处理，我该重试？还是直接跳过，跳过后是否会造成微服务之间数据一致性问题。如果重试是否会造成重复提交，接口是否幂等？\n3. 是否还欠缺回滚机制？ \n","slug":"微服务数据一致性和服务可靠性","published":1,"date":"2018-07-12T13:54:30.353Z","updated":"2018-07-12T13:54:30.353Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlz6uwha000p0uwwfqbj4awl","content":"<p><img src=\"/photo/img/2018-06-19/servicePic1.png\" alt=\"image\"></p>\n<h2 id=\"存在问题\"><a href=\"#存在问题\" class=\"headerlink\" title=\"存在问题\"></a>存在问题</h2><p>  我们的保证金服务现有结构是这个样子。<br>在 1、2、3、4、5、6 各个阶段都会存在超时和异常问题，当负载少时，我们还可以手动人工处理，但是当数据量大的时候，问题或多的令人发指，沉浸于洗数据，无法自拔。。<br>超时存在问题：<br>1.当1、2、3 步骤超时时，下游服务可以忽略，当做执行失败，重试。<br>2.当在环节4、5、6超时时，对于下游服务是也是执行失败，但是还可以重试么？</p>\n<h2 id=\"如何提高服务可靠性\"><a href=\"#如何提高服务可靠性\" class=\"headerlink\" title=\"如何提高服务可靠性\"></a>如何提高服务可靠性</h2><p>对于上游服务，如何保证对下游提供可靠的服务。</p>\n<h3 id=\"补偿机制\"><a href=\"#补偿机制\" class=\"headerlink\" title=\"补偿机制\"></a>补偿机制</h3><p> <img src=\"/photo/img/2018-06-19/servicePic5.png\" alt=\"image\"><br> 在服务间的调用失败时，可以记录失败调用，如队列，消费重试。但是前提一定是接口幂等。<br> 但是这样并不能解决根本性问题，如果我们在调用保证金冻结服务时，失败此时我们冻结时报操作入队列，让队列异步消费，如果此时要解冻保证金，就会出现业务异常。</p>\n<p> <strong>所以</strong>补偿机制建议使用在 <code>不可避免的业务异常情况下使用</code>，我们应该尽可能的优化技术方案，来保证数据一致性，最后再采用补偿机制。</p>\n<h3 id=\"两段提交协议（2pc）\"><a href=\"#两段提交协议（2pc）\" class=\"headerlink\" title=\"两段提交协议（2pc）\"></a>两段提交协议（2pc）</h3><p><img src=\"/photo/img/2018-06-19/servicePic4.png\" alt=\"image\"></p>\n<p>preOperation 执行请求，在调用微服务前，执行预操作成功则表示此次操作可行。<br>如果commit失败该如何处理？重新preOperetion嘛？如果接口幂等是否可以重复，commit？如何保证避免重复提交？<br>在preOperation时，返回唯一操作ID，业务逻辑每个操作对应一个操作ID，commit失败就重试，当然前提是我们的上有服务接口幂等。</p>\n<p><img src=\"/photo/img/2018-06-19/servicePic3.png\" alt=\"image\"><br>即使是这样也会存在问题，如果保证金预操作成功，但是执行一直失败呢？我们必须提供回滚机制。<br><img src=\"/photo/img/2018-06-19/servicePic2.png\" alt=\"image\"></p>\n<ol>\n<li>大量同步RPC依赖，如何保证自身服务可靠性？<br>  服务之间在调用的时候，会存在大量异常、超时。我该如何处理，认为这次是失败的？还是成功的？如果依赖的服务返回成功，才算成功的话，我改如何保证服务可靠性，该如何对我的下游服务提供可靠的服务。</li>\n<li>调用依赖服务失败，如何降级处理？<br>  在服务调用失败的时候，我的上游出错了，我该如何降级处理，我该重试？还是直接跳过，跳过后是否会造成微服务之间数据一致性问题。如果重试是否会造成重复提交，接口是否幂等？</li>\n<li>是否还欠缺回滚机制？ </li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"/photo/img/2018-06-19/servicePic1.png\" alt=\"image\"></p>\n<h2 id=\"存在问题\"><a href=\"#存在问题\" class=\"headerlink\" title=\"存在问题\"></a>存在问题</h2><p>  我们的保证金服务现有结构是这个样子。<br>在 1、2、3、4、5、6 各个阶段都会存在超时和异常问题，当负载少时，我们还可以手动人工处理，但是当数据量大的时候，问题或多的令人发指，沉浸于洗数据，无法自拔。。<br>超时存在问题：<br>1.当1、2、3 步骤超时时，下游服务可以忽略，当做执行失败，重试。<br>2.当在环节4、5、6超时时，对于下游服务是也是执行失败，但是还可以重试么？</p>\n<h2 id=\"如何提高服务可靠性\"><a href=\"#如何提高服务可靠性\" class=\"headerlink\" title=\"如何提高服务可靠性\"></a>如何提高服务可靠性</h2><p>对于上游服务，如何保证对下游提供可靠的服务。</p>\n<h3 id=\"补偿机制\"><a href=\"#补偿机制\" class=\"headerlink\" title=\"补偿机制\"></a>补偿机制</h3><p> <img src=\"/photo/img/2018-06-19/servicePic5.png\" alt=\"image\"><br> 在服务间的调用失败时，可以记录失败调用，如队列，消费重试。但是前提一定是接口幂等。<br> 但是这样并不能解决根本性问题，如果我们在调用保证金冻结服务时，失败此时我们冻结时报操作入队列，让队列异步消费，如果此时要解冻保证金，就会出现业务异常。</p>\n<p> <strong>所以</strong>补偿机制建议使用在 <code>不可避免的业务异常情况下使用</code>，我们应该尽可能的优化技术方案，来保证数据一致性，最后再采用补偿机制。</p>\n<h3 id=\"两段提交协议（2pc）\"><a href=\"#两段提交协议（2pc）\" class=\"headerlink\" title=\"两段提交协议（2pc）\"></a>两段提交协议（2pc）</h3><p><img src=\"/photo/img/2018-06-19/servicePic4.png\" alt=\"image\"></p>\n<p>preOperation 执行请求，在调用微服务前，执行预操作成功则表示此次操作可行。<br>如果commit失败该如何处理？重新preOperetion嘛？如果接口幂等是否可以重复，commit？如何保证避免重复提交？<br>在preOperation时，返回唯一操作ID，业务逻辑每个操作对应一个操作ID，commit失败就重试，当然前提是我们的上有服务接口幂等。</p>\n<p><img src=\"/photo/img/2018-06-19/servicePic3.png\" alt=\"image\"><br>即使是这样也会存在问题，如果保证金预操作成功，但是执行一直失败呢？我们必须提供回滚机制。<br><img src=\"/photo/img/2018-06-19/servicePic2.png\" alt=\"image\"></p>\n<ol>\n<li>大量同步RPC依赖，如何保证自身服务可靠性？<br>  服务之间在调用的时候，会存在大量异常、超时。我该如何处理，认为这次是失败的？还是成功的？如果依赖的服务返回成功，才算成功的话，我改如何保证服务可靠性，该如何对我的下游服务提供可靠的服务。</li>\n<li>调用依赖服务失败，如何降级处理？<br>  在服务调用失败的时候，我的上游出错了，我该如何降级处理，我该重试？还是直接跳过，跳过后是否会造成微服务之间数据一致性问题。如果重试是否会造成重复提交，接口是否幂等？</li>\n<li>是否还欠缺回滚机制？ </li>\n</ol>\n"},{"title":"我不是药神","date":"2018-07-13T14:44:43.000Z","_content":"\n\n一直以来都想成为一个坚强的人,但是生活中还是有很多时候让我情不自禁,一部电影被感动哭的稀里哗啦,\n不得不承认我是个泪点很低的人,但是我想这并不妨碍我成为一个坚强的人。\n\n看完点影,不禁想问自己几个问题:\n\n- 电影里徐峥错了么?好像并没有什么大错。尊重知识产权确实一个严肃的问题,不然社会没有前进的动力。\n- 警察错了么? 好像也没有错,秉公执法的警察才是好警察。\n- 病人错了么? 明明知道这是走私药,却仍然要买,我想对于想要活命的人来说,什么都无足轻重了。\n只有哪些真正历过生离死别,一直在生与死的边缘挣扎的人, 才知道生命的可贵。\n\n到底是哪里错了? 我想真的事像电影里所说的一样, 都是因为穷。如果穷是原罪的话,我想这个世界大多数人都犯了很重的罪。\n那么错在哪里, 我想我们的国家体制已经意识到了,她在改变。\n\n\n- 黄毛是个仗义的兄弟, 看到了黄毛, 这不禁让我想到我的高中, 想到了当我处于和别人争执的时候那些为我站出来的朋友。\n\n我想我一直是一个不善于表达的人, 无论对于父母, 伴侣, 还是朋友, 对于他们我一直都很吝啬赞美之词。\n\n\n- 最后一个问题, 如果我是徐峥, 我会站出来么? 当我事业有成的时候, 衣食无忧的时候, 家庭美满的时候, 我会为那些\n需要帮助的人站出来么?\n\n但是我知道, 那些站出来的背影真的很帅, 也值得我们尊敬。","source":"_posts/我不是药神.md","raw":"---\ntitle: 我不是药神\ndate: 2018-07-13 22:44:43\ntags:\n---\n\n\n一直以来都想成为一个坚强的人,但是生活中还是有很多时候让我情不自禁,一部电影被感动哭的稀里哗啦,\n不得不承认我是个泪点很低的人,但是我想这并不妨碍我成为一个坚强的人。\n\n看完点影,不禁想问自己几个问题:\n\n- 电影里徐峥错了么?好像并没有什么大错。尊重知识产权确实一个严肃的问题,不然社会没有前进的动力。\n- 警察错了么? 好像也没有错,秉公执法的警察才是好警察。\n- 病人错了么? 明明知道这是走私药,却仍然要买,我想对于想要活命的人来说,什么都无足轻重了。\n只有哪些真正历过生离死别,一直在生与死的边缘挣扎的人, 才知道生命的可贵。\n\n到底是哪里错了? 我想真的事像电影里所说的一样, 都是因为穷。如果穷是原罪的话,我想这个世界大多数人都犯了很重的罪。\n那么错在哪里, 我想我们的国家体制已经意识到了,她在改变。\n\n\n- 黄毛是个仗义的兄弟, 看到了黄毛, 这不禁让我想到我的高中, 想到了当我处于和别人争执的时候那些为我站出来的朋友。\n\n我想我一直是一个不善于表达的人, 无论对于父母, 伴侣, 还是朋友, 对于他们我一直都很吝啬赞美之词。\n\n\n- 最后一个问题, 如果我是徐峥, 我会站出来么? 当我事业有成的时候, 衣食无忧的时候, 家庭美满的时候, 我会为那些\n需要帮助的人站出来么?\n\n但是我知道, 那些站出来的背影真的很帅, 也值得我们尊敬。","slug":"我不是药神","published":1,"updated":"2018-07-13T15:08:55.702Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlz6uwhb000q0uww2my71aiq","content":"<p>一直以来都想成为一个坚强的人,但是生活中还是有很多时候让我情不自禁,一部电影被感动哭的稀里哗啦,<br>不得不承认我是个泪点很低的人,但是我想这并不妨碍我成为一个坚强的人。</p>\n<p>看完点影,不禁想问自己几个问题:</p>\n<ul>\n<li>电影里徐峥错了么?好像并没有什么大错。尊重知识产权确实一个严肃的问题,不然社会没有前进的动力。</li>\n<li>警察错了么? 好像也没有错,秉公执法的警察才是好警察。</li>\n<li>病人错了么? 明明知道这是走私药,却仍然要买,我想对于想要活命的人来说,什么都无足轻重了。<br>只有哪些真正历过生离死别,一直在生与死的边缘挣扎的人, 才知道生命的可贵。</li>\n</ul>\n<p>到底是哪里错了? 我想真的事像电影里所说的一样, 都是因为穷。如果穷是原罪的话,我想这个世界大多数人都犯了很重的罪。<br>那么错在哪里, 我想我们的国家体制已经意识到了,她在改变。</p>\n<ul>\n<li>黄毛是个仗义的兄弟, 看到了黄毛, 这不禁让我想到我的高中, 想到了当我处于和别人争执的时候那些为我站出来的朋友。</li>\n</ul>\n<p>我想我一直是一个不善于表达的人, 无论对于父母, 伴侣, 还是朋友, 对于他们我一直都很吝啬赞美之词。</p>\n<ul>\n<li>最后一个问题, 如果我是徐峥, 我会站出来么? 当我事业有成的时候, 衣食无忧的时候, 家庭美满的时候, 我会为那些<br>需要帮助的人站出来么?</li>\n</ul>\n<p>但是我知道, 那些站出来的背影真的很帅, 也值得我们尊敬。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>一直以来都想成为一个坚强的人,但是生活中还是有很多时候让我情不自禁,一部电影被感动哭的稀里哗啦,<br>不得不承认我是个泪点很低的人,但是我想这并不妨碍我成为一个坚强的人。</p>\n<p>看完点影,不禁想问自己几个问题:</p>\n<ul>\n<li>电影里徐峥错了么?好像并没有什么大错。尊重知识产权确实一个严肃的问题,不然社会没有前进的动力。</li>\n<li>警察错了么? 好像也没有错,秉公执法的警察才是好警察。</li>\n<li>病人错了么? 明明知道这是走私药,却仍然要买,我想对于想要活命的人来说,什么都无足轻重了。<br>只有哪些真正历过生离死别,一直在生与死的边缘挣扎的人, 才知道生命的可贵。</li>\n</ul>\n<p>到底是哪里错了? 我想真的事像电影里所说的一样, 都是因为穷。如果穷是原罪的话,我想这个世界大多数人都犯了很重的罪。<br>那么错在哪里, 我想我们的国家体制已经意识到了,她在改变。</p>\n<ul>\n<li>黄毛是个仗义的兄弟, 看到了黄毛, 这不禁让我想到我的高中, 想到了当我处于和别人争执的时候那些为我站出来的朋友。</li>\n</ul>\n<p>我想我一直是一个不善于表达的人, 无论对于父母, 伴侣, 还是朋友, 对于他们我一直都很吝啬赞美之词。</p>\n<ul>\n<li>最后一个问题, 如果我是徐峥, 我会站出来么? 当我事业有成的时候, 衣食无忧的时候, 家庭美满的时候, 我会为那些<br>需要帮助的人站出来么?</li>\n</ul>\n<p>但是我知道, 那些站出来的背影真的很帅, 也值得我们尊敬。</p>\n"},{"title":"设计模式1","date":"2018-08-01T12:53:15.000Z","_content":"## builder 模式\n\nbuilder 建造者模式,又称生成器模式。\n\n建造者模式是为了简化 使用多个建单的对象构建成一个复杂对象的 设计模式。 属于创建型模式。\n\n代码示例\n\n```php\n\n    publish class SmallWheel()\n    {\n        \n    }\n    \n    publish class BigWheel()\n    {\n        \n    }\n    \n    publish class SmallCar()\n    {\n        publish $wheel;\n    }\n    \n    publish class BigCar()\n    {\n        publish $wheel;\n    }\n\n```\n\n以上为零件。\n\n```php\n    \n    publish CarBuilder()\n    {\n        //创建小轿车\n        publish function getSmallCar()\n        {\n            $smallCar = new SmallCar();\n            $smallCar->whell = new SmallWheel();\n            return $smallCar;\n        }\n        \n        //创建大轿车\n        publish function getBigCar()\n        {\n            $bigCar = new BigCar();\n            $bigCar->whell = new BigWheel();\n            return $bigCar;\n        }\n    }\n```\n\n调度 \n\n```php\n\n    $carBuilder = new CArBuilder();\n    \n    $smallCar = $carBuilder->getSmallCar();\n    $bigCar = $carBuilder->getBigCar();\n```\n\n\n备注:\n\n建造者模式与工厂模式区别:\n工厂模式用于批量创建那哪一种类, 建造者模式更注重构建过程。\n\n\n## template method \n\n模板方法:定义一个抽象类或者/父类,由继承它的子类按照需求重写它的方法实现。\n\neg:\n\n```php\n\n    publish abstract class Car()\n    {\n        //强制子类实现\n        abstract public function run();\n        abstract public function turnOnTheLight();\n        //不强制\n        public function palyMusic()\n        {\n            return 'hengheng hahei';\n        }\n    }\n    \n```\n继承\n\n```php\n    public class SmaCar extends car \n    {\n        public function run()\n        {\n            return 'run';\n        }\n        \n        public funtion turnOnTheLight()\n        {\n            return 'turnOnTheLight';\n        }\n    }\n```\n    \n以上\n","source":"_posts/设计模式1.md","raw":"---\ntitle: 设计模式1\ndate: 2018-08-01 20:53:15\ntags: builder template method\n---\n## builder 模式\n\nbuilder 建造者模式,又称生成器模式。\n\n建造者模式是为了简化 使用多个建单的对象构建成一个复杂对象的 设计模式。 属于创建型模式。\n\n代码示例\n\n```php\n\n    publish class SmallWheel()\n    {\n        \n    }\n    \n    publish class BigWheel()\n    {\n        \n    }\n    \n    publish class SmallCar()\n    {\n        publish $wheel;\n    }\n    \n    publish class BigCar()\n    {\n        publish $wheel;\n    }\n\n```\n\n以上为零件。\n\n```php\n    \n    publish CarBuilder()\n    {\n        //创建小轿车\n        publish function getSmallCar()\n        {\n            $smallCar = new SmallCar();\n            $smallCar->whell = new SmallWheel();\n            return $smallCar;\n        }\n        \n        //创建大轿车\n        publish function getBigCar()\n        {\n            $bigCar = new BigCar();\n            $bigCar->whell = new BigWheel();\n            return $bigCar;\n        }\n    }\n```\n\n调度 \n\n```php\n\n    $carBuilder = new CArBuilder();\n    \n    $smallCar = $carBuilder->getSmallCar();\n    $bigCar = $carBuilder->getBigCar();\n```\n\n\n备注:\n\n建造者模式与工厂模式区别:\n工厂模式用于批量创建那哪一种类, 建造者模式更注重构建过程。\n\n\n## template method \n\n模板方法:定义一个抽象类或者/父类,由继承它的子类按照需求重写它的方法实现。\n\neg:\n\n```php\n\n    publish abstract class Car()\n    {\n        //强制子类实现\n        abstract public function run();\n        abstract public function turnOnTheLight();\n        //不强制\n        public function palyMusic()\n        {\n            return 'hengheng hahei';\n        }\n    }\n    \n```\n继承\n\n```php\n    public class SmaCar extends car \n    {\n        public function run()\n        {\n            return 'run';\n        }\n        \n        public funtion turnOnTheLight()\n        {\n            return 'turnOnTheLight';\n        }\n    }\n```\n    \n以上\n","slug":"设计模式1","published":1,"updated":"2018-08-02T10:12:34.678Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlz6uwhc000t0uwwsuiladun","content":"<h2 id=\"builder-模式\"><a href=\"#builder-模式\" class=\"headerlink\" title=\"builder 模式\"></a>builder 模式</h2><p>builder 建造者模式,又称生成器模式。</p>\n<p>建造者模式是为了简化 使用多个建单的对象构建成一个复杂对象的 设计模式。 属于创建型模式。</p>\n<p>代码示例</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">publish class SmallWheel()</div><div class=\"line\">&#123;</div><div class=\"line\">    </div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">publish class BigWheel()</div><div class=\"line\">&#123;</div><div class=\"line\">    </div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">publish class SmallCar()</div><div class=\"line\">&#123;</div><div class=\"line\">    publish $wheel;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">publish class BigCar()</div><div class=\"line\">&#123;</div><div class=\"line\">    publish $wheel;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>以上为零件。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">publish CarBuilder()</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">//创建小轿车</span></div><div class=\"line\">    publish <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getSmallCar</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        $smallCar = <span class=\"keyword\">new</span> SmallCar();</div><div class=\"line\">        $smallCar-&gt;whell = <span class=\"keyword\">new</span> SmallWheel();</div><div class=\"line\">        <span class=\"keyword\">return</span> $smallCar;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//创建大轿车</span></div><div class=\"line\">    publish <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getBigCar</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        $bigCar = <span class=\"keyword\">new</span> BigCar();</div><div class=\"line\">        $bigCar-&gt;whell = <span class=\"keyword\">new</span> BigWheel();</div><div class=\"line\">        <span class=\"keyword\">return</span> $bigCar;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>调度 </p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">$carBuilder = <span class=\"keyword\">new</span> CArBuilder();</div><div class=\"line\"></div><div class=\"line\">$smallCar = $carBuilder-&gt;getSmallCar();</div><div class=\"line\">$bigCar = $carBuilder-&gt;getBigCar();</div></pre></td></tr></table></figure>\n<p>备注:</p>\n<p>建造者模式与工厂模式区别:<br>工厂模式用于批量创建那哪一种类, 建造者模式更注重构建过程。</p>\n<h2 id=\"template-method\"><a href=\"#template-method\" class=\"headerlink\" title=\"template method\"></a>template method</h2><p>模板方法:定义一个抽象类或者/父类,由继承它的子类按照需求重写它的方法实现。</p>\n<p>eg:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">publish abstract class Car()</div><div class=\"line\">&#123;</div><div class=\"line\">    //强制子类实现</div><div class=\"line\">    abstract public function run();</div><div class=\"line\">    abstract public function turnOnTheLight();</div><div class=\"line\">    //不强制</div><div class=\"line\">    public function palyMusic()</div><div class=\"line\">    &#123;</div><div class=\"line\">        return 'hengheng hahei';</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>继承</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SmaCar</span> <span class=\"keyword\">extends</span> <span class=\"title\">car</span> </span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">run</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'run'</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">public</span> funtion turnOnTheLight()</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'turnOnTheLight'</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>以上</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"builder-模式\"><a href=\"#builder-模式\" class=\"headerlink\" title=\"builder 模式\"></a>builder 模式</h2><p>builder 建造者模式,又称生成器模式。</p>\n<p>建造者模式是为了简化 使用多个建单的对象构建成一个复杂对象的 设计模式。 属于创建型模式。</p>\n<p>代码示例</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">publish class SmallWheel()</div><div class=\"line\">&#123;</div><div class=\"line\">    </div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">publish class BigWheel()</div><div class=\"line\">&#123;</div><div class=\"line\">    </div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">publish class SmallCar()</div><div class=\"line\">&#123;</div><div class=\"line\">    publish $wheel;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">publish class BigCar()</div><div class=\"line\">&#123;</div><div class=\"line\">    publish $wheel;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>以上为零件。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">publish CarBuilder()</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">//创建小轿车</span></div><div class=\"line\">    publish <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getSmallCar</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        $smallCar = <span class=\"keyword\">new</span> SmallCar();</div><div class=\"line\">        $smallCar-&gt;whell = <span class=\"keyword\">new</span> SmallWheel();</div><div class=\"line\">        <span class=\"keyword\">return</span> $smallCar;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//创建大轿车</span></div><div class=\"line\">    publish <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getBigCar</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        $bigCar = <span class=\"keyword\">new</span> BigCar();</div><div class=\"line\">        $bigCar-&gt;whell = <span class=\"keyword\">new</span> BigWheel();</div><div class=\"line\">        <span class=\"keyword\">return</span> $bigCar;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>调度 </p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">$carBuilder = <span class=\"keyword\">new</span> CArBuilder();</div><div class=\"line\"></div><div class=\"line\">$smallCar = $carBuilder-&gt;getSmallCar();</div><div class=\"line\">$bigCar = $carBuilder-&gt;getBigCar();</div></pre></td></tr></table></figure>\n<p>备注:</p>\n<p>建造者模式与工厂模式区别:<br>工厂模式用于批量创建那哪一种类, 建造者模式更注重构建过程。</p>\n<h2 id=\"template-method\"><a href=\"#template-method\" class=\"headerlink\" title=\"template method\"></a>template method</h2><p>模板方法:定义一个抽象类或者/父类,由继承它的子类按照需求重写它的方法实现。</p>\n<p>eg:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">publish abstract class Car()</div><div class=\"line\">&#123;</div><div class=\"line\">    //强制子类实现</div><div class=\"line\">    abstract public function run();</div><div class=\"line\">    abstract public function turnOnTheLight();</div><div class=\"line\">    //不强制</div><div class=\"line\">    public function palyMusic()</div><div class=\"line\">    &#123;</div><div class=\"line\">        return 'hengheng hahei';</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>继承</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SmaCar</span> <span class=\"keyword\">extends</span> <span class=\"title\">car</span> </span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">run</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'run'</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">public</span> funtion turnOnTheLight()</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'turnOnTheLight'</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>以上</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cjlz6uwgt000a0uwwmhvozrv2","tag_id":"cjlz6uwgv000c0uww3g2kx3ak","_id":"cjlz6uwh2000g0uwwfiyelo6t"},{"post_id":"cjlz6uwh6000l0uwwyjepftw9","tag_id":"cjlz6uwh8000n0uwwrcsguqn4","_id":"cjlz6uwhc000s0uww53lexdij"},{"post_id":"cjlz6uwha000p0uwwfqbj4awl","tag_id":"cjlz6uwhc000r0uwwx2048iyy","_id":"cjlz6uwhd000v0uww5693itos"},{"post_id":"cjlz6uwhc000t0uwwsuiladun","tag_id":"cjlz6uwhd000u0uwwm74pfm10","_id":"cjlz6uwhd000w0uww2v98kykx"}],"Tag":[{"name":"curl","_id":"cjlz6uwgv000c0uww3g2kx3ak"},{"name":"python, shell, crond","_id":"cjlz6uwh8000n0uwwrcsguqn4"},{"name":"分布式,事务","_id":"cjlz6uwhc000r0uwwx2048iyy"},{"name":"builder template method","_id":"cjlz6uwhd000u0uwwm74pfm10"}]}}